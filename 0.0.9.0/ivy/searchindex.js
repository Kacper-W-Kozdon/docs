Search.setIndex({"docnames": ["demos/README", "demos/assets/01_template", "demos/examples_and_demos", "demos/examples_and_demos/alexnet_demo", "demos/examples_and_demos/bert_demo", "demos/examples_and_demos/convnext_to_torch", "demos/examples_and_demos/dinov2_to_paddle", "demos/examples_and_demos/image_segmentation_with_ivy_unet", "demos/examples_and_demos/lstm_tensorflow_to_torch", "demos/examples_and_demos/lstm_torch_to_tensorflow", "demos/examples_and_demos/mmpretrain_to_jax", "demos/examples_and_demos/resnet_demo", "demos/examples_and_demos/torch_to_jax", "demos/examples_and_demos/xgboost_demo", "demos/guides", "demos/guides/01_transpiling_a_torch_model", "demos/guides/02_transpiling_a_haiku_model", "demos/guides/03_transpiling_a_tf_model", "demos/guides/04_developing_a_convnet_with_ivy", "demos/index", "demos/learn_the_basics", "demos/learn_the_basics/01_write_ivy_code", "demos/learn_the_basics/02_unify_code", "demos/learn_the_basics/03_trace_code", "demos/learn_the_basics/04_transpile_code", "demos/learn_the_basics/05_lazy_vs_eager", "demos/learn_the_basics/06_how_to_use_decorators", "demos/learn_the_basics/07_transpile_any_library", "demos/learn_the_basics/08_transpile_any_model", "demos/learn_the_basics/09_write_a_model_using_ivy", "demos/misc/odsc", "demos/quickstart", "demos/wip/0_building_blocks/0_0_unify", "demos/wip/0_building_blocks/0_1_compile", "demos/wip/0_building_blocks/0_2_transpile", "demos/wip/1_the_basics/1_0_lazy_vs_eager", "demos/wip/1_the_basics/1_1_framework_selection", "demos/wip/1_the_basics/1_2_as_a_decorator", "demos/wip/1_the_basics/1_3_dynamic_vs_static", "demos/wip/2_libraries/2_0_kornia", "demos/wip/3_models/3_0_perceiver", "demos/wip/3_models/3_1_stable_diffusion", "demos/wip/basic_operations_with_ivy", "demos/wip/compilation_of_a_basic_function", "demos/wip/deepmind_perceiver_io", "demos/wip/deepmind_perceiverio", "demos/wip/end_to_end_training_pipeline_in_ivy", "demos/wip/hf_tensorflow_deit", "demos/wip/ivy_as_a_transpiler_intro", "demos/wip/resnet_18", "docs/data_classes/data_classes/array/ivy.data_classes.array.activations", "docs/data_classes/data_classes/array/ivy.data_classes.array.conversions", "docs/data_classes/data_classes/array/ivy.data_classes.array.creation", "docs/data_classes/data_classes/array/ivy.data_classes.array.data_type", "docs/data_classes/data_classes/array/ivy.data_classes.array.device", "docs/data_classes/data_classes/array/ivy.data_classes.array.elementwise", "docs/data_classes/data_classes/array/ivy.data_classes.array.experimental", "docs/data_classes/data_classes/array/ivy.data_classes.array.general", "docs/data_classes/data_classes/array/ivy.data_classes.array.gradients", "docs/data_classes/data_classes/array/ivy.data_classes.array.image", "docs/data_classes/data_classes/array/ivy.data_classes.array.layers", "docs/data_classes/data_classes/array/ivy.data_classes.array.linear_algebra", "docs/data_classes/data_classes/array/ivy.data_classes.array.losses", "docs/data_classes/data_classes/array/ivy.data_classes.array.manipulation", "docs/data_classes/data_classes/array/ivy.data_classes.array.norms", "docs/data_classes/data_classes/array/ivy.data_classes.array.random", "docs/data_classes/data_classes/array/ivy.data_classes.array.searching", "docs/data_classes/data_classes/array/ivy.data_classes.array.set", "docs/data_classes/data_classes/array/ivy.data_classes.array.sorting", "docs/data_classes/data_classes/array/ivy.data_classes.array.statistical", "docs/data_classes/data_classes/array/ivy.data_classes.array.utility", "docs/data_classes/data_classes/array/ivy.data_classes.array.wrapping", "docs/data_classes/data_classes/container/ivy.data_classes.container.activations", "docs/data_classes/data_classes/container/ivy.data_classes.container.base", "docs/data_classes/data_classes/container/ivy.data_classes.container.conversions", "docs/data_classes/data_classes/container/ivy.data_classes.container.creation", "docs/data_classes/data_classes/container/ivy.data_classes.container.data_type", "docs/data_classes/data_classes/container/ivy.data_classes.container.device", "docs/data_classes/data_classes/container/ivy.data_classes.container.elementwise", "docs/data_classes/data_classes/container/ivy.data_classes.container.experimental", "docs/data_classes/data_classes/container/ivy.data_classes.container.general", "docs/data_classes/data_classes/container/ivy.data_classes.container.gradients", "docs/data_classes/data_classes/container/ivy.data_classes.container.image", "docs/data_classes/data_classes/container/ivy.data_classes.container.layers", "docs/data_classes/data_classes/container/ivy.data_classes.container.linear_algebra", "docs/data_classes/data_classes/container/ivy.data_classes.container.losses", "docs/data_classes/data_classes/container/ivy.data_classes.container.manipulation", "docs/data_classes/data_classes/container/ivy.data_classes.container.norms", "docs/data_classes/data_classes/container/ivy.data_classes.container.random", "docs/data_classes/data_classes/container/ivy.data_classes.container.searching", "docs/data_classes/data_classes/container/ivy.data_classes.container.set", "docs/data_classes/data_classes/container/ivy.data_classes.container.sorting", "docs/data_classes/data_classes/container/ivy.data_classes.container.statistical", "docs/data_classes/data_classes/container/ivy.data_classes.container.utility", "docs/data_classes/data_classes/container/ivy.data_classes.container.wrapping", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.base", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.cp_tensor", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.parafac2_tensor", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.tr_tensor", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.tt_tensor", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.tucker_tensor", "docs/data_classes/data_classes/ivy.data_classes.array", "docs/data_classes/data_classes/ivy.data_classes.container", "docs/data_classes/data_classes/ivy.data_classes.factorized_tensor", "docs/data_classes/data_classes/ivy.data_classes.nested_array", "docs/data_classes/data_classes/nested_array/ivy.data_classes.nested_array.base", "docs/data_classes/data_classes/nested_array/ivy.data_classes.nested_array.elementwise", "docs/data_classes/ivy.data_classes", "docs/functional/ivy.functional.ivy", "docs/functional/ivy/activations/ivy.functional.ivy.activations.gelu", "docs/functional/ivy/activations/ivy.functional.ivy.activations.hardswish", "docs/functional/ivy/activations/ivy.functional.ivy.activations.leaky_relu", "docs/functional/ivy/activations/ivy.functional.ivy.activations.log_softmax", "docs/functional/ivy/activations/ivy.functional.ivy.activations.mish", "docs/functional/ivy/activations/ivy.functional.ivy.activations.relu", "docs/functional/ivy/activations/ivy.functional.ivy.activations.sigmoid", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softmax", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softplus", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softsign", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.cmp_is", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.cmp_isnot", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.for_loop", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.if_else", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.try_except", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.while_loop", "docs/functional/ivy/creation/ivy.functional.ivy.creation.arange", "docs/functional/ivy/creation/ivy.functional.ivy.creation.array", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray", "docs/functional/ivy/creation/ivy.functional.ivy.creation.copy_array", "docs/functional/ivy/creation/ivy.functional.ivy.creation.empty", "docs/functional/ivy/creation/ivy.functional.ivy.creation.empty_like", "docs/functional/ivy/creation/ivy.functional.ivy.creation.eye", "docs/functional/ivy/creation/ivy.functional.ivy.creation.from_dlpack", "docs/functional/ivy/creation/ivy.functional.ivy.creation.frombuffer", "docs/functional/ivy/creation/ivy.functional.ivy.creation.full", "docs/functional/ivy/creation/ivy.functional.ivy.creation.full_like", "docs/functional/ivy/creation/ivy.functional.ivy.creation.linspace", "docs/functional/ivy/creation/ivy.functional.ivy.creation.logspace", "docs/functional/ivy/creation/ivy.functional.ivy.creation.meshgrid", "docs/functional/ivy/creation/ivy.functional.ivy.creation.native_array", "docs/functional/ivy/creation/ivy.functional.ivy.creation.one_hot", "docs/functional/ivy/creation/ivy.functional.ivy.creation.ones", "docs/functional/ivy/creation/ivy.functional.ivy.creation.ones_like", "docs/functional/ivy/creation/ivy.functional.ivy.creation.to_dlpack", "docs/functional/ivy/creation/ivy.functional.ivy.creation.tril", "docs/functional/ivy/creation/ivy.functional.ivy.creation.triu", "docs/functional/ivy/creation/ivy.functional.ivy.creation.triu_indices", "docs/functional/ivy/creation/ivy.functional.ivy.creation.zeros", "docs/functional/ivy/creation/ivy.functional.ivy.creation.zeros_like", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.as_ivy_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.as_native_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.astype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.broadcast_arrays", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.broadcast_to", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.can_cast", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.check_float", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.closest_valid_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_complex_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_float_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_int_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_uint_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.dtype_bits", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.finfo", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.function_supported_dtypes", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.function_unsupported_dtypes", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.iinfo", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.infer_default_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.invalid_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_bool_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_complex_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_float_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_hashable_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_int_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_native_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_uint_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.promote_types", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.promote_types_of_inputs", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.result_type", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_complex_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_float_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_int_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_uint_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.type_promote_arrays", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_complex_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_float_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_int_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_uint_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.valid_dtype", "docs/functional/ivy/device/ivy.functional.ivy.device.as_ivy_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.as_native_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.clear_cached_mem_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.default_device", "docs/functional/ivy/device/ivy.functional.ivy.device.dev", "docs/functional/ivy/device/ivy.functional.ivy.device.dev_util", "docs/functional/ivy/device/ivy.functional.ivy.device.function_supported_devices", "docs/functional/ivy/device/ivy.functional.ivy.device.function_unsupported_devices", "docs/functional/ivy/device/ivy.functional.ivy.device.get_all_ivy_arrays_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.gpu_is_available", "docs/functional/ivy/device/ivy.functional.ivy.device.handle_soft_device_variable", "docs/functional/ivy/device/ivy.functional.ivy.device.num_cpu_cores", "docs/functional/ivy/device/ivy.functional.ivy.device.num_gpus", "docs/functional/ivy/device/ivy.functional.ivy.device.num_ivy_arrays_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.percent_used_mem_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.print_all_ivy_arrays_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.set_default_device", "docs/functional/ivy/device/ivy.functional.ivy.device.set_soft_device_mode", "docs/functional/ivy/device/ivy.functional.ivy.device.set_split_factor", "docs/functional/ivy/device/ivy.functional.ivy.device.split_factor", "docs/functional/ivy/device/ivy.functional.ivy.device.split_func_call", "docs/functional/ivy/device/ivy.functional.ivy.device.to_device", "docs/functional/ivy/device/ivy.functional.ivy.device.total_mem_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.tpu_is_available", "docs/functional/ivy/device/ivy.functional.ivy.device.unset_default_device", "docs/functional/ivy/device/ivy.functional.ivy.device.unset_soft_device_mode", "docs/functional/ivy/device/ivy.functional.ivy.device.used_mem_on_dev", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.abs", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.acos", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.acosh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.add", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.angle", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.asin", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.asinh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atan", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atan2", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atanh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_and", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_invert", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_left_shift", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_or", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_right_shift", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_xor", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.ceil", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.cos", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.cosh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.deg2rad", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.divide", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.equal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.erf", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.exp", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.exp2", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.expm1", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.floor", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.floor_divide", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.fmin", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.fmod", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.gcd", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.greater", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.greater_equal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.imag", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isfinite", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isinf", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isnan", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isreal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.lcm", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.less", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.less_equal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log10", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log1p", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log2", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logaddexp", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logaddexp2", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_and", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_not", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_or", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_xor", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.maximum", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.minimum", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.multiply", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.nan_to_num", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.negative", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.not_equal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.positive", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.pow", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.rad2deg", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.real", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.reciprocal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.remainder", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.round", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sign", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sin", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sinh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sqrt", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.square", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.subtract", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.tan", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.tanh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trapz", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trunc", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trunc_divide", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.celu", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.elu", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.hardshrink", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.hardsilu", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.hardtanh", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.logit", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.logsigmoid", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.prelu", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.relu6", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.scaled_tanh", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.selu", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.silu", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.softshrink", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.stanh", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.tanhshrink", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.threshold", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.thresholded_relu", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.blackman_window", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.eye_like", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.hamming_window", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.hann_window", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.indices", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.kaiser_bessel_derived_window", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.kaiser_window", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.mel_weight_matrix", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.ndenumerate", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.ndindex", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.polyval", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_cp", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_parafac2", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_tr", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_tt", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_tucker", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.tril_indices", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.trilu", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.unsorted_segment_mean", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.unsorted_segment_min", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.unsorted_segment_sum", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.vorbis_window", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.allclose", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.amax", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.amin", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.binarizer", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.conj", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.copysign", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.count_nonzero", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.diff", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.digamma", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.erfc", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.erfinv", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.fix", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.float_power", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.fmax", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.frexp", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.gradient", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.hypot", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.isclose", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.ldexp", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.lerp", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.lgamma", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.modf", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.nansum", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.nextafter", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.signbit", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.sinc", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.sparsify_tensor", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.xlogy", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.zeta", "docs/functional/ivy/experimental/general/ivy.functional.ivy.experimental.general.reduce", "docs/functional/ivy/experimental/gradients/ivy.functional.ivy.experimental.gradients.bind_custom_gradient_function", "docs/functional/ivy/experimental/gradients/ivy.functional.ivy.experimental.gradients.jvp", "docs/functional/ivy/experimental/gradients/ivy.functional.ivy.experimental.gradients.vjp", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.activations", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.constants", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.creation", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.data_type", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.device", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.elementwise", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.general", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.gradients", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.layers", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.linear_algebra", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.losses", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.manipulation", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.meta", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.nest", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.norms", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.random", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.searching", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.set", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.sorting", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.sparse_array", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.statistical", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.utility", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_avg_pool1d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_avg_pool2d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_max_pool2d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_max_pool3d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.area_interpolate", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool1d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool2d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool3d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dct", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dft", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout1d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout2d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout3d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.embedding", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.fft", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.fft2", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.generate_einsum_equation", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.get_interpolate_kernel", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.idct", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.ifft", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.ifftn", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.interp", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.interpolate", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool1d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool2d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool3d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_unpool1d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.nearest_interpolate", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.pool", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.reduce_window", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.rfft", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.rfftn", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.rnn", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.sliding_window", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.stft", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.adjoint", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.batched_outer", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.cond", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.diagflat", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.dot", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eig", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eigh_tridiagonal", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eigvals", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.general_inner_product", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.higher_order_moment", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.initialize_tucker", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.khatri_rao", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.kron", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.kronecker", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.lu_factor", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.lu_solve", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.make_svd_non_negative", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.matrix_exp", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.mode_dot", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.multi_dot", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.multi_mode_dot", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.partial_tucker", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.solve_triangular", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.svd_flip", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.tensor_train", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.truncated_svd", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.tt_matrix_to_tensor", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.tucker", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.hinge_embedding_loss", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.huber_loss", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.kl_div", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.l1_loss", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.log_poisson_loss", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.poisson_nll_loss", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.smooth_l1_loss", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.soft_margin_loss", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.as_strided", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.associative_scan", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_1d", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_2d", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_3d", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.broadcast_shapes", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.check_scalar", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.choose", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.column_stack", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.concat_from_sequence", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.dsplit", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.dstack", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.expand", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fill_diagonal", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.flatten", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fliplr", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.flipud", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fold", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.heaviside", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.hsplit", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.hstack", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.i0", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.matricize", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.moveaxis", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.pad", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_fold", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_tensor_to_vec", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_unfold", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_vec_to_tensor", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.put_along_axis", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.rot90", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.soft_thresholding", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.take", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.take_along_axis", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.top_k", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.trim_zeros", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.unflatten", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.unfold", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.unique_consecutive", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.vsplit", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.vstack", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.batch_norm", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.group_norm", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.instance_norm", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.l1_normalize", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.l2_normalize", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.local_response_norm", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.lp_normalize", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.bernoulli", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.beta", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.dirichlet", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.gamma", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.poisson", "docs/functional/ivy/experimental/searching/ivy.functional.ivy.experimental.searching.unravel_index", "docs/functional/ivy/experimental/sorting/ivy.functional.ivy.experimental.sorting.invert_permutation", "docs/functional/ivy/experimental/sorting/ivy.functional.ivy.experimental.sorting.lexsort", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.is_ivy_sparse_array", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.is_native_sparse_array", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.native_sparse_array", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.native_sparse_array_to_indices_values_and_shape", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.bincount", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.corrcoef", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cov", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cummax", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cummin", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.histogram", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.igamma", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.median", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanmean", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanmedian", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanmin", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanprod", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.quantile", "docs/functional/ivy/experimental/utility/ivy.functional.ivy.experimental.utility.optional_get_element", "docs/functional/ivy/general/ivy.functional.ivy.general.all_equal", "docs/functional/ivy/general/ivy.functional.ivy.general.arg_info", "docs/functional/ivy/general/ivy.functional.ivy.general.arg_names", "docs/functional/ivy/general/ivy.functional.ivy.general.array_equal", "docs/functional/ivy/general/ivy.functional.ivy.general.assert_supports_inplace", "docs/functional/ivy/general/ivy.functional.ivy.general.cache_fn", "docs/functional/ivy/general/ivy.functional.ivy.general.clip_matrix_norm", "docs/functional/ivy/general/ivy.functional.ivy.general.clip_vector_norm", "docs/functional/ivy/general/ivy.functional.ivy.general.container_types", "docs/functional/ivy/general/ivy.functional.ivy.general.current_backend_str", "docs/functional/ivy/general/ivy.functional.ivy.general.default", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_rearrange", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_reduce", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_repeat", "docs/functional/ivy/general/ivy.functional.ivy.general.exists", "docs/functional/ivy/general/ivy.functional.ivy.general.fourier_encode", "docs/functional/ivy/general/ivy.functional.ivy.general.function_supported_devices_and_dtypes", "docs/functional/ivy/general/ivy.functional.ivy.general.function_unsupported_devices_and_dtypes", "docs/functional/ivy/general/ivy.functional.ivy.general.gather", "docs/functional/ivy/general/ivy.functional.ivy.general.gather_nd", "docs/functional/ivy/general/ivy.functional.ivy.general.get_all_arrays_in_memory", "docs/functional/ivy/general/ivy.functional.ivy.general.get_item", "docs/functional/ivy/general/ivy.functional.ivy.general.get_num_dims", "docs/functional/ivy/general/ivy.functional.ivy.general.get_referrers_recursive", "docs/functional/ivy/general/ivy.functional.ivy.general.has_nans", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_arrays_supported", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_decrement", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_increment", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_update", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_variables_supported", "docs/functional/ivy/general/ivy.functional.ivy.general.is_array", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_array", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_container", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_nested_array", "docs/functional/ivy/general/ivy.functional.ivy.general.is_native_array", "docs/functional/ivy/general/ivy.functional.ivy.general.isin", "docs/functional/ivy/general/ivy.functional.ivy.general.isscalar", "docs/functional/ivy/general/ivy.functional.ivy.general.itemsize", "docs/functional/ivy/general/ivy.functional.ivy.general.match_kwargs", "docs/functional/ivy/general/ivy.functional.ivy.general.multiprocessing", "docs/functional/ivy/general/ivy.functional.ivy.general.num_arrays_in_memory", "docs/functional/ivy/general/ivy.functional.ivy.general.print_all_arrays_in_memory", "docs/functional/ivy/general/ivy.functional.ivy.general.scatter_flat", "docs/functional/ivy/general/ivy.functional.ivy.general.scatter_nd", "docs/functional/ivy/general/ivy.functional.ivy.general.set_array_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_exception_trace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_inplace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_item", "docs/functional/ivy/general/ivy.functional.ivy.general.set_min_base", "docs/functional/ivy/general/ivy.functional.ivy.general.set_min_denominator", "docs/functional/ivy/general/ivy.functional.ivy.general.set_nestable_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_precise_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_queue_timeout", "docs/functional/ivy/general/ivy.functional.ivy.general.set_shape_array_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_show_func_wrapper_trace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_tmp_dir", "docs/functional/ivy/general/ivy.functional.ivy.general.shape", "docs/functional/ivy/general/ivy.functional.ivy.general.size", "docs/functional/ivy/general/ivy.functional.ivy.general.stable_divide", "docs/functional/ivy/general/ivy.functional.ivy.general.stable_pow", "docs/functional/ivy/general/ivy.functional.ivy.general.strides", "docs/functional/ivy/general/ivy.functional.ivy.general.supports_inplace_updates", "docs/functional/ivy/general/ivy.functional.ivy.general.to_ivy_shape", "docs/functional/ivy/general/ivy.functional.ivy.general.to_list", "docs/functional/ivy/general/ivy.functional.ivy.general.to_native_shape", "docs/functional/ivy/general/ivy.functional.ivy.general.to_numpy", "docs/functional/ivy/general/ivy.functional.ivy.general.to_scalar", "docs/functional/ivy/general/ivy.functional.ivy.general.try_else_none", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_array_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_exception_trace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_inplace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_min_base", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_min_denominator", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_nestable_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_precise_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_queue_timeout", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_shape_array_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_show_func_wrapper_trace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_tmp_dir", "docs/functional/ivy/general/ivy.functional.ivy.general.value_is_nan", "docs/functional/ivy/general/ivy.functional.ivy.general.vmap", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.adam_step", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.adam_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.execute_with_gradients", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.grad", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.gradient_descent_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.jac", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.lamb_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.lars_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.optimizer_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.stop_gradient", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.value_and_grad", "docs/functional/ivy/ivy.functional.ivy.activations", "docs/functional/ivy/ivy.functional.ivy.constants", "docs/functional/ivy/ivy.functional.ivy.control_flow_ops", "docs/functional/ivy/ivy.functional.ivy.creation", "docs/functional/ivy/ivy.functional.ivy.data_type", "docs/functional/ivy/ivy.functional.ivy.device", "docs/functional/ivy/ivy.functional.ivy.elementwise", "docs/functional/ivy/ivy.functional.ivy.experimental", "docs/functional/ivy/ivy.functional.ivy.general", "docs/functional/ivy/ivy.functional.ivy.gradients", "docs/functional/ivy/ivy.functional.ivy.layers", "docs/functional/ivy/ivy.functional.ivy.linear_algebra", "docs/functional/ivy/ivy.functional.ivy.losses", "docs/functional/ivy/ivy.functional.ivy.manipulation", "docs/functional/ivy/ivy.functional.ivy.meta", "docs/functional/ivy/ivy.functional.ivy.nest", "docs/functional/ivy/ivy.functional.ivy.norms", "docs/functional/ivy/ivy.functional.ivy.random", "docs/functional/ivy/ivy.functional.ivy.searching", "docs/functional/ivy/ivy.functional.ivy.set", "docs/functional/ivy/ivy.functional.ivy.sorting", "docs/functional/ivy/ivy.functional.ivy.statistical", "docs/functional/ivy/ivy.functional.ivy.utility", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv1d", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv1d_transpose", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv2d", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv2d_transpose", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv3d", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv3d_transpose", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv_general_dilated", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv_general_transpose", "docs/functional/ivy/layers/ivy.functional.ivy.layers.depthwise_conv2d", "docs/functional/ivy/layers/ivy.functional.ivy.layers.dropout", "docs/functional/ivy/layers/ivy.functional.ivy.layers.linear", "docs/functional/ivy/layers/ivy.functional.ivy.layers.lstm", "docs/functional/ivy/layers/ivy.functional.ivy.layers.lstm_update", "docs/functional/ivy/layers/ivy.functional.ivy.layers.multi_head_attention", "docs/functional/ivy/layers/ivy.functional.ivy.layers.nms", "docs/functional/ivy/layers/ivy.functional.ivy.layers.roi_align", "docs/functional/ivy/layers/ivy.functional.ivy.layers.scaled_dot_product_attention", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.cholesky", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.cross", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.det", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.diag", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.diagonal", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eig", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eigh", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eigvalsh", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.inner", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.inv", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matmul", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_norm", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_power", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_rank", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_transpose", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.outer", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.pinv", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.qr", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.slogdet", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.solve", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.svd", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.svdvals", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.tensordot", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.tensorsolve", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.trace", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vander", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vecdot", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vector_norm", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vector_to_skew_symmetric_matrix", "docs/functional/ivy/losses/ivy.functional.ivy.losses.binary_cross_entropy", "docs/functional/ivy/losses/ivy.functional.ivy.losses.cross_entropy", "docs/functional/ivy/losses/ivy.functional.ivy.losses.sparse_cross_entropy", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.clip", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.concat", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.constant_pad", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.expand_dims", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.flip", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.permute_dims", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.repeat", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.reshape", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.roll", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.split", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.squeeze", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.stack", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.swapaxes", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.tile", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.unstack", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.zero_pad", "docs/functional/ivy/meta/ivy.functional.ivy.meta.fomaml_step", "docs/functional/ivy/meta/ivy.functional.ivy.meta.maml_step", "docs/functional/ivy/meta/ivy.functional.ivy.meta.reptile_step", "docs/functional/ivy/nest/ivy.functional.ivy.nest.all_nested_indices", "docs/functional/ivy/nest/ivy.functional.ivy.nest.copy_nest", "docs/functional/ivy/nest/ivy.functional.ivy.nest.duplicate_array_index_chains", "docs/functional/ivy/nest/ivy.functional.ivy.nest.index_nest", "docs/functional/ivy/nest/ivy.functional.ivy.nest.insert_into_nest_at_index", "docs/functional/ivy/nest/ivy.functional.ivy.nest.insert_into_nest_at_indices", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map_nest_at_index", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map_nest_at_indices", "docs/functional/ivy/nest/ivy.functional.ivy.nest.multi_index_nest", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_any", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_argwhere", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_map", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_multi_map", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_empty", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_nest_at_index", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_nest_at_indices", "docs/functional/ivy/nest/ivy.functional.ivy.nest.set_nest_at_index", "docs/functional/ivy/nest/ivy.functional.ivy.nest.set_nest_at_indices", "docs/functional/ivy/norms/ivy.functional.ivy.norms.layer_norm", "docs/functional/ivy/random/ivy.functional.ivy.random.multinomial", "docs/functional/ivy/random/ivy.functional.ivy.random.randint", "docs/functional/ivy/random/ivy.functional.ivy.random.random_normal", "docs/functional/ivy/random/ivy.functional.ivy.random.random_uniform", "docs/functional/ivy/random/ivy.functional.ivy.random.seed", "docs/functional/ivy/random/ivy.functional.ivy.random.shuffle", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argmax", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argmin", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argwhere", "docs/functional/ivy/searching/ivy.functional.ivy.searching.nonzero", "docs/functional/ivy/searching/ivy.functional.ivy.searching.where", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_all", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_counts", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_inverse", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_values", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.argsort", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.msort", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.searchsorted", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.sort", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.cumprod", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.cumsum", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.einsum", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.max", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.mean", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.min", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.prod", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.std", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.sum", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.var", "docs/functional/ivy/utility/ivy.functional.ivy.utility.all", "docs/functional/ivy/utility/ivy.functional.ivy.utility.any", "docs/functional/ivy/utility/ivy.functional.ivy.utility.load", "docs/functional/ivy/utility/ivy.functional.ivy.utility.save", "docs/helpers/ivy_tests.test_ivy.helpers.assertions", "docs/helpers/ivy_tests.test_ivy.helpers.available_frameworks", "docs/helpers/ivy_tests.test_ivy.helpers.function_testing", "docs/helpers/ivy_tests.test_ivy.helpers.globals", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers", "docs/helpers/ivy_tests.test_ivy.helpers.multiprocessing", "docs/helpers/ivy_tests.test_ivy.helpers.pipeline_helper", "docs/helpers/ivy_tests.test_ivy.helpers.structs", "docs/helpers/ivy_tests.test_ivy.helpers.test_parameter_flags", "docs/helpers/ivy_tests.test_ivy.helpers.testing_helpers", "docs/ivy.stateful", "docs/ivy.utils", "docs/ivy_tests.test_ivy.helpers", "docs/stateful/ivy.stateful.activations", "docs/stateful/ivy.stateful.converters", "docs/stateful/ivy.stateful.helpers", "docs/stateful/ivy.stateful.initializers", "docs/stateful/ivy.stateful.layers", "docs/stateful/ivy.stateful.losses", "docs/stateful/ivy.stateful.module", "docs/stateful/ivy.stateful.norms", "docs/stateful/ivy.stateful.optimizers", "docs/stateful/ivy.stateful.sequential", "docs/utils/ivy.utils.assertions", "docs/utils/ivy.utils.backend", "docs/utils/ivy.utils.backend/ivy.utils.backend.ast_helpers", "docs/utils/ivy.utils.backend/ivy.utils.backend.handler", "docs/utils/ivy.utils.backend/ivy.utils.backend.sub_backend_handler", "docs/utils/ivy.utils.binaries", "docs/utils/ivy.utils.dynamic_import", "docs/utils/ivy.utils.einsum_parser", "docs/utils/ivy.utils.einsum_path_helpers", "docs/utils/ivy.utils.exceptions", "docs/utils/ivy.utils.inspection", "docs/utils/ivy.utils.logging", "docs/utils/ivy.utils.profiler", "docs/utils/ivy.utils.verbosity", "index", "overview/contributing", "overview/contributing/building_the_docs", "overview/contributing/contributor_rewards", "overview/contributing/error_handling", "overview/contributing/helpful_resources", "overview/contributing/open_tasks", "overview/contributing/setting_up", "overview/contributing/the_basics", "overview/contributing/volunteer_program", "overview/deep_dive", "overview/deep_dive/array_api_tests", "overview/deep_dive/arrays", "overview/deep_dive/backend_setting", "overview/deep_dive/building_the_docs_pipeline", "overview/deep_dive/containers", "overview/deep_dive/continuous_integration", "overview/deep_dive/data_types", "overview/deep_dive/devices", "overview/deep_dive/docstring_examples", "overview/deep_dive/docstrings", "overview/deep_dive/exception_handling", "overview/deep_dive/fix_failing_tests", "overview/deep_dive/formatting", "overview/deep_dive/function_arguments", "overview/deep_dive/function_types", "overview/deep_dive/function_wrapping", "overview/deep_dive/gradients", "overview/deep_dive/inplace_updates", "overview/deep_dive/ivy_frontends", "overview/deep_dive/ivy_frontends_tests", "overview/deep_dive/ivy_lint", "overview/deep_dive/ivy_tests", "overview/deep_dive/navigating_the_code", "overview/deep_dive/operating_modes", "overview/deep_dive/superset_behaviour", "overview/design", "overview/design/building_blocks", "overview/design/ivy_as_a_framework", "overview/design/ivy_as_a_framework/ivy_array", "overview/design/ivy_as_a_framework/ivy_container", "overview/design/ivy_as_a_framework/ivy_stateful_api", "overview/design/ivy_as_a_transpiler", "overview/faq", "overview/get_started", "overview/glossary", "overview/motivation", "overview/motivation/ml_explosion", "overview/motivation/standardization", "overview/motivation/why_unify", "overview/one_liners", "overview/one_liners/trace", "overview/one_liners/transpile", "overview/one_liners/unify", "overview/related_work", "overview/related_work/api_standards", "overview/related_work/compiler_infrastructure", "overview/related_work/exchange_formats", "overview/related_work/frameworks", "overview/related_work/graph_tracers", "overview/related_work/ml_unifying_companies", "overview/related_work/multi_vendor_compiler_frameworks", "overview/related_work/vendor_specific_apis", "overview/related_work/vendor_specific_compilers", "overview/related_work/what_does_ivy_add", "overview/related_work/wrapper_frameworks", "overview/volunteer_ranks"], "filenames": ["demos/README.md", "demos/assets/01_template.ipynb", "demos/examples_and_demos.rst", "demos/examples_and_demos/alexnet_demo.ipynb", "demos/examples_and_demos/bert_demo.ipynb", "demos/examples_and_demos/convnext_to_torch.ipynb", "demos/examples_and_demos/dinov2_to_paddle.ipynb", "demos/examples_and_demos/image_segmentation_with_ivy_unet.ipynb", "demos/examples_and_demos/lstm_tensorflow_to_torch.ipynb", "demos/examples_and_demos/lstm_torch_to_tensorflow.ipynb", "demos/examples_and_demos/mmpretrain_to_jax.ipynb", "demos/examples_and_demos/resnet_demo.ipynb", "demos/examples_and_demos/torch_to_jax.ipynb", "demos/examples_and_demos/xgboost_demo.ipynb", "demos/guides.rst", "demos/guides/01_transpiling_a_torch_model.ipynb", "demos/guides/02_transpiling_a_haiku_model.ipynb", "demos/guides/03_transpiling_a_tf_model.ipynb", "demos/guides/04_developing_a_convnet_with_ivy.ipynb", "demos/index.rst", "demos/learn_the_basics.rst", "demos/learn_the_basics/01_write_ivy_code.ipynb", "demos/learn_the_basics/02_unify_code.ipynb", "demos/learn_the_basics/03_trace_code.ipynb", "demos/learn_the_basics/04_transpile_code.ipynb", "demos/learn_the_basics/05_lazy_vs_eager.ipynb", "demos/learn_the_basics/06_how_to_use_decorators.ipynb", "demos/learn_the_basics/07_transpile_any_library.ipynb", "demos/learn_the_basics/08_transpile_any_model.ipynb", "demos/learn_the_basics/09_write_a_model_using_ivy.ipynb", "demos/misc/odsc.ipynb", "demos/quickstart.ipynb", "demos/wip/0_building_blocks/0_0_unify.ipynb", "demos/wip/0_building_blocks/0_1_compile.ipynb", "demos/wip/0_building_blocks/0_2_transpile.ipynb", "demos/wip/1_the_basics/1_0_lazy_vs_eager.ipynb", "demos/wip/1_the_basics/1_1_framework_selection.ipynb", "demos/wip/1_the_basics/1_2_as_a_decorator.ipynb", "demos/wip/1_the_basics/1_3_dynamic_vs_static.ipynb", "demos/wip/2_libraries/2_0_kornia.ipynb", "demos/wip/3_models/3_0_perceiver.ipynb", "demos/wip/3_models/3_1_stable_diffusion.ipynb", "demos/wip/basic_operations_with_ivy.ipynb", "demos/wip/compilation_of_a_basic_function.ipynb", "demos/wip/deepmind_perceiver_io.ipynb", "demos/wip/deepmind_perceiverio.ipynb", "demos/wip/end_to_end_training_pipeline_in_ivy.ipynb", "demos/wip/hf_tensorflow_deit.ipynb", "demos/wip/ivy_as_a_transpiler_intro.ipynb", "demos/wip/resnet_18.ipynb", "docs/data_classes/data_classes/array/ivy.data_classes.array.activations.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.conversions.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.creation.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.data_type.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.device.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.elementwise.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.experimental.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.general.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.gradients.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.image.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.layers.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.linear_algebra.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.losses.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.manipulation.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.norms.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.random.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.searching.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.set.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.sorting.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.statistical.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.utility.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.wrapping.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.activations.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.base.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.conversions.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.creation.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.data_type.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.device.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.elementwise.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.experimental.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.general.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.gradients.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.image.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.layers.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.linear_algebra.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.losses.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.manipulation.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.norms.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.random.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.searching.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.set.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.sorting.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.statistical.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.utility.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.wrapping.rst", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.base.rst", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.cp_tensor.rst", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.parafac2_tensor.rst", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.tr_tensor.rst", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.tt_tensor.rst", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.tucker_tensor.rst", "docs/data_classes/data_classes/ivy.data_classes.array.rst", "docs/data_classes/data_classes/ivy.data_classes.container.rst", "docs/data_classes/data_classes/ivy.data_classes.factorized_tensor.rst", "docs/data_classes/data_classes/ivy.data_classes.nested_array.rst", "docs/data_classes/data_classes/nested_array/ivy.data_classes.nested_array.base.rst", "docs/data_classes/data_classes/nested_array/ivy.data_classes.nested_array.elementwise.rst", "docs/data_classes/ivy.data_classes.rst", "docs/functional/ivy.functional.ivy.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.gelu.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.hardswish.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.leaky_relu.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.log_softmax.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.mish.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.relu.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.sigmoid.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softmax.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softplus.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softsign.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.cmp_is.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.cmp_isnot.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.for_loop.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.if_else.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.try_except.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.while_loop.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.arange.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.array.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.copy_array.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.empty.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.empty_like.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.eye.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.from_dlpack.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.frombuffer.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.full.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.full_like.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.linspace.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.logspace.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.meshgrid.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.native_array.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.one_hot.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.ones.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.ones_like.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.to_dlpack.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.tril.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.triu.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.triu_indices.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.zeros.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.zeros_like.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.as_ivy_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.as_native_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.astype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.broadcast_arrays.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.broadcast_to.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.can_cast.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.check_float.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.closest_valid_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_complex_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_float_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_int_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_uint_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.dtype_bits.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.finfo.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.function_supported_dtypes.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.function_unsupported_dtypes.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.iinfo.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.infer_default_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.invalid_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_bool_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_complex_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_float_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_hashable_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_int_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_native_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_uint_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.promote_types.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.promote_types_of_inputs.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.result_type.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_complex_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_float_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_int_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_uint_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.type_promote_arrays.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_complex_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_float_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_int_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_uint_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.valid_dtype.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.as_ivy_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.as_native_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.clear_cached_mem_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.default_device.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.dev_util.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.function_supported_devices.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.function_unsupported_devices.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.get_all_ivy_arrays_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.gpu_is_available.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.handle_soft_device_variable.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.num_cpu_cores.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.num_gpus.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.num_ivy_arrays_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.percent_used_mem_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.print_all_ivy_arrays_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.set_default_device.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.set_soft_device_mode.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.set_split_factor.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.split_factor.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.split_func_call.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.to_device.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.total_mem_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.tpu_is_available.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.unset_default_device.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.unset_soft_device_mode.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.used_mem_on_dev.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.abs.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.acos.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.acosh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.add.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.angle.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.asin.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.asinh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atan.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atan2.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atanh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_and.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_invert.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_left_shift.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_or.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_right_shift.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_xor.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.ceil.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.cos.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.cosh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.deg2rad.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.divide.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.equal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.erf.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.exp.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.exp2.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.expm1.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.floor.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.floor_divide.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.fmin.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.fmod.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.gcd.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.greater.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.greater_equal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.imag.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isfinite.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isinf.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isnan.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isreal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.lcm.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.less.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.less_equal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log10.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log1p.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log2.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logaddexp.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logaddexp2.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_and.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_not.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_or.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_xor.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.maximum.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.minimum.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.multiply.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.nan_to_num.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.negative.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.not_equal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.positive.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.pow.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.rad2deg.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.real.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.reciprocal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.remainder.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.round.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sign.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sin.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sinh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sqrt.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.square.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.subtract.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.tan.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.tanh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trapz.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trunc.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trunc_divide.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.celu.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.elu.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.hardshrink.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.hardsilu.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.hardtanh.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.logit.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.logsigmoid.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.prelu.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.relu6.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.scaled_tanh.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.selu.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.silu.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.softshrink.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.stanh.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.tanhshrink.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.threshold.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.thresholded_relu.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.blackman_window.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.eye_like.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.hamming_window.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.hann_window.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.indices.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.kaiser_bessel_derived_window.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.kaiser_window.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.mel_weight_matrix.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.ndenumerate.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.ndindex.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.polyval.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_cp.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_parafac2.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_tr.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_tt.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_tucker.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.tril_indices.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.trilu.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.unsorted_segment_mean.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.unsorted_segment_min.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.unsorted_segment_sum.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.vorbis_window.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.allclose.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.amax.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.amin.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.binarizer.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.conj.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.copysign.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.count_nonzero.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.diff.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.digamma.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.erfc.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.erfinv.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.fix.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.float_power.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.fmax.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.frexp.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.gradient.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.hypot.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.isclose.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.ldexp.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.lerp.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.lgamma.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.modf.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.nansum.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.nextafter.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.signbit.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.sinc.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.sparsify_tensor.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.xlogy.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.zeta.rst", "docs/functional/ivy/experimental/general/ivy.functional.ivy.experimental.general.reduce.rst", "docs/functional/ivy/experimental/gradients/ivy.functional.ivy.experimental.gradients.bind_custom_gradient_function.rst", "docs/functional/ivy/experimental/gradients/ivy.functional.ivy.experimental.gradients.jvp.rst", "docs/functional/ivy/experimental/gradients/ivy.functional.ivy.experimental.gradients.vjp.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.activations.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.constants.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.creation.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.data_type.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.device.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.elementwise.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.general.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.gradients.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.layers.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.linear_algebra.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.losses.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.manipulation.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.meta.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.nest.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.norms.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.random.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.searching.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.set.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.sorting.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.sparse_array.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.statistical.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.utility.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_avg_pool1d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_avg_pool2d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_max_pool2d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_max_pool3d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.area_interpolate.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool1d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool2d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool3d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dct.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dft.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout1d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout2d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout3d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.embedding.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.fft.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.fft2.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.generate_einsum_equation.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.get_interpolate_kernel.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.idct.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.ifft.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.ifftn.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.interp.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.interpolate.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool1d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool2d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool3d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_unpool1d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.nearest_interpolate.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.pool.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.reduce_window.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.rfft.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.rfftn.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.rnn.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.sliding_window.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.stft.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.adjoint.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.batched_outer.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.cond.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.diagflat.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.dot.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eig.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eigh_tridiagonal.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eigvals.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.general_inner_product.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.higher_order_moment.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.initialize_tucker.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.khatri_rao.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.kron.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.kronecker.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.lu_factor.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.lu_solve.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.make_svd_non_negative.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.matrix_exp.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.mode_dot.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.multi_dot.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.multi_mode_dot.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.partial_tucker.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.solve_triangular.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.svd_flip.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.tensor_train.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.truncated_svd.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.tt_matrix_to_tensor.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.tucker.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.hinge_embedding_loss.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.huber_loss.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.kl_div.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.l1_loss.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.log_poisson_loss.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.poisson_nll_loss.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.smooth_l1_loss.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.soft_margin_loss.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.as_strided.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.associative_scan.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_1d.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_2d.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_3d.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.broadcast_shapes.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.check_scalar.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.choose.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.column_stack.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.concat_from_sequence.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.dsplit.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.dstack.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.expand.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fill_diagonal.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.flatten.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fliplr.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.flipud.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fold.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.heaviside.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.hsplit.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.hstack.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.i0.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.matricize.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.moveaxis.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.pad.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_fold.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_tensor_to_vec.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_unfold.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_vec_to_tensor.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.put_along_axis.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.rot90.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.soft_thresholding.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.take.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.take_along_axis.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.top_k.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.trim_zeros.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.unflatten.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.unfold.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.unique_consecutive.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.vsplit.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.vstack.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.batch_norm.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.group_norm.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.instance_norm.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.l1_normalize.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.l2_normalize.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.local_response_norm.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.lp_normalize.rst", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.bernoulli.rst", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.beta.rst", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.dirichlet.rst", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.gamma.rst", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.poisson.rst", "docs/functional/ivy/experimental/searching/ivy.functional.ivy.experimental.searching.unravel_index.rst", "docs/functional/ivy/experimental/sorting/ivy.functional.ivy.experimental.sorting.invert_permutation.rst", "docs/functional/ivy/experimental/sorting/ivy.functional.ivy.experimental.sorting.lexsort.rst", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.is_ivy_sparse_array.rst", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.is_native_sparse_array.rst", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.native_sparse_array.rst", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.native_sparse_array_to_indices_values_and_shape.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.bincount.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.corrcoef.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cov.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cummax.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cummin.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.histogram.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.igamma.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.median.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanmean.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanmedian.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanmin.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanprod.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.quantile.rst", "docs/functional/ivy/experimental/utility/ivy.functional.ivy.experimental.utility.optional_get_element.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.all_equal.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.arg_info.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.arg_names.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.array_equal.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.assert_supports_inplace.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.cache_fn.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.clip_matrix_norm.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.clip_vector_norm.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.container_types.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.current_backend_str.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.default.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_rearrange.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_reduce.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_repeat.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.exists.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.fourier_encode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.function_supported_devices_and_dtypes.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.function_unsupported_devices_and_dtypes.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.gather.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.gather_nd.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_all_arrays_in_memory.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_item.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_num_dims.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_referrers_recursive.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.has_nans.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_arrays_supported.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_decrement.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_increment.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_update.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_variables_supported.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_array.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_array.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_container.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_nested_array.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_native_array.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.isin.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.isscalar.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.itemsize.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.match_kwargs.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.multiprocessing.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.num_arrays_in_memory.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.print_all_arrays_in_memory.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.scatter_flat.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.scatter_nd.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_array_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_exception_trace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_inplace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_item.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_min_base.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_min_denominator.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_nestable_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_precise_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_queue_timeout.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_shape_array_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_show_func_wrapper_trace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_tmp_dir.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.shape.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.size.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.stable_divide.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.stable_pow.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.strides.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.supports_inplace_updates.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_ivy_shape.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_list.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_native_shape.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_numpy.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_scalar.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.try_else_none.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_array_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_exception_trace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_inplace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_min_base.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_min_denominator.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_nestable_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_precise_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_queue_timeout.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_shape_array_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_show_func_wrapper_trace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_tmp_dir.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.value_is_nan.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.vmap.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.adam_step.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.adam_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.execute_with_gradients.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.grad.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.gradient_descent_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.jac.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.lamb_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.lars_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.optimizer_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.stop_gradient.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.value_and_grad.rst", "docs/functional/ivy/ivy.functional.ivy.activations.rst", "docs/functional/ivy/ivy.functional.ivy.constants.rst", "docs/functional/ivy/ivy.functional.ivy.control_flow_ops.rst", "docs/functional/ivy/ivy.functional.ivy.creation.rst", "docs/functional/ivy/ivy.functional.ivy.data_type.rst", "docs/functional/ivy/ivy.functional.ivy.device.rst", "docs/functional/ivy/ivy.functional.ivy.elementwise.rst", "docs/functional/ivy/ivy.functional.ivy.experimental.rst", "docs/functional/ivy/ivy.functional.ivy.general.rst", "docs/functional/ivy/ivy.functional.ivy.gradients.rst", "docs/functional/ivy/ivy.functional.ivy.layers.rst", "docs/functional/ivy/ivy.functional.ivy.linear_algebra.rst", "docs/functional/ivy/ivy.functional.ivy.losses.rst", "docs/functional/ivy/ivy.functional.ivy.manipulation.rst", "docs/functional/ivy/ivy.functional.ivy.meta.rst", "docs/functional/ivy/ivy.functional.ivy.nest.rst", "docs/functional/ivy/ivy.functional.ivy.norms.rst", "docs/functional/ivy/ivy.functional.ivy.random.rst", "docs/functional/ivy/ivy.functional.ivy.searching.rst", "docs/functional/ivy/ivy.functional.ivy.set.rst", "docs/functional/ivy/ivy.functional.ivy.sorting.rst", "docs/functional/ivy/ivy.functional.ivy.statistical.rst", "docs/functional/ivy/ivy.functional.ivy.utility.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv1d.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv1d_transpose.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv2d.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv2d_transpose.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv3d.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv3d_transpose.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv_general_dilated.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv_general_transpose.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.depthwise_conv2d.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.dropout.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.linear.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.lstm.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.lstm_update.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.multi_head_attention.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.nms.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.roi_align.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.scaled_dot_product_attention.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.cholesky.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.cross.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.det.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.diag.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.diagonal.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eig.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eigh.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eigvalsh.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.inner.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.inv.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matmul.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_norm.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_power.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_rank.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_transpose.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.outer.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.pinv.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.qr.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.slogdet.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.solve.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.svd.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.svdvals.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.tensordot.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.tensorsolve.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.trace.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vander.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vecdot.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vector_norm.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vector_to_skew_symmetric_matrix.rst", "docs/functional/ivy/losses/ivy.functional.ivy.losses.binary_cross_entropy.rst", "docs/functional/ivy/losses/ivy.functional.ivy.losses.cross_entropy.rst", "docs/functional/ivy/losses/ivy.functional.ivy.losses.sparse_cross_entropy.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.clip.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.concat.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.constant_pad.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.expand_dims.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.flip.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.permute_dims.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.repeat.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.reshape.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.roll.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.split.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.squeeze.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.stack.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.swapaxes.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.tile.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.unstack.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.zero_pad.rst", "docs/functional/ivy/meta/ivy.functional.ivy.meta.fomaml_step.rst", "docs/functional/ivy/meta/ivy.functional.ivy.meta.maml_step.rst", "docs/functional/ivy/meta/ivy.functional.ivy.meta.reptile_step.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.all_nested_indices.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.copy_nest.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.duplicate_array_index_chains.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.index_nest.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.insert_into_nest_at_index.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.insert_into_nest_at_indices.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map_nest_at_index.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map_nest_at_indices.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.multi_index_nest.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_any.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_argwhere.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_map.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_multi_map.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_empty.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_nest_at_index.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_nest_at_indices.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.set_nest_at_index.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.set_nest_at_indices.rst", "docs/functional/ivy/norms/ivy.functional.ivy.norms.layer_norm.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.multinomial.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.randint.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.random_normal.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.random_uniform.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.seed.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.shuffle.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argmax.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argmin.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argwhere.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.nonzero.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.where.rst", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_all.rst", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_counts.rst", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_inverse.rst", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_values.rst", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.argsort.rst", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.msort.rst", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.searchsorted.rst", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.sort.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.cumprod.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.cumsum.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.einsum.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.max.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.mean.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.min.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.prod.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.std.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.sum.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.var.rst", "docs/functional/ivy/utility/ivy.functional.ivy.utility.all.rst", "docs/functional/ivy/utility/ivy.functional.ivy.utility.any.rst", "docs/functional/ivy/utility/ivy.functional.ivy.utility.load.rst", "docs/functional/ivy/utility/ivy.functional.ivy.utility.save.rst", "docs/helpers/ivy_tests.test_ivy.helpers.assertions.rst", "docs/helpers/ivy_tests.test_ivy.helpers.available_frameworks.rst", "docs/helpers/ivy_tests.test_ivy.helpers.function_testing.rst", "docs/helpers/ivy_tests.test_ivy.helpers.globals.rst", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.rst", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.rst", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers.rst", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.rst", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers.rst", "docs/helpers/ivy_tests.test_ivy.helpers.multiprocessing.rst", "docs/helpers/ivy_tests.test_ivy.helpers.pipeline_helper.rst", "docs/helpers/ivy_tests.test_ivy.helpers.structs.rst", "docs/helpers/ivy_tests.test_ivy.helpers.test_parameter_flags.rst", "docs/helpers/ivy_tests.test_ivy.helpers.testing_helpers.rst", "docs/ivy.stateful.rst", "docs/ivy.utils.rst", "docs/ivy_tests.test_ivy.helpers.rst", "docs/stateful/ivy.stateful.activations.rst", "docs/stateful/ivy.stateful.converters.rst", "docs/stateful/ivy.stateful.helpers.rst", "docs/stateful/ivy.stateful.initializers.rst", "docs/stateful/ivy.stateful.layers.rst", "docs/stateful/ivy.stateful.losses.rst", "docs/stateful/ivy.stateful.module.rst", "docs/stateful/ivy.stateful.norms.rst", "docs/stateful/ivy.stateful.optimizers.rst", "docs/stateful/ivy.stateful.sequential.rst", "docs/utils/ivy.utils.assertions.rst", "docs/utils/ivy.utils.backend.rst", "docs/utils/ivy.utils.backend/ivy.utils.backend.ast_helpers.rst", "docs/utils/ivy.utils.backend/ivy.utils.backend.handler.rst", "docs/utils/ivy.utils.backend/ivy.utils.backend.sub_backend_handler.rst", "docs/utils/ivy.utils.binaries.rst", "docs/utils/ivy.utils.dynamic_import.rst", "docs/utils/ivy.utils.einsum_parser.rst", "docs/utils/ivy.utils.einsum_path_helpers.rst", "docs/utils/ivy.utils.exceptions.rst", "docs/utils/ivy.utils.inspection.rst", "docs/utils/ivy.utils.logging.rst", "docs/utils/ivy.utils.profiler.rst", "docs/utils/ivy.utils.verbosity.rst", "index.rst", "overview/contributing.rst", "overview/contributing/building_the_docs.rst", "overview/contributing/contributor_rewards.rst", "overview/contributing/error_handling.rst", "overview/contributing/helpful_resources.rst", "overview/contributing/open_tasks.rst", "overview/contributing/setting_up.rst", "overview/contributing/the_basics.rst", "overview/contributing/volunteer_program.rst", "overview/deep_dive.rst", "overview/deep_dive/array_api_tests.rst", "overview/deep_dive/arrays.rst", "overview/deep_dive/backend_setting.rst", "overview/deep_dive/building_the_docs_pipeline.rst", "overview/deep_dive/containers.rst", "overview/deep_dive/continuous_integration.rst", "overview/deep_dive/data_types.rst", "overview/deep_dive/devices.rst", "overview/deep_dive/docstring_examples.rst", "overview/deep_dive/docstrings.rst", "overview/deep_dive/exception_handling.rst", "overview/deep_dive/fix_failing_tests.rst", "overview/deep_dive/formatting.rst", "overview/deep_dive/function_arguments.rst", "overview/deep_dive/function_types.rst", "overview/deep_dive/function_wrapping.rst", "overview/deep_dive/gradients.rst", "overview/deep_dive/inplace_updates.rst", "overview/deep_dive/ivy_frontends.rst", "overview/deep_dive/ivy_frontends_tests.rst", "overview/deep_dive/ivy_lint.rst", "overview/deep_dive/ivy_tests.rst", "overview/deep_dive/navigating_the_code.rst", "overview/deep_dive/operating_modes.rst", "overview/deep_dive/superset_behaviour.rst", "overview/design.rst", "overview/design/building_blocks.rst", "overview/design/ivy_as_a_framework.rst", "overview/design/ivy_as_a_framework/ivy_array.rst", "overview/design/ivy_as_a_framework/ivy_container.rst", "overview/design/ivy_as_a_framework/ivy_stateful_api.rst", "overview/design/ivy_as_a_transpiler.rst", "overview/faq.rst", "overview/get_started.rst", "overview/glossary.rst", "overview/motivation.rst", "overview/motivation/ml_explosion.rst", "overview/motivation/standardization.rst", "overview/motivation/why_unify.rst", "overview/one_liners.rst", "overview/one_liners/trace.rst", "overview/one_liners/transpile.rst", "overview/one_liners/unify.rst", "overview/related_work.rst", "overview/related_work/api_standards.rst", "overview/related_work/compiler_infrastructure.rst", "overview/related_work/exchange_formats.rst", "overview/related_work/frameworks.rst", "overview/related_work/graph_tracers.rst", "overview/related_work/ml_unifying_companies.rst", "overview/related_work/multi_vendor_compiler_frameworks.rst", "overview/related_work/vendor_specific_apis.rst", "overview/related_work/vendor_specific_compilers.rst", "overview/related_work/what_does_ivy_add.rst", "overview/related_work/wrapper_frameworks.rst", "overview/volunteer_ranks.rst"], "titles": ["Demos", "TO REPLACE: Title", "Examples and Demos", "Ivy AlexNet demo", "# Ivy Bert Demo", "Using TensorFlow Models in your PyTorch Projects", "How To Convert Models from PyTorch to PaddlePaddle", "Image Segmentation with Ivy UNet", "&lt;no title&gt;", "&lt;no title&gt;", "Accelerating MMPreTrain models with JAX", "Using Ivy ResNet", "Accelerating PyTorch models with JAX", "Accelerating XGBoost with JAX", "Guides", "Transpiling a PyTorch model to build on top", "Transpiling a haiku model to build on top", "Transpiling a Tensorflow model to build on top", "Developing a convolutional network using Ivy", "Tutorials And Examples", "Learn the basics", "Write Ivy code", "Unify code", "Trace code", "Transpile code", "Lazy vs Eager", "How to use decorators", "Transpile any library", "Transpile any model", "Write a model using Ivy", "ODSC Ivy Demo", "Quickstart", "0.0: Unify", "0.1: Compile", "0.2: Transpile", "1.0: Lazy vs Eager", "1.1: Framework Selection", "1.2: As a Decorator", "1.3: Dynamic vs Static", "2.0: Kornia", "3.0: Perceiver", "3.1: Stable Diffusion", "Basic Operations with Ivy", "Compilation of a Basic Function", "Demo: Transpiling DeepMind\u2019s PerceiverIO", "Deepmind PerceiverIO on GPU", "End-to-End Training Pipeline in Ivy", "HuggingFace Tensorflow DeiT", "Ivy as a Transpiler Introduction", "Resnet 18", "Activations", "Conversions", "Creation", "Data type", "Device", "Elementwise", "Experimental", "General", "Gradients", "Image", "Layers", "Linear algebra", "Losses", "Manipulation", "Norms", "Random", "Searching", "Set", "Sorting", "Statistical", "Utility", "Wrapping", "Activations", "Base", "Conversions", "Creation", "Data type", "Device", "Elementwise", "Experimental", "General", "Gradients", "Image", "Layers", "Linear algebra", "Losses", "Manipulation", "Norms", "Random", "Searching", "Set", "Sorting", "Statistical", "Utility", "Wrapping", "Base", "Cp tensor", "Parafac2 tensor", "Tr tensor", "Tt tensor", "Tucker tensor", "Array", "Container", "Factorized tensor", "Nested array", "Base", "Elementwise", "Data classes", "Functions", "gelu", "hardswish", "leaky_relu", "log_softmax", "mish", "relu", "sigmoid", "softmax", "softplus", "softsign", "cmp_is", "cmp_isnot", "for_loop", "if_else", "try_except", "while_loop", "arange", "array", "asarray", "copy_array", "empty", "empty_like", "eye", "from_dlpack", "frombuffer", "full", "full_like", "linspace", "logspace", "meshgrid", "native_array", "one_hot", "ones", "ones_like", "to_dlpack", "tril", "triu", "triu_indices", "zeros", "zeros_like", "as_ivy_dtype", "as_native_dtype", "astype", "broadcast_arrays", "broadcast_to", "can_cast", "check_float", "closest_valid_dtype", "default_complex_dtype", "default_dtype", "default_float_dtype", "default_int_dtype", "default_uint_dtype", "dtype", "dtype_bits", "finfo", "function_supported_dtypes", "function_unsupported_dtypes", "iinfo", "infer_default_dtype", "invalid_dtype", "is_bool_dtype", "is_complex_dtype", "is_float_dtype", "is_hashable_dtype", "is_int_dtype", "is_native_dtype", "is_uint_dtype", "promote_types", "promote_types_of_inputs", "result_type", "set_default_complex_dtype", "set_default_dtype", "set_default_float_dtype", "set_default_int_dtype", "set_default_uint_dtype", "type_promote_arrays", "unset_default_complex_dtype", "unset_default_dtype", "unset_default_float_dtype", "unset_default_int_dtype", "unset_default_uint_dtype", "valid_dtype", "as_ivy_dev", "as_native_dev", "clear_cached_mem_on_dev", "default_device", "dev", "dev_util", "function_supported_devices", "function_unsupported_devices", "get_all_ivy_arrays_on_dev", "gpu_is_available", "handle_soft_device_variable", "num_cpu_cores", "num_gpus", "num_ivy_arrays_on_dev", "percent_used_mem_on_dev", "print_all_ivy_arrays_on_dev", "set_default_device", "set_soft_device_mode", "set_split_factor", "split_factor", "split_func_call", "to_device", "total_mem_on_dev", "tpu_is_available", "unset_default_device", "unset_soft_device_mode", "used_mem_on_dev", "abs", "acos", "acosh", "add", "angle", "asin", "asinh", "atan", "atan2", "atanh", "bitwise_and", "bitwise_invert", "bitwise_left_shift", "bitwise_or", "bitwise_right_shift", "bitwise_xor", "ceil", "cos", "cosh", "deg2rad", "divide", "equal", "erf", "exp", "exp2", "expm1", "floor", "floor_divide", "fmin", "fmod", "gcd", "greater", "greater_equal", "imag", "isfinite", "isinf", "isnan", "isreal", "lcm", "less", "less_equal", "log", "log10", "log1p", "log2", "logaddexp", "logaddexp2", "logical_and", "logical_not", "logical_or", "logical_xor", "maximum", "minimum", "multiply", "nan_to_num", "negative", "not_equal", "positive", "pow", "rad2deg", "real", "reciprocal", "remainder", "round", "sign", "sin", "sinh", "sqrt", "square", "subtract", "tan", "tanh", "trapz", "trunc", "trunc_divide", "celu", "elu", "hardshrink", "hardsilu", "hardtanh", "logit", "logsigmoid", "prelu", "relu6", "scaled_tanh", "selu", "silu", "softshrink", "stanh", "tanhshrink", "threshold", "thresholded_relu", "blackman_window", "eye_like", "hamming_window", "hann_window", "indices", "kaiser_bessel_derived_window", "kaiser_window", "mel_weight_matrix", "ndenumerate", "ndindex", "polyval", "random_cp", "random_parafac2", "random_tr", "random_tt", "random_tucker", "tril_indices", "trilu", "unsorted_segment_mean", "unsorted_segment_min", "unsorted_segment_sum", "vorbis_window", "allclose", "amax", "amin", "binarizer", "conj", "copysign", "count_nonzero", "diff", "digamma", "erfc", "erfinv", "fix", "float_power", "fmax", "frexp", "gradient", "hypot", "isclose", "ldexp", "lerp", "lgamma", "modf", "nansum", "nextafter", "signbit", "sinc", "sparsify_tensor", "xlogy", "zeta", "reduce", "bind_custom_gradient_function", "jvp", "vjp", "Activations", "Constants", "Creation", "Data type", "Device", "Elementwise", "General", "Gradients", "Layers", "Linear algebra", "Losses", "Manipulation", "Meta", "Nest", "Norms", "Random", "Searching", "Set", "Sorting", "Sparse array", "Statistical", "Utility", "adaptive_avg_pool1d", "adaptive_avg_pool2d", "adaptive_max_pool2d", "adaptive_max_pool3d", "area_interpolate", "avg_pool1d", "avg_pool2d", "avg_pool3d", "dct", "dft", "dropout1d", "dropout2d", "dropout3d", "embedding", "fft", "fft2", "generate_einsum_equation", "get_interpolate_kernel", "idct", "ifft", "ifftn", "interp", "interpolate", "max_pool1d", "max_pool2d", "max_pool3d", "max_unpool1d", "nearest_interpolate", "pool", "reduce_window", "rfft", "rfftn", "rnn", "sliding_window", "stft", "adjoint", "batched_outer", "cond", "diagflat", "dot", "eig", "eigh_tridiagonal", "eigvals", "general_inner_product", "higher_order_moment", "initialize_tucker", "khatri_rao", "kron", "kronecker", "lu_factor", "lu_solve", "make_svd_non_negative", "matrix_exp", "mode_dot", "multi_dot", "multi_mode_dot", "partial_tucker", "solve_triangular", "svd_flip", "tensor_train", "truncated_svd", "tt_matrix_to_tensor", "tucker", "hinge_embedding_loss", "huber_loss", "kl_div", "l1_loss", "log_poisson_loss", "poisson_nll_loss", "smooth_l1_loss", "soft_margin_loss", "as_strided", "associative_scan", "atleast_1d", "atleast_2d", "atleast_3d", "broadcast_shapes", "check_scalar", "choose", "column_stack", "concat_from_sequence", "dsplit", "dstack", "expand", "fill_diagonal", "flatten", "fliplr", "flipud", "fold", "heaviside", "hsplit", "hstack", "i0", "matricize", "moveaxis", "pad", "partial_fold", "partial_tensor_to_vec", "partial_unfold", "partial_vec_to_tensor", "put_along_axis", "rot90", "soft_thresholding", "take", "take_along_axis", "top_k", "trim_zeros", "unflatten", "unfold", "unique_consecutive", "vsplit", "vstack", "batch_norm", "group_norm", "instance_norm", "l1_normalize", "l2_normalize", "local_response_norm", "lp_normalize", "bernoulli", "beta", "dirichlet", "gamma", "poisson", "unravel_index", "invert_permutation", "lexsort", "is_ivy_sparse_array", "is_native_sparse_array", "native_sparse_array", "native_sparse_array_to_indices_values_and_shape", "bincount", "corrcoef", "cov", "cummax", "cummin", "histogram", "igamma", "median", "nanmean", "nanmedian", "nanmin", "nanprod", "quantile", "optional_get_element", "all_equal", "arg_info", "arg_names", "array_equal", "assert_supports_inplace", "cache_fn", "clip_matrix_norm", "clip_vector_norm", "container_types", "current_backend_str", "default", "einops_rearrange", "einops_reduce", "einops_repeat", "exists", "fourier_encode", "function_supported_devices_and_dtypes", "function_unsupported_devices_and_dtypes", "gather", "gather_nd", "get_all_arrays_in_memory", "get_item", "get_num_dims", "get_referrers_recursive", "has_nans", "inplace_arrays_supported", "inplace_decrement", "inplace_increment", "inplace_update", "inplace_variables_supported", "is_array", "is_ivy_array", "is_ivy_container", "is_ivy_nested_array", "is_native_array", "isin", "isscalar", "itemsize", "match_kwargs", "multiprocessing", "num_arrays_in_memory", "print_all_arrays_in_memory", "scatter_flat", "scatter_nd", "set_array_mode", "set_exception_trace_mode", "set_inplace_mode", "set_item", "set_min_base", "set_min_denominator", "set_nestable_mode", "set_precise_mode", "set_queue_timeout", "set_shape_array_mode", "set_show_func_wrapper_trace_mode", "set_tmp_dir", "shape", "size", "stable_divide", "stable_pow", "strides", "supports_inplace_updates", "to_ivy_shape", "to_list", "to_native_shape", "to_numpy", "to_scalar", "try_else_none", "unset_array_mode", "unset_exception_trace_mode", "unset_inplace_mode", "unset_min_base", "unset_min_denominator", "unset_nestable_mode", "unset_precise_mode", "unset_queue_timeout", "unset_shape_array_mode", "unset_show_func_wrapper_trace_mode", "unset_tmp_dir", "value_is_nan", "vmap", "adam_step", "adam_update", "execute_with_gradients", "grad", "gradient_descent_update", "jac", "lamb_update", "lars_update", "optimizer_update", "stop_gradient", "value_and_grad", "Activations", "Constants", "Control flow ops", "Creation", "Data type", "Device", "Elementwise", "Experimental", "General", "Gradients", "Layers", "Linear algebra", "Losses", "Manipulation", "Meta", "Nest", "Norms", "Random", "Searching", "Set", "Sorting", "Statistical", "Utility", "conv", "conv1d", "conv1d_transpose", "conv2d", "conv2d_transpose", "conv3d", "conv3d_transpose", "conv_general_dilated", "conv_general_transpose", "depthwise_conv2d", "dropout", "linear", "lstm", "lstm_update", "multi_head_attention", "nms", "roi_align", "scaled_dot_product_attention", "cholesky", "cross", "det", "diag", "diagonal", "eig", "eigh", "eigvalsh", "inner", "inv", "matmul", "matrix_norm", "matrix_power", "matrix_rank", "matrix_transpose", "outer", "pinv", "qr", "slogdet", "solve", "svd", "svdvals", "tensordot", "tensorsolve", "trace", "vander", "vecdot", "vector_norm", "vector_to_skew_symmetric_matrix", "binary_cross_entropy", "cross_entropy", "sparse_cross_entropy", "clip", "concat", "constant_pad", "expand_dims", "flip", "permute_dims", "repeat", "reshape", "roll", "split", "squeeze", "stack", "swapaxes", "tile", "unstack", "zero_pad", "fomaml_step", "maml_step", "reptile_step", "all_nested_indices", "copy_nest", "duplicate_array_index_chains", "index_nest", "insert_into_nest_at_index", "insert_into_nest_at_indices", "map", "map_nest_at_index", "map_nest_at_indices", "multi_index_nest", "nested_any", "nested_argwhere", "nested_map", "nested_multi_map", "prune_empty", "prune_nest_at_index", "prune_nest_at_indices", "set_nest_at_index", "set_nest_at_indices", "layer_norm", "multinomial", "randint", "random_normal", "random_uniform", "seed", "shuffle", "argmax", "argmin", "argwhere", "nonzero", "where", "unique_all", "unique_counts", "unique_inverse", "unique_values", "argsort", "msort", "searchsorted", "sort", "cumprod", "cumsum", "einsum", "max", "mean", "min", "prod", "std", "sum", "var", "all", "any", "load", "save", "Assertions", "Available frameworks", "Function testing", "Globals", "Hypothesis helpers", "Array helpers", "Dtype helpers", "General helpers", "Number helpers", "Multiprocessing", "Pipeline helper", "Structs", "Test parameter flags", "Testing helpers", "Framework classes", "Utils", "Testing", "Activations", "Converters", "Helpers", "Initializers", "Layers", "Losses", "Module", "Norms", "Optimizers", "Sequential", "Assertions", "Backend", "Ast helpers", "Handler", "Sub backend handler", "Binaries", "Dynamic import", "Einsum parser", "Einsum path helpers", "Exceptions", "Inspection", "Logging", "Profiler", "Verbosity", "Home", "Contributing", "Building the Docs", "Contributor Rewards", "Error Handling", "Helpful Resources", "Open Tasks", "Setting Up", "The Basics", "Contributor Program", "Deep Dive", "Array API Tests", "Arrays", "Backend Setting", "Building the Docs Pipeline", "Containers", "Continuous Integration", "Data Types", "Devices", "Docstring Examples", "Docstrings", "Exception Handling", "Fix Failing Tests:", "Formatting", "Function Arguments", "Function Types", "Function Wrapping", "Gradients", "Inplace Updates", "Ivy Frontends", "Ivy Frontend Tests", "Ivy-Lint: Ivy\u2019s Custom Code Formatters", "Ivy Tests", "Navigating the Code", "Operating Modes", "Superset Behaviour", "Design", "Building Blocks", "Ivy as a Framework", "Ivy Array", "Ivy Container", "Ivy Stateful API", "Ivy as a Transpiler", "FAQ", "Get Started", "Glossary", "Motivation", "ML Explosion", "Standardization", "Why Unify?", "One liners", "<code class=\"docutils literal notranslate\"><span class=\"pre\">ivy.trace_graph()</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">ivy.transpile()</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">ivy.unify()</span></code>", "Related Work", "API Standards", "Compiler Infrastructure", "Exchange Formats", "Frameworks", "Graph Tracers", "ML-Unifying Companies", "Multi-Vendor Compiler Frameworks", "Vendor-Specific APIs", "Vendor-Specific Compilers", "What does Ivy Add?", "Wrapper Frameworks", "Contributor Leaderboard"], "terms": {"thi": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 17, 19, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 42, 44, 45, 47, 50, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 96, 97, 99, 101, 102, 109, 110, 111, 112, 113, 114, 115, 116, 117, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 152, 153, 154, 164, 167, 170, 171, 172, 174, 178, 179, 193, 196, 206, 212, 213, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 316, 317, 318, 321, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 379, 380, 381, 383, 386, 387, 393, 394, 395, 396, 397, 398, 399, 400, 402, 403, 406, 407, 408, 411, 412, 413, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 435, 439, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 506, 508, 509, 510, 511, 512, 513, 514, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 536, 537, 539, 540, 543, 544, 545, 546, 547, 548, 551, 552, 555, 556, 557, 559, 560, 561, 563, 564, 565, 567, 568, 570, 575, 576, 579, 585, 590, 591, 592, 593, 594, 596, 598, 599, 612, 613, 614, 615, 616, 618, 620, 621, 622, 623, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 657, 658, 659, 661, 662, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 719, 721, 723, 724, 729, 730, 734, 736, 737, 738, 739, 740, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 772, 773, 775, 776, 778, 787, 788, 790, 791, 793, 794, 795, 796, 805, 809, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 858, 859, 860, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877], "repo": [0, 15, 44, 816, 819, 822, 825, 827, 828, 833, 841, 843, 858], "hold": [0, 56, 57, 61, 69, 79, 84, 92, 96, 97, 333, 350, 355, 371, 386, 469, 498, 522, 523, 528, 575, 576, 633, 636, 646, 677, 757, 773, 820, 851, 870], "all": [0, 1, 3, 4, 5, 6, 7, 11, 12, 15, 16, 17, 18, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 43, 44, 46, 47, 49, 51, 52, 56, 57, 60, 61, 63, 65, 70, 71, 73, 74, 75, 78, 79, 80, 83, 84, 86, 88, 93, 94, 96, 97, 125, 133, 140, 144, 145, 146, 200, 207, 239, 243, 271, 272, 327, 328, 340, 359, 368, 371, 374, 375, 376, 377, 386, 408, 417, 419, 420, 421, 429, 434, 444, 445, 447, 450, 451, 472, 483, 491, 497, 527, 533, 536, 553, 573, 574, 591, 598, 599, 613, 616, 628, 630, 631, 633, 634, 635, 636, 638, 639, 640, 642, 643, 647, 658, 661, 662, 667, 679, 684, 685, 688, 693, 702, 706, 708, 714, 715, 716, 717, 718, 719, 728, 729, 730, 731, 737, 740, 745, 770, 772, 775, 776, 777, 778, 790, 791, 797, 800, 805, 807, 809, 811, 812, 815, 817, 818, 819, 820, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 846, 847, 848, 850, 851, 852, 853, 854, 855, 856, 858, 859, 860, 862, 863, 865, 866, 867, 868, 869, 870, 872, 875, 876, 877], "jupyt": [0, 859, 871], "exampl": [0, 5, 6, 8, 10, 12, 21, 23, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 42, 44, 45, 46, 47, 50, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 101, 102, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 121, 122, 124, 125, 126, 127, 128, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 146, 147, 148, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172, 174, 175, 176, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 327, 329, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 366, 368, 371, 372, 374, 375, 376, 377, 380, 381, 382, 384, 386, 393, 394, 395, 396, 398, 399, 401, 402, 403, 406, 407, 408, 411, 412, 413, 416, 417, 418, 419, 421, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 435, 440, 442, 445, 449, 451, 452, 453, 454, 455, 456, 457, 458, 459, 461, 462, 463, 464, 466, 467, 468, 469, 470, 473, 474, 475, 477, 478, 479, 480, 482, 483, 488, 489, 490, 491, 492, 493, 494, 495, 497, 498, 499, 503, 504, 506, 509, 511, 512, 513, 514, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 533, 535, 536, 537, 538, 539, 540, 543, 544, 545, 546, 547, 548, 551, 552, 553, 554, 555, 556, 557, 559, 560, 561, 563, 564, 565, 567, 568, 570, 571, 572, 573, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 596, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 656, 657, 658, 659, 661, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 715, 716, 717, 718, 720, 721, 723, 724, 725, 726, 728, 729, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 772, 775, 776, 783, 800, 804, 805, 809, 811, 815, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 831, 832, 833, 834, 836, 837, 839, 840, 844, 848, 850, 851, 852, 853, 854, 860, 866, 867, 870, 872, 875, 876], "tab": [0, 817, 818, 827, 833, 851], "ivi": [0, 1, 2, 5, 6, 8, 9, 10, 12, 13, 15, 17, 19, 20, 22, 23, 24, 25, 26, 27, 28, 32, 33, 34, 35, 36, 37, 38, 44, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 371, 372, 373, 374, 375, 376, 377, 380, 381, 382, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 772, 783, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 813, 814, 815, 816, 818, 821, 822, 824, 826, 828, 829, 831, 833, 834, 835, 836, 837, 839, 846, 847, 854, 856, 859, 860, 861, 865, 876, 877], "": [0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 42, 45, 47, 48, 49, 52, 56, 57, 58, 61, 69, 79, 81, 84, 92, 121, 138, 144, 145, 165, 166, 195, 198, 199, 211, 246, 281, 328, 333, 334, 335, 337, 348, 350, 356, 360, 362, 368, 371, 372, 374, 375, 376, 377, 380, 381, 386, 389, 390, 397, 403, 408, 419, 427, 431, 439, 448, 453, 455, 456, 472, 474, 475, 483, 500, 501, 502, 511, 521, 531, 549, 550, 556, 570, 593, 594, 615, 617, 618, 619, 620, 622, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 640, 646, 650, 652, 654, 656, 662, 669, 677, 679, 686, 687, 693, 729, 763, 765, 776, 790, 791, 792, 793, 794, 795, 796, 800, 809, 811, 812, 813, 814, 815, 818, 819, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 837, 838, 839, 840, 841, 843, 844, 845, 846, 848, 850, 851, 852, 853, 854, 856, 859, 860, 861, 862, 863, 864, 865, 868, 869, 870, 872, 873, 874, 875], "web": 0, "relev": [0, 52, 75, 137, 628, 795, 811, 817, 818, 819, 823, 826, 827, 828, 830, 833, 837, 838, 841, 842, 843, 851, 855, 859, 867, 874, 875], "link": [0, 21, 30, 31, 45, 811, 817, 818, 819, 825, 827, 828, 834, 840, 863, 865, 867], "list": [0, 4, 7, 10, 11, 13, 46, 51, 52, 53, 55, 56, 57, 60, 63, 64, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 99, 105, 109, 110, 111, 112, 113, 114, 115, 116, 117, 125, 126, 127, 133, 135, 138, 139, 140, 142, 148, 152, 154, 167, 171, 172, 179, 195, 212, 213, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 249, 250, 251, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 301, 302, 303, 304, 305, 306, 308, 309, 310, 312, 333, 334, 335, 336, 337, 339, 340, 341, 344, 345, 348, 349, 350, 356, 357, 358, 360, 361, 362, 371, 374, 375, 377, 384, 393, 394, 395, 397, 398, 399, 400, 411, 412, 413, 414, 418, 420, 424, 429, 433, 436, 443, 444, 447, 450, 451, 452, 453, 454, 455, 456, 457, 458, 461, 462, 463, 464, 467, 468, 469, 478, 489, 491, 492, 493, 495, 498, 500, 502, 503, 504, 506, 508, 513, 521, 522, 523, 524, 533, 535, 536, 537, 539, 540, 544, 545, 546, 547, 548, 551, 552, 553, 555, 557, 559, 560, 561, 563, 564, 567, 571, 575, 576, 590, 591, 592, 594, 596, 597, 598, 599, 600, 612, 613, 618, 623, 628, 629, 630, 631, 633, 635, 636, 638, 640, 641, 644, 645, 649, 650, 651, 652, 653, 654, 657, 658, 659, 662, 665, 666, 667, 672, 673, 674, 675, 676, 677, 679, 681, 683, 684, 688, 690, 695, 696, 697, 698, 699, 702, 705, 706, 707, 708, 709, 712, 713, 717, 718, 719, 720, 723, 724, 725, 726, 728, 729, 734, 735, 736, 737, 738, 739, 740, 742, 745, 748, 749, 750, 751, 752, 753, 754, 756, 757, 760, 762, 763, 765, 766, 767, 770, 772, 775, 776, 777, 778, 783, 788, 791, 797, 804, 805, 809, 811, 814, 816, 817, 818, 820, 822, 823, 825, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 839, 840, 841, 843, 844, 848, 851, 852, 853, 854, 862, 869, 870, 875, 877], "open": [0, 3, 5, 6, 7, 10, 11, 12, 27, 30, 31, 44, 45, 46, 47, 57, 65, 88, 125, 628, 642, 738, 740, 811, 812, 813, 814, 818, 819, 820, 825, 828, 831, 833, 840, 841, 846, 855, 858, 859, 860, 862, 863, 867, 868, 869, 871, 872], "task": [0, 5, 47, 639, 714, 715, 716, 811, 812, 814, 818, 819, 820, 840, 841, 869, 875, 876], "avil": 0, "discuss": [0, 817, 819, 825, 828, 829, 839, 840, 842, 843, 846, 849, 850, 851, 854, 860, 865, 870], "suggest": [0, 5, 817, 818, 819, 825, 828, 834, 838, 840, 843, 844, 845, 855], "new": [0, 6, 8, 9, 10, 12, 14, 15, 17, 19, 22, 25, 26, 27, 28, 30, 31, 32, 46, 48, 51, 56, 57, 58, 63, 64, 73, 75, 79, 80, 81, 84, 86, 87, 129, 132, 134, 135, 140, 141, 142, 147, 148, 185, 208, 228, 274, 276, 280, 333, 338, 350, 355, 371, 374, 377, 386, 410, 459, 467, 468, 482, 488, 495, 528, 544, 545, 546, 548, 551, 552, 554, 575, 576, 579, 581, 588, 591, 592, 598, 615, 618, 620, 621, 622, 628, 629, 630, 631, 633, 634, 635, 638, 640, 641, 662, 674, 681, 701, 705, 709, 722, 734, 735, 736, 788, 791, 794, 795, 800, 805, 811, 812, 814, 817, 818, 819, 820, 821, 823, 824, 826, 827, 828, 830, 831, 833, 834, 837, 839, 840, 841, 842, 843, 844, 846, 847, 850, 853, 855, 856, 858, 859, 860, 862, 867, 871, 875, 876], "should": [0, 4, 6, 8, 9, 12, 13, 22, 25, 26, 27, 28, 47, 50, 52, 55, 56, 57, 58, 60, 61, 63, 65, 66, 67, 69, 72, 73, 75, 78, 79, 80, 81, 83, 84, 86, 88, 89, 91, 92, 94, 96, 99, 101, 102, 112, 116, 124, 138, 140, 144, 145, 153, 178, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 242, 244, 245, 246, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 272, 274, 275, 276, 277, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 301, 312, 328, 334, 335, 347, 351, 352, 353, 354, 358, 363, 364, 365, 366, 368, 371, 373, 374, 375, 376, 377, 381, 386, 389, 398, 399, 400, 402, 407, 418, 433, 444, 450, 457, 482, 483, 507, 508, 521, 522, 523, 538, 556, 561, 613, 615, 618, 620, 621, 622, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 655, 656, 665, 666, 667, 668, 670, 672, 673, 674, 675, 676, 677, 678, 679, 681, 682, 683, 684, 685, 686, 688, 690, 692, 693, 705, 721, 742, 743, 744, 746, 747, 748, 749, 750, 751, 752, 756, 757, 758, 759, 760, 761, 762, 764, 765, 772, 773, 775, 777, 787, 788, 790, 791, 793, 794, 795, 796, 804, 805, 811, 813, 815, 817, 818, 819, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 843, 844, 845, 846, 848, 850, 851, 852, 857, 859, 863, 865, 866, 869, 871, 876], "comprehens": [0, 19, 811, 819, 822, 842], "possibl": [0, 3, 36, 52, 56, 75, 79, 86, 96, 127, 246, 289, 311, 334, 335, 368, 371, 374, 376, 377, 397, 452, 461, 462, 463, 469, 471, 473, 474, 475, 482, 498, 571, 631, 633, 635, 646, 658, 701, 702, 703, 705, 707, 708, 710, 712, 759, 761, 775, 791, 805, 808, 811, 812, 815, 817, 818, 819, 822, 825, 826, 828, 830, 831, 833, 834, 836, 838, 839, 840, 841, 843, 846, 848, 851, 854, 859, 867, 869, 875], "us": [0, 1, 2, 3, 4, 6, 8, 9, 10, 12, 13, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 42, 44, 45, 47, 49, 50, 52, 53, 54, 55, 56, 57, 58, 60, 61, 63, 65, 66, 69, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 83, 84, 86, 88, 89, 94, 96, 97, 99, 102, 109, 137, 140, 151, 163, 165, 166, 177, 178, 198, 199, 201, 206, 210, 211, 212, 213, 215, 218, 224, 232, 260, 261, 263, 264, 266, 267, 268, 270, 271, 273, 282, 286, 291, 311, 313, 314, 316, 317, 318, 326, 348, 351, 352, 355, 368, 371, 374, 375, 376, 377, 380, 381, 382, 384, 386, 393, 394, 395, 397, 398, 399, 400, 401, 403, 408, 410, 411, 412, 413, 416, 418, 419, 420, 422, 427, 429, 433, 439, 441, 443, 444, 446, 447, 448, 450, 451, 456, 473, 477, 481, 483, 491, 495, 500, 502, 506, 507, 508, 509, 510, 511, 512, 513, 514, 521, 528, 531, 549, 550, 559, 560, 571, 572, 579, 581, 582, 584, 591, 592, 604, 605, 607, 614, 615, 620, 621, 625, 626, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 640, 642, 644, 646, 659, 660, 662, 665, 670, 672, 679, 683, 687, 690, 693, 695, 704, 705, 706, 710, 714, 715, 716, 717, 719, 720, 726, 727, 728, 730, 737, 738, 739, 740, 742, 743, 744, 745, 748, 750, 758, 773, 775, 776, 777, 778, 783, 787, 788, 790, 791, 792, 793, 794, 795, 800, 804, 805, 809, 812, 814, 816, 819, 821, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 843, 844, 845, 846, 847, 848, 849, 850, 852, 853, 854, 856, 860, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876], "easi": [0, 30, 31, 44, 818, 819, 823, 824, 826, 836, 838, 841, 843, 846, 859, 867, 869, 875, 876], "follow": [0, 5, 6, 13, 24, 25, 26, 28, 30, 31, 34, 35, 36, 42, 45, 46, 56, 57, 58, 60, 61, 67, 73, 79, 80, 81, 83, 84, 133, 164, 167, 212, 222, 239, 246, 272, 274, 281, 282, 318, 368, 374, 376, 377, 380, 397, 410, 418, 456, 471, 483, 500, 502, 559, 560, 561, 591, 592, 615, 618, 620, 621, 622, 628, 629, 630, 631, 633, 634, 635, 636, 640, 644, 662, 665, 677, 683, 693, 723, 729, 748, 749, 750, 751, 791, 795, 811, 813, 817, 818, 819, 820, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 858, 859, 862, 866, 869, 872], "attract": 0, "visual": [0, 5, 6, 13, 48, 809, 811, 818, 833, 840, 843, 854, 869, 871, 874], "graph": [0, 3, 5, 6, 7, 11, 13, 19, 20, 23, 25, 27, 28, 31, 37, 38, 43, 48, 49, 67, 644, 748, 749, 750, 751, 783, 811, 826, 836, 840, 842, 846, 848, 853, 854, 856, 860, 861, 862, 863, 864, 865, 869, 872], "nice": [0, 843, 860, 869], "format": [0, 27, 28, 30, 31, 42, 44, 45, 46, 54, 57, 60, 69, 72, 73, 74, 77, 83, 99, 117, 162, 196, 374, 375, 385, 416, 449, 517, 544, 625, 629, 630, 633, 635, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 660, 758, 768, 769, 770, 787, 811, 818, 819, 821, 827, 828, 829, 830, 831, 832, 840, 842, 851, 863, 865, 867, 869, 870], "result": [0, 3, 7, 8, 10, 11, 12, 13, 15, 17, 25, 26, 27, 28, 30, 31, 42, 50, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 101, 102, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 140, 141, 142, 143, 144, 145, 147, 148, 151, 153, 178, 179, 213, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 321, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 366, 368, 371, 372, 374, 375, 376, 377, 380, 381, 382, 384, 386, 387, 388, 389, 390, 391, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 406, 407, 408, 410, 411, 412, 413, 414, 416, 417, 418, 419, 421, 422, 423, 424, 425, 426, 427, 431, 432, 434, 435, 439, 440, 441, 442, 443, 445, 449, 452, 453, 454, 455, 457, 458, 460, 467, 468, 471, 473, 474, 475, 476, 477, 480, 481, 482, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 519, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 539, 540, 544, 545, 546, 551, 552, 556, 561, 568, 575, 576, 614, 615, 616, 618, 620, 621, 622, 623, 625, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 708, 709, 710, 711, 713, 720, 723, 724, 726, 730, 734, 736, 737, 738, 739, 740, 742, 743, 744, 745, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 772, 777, 783, 797, 805, 809, 811, 815, 817, 819, 822, 823, 825, 826, 827, 828, 830, 831, 833, 835, 836, 838, 839, 840, 841, 843, 844, 848, 851, 854, 862, 863, 864, 870, 872], "etc": [0, 33, 38, 45, 52, 56, 65, 67, 71, 75, 79, 88, 94, 128, 136, 137, 140, 374, 381, 403, 408, 419, 507, 508, 510, 511, 628, 642, 644, 737, 738, 739, 740, 748, 749, 750, 751, 775, 778, 790, 791, 792, 793, 794, 795, 796, 817, 818, 819, 820, 822, 823, 824, 825, 826, 828, 830, 832, 835, 840, 841, 843, 844, 848, 850, 851, 854, 856, 860, 862, 867, 869, 875], "gener": [0, 6, 7, 19, 23, 28, 30, 31, 33, 36, 44, 46, 48, 49, 52, 55, 56, 60, 65, 71, 75, 78, 79, 83, 88, 94, 97, 125, 136, 137, 146, 154, 239, 242, 252, 253, 268, 272, 281, 311, 314, 318, 319, 320, 322, 323, 324, 325, 326, 327, 334, 335, 368, 371, 374, 375, 377, 381, 386, 418, 424, 446, 491, 509, 521, 628, 629, 631, 635, 636, 638, 642, 646, 658, 684, 685, 688, 691, 713, 737, 738, 740, 741, 763, 775, 778, 783, 795, 804, 811, 817, 818, 819, 821, 822, 823, 825, 828, 829, 830, 831, 832, 835, 836, 839, 840, 841, 844, 847, 848, 850, 852, 853, 854, 856, 867, 868, 869, 870, 871, 872, 873, 874, 875], "tone": [0, 4], "feel": [0, 5, 6, 45, 101, 102, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 787, 788, 790, 791, 793, 794, 795, 796, 811, 813, 815, 817, 818, 819, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 843, 844, 846, 847, 855, 862], "free": [0, 5, 6, 7, 44, 45, 101, 102, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 787, 788, 790, 791, 793, 794, 795, 796, 811, 813, 815, 816, 817, 819, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 843, 844, 846, 847, 855, 862, 870, 872], "includ": [0, 5, 13, 19, 23, 33, 38, 52, 55, 56, 57, 61, 66, 69, 70, 73, 75, 78, 79, 80, 84, 89, 92, 93, 125, 126, 127, 136, 137, 139, 146, 219, 243, 247, 248, 249, 252, 254, 257, 265, 273, 286, 291, 313, 316, 317, 318, 321, 327, 330, 332, 334, 335, 339, 340, 341, 344, 345, 346, 347, 349, 351, 352, 354, 355, 356, 357, 360, 361, 368, 371, 374, 377, 386, 393, 394, 395, 425, 428, 430, 474, 475, 477, 480, 482, 484, 487, 509, 511, 512, 520, 524, 526, 527, 529, 530, 531, 557, 612, 628, 631, 633, 635, 636, 640, 642, 643, 646, 647, 660, 671, 691, 693, 717, 740, 744, 759, 760, 761, 762, 763, 764, 765, 766, 767, 772, 775, 776, 778, 790, 791, 794, 807, 809, 811, 817, 819, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 835, 836, 839, 840, 841, 842, 843, 844, 846, 848, 859, 862, 863, 866, 867, 869, 871, 874, 875, 876], "emoji": [0, 817], "don": [0, 12, 13, 15, 17, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 44, 46, 71, 94, 811, 817, 818, 819, 827, 828, 829, 834, 838, 843, 846, 852, 854, 855, 860, 862], "t": [0, 4, 5, 6, 12, 13, 15, 17, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 36, 42, 44, 45, 46, 56, 60, 71, 79, 83, 94, 96, 97, 101, 348, 363, 371, 373, 375, 429, 561, 579, 594, 616, 633, 634, 635, 640, 659, 661, 725, 770, 791, 811, 813, 814, 817, 818, 819, 821, 823, 824, 826, 827, 828, 829, 830, 833, 834, 836, 837, 838, 839, 843, 844, 846, 848, 850, 851, 852, 853, 854, 855, 859, 860, 862, 863, 864, 867, 869, 871], "keep": [0, 1, 15, 17, 21, 27, 28, 30, 56, 63, 73, 79, 86, 96, 99, 359, 375, 450, 638, 712, 816, 817, 818, 819, 822, 825, 826, 827, 832, 839, 840, 843, 844, 846, 851, 853, 855, 863], "thing": [0, 6, 28, 42, 44, 804, 816, 817, 818, 819, 824, 840, 843, 846, 850, 851, 858, 859, 860, 869], "super": [0, 3, 7, 15, 17, 30, 31, 44, 56, 79, 375, 429, 811, 832, 848, 851, 852, 853, 863], "seriou": 0, "given": [0, 3, 6, 21, 30, 43, 56, 57, 62, 63, 65, 73, 79, 80, 81, 85, 86, 88, 96, 97, 99, 101, 102, 125, 129, 136, 137, 157, 158, 159, 160, 161, 173, 178, 197, 206, 210, 211, 212, 214, 218, 291, 321, 330, 333, 339, 340, 348, 349, 350, 352, 355, 368, 371, 374, 375, 376, 377, 380, 381, 386, 393, 394, 395, 396, 401, 402, 403, 406, 407, 408, 410, 411, 412, 413, 414, 419, 429, 434, 449, 453, 454, 455, 457, 458, 459, 460, 470, 471, 472, 479, 481, 493, 499, 503, 504, 505, 506, 507, 508, 509, 510, 511, 521, 522, 523, 524, 530, 552, 556, 575, 576, 586, 614, 615, 618, 620, 621, 622, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 694, 695, 696, 697, 698, 701, 702, 703, 704, 706, 707, 711, 712, 724, 725, 734, 735, 738, 739, 740, 742, 754, 755, 756, 757, 770, 775, 776, 777, 778, 783, 787, 788, 790, 791, 793, 794, 795, 796, 797, 804, 805, 811, 814, 815, 817, 818, 819, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 843, 844, 846, 849, 850, 852, 859, 860, 866, 871, 872, 875, 876], "an": [0, 2, 3, 5, 6, 8, 9, 12, 13, 19, 20, 21, 22, 23, 25, 26, 27, 28, 30, 31, 36, 42, 44, 45, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 73, 75, 76, 77, 78, 79, 80, 84, 85, 86, 88, 89, 90, 92, 93, 94, 96, 97, 101, 102, 109, 110, 111, 112, 113, 114, 115, 116, 117, 121, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 164, 167, 170, 174, 178, 179, 209, 213, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 302, 303, 304, 305, 306, 308, 309, 310, 312, 313, 315, 316, 317, 319, 320, 327, 328, 329, 330, 331, 332, 334, 335, 337, 340, 344, 349, 353, 358, 366, 368, 371, 374, 375, 376, 377, 380, 381, 384, 386, 387, 388, 389, 390, 391, 393, 394, 395, 396, 397, 398, 399, 400, 406, 408, 410, 411, 412, 413, 416, 417, 418, 419, 420, 421, 422, 423, 425, 428, 429, 430, 455, 456, 460, 461, 462, 463, 467, 468, 469, 471, 478, 482, 483, 489, 491, 495, 497, 498, 500, 501, 502, 505, 507, 508, 510, 513, 514, 519, 520, 521, 522, 523, 524, 525, 528, 529, 532, 537, 539, 540, 548, 551, 555, 556, 557, 559, 560, 561, 563, 564, 565, 566, 567, 570, 576, 579, 580, 589, 590, 594, 598, 599, 600, 613, 616, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 657, 658, 659, 660, 662, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 723, 736, 738, 742, 743, 744, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 770, 772, 775, 777, 778, 780, 783, 787, 788, 790, 791, 793, 794, 795, 796, 805, 809, 811, 813, 814, 815, 818, 819, 820, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 843, 844, 845, 846, 848, 850, 851, 852, 853, 854, 855, 856, 859, 860, 861, 862, 863, 864, 865, 867, 868, 869, 870, 872, 873, 875, 876], "intern": [0, 13, 73, 104, 105, 106, 640, 717, 727, 728, 790, 791, 792, 793, 794, 796, 820, 823, 826, 829, 831, 839, 841, 843, 845], "releas": [0, 5, 45, 817, 818, 828, 844, 846, 854, 860, 869, 875], "tracer": [0, 3, 7, 11, 12, 22, 25, 26, 27, 28, 31, 47, 49, 840, 847, 849, 854, 856, 863, 864, 865], "i": [0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 17, 19, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 96, 97, 99, 101, 102, 109, 110, 111, 112, 113, 114, 115, 116, 117, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 155, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 179, 191, 193, 195, 196, 198, 199, 201, 203, 206, 211, 212, 213, 214, 215, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 308, 309, 310, 311, 312, 314, 315, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 360, 361, 362, 366, 368, 371, 372, 374, 375, 376, 377, 380, 381, 384, 386, 387, 388, 390, 391, 393, 394, 395, 396, 397, 398, 399, 400, 403, 406, 408, 410, 411, 412, 413, 414, 417, 418, 419, 420, 421, 422, 426, 427, 428, 429, 431, 432, 433, 434, 436, 437, 441, 442, 443, 444, 445, 446, 447, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 461, 462, 463, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 481, 482, 483, 484, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 513, 514, 519, 520, 521, 522, 523, 524, 526, 527, 528, 529, 530, 531, 532, 533, 536, 537, 539, 540, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 554, 555, 556, 557, 559, 560, 561, 563, 564, 565, 566, 567, 568, 571, 572, 575, 576, 577, 579, 585, 589, 590, 591, 592, 594, 596, 598, 599, 600, 612, 613, 615, 616, 617, 618, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 656, 657, 658, 659, 660, 661, 662, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 723, 724, 725, 726, 727, 728, 729, 730, 734, 735, 736, 737, 738, 739, 740, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 772, 773, 775, 776, 777, 778, 783, 787, 788, 790, 791, 792, 793, 794, 795, 797, 800, 801, 804, 805, 809, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 858, 859, 860, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876], "around": [0, 14, 15, 17, 19, 56, 73, 79, 102, 377, 483, 491, 817, 819, 822, 823, 825, 829, 835, 836, 840, 843, 844, 850, 854, 856, 862, 866, 867, 869, 876], "corner": [0, 56, 79, 374, 410, 818, 819, 833, 840], "anybodi": 0, "abl": [0, 3, 5, 6, 7, 32, 36, 47, 49, 73, 96, 818, 819, 820, 822, 828, 833, 836, 839, 840, 844, 848, 853, 862, 872, 875], "start": [0, 1, 5, 6, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 45, 46, 52, 56, 73, 75, 79, 83, 125, 133, 136, 137, 352, 362, 371, 372, 374, 377, 386, 417, 473, 476, 484, 486, 496, 530, 628, 777, 804, 809, 812, 817, 818, 819, 820, 821, 827, 828, 830, 831, 833, 834, 835, 840, 843, 846, 847, 848, 850, 851, 852, 854, 862, 863, 869, 875], "work": [0, 5, 28, 30, 31, 42, 43, 45, 49, 51, 56, 79, 96, 386, 531, 636, 640, 687, 724, 725, 729, 734, 735, 811, 813, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 839, 840, 841, 843, 844, 847, 848, 850, 852, 853, 855, 860, 862, 863, 864, 867, 869, 871, 873, 876], "shortli": 0, "so": [0, 1, 6, 7, 10, 12, 13, 15, 17, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 36, 42, 44, 47, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 96, 99, 101, 109, 110, 111, 112, 113, 114, 115, 116, 117, 127, 128, 130, 132, 133, 135, 137, 138, 139, 140, 142, 144, 145, 148, 152, 153, 154, 167, 171, 172, 179, 196, 213, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 316, 317, 318, 321, 328, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 366, 371, 374, 377, 384, 386, 393, 394, 395, 396, 398, 399, 400, 402, 406, 407, 408, 411, 412, 413, 417, 418, 421, 422, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 435, 439, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 506, 508, 509, 510, 511, 512, 513, 514, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 536, 537, 539, 540, 543, 544, 545, 546, 547, 548, 551, 552, 555, 557, 559, 560, 561, 563, 564, 565, 567, 568, 570, 575, 576, 590, 591, 592, 593, 594, 596, 598, 599, 612, 614, 615, 618, 620, 621, 622, 623, 635, 640, 649, 650, 651, 652, 653, 654, 656, 657, 658, 659, 661, 665, 666, 667, 669, 670, 671, 672, 673, 674, 675, 676, 677, 682, 683, 684, 686, 693, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 717, 728, 736, 737, 738, 739, 740, 742, 743, 744, 745, 746, 747, 748, 749, 750, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 765, 766, 767, 805, 811, 815, 817, 818, 819, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 837, 838, 839, 840, 841, 843, 844, 846, 847, 848, 849, 850, 851, 852, 853, 854, 858, 859, 862, 863, 864, 869, 870, 871, 873], "worri": [0, 30, 31, 817, 818, 834], "about": [0, 19, 20, 21, 24, 26, 28, 30, 31, 34, 45, 46, 53, 76, 164, 167, 629, 809, 811, 813, 816, 817, 818, 819, 820, 821, 822, 825, 827, 828, 829, 834, 835, 839, 841, 842, 843, 844, 845, 846, 847, 848, 850, 851, 852, 853, 854, 860, 864, 870, 871, 874], "have": [0, 1, 3, 4, 5, 6, 7, 10, 12, 13, 15, 17, 19, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 34, 42, 44, 46, 50, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 96, 97, 101, 102, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 147, 148, 151, 152, 153, 164, 213, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 328, 334, 335, 336, 337, 342, 343, 347, 349, 351, 352, 353, 354, 358, 361, 366, 368, 371, 374, 375, 376, 377, 380, 381, 382, 384, 386, 387, 388, 389, 390, 391, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 407, 408, 410, 411, 412, 413, 416, 418, 419, 423, 425, 426, 428, 429, 434, 435, 440, 441, 442, 443, 448, 452, 453, 454, 455, 456, 457, 458, 462, 463, 468, 469, 471, 476, 484, 485, 486, 487, 489, 491, 493, 495, 496, 503, 504, 506, 507, 508, 510, 511, 512, 514, 521, 522, 523, 524, 528, 532, 539, 540, 544, 545, 546, 551, 552, 561, 575, 576, 579, 614, 615, 618, 620, 621, 622, 623, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 708, 709, 710, 711, 713, 736, 737, 738, 739, 740, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 755, 756, 757, 759, 760, 761, 762, 763, 764, 765, 766, 767, 775, 787, 788, 790, 791, 793, 794, 795, 796, 804, 805, 811, 813, 814, 815, 817, 818, 819, 820, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 843, 844, 846, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 862, 864, 865, 866, 867, 868, 869, 871, 875, 876, 877], "access": [0, 27, 30, 31, 73, 811, 817, 818, 819, 827, 828, 834, 839, 840, 855, 863, 869, 871, 873], "transpil": [0, 8, 9, 10, 11, 12, 14, 19, 20, 22, 23, 33, 782, 783, 811, 817, 818, 832, 833, 840, 847, 848, 849, 856, 861, 862, 864, 869, 875, 876], "code": [0, 4, 5, 10, 11, 12, 19, 20, 27, 28, 30, 32, 33, 34, 35, 36, 37, 44, 45, 54, 55, 73, 77, 78, 102, 213, 259, 386, 528, 537, 545, 546, 561, 575, 579, 594, 630, 633, 635, 636, 638, 657, 678, 679, 680, 709, 809, 811, 814, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 835, 836, 837, 839, 840, 841, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 856, 858, 859, 860, 861, 862, 863, 864, 865, 867, 868, 869, 870, 872, 873, 874, 875, 876], "now": [0, 4, 5, 6, 8, 10, 12, 13, 15, 17, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 42, 44, 46, 791, 792, 793, 811, 818, 822, 823, 824, 825, 826, 827, 828, 829, 833, 835, 837, 840, 841, 843, 844, 846, 850, 851, 853, 854, 860, 862, 863, 864, 869], "you": [0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 17, 19, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 42, 43, 44, 45, 46, 47, 48, 49, 56, 57, 79, 80, 96, 101, 102, 377, 386, 471, 528, 551, 552, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 662, 787, 788, 790, 791, 793, 794, 795, 796, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 858, 859, 860, 862, 863, 864, 869, 877], "can": [0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 17, 19, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 42, 43, 44, 45, 46, 49, 52, 53, 56, 57, 61, 63, 65, 67, 75, 76, 79, 80, 84, 86, 88, 90, 96, 97, 111, 114, 126, 127, 137, 139, 154, 193, 210, 211, 212, 301, 318, 366, 368, 374, 375, 376, 377, 380, 381, 384, 386, 397, 410, 434, 441, 443, 448, 456, 468, 495, 500, 508, 509, 514, 521, 568, 579, 613, 616, 625, 628, 629, 630, 633, 634, 635, 636, 638, 642, 662, 670, 676, 686, 690, 705, 709, 738, 739, 740, 748, 772, 775, 776, 777, 778, 783, 805, 811, 812, 813, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 858, 859, 860, 862, 863, 864, 866, 867, 868, 869, 870, 872, 873, 875, 876], "style": [0, 13, 44, 46, 377, 483, 643, 746, 819, 834, 869], "stori": 0, "If": [0, 1, 3, 4, 5, 6, 8, 9, 12, 13, 15, 17, 19, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 36, 45, 48, 49, 51, 52, 53, 55, 56, 57, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 97, 109, 110, 111, 112, 113, 114, 115, 116, 117, 122, 125, 126, 127, 129, 130, 131, 133, 134, 135, 136, 137, 138, 140, 141, 142, 144, 145, 146, 147, 148, 151, 152, 153, 154, 179, 195, 211, 213, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 250, 251, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 302, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 327, 328, 330, 333, 334, 335, 336, 337, 339, 340, 341, 345, 349, 350, 355, 356, 358, 360, 361, 362, 368, 371, 372, 374, 375, 376, 377, 380, 381, 386, 387, 393, 394, 395, 396, 397, 398, 399, 400, 403, 406, 408, 410, 411, 412, 413, 418, 419, 420, 422, 427, 429, 431, 433, 434, 441, 443, 445, 446, 448, 449, 451, 452, 453, 454, 455, 456, 457, 458, 461, 462, 463, 467, 468, 469, 471, 472, 473, 474, 475, 478, 482, 488, 489, 490, 491, 492, 493, 495, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 520, 521, 522, 523, 524, 526, 527, 528, 529, 530, 531, 532, 533, 536, 537, 539, 540, 544, 545, 546, 547, 548, 551, 552, 554, 555, 556, 557, 559, 560, 561, 563, 564, 567, 568, 575, 576, 580, 590, 591, 592, 594, 596, 598, 599, 612, 613, 616, 618, 623, 625, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 640, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 658, 659, 662, 665, 666, 667, 669, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 690, 691, 692, 693, 695, 696, 697, 698, 699, 701, 702, 703, 705, 706, 707, 708, 709, 710, 712, 713, 714, 715, 716, 729, 730, 737, 738, 739, 740, 742, 743, 744, 745, 746, 748, 749, 750, 751, 752, 754, 755, 756, 757, 759, 760, 761, 762, 763, 764, 765, 766, 767, 772, 775, 776, 777, 790, 791, 793, 794, 800, 805, 809, 811, 812, 813, 814, 815, 817, 818, 819, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 846, 847, 848, 850, 851, 853, 854, 855, 858, 862, 863, 864], "anyon": [0, 811, 812, 819, 827, 854, 859, 875], "ha": [0, 3, 5, 7, 9, 11, 12, 13, 15, 17, 21, 23, 27, 30, 31, 33, 36, 38, 42, 49, 52, 56, 61, 63, 67, 69, 73, 76, 79, 80, 84, 86, 90, 92, 96, 138, 195, 219, 239, 242, 244, 246, 256, 272, 274, 279, 282, 284, 285, 289, 329, 330, 331, 368, 375, 376, 377, 386, 410, 445, 455, 466, 490, 492, 497, 520, 522, 523, 525, 557, 628, 630, 631, 635, 636, 638, 643, 644, 646, 661, 662, 676, 677, 685, 686, 688, 690, 693, 701, 708, 746, 749, 750, 751, 756, 757, 760, 762, 763, 764, 765, 772, 775, 778, 800, 817, 819, 822, 824, 825, 826, 827, 828, 829, 830, 831, 836, 837, 838, 839, 840, 841, 843, 844, 846, 848, 849, 850, 852, 853, 854, 855, 858, 859, 860, 862, 864, 865, 868, 869, 871, 872, 875], "ani": [0, 5, 6, 7, 11, 15, 17, 19, 20, 21, 22, 23, 32, 33, 36, 42, 43, 44, 45, 46, 48, 49, 51, 52, 54, 55, 56, 57, 61, 70, 71, 75, 77, 78, 79, 80, 93, 94, 96, 101, 102, 121, 122, 124, 125, 126, 127, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 154, 155, 170, 174, 178, 213, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 239, 240, 242, 244, 245, 246, 250, 251, 252, 253, 254, 255, 259, 261, 262, 263, 264, 266, 267, 268, 269, 272, 274, 275, 276, 277, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 312, 327, 328, 334, 335, 337, 340, 368, 371, 374, 375, 376, 377, 380, 386, 393, 394, 395, 396, 398, 399, 400, 406, 411, 412, 413, 418, 419, 420, 429, 434, 451, 472, 483, 491, 495, 500, 501, 502, 521, 524, 527, 528, 529, 533, 543, 544, 545, 546, 547, 551, 555, 557, 559, 563, 565, 566, 584, 590, 592, 599, 600, 607, 613, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 657, 658, 659, 662, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 692, 693, 694, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 720, 723, 724, 726, 727, 734, 736, 740, 743, 744, 746, 747, 748, 749, 750, 751, 752, 755, 759, 760, 761, 762, 763, 764, 765, 766, 770, 772, 773, 777, 787, 788, 790, 791, 793, 794, 795, 796, 800, 804, 805, 811, 812, 813, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 843, 844, 845, 846, 848, 849, 850, 851, 852, 853, 854, 855, 856, 858, 859, 860, 862, 863, 864, 866, 867, 868, 869, 870, 872, 875, 876], "question": [0, 5, 6, 101, 102, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 787, 788, 790, 791, 793, 794, 795, 796, 811, 815, 817, 818, 819, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 843, 844, 846, 848, 849, 850, 851, 852, 853, 854, 858, 859, 860], "ping": 0, "me": [0, 819], "guillermo": 0, "commun": [0, 5, 6, 45, 812, 817, 818, 819, 820, 854, 859, 868, 869, 871], "ux": 0, "team": [0, 811, 812, 814, 817, 818, 819, 820, 840, 855, 871], "discord": [0, 5, 6, 45, 101, 102, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 787, 788, 790, 791, 793, 794, 795, 796, 811, 815, 817, 818, 819, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 846, 848, 849, 850, 851, 852, 853, 855, 858, 859, 860], "channel": [0, 28, 46, 56, 57, 60, 79, 80, 83, 101, 102, 374, 380, 398, 399, 400, 410, 500, 501, 502, 505, 544, 548, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 657, 787, 788, 790, 791, 793, 794, 795, 796, 819, 825, 833, 842], "To": [0, 5, 11, 12, 13, 15, 17, 21, 25, 26, 27, 28, 30, 31, 42, 45, 46, 47, 97, 246, 376, 455, 585, 631, 633, 790, 811, 817, 818, 822, 823, 824, 825, 828, 830, 832, 833, 834, 836, 837, 840, 841, 842, 843, 844, 851, 852, 853, 855, 862, 863], "ensur": [0, 11, 12, 15, 17, 25, 26, 27, 28, 56, 57, 79, 80, 374, 375, 411, 412, 413, 446, 561, 633, 770, 811, 814, 817, 818, 819, 823, 828, 829, 830, 832, 834, 835, 837, 839, 840, 841, 842, 843, 844, 855, 869], "similar": [0, 5, 21, 30, 31, 56, 281, 376, 451, 631, 635, 662, 791, 815, 817, 818, 826, 827, 828, 829, 832, 833, 834, 836, 837, 838, 840, 841, 843, 844, 851, 854, 858, 863, 865, 866, 867, 868, 875], "ar": [0, 1, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 15, 17, 19, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 42, 44, 45, 47, 48, 51, 52, 55, 56, 57, 60, 61, 63, 65, 66, 67, 73, 75, 78, 79, 80, 83, 84, 86, 88, 89, 90, 96, 97, 101, 102, 125, 135, 137, 140, 146, 200, 205, 207, 212, 236, 238, 239, 242, 246, 267, 268, 272, 277, 278, 282, 284, 289, 290, 291, 327, 329, 330, 331, 333, 336, 338, 339, 340, 344, 345, 350, 355, 358, 362, 367, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 379, 380, 381, 383, 386, 390, 391, 397, 398, 399, 400, 403, 408, 410, 418, 419, 428, 429, 433, 443, 444, 446, 450, 451, 452, 456, 457, 461, 462, 463, 473, 474, 475, 477, 483, 486, 490, 491, 500, 502, 507, 508, 509, 510, 511, 521, 526, 527, 528, 529, 530, 531, 533, 536, 537, 538, 547, 553, 558, 562, 573, 574, 583, 594, 606, 616, 628, 630, 631, 633, 634, 635, 636, 638, 640, 642, 643, 644, 658, 659, 660, 662, 665, 667, 671, 672, 673, 676, 677, 679, 682, 683, 686, 687, 691, 692, 693, 698, 699, 702, 706, 708, 718, 723, 728, 729, 730, 738, 739, 740, 743, 744, 745, 746, 748, 750, 770, 772, 775, 776, 777, 778, 783, 790, 793, 796, 797, 804, 805, 808, 809, 811, 812, 813, 814, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 858, 859, 860, 862, 863, 864, 865, 866, 869, 870, 871, 872, 873, 874, 875, 876, 877], "across": [0, 11, 12, 13, 25, 26, 27, 28, 42, 56, 66, 73, 79, 80, 89, 101, 210, 211, 239, 246, 272, 290, 376, 380, 451, 502, 505, 536, 557, 593, 630, 631, 633, 635, 640, 643, 658, 662, 723, 743, 744, 791, 817, 822, 828, 830, 832, 835, 836, 838, 843, 846, 867, 869, 874], "templat": [0, 811, 825, 831, 843], "help": [0, 19, 46, 48, 53, 534, 579, 633, 646, 764, 790, 811, 812, 813, 817, 818, 820, 823, 824, 825, 826, 827, 828, 830, 834, 836, 837, 839, 840, 843, 844, 850, 851, 852, 855, 856, 865, 869, 871, 875], "get": [0, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 15, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 44, 45, 47, 53, 54, 61, 73, 77, 84, 101, 162, 163, 164, 167, 195, 196, 197, 200, 206, 211, 214, 218, 377, 488, 535, 553, 574, 593, 629, 630, 633, 636, 640, 693, 719, 775, 790, 791, 804, 812, 814, 816, 817, 818, 820, 821, 822, 827, 828, 829, 833, 836, 837, 838, 839, 840, 841, 842, 843, 848, 849, 850, 851, 852, 856, 860, 863, 864, 869, 875], "It": [0, 3, 6, 12, 13, 22, 25, 26, 27, 28, 30, 31, 32, 33, 42, 43, 44, 49, 50, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 96, 101, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 140, 141, 142, 143, 144, 145, 147, 148, 151, 153, 213, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 250, 251, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 328, 334, 335, 336, 337, 342, 343, 347, 349, 351, 352, 353, 354, 358, 366, 368, 371, 374, 375, 376, 377, 380, 381, 386, 387, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 407, 408, 410, 411, 412, 413, 416, 418, 423, 425, 426, 434, 435, 440, 441, 442, 443, 451, 452, 453, 454, 455, 457, 458, 468, 471, 476, 484, 485, 486, 487, 489, 491, 495, 496, 500, 503, 504, 506, 507, 508, 510, 511, 521, 522, 523, 524, 532, 539, 540, 544, 545, 546, 551, 552, 561, 575, 576, 577, 614, 615, 618, 620, 621, 622, 623, 625, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 662, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 677, 679, 680, 681, 682, 685, 687, 688, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 708, 709, 710, 711, 713, 716, 736, 737, 738, 739, 740, 742, 743, 744, 745, 747, 751, 752, 755, 756, 757, 760, 762, 763, 765, 766, 767, 790, 791, 811, 814, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 830, 831, 837, 839, 840, 841, 842, 843, 844, 845, 846, 848, 850, 851, 852, 861, 864, 867, 869, 870, 872, 873, 874, 875, 876], "locat": [0, 46, 140, 386, 522, 628, 640, 642, 645, 721, 737, 754, 805, 817, 819, 824, 825, 829, 840, 841, 843, 844, 855, 867], "asset": [0, 856], "01_templat": 0, "ipynb": 0, "pleas": [0, 36, 45, 49, 101, 102, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 787, 788, 790, 791, 793, 794, 795, 796, 811, 815, 817, 818, 819, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 846, 848, 849, 850, 851, 852, 853, 855, 858, 859, 860], "make": [0, 3, 7, 10, 11, 12, 13, 22, 30, 31, 32, 44, 48, 56, 79, 374, 418, 800, 811, 814, 817, 818, 819, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 843, 844, 846, 848, 850, 851, 853, 855, 859, 860, 863, 867, 869, 870, 871, 872, 875, 876], "copi": [0, 46, 49, 52, 53, 54, 55, 56, 57, 63, 73, 75, 76, 77, 78, 79, 80, 86, 96, 100, 126, 127, 128, 132, 143, 151, 213, 273, 377, 459, 461, 462, 463, 469, 471, 473, 474, 475, 478, 482, 489, 498, 554, 580, 591, 598, 599, 628, 629, 630, 631, 633, 638, 640, 645, 701, 702, 703, 705, 707, 708, 710, 712, 718, 753, 755, 783, 805, 818, 819, 822, 824, 827, 828, 831, 840, 841, 848, 854, 862, 863, 864], "firstli": [0, 22, 23, 26, 32, 33, 37, 42, 823, 828, 830, 831, 832, 836, 837, 839, 846, 851, 865, 875], "updat": [0, 4, 5, 6, 7, 8, 9, 10, 12, 13, 22, 24, 25, 26, 27, 28, 30, 31, 44, 46, 51, 57, 58, 73, 80, 81, 96, 377, 488, 561, 575, 576, 579, 580, 603, 614, 615, 618, 620, 621, 622, 633, 634, 635, 639, 640, 658, 661, 714, 715, 716, 724, 725, 729, 734, 735, 783, 788, 794, 795, 800, 805, 811, 817, 818, 819, 821, 822, 823, 826, 827, 828, 830, 835, 837, 838, 840, 841, 843, 846, 848, 850, 851, 853, 854], "file": [0, 5, 6, 44, 45, 46, 57, 73, 588, 611, 633, 793, 809, 813, 817, 818, 819, 822, 823, 824, 825, 826, 827, 829, 831, 832, 833, 834, 836, 840, 841, 842, 843, 844, 848, 851, 855, 865, 868, 869, 870], "name": [0, 5, 8, 10, 30, 31, 42, 44, 45, 46, 56, 61, 67, 71, 79, 84, 90, 94, 246, 374, 375, 377, 422, 428, 437, 493, 497, 534, 535, 631, 633, 636, 644, 671, 672, 683, 684, 686, 687, 691, 748, 749, 750, 772, 776, 783, 793, 800, 801, 803, 809, 817, 818, 819, 824, 825, 826, 827, 830, 831, 832, 835, 840, 841, 843, 844, 845, 846, 848, 851, 853, 869, 877], "match": [0, 53, 56, 73, 76, 79, 151, 246, 281, 338, 340, 371, 374, 376, 377, 419, 451, 466, 488, 492, 571, 629, 631, 633, 636, 672, 673, 677, 693, 770, 815, 817, 823, 825, 826, 830, 833, 841, 870, 875], "topic": [0, 19, 22, 23, 24, 32, 33, 34, 35, 36, 37, 837, 850, 869], "your": [0, 2, 3, 4, 6, 8, 9, 10, 12, 13, 15, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 34, 42, 44, 46, 48, 811, 812, 814, 815, 816, 817, 818, 820, 822, 824, 825, 827, 831, 833, 834, 838, 840, 842, 844, 846, 851, 852, 854, 855, 859, 860, 862, 863, 869, 877], "Then": [0, 49, 635, 662, 813, 817, 818, 819, 824, 825, 827, 833, 834, 837, 839, 843, 844, 854], "place": [0, 6, 11, 12, 25, 26, 27, 28, 44, 51, 52, 55, 56, 57, 61, 63, 73, 75, 77, 78, 79, 80, 84, 86, 125, 126, 127, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 154, 170, 174, 213, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 239, 240, 242, 244, 245, 246, 250, 251, 252, 253, 254, 255, 256, 259, 261, 262, 263, 264, 266, 267, 268, 269, 272, 273, 274, 275, 276, 277, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 311, 312, 315, 327, 328, 333, 334, 335, 337, 340, 341, 342, 343, 347, 349, 350, 351, 352, 354, 355, 356, 360, 361, 368, 371, 374, 375, 377, 386, 393, 394, 395, 396, 398, 399, 400, 406, 411, 412, 413, 418, 420, 429, 473, 483, 488, 491, 495, 508, 521, 524, 528, 537, 545, 546, 551, 555, 557, 559, 560, 561, 575, 579, 590, 594, 599, 603, 623, 628, 629, 630, 631, 633, 634, 635, 636, 638, 641, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 657, 658, 659, 662, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 692, 693, 694, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 736, 743, 744, 746, 747, 748, 749, 750, 751, 752, 755, 759, 760, 761, 762, 763, 764, 765, 766, 767, 795, 811, 815, 816, 819, 821, 822, 825, 826, 827, 829, 830, 831, 833, 835, 836, 840, 841, 843, 844, 846, 853, 856, 871], "its": [0, 5, 12, 21, 23, 30, 31, 33, 36, 43, 44, 46, 51, 53, 56, 63, 73, 76, 79, 80, 86, 99, 111, 114, 117, 122, 152, 157, 158, 159, 160, 161, 212, 239, 272, 291, 301, 366, 374, 377, 386, 414, 422, 495, 497, 524, 548, 597, 625, 627, 629, 630, 631, 633, 636, 638, 640, 676, 701, 705, 706, 710, 723, 772, 805, 811, 817, 818, 823, 826, 827, 828, 829, 831, 832, 833, 837, 838, 839, 840, 841, 843, 844, 845, 846, 848, 853, 854, 856, 862, 868, 869, 875], "folder": [0, 11, 12, 25, 26, 27, 28, 46, 811, 818, 819, 822, 825, 827, 833, 836, 840, 843, 844, 845], "next": [0, 5, 6, 7, 22, 23, 24, 25, 26, 27, 28, 32, 33, 34, 35, 36, 37, 44, 46, 56, 79, 164, 347, 351, 356, 360, 371, 629, 790, 795, 811, 817, 818, 819, 824, 828, 830, 831, 833, 834, 837, 849, 850, 851, 860, 869, 871], "edit": [0, 817, 818, 819, 834], "titl": [0, 13, 16, 18, 29, 45, 48, 811, 817, 819, 825], "descript": [0, 1, 39, 40, 41, 46, 49, 52, 55, 56, 61, 78, 79, 84, 125, 126, 127, 129, 130, 131, 132, 134, 135, 136, 137, 138, 141, 142, 143, 144, 145, 147, 148, 154, 170, 174, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 239, 240, 242, 244, 245, 246, 250, 251, 252, 253, 254, 255, 256, 259, 261, 262, 263, 264, 266, 267, 268, 269, 272, 274, 275, 276, 277, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 312, 328, 334, 335, 337, 340, 368, 371, 374, 375, 377, 386, 393, 394, 395, 396, 398, 399, 400, 406, 411, 412, 413, 418, 420, 429, 483, 491, 495, 521, 524, 551, 555, 557, 559, 590, 599, 623, 628, 629, 631, 633, 634, 635, 636, 638, 641, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 657, 658, 659, 662, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 692, 693, 694, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 736, 743, 744, 746, 747, 748, 749, 750, 751, 752, 755, 759, 760, 761, 762, 763, 764, 765, 766, 767, 817, 819, 831, 838, 839], "accordingli": [0, 56, 61, 66, 67, 69, 70, 79, 84, 89, 92, 93, 138, 239, 244, 246, 262, 272, 286, 334, 335, 371, 628, 631, 636, 643, 644, 646, 647, 693, 744, 748, 749, 750, 751, 759, 760, 761, 762, 763, 764, 765, 766, 767, 840, 848, 855], "thei": [0, 13, 37, 42, 47, 56, 61, 65, 67, 73, 84, 88, 90, 177, 291, 345, 371, 629, 631, 635, 636, 639, 642, 644, 660, 691, 714, 715, 737, 748, 770, 796, 811, 816, 817, 818, 821, 822, 824, 825, 826, 827, 828, 829, 830, 832, 834, 836, 837, 839, 840, 843, 844, 846, 848, 850, 851, 852, 853, 854, 862, 866, 869, 871, 872, 875, 876], "render": [0, 825, 831], "correctli": [0, 27, 30, 31, 44, 56, 61, 66, 79, 84, 89, 339, 371, 386, 527, 528, 529, 530, 531, 636, 643, 677, 743, 817, 818, 819, 823, 826, 828, 830, 832, 834, 835, 841, 843, 846, 852, 854, 862, 863], "webpag": [0, 19], "content": [0, 1, 16, 18, 29, 30, 45, 46, 56, 73, 79, 386, 528, 817, 819, 825, 829, 839, 842, 848, 851, 855], "behind": [0, 21, 30, 811, 821, 835, 843, 847, 849], "exist": [0, 21, 30, 31, 44, 45, 46, 49, 52, 56, 57, 73, 75, 79, 80, 86, 127, 377, 461, 462, 468, 469, 471, 473, 474, 475, 482, 498, 543, 579, 633, 638, 699, 701, 702, 703, 705, 707, 708, 710, 712, 795, 797, 809, 811, 817, 818, 822, 824, 829, 830, 831, 836, 837, 839, 840, 843, 846, 848, 854, 856, 858, 859, 867, 869, 872, 875], "cell": [0, 1, 3, 4, 7, 11, 12, 13, 15, 17, 21, 22, 23, 24, 25, 26, 27, 28, 31, 45, 60, 83, 635, 660, 661, 791, 827, 848], "where": [0, 10, 23, 27, 33, 34, 38, 46, 52, 55, 56, 57, 61, 63, 65, 66, 69, 70, 73, 75, 78, 79, 80, 84, 86, 88, 89, 92, 93, 96, 97, 134, 135, 138, 140, 146, 227, 237, 239, 242, 244, 246, 247, 256, 261, 262, 263, 270, 271, 272, 277, 279, 283, 285, 289, 299, 301, 327, 329, 330, 331, 346, 350, 357, 366, 368, 371, 374, 375, 376, 377, 380, 381, 386, 388, 389, 390, 391, 397, 402, 403, 407, 422, 428, 429, 433, 434, 436, 437, 444, 450, 451, 452, 461, 462, 463, 477, 483, 500, 501, 502, 505, 507, 508, 510, 511, 521, 529, 530, 531, 561, 575, 613, 628, 631, 633, 635, 636, 638, 640, 642, 643, 646, 647, 660, 662, 667, 671, 672, 677, 679, 681, 682, 683, 686, 687, 690, 692, 698, 700, 701, 703, 709, 713, 721, 728, 737, 738, 739, 740, 745, 746, 761, 763, 765, 766, 767, 775, 790, 794, 805, 809, 811, 812, 815, 818, 819, 820, 822, 823, 824, 825, 826, 828, 829, 831, 832, 836, 837, 838, 839, 840, 841, 843, 844, 846, 848, 851, 852, 853, 854, 855, 858, 859, 860, 862, 867, 876], "Theh2": [0, 1, 16, 18, 29], "tag": [0, 1, 16, 18, 29, 818, 819], "section": [0, 1, 5, 6, 12, 13, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 35, 36, 37, 50, 56, 67, 79, 111, 374, 377, 408, 419, 469, 478, 498, 644, 748, 749, 750, 751, 811, 812, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 842, 843, 844, 846, 847, 851, 852, 864, 865, 872, 875], "h3": [0, 1, 16, 18, 29], "subsect": [0, 1, 16, 18, 29, 817, 818, 819, 822, 827], "step": [0, 1, 5, 6, 16, 17, 18, 29, 30, 31, 42, 44, 45, 46, 56, 58, 75, 79, 81, 125, 136, 374, 377, 420, 422, 477, 614, 615, 618, 620, 621, 622, 628, 634, 639, 714, 715, 716, 795, 809, 811, 817, 818, 819, 820, 823, 824, 826, 827, 828, 829, 830, 833, 838, 840, 843, 848, 851, 852, 853, 860, 869], "explan": [0, 1, 16, 18, 29, 817, 818, 819, 826, 831, 835, 840, 844, 850], "go": [0, 4, 5, 6, 15, 17, 21, 28, 31, 36, 51, 56, 79, 83, 374, 417, 421, 640, 728, 729, 811, 812, 815, 817, 818, 819, 821, 824, 825, 828, 830, 833, 834, 840, 841, 843, 844, 847, 851, 854, 865, 869, 870, 874, 876], "default": [0, 3, 5, 7, 30, 31, 44, 45, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 99, 102, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 157, 158, 159, 160, 161, 162, 165, 166, 167, 168, 171, 172, 177, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 190, 195, 196, 198, 199, 203, 206, 207, 208, 210, 211, 212, 213, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 322, 323, 324, 325, 326, 327, 328, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 366, 368, 371, 372, 374, 375, 376, 377, 380, 381, 382, 384, 386, 387, 389, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 406, 407, 408, 410, 411, 412, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 425, 426, 427, 429, 431, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 460, 461, 462, 463, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482, 483, 484, 485, 486, 487, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 536, 537, 539, 540, 544, 545, 546, 547, 548, 549, 550, 551, 552, 554, 555, 556, 557, 559, 560, 561, 563, 564, 567, 568, 571, 572, 575, 576, 579, 580, 585, 589, 590, 591, 592, 594, 596, 598, 599, 612, 613, 614, 615, 616, 617, 618, 620, 621, 622, 623, 625, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 677, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 723, 724, 725, 727, 728, 729, 730, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 770, 772, 775, 776, 777, 778, 783, 787, 788, 790, 791, 792, 793, 794, 795, 796, 804, 805, 809, 817, 818, 819, 824, 825, 828, 829, 830, 831, 832, 835, 836, 840, 843, 846, 848, 852, 856, 862, 869], "which": [0, 3, 5, 6, 8, 9, 12, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 43, 44, 45, 46, 47, 48, 50, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 96, 99, 102, 109, 110, 111, 112, 113, 114, 115, 116, 117, 125, 126, 127, 129, 130, 131, 133, 134, 135, 136, 137, 139, 140, 141, 142, 144, 145, 146, 147, 148, 152, 154, 156, 162, 164, 167, 169, 172, 179, 191, 196, 200, 205, 207, 210, 211, 212, 213, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 250, 251, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 302, 303, 304, 305, 306, 308, 309, 310, 311, 312, 321, 324, 327, 328, 329, 330, 331, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 345, 347, 349, 350, 351, 352, 354, 355, 356, 358, 360, 361, 362, 363, 364, 365, 366, 368, 371, 372, 373, 374, 375, 376, 377, 380, 381, 384, 386, 397, 398, 399, 400, 402, 403, 407, 408, 417, 418, 419, 421, 426, 429, 441, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 461, 462, 463, 467, 468, 488, 489, 490, 491, 492, 493, 495, 500, 502, 503, 504, 506, 507, 508, 509, 510, 511, 513, 514, 521, 522, 523, 524, 526, 527, 528, 529, 530, 531, 533, 534, 536, 537, 539, 540, 543, 544, 545, 546, 547, 548, 551, 552, 553, 554, 555, 556, 557, 559, 560, 561, 563, 564, 567, 568, 573, 574, 575, 576, 590, 591, 592, 594, 596, 598, 599, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 640, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 658, 659, 660, 662, 665, 666, 667, 669, 670, 672, 673, 674, 675, 676, 677, 679, 680, 681, 683, 684, 685, 686, 690, 692, 693, 695, 696, 697, 698, 699, 701, 702, 704, 705, 706, 707, 708, 709, 712, 713, 722, 723, 724, 725, 730, 732, 733, 734, 735, 737, 738, 739, 740, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 755, 756, 757, 759, 760, 761, 762, 763, 764, 765, 766, 767, 772, 775, 776, 777, 787, 788, 790, 791, 792, 793, 794, 795, 796, 800, 801, 807, 809, 811, 813, 815, 817, 818, 819, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 843, 844, 845, 846, 847, 848, 850, 851, 852, 853, 854, 855, 856, 858, 859, 860, 862, 863, 865, 866, 867, 868, 869, 870, 872, 874, 875, 876], "text": [0, 4, 5, 11, 13, 44, 56, 57, 375, 376, 443, 451, 817, 819, 825, 830, 831], "paragraph": [0, 1, 16, 18, 29, 825], "p": [0, 1, 16, 18, 29, 42, 56, 57, 61, 79, 80, 84, 97, 138, 243, 375, 380, 425, 438, 506, 539, 540, 628, 631, 633, 636, 640, 677, 693, 725, 791, 811, 818, 819, 821], "without": [0, 3, 13, 33, 42, 46, 49, 67, 73, 99, 585, 600, 633, 638, 640, 644, 705, 718, 748, 749, 750, 751, 775, 778, 804, 818, 819, 823, 824, 826, 827, 828, 829, 830, 832, 835, 836, 840, 843, 844, 846, 850, 851, 852, 854, 862, 866, 869, 870, 871, 875], "path": [0, 11, 12, 13, 25, 26, 27, 28, 45, 46, 772, 783, 799, 818, 825, 839, 840, 841, 855, 869], "correspond": [0, 3, 10, 12, 17, 30, 31, 45, 53, 55, 56, 57, 60, 63, 66, 67, 69, 73, 76, 78, 79, 83, 86, 92, 96, 99, 102, 152, 164, 167, 227, 277, 291, 330, 344, 345, 368, 371, 374, 375, 377, 380, 386, 397, 403, 414, 419, 425, 428, 429, 430, 449, 474, 475, 495, 500, 501, 502, 505, 522, 523, 591, 613, 629, 631, 633, 635, 636, 638, 642, 643, 644, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 662, 667, 671, 672, 677, 684, 685, 705, 706, 737, 743, 744, 748, 749, 750, 751, 756, 757, 762, 763, 764, 765, 772, 775, 777, 804, 809, 811, 817, 819, 823, 824, 826, 827, 828, 830, 831, 832, 835, 836, 838, 840, 843, 846, 848, 862, 863, 864, 869], "toctre": [0, 825], "index": [0, 44, 45, 46, 49, 52, 56, 57, 63, 66, 67, 68, 73, 75, 79, 80, 86, 89, 90, 91, 131, 138, 312, 319, 320, 329, 330, 331, 368, 374, 375, 377, 382, 384, 386, 397, 403, 434, 436, 443, 466, 473, 476, 484, 486, 488, 491, 492, 495, 496, 512, 513, 522, 531, 534, 552, 554, 575, 576, 580, 626, 628, 633, 638, 640, 643, 644, 645, 705, 709, 719, 720, 721, 724, 725, 726, 732, 734, 743, 744, 746, 748, 749, 750, 752, 754, 776, 791, 805, 807, 826, 827, 832, 836, 837, 838, 839, 841, 843, 850, 869], "rst": [0, 836], "left": [0, 23, 33, 44, 45, 56, 61, 66, 68, 79, 84, 89, 91, 119, 120, 231, 246, 339, 355, 362, 371, 372, 374, 375, 377, 386, 409, 428, 433, 439, 446, 448, 474, 484, 526, 527, 528, 529, 530, 531, 544, 627, 631, 633, 636, 643, 645, 671, 672, 677, 686, 691, 743, 754, 775, 818, 819, 822, 825, 827, 828, 830, 833], "mai": [0, 5, 54, 55, 56, 61, 67, 68, 77, 78, 84, 91, 101, 102, 125, 132, 143, 213, 239, 240, 246, 251, 259, 267, 268, 272, 273, 275, 290, 334, 335, 371, 403, 543, 579, 628, 630, 631, 633, 636, 644, 645, 646, 684, 693, 748, 749, 750, 751, 752, 755, 759, 760, 761, 763, 775, 805, 816, 817, 818, 819, 822, 826, 827, 828, 832, 833, 836, 837, 838, 840, 841, 843, 846, 849, 850, 852, 860, 876], "need": [0, 3, 6, 10, 12, 19, 21, 27, 28, 30, 31, 44, 45, 46, 56, 57, 63, 79, 80, 86, 374, 375, 386, 397, 402, 403, 407, 428, 528, 539, 540, 561, 633, 635, 636, 638, 640, 662, 671, 698, 701, 728, 776, 811, 813, 817, 818, 819, 822, 823, 824, 825, 826, 827, 828, 830, 831, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 844, 846, 848, 850, 851, 854, 855, 860, 862, 863, 865, 869, 870, 871, 875], "add": [0, 23, 33, 46, 48, 55, 56, 64, 71, 73, 78, 79, 87, 94, 101, 102, 362, 372, 374, 376, 417, 456, 571, 600, 631, 633, 635, 636, 641, 646, 662, 690, 736, 764, 772, 783, 791, 794, 809, 811, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 831, 833, 834, 835, 836, 837, 839, 840, 843, 844, 846, 848, 850, 854, 855, 865, 866, 867, 869], "grid": [0, 46, 52, 138, 315, 368, 628, 830, 843], "item": [0, 4, 5, 6, 30, 31, 42, 44, 46, 51, 57, 71, 73, 75, 78, 79, 80, 133, 158, 195, 249, 265, 273, 340, 344, 357, 541, 551, 552, 556, 591, 592, 628, 629, 630, 633, 640, 647, 722, 723, 724, 725, 729, 734, 735, 769, 811, 817, 826, 828, 848, 850, 851, 853, 862], "card": [0, 56, 79, 359, 371, 874], "refer": [0, 7, 56, 63, 69, 70, 79, 81, 86, 92, 93, 131, 146, 244, 262, 312, 327, 357, 368, 371, 374, 375, 377, 403, 408, 419, 426, 450, 473, 614, 615, 628, 631, 634, 636, 638, 646, 647, 667, 669, 692, 705, 763, 765, 766, 767, 791, 811, 816, 817, 818, 819, 822, 823, 825, 827, 828, 835, 836, 837, 838, 839, 840, 841, 842, 843, 854, 855, 856, 869], "also": [0, 3, 4, 5, 6, 9, 10, 12, 13, 15, 17, 21, 23, 25, 26, 28, 30, 31, 33, 35, 36, 37, 44, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 97, 99, 101, 109, 110, 111, 112, 113, 114, 115, 116, 117, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 152, 153, 154, 167, 170, 171, 172, 174, 179, 196, 213, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 302, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 316, 317, 318, 321, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 368, 371, 374, 375, 377, 384, 386, 393, 394, 395, 396, 398, 399, 400, 402, 406, 407, 408, 411, 412, 413, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 435, 439, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 506, 508, 509, 510, 511, 512, 513, 514, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 536, 537, 539, 540, 543, 544, 545, 546, 547, 548, 551, 552, 555, 557, 559, 560, 561, 563, 564, 565, 567, 568, 570, 575, 576, 590, 591, 592, 593, 594, 596, 598, 599, 612, 614, 615, 618, 620, 621, 622, 623, 628, 629, 631, 633, 634, 635, 636, 638, 639, 640, 641, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 657, 658, 659, 661, 662, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 727, 728, 729, 736, 737, 738, 739, 740, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 775, 790, 791, 800, 811, 812, 813, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 843, 844, 846, 848, 851, 852, 853, 854, 855, 858, 859, 862, 863, 865, 866, 867, 868, 869, 870, 872, 874, 875, 876], "look": [0, 5, 6, 7, 21, 30, 31, 44, 46, 49, 811, 815, 817, 818, 819, 824, 825, 826, 828, 829, 830, 832, 833, 834, 835, 836, 840, 841, 843, 844, 845, 846, 848, 850, 852, 853, 855, 858, 862, 865, 869], "document": [0, 5, 6, 21, 30, 63, 246, 334, 335, 371, 613, 631, 633, 709, 812, 813, 816, 819, 825, 827, 828, 830, 839, 840, 841, 843, 851, 853], "sphinx": [0, 813, 825], "design": [0, 5, 13, 21, 30, 79, 246, 311, 316, 317, 368, 631, 811, 814, 821, 825, 827, 828, 839, 840, 841, 842, 846, 848, 850, 854, 858, 859, 865, 867, 869, 872, 873, 874], "websit": [0, 48, 818, 822, 859], "alreadi": [1, 5, 12, 22, 25, 26, 27, 28, 30, 31, 36, 44, 46, 49, 56, 61, 73, 79, 84, 235, 245, 272, 282, 292, 377, 386, 462, 463, 483, 519, 528, 631, 636, 674, 681, 804, 805, 811, 817, 818, 819, 824, 826, 828, 829, 835, 839, 840, 846, 854, 855, 869, 871, 876], "instal": [1, 6, 7, 8, 9, 10, 12, 13, 15, 17, 22, 23, 24, 25, 26, 27, 28, 30, 31, 44, 46, 47, 48, 49, 813, 818, 819, 824, 825, 833, 834], "skip": [1, 4, 46, 56, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 109, 110, 111, 112, 113, 114, 115, 116, 117, 133, 135, 140, 142, 148, 152, 154, 179, 213, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 250, 251, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 302, 303, 304, 305, 306, 308, 309, 310, 312, 333, 334, 335, 336, 337, 339, 341, 349, 350, 356, 358, 360, 361, 362, 375, 377, 398, 399, 400, 418, 434, 436, 443, 451, 452, 453, 454, 455, 456, 457, 458, 461, 462, 463, 467, 468, 484, 487, 489, 491, 492, 493, 495, 500, 502, 503, 504, 506, 508, 521, 522, 523, 524, 533, 536, 537, 539, 540, 544, 545, 546, 547, 548, 551, 552, 555, 557, 559, 560, 561, 563, 564, 567, 575, 576, 590, 591, 592, 594, 596, 598, 599, 612, 618, 623, 640, 649, 650, 651, 652, 658, 659, 665, 666, 667, 672, 673, 674, 675, 676, 677, 679, 681, 683, 684, 690, 695, 696, 697, 698, 702, 705, 706, 707, 708, 709, 712, 713, 730, 737, 738, 739, 740, 742, 745, 748, 749, 750, 751, 752, 756, 757, 760, 762, 763, 765, 766, 767, 776, 804, 825, 836, 843], "colab": [1, 4, 12, 13, 15, 17, 21, 22, 23, 24, 25, 26, 27, 28, 31, 44, 46, 48, 49], "manual": [1, 5, 6, 12, 13, 15, 17, 21, 22, 23, 24, 25, 26, 27, 28, 31, 640, 717, 727, 728, 817, 818, 819, 828, 834, 843, 852, 855], "do": [1, 3, 6, 7, 8, 9, 10, 11, 12, 13, 15, 17, 21, 22, 23, 24, 25, 26, 27, 28, 31, 42, 44, 46, 56, 57, 73, 79, 80, 239, 272, 281, 374, 376, 377, 386, 420, 456, 468, 528, 531, 561, 631, 633, 640, 717, 724, 727, 728, 729, 734, 777, 805, 811, 815, 817, 818, 819, 822, 823, 824, 826, 827, 828, 829, 830, 831, 833, 834, 835, 836, 837, 838, 839, 840, 841, 844, 846, 848, 850, 851, 852, 853, 854, 856, 860, 870, 875, 876], "run": [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 17, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 44, 46, 47, 48, 56, 58, 79, 81, 380, 500, 502, 614, 615, 620, 634, 635, 639, 660, 714, 715, 716, 772, 773, 791, 792, 793, 794, 804, 811, 813, 817, 818, 821, 823, 824, 827, 829, 830, 832, 834, 835, 837, 840, 841, 848, 849, 850, 851, 852, 853, 854, 855, 862, 863, 864, 867, 869, 870, 871, 872, 874, 875, 876], "below": [1, 11, 12, 13, 15, 17, 21, 22, 23, 24, 25, 26, 27, 28, 31, 35, 36, 37, 42, 45, 46, 47, 52, 56, 61, 79, 84, 92, 144, 145, 146, 246, 256, 279, 327, 328, 337, 368, 371, 377, 491, 628, 631, 636, 670, 690, 765, 812, 815, 817, 818, 821, 822, 826, 827, 828, 829, 830, 832, 833, 836, 839, 840, 841, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 862, 863, 864, 865, 867, 872, 874], "mind": [1, 15, 17, 21, 27, 30, 34, 817, 818, 823, 826, 843, 855, 863], "packag": [1, 3, 6, 7, 8, 9, 11, 12, 15, 25, 26, 27, 28, 31, 44, 45, 46, 49, 803, 815, 818, 827, 840, 854, 855, 869, 871], "avail": [1, 3, 5, 7, 11, 25, 26, 28, 30, 31, 46, 57, 80, 195, 201, 203, 204, 215, 545, 630, 633, 636, 687, 776, 809, 811, 818, 819, 826, 827, 828, 829, 831, 832, 840, 843, 846, 854, 855, 858, 862, 863, 864, 874, 875], "click": [1, 3, 46, 817, 818, 819, 827, 831, 833, 834, 849], "runtim": [1, 3, 4, 7, 10, 11, 12, 23, 30, 33, 44, 45, 821, 836, 843, 846, 869], "restart": [1, 3, 4, 7, 11, 44, 45, 818, 833], "pip": [1, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 15, 17, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 42, 43, 44, 45, 46, 47, 48, 49, 811, 815, 818, 825, 834], "q": [1, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 44, 45, 46, 56, 60, 61, 79, 83, 84, 361, 371, 375, 386, 428, 531, 635, 636, 640, 662, 665, 671, 672, 683, 725, 818, 819, 821, 841, 854], "git": [1, 3, 4, 7, 11, 30, 44, 45, 46, 47, 811, 813, 816, 818, 819, 822, 825, 827, 833, 834, 843, 855], "clone": [1, 3, 7, 11, 30, 44, 46, 47, 811, 813, 819, 833, 855], "http": [1, 3, 4, 5, 6, 7, 10, 11, 12, 17, 25, 26, 27, 28, 30, 31, 44, 45, 46, 47, 48, 49, 55, 56, 78, 79, 81, 146, 154, 242, 252, 253, 268, 327, 334, 335, 368, 371, 374, 377, 386, 418, 491, 521, 614, 615, 628, 629, 631, 634, 636, 638, 646, 684, 685, 713, 763, 811, 813, 818, 819, 822, 825, 827, 828, 831, 833, 855, 863], "github": [1, 3, 4, 7, 10, 11, 12, 30, 44, 45, 46, 47, 48, 811, 813, 814, 816, 819, 820, 822, 825, 827, 828, 830, 831, 833, 834, 842, 843, 855, 858, 877], "com": [1, 3, 4, 5, 6, 7, 10, 11, 12, 17, 30, 44, 45, 46, 47, 48, 811, 813, 818, 819, 822, 825, 827, 828, 833, 855], "unifyai": [1, 3, 7, 11, 30, 44, 45, 46, 47, 48, 811, 813, 818, 819, 825, 833, 855], "model": [1, 2, 3, 8, 13, 14, 19, 20, 21, 47, 49, 239, 272, 376, 452, 631, 788, 792, 793, 809, 811, 851, 852, 856, 862, 863, 867, 868, 869, 870, 871, 872, 873, 875, 876], "depth": [1, 3, 5, 7, 11, 45, 52, 56, 60, 75, 79, 83, 140, 374, 377, 410, 470, 544, 556, 628, 633, 635, 653, 654, 819, 827, 851, 852, 853, 855], "1": [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 17, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 42, 43, 44, 45, 46, 47, 49, 50, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 96, 97, 99, 101, 102, 109, 111, 112, 113, 114, 115, 116, 117, 118, 121, 122, 124, 125, 126, 127, 128, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 146, 148, 151, 152, 153, 154, 158, 162, 163, 164, 167, 172, 174, 179, 195, 196, 200, 204, 205, 207, 208, 213, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 321, 324, 325, 327, 329, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 366, 368, 371, 372, 374, 375, 376, 377, 380, 381, 382, 384, 386, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 406, 407, 408, 411, 412, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 439, 440, 441, 444, 445, 447, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 461, 462, 463, 464, 466, 467, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 533, 536, 537, 539, 540, 543, 544, 545, 546, 547, 548, 551, 552, 553, 554, 555, 556, 557, 559, 560, 561, 563, 564, 565, 567, 568, 570, 571, 573, 575, 576, 580, 589, 590, 591, 592, 593, 594, 596, 598, 599, 600, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 715, 716, 717, 718, 720, 721, 723, 724, 725, 726, 728, 729, 734, 735, 736, 737, 738, 739, 740, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 772, 775, 776, 777, 778, 780, 783, 787, 790, 791, 792, 793, 794, 795, 796, 800, 804, 805, 809, 811, 814, 815, 818, 819, 822, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 838, 839, 840, 841, 843, 846, 847, 848, 850, 851, 852, 853, 854, 859, 860, 862, 863, 864, 877], "from": [1, 3, 4, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 42, 43, 44, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 58, 60, 61, 63, 65, 66, 69, 70, 71, 73, 74, 75, 76, 78, 79, 80, 81, 83, 84, 86, 88, 89, 92, 93, 94, 96, 97, 99, 102, 125, 127, 130, 132, 133, 134, 135, 138, 139, 142, 146, 148, 154, 172, 178, 179, 195, 200, 205, 211, 212, 238, 246, 247, 274, 278, 279, 286, 290, 311, 312, 318, 321, 327, 329, 330, 331, 338, 341, 345, 346, 348, 349, 361, 365, 368, 371, 373, 374, 375, 376, 377, 381, 386, 398, 399, 400, 414, 419, 420, 439, 446, 451, 452, 456, 466, 469, 478, 483, 489, 491, 492, 494, 495, 497, 498, 507, 508, 509, 510, 511, 522, 523, 543, 551, 552, 554, 574, 585, 596, 613, 615, 616, 620, 628, 629, 630, 631, 633, 634, 635, 636, 638, 639, 640, 642, 643, 644, 646, 647, 649, 657, 658, 667, 670, 686, 690, 691, 692, 699, 702, 705, 708, 714, 715, 716, 718, 729, 730, 731, 737, 738, 739, 740, 744, 747, 748, 750, 756, 757, 762, 763, 764, 765, 766, 767, 770, 772, 775, 776, 777, 778, 783, 788, 790, 791, 792, 793, 795, 800, 805, 809, 811, 812, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 843, 844, 846, 848, 849, 850, 851, 852, 853, 854, 856, 858, 859, 860, 861, 862, 863, 864, 865, 867, 868, 869, 870, 871, 873, 874, 875, 876], "repositori": [1, 3, 7, 11, 813, 817, 818, 819, 821, 822, 825, 833, 842, 860], "cd": [1, 3, 7, 11, 30, 47, 811, 813, 818, 819, 833, 855], "here": [1, 3, 5, 6, 8, 13, 16, 18, 21, 26, 29, 30, 31, 42, 44, 45, 46, 47, 49, 79, 282, 458, 631, 811, 815, 816, 817, 818, 819, 822, 824, 825, 826, 827, 828, 830, 833, 834, 835, 837, 838, 839, 840, 841, 843, 844, 848, 849, 850, 851, 852, 853, 854, 862, 863, 864, 869, 870, 877], "normal": [1, 3, 5, 6, 8, 11, 15, 16, 17, 18, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 44, 45, 56, 64, 65, 79, 87, 88, 96, 97, 358, 371, 374, 380, 386, 396, 397, 402, 403, 406, 407, 408, 418, 419, 500, 501, 502, 503, 504, 505, 506, 521, 524, 638, 641, 642, 699, 709, 736, 737, 739, 790, 791, 794, 811, 817, 839, 840, 846, 851, 862, 864, 867], "resnet": [2, 5, 12, 19, 30, 862, 863], "imag": [2, 3, 5, 6, 10, 12, 15, 19, 27, 30, 31, 44, 45, 46, 47, 48, 49, 56, 60, 78, 79, 83, 101, 219, 220, 221, 222, 225, 228, 237, 240, 242, 244, 253, 254, 255, 260, 262, 275, 282, 283, 285, 286, 290, 374, 393, 394, 410, 411, 412, 414, 544, 631, 633, 635, 648, 649, 650, 651, 652, 655, 656, 657, 791, 811, 818, 833, 846, 848, 849, 851, 853, 855, 862, 863, 869], "classif": [2, 3, 11, 13, 19, 44, 811, 869], "acceler": [2, 19, 811, 828, 840, 867, 871, 872, 873, 874], "pytorch": [2, 3, 4, 7, 8, 10, 11, 14, 16, 17, 19, 20, 28, 30, 31, 42, 49, 282, 334, 335, 371, 631, 795, 811, 816, 817, 823, 828, 829, 832, 835, 836, 839, 840, 841, 846, 848, 853, 854, 856, 859, 860, 862, 863, 866, 870, 872, 873, 875, 876], "jax": [2, 5, 11, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 36, 42, 44, 48, 50, 55, 56, 57, 67, 72, 78, 79, 80, 109, 110, 111, 112, 113, 114, 115, 116, 117, 208, 290, 294, 299, 300, 302, 348, 366, 371, 386, 531, 561, 594, 613, 625, 630, 631, 633, 644, 748, 749, 750, 751, 783, 787, 800, 811, 815, 816, 817, 818, 819, 822, 824, 828, 829, 832, 833, 835, 838, 839, 840, 841, 843, 844, 846, 848, 850, 853, 854, 859, 860, 862, 863, 864, 870, 872, 875, 876], "convert": [2, 7, 8, 10, 12, 13, 15, 17, 19, 20, 22, 24, 27, 28, 30, 31, 32, 34, 36, 44, 47, 49, 51, 52, 55, 73, 74, 75, 78, 96, 126, 127, 139, 149, 150, 192, 193, 194, 195, 206, 214, 218, 238, 278, 377, 382, 461, 462, 463, 512, 577, 595, 597, 598, 599, 601, 628, 629, 630, 631, 633, 636, 640, 694, 718, 729, 730, 772, 800, 804, 811, 817, 823, 824, 837, 838, 840, 843, 845, 848, 854, 856, 860, 863, 867, 868, 875], "them": [2, 3, 10, 12, 15, 17, 19, 30, 31, 36, 375, 445, 538, 574, 633, 775, 791, 811, 813, 817, 819, 820, 822, 823, 824, 825, 826, 827, 828, 832, 834, 837, 839, 840, 841, 843, 845, 848, 850, 851, 852, 854, 856, 857, 858, 859, 860, 861, 862, 863, 864, 866, 867, 869, 871, 875], "faster": [2, 3, 8, 10, 12, 13, 19, 30, 31, 47, 49, 56, 61, 79, 84, 375, 448, 636, 686, 813, 816, 825, 856, 871, 874], "infer": [2, 5, 6, 8, 10, 12, 13, 19, 23, 33, 35, 36, 45, 47, 49, 52, 56, 57, 60, 63, 75, 79, 80, 83, 86, 125, 127, 130, 134, 135, 139, 142, 148, 157, 158, 159, 160, 161, 311, 312, 374, 377, 381, 410, 495, 509, 555, 589, 590, 628, 629, 633, 635, 638, 658, 705, 800, 801, 821, 824, 828, 829, 843, 848, 853, 863, 867, 868, 871, 873], "mmpretrain": [2, 19], "segment": [2, 19, 56, 79, 329, 330, 331, 368, 825, 830], "unet": [2, 19], "alexnet": [2, 19], "In": [2, 3, 4, 5, 15, 17, 19, 21, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 42, 44, 49, 54, 56, 57, 63, 77, 79, 80, 86, 96, 97, 206, 213, 214, 218, 222, 239, 240, 246, 254, 255, 272, 275, 281, 283, 374, 377, 380, 398, 399, 400, 420, 461, 462, 463, 469, 471, 473, 474, 475, 476, 478, 482, 488, 489, 498, 500, 502, 534, 554, 561, 579, 630, 631, 633, 636, 638, 642, 684, 701, 702, 703, 705, 707, 708, 710, 712, 740, 811, 817, 818, 819, 822, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 843, 844, 845, 846, 850, 851, 852, 853, 854, 858, 860, 862, 863, 864, 865, 867, 869, 870, 872, 875], "we": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 17, 19, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 42, 43, 44, 47, 48, 49, 56, 61, 62, 63, 71, 79, 84, 85, 94, 96, 97, 117, 363, 373, 377, 461, 462, 463, 469, 471, 473, 474, 475, 478, 482, 489, 493, 498, 544, 554, 594, 616, 617, 619, 624, 625, 633, 634, 636, 637, 638, 679, 695, 701, 702, 703, 705, 707, 708, 710, 712, 787, 793, 800, 805, 811, 812, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 844, 846, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 862, 863, 864, 865, 869, 870, 874, 875, 877], "show": [2, 3, 4, 5, 6, 11, 19, 25, 30, 31, 32, 33, 35, 42, 44, 46, 47, 578, 587, 610, 633, 811, 817, 818, 819, 825, 827, 830, 834, 839, 840, 843, 845, 854, 862, 869], "how": [2, 3, 4, 5, 7, 10, 12, 15, 17, 19, 20, 21, 22, 23, 25, 27, 28, 30, 31, 32, 33, 35, 36, 37, 38, 42, 45, 48, 49, 50, 55, 56, 72, 78, 79, 99, 109, 110, 111, 112, 113, 114, 115, 116, 117, 239, 272, 290, 294, 299, 300, 302, 366, 376, 377, 451, 466, 491, 492, 625, 631, 787, 790, 791, 792, 793, 811, 812, 813, 815, 816, 818, 819, 821, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 834, 835, 837, 838, 839, 840, 841, 844, 845, 846, 847, 849, 850, 851, 852, 853, 854, 858, 860, 865, 869], "written": [2, 3, 4, 5, 19, 21, 30, 31, 44, 57, 377, 472, 818, 822, 823, 831, 834, 835, 839, 840, 844, 848, 850, 853, 854, 858, 863, 867, 869, 873, 875, 876], "xgboost": [2, 19], "paddlepaddl": [2, 19, 334, 335, 371, 818], "dinov2": [2, 6, 19], "tensorflow": [2, 8, 9, 12, 14, 15, 19, 21, 22, 25, 26, 27, 28, 30, 31, 32, 35, 36, 37, 42, 48, 55, 56, 57, 78, 79, 146, 193, 208, 223, 327, 368, 375, 429, 594, 628, 630, 633, 770, 783, 800, 811, 815, 816, 817, 818, 819, 822, 827, 828, 829, 833, 835, 839, 840, 841, 843, 844, 846, 848, 853, 854, 856, 859, 860, 863, 864, 866, 867, 870, 872, 873, 875, 876], "project": [2, 11, 12, 19, 24, 25, 26, 27, 28, 30, 31, 34, 97, 635, 662, 791, 811, 813, 814, 817, 818, 819, 820, 823, 824, 825, 843, 852, 854, 858, 859, 860, 863, 865, 867, 869, 872, 876, 877], "convnext": [2, 5, 10, 19], "video": [3, 7, 10, 11, 12, 15, 17, 21, 22, 23, 24, 25, 26, 27, 28, 31, 811, 812, 817, 818, 819, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 843, 844, 846, 855, 867], "tutori": [3, 5, 6, 7, 10, 11, 12, 15, 17, 21, 22, 23, 24, 25, 26, 27, 28, 31, 811, 819, 840, 855], "nativ": [3, 4, 5, 6, 8, 9, 12, 21, 22, 25, 26, 27, 28, 30, 31, 51, 52, 53, 54, 57, 74, 77, 80, 101, 105, 139, 149, 150, 156, 157, 158, 159, 160, 161, 175, 178, 193, 194, 195, 196, 206, 214, 218, 561, 563, 567, 574, 579, 597, 628, 629, 630, 633, 772, 783, 788, 800, 811, 815, 817, 828, 829, 832, 833, 836, 837, 839, 840, 841, 843, 848, 850, 851, 856, 862, 863, 864, 867, 876], "integr": [3, 4, 5, 15, 17, 24, 31, 34, 53, 55, 56, 76, 78, 79, 151, 291, 354, 371, 386, 524, 629, 631, 811, 816, 818, 820, 821, 837, 863, 867, 869, 871, 872, 873], "three": [3, 4, 19, 25, 35, 36, 46, 56, 138, 311, 368, 377, 463, 628, 818, 819, 826, 827, 828, 830, 840, 843, 846, 847, 848, 870, 875], "major": [3, 4, 643, 746, 828, 829, 841, 843, 854, 859, 866, 869], "ml": [3, 4, 5, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 44, 46, 49, 811, 812, 816, 840, 847, 848, 849, 851, 852, 853, 857, 859, 860, 863, 865, 866, 867, 868, 869, 872, 874, 876], "framework": [3, 4, 6, 8, 15, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 33, 34, 35, 37, 44, 46, 48, 51, 57, 169, 191, 201, 204, 215, 542, 558, 562, 594, 597, 629, 630, 633, 640, 719, 770, 772, 776, 783, 788, 795, 800, 801, 811, 814, 815, 817, 818, 821, 822, 823, 824, 825, 827, 828, 829, 830, 832, 833, 835, 836, 837, 839, 840, 843, 844, 846, 847, 848, 850, 853, 854, 855, 856, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 870, 873], "sinc": [3, 7, 11, 27, 28, 30, 31, 44, 46, 56, 79, 97, 371, 811, 813, 818, 819, 822, 823, 824, 825, 826, 827, 828, 829, 832, 839, 840, 854, 859, 869, 875], "want": [3, 5, 6, 7, 8, 9, 11, 12, 13, 15, 17, 19, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 43, 44, 46, 56, 71, 79, 94, 239, 272, 377, 471, 631, 793, 811, 812, 813, 817, 818, 819, 825, 827, 829, 832, 834, 836, 837, 838, 839, 843, 846, 851, 852, 853, 854, 855, 859, 863], "after": [3, 4, 7, 8, 10, 11, 12, 30, 31, 45, 56, 57, 58, 60, 64, 73, 79, 80, 81, 83, 87, 185, 286, 303, 307, 356, 366, 371, 374, 375, 377, 397, 398, 399, 400, 417, 421, 442, 472, 483, 561, 615, 618, 620, 621, 622, 629, 631, 633, 634, 635, 640, 641, 648, 649, 650, 651, 653, 655, 657, 658, 728, 736, 795, 800, 811, 817, 818, 819, 822, 824, 825, 827, 828, 830, 832, 835, 838, 841, 843, 847, 855, 862, 863, 869], "first": [3, 4, 6, 7, 8, 11, 15, 21, 23, 24, 25, 27, 30, 31, 33, 34, 35, 44, 47, 48, 49, 52, 55, 56, 61, 63, 65, 66, 67, 69, 75, 78, 79, 80, 84, 86, 88, 90, 92, 96, 97, 101, 102, 121, 122, 136, 137, 146, 177, 185, 195, 222, 227, 229, 231, 232, 233, 234, 240, 246, 247, 248, 249, 250, 251, 257, 258, 259, 264, 265, 266, 268, 269, 272, 275, 277, 288, 289, 301, 311, 312, 327, 329, 330, 331, 333, 346, 348, 349, 350, 356, 360, 361, 366, 368, 371, 374, 375, 376, 377, 384, 386, 397, 427, 428, 429, 431, 435, 457, 467, 469, 473, 480, 483, 485, 486, 489, 497, 508, 510, 514, 522, 523, 524, 531, 536, 627, 628, 629, 630, 631, 633, 635, 636, 638, 639, 640, 643, 644, 645, 646, 662, 667, 670, 671, 672, 674, 676, 681, 683, 684, 686, 688, 690, 692, 705, 706, 709, 710, 714, 715, 716, 717, 718, 727, 728, 730, 742, 743, 744, 748, 749, 750, 753, 754, 756, 757, 772, 790, 791, 792, 793, 795, 800, 811, 813, 816, 817, 818, 819, 820, 822, 823, 824, 825, 826, 829, 830, 834, 835, 836, 837, 839, 840, 843, 846, 848, 850, 851, 853, 855, 858, 859, 862, 863, 867, 869, 870, 874], "notebook": [3, 4, 7, 11, 12, 13, 15, 17, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 33, 34, 36, 45, 793, 811], "automat": [3, 7, 8, 11, 28, 30, 31, 36, 817, 818, 819, 821, 824, 825, 827, 828, 834, 836, 839, 843, 846, 847, 849, 852, 853, 855, 856, 860, 869, 872, 876], "sure": [3, 7, 10, 11, 12, 13, 30, 44, 814, 817, 818, 819, 822, 827, 832, 833, 840, 841, 843, 846, 855], "gpu": [3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 44, 46, 48, 49, 195, 197, 198, 201, 204, 206, 208, 210, 211, 214, 216, 218, 630, 809, 811, 818, 819, 827, 829, 850, 855, 867, 869, 872, 873, 874], "enabl": [3, 4, 5, 7, 10, 11, 12, 13, 25, 26, 28, 45, 56, 61, 73, 84, 102, 374, 376, 397, 455, 579, 633, 636, 679, 793, 809, 811, 818, 819, 820, 823, 826, 828, 836, 837, 838, 839, 840, 843, 844, 847, 849, 851, 853, 854, 856, 859, 862, 867, 868, 869, 870, 871, 872, 875, 876], "dm": [3, 4, 7, 10, 12, 30, 31, 42, 44], "haiku": [3, 4, 7, 10, 12, 28, 30, 31, 42, 44, 48, 788, 811, 853, 860, 863, 869], "exit": [3, 7, 11, 30, 31, 829], "download": [3, 5, 6, 11, 15, 17, 30, 31, 45, 46, 49, 813, 818, 825, 843, 862, 863], "imagenet": [3, 5, 17, 45, 47, 811], "class": [3, 5, 6, 7, 11, 13, 15, 17, 21, 30, 31, 42, 43, 44, 45, 46, 47, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 133, 142, 148, 164, 167, 180, 182, 183, 242, 279, 337, 359, 371, 385, 386, 394, 395, 428, 527, 528, 535, 544, 548, 561, 571, 594, 628, 629, 630, 631, 633, 635, 636, 637, 640, 641, 656, 661, 665, 671, 681, 685, 686, 688, 695, 711, 718, 729, 736, 751, 758, 762, 763, 772, 773, 780, 781, 782, 783, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 799, 800, 804, 809, 811, 817, 824, 825, 826, 828, 829, 830, 831, 835, 837, 838, 841, 842, 843, 846, 848, 849, 851, 852, 853, 856, 862, 863, 867, 869, 870, 876], "preprocess": [3, 11, 13, 30, 31, 44, 47, 862], "wget": [3, 5, 7, 11, 44, 45, 48, 818], "raw": [3, 5, 6, 7, 10, 11, 12, 27, 30, 31, 44, 47, 48, 73, 811, 831, 863, 870], "githubusercont": [3, 5, 7, 11, 44, 48], "hub": [3, 5, 7, 11, 44, 47, 49], "master": [3, 7, 11, 22, 23, 24, 32, 33, 34, 35, 36, 37, 44, 46, 47, 48, 814, 827, 869, 877], "imagenet_class": [3, 11], "txt": [3, 5, 11, 45, 57, 818, 822, 825], "r": [3, 11, 44, 45, 56, 61, 73, 79, 84, 96, 97, 348, 363, 371, 373, 616, 634, 636, 638, 683, 712, 818, 819, 821, 838, 841, 877], "f": [3, 4, 5, 6, 8, 9, 10, 11, 30, 31, 43, 44, 46, 56, 63, 79, 86, 301, 318, 366, 368, 377, 473, 494, 638, 640, 705, 720, 724, 725, 726, 729, 734, 735, 811, 812, 819, 821, 826, 827, 832, 844, 848, 850, 851, 860, 865], "categori": [3, 5, 11, 817, 822, 823, 826, 828, 832, 840, 844, 847], "strip": [3, 11, 23, 33, 859], "readlin": [3, 11, 45], "cat": [3, 6, 11, 45, 841, 846, 848, 853, 862, 863], "jpg": [3, 5, 6, 7, 10, 11, 12, 27, 30, 31, 46, 47, 811, 863], "filenam": [3, 7, 11, 30, 31, 44, 46, 49, 57, 793, 799, 851], "3": [3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 17, 21, 22, 24, 25, 26, 27, 28, 30, 31, 42, 43, 44, 45, 46, 47, 49, 50, 52, 53, 54, 55, 56, 57, 58, 60, 61, 63, 65, 66, 67, 69, 70, 72, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 101, 102, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 122, 124, 125, 126, 127, 131, 133, 135, 136, 138, 139, 140, 141, 142, 146, 147, 148, 151, 152, 153, 154, 158, 162, 164, 172, 174, 179, 193, 195, 196, 207, 210, 213, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 296, 297, 298, 299, 302, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 327, 329, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 366, 368, 371, 372, 374, 375, 376, 377, 380, 381, 382, 384, 386, 391, 393, 394, 395, 396, 398, 401, 402, 403, 406, 407, 411, 412, 413, 416, 417, 418, 419, 421, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 435, 442, 445, 447, 450, 451, 452, 453, 454, 455, 456, 457, 459, 461, 462, 463, 464, 466, 467, 468, 469, 470, 473, 474, 475, 477, 478, 479, 480, 482, 483, 488, 489, 490, 491, 492, 493, 494, 495, 497, 498, 499, 503, 504, 505, 506, 509, 511, 512, 513, 514, 519, 520, 521, 522, 523, 524, 526, 527, 528, 529, 530, 531, 533, 536, 537, 538, 539, 540, 543, 544, 545, 546, 547, 548, 551, 552, 555, 556, 557, 559, 560, 561, 563, 564, 565, 567, 568, 570, 571, 575, 576, 589, 590, 591, 592, 596, 599, 600, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 718, 720, 721, 723, 724, 725, 726, 728, 729, 734, 735, 736, 737, 738, 739, 740, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 772, 775, 778, 791, 804, 805, 809, 811, 815, 817, 818, 822, 823, 824, 826, 827, 828, 830, 832, 833, 836, 838, 841, 843, 848, 850, 851, 852, 853, 862, 863, 876], "import": [3, 5, 6, 8, 9, 10, 12, 15, 17, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 44, 45, 47, 48, 49, 56, 67, 71, 75, 79, 94, 193, 194, 198, 210, 306, 386, 521, 556, 572, 630, 633, 639, 644, 715, 716, 751, 783, 800, 801, 811, 816, 817, 818, 819, 820, 822, 823, 824, 825, 826, 828, 829, 830, 831, 834, 837, 838, 839, 840, 841, 842, 843, 844, 848, 850, 851, 853, 854, 855, 859, 862, 863, 864, 865, 867, 869, 872, 873, 875], "devic": [3, 5, 6, 7, 8, 10, 11, 12, 45, 46, 49, 52, 56, 65, 73, 75, 79, 88, 101, 104, 105, 106, 125, 126, 127, 129, 130, 131, 134, 135, 136, 137, 139, 140, 141, 142, 144, 145, 146, 147, 148, 192, 193, 194, 195, 196, 197, 198, 199, 200, 205, 206, 207, 208, 210, 211, 212, 213, 214, 216, 218, 311, 312, 327, 328, 368, 381, 471, 507, 508, 510, 511, 535, 549, 550, 628, 633, 642, 737, 738, 739, 740, 770, 772, 773, 788, 790, 791, 792, 793, 794, 795, 796, 797, 809, 811, 819, 821, 824, 828, 832, 836, 837, 841, 843, 844, 846, 848, 853, 854, 855, 856, 859, 868, 869, 871, 872, 873, 874], "torchvis": [3, 5, 10, 11, 44, 860], "transform": [3, 4, 5, 6, 10, 11, 12, 27, 30, 31, 44, 45, 47, 56, 60, 79, 83, 374, 375, 396, 397, 402, 403, 406, 407, 408, 418, 419, 422, 439, 635, 659, 775, 778, 791, 811, 837, 843, 853, 856, 862, 863, 867, 869, 870, 871], "pil": [3, 5, 6, 7, 10, 11, 12, 27, 30, 31, 45, 46, 47, 811, 863], "numpi": [3, 4, 5, 6, 7, 8, 9, 10, 12, 15, 17, 22, 25, 26, 27, 28, 30, 31, 32, 33, 35, 36, 37, 42, 43, 44, 46, 47, 48, 49, 55, 56, 57, 69, 78, 79, 80, 146, 175, 193, 198, 223, 283, 306, 327, 368, 386, 521, 528, 537, 561, 591, 594, 598, 628, 629, 630, 631, 633, 636, 646, 684, 758, 770, 772, 783, 800, 804, 805, 811, 816, 817, 818, 819, 822, 823, 824, 827, 828, 829, 832, 833, 835, 839, 841, 843, 844, 846, 848, 850, 853, 855, 856, 858, 859, 862, 863, 864, 866, 871, 876], "np": [3, 4, 5, 6, 7, 8, 9, 10, 12, 15, 17, 22, 25, 26, 27, 28, 30, 31, 32, 35, 36, 37, 42, 43, 44, 45, 46, 47, 49, 52, 56, 78, 79, 80, 126, 127, 128, 139, 175, 252, 256, 306, 374, 375, 402, 407, 423, 591, 628, 629, 631, 633, 640, 723, 772, 800, 804, 805, 811, 817, 823, 828, 829, 832, 835, 839, 840, 841, 843, 844, 846, 848, 850, 851, 853, 856, 864], "warn": [3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 22, 25, 26, 27, 28, 44, 45, 46, 49, 808, 818, 819, 845, 862, 863, 864], "time": [3, 4, 5, 6, 8, 9, 10, 12, 28, 30, 31, 36, 44, 46, 47, 48, 56, 58, 61, 67, 79, 81, 90, 96, 97, 133, 340, 371, 374, 375, 377, 386, 403, 408, 420, 422, 443, 450, 483, 489, 521, 615, 620, 628, 634, 635, 636, 638, 639, 643, 644, 658, 661, 676, 711, 714, 715, 716, 743, 744, 748, 749, 791, 792, 793, 809, 817, 818, 819, 822, 824, 826, 827, 828, 830, 833, 835, 836, 837, 839, 840, 843, 844, 848, 851, 853, 854, 855, 858, 859, 860, 862, 863, 867, 869, 870, 873, 874, 875], "filterwarn": [3, 4], "ignor": [3, 4, 43, 51, 52, 56, 73, 79, 138, 374, 375, 377, 386, 398, 399, 400, 429, 437, 445, 485, 486, 490, 529, 628, 635, 640, 662, 728, 729, 795, 818, 825, 827, 830, 843, 854, 875], "compos": [3, 5, 6, 10, 11, 30, 31, 44, 56, 79, 374, 388, 389, 390, 391, 818, 826, 840, 843, 862, 864, 869, 876], "resiz": [3, 5, 6, 7, 10, 11, 44, 45, 56, 79, 374, 410, 846], "256": [3, 7, 11, 55, 80, 282, 283, 592, 635, 650, 652, 775], "centercrop": [3, 11], "224": [3, 5, 6, 11, 15, 17, 30, 31, 44, 45, 47, 811, 863], "totensor": [3, 5, 6, 10, 11, 44], "mean": [3, 5, 6, 10, 11, 12, 13, 21, 22, 23, 24, 25, 26, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 42, 44, 45, 46, 56, 57, 60, 62, 63, 65, 69, 71, 73, 75, 79, 80, 83, 85, 86, 88, 92, 94, 96, 133, 212, 329, 339, 368, 371, 374, 375, 376, 377, 380, 381, 386, 403, 408, 426, 439, 451, 452, 453, 454, 455, 456, 457, 458, 468, 473, 483, 500, 502, 508, 527, 528, 545, 616, 617, 619, 624, 628, 630, 633, 634, 635, 636, 637, 638, 639, 640, 642, 646, 650, 652, 653, 654, 656, 657, 658, 669, 695, 696, 697, 705, 714, 715, 716, 723, 738, 739, 775, 777, 778, 790, 791, 794, 811, 818, 819, 821, 822, 824, 826, 828, 829, 830, 836, 838, 839, 840, 843, 844, 846, 848, 850, 851, 852, 853, 854, 856, 863, 864, 866, 869], "0": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 17, 22, 23, 24, 25, 26, 27, 28, 30, 31, 42, 44, 45, 46, 47, 48, 49, 50, 52, 53, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 96, 99, 100, 101, 102, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 122, 124, 125, 128, 131, 133, 134, 135, 136, 137, 140, 142, 144, 145, 146, 147, 148, 151, 152, 153, 154, 162, 164, 167, 168, 172, 174, 179, 192, 195, 197, 200, 205, 206, 207, 208, 210, 211, 212, 214, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 233, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 250, 251, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 324, 325, 327, 328, 329, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 366, 368, 371, 372, 374, 375, 376, 377, 380, 381, 384, 386, 393, 396, 397, 398, 399, 400, 401, 402, 403, 406, 407, 408, 411, 412, 413, 414, 417, 418, 419, 421, 424, 425, 426, 428, 429, 430, 433, 434, 436, 439, 440, 443, 444, 445, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 460, 466, 468, 469, 470, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 533, 536, 538, 539, 540, 543, 544, 545, 547, 548, 551, 552, 553, 554, 555, 556, 557, 559, 560, 561, 563, 564, 565, 567, 568, 571, 573, 575, 576, 580, 585, 589, 590, 591, 592, 594, 596, 598, 599, 608, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 676, 677, 678, 679, 680, 682, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 715, 716, 717, 718, 720, 723, 724, 725, 726, 728, 729, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 772, 775, 776, 777, 778, 780, 787, 788, 790, 791, 792, 793, 794, 795, 796, 797, 800, 804, 805, 809, 811, 815, 818, 819, 822, 824, 826, 827, 828, 829, 830, 831, 832, 833, 838, 839, 840, 841, 843, 844, 848, 850, 851, 852, 853, 854, 862, 863], "485": [3, 11, 44], "456": [3, 11, 44, 843], "406": [3, 11, 44, 56, 79, 396, 539, 633], "std": [3, 5, 6, 10, 11, 12, 13, 22, 23, 24, 25, 26, 30, 31, 32, 33, 34, 35, 36, 37, 45, 60, 65, 69, 83, 88, 92, 381, 508, 635, 642, 646, 650, 652, 653, 654, 656, 657, 738, 739, 811, 830, 864, 866], "229": [3, 11, 44, 278, 631], "225": [3, 11, 44, 46, 233, 631], "torch_img": [3, 7, 11], "unsqueez": [3, 7, 10, 11], "img": [3, 7, 11, 27, 30, 31, 44, 45, 46, 48, 811, 851, 863], "4": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 21, 22, 23, 24, 25, 26, 27, 28, 30, 42, 43, 44, 45, 46, 49, 50, 52, 53, 54, 55, 56, 57, 58, 60, 61, 63, 65, 66, 67, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 101, 102, 109, 110, 111, 112, 113, 114, 116, 117, 125, 126, 127, 128, 131, 133, 135, 136, 137, 138, 139, 140, 142, 146, 148, 152, 153, 154, 162, 164, 167, 172, 174, 179, 196, 197, 205, 210, 213, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 296, 297, 298, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 314, 319, 320, 327, 329, 334, 335, 337, 339, 340, 342, 343, 345, 346, 347, 348, 349, 350, 351, 352, 353, 355, 358, 362, 366, 368, 371, 372, 374, 375, 376, 377, 380, 381, 382, 384, 386, 393, 394, 395, 396, 398, 399, 401, 402, 403, 406, 407, 411, 412, 413, 416, 417, 418, 419, 421, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 435, 439, 445, 451, 452, 453, 454, 455, 456, 457, 459, 461, 462, 463, 466, 467, 468, 469, 470, 473, 474, 475, 478, 479, 480, 482, 483, 488, 489, 490, 491, 492, 493, 495, 497, 498, 499, 503, 504, 505, 506, 509, 511, 512, 514, 519, 520, 521, 522, 523, 524, 526, 527, 528, 529, 530, 531, 539, 540, 543, 544, 545, 546, 547, 548, 551, 552, 554, 557, 559, 560, 561, 568, 575, 576, 591, 592, 593, 594, 596, 600, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 655, 656, 657, 658, 659, 660, 661, 665, 666, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 716, 718, 720, 721, 723, 724, 725, 726, 728, 729, 734, 735, 736, 737, 738, 739, 740, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 772, 775, 776, 778, 790, 791, 795, 804, 805, 811, 815, 817, 818, 824, 825, 826, 827, 828, 830, 833, 838, 841, 843, 846, 848, 850, 851, 852, 853, 860, 862, 869, 875, 876], "ipython": [3, 7, 11, 25, 26, 27, 28, 30, 31, 49], "displai": [3, 7, 11, 27, 30, 31, 44, 45, 46, 48, 49, 818, 825, 827, 832, 843, 851], "end": [3, 7, 44, 45, 56, 79, 125, 227, 283, 352, 371, 374, 376, 377, 422, 451, 473, 483, 485, 486, 628, 631, 805, 811, 818, 819, 824, 827, 833, 839, 844, 846, 847, 854, 867, 872], "see": [3, 4, 5, 6, 8, 9, 10, 12, 13, 22, 23, 28, 30, 31, 32, 33, 37, 42, 43, 49, 50, 53, 55, 56, 61, 66, 67, 69, 70, 72, 78, 79, 84, 89, 92, 93, 96, 97, 101, 102, 109, 110, 111, 112, 113, 114, 115, 116, 117, 125, 132, 136, 143, 146, 153, 172, 179, 222, 227, 229, 231, 232, 233, 234, 239, 240, 244, 246, 250, 251, 258, 259, 262, 264, 266, 268, 269, 272, 275, 277, 281, 288, 290, 293, 294, 299, 300, 302, 327, 334, 335, 366, 368, 371, 375, 376, 377, 425, 453, 491, 625, 628, 629, 631, 636, 643, 644, 646, 647, 667, 679, 682, 685, 692, 693, 744, 748, 749, 750, 751, 759, 760, 761, 762, 763, 764, 765, 766, 767, 787, 811, 812, 815, 817, 818, 819, 822, 823, 825, 826, 827, 828, 829, 830, 833, 834, 835, 836, 840, 841, 843, 846, 848, 850, 851, 854, 858, 865, 877], "5": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 22, 23, 25, 26, 27, 28, 30, 31, 42, 44, 45, 46, 49, 50, 52, 53, 54, 55, 56, 57, 58, 60, 61, 63, 64, 65, 66, 67, 68, 69, 72, 75, 76, 77, 78, 79, 80, 81, 83, 84, 86, 87, 88, 89, 90, 91, 92, 96, 101, 102, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 121, 122, 125, 126, 127, 133, 135, 136, 137, 138, 139, 140, 141, 142, 147, 148, 152, 153, 154, 158, 162, 164, 172, 174, 179, 196, 205, 210, 213, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 295, 296, 297, 298, 300, 302, 303, 304, 306, 307, 308, 309, 310, 311, 312, 313, 314, 316, 317, 318, 321, 329, 332, 334, 335, 337, 339, 341, 343, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 361, 362, 366, 368, 371, 372, 374, 375, 376, 377, 380, 382, 384, 386, 393, 394, 395, 396, 398, 399, 401, 402, 403, 406, 407, 411, 412, 413, 416, 417, 418, 419, 421, 424, 427, 428, 430, 431, 433, 444, 447, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 461, 462, 463, 464, 467, 468, 469, 470, 473, 474, 477, 478, 479, 482, 483, 488, 489, 490, 491, 492, 493, 495, 498, 499, 504, 505, 506, 509, 511, 512, 514, 519, 521, 522, 523, 524, 525, 526, 528, 531, 537, 538, 539, 540, 543, 544, 545, 546, 548, 551, 552, 554, 557, 559, 560, 561, 575, 576, 580, 591, 592, 593, 594, 596, 600, 613, 614, 615, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 653, 654, 655, 656, 657, 658, 659, 661, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 680, 681, 682, 683, 684, 686, 687, 688, 690, 691, 692, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 715, 716, 718, 720, 723, 724, 725, 726, 728, 729, 734, 735, 736, 737, 738, 739, 740, 742, 743, 744, 746, 747, 748, 749, 750, 751, 752, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 775, 776, 777, 778, 791, 804, 805, 811, 814, 817, 818, 819, 822, 824, 826, 827, 828, 830, 832, 833, 835, 838, 841, 843, 850, 851, 852, 863, 877], "set_default_devic": [3, 4, 5, 7, 10, 11, 12, 216, 630, 829], "set_soft_device_mod": [3, 13, 17, 217, 630, 829], "true": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 17, 21, 24, 25, 27, 28, 30, 31, 35, 36, 37, 44, 45, 46, 47, 49, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 99, 101, 102, 109, 110, 111, 112, 113, 114, 115, 116, 117, 122, 124, 127, 128, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 144, 145, 146, 148, 151, 152, 153, 154, 155, 162, 164, 165, 166, 167, 170, 171, 172, 173, 174, 175, 176, 179, 191, 195, 196, 198, 199, 203, 206, 207, 209, 213, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 250, 251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 322, 323, 324, 325, 326, 327, 328, 332, 333, 334, 335, 336, 337, 339, 341, 349, 350, 355, 356, 357, 358, 359, 360, 361, 362, 368, 371, 372, 374, 375, 376, 377, 380, 386, 388, 389, 390, 391, 393, 394, 395, 397, 398, 399, 400, 401, 402, 410, 411, 412, 413, 417, 418, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 461, 462, 463, 467, 468, 469, 470, 471, 473, 474, 475, 478, 479, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 495, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 513, 514, 520, 521, 522, 523, 524, 526, 527, 528, 529, 530, 531, 533, 536, 537, 539, 540, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 554, 555, 557, 559, 560, 561, 563, 564, 565, 567, 568, 575, 576, 577, 580, 583, 584, 586, 587, 589, 590, 591, 592, 594, 596, 598, 599, 601, 606, 607, 609, 610, 612, 615, 616, 618, 620, 621, 622, 623, 625, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 657, 658, 659, 660, 661, 662, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 723, 724, 725, 727, 728, 729, 730, 734, 735, 737, 738, 739, 740, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 770, 772, 775, 776, 777, 778, 780, 791, 792, 793, 794, 795, 797, 800, 802, 804, 805, 809, 811, 815, 818, 824, 826, 827, 828, 829, 830, 832, 833, 835, 836, 837, 839, 840, 841, 843, 845, 846, 848, 851, 852, 853, 862, 863], "set_backend": [3, 4, 7, 11, 13, 21, 22, 23, 24, 25, 26, 30, 31, 33, 34, 35, 36, 37, 43, 45, 46, 47, 55, 57, 71, 78, 80, 166, 175, 193, 194, 198, 208, 210, 215, 223, 537, 561, 629, 630, 633, 636, 639, 684, 715, 716, 800, 811, 822, 824, 828, 829, 836, 837, 838, 848, 850, 853, 862, 863, 864], "ivy_model": [3, 4, 7, 11, 47], "ivy_alexnet": 3, "order": [3, 24, 34, 36, 44, 47, 49, 52, 56, 57, 60, 61, 63, 67, 68, 73, 79, 83, 84, 86, 90, 91, 96, 101, 102, 126, 127, 138, 146, 227, 246, 289, 327, 348, 368, 371, 374, 375, 377, 380, 384, 420, 425, 428, 429, 430, 431, 432, 436, 442, 444, 447, 450, 473, 474, 475, 480, 481, 493, 500, 501, 502, 505, 514, 628, 631, 635, 636, 638, 639, 643, 644, 645, 649, 650, 651, 652, 653, 654, 657, 671, 672, 677, 686, 687, 691, 693, 702, 705, 714, 715, 746, 748, 749, 750, 751, 752, 754, 755, 772, 794, 796, 805, 811, 817, 818, 819, 823, 824, 826, 827, 828, 829, 830, 831, 832, 834, 835, 836, 840, 841, 842, 843, 844, 845, 846, 851, 853, 854, 858, 865, 868, 869, 870, 872, 875], "quick": [3, 19, 31, 819, 821, 841, 852], "call": [3, 5, 10, 15, 17, 21, 23, 24, 25, 26, 27, 30, 31, 33, 34, 35, 36, 37, 44, 48, 56, 71, 76, 79, 94, 96, 102, 121, 171, 172, 212, 375, 386, 442, 528, 579, 585, 600, 616, 617, 619, 627, 630, 633, 634, 636, 640, 684, 717, 723, 727, 728, 772, 783, 791, 792, 793, 795, 800, 805, 809, 811, 817, 818, 819, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 835, 836, 837, 839, 840, 841, 843, 844, 846, 848, 850, 851, 852, 853, 854, 859, 862, 863, 864, 869, 870, 873], "trace_graph": [3, 4, 7, 11, 23, 24, 25, 26, 30, 31, 33, 34, 35, 36, 37, 38, 47, 793, 811, 848, 853, 861], "take": [3, 5, 11, 21, 28, 30, 31, 36, 42, 44, 47, 56, 61, 63, 69, 79, 86, 96, 121, 122, 124, 140, 279, 286, 301, 366, 374, 375, 377, 394, 402, 407, 412, 422, 431, 445, 466, 473, 492, 522, 523, 627, 628, 631, 635, 636, 638, 639, 662, 676, 680, 705, 716, 756, 775, 783, 790, 791, 804, 809, 811, 812, 817, 818, 819, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 836, 839, 840, 841, 843, 846, 848, 850, 852, 853, 854, 855, 860, 862, 863, 866, 867, 875], "moment": [3, 56, 58, 79, 81, 375, 432, 614, 615, 620, 634, 795, 809, 817, 824, 854, 862, 863], "one": [3, 5, 10, 12, 15, 17, 19, 20, 23, 24, 27, 28, 30, 31, 33, 34, 46, 47, 48, 52, 56, 57, 60, 61, 63, 66, 67, 69, 73, 75, 78, 79, 80, 81, 83, 84, 86, 87, 89, 90, 91, 92, 96, 125, 128, 138, 140, 141, 142, 152, 154, 212, 233, 239, 246, 247, 264, 270, 271, 272, 291, 301, 311, 314, 315, 333, 339, 342, 343, 346, 347, 350, 351, 352, 354, 355, 362, 366, 368, 371, 372, 374, 375, 376, 377, 380, 381, 386, 396, 398, 402, 403, 406, 407, 410, 418, 423, 425, 434, 443, 457, 461, 462, 463, 467, 473, 474, 475, 480, 482, 487, 490, 500, 501, 502, 507, 512, 522, 523, 526, 527, 528, 529, 530, 531, 533, 571, 575, 576, 578, 596, 598, 599, 612, 614, 615, 618, 620, 621, 622, 623, 628, 629, 630, 631, 633, 634, 635, 636, 638, 641, 643, 644, 646, 649, 650, 651, 652, 653, 654, 657, 674, 676, 677, 681, 683, 692, 693, 701, 702, 703, 706, 708, 712, 736, 743, 746, 748, 749, 750, 751, 756, 758, 775, 777, 794, 797, 800, 805, 808, 811, 817, 818, 819, 820, 822, 823, 824, 825, 826, 828, 829, 830, 833, 834, 835, 836, 837, 838, 839, 840, 841, 843, 845, 846, 847, 850, 851, 853, 854, 855, 856, 859, 860, 863, 869, 870, 872, 875], "cost": [3, 58, 81, 614, 615, 618, 620, 621, 622, 634, 639, 714, 715, 716, 805, 828, 846, 867], "arg": [3, 5, 7, 8, 9, 10, 11, 15, 17, 25, 26, 28, 30, 31, 35, 36, 37, 48, 51, 73, 95, 105, 121, 202, 212, 600, 627, 628, 630, 633, 770, 772, 787, 788, 791, 792, 793, 797, 800, 804, 809, 811, 823, 828, 829, 832, 838, 839, 840, 846, 848, 852, 862, 863, 864], "asarrai": [3, 4, 7, 10, 11, 45, 52, 56, 57, 68, 75, 79, 80, 91, 126, 384, 513, 514, 544, 555, 559, 560, 590, 591, 592, 628, 633, 635, 644, 645, 649, 749, 753, 832, 837, 840, 841], "cuda": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 21, 30, 45, 46, 49, 52, 56, 65, 75, 79, 88, 136, 137, 140, 192, 193, 194, 210, 381, 507, 508, 510, 511, 628, 630, 636, 642, 687, 737, 738, 739, 740, 790, 791, 792, 793, 794, 795, 796, 809, 848, 854, 856, 874], "7": [3, 5, 6, 7, 9, 10, 11, 12, 13, 15, 17, 23, 25, 26, 27, 28, 42, 44, 45, 46, 48, 49, 50, 52, 53, 55, 56, 57, 58, 60, 61, 62, 63, 65, 66, 67, 68, 69, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 101, 102, 111, 112, 113, 114, 125, 126, 127, 136, 139, 140, 158, 164, 167, 197, 219, 222, 225, 229, 230, 232, 233, 234, 235, 237, 239, 240, 241, 242, 243, 245, 246, 249, 250, 251, 256, 257, 258, 259, 260, 261, 262, 263, 264, 267, 269, 270, 271, 272, 274, 275, 276, 278, 279, 282, 283, 284, 286, 289, 290, 292, 293, 295, 296, 298, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 314, 317, 318, 329, 333, 337, 339, 340, 348, 349, 350, 352, 354, 355, 362, 366, 368, 371, 372, 374, 375, 376, 377, 382, 386, 393, 394, 395, 396, 401, 402, 406, 407, 411, 416, 417, 418, 419, 421, 424, 427, 440, 452, 453, 454, 455, 457, 458, 461, 462, 463, 467, 469, 473, 478, 479, 482, 483, 488, 489, 491, 492, 494, 495, 498, 499, 509, 511, 512, 519, 522, 523, 525, 526, 531, 537, 539, 540, 544, 545, 548, 559, 560, 561, 568, 575, 576, 591, 594, 614, 615, 617, 618, 619, 620, 621, 622, 625, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 640, 641, 642, 643, 644, 645, 646, 649, 650, 652, 654, 656, 657, 658, 659, 665, 667, 668, 669, 670, 672, 673, 674, 676, 678, 681, 683, 684, 686, 687, 688, 690, 691, 692, 695, 696, 697, 698, 701, 702, 707, 709, 710, 712, 717, 718, 725, 729, 736, 737, 738, 739, 740, 742, 747, 748, 750, 752, 753, 755, 756, 757, 758, 760, 762, 764, 765, 775, 818, 819, 824, 826, 827, 830, 836, 839, 843], "output": [3, 4, 6, 7, 8, 9, 11, 21, 27, 28, 30, 31, 43, 44, 45, 47, 50, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 101, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 147, 148, 151, 153, 178, 212, 213, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 316, 317, 321, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 363, 364, 365, 366, 368, 371, 373, 374, 375, 376, 377, 380, 381, 382, 384, 386, 387, 388, 389, 390, 391, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 406, 407, 408, 410, 411, 412, 413, 416, 418, 419, 420, 422, 423, 425, 426, 427, 429, 431, 434, 435, 437, 440, 441, 442, 443, 445, 446, 449, 451, 452, 453, 454, 455, 456, 457, 458, 459, 466, 467, 468, 471, 473, 474, 475, 476, 477, 480, 481, 482, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 495, 496, 497, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 519, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 538, 539, 540, 544, 545, 546, 548, 552, 561, 568, 575, 576, 577, 601, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 677, 679, 680, 681, 682, 683, 684, 685, 687, 688, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 708, 709, 710, 711, 713, 730, 736, 737, 738, 739, 740, 742, 743, 744, 745, 746, 747, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 770, 775, 790, 791, 804, 805, 811, 813, 818, 819, 821, 822, 823, 825, 826, 828, 829, 830, 831, 834, 835, 836, 837, 838, 839, 840, 841, 843, 844, 845, 848, 850, 852, 853, 854, 856, 862, 863, 870], "softmax": [3, 5, 6, 11, 15, 28, 30, 31, 46, 50, 60, 71, 72, 83, 376, 453, 625, 635, 662, 665, 787, 811], "pass": [3, 5, 6, 7, 10, 11, 12, 13, 15, 17, 21, 28, 30, 31, 37, 43, 44, 46, 48, 49, 55, 56, 71, 73, 78, 79, 94, 102, 121, 122, 124, 156, 178, 193, 212, 227, 273, 374, 376, 377, 380, 381, 386, 420, 453, 473, 500, 502, 507, 527, 528, 561, 627, 629, 630, 631, 633, 639, 714, 715, 770, 772, 776, 783, 788, 792, 793, 795, 796, 800, 804, 809, 811, 815, 817, 819, 822, 823, 824, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 843, 846, 854, 862, 863, 864, 867], "argsort": [3, 11, 68, 91, 645, 754, 840], "descend": [3, 11, 68, 91, 636, 645, 686, 687, 752, 755], "top": [3, 11, 14, 19, 28, 30, 31, 44, 45, 56, 63, 79, 318, 368, 376, 377, 451, 493, 544, 633, 699, 811, 818, 819, 828, 833, 840, 842, 843, 846, 851, 852, 869, 873], "logit": [3, 4, 5, 6, 7, 11, 44, 45, 46, 47, 56, 62, 79, 85, 366, 381, 507, 510, 637, 695, 697, 787, 811, 862], "gather": [3, 11, 44, 56, 57, 79, 80, 329, 330, 331, 368, 552, 554, 633, 876], "print": [3, 4, 5, 6, 8, 9, 10, 11, 13, 15, 17, 21, 22, 24, 28, 30, 31, 32, 42, 43, 44, 45, 46, 47, 49, 50, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 101, 102, 109, 111, 112, 113, 114, 115, 116, 117, 118, 121, 122, 124, 125, 128, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 146, 147, 148, 151, 152, 153, 154, 156, 162, 163, 164, 165, 166, 169, 171, 172, 174, 179, 191, 192, 196, 198, 199, 200, 201, 203, 204, 205, 206, 207, 210, 211, 213, 214, 215, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 250, 251, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 302, 304, 305, 306, 308, 309, 310, 312, 319, 320, 327, 329, 333, 334, 335, 337, 352, 353, 358, 362, 366, 368, 371, 374, 375, 376, 377, 380, 386, 393, 394, 395, 396, 398, 399, 401, 403, 406, 408, 411, 412, 413, 416, 418, 419, 424, 427, 429, 431, 432, 442, 449, 452, 453, 454, 455, 456, 457, 458, 464, 466, 468, 479, 483, 488, 489, 491, 492, 493, 495, 499, 503, 504, 506, 521, 522, 523, 524, 531, 533, 535, 536, 537, 538, 539, 540, 543, 544, 545, 546, 547, 548, 551, 552, 554, 555, 556, 557, 559, 560, 561, 563, 564, 565, 567, 571, 572, 574, 575, 576, 580, 581, 582, 585, 588, 589, 590, 591, 592, 594, 596, 598, 599, 600, 604, 605, 608, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 656, 657, 658, 659, 665, 666, 667, 668, 670, 672, 673, 674, 675, 676, 677, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 690, 692, 693, 695, 696, 697, 698, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 715, 716, 717, 718, 720, 721, 723, 724, 725, 726, 728, 729, 734, 735, 736, 737, 738, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 800, 804, 805, 809, 811, 818, 819, 826, 828, 830, 841, 843, 845, 848, 850, 851, 852, 862, 864], "indic": [3, 11, 52, 56, 57, 60, 61, 63, 64, 66, 67, 68, 73, 75, 76, 79, 80, 83, 84, 86, 87, 89, 90, 91, 96, 99, 126, 127, 140, 144, 146, 167, 171, 172, 283, 327, 328, 329, 348, 368, 371, 374, 375, 376, 377, 382, 384, 393, 394, 395, 397, 401, 402, 403, 407, 408, 411, 412, 413, 414, 418, 419, 429, 450, 453, 461, 462, 463, 466, 469, 471, 473, 474, 475, 478, 482, 488, 489, 491, 492, 493, 495, 497, 498, 512, 513, 514, 536, 551, 552, 554, 575, 576, 580, 613, 616, 617, 628, 631, 633, 634, 635, 636, 638, 640, 641, 642, 643, 644, 645, 649, 651, 652, 653, 654, 657, 662, 679, 693, 701, 702, 703, 705, 706, 707, 708, 710, 712, 717, 720, 722, 724, 725, 726, 728, 732, 733, 734, 735, 736, 737, 743, 744, 745, 746, 748, 750, 752, 754, 755, 772, 773, 775, 777, 791, 797, 804, 805, 807, 818, 827, 835, 838, 840, 853, 862], "to_list": [3, 11, 57, 80, 633], "arrai": [3, 4, 5, 6, 8, 9, 11, 12, 13, 21, 22, 23, 25, 26, 27, 28, 30, 31, 32, 33, 35, 36, 37, 42, 43, 44, 45, 46, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 96, 97, 99, 102, 105, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 121, 122, 124, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 157, 158, 159, 160, 161, 162, 164, 167, 168, 170, 171, 172, 174, 176, 177, 178, 179, 185, 195, 196, 200, 205, 207, 209, 212, 213, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 366, 368, 371, 372, 374, 375, 376, 377, 380, 381, 382, 384, 386, 387, 388, 389, 390, 391, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 406, 407, 408, 410, 411, 412, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 536, 537, 539, 540, 543, 544, 545, 546, 547, 548, 551, 552, 553, 554, 555, 557, 558, 559, 560, 561, 563, 564, 565, 566, 567, 568, 570, 571, 573, 574, 575, 576, 577, 579, 580, 586, 587, 589, 590, 591, 592, 593, 594, 596, 597, 598, 599, 600, 601, 609, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 723, 724, 725, 726, 729, 730, 734, 735, 736, 737, 738, 739, 740, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 770, 772, 777, 783, 790, 791, 792, 793, 796, 800, 804, 805, 807, 811, 815, 817, 818, 819, 821, 824, 825, 826, 828, 829, 830, 831, 832, 833, 836, 837, 838, 839, 840, 841, 843, 844, 845, 846, 847, 848, 849, 851, 852, 853, 854, 856, 863, 864, 867, 868, 869, 871, 875, 876], "282": [3, 11], "281": [3, 11, 44, 46], "285": [3, 11, 79], "dev": [3, 10, 11, 12, 13, 23, 44, 46, 49, 54, 73, 77, 200, 207, 630, 818, 829, 833, 836, 850, 852], "64773697": 3, "29496649": 3, "04526037": 3, "39": [3, 4, 6, 8, 9, 10, 11, 12, 13, 15, 17, 21, 22, 25, 26, 27, 28, 42, 44, 45, 46, 47, 49, 50, 55, 56, 61, 65, 72, 78, 79, 81, 84, 88, 111, 225, 260, 262, 264, 294, 295, 298, 366, 374, 386, 394, 396, 413, 416, 522, 614, 625, 631, 634, 636, 646, 674, 681, 739, 758], "tiger": [3, 11], "tabbi": [3, 6, 11], "egyptian": [3, 11], "check": [3, 4, 10, 12, 13, 15, 17, 19, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 42, 47, 49, 51, 53, 57, 61, 73, 76, 80, 84, 117, 155, 156, 165, 166, 169, 171, 172, 173, 176, 191, 198, 199, 206, 218, 537, 547, 549, 550, 557, 563, 564, 565, 566, 567, 583, 594, 606, 612, 625, 629, 630, 633, 636, 640, 672, 673, 679, 717, 727, 728, 729, 770, 777, 804, 805, 811, 812, 813, 816, 817, 818, 819, 820, 822, 826, 827, 829, 830, 832, 837, 839, 840, 841, 842, 843, 844, 845, 847, 848, 850, 851, 852, 855, 862], "confirm": [3, 45, 814, 817], "same": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 17, 22, 23, 25, 26, 27, 28, 30, 33, 35, 37, 42, 43, 46, 47, 49, 50, 51, 52, 53, 55, 56, 57, 58, 60, 61, 63, 65, 67, 68, 69, 73, 75, 76, 78, 79, 80, 81, 83, 84, 86, 88, 90, 92, 96, 97, 98, 99, 100, 101, 115, 125, 130, 135, 137, 138, 140, 142, 144, 145, 146, 148, 151, 152, 153, 164, 167, 212, 219, 220, 221, 222, 224, 226, 230, 232, 235, 239, 245, 246, 252, 272, 274, 276, 279, 281, 282, 283, 292, 300, 312, 326, 327, 328, 329, 330, 331, 334, 335, 337, 345, 361, 366, 368, 371, 374, 375, 376, 377, 380, 382, 384, 386, 393, 394, 395, 411, 412, 413, 414, 416, 417, 418, 419, 421, 428, 433, 434, 444, 445, 446, 447, 448, 450, 451, 453, 456, 466, 468, 483, 491, 492, 495, 500, 502, 512, 514, 519, 520, 521, 522, 523, 524, 525, 531, 568, 623, 628, 629, 630, 631, 633, 634, 635, 636, 638, 639, 640, 642, 644, 645, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 662, 665, 666, 667, 668, 670, 671, 672, 673, 675, 676, 678, 680, 681, 682, 683, 684, 685, 686, 687, 690, 692, 699, 702, 703, 705, 706, 708, 709, 714, 715, 730, 740, 748, 749, 750, 751, 752, 753, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 770, 772, 775, 776, 777, 783, 791, 804, 811, 818, 819, 823, 824, 826, 827, 828, 829, 830, 832, 834, 835, 836, 837, 838, 839, 840, 841, 843, 844, 846, 848, 850, 852, 853, 854, 858, 860, 862, 864, 866, 868, 875, 876], "8": [3, 5, 6, 8, 9, 10, 11, 12, 13, 23, 25, 26, 27, 28, 42, 44, 46, 49, 53, 55, 56, 57, 58, 60, 61, 62, 63, 65, 66, 67, 68, 69, 76, 78, 79, 80, 81, 83, 84, 85, 86, 88, 89, 90, 91, 92, 101, 102, 109, 124, 134, 135, 139, 142, 148, 157, 159, 160, 161, 164, 172, 197, 214, 222, 224, 225, 229, 230, 233, 234, 235, 237, 243, 246, 250, 251, 257, 258, 259, 263, 264, 267, 268, 270, 271, 272, 277, 278, 281, 282, 283, 286, 287, 290, 291, 292, 296, 302, 304, 305, 306, 308, 309, 311, 312, 329, 333, 345, 348, 350, 351, 352, 355, 362, 366, 368, 371, 374, 375, 376, 377, 386, 393, 394, 395, 396, 401, 402, 406, 407, 411, 412, 416, 417, 421, 424, 427, 435, 452, 453, 454, 456, 457, 458, 459, 461, 462, 463, 467, 469, 473, 478, 479, 488, 489, 492, 493, 494, 495, 498, 499, 509, 511, 523, 526, 527, 531, 537, 538, 544, 545, 548, 551, 555, 559, 560, 561, 563, 564, 567, 570, 575, 576, 580, 590, 591, 592, 593, 594, 614, 617, 619, 621, 622, 624, 625, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 640, 642, 643, 644, 645, 646, 649, 653, 654, 656, 657, 658, 659, 662, 668, 669, 670, 672, 673, 674, 676, 677, 678, 681, 683, 684, 686, 687, 688, 690, 691, 692, 693, 695, 696, 697, 698, 702, 709, 710, 712, 718, 725, 729, 737, 738, 739, 740, 742, 747, 748, 750, 752, 753, 755, 757, 758, 760, 762, 764, 765, 775, 778, 791, 818, 826, 827, 830, 843, 847, 851], "torch_alexnet": 3, "alexnet_weight": 3, "weight": [3, 5, 13, 15, 17, 30, 31, 44, 45, 56, 58, 60, 62, 79, 81, 83, 85, 96, 97, 314, 318, 352, 368, 371, 374, 375, 386, 401, 434, 519, 521, 524, 614, 615, 618, 620, 621, 622, 634, 635, 637, 639, 659, 660, 661, 662, 665, 695, 716, 777, 790, 791, 793, 795, 809, 811, 826, 836, 843, 848, 852, 853, 868], "imagenet1k_v1": [3, 11], "dropout": [3, 60, 83, 374, 398, 399, 400, 635, 660, 662, 665, 791, 851], "9": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 23, 25, 26, 27, 28, 42, 44, 46, 49, 52, 53, 55, 56, 57, 58, 60, 61, 63, 65, 67, 68, 69, 72, 76, 78, 79, 80, 81, 83, 84, 86, 88, 90, 91, 92, 101, 102, 109, 125, 126, 127, 139, 157, 158, 159, 160, 161, 164, 167, 220, 222, 224, 225, 228, 229, 230, 233, 234, 239, 240, 241, 246, 253, 259, 260, 261, 263, 267, 268, 270, 271, 272, 275, 277, 278, 282, 283, 286, 287, 288, 293, 299, 302, 303, 304, 341, 344, 348, 354, 355, 362, 366, 371, 372, 374, 376, 377, 384, 386, 393, 394, 395, 396, 401, 402, 406, 407, 411, 412, 416, 417, 421, 435, 452, 454, 456, 457, 461, 462, 463, 469, 473, 478, 488, 489, 490, 491, 493, 495, 498, 509, 511, 514, 523, 540, 544, 545, 546, 548, 551, 559, 560, 563, 564, 567, 575, 576, 590, 591, 593, 614, 615, 616, 620, 621, 625, 628, 629, 631, 633, 634, 635, 636, 638, 640, 642, 643, 644, 645, 646, 649, 650, 651, 657, 658, 659, 667, 668, 670, 672, 673, 674, 676, 677, 678, 681, 683, 684, 686, 687, 688, 690, 691, 692, 698, 702, 706, 707, 709, 710, 712, 717, 718, 723, 725, 728, 729, 737, 738, 739, 740, 742, 747, 748, 750, 752, 753, 755, 757, 758, 760, 762, 764, 765, 775, 795, 826, 828, 830, 838, 843, 851, 852, 865], "torch_output": [3, 7, 8, 11], "dim": [3, 11, 46, 56, 73, 75, 79, 140, 312, 368, 374, 377, 392, 402, 403, 404, 407, 415, 473, 495, 628, 635, 648, 655, 656, 661, 777, 791, 811, 828, 840, 841, 846], "torch_class": [3, 11], "torch_logit": [3, 11], "tensor": [3, 4, 5, 8, 10, 11, 12, 15, 17, 21, 22, 25, 26, 28, 30, 31, 32, 36, 42, 44, 52, 55, 56, 57, 60, 61, 62, 63, 65, 73, 75, 78, 79, 80, 83, 84, 85, 86, 88, 95, 128, 136, 137, 140, 146, 162, 178, 270, 271, 301, 318, 322, 323, 324, 325, 326, 327, 336, 359, 366, 368, 371, 374, 375, 376, 377, 386, 387, 393, 394, 397, 401, 410, 411, 412, 413, 420, 422, 424, 431, 432, 433, 434, 437, 439, 441, 443, 444, 447, 449, 450, 451, 453, 456, 457, 473, 476, 481, 484, 485, 486, 487, 490, 495, 496, 527, 532, 575, 576, 628, 629, 631, 633, 635, 636, 637, 638, 642, 658, 661, 662, 677, 688, 695, 705, 707, 737, 791, 800, 805, 809, 811, 823, 824, 828, 829, 833, 835, 836, 839, 840, 841, 843, 844, 846, 848, 850, 851, 853, 854, 856, 858, 862, 863, 864, 866, 867, 870, 872, 873, 876], "6477": 3, "2950": 3, "0453": 3, "grad_fn": [3, 11, 28, 42, 617, 624, 634, 851], "lt": [3, 5, 6, 11, 15, 17, 21, 25, 26, 27, 28, 42, 44, 46, 102], "takebackward0": [3, 11], "gt": [3, 5, 6, 11, 15, 17, 21, 25, 26, 27, 28, 42, 44, 46, 49, 102, 841, 848], "great": [3, 6, 7, 811, 819, 843, 848, 850, 859, 860, 875], "With": [3, 5, 23, 33, 42, 50, 52, 53, 55, 56, 57, 58, 60, 61, 63, 66, 69, 75, 76, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 101, 102, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 126, 127, 128, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 147, 148, 151, 152, 153, 154, 156, 162, 163, 164, 167, 174, 179, 180, 181, 182, 183, 193, 196, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 250, 251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 314, 334, 335, 337, 339, 342, 343, 347, 350, 351, 352, 354, 355, 358, 366, 368, 371, 374, 375, 376, 377, 386, 396, 398, 399, 406, 418, 425, 426, 427, 429, 430, 431, 442, 445, 457, 473, 474, 475, 477, 480, 482, 483, 489, 491, 493, 495, 497, 512, 521, 522, 523, 524, 526, 527, 528, 529, 530, 531, 533, 537, 538, 539, 540, 543, 544, 545, 546, 547, 551, 552, 555, 557, 559, 560, 561, 575, 576, 590, 591, 592, 594, 596, 598, 599, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 656, 657, 658, 659, 665, 666, 667, 668, 669, 670, 672, 673, 675, 676, 677, 678, 679, 680, 683, 684, 685, 686, 687, 688, 690, 691, 692, 695, 697, 698, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 715, 716, 717, 718, 720, 723, 724, 725, 726, 728, 729, 734, 735, 736, 737, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 818, 828, 830, 840, 843, 846, 848, 859, 860, 862, 869, 872], "simpl": [3, 6, 15, 19, 20, 22, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 42, 44, 46, 49, 56, 79, 386, 521, 777, 791, 805, 811, 817, 818, 819, 823, 825, 826, 828, 829, 830, 831, 836, 839, 840, 843, 844, 846, 850, 852, 853, 854, 856, 858, 862, 863, 868, 869, 870, 871], "chang": [3, 4, 13, 21, 31, 44, 45, 46, 50, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 99, 101, 109, 110, 111, 112, 113, 114, 115, 116, 117, 127, 128, 130, 132, 133, 135, 137, 138, 139, 140, 142, 144, 145, 148, 152, 153, 154, 167, 171, 172, 179, 196, 213, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 300, 302, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 316, 317, 318, 321, 328, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 371, 374, 377, 386, 393, 394, 395, 396, 398, 399, 400, 402, 406, 407, 408, 411, 412, 413, 417, 418, 421, 422, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 435, 439, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 506, 508, 509, 510, 511, 512, 513, 514, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 536, 537, 539, 540, 543, 544, 545, 546, 547, 548, 551, 552, 555, 557, 559, 560, 561, 563, 564, 565, 567, 568, 570, 575, 576, 590, 591, 592, 593, 594, 596, 598, 599, 612, 614, 615, 618, 620, 621, 622, 623, 625, 631, 638, 640, 649, 650, 651, 652, 653, 654, 657, 658, 659, 661, 665, 666, 667, 669, 670, 671, 672, 673, 674, 675, 676, 677, 682, 683, 684, 686, 693, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 718, 729, 734, 736, 737, 738, 739, 740, 742, 743, 744, 745, 746, 747, 748, 749, 750, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 765, 766, 767, 772, 811, 817, 818, 819, 820, 822, 824, 825, 826, 827, 828, 830, 831, 833, 834, 840, 841, 842, 843, 844, 845, 846, 848, 852, 854, 855, 860, 862, 872, 875], "backend": [3, 5, 6, 8, 9, 12, 22, 23, 24, 25, 26, 27, 28, 31, 33, 34, 36, 51, 52, 56, 57, 61, 73, 79, 80, 84, 101, 128, 165, 166, 169, 191, 198, 199, 201, 204, 215, 334, 335, 371, 375, 427, 429, 528, 537, 549, 550, 558, 561, 562, 572, 579, 594, 597, 628, 629, 630, 633, 636, 684, 686, 770, 772, 773, 775, 776, 777, 780, 782, 783, 788, 792, 793, 795, 799, 800, 811, 815, 816, 818, 819, 821, 822, 823, 827, 829, 830, 831, 832, 833, 835, 836, 837, 839, 840, 841, 843, 845, 846, 847, 849, 850, 853, 856, 858, 862, 863, 864, 869, 872, 875, 876], "let": [3, 4, 5, 6, 7, 8, 10, 12, 13, 15, 17, 21, 22, 23, 25, 26, 27, 28, 30, 31, 32, 33, 35, 36, 37, 42, 44, 45, 47, 49, 57, 69, 80, 219, 220, 221, 222, 225, 228, 237, 240, 242, 244, 253, 254, 255, 260, 262, 275, 283, 285, 286, 290, 551, 552, 631, 633, 636, 646, 690, 760, 762, 763, 764, 765, 811, 817, 820, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 840, 841, 843, 844, 845, 846, 848, 850, 851, 852, 853, 860, 862, 863, 876], "u": [3, 10, 44, 46, 48, 49, 56, 61, 75, 79, 84, 96, 97, 137, 375, 439, 446, 448, 636, 640, 666, 672, 673, 686, 725, 811, 812, 818, 819, 821, 826, 827, 834, 837, 839, 840, 841, 842, 843, 844, 846, 852, 854, 859], "differ": [3, 4, 5, 8, 10, 12, 13, 15, 19, 20, 24, 25, 26, 30, 31, 34, 35, 36, 37, 55, 56, 57, 61, 69, 73, 79, 80, 92, 101, 102, 111, 114, 164, 222, 239, 246, 247, 272, 288, 333, 340, 345, 346, 350, 371, 374, 375, 377, 386, 408, 419, 444, 450, 467, 474, 475, 489, 522, 523, 531, 551, 552, 625, 629, 631, 633, 635, 636, 638, 646, 658, 659, 674, 684, 699, 709, 756, 757, 762, 764, 765, 770, 775, 783, 792, 793, 811, 815, 816, 817, 818, 819, 820, 821, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 835, 836, 838, 839, 840, 841, 843, 844, 846, 848, 849, 850, 851, 852, 853, 854, 855, 858, 859, 860, 862, 863, 864, 866, 867, 868, 869, 872, 875, 876], "ll": [3, 5, 6, 7, 8, 10, 12, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 45, 811, 812, 814, 815, 817, 818, 819, 820, 825, 830, 833, 834, 838, 839, 851, 855, 860, 862, 863], "try": [3, 5, 6, 22, 32, 42, 45, 49, 73, 600, 633, 790, 800, 811, 817, 818, 819, 822, 823, 826, 827, 828, 832, 834, 839, 841, 848, 850, 854, 857, 859, 860, 864], "10": [3, 5, 6, 7, 8, 9, 11, 12, 13, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 35, 36, 37, 42, 44, 46, 48, 49, 52, 55, 56, 57, 58, 60, 61, 65, 67, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 102, 125, 135, 136, 137, 221, 229, 230, 233, 234, 237, 244, 249, 251, 257, 259, 261, 272, 278, 285, 286, 291, 300, 333, 334, 335, 338, 342, 343, 345, 347, 348, 350, 351, 352, 354, 355, 359, 362, 371, 374, 377, 386, 393, 394, 395, 396, 406, 411, 412, 416, 417, 418, 419, 421, 451, 463, 466, 469, 473, 478, 488, 489, 498, 519, 522, 523, 526, 528, 531, 544, 545, 546, 548, 551, 552, 554, 559, 560, 568, 576, 580, 585, 591, 593, 605, 608, 620, 628, 631, 633, 634, 635, 636, 638, 640, 641, 642, 643, 644, 645, 646, 649, 650, 652, 658, 668, 670, 674, 675, 676, 677, 678, 681, 686, 687, 688, 690, 692, 702, 707, 708, 709, 710, 712, 723, 725, 728, 736, 737, 738, 739, 740, 746, 748, 754, 756, 757, 758, 759, 761, 762, 764, 765, 775, 777, 795, 811, 815, 818, 822, 826, 827, 828, 830, 833, 838, 841, 843, 848, 850, 851, 859, 864, 874], "tf": [3, 5, 7, 8, 9, 12, 15, 17, 22, 25, 26, 28, 30, 31, 32, 33, 35, 37, 42, 47, 48, 788, 811, 823, 828, 829, 835, 839, 840, 843, 844, 846, 848, 853, 854, 856, 862, 863, 864, 869], "onc": [3, 5, 7, 30, 31, 42, 44, 61, 65, 84, 88, 212, 375, 428, 630, 636, 642, 671, 672, 673, 686, 737, 811, 817, 818, 819, 826, 827, 828, 829, 830, 833, 834, 839, 840, 843, 846, 848, 851, 854, 855, 860, 862], "set": [3, 6, 8, 15, 17, 23, 30, 31, 33, 36, 44, 45, 46, 47, 48, 51, 56, 57, 60, 61, 66, 68, 69, 73, 79, 80, 83, 84, 89, 91, 92, 114, 117, 124, 144, 146, 180, 181, 182, 183, 184, 195, 208, 209, 210, 211, 212, 227, 327, 339, 355, 357, 362, 368, 371, 372, 374, 375, 376, 377, 386, 397, 418, 422, 426, 430, 433, 451, 456, 457, 473, 483, 486, 493, 521, 526, 527, 528, 529, 530, 531, 533, 537, 544, 556, 561, 577, 578, 579, 581, 582, 583, 584, 585, 586, 587, 588, 594, 602, 625, 627, 628, 629, 630, 631, 633, 635, 636, 640, 642, 643, 645, 646, 658, 665, 667, 677, 679, 682, 685, 686, 717, 724, 727, 728, 729, 734, 735, 741, 743, 744, 748, 750, 751, 752, 755, 763, 765, 772, 775, 776, 777, 778, 783, 790, 791, 793, 795, 800, 805, 808, 809, 811, 812, 819, 821, 822, 823, 825, 826, 827, 828, 829, 830, 832, 834, 836, 837, 839, 840, 841, 843, 844, 846, 848, 850, 851, 858, 861, 862, 863, 867, 868, 869, 870, 871, 873, 876], "our": [3, 5, 6, 10, 12, 13, 15, 17, 19, 22, 23, 25, 26, 27, 30, 31, 32, 33, 35, 36, 37, 42, 44, 45, 48, 71, 94, 101, 102, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 777, 787, 788, 790, 791, 793, 794, 795, 796, 811, 812, 813, 814, 816, 817, 818, 819, 820, 821, 822, 823, 825, 826, 827, 828, 830, 832, 833, 834, 837, 840, 841, 842, 843, 844, 846, 847, 848, 850, 851, 852, 853, 854, 858, 859, 862, 874, 875, 877], "post": [3, 5, 7, 44, 64, 87, 641, 736, 818, 833, 838, 853, 855], "process": [3, 5, 7, 25, 30, 31, 35, 44, 206, 218, 630, 812, 818, 819, 825, 826, 827, 833, 834, 836, 838, 840, 841, 842, 843, 846, 848, 853, 859, 860, 862, 867, 868, 869, 872, 873, 875, 876], "11": [3, 5, 6, 7, 11, 12, 21, 23, 25, 26, 27, 28, 42, 44, 45, 46, 49, 55, 56, 57, 60, 61, 65, 69, 78, 79, 80, 83, 84, 86, 88, 92, 102, 222, 226, 229, 234, 244, 281, 282, 288, 352, 371, 374, 375, 377, 393, 394, 406, 411, 412, 416, 417, 421, 430, 466, 467, 469, 473, 478, 480, 498, 522, 523, 538, 544, 545, 551, 560, 576, 631, 633, 635, 636, 637, 638, 640, 642, 643, 644, 646, 649, 650, 658, 659, 670, 673, 674, 675, 676, 677, 681, 685, 686, 687, 688, 690, 692, 695, 702, 707, 708, 710, 712, 723, 725, 735, 738, 739, 740, 747, 748, 756, 757, 758, 765, 826, 827, 828, 830, 838], "st": [3, 4, 10, 775, 822, 841, 843], "perf_count": [3, 8, 9, 10], "raw_logit": 3, "latenc": [3, 10], "nn": [3, 5, 6, 7, 9, 17, 28, 30, 31, 44, 48, 138, 628, 811, 836, 841, 846, 853, 863, 870], "axi": [3, 5, 6, 7, 13, 45, 46, 47, 50, 52, 55, 56, 57, 61, 62, 63, 65, 66, 67, 68, 69, 70, 72, 73, 75, 78, 79, 80, 84, 85, 86, 88, 89, 90, 91, 92, 93, 96, 112, 116, 136, 137, 140, 212, 286, 291, 334, 335, 339, 340, 348, 355, 371, 374, 376, 377, 380, 384, 386, 396, 397, 403, 406, 408, 418, 419, 455, 460, 468, 469, 470, 473, 474, 475, 478, 483, 488, 489, 491, 492, 493, 495, 497, 498, 503, 504, 506, 514, 519, 522, 523, 524, 526, 527, 528, 529, 530, 531, 544, 551, 613, 625, 628, 630, 631, 633, 635, 636, 637, 638, 639, 642, 643, 644, 645, 646, 647, 657, 667, 670, 677, 690, 692, 693, 695, 696, 697, 699, 700, 701, 702, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 715, 716, 742, 743, 744, 748, 750, 752, 753, 755, 756, 757, 759, 760, 761, 762, 763, 764, 765, 766, 767, 775, 777, 787, 791, 792, 797, 826, 828, 830, 832, 835, 836, 839, 840, 843, 846, 848, 850, 853], "direct": [3, 56, 79, 340, 347, 351, 356, 360, 371, 374, 377, 408, 419, 474, 475, 489, 645, 755, 817, 823, 825, 840, 846, 852, 853, 865, 869, 870, 873], "tolist": 3, "652289830999962": 3, "shape": [3, 4, 7, 8, 13, 15, 17, 23, 24, 25, 26, 30, 31, 36, 42, 44, 45, 46, 49, 50, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 96, 97, 99, 100, 101, 105, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 151, 152, 153, 207, 213, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 320, 322, 323, 324, 325, 326, 327, 328, 334, 335, 336, 337, 338, 340, 342, 343, 345, 347, 349, 351, 352, 353, 354, 358, 359, 361, 366, 368, 371, 374, 375, 376, 377, 380, 381, 382, 384, 386, 388, 389, 390, 391, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 407, 408, 410, 411, 412, 413, 416, 418, 419, 420, 423, 424, 425, 426, 428, 429, 430, 433, 434, 435, 436, 437, 440, 441, 442, 443, 444, 445, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 463, 464, 466, 468, 471, 476, 481, 482, 483, 484, 485, 486, 487, 489, 490, 491, 492, 493, 495, 496, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 519, 520, 521, 522, 523, 524, 539, 540, 544, 545, 546, 548, 551, 552, 555, 561, 568, 575, 576, 586, 595, 597, 609, 613, 614, 615, 618, 620, 621, 622, 623, 625, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 708, 709, 710, 711, 713, 736, 737, 738, 739, 740, 742, 743, 744, 745, 746, 747, 752, 753, 755, 756, 757, 758, 760, 762, 763, 765, 766, 767, 772, 775, 777, 790, 791, 794, 804, 809, 811, 819, 820, 826, 828, 829, 830, 831, 832, 833, 835, 839, 840, 841, 843, 844, 845, 848, 850, 851, 852, 853, 862, 863], "dtype": [3, 7, 11, 13, 17, 23, 25, 26, 27, 28, 42, 45, 52, 53, 56, 57, 60, 61, 65, 66, 69, 73, 75, 76, 78, 79, 80, 83, 84, 88, 89, 92, 101, 104, 105, 106, 125, 126, 127, 129, 130, 131, 133, 134, 135, 136, 137, 139, 140, 141, 142, 147, 148, 149, 150, 151, 152, 154, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 190, 191, 207, 234, 238, 270, 271, 273, 311, 312, 313, 314, 315, 316, 317, 322, 323, 324, 325, 326, 332, 337, 339, 355, 368, 371, 374, 375, 376, 377, 381, 386, 396, 406, 418, 419, 422, 445, 451, 456, 467, 491, 507, 508, 509, 510, 511, 521, 522, 523, 524, 527, 530, 531, 548, 549, 550, 552, 561, 570, 598, 628, 629, 630, 631, 633, 635, 636, 639, 642, 643, 645, 646, 647, 651, 658, 677, 693, 715, 716, 738, 739, 740, 743, 744, 745, 754, 755, 756, 757, 762, 764, 766, 767, 770, 772, 775, 777, 778, 790, 791, 792, 793, 794, 796, 811, 815, 822, 824, 828, 829, 830, 832, 833, 836, 837, 839, 840, 841, 843, 844, 848, 850, 863], "int32": [3, 42, 44, 53, 56, 57, 65, 66, 69, 76, 79, 80, 88, 89, 131, 136, 140, 142, 148, 151, 154, 156, 158, 160, 162, 165, 167, 168, 172, 175, 179, 183, 187, 189, 207, 234, 270, 271, 382, 386, 512, 522, 523, 524, 552, 561, 598, 628, 629, 630, 631, 633, 642, 643, 646, 738, 739, 740, 744, 756, 757, 762, 764, 775, 776, 828, 840, 843, 848], "6477362": 3, "29496726": 3, "04526032": 3, "float32": [3, 7, 11, 13, 15, 17, 22, 23, 42, 44, 45, 46, 52, 53, 56, 57, 60, 75, 76, 79, 80, 83, 92, 137, 140, 142, 148, 149, 150, 154, 158, 159, 162, 163, 164, 165, 168, 171, 172, 174, 179, 182, 188, 238, 252, 279, 332, 345, 368, 371, 374, 375, 376, 386, 396, 406, 419, 445, 451, 456, 524, 561, 598, 628, 629, 631, 633, 635, 636, 639, 651, 653, 654, 657, 684, 686, 687, 693, 715, 716, 772, 775, 776, 811, 828, 830, 841, 843, 844, 863, 864], "As": [3, 5, 6, 7, 10, 12, 13, 15, 17, 23, 27, 28, 30, 31, 33, 36, 42, 43, 67, 71, 94, 636, 644, 684, 748, 749, 750, 751, 811, 815, 817, 818, 819, 820, 823, 825, 826, 827, 828, 829, 832, 833, 834, 835, 836, 839, 840, 841, 842, 843, 846, 850, 851, 852, 854, 858, 862, 863, 864, 869, 874], "expect": [3, 7, 10, 12, 23, 27, 30, 31, 33, 46, 47, 49, 56, 61, 62, 79, 85, 178, 246, 290, 374, 376, 397, 419, 456, 535, 629, 631, 633, 635, 637, 660, 681, 695, 790, 791, 811, 818, 819, 822, 828, 829, 832, 834, 837, 839, 841, 843, 846, 854, 855, 860, 862, 863, 864], "ident": [3, 5, 8, 13, 28, 45, 47, 61, 73, 131, 200, 554, 580, 628, 630, 633, 636, 640, 674, 678, 730, 791, 826, 836, 837, 840, 841, 844, 846, 850, 851, 854, 856, 858, 860], "had": [3, 826, 827, 839, 844, 848, 869, 870], "anoth": [3, 21, 23, 24, 27, 28, 30, 31, 33, 34, 46, 47, 132, 152, 154, 628, 629, 811, 817, 818, 819, 824, 826, 828, 829, 832, 834, 836, 839, 840, 843, 848, 850, 853, 856, 859, 861, 862, 863, 869, 875], "postprocess": 3, "routin": [3, 827, 839, 840, 846, 854, 869], "feed": [3, 212, 630, 862, 869, 870], "other": [3, 5, 6, 8, 10, 12, 15, 17, 22, 23, 24, 25, 26, 28, 30, 31, 32, 33, 34, 35, 36, 37, 44, 46, 53, 55, 56, 57, 63, 69, 73, 76, 78, 79, 80, 86, 92, 96, 101, 102, 125, 140, 152, 178, 239, 244, 246, 262, 271, 272, 336, 340, 371, 377, 467, 468, 476, 533, 534, 628, 629, 631, 633, 642, 646, 699, 709, 740, 763, 765, 772, 777, 811, 815, 817, 818, 819, 820, 822, 823, 826, 827, 830, 831, 832, 833, 834, 836, 837, 838, 839, 840, 841, 843, 844, 846, 848, 850, 852, 853, 854, 855, 856, 859, 862, 863, 865, 867, 868, 869, 875, 876], "carefulli": [3, 277, 631, 790, 840, 867, 872], "rewrit": 3, "easili": [3, 27, 30, 31, 42, 811, 818, 823, 827, 833, 840, 843, 846, 851, 852, 853, 854, 859, 869, 875, 876], "out": [3, 5, 7, 12, 13, 15, 17, 19, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 42, 45, 48, 50, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 101, 102, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 151, 153, 162, 213, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 316, 317, 328, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 366, 368, 371, 374, 375, 376, 377, 380, 381, 382, 384, 386, 387, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 406, 407, 408, 410, 411, 412, 413, 416, 418, 419, 422, 423, 424, 425, 426, 427, 428, 431, 432, 434, 435, 436, 437, 438, 440, 441, 442, 443, 445, 449, 452, 453, 454, 455, 457, 458, 464, 466, 467, 468, 470, 471, 473, 474, 475, 476, 477, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 495, 496, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 535, 539, 540, 544, 545, 546, 548, 551, 552, 561, 571, 575, 576, 614, 615, 618, 620, 621, 622, 623, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 708, 709, 710, 711, 713, 736, 737, 738, 739, 740, 742, 743, 744, 745, 747, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 775, 783, 787, 788, 790, 791, 793, 794, 795, 796, 811, 812, 815, 816, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 834, 836, 838, 840, 841, 842, 843, 844, 846, 847, 848, 849, 850, 851, 852, 853, 855, 858, 859, 860, 862, 863, 869, 876], "quickest": 3, "particular": [3, 30, 31, 267, 631, 776, 818, 819, 822, 824, 827, 828, 830, 837, 839, 840, 843, 844, 865, 869, 875], "hardwar": [3, 44, 101, 105, 818, 846, 859, 865, 867, 868, 869, 870, 871, 872, 873, 874, 875], "again": [3, 7, 24, 25, 33, 34, 35, 36, 636, 684, 819, 823, 824, 825, 826, 830, 832, 834, 839, 840, 843, 844, 846, 851, 853, 854, 859, 860, 874, 875], "speed": [3, 10, 12, 13, 30, 31, 44, 49, 57, 80, 568, 633, 843, 858, 872], "up": [3, 6, 7, 10, 12, 13, 30, 56, 57, 79, 80, 374, 377, 397, 410, 467, 475, 556, 568, 633, 635, 658, 660, 811, 812, 815, 817, 819, 820, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 843, 844, 846, 848, 849, 850, 851, 852, 853, 854, 858, 859, 860, 862, 870, 875, 876], "12": [3, 5, 6, 7, 10, 11, 13, 21, 23, 25, 26, 27, 28, 42, 44, 45, 46, 53, 55, 56, 57, 60, 61, 65, 69, 76, 78, 79, 80, 83, 84, 86, 87, 88, 92, 101, 102, 167, 222, 224, 229, 233, 234, 237, 239, 240, 241, 259, 272, 275, 282, 285, 292, 293, 316, 317, 348, 351, 352, 368, 371, 374, 377, 386, 393, 394, 395, 396, 398, 402, 403, 411, 412, 416, 417, 418, 419, 421, 466, 467, 469, 473, 478, 495, 498, 511, 522, 528, 529, 530, 540, 544, 545, 576, 582, 591, 605, 631, 633, 635, 636, 638, 640, 641, 642, 643, 644, 646, 649, 653, 658, 659, 670, 672, 674, 677, 681, 685, 687, 688, 690, 692, 702, 706, 708, 710, 712, 729, 736, 738, 739, 740, 747, 748, 756, 757, 758, 762, 764, 775, 818, 824, 826, 828, 830, 838], "repeat": [3, 4, 24, 34, 56, 57, 63, 79, 80, 86, 374, 377, 386, 403, 408, 472, 521, 546, 633, 638, 639, 711, 715, 716, 804, 819, 823, 824, 830, 831, 839, 843], "previou": [3, 13, 23, 24, 25, 27, 33, 34, 35, 37, 58, 79, 81, 186, 187, 188, 189, 190, 363, 373, 374, 420, 601, 603, 604, 605, 606, 608, 609, 611, 615, 620, 629, 633, 634, 790, 808, 818, 819, 822, 824, 827, 829, 835, 840, 843, 846, 853, 854, 872], "trace": [3, 4, 5, 7, 10, 11, 12, 19, 20, 24, 27, 30, 33, 35, 36, 48, 57, 61, 73, 80, 84, 563, 564, 567, 578, 587, 602, 610, 633, 636, 772, 783, 793, 795, 809, 811, 822, 826, 828, 840, 845, 846, 848, 853, 854, 861, 862, 863, 870, 875], "befor": [3, 4, 5, 7, 22, 23, 24, 25, 26, 32, 33, 34, 35, 36, 37, 44, 56, 60, 61, 63, 67, 69, 73, 79, 83, 84, 209, 212, 217, 374, 377, 386, 402, 407, 417, 421, 467, 474, 475, 476, 483, 522, 523, 630, 635, 636, 638, 639, 640, 644, 646, 648, 649, 650, 651, 653, 655, 657, 661, 662, 665, 676, 677, 693, 699, 714, 715, 729, 748, 749, 750, 751, 756, 757, 762, 764, 772, 791, 800, 804, 817, 818, 819, 822, 823, 825, 828, 829, 831, 832, 833, 834, 835, 837, 838, 839, 840, 841, 843, 848, 851, 854, 862, 863, 869], "13": [3, 5, 6, 7, 10, 11, 21, 25, 26, 27, 28, 42, 44, 46, 50, 55, 56, 60, 61, 65, 69, 78, 79, 80, 81, 83, 86, 88, 92, 101, 117, 167, 197, 222, 237, 246, 257, 277, 286, 348, 355, 362, 371, 374, 377, 395, 396, 406, 417, 421, 466, 467, 469, 473, 478, 498, 511, 522, 523, 539, 544, 545, 560, 582, 591, 614, 625, 629, 630, 631, 633, 634, 635, 636, 638, 639, 640, 643, 644, 646, 649, 650, 658, 659, 670, 674, 681, 685, 687, 690, 712, 716, 729, 738, 739, 740, 747, 748, 756, 757, 758, 826, 828, 830, 840], "026875037000081647": 3, "14": [3, 5, 7, 10, 11, 26, 42, 44, 45, 46, 53, 55, 56, 60, 61, 65, 69, 76, 78, 79, 80, 83, 84, 86, 88, 151, 164, 167, 220, 225, 227, 234, 238, 264, 268, 272, 278, 285, 293, 344, 374, 375, 377, 386, 393, 394, 395, 396, 406, 411, 413, 416, 417, 418, 421, 425, 431, 432, 467, 469, 473, 478, 498, 522, 591, 614, 629, 631, 633, 634, 635, 636, 638, 640, 644, 646, 649, 650, 652, 654, 656, 658, 670, 672, 674, 681, 688, 690, 692, 712, 729, 738, 739, 740, 748, 757, 758, 826, 830, 843], "overrid": [3, 7, 36, 45, 52, 56, 75, 79, 140, 386, 521, 628, 823, 825], "behavior": [3, 7, 56, 67, 239, 246, 272, 281, 387, 532, 579, 603, 631, 633, 644, 748, 749, 750, 751, 817, 825, 826, 827, 828, 839, 840, 841, 843, 846, 848, 854, 866], "prealloc": [3, 7], "75": [3, 6, 7, 42, 55, 56, 78, 79, 80, 83, 88, 118, 136, 225, 227, 239, 241, 252, 314, 347, 348, 368, 371, 417, 531, 546, 559, 591, 625, 628, 631, 633, 636, 640, 642, 649, 675, 681, 725, 740], "memori": [3, 5, 6, 7, 8, 9, 12, 22, 25, 26, 27, 28, 52, 56, 63, 75, 79, 86, 127, 138, 194, 206, 212, 214, 218, 377, 386, 461, 462, 469, 471, 473, 474, 475, 482, 498, 528, 574, 579, 603, 628, 630, 633, 635, 638, 660, 661, 701, 702, 703, 705, 707, 708, 710, 712, 805, 809, 827, 828, 829, 839, 840, 846, 848, 854, 862, 869, 871, 872, 873], "temporari": [3, 7, 588, 611, 633, 805, 828, 845], "fix": [3, 7, 46, 56, 79, 96, 97, 371, 374, 375, 420, 450, 635, 662, 811, 815, 818, 819, 822, 828, 834, 843, 844], "until": [3, 7, 805, 819, 839, 848, 854, 859, 862, 876], "handl": [3, 7, 42, 44, 50, 54, 55, 56, 72, 73, 77, 78, 79, 102, 109, 110, 111, 112, 113, 114, 115, 116, 117, 192, 193, 194, 195, 196, 200, 205, 206, 214, 218, 224, 236, 261, 263, 277, 283, 284, 289, 290, 294, 299, 300, 302, 366, 377, 466, 492, 625, 630, 631, 636, 646, 690, 762, 764, 787, 795, 812, 814, 821, 826, 827, 828, 834, 835, 836, 838, 839, 840, 841, 842, 843, 845, 846, 852, 866, 876], "o": [3, 7, 43, 44, 45, 46, 48, 571, 633, 635, 662, 811, 818, 821, 827, 848, 855], "environ": [3, 7, 12, 25, 26, 27, 28, 45, 48, 811, 812, 819, 855, 869, 871], "xla_python_client_alloc": [3, 7], "platform": [3, 5, 7, 13, 25, 26, 28, 813, 816, 818, 825, 867, 871, 873], "jit": [3, 10, 12, 30, 33, 848, 854, 862, 869], "img_jax": [3, 7], "device_put": [3, 10], "15": [3, 5, 6, 7, 8, 11, 12, 13, 26, 42, 44, 45, 46, 49, 55, 56, 57, 61, 65, 69, 75, 76, 78, 79, 80, 83, 84, 86, 88, 92, 102, 135, 164, 222, 229, 233, 239, 241, 250, 257, 258, 263, 264, 272, 281, 282, 283, 348, 362, 371, 372, 374, 375, 377, 386, 393, 394, 411, 413, 416, 417, 421, 427, 469, 473, 478, 498, 522, 540, 544, 545, 548, 559, 560, 585, 591, 608, 628, 629, 631, 633, 635, 636, 638, 640, 642, 643, 644, 646, 649, 659, 670, 673, 674, 675, 681, 687, 688, 706, 712, 717, 738, 739, 746, 748, 757, 758, 772, 814, 818, 827, 830, 838, 872], "warm": 3, "_": [3, 8, 9, 10, 12, 13, 30, 43, 44, 55, 56, 73, 78, 79, 81, 97, 154, 242, 244, 252, 253, 268, 334, 335, 371, 374, 377, 386, 418, 447, 450, 491, 521, 544, 614, 615, 629, 631, 633, 634, 636, 638, 640, 646, 684, 685, 687, 713, 724, 763, 811, 819, 827, 828, 831, 839, 843, 851], "rang": [3, 5, 6, 8, 9, 13, 30, 31, 42, 43, 44, 46, 52, 56, 69, 75, 79, 125, 136, 137, 286, 298, 306, 318, 366, 368, 375, 377, 386, 429, 441, 476, 484, 486, 491, 496, 522, 523, 524, 544, 613, 628, 631, 633, 644, 646, 748, 756, 757, 762, 764, 775, 777, 778, 790, 811, 814, 817, 828, 832, 836, 843, 848, 851, 852, 853, 869, 875], "16": [3, 6, 7, 8, 9, 13, 25, 26, 27, 28, 42, 44, 46, 55, 56, 57, 60, 61, 65, 69, 76, 78, 79, 80, 83, 84, 86, 88, 101, 102, 167, 233, 262, 282, 289, 345, 348, 352, 371, 374, 377, 386, 393, 394, 396, 402, 406, 407, 411, 412, 417, 421, 456, 473, 522, 528, 545, 548, 570, 591, 592, 624, 629, 631, 633, 634, 635, 636, 638, 640, 642, 643, 646, 657, 659, 666, 670, 673, 674, 681, 683, 687, 712, 725, 738, 739, 740, 747, 757, 758, 775, 778, 811, 819, 828, 830, 851], "0022192720000475674": 3, "64773613": 3, "29496723": 3, "exact": [3, 56, 72, 73, 109, 374, 376, 410, 415, 455, 456, 644, 748, 750, 777, 787, 818, 819, 822, 830, 848], "note": [3, 5, 7, 13, 26, 30, 31, 36, 45, 46, 47, 56, 57, 61, 63, 67, 79, 84, 86, 96, 133, 146, 178, 246, 281, 282, 289, 327, 328, 348, 368, 371, 374, 375, 377, 397, 428, 433, 443, 444, 450, 473, 491, 629, 631, 635, 636, 638, 644, 646, 662, 671, 672, 683, 684, 686, 705, 709, 749, 751, 760, 791, 805, 809, 815, 817, 818, 819, 823, 828, 830, 831, 834, 839, 840, 841, 843, 844, 846], "were": [3, 7, 47, 73, 76, 167, 171, 172, 246, 631, 635, 662, 817, 818, 819, 828, 832, 834, 838, 839, 841, 843, 844, 846, 848, 862, 869, 870, 875], "function": [3, 5, 6, 8, 9, 13, 15, 17, 19, 20, 22, 23, 24, 25, 26, 27, 28, 32, 33, 34, 35, 36, 37, 38, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 101, 102, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 152, 153, 154, 164, 165, 166, 167, 170, 171, 172, 174, 178, 179, 196, 198, 199, 208, 212, 213, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 316, 317, 318, 321, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 383, 386, 393, 394, 395, 396, 398, 399, 400, 402, 406, 407, 408, 411, 412, 413, 417, 418, 420, 421, 422, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 435, 439, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 506, 508, 509, 510, 511, 512, 513, 514, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 554, 555, 556, 557, 559, 560, 561, 563, 564, 565, 567, 568, 570, 571, 574, 575, 576, 579, 580, 583, 585, 587, 590, 591, 592, 593, 594, 596, 598, 599, 600, 606, 610, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 657, 658, 659, 661, 662, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 719, 721, 723, 724, 725, 727, 728, 729, 730, 736, 737, 738, 739, 740, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 770, 773, 775, 776, 777, 778, 783, 787, 790, 793, 800, 801, 807, 809, 811, 815, 818, 819, 821, 822, 823, 824, 825, 827, 830, 831, 833, 839, 842, 847, 849, 850, 851, 852, 856, 858, 862, 864, 866, 867, 868, 869, 870, 875, 876], "calcul": [3, 13, 44, 55, 56, 57, 62, 69, 73, 78, 79, 80, 84, 85, 92, 102, 219, 220, 221, 222, 223, 224, 225, 226, 227, 236, 237, 239, 242, 243, 244, 260, 261, 262, 263, 264, 265, 270, 271, 272, 277, 284, 285, 286, 288, 289, 290, 296, 306, 334, 335, 348, 358, 371, 374, 375, 376, 377, 380, 386, 393, 394, 395, 429, 451, 456, 483, 500, 502, 528, 568, 631, 633, 636, 637, 646, 673, 681, 684, 695, 696, 697, 759, 760, 761, 762, 763, 764, 765, 775, 777, 790, 791, 794, 817, 831, 848, 859, 862], "dog": 3, "18": [3, 9, 12, 13, 25, 26, 27, 28, 42, 44, 46, 55, 56, 65, 78, 79, 80, 83, 84, 88, 92, 112, 234, 239, 281, 285, 294, 295, 348, 366, 371, 374, 377, 396, 402, 406, 407, 411, 417, 421, 473, 590, 625, 631, 636, 642, 646, 653, 670, 676, 681, 688, 738, 739, 740, 757, 758, 762, 826, 828, 830], "19": [3, 12, 25, 26, 27, 28, 42, 44, 45, 46, 49, 55, 56, 65, 78, 79, 83, 84, 88, 225, 234, 262, 272, 289, 374, 375, 377, 386, 395, 396, 407, 411, 417, 421, 427, 432, 473, 522, 631, 636, 640, 642, 645, 670, 677, 690, 728, 738, 739, 740, 755, 830], "006431100999861883": 3, "258": [3, 635, 650, 652], "104": [3, 69, 636, 646, 681, 758], "259": 3, "72447652": 3, "13937832": 3, "05874982": 3, "samoi": 3, "wallabi": 3, "pomeranian": 3, "incorrect": [3, 827], "predict": [3, 5, 6, 7, 11, 13, 44, 45, 46, 47, 56, 62, 79, 85, 376, 452, 455, 458, 637, 695, 696, 697, 811, 828], "down": [3, 23, 33, 47, 56, 79, 374, 377, 410, 475, 811, 818, 843, 856, 869, 875], "itself": [3, 6, 25, 35, 55, 96, 273, 534, 600, 631, 633, 640, 729, 805, 815, 818, 819, 822, 825, 826, 827, 828, 829, 832, 833, 834, 839, 840, 852, 854, 858, 862, 868, 869, 870, 875], "version": [3, 5, 8, 13, 27, 28, 33, 44, 45, 46, 49, 50, 56, 79, 96, 109, 290, 339, 341, 371, 386, 526, 531, 613, 631, 633, 636, 672, 673, 772, 800, 801, 811, 818, 819, 825, 827, 828, 831, 839, 841, 848, 858, 859, 860, 863, 875, 876], "return": [3, 7, 8, 10, 11, 12, 13, 15, 17, 21, 22, 23, 24, 25, 26, 28, 30, 31, 32, 33, 34, 35, 36, 37, 42, 43, 44, 45, 46, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 99, 101, 102, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 185, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 371, 372, 373, 374, 375, 376, 377, 380, 381, 382, 384, 386, 387, 388, 389, 390, 391, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 406, 407, 408, 410, 411, 412, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 770, 772, 775, 776, 777, 778, 782, 783, 788, 790, 791, 793, 795, 800, 801, 804, 805, 806, 807, 808, 809, 811, 818, 819, 823, 826, 828, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 840, 841, 843, 844, 845, 846, 848, 850, 851, 852, 853, 854, 862, 863, 864, 870], "20": [3, 8, 9, 13, 17, 42, 44, 45, 46, 49, 55, 56, 57, 60, 65, 69, 78, 79, 80, 83, 84, 88, 92, 234, 238, 242, 278, 282, 286, 303, 348, 350, 352, 371, 374, 377, 393, 395, 411, 417, 421, 466, 488, 544, 551, 552, 554, 576, 580, 591, 631, 633, 636, 642, 643, 646, 649, 650, 661, 670, 675, 677, 681, 688, 738, 746, 747, 756, 757, 758, 762, 764, 811, 827, 846, 850], "004749261999904775": 3, "7245": 3, "1394": 3, "0587": 3, "promis": [3, 6, 859], "sourc": [3, 6, 8, 9, 11, 17, 22, 23, 24, 25, 26, 27, 28, 30, 31, 36, 37, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 371, 372, 373, 374, 375, 376, 377, 380, 381, 382, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 772, 773, 775, 776, 777, 779, 780, 781, 782, 783, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 817, 818, 819, 822, 823, 825, 826, 827, 840, 842, 858, 859, 860, 861, 863, 864, 868, 869, 870, 871, 872], "21": [3, 6, 8, 13, 42, 44, 46, 49, 55, 56, 57, 65, 75, 78, 79, 83, 84, 88, 92, 101, 137, 167, 222, 225, 227, 233, 257, 272, 303, 355, 374, 375, 376, 377, 386, 393, 396, 406, 411, 417, 419, 421, 425, 451, 466, 522, 576, 628, 629, 631, 633, 636, 640, 646, 670, 681, 685, 723, 738, 739, 756, 757, 758, 832, 838], "modul": [3, 5, 7, 10, 12, 15, 17, 19, 20, 21, 25, 26, 27, 28, 30, 31, 32, 36, 42, 43, 44, 46, 47, 48, 71, 73, 94, 102, 367, 369, 370, 378, 379, 383, 572, 633, 647, 768, 772, 787, 788, 789, 791, 792, 794, 796, 799, 800, 809, 811, 813, 818, 823, 824, 825, 832, 836, 839, 840, 842, 843, 848, 849, 851, 853, 854, 860, 862, 864, 869, 870, 872], "def": [3, 7, 10, 12, 13, 15, 17, 21, 22, 23, 24, 25, 26, 30, 31, 32, 33, 34, 35, 36, 37, 42, 43, 44, 45, 46, 48, 55, 78, 121, 223, 538, 627, 633, 639, 640, 715, 716, 723, 804, 811, 815, 817, 818, 822, 823, 826, 828, 829, 830, 832, 833, 835, 836, 838, 839, 840, 841, 843, 844, 846, 848, 850, 851, 852, 853, 862, 863, 864], "__init__": [3, 7, 15, 17, 30, 31, 42, 43, 44, 46, 73, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 773, 780, 781, 782, 787, 790, 791, 792, 793, 794, 795, 796, 799, 800, 804, 806, 809, 811, 817, 823, 824, 828, 832, 840, 844, 848, 850, 851, 852, 853, 863], "self": [3, 5, 6, 7, 15, 17, 30, 31, 42, 43, 44, 46, 48, 50, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 101, 102, 105, 109, 110, 111, 112, 113, 114, 115, 116, 117, 127, 128, 130, 132, 133, 135, 136, 137, 138, 139, 140, 142, 144, 145, 146, 148, 151, 152, 153, 154, 162, 164, 167, 170, 171, 172, 174, 176, 179, 196, 213, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 316, 317, 318, 321, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 386, 388, 389, 390, 391, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 406, 407, 408, 410, 411, 412, 413, 414, 417, 418, 419, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 435, 439, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 506, 507, 508, 509, 510, 511, 512, 513, 514, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 536, 537, 539, 540, 543, 544, 545, 546, 547, 548, 551, 552, 555, 557, 559, 560, 561, 563, 564, 565, 567, 568, 570, 575, 576, 590, 591, 592, 593, 594, 596, 598, 599, 612, 614, 615, 618, 620, 621, 622, 623, 635, 649, 650, 651, 652, 653, 654, 657, 658, 659, 661, 662, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 736, 737, 738, 739, 740, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 795, 804, 811, 819, 823, 826, 832, 840, 841, 848, 850, 851, 852, 853, 863], "num_class": [3, 15, 17, 30, 31, 44, 46, 48, 811, 853, 863], "1000": [3, 5, 8, 9, 10, 11, 15, 30, 31, 44, 45, 46, 47, 49, 52, 75, 137, 628, 811, 851, 863], "v": [3, 4, 7, 19, 20, 23, 30, 31, 33, 36, 37, 42, 45, 46, 56, 60, 68, 75, 79, 83, 91, 137, 237, 242, 244, 285, 375, 377, 429, 439, 446, 447, 472, 631, 635, 639, 645, 662, 665, 715, 716, 754, 772, 791, 792, 793, 794, 795, 796, 811, 813, 818, 819, 821, 825, 833, 848, 851, 852, 853, 877], "none": [3, 5, 7, 10, 12, 13, 30, 42, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 96, 100, 101, 102, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 157, 158, 159, 160, 161, 162, 164, 167, 169, 170, 171, 172, 174, 176, 179, 191, 194, 195, 207, 208, 209, 210, 211, 212, 213, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 316, 317, 322, 323, 324, 325, 326, 327, 328, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 366, 368, 371, 374, 375, 376, 377, 380, 381, 382, 384, 385, 386, 387, 388, 389, 390, 391, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 406, 407, 408, 409, 410, 411, 412, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 461, 462, 463, 464, 466, 467, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 517, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 536, 537, 539, 540, 543, 544, 545, 546, 547, 548, 551, 552, 554, 555, 556, 557, 559, 560, 561, 563, 564, 567, 572, 575, 576, 577, 578, 579, 581, 582, 583, 584, 586, 587, 588, 590, 591, 592, 594, 596, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 620, 621, 622, 623, 625, 626, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 721, 722, 723, 724, 728, 729, 730, 732, 733, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 772, 773, 775, 776, 777, 778, 783, 787, 788, 790, 791, 792, 793, 794, 795, 796, 799, 800, 803, 805, 809, 811, 815, 818, 822, 823, 824, 826, 827, 828, 829, 830, 832, 833, 835, 836, 839, 840, 841, 843, 844, 846, 848, 850, 852, 853, 862, 863, 864], "_build": [3, 7, 792, 793, 811], "kwarg": [3, 4, 6, 7, 12, 13, 30, 44, 48, 51, 56, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 102, 105, 202, 377, 483, 571, 600, 628, 630, 633, 770, 772, 787, 788, 791, 792, 793, 800, 809, 811, 823, 828, 829, 832, 836, 839, 840, 846, 848, 852, 862, 863, 864], "featur": [3, 6, 12, 13, 15, 17, 19, 21, 30, 31, 44, 48, 56, 79, 374, 388, 390, 391, 398, 399, 400, 790, 791, 809, 811, 817, 818, 819, 823, 824, 827, 828, 835, 844, 846, 851, 854, 863, 869, 870, 871, 875], "sequenti": [3, 7, 8, 11, 28, 30, 31, 46, 811, 825, 826, 852, 863], "conv2d": [3, 7, 11, 28, 30, 31, 46, 49, 60, 83, 635, 652, 791, 811], "64": [3, 7, 11, 42, 44, 45, 46, 49, 55, 56, 60, 78, 79, 80, 83, 84, 88, 92, 102, 163, 233, 243, 277, 286, 287, 345, 371, 374, 396, 406, 544, 545, 592, 620, 629, 631, 633, 634, 635, 636, 640, 646, 650, 652, 654, 656, 657, 678, 681, 691, 725, 729, 739, 758, 762, 818, 828, 851, 852, 866, 874], "2": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 21, 23, 24, 25, 26, 27, 28, 30, 31, 42, 43, 44, 45, 46, 49, 50, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 96, 99, 101, 102, 109, 111, 112, 113, 114, 115, 116, 117, 118, 122, 124, 125, 126, 127, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 146, 148, 151, 152, 153, 154, 158, 162, 164, 172, 174, 179, 195, 196, 197, 200, 203, 205, 207, 210, 213, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 318, 319, 320, 327, 329, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 366, 368, 371, 372, 374, 375, 376, 377, 380, 381, 384, 386, 390, 393, 394, 395, 396, 397, 398, 399, 401, 402, 403, 406, 407, 408, 411, 412, 413, 416, 417, 418, 419, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 435, 440, 442, 445, 449, 451, 452, 453, 454, 455, 456, 457, 458, 459, 461, 462, 463, 464, 466, 467, 468, 469, 470, 473, 474, 475, 477, 478, 479, 480, 482, 483, 488, 489, 490, 491, 492, 493, 495, 497, 498, 499, 503, 504, 506, 509, 511, 512, 513, 514, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 533, 536, 537, 538, 539, 540, 543, 544, 545, 546, 547, 548, 551, 552, 553, 554, 555, 556, 557, 559, 560, 561, 563, 564, 565, 567, 568, 570, 571, 573, 575, 576, 580, 589, 590, 591, 592, 593, 594, 596, 600, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 715, 716, 717, 718, 720, 721, 723, 724, 725, 726, 728, 729, 734, 735, 736, 737, 738, 739, 740, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 775, 777, 778, 787, 790, 791, 800, 804, 805, 809, 811, 815, 818, 819, 822, 824, 825, 826, 827, 828, 830, 832, 833, 835, 836, 838, 839, 840, 841, 843, 847, 848, 850, 851, 852, 853, 854, 862, 863, 864, 875, 876], "data_format": [3, 46, 56, 60, 79, 83, 374, 380, 389, 393, 394, 395, 398, 399, 400, 411, 412, 413, 414, 416, 500, 501, 502, 505, 635, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 775, 791, 794, 811], "nchw": [3, 46, 56, 60, 79, 83, 374, 380, 389, 394, 399, 412, 416, 505, 635, 648, 651, 652, 655, 656, 657, 791, 811], "relu": [3, 7, 11, 28, 30, 31, 42, 49, 50, 56, 71, 72, 79, 111, 301, 302, 310, 366, 625, 787, 811, 841, 851, 852], "maxpool2d": [3, 7, 11, 44, 791, 811], "192": [3, 46, 775, 804], "384": [3, 81, 614, 634, 640, 717], "avgpool": [3, 11], "adaptiveavgpool2d": [3, 11, 791], "6": [3, 5, 6, 8, 9, 10, 11, 12, 13, 15, 23, 25, 26, 27, 28, 30, 31, 42, 44, 45, 46, 49, 50, 52, 53, 55, 56, 57, 58, 60, 61, 63, 65, 66, 68, 69, 75, 76, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 97, 101, 102, 109, 111, 116, 121, 126, 127, 134, 135, 138, 139, 142, 148, 152, 153, 154, 162, 164, 172, 218, 219, 221, 222, 224, 225, 226, 227, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 262, 263, 264, 265, 267, 269, 270, 271, 272, 274, 275, 276, 278, 279, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 293, 295, 296, 298, 300, 302, 304, 305, 306, 308, 309, 310, 311, 312, 318, 329, 334, 335, 337, 339, 348, 349, 351, 352, 353, 355, 362, 366, 368, 371, 372, 374, 375, 376, 377, 382, 384, 386, 396, 398, 401, 402, 406, 407, 411, 417, 418, 419, 421, 424, 427, 430, 431, 435, 453, 454, 455, 456, 457, 458, 459, 461, 462, 463, 467, 469, 473, 474, 478, 479, 482, 483, 488, 489, 491, 492, 495, 498, 499, 509, 511, 512, 514, 519, 521, 522, 523, 524, 526, 528, 530, 531, 537, 539, 540, 543, 544, 545, 551, 552, 559, 560, 561, 576, 590, 591, 592, 593, 594, 596, 600, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 640, 641, 642, 643, 644, 645, 646, 649, 650, 651, 652, 653, 654, 656, 657, 658, 659, 661, 665, 667, 668, 669, 670, 672, 673, 674, 676, 677, 678, 681, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 706, 707, 708, 709, 710, 711, 712, 713, 717, 718, 728, 729, 735, 736, 737, 738, 739, 740, 742, 743, 744, 747, 748, 749, 750, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 775, 790, 811, 815, 818, 822, 824, 826, 827, 828, 830, 833, 838, 843, 846, 848, 850, 851, 852], "classifi": [3, 6, 13, 15, 17, 30, 31, 44, 46, 47, 811, 817, 862, 863], "prob": [3, 5, 6, 46, 56, 60, 79, 83, 88, 374, 381, 398, 399, 400, 507, 635, 642, 658, 737, 791, 811], "linear": [3, 11, 17, 29, 30, 31, 42, 43, 44, 46, 49, 56, 57, 60, 72, 79, 80, 83, 109, 111, 113, 114, 117, 294, 298, 302, 304, 305, 306, 310, 352, 366, 371, 374, 377, 386, 410, 445, 483, 531, 548, 571, 625, 633, 635, 640, 662, 685, 724, 775, 777, 778, 790, 791, 811, 826, 831, 836, 837, 839, 840, 843, 846, 848, 851, 852, 853, 863, 867, 868, 869, 872], "4096": 3, "_forward": [3, 7, 10, 12, 30, 31, 42, 43, 46, 811, 831, 848, 851, 852], "x": [3, 7, 8, 9, 13, 15, 17, 21, 22, 23, 24, 25, 26, 30, 31, 32, 33, 34, 35, 36, 37, 42, 43, 44, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 96, 97, 101, 102, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 122, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 151, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 167, 168, 171, 172, 174, 179, 195, 196, 198, 200, 205, 206, 207, 211, 213, 214, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 273, 274, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 316, 317, 318, 319, 321, 327, 328, 332, 334, 335, 336, 337, 339, 340, 341, 342, 343, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 366, 368, 371, 372, 374, 375, 376, 377, 380, 384, 385, 386, 387, 392, 393, 394, 395, 396, 397, 398, 399, 400, 402, 403, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 423, 425, 426, 428, 430, 432, 433, 434, 435, 436, 439, 440, 441, 442, 443, 444, 445, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 464, 465, 467, 468, 470, 471, 473, 476, 479, 480, 481, 482, 483, 484, 485, 486, 487, 490, 491, 493, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 506, 513, 514, 515, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 536, 537, 538, 539, 540, 543, 544, 545, 546, 547, 548, 551, 552, 553, 554, 555, 557, 559, 560, 561, 563, 564, 565, 566, 567, 568, 569, 570, 571, 573, 580, 581, 582, 585, 588, 589, 590, 591, 592, 593, 594, 596, 598, 599, 600, 612, 613, 615, 616, 617, 619, 623, 624, 625, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 690, 691, 693, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 715, 716, 717, 720, 723, 724, 725, 726, 727, 728, 729, 734, 735, 736, 738, 739, 740, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 772, 775, 776, 777, 791, 794, 797, 800, 804, 809, 811, 815, 817, 821, 823, 824, 826, 828, 829, 830, 831, 832, 833, 835, 836, 838, 839, 840, 841, 843, 844, 846, 848, 850, 851, 852, 853, 862, 863, 864], "reshap": [3, 30, 31, 46, 47, 56, 60, 61, 63, 73, 79, 83, 84, 86, 359, 371, 374, 375, 377, 393, 394, 395, 398, 411, 412, 413, 416, 425, 442, 467, 473, 613, 633, 635, 636, 638, 651, 653, 657, 677, 693, 811, 839, 840, 843, 846, 848, 850, 853, 866], "bidirect": [4, 635, 660], "encod": [4, 15, 17, 30, 31, 44, 46, 57, 62, 80, 85, 548, 633, 637, 695, 811, 851, 859, 863], "mlm": 4, "support": [4, 5, 6, 8, 9, 12, 13, 21, 22, 25, 26, 27, 28, 30, 33, 45, 54, 56, 57, 61, 77, 79, 80, 84, 146, 165, 169, 191, 198, 213, 222, 239, 246, 267, 268, 272, 282, 301, 327, 348, 366, 368, 371, 375, 377, 410, 428, 437, 491, 537, 549, 558, 561, 562, 579, 594, 628, 629, 630, 631, 633, 635, 636, 659, 671, 672, 673, 677, 686, 693, 770, 776, 783, 795, 800, 801, 804, 809, 811, 813, 815, 817, 818, 819, 822, 823, 825, 829, 830, 831, 833, 835, 836, 838, 839, 841, 843, 844, 846, 847, 848, 850, 851, 853, 855, 856, 858, 859, 860, 863, 866, 868, 869, 872, 874, 875, 876], "googl": [4, 25, 26, 27, 28, 44, 45, 46, 48, 827, 859], "type": [4, 10, 15, 17, 21, 27, 30, 31, 36, 44, 45, 46, 49, 50, 51, 52, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 101, 102, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 366, 368, 371, 372, 374, 375, 376, 377, 380, 381, 382, 384, 386, 387, 388, 389, 390, 391, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 406, 407, 408, 410, 411, 412, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 536, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 573, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 630, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 770, 772, 775, 776, 777, 778, 782, 783, 787, 790, 791, 792, 793, 797, 800, 804, 805, 806, 809, 817, 818, 819, 821, 822, 823, 826, 829, 830, 831, 832, 835, 837, 839, 841, 843, 844, 846, 848, 850, 851, 862, 863, 864, 869, 870, 873], "choos": [4, 44, 46, 54, 66, 67, 77, 213, 239, 246, 267, 268, 272, 334, 335, 371, 377, 630, 631, 643, 644, 646, 747, 748, 749, 750, 751, 759, 760, 761, 763, 775, 811, 817, 818, 819, 837, 843, 849, 853, 862], "librari": [4, 5, 6, 10, 12, 19, 20, 26, 28, 42, 44, 54, 67, 77, 213, 244, 246, 262, 267, 268, 290, 334, 335, 371, 630, 631, 636, 644, 646, 672, 673, 748, 749, 750, 751, 759, 760, 761, 763, 809, 811, 817, 818, 822, 828, 853, 854, 858, 859, 860, 862, 865, 866, 867, 869, 873, 876], "pretrain": [4, 10, 15, 16, 17, 30, 31, 49, 811, 863], "save": [4, 5, 11, 44, 56, 73, 79, 386, 528, 588, 611, 630, 633, 647, 793, 809, 818, 827, 834, 843, 854, 860, 868], "some": [4, 7, 8, 9, 12, 13, 15, 17, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 35, 36, 42, 46, 47, 73, 81, 244, 246, 262, 374, 398, 399, 400, 614, 615, 618, 620, 621, 622, 630, 631, 634, 640, 728, 791, 811, 815, 817, 818, 819, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 843, 844, 845, 846, 850, 851, 852, 854, 855, 856, 859, 860, 862, 863, 865, 866, 868, 869, 870, 875, 876], "mohame54": 4, "automodel": [4, 12, 30], "autotoken": 4, "load": [4, 5, 6, 10, 12, 27, 30, 44, 45, 46, 47, 48, 49, 73, 375, 446, 647, 793, 811, 843, 854, 868, 875], "token": [4, 46, 820], "bert_bas": 4, "from_pretrain": [4, 6, 12, 30, 47, 862, 863], "base": [4, 6, 13, 44, 47, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 104, 106, 137, 146, 178, 242, 243, 260, 261, 262, 263, 277, 318, 327, 329, 336, 339, 345, 352, 368, 371, 374, 375, 376, 384, 417, 421, 446, 451, 513, 581, 592, 604, 628, 629, 631, 633, 636, 638, 644, 646, 677, 701, 748, 749, 750, 751, 758, 773, 776, 777, 780, 781, 782, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 799, 800, 805, 806, 809, 811, 818, 819, 820, 822, 826, 827, 828, 832, 835, 837, 838, 839, 841, 842, 843, 844, 845, 846, 848, 869, 874, 876, 877], "uncas": 4, "eval": [4, 5, 7, 11, 17, 25, 26, 27, 28, 635, 660, 793], "evalu": [4, 55, 56, 73, 78, 79, 242, 244, 260, 261, 262, 263, 267, 274, 276, 283, 287, 321, 353, 364, 365, 368, 373, 375, 376, 377, 442, 451, 456, 480, 624, 631, 634, 640, 647, 727, 728, 766, 767, 792, 793, 819, 826, 828, 836, 837, 869], "bert_token": 4, "sampl": [4, 5, 6, 10, 12, 15, 17, 27, 30, 31, 45, 52, 55, 56, 65, 69, 75, 78, 79, 88, 92, 136, 137, 291, 318, 368, 374, 376, 377, 381, 398, 399, 400, 410, 420, 422, 451, 456, 486, 507, 508, 509, 510, 511, 628, 631, 642, 646, 737, 738, 739, 740, 763, 765, 791, 841, 843], "test": [4, 6, 22, 23, 25, 26, 32, 33, 35, 36, 37, 45, 46, 55, 57, 70, 78, 80, 93, 124, 170, 174, 253, 254, 255, 256, 279, 374, 398, 399, 400, 568, 627, 629, 631, 633, 647, 766, 767, 770, 773, 776, 805, 811, 813, 815, 816, 821, 825, 828, 830, 832, 834, 837, 840, 842, 844, 854, 855, 860, 862, 863, 864, 869], "did": [4, 44, 817, 825, 853, 859, 875], "realli": [4, 42, 818, 826, 833, 854, 862, 874, 875], "like": [4, 5, 6, 10, 12, 22, 23, 24, 30, 32, 33, 34, 35, 36, 37, 47, 49, 52, 55, 56, 63, 75, 78, 79, 83, 86, 91, 137, 155, 178, 223, 243, 249, 252, 265, 283, 340, 345, 357, 371, 374, 375, 376, 377, 384, 386, 417, 419, 428, 453, 462, 463, 472, 473, 513, 514, 531, 628, 629, 631, 636, 638, 642, 645, 671, 705, 740, 753, 805, 811, 815, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 833, 834, 835, 836, 837, 838, 839, 840, 841, 843, 844, 846, 847, 848, 850, 851, 852, 853, 854, 859, 862, 863, 869, 874], "input": [4, 5, 6, 7, 8, 9, 12, 15, 17, 27, 28, 30, 35, 36, 44, 45, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 97, 101, 102, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 147, 148, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 167, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 193, 195, 196, 209, 212, 213, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 316, 317, 318, 319, 321, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 363, 366, 368, 371, 372, 373, 374, 375, 376, 377, 380, 381, 382, 384, 386, 387, 388, 389, 390, 391, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 406, 407, 408, 410, 411, 412, 413, 414, 416, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 430, 431, 433, 434, 435, 440, 442, 443, 444, 445, 446, 447, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 461, 462, 463, 466, 467, 468, 469, 471, 473, 474, 475, 476, 477, 478, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 536, 537, 539, 540, 543, 544, 545, 546, 547, 548, 551, 552, 554, 555, 557, 559, 560, 561, 563, 564, 565, 566, 567, 568, 570, 575, 576, 577, 583, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 606, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 720, 723, 724, 725, 726, 728, 729, 730, 734, 735, 736, 737, 738, 739, 740, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 770, 772, 776, 783, 787, 790, 791, 792, 793, 794, 804, 805, 809, 822, 823, 824, 826, 828, 829, 830, 831, 836, 837, 838, 839, 840, 841, 843, 844, 845, 846, 848, 850, 851, 852, 853, 854, 862, 863, 870, 873], "pad": [4, 11, 44, 46, 56, 60, 63, 79, 83, 86, 97, 99, 374, 377, 393, 394, 395, 396, 397, 402, 403, 406, 407, 408, 410, 411, 412, 413, 414, 416, 417, 418, 419, 421, 422, 548, 633, 635, 638, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 700, 713, 777, 791, 811], "longest": 4, "return_tensor": [4, 6, 12, 30, 47, 862, 863], "pt": [4, 6, 12, 30, 862], "max_length": [4, 73], "512": [4, 7, 11, 44, 46, 84, 635, 650, 691, 811], "input_id": 4, "101": [4, 13, 45, 635, 636, 640, 659, 675, 723], "1045": 4, "2106": 4, "1005": 4, "1056": 4, "2428": 4, "2066": 4, "2115": 4, "4309": 4, "1012": 4, "102": [4, 13, 56, 79, 88, 396, 738], "token_type_id": 4, "attention_mask": [4, 60, 83, 635, 662], "pooler": 4, "compar": [4, 8, 9, 10, 12, 30, 43, 47, 49, 56, 57, 67, 68, 69, 73, 79, 80, 91, 92, 333, 350, 371, 386, 529, 533, 536, 633, 635, 644, 645, 646, 660, 748, 749, 750, 751, 752, 755, 761, 772, 811, 824, 830, 832, 841, 843, 846, 851, 865, 867, 869, 875, 876], "no_grad": [4, 44, 862], "bert_output": 4, "pooler_output": 4, "ivy_bert": 4, "bert_base_uncas": 4, "ivy_input": 4, "k": [4, 10, 43, 46, 52, 56, 57, 60, 61, 65, 75, 78, 79, 83, 84, 88, 96, 97, 121, 131, 144, 145, 146, 266, 312, 327, 328, 368, 375, 377, 381, 384, 386, 426, 441, 445, 447, 449, 489, 493, 507, 508, 509, 510, 511, 514, 524, 536, 627, 628, 633, 635, 636, 640, 642, 643, 662, 665, 669, 676, 677, 683, 685, 686, 687, 690, 725, 738, 739, 740, 746, 821, 822, 840, 841, 848, 862, 865, 869], "ivy_output": [4, 47], "logits_clos": 4, "allclos": [4, 5, 6, 8, 9, 10, 12, 15, 17, 30, 47, 49, 56, 79, 371], "detach": [4, 5, 6, 8, 9, 10, 12, 15, 17, 30, 838], "rtol": [4, 6, 15, 17, 56, 61, 79, 84, 333, 350, 371, 636, 679, 682, 770, 772, 815, 833, 841], "005": [4, 11, 56, 79, 333, 350, 371, 452], "atol": [4, 6, 8, 9, 10, 12, 30, 56, 61, 79, 84, 333, 350, 371, 636, 679, 770, 772, 815, 833, 841], "equal": [4, 52, 53, 55, 56, 57, 61, 62, 63, 65, 67, 68, 69, 73, 76, 78, 79, 80, 84, 85, 86, 88, 91, 97, 101, 102, 131, 133, 134, 135, 141, 142, 151, 231, 233, 237, 242, 244, 253, 254, 275, 277, 282, 285, 286, 290, 329, 330, 331, 333, 350, 368, 371, 374, 375, 377, 380, 386, 397, 418, 445, 469, 478, 491, 495, 498, 503, 504, 506, 524, 533, 536, 613, 628, 629, 631, 633, 636, 637, 638, 642, 643, 644, 645, 646, 670, 678, 679, 682, 684, 690, 695, 698, 700, 705, 707, 713, 740, 746, 748, 749, 750, 751, 752, 755, 760, 762, 763, 764, 765, 783, 790, 791, 825, 826, 828, 830, 832, 841, 843, 866], "els": [4, 5, 6, 7, 10, 13, 45, 46, 48, 49, 56, 57, 65, 78, 79, 88, 157, 158, 159, 160, 161, 173, 279, 283, 374, 375, 381, 420, 433, 444, 448, 450, 508, 543, 547, 629, 631, 633, 635, 640, 642, 661, 727, 730, 738, 739, 740, 770, 804, 805, 811, 817, 818, 819, 822, 824, 828, 829, 832, 836, 839, 840, 841, 843, 844, 846, 848, 850, 852, 853, 854, 870], "768": 4, "fn": [4, 47, 49, 56, 73, 76, 79, 105, 165, 166, 198, 199, 202, 377, 460, 534, 549, 550, 600, 629, 630, 633, 640, 723, 724, 725, 727, 728, 729, 770, 772, 797, 800, 806, 807, 809, 829, 832, 839, 840, 848, 862], "finish": [4, 6, 19, 30, 31, 42, 45, 811, 812, 817, 818, 821], "2f": [4, 10], "sec": 4, "89": [4, 13, 42, 55, 65, 76, 78, 79, 88, 102, 167, 234, 629, 636, 646, 688, 739, 740, 764], "43": [4, 13, 42, 44, 46, 56, 79, 88, 102, 233, 374, 375, 386, 395, 427, 522, 631, 642, 643, 739, 740, 747], "procedur": [4, 825, 827, 830, 841], "60": [4, 42, 46, 55, 69, 78, 80, 88, 92, 223, 257, 377, 488, 552, 560, 576, 591, 613, 631, 633, 636, 640, 646, 681, 720, 738, 756, 758, 762, 805, 827], "big": [4, 790, 812, 854, 869], "jnp": [4, 22, 27, 30, 31, 32, 33, 36, 42, 44, 48, 811, 828, 829, 832, 835, 839, 844, 848, 853, 863, 864], "config": [4, 5, 6, 7, 10, 12, 13, 24, 27, 30, 31, 44, 45, 47, 73, 640, 730, 811, 818, 822, 825, 827, 834, 841, 851, 862, 870], "jax_enable_x64": [4, 7, 10, 12, 13, 24, 27, 30, 31, 811], "ref": [4, 7, 10, 12, 80, 84, 258, 272, 275, 281, 288, 631, 638, 709, 818, 839], "initi": [4, 5, 8, 30, 31, 47, 56, 60, 69, 73, 79, 83, 92, 102, 375, 386, 433, 444, 450, 529, 530, 635, 646, 660, 661, 761, 788, 791, 792, 793, 795, 796, 809, 811, 814, 819, 820, 824, 828, 829, 833, 841, 843, 848, 859, 862, 863, 864, 869, 875, 876], "fast": [4, 25, 35, 56, 374, 397, 869], "valu": [4, 13, 42, 43, 45, 46, 52, 53, 55, 56, 57, 58, 60, 61, 63, 64, 65, 66, 67, 68, 69, 72, 73, 75, 76, 78, 79, 80, 81, 83, 84, 86, 87, 88, 89, 90, 91, 92, 99, 101, 102, 104, 117, 121, 122, 124, 125, 131, 134, 135, 136, 137, 140, 146, 151, 168, 172, 178, 211, 212, 219, 220, 221, 222, 224, 226, 227, 228, 235, 239, 240, 242, 244, 245, 246, 250, 251, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 269, 270, 271, 272, 273, 274, 275, 276, 277, 279, 280, 281, 282, 283, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 298, 301, 306, 309, 310, 312, 319, 321, 327, 329, 330, 331, 333, 334, 335, 336, 337, 339, 340, 341, 342, 343, 344, 347, 348, 350, 351, 353, 356, 358, 359, 360, 361, 362, 364, 365, 366, 368, 371, 372, 373, 374, 375, 376, 377, 380, 381, 385, 386, 397, 410, 417, 418, 420, 422, 426, 429, 433, 439, 444, 446, 448, 450, 451, 452, 454, 455, 456, 457, 466, 472, 477, 483, 488, 490, 491, 492, 493, 495, 497, 500, 502, 507, 508, 510, 511, 517, 519, 522, 523, 524, 527, 528, 529, 530, 531, 537, 539, 540, 541, 543, 548, 551, 552, 554, 559, 560, 561, 568, 575, 576, 580, 581, 582, 585, 594, 599, 604, 605, 608, 611, 612, 613, 614, 615, 616, 620, 625, 627, 628, 629, 630, 631, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 661, 662, 665, 669, 672, 673, 677, 678, 679, 682, 683, 684, 685, 686, 687, 690, 693, 698, 699, 700, 704, 705, 713, 714, 715, 719, 721, 722, 723, 724, 725, 730, 734, 735, 736, 737, 738, 739, 740, 741, 743, 744, 746, 747, 748, 749, 750, 751, 752, 754, 755, 756, 757, 759, 760, 761, 762, 763, 764, 765, 770, 772, 775, 776, 777, 778, 780, 782, 787, 790, 791, 792, 793, 794, 795, 809, 815, 818, 819, 822, 825, 826, 828, 829, 830, 831, 832, 833, 835, 836, 839, 840, 843, 845, 846, 848, 850, 854, 862, 869, 870], "emerg": [5, 869], "most": [5, 13, 21, 30, 31, 73, 75, 96, 99, 140, 375, 428, 584, 607, 628, 633, 636, 671, 672, 808, 811, 816, 817, 818, 823, 826, 827, 828, 829, 833, 835, 836, 838, 839, 840, 841, 843, 844, 845, 846, 848, 850, 851, 852, 854, 859, 869, 870, 872, 873, 875, 876], "popular": [5, 6, 811, 822, 869], "deep": [5, 21, 28, 30, 42, 73, 544, 633, 811, 812, 813, 816, 817, 819, 822, 825, 826, 828, 834, 838, 841, 847, 850, 851, 858, 867, 869, 872, 873, 875, 876], "learn": [5, 6, 13, 15, 17, 21, 22, 23, 24, 26, 28, 30, 31, 32, 33, 34, 35, 42, 44, 56, 58, 81, 375, 376, 446, 451, 544, 615, 618, 620, 621, 622, 633, 634, 639, 714, 715, 716, 795, 811, 812, 816, 817, 818, 821, 822, 828, 833, 834, 836, 838, 847, 856, 858, 859, 867, 871, 872, 873, 874, 875, 876], "Its": [5, 56, 376, 451, 869], "python": [5, 6, 11, 15, 21, 33, 38, 42, 44, 45, 46, 48, 49, 56, 65, 79, 88, 125, 206, 218, 246, 281, 374, 381, 420, 507, 508, 509, 510, 511, 613, 628, 630, 631, 633, 642, 737, 738, 739, 740, 742, 800, 804, 805, 809, 816, 818, 819, 822, 825, 826, 827, 832, 833, 840, 842, 843, 848, 850, 851, 854, 856, 857, 858, 859, 862, 866, 869, 870, 871, 875, 876], "superior": 5, "eager": [5, 19, 20, 23, 26, 28, 33, 36, 37, 48, 809, 826, 854, 869], "execut": [5, 10, 12, 21, 22, 23, 25, 26, 27, 28, 30, 31, 33, 35, 38, 45, 47, 49, 122, 124, 600, 627, 630, 633, 818, 819, 825, 826, 827, 828, 829, 830, 832, 836, 837, 839, 843, 846, 848, 850, 853, 854, 856, 862, 865, 869, 870, 871, 872, 873, 875], "mode": [5, 6, 7, 36, 48, 56, 61, 73, 79, 84, 95, 96, 97, 98, 99, 100, 209, 212, 217, 222, 239, 272, 326, 364, 365, 368, 373, 374, 375, 377, 405, 410, 418, 419, 431, 433, 441, 443, 444, 450, 466, 476, 481, 483, 484, 486, 488, 491, 492, 496, 577, 578, 579, 583, 584, 586, 587, 601, 602, 606, 607, 609, 610, 630, 631, 633, 635, 636, 660, 683, 783, 791, 792, 793, 808, 809, 818, 819, 821, 826, 829, 830, 833, 846, 854, 869, 872], "made": [5, 10, 12, 30, 56, 63, 79, 375, 377, 435, 461, 462, 463, 709, 817, 819, 820, 822, 823, 826, 827, 832, 834, 836, 838, 839, 840, 844, 846, 848, 850, 859, 869], "favorit": [5, 811], "among": [5, 73, 826, 827, 843, 846, 860, 869], "research": [5, 30, 31, 44, 811, 858, 863, 869, 876], "increasingli": [5, 830, 862], "span": [5, 819, 867, 875], "industri": [5, 859, 869, 871], "still": [5, 13, 24, 26, 27, 30, 31, 33, 34, 37, 61, 73, 84, 636, 686, 775, 817, 818, 819, 823, 824, 828, 831, 832, 834, 836, 839, 840, 843, 846, 852, 854, 859, 862, 863, 866, 869, 875], "practition": [5, 6, 869, 873, 874, 875], "larg": [5, 45, 55, 56, 78, 79, 222, 239, 246, 272, 273, 377, 386, 491, 521, 631, 636, 684, 813, 818, 819, 825, 827, 833, 851, 862, 869], "codebas": [5, 30, 31, 210, 211, 630, 812, 814, 821, 828, 834, 839, 840, 842, 843, 844, 847, 860], "unabl": [5, 12, 819, 846], "advantag": [5, 28, 30, 31, 811, 818, 819, 828, 839, 840, 855, 863, 869], "rich": 5, "ecosystem": [5, 869], "state": [5, 18, 29, 44, 60, 79, 83, 99, 186, 187, 188, 189, 190, 272, 374, 420, 601, 603, 606, 608, 609, 629, 631, 633, 635, 660, 661, 773, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 811, 815, 818, 825, 828, 829, 831, 832, 833, 834, 835, 840, 843, 847, 848, 849, 851, 859, 863, 875, 876], "art": 5, "sota": [5, 6], "requir": [5, 6, 25, 26, 27, 28, 35, 44, 45, 46, 49, 55, 56, 73, 78, 79, 273, 286, 290, 375, 377, 428, 429, 483, 631, 636, 638, 671, 672, 673, 709, 775, 783, 788, 805, 813, 817, 818, 823, 825, 827, 828, 829, 830, 831, 832, 834, 835, 837, 840, 841, 842, 843, 844, 846, 848, 850, 854, 863, 869, 875], "inaccur": 5, "allow": [5, 13, 28, 30, 31, 42, 56, 69, 79, 92, 136, 277, 375, 386, 447, 524, 528, 571, 628, 631, 633, 645, 646, 754, 761, 775, 776, 777, 778, 792, 793, 805, 809, 811, 817, 819, 820, 823, 824, 827, 828, 832, 834, 836, 837, 838, 839, 840, 841, 843, 846, 848, 850, 854, 856, 859, 862, 863, 864, 867, 869, 873, 874], "dynam": [5, 8, 37, 638, 705, 793, 800, 821, 827, 828, 829, 839, 840, 845, 848, 862, 869, 873], "connect": [5, 11, 44, 791, 811, 813, 818, 825, 842, 852, 853, 859, 867], "layer": [5, 6, 8, 9, 15, 17, 21, 27, 28, 30, 31, 42, 47, 56, 64, 79, 87, 641, 660, 661, 662, 736, 788, 790, 792, 793, 794, 795, 796, 811, 831, 840, 844, 846, 848, 849, 852, 858, 863, 867, 869, 873, 876], "togeth": [5, 56, 73, 79, 333, 350, 371, 375, 429, 796, 811, 820, 823, 826, 828, 839, 840, 843, 844, 846, 852, 853, 854, 859, 867, 869, 870, 875], "For": [5, 10, 11, 12, 13, 21, 23, 30, 31, 33, 36, 38, 52, 56, 61, 67, 79, 84, 125, 138, 219, 220, 221, 222, 224, 225, 226, 227, 228, 235, 236, 237, 239, 240, 242, 244, 245, 246, 253, 254, 255, 260, 261, 262, 263, 264, 267, 272, 274, 275, 277, 281, 282, 283, 284, 285, 286, 289, 290, 292, 329, 330, 331, 334, 335, 337, 358, 368, 371, 375, 377, 441, 443, 463, 483, 486, 628, 631, 636, 638, 644, 646, 684, 686, 690, 698, 709, 748, 749, 750, 751, 759, 761, 762, 764, 776, 788, 811, 817, 818, 819, 821, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 835, 836, 837, 839, 840, 841, 842, 843, 844, 846, 848, 850, 851, 852, 853, 854, 855, 858, 859, 860, 862, 866, 867, 870, 875, 876], "user": [5, 6, 12, 19, 25, 26, 27, 28, 30, 45, 46, 48, 273, 290, 377, 483, 579, 631, 633, 791, 792, 793, 804, 811, 818, 819, 821, 823, 824, 826, 827, 828, 829, 832, 837, 838, 839, 840, 843, 845, 846, 847, 848, 854, 855, 858, 859, 867, 869, 875, 876], "provid": [5, 8, 19, 21, 25, 28, 30, 31, 35, 36, 42, 48, 52, 56, 57, 61, 63, 66, 69, 70, 73, 75, 79, 80, 84, 86, 89, 92, 93, 121, 138, 140, 157, 158, 159, 160, 161, 169, 179, 191, 195, 208, 291, 374, 375, 377, 380, 386, 410, 418, 422, 427, 431, 444, 445, 449, 450, 467, 469, 478, 498, 500, 502, 531, 543, 575, 576, 627, 628, 629, 630, 631, 633, 635, 636, 638, 640, 643, 646, 647, 662, 678, 681, 692, 701, 702, 709, 721, 743, 763, 765, 766, 767, 776, 791, 795, 800, 801, 811, 817, 818, 819, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 834, 835, 836, 838, 839, 840, 841, 843, 844, 846, 850, 852, 854, 858, 862, 863, 864, 867, 868, 869, 870, 871, 872, 873, 876], "seamless": [5, 811], "accur": [5, 244, 262, 631, 636, 684, 837], "wai": [5, 13, 19, 20, 21, 24, 26, 30, 34, 36, 42, 96, 99, 811, 813, 816, 817, 818, 822, 823, 824, 825, 827, 828, 829, 839, 840, 841, 843, 846, 850, 851, 852, 853, 854, 855, 858, 859, 864, 871, 875, 876], "introduc": [5, 30, 31, 246, 631, 638, 644, 706, 748, 817, 826, 827, 828, 837, 841, 843, 846, 851, 858], "pipelin": [5, 6, 811, 813, 821, 822, 823, 841, 844, 853, 856, 858, 863, 869, 870, 875], "blog": [5, 6, 819], "through": [5, 6, 31, 36, 44, 56, 79, 99, 227, 386, 527, 528, 631, 640, 720, 726, 793, 804, 811, 812, 815, 816, 817, 819, 820, 821, 824, 825, 826, 827, 829, 830, 832, 833, 834, 836, 837, 839, 840, 841, 843, 845, 846, 847, 848, 851, 852, 853, 862, 867, 869, 870, 871], "train": [5, 6, 15, 17, 28, 30, 31, 47, 56, 58, 60, 79, 81, 83, 99, 374, 375, 380, 398, 399, 400, 447, 500, 502, 614, 615, 620, 634, 635, 658, 660, 662, 665, 790, 791, 792, 793, 794, 811, 826, 829, 836, 851, 852, 853, 854, 860, 863, 867, 868, 873, 875, 876], "illustr": [5, 23, 33, 824, 848], "typic": [5, 56, 79, 333, 350, 371, 386, 521, 645, 754, 791, 822, 836, 868, 876], "workflow": [5, 24, 34, 45, 817, 819, 820, 824, 828, 838, 840, 851, 856, 860, 868, 875, 876], "pre": [5, 30, 31, 815, 817, 842, 843, 853, 854, 855, 869], "belong": [5, 73, 817, 822, 852], "convolut": [5, 28, 56, 60, 79, 83, 374, 395, 413, 635, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 777, 791, 809, 863, 867, 869], "neural": [5, 635, 787, 791, 811, 863, 865, 867, 868, 869, 873, 875, 876], "network": [5, 21, 28, 30, 31, 42, 44, 49, 635, 659, 787, 790, 791, 811, 826, 836, 848, 852, 859, 863, 865, 867, 868, 869, 873, 875, 876], "cnn": [5, 30, 31, 869], "architectur": [5, 47, 811, 818, 853, 854, 867, 868, 869, 872, 873, 874], "inspir": [5, 823], "vision": [5, 6, 30, 31, 49, 865, 875], "high": [5, 21, 30, 31, 49, 56, 60, 65, 79, 83, 88, 374, 417, 421, 584, 633, 635, 642, 648, 649, 650, 651, 653, 655, 657, 738, 740, 777, 814, 817, 832, 838, 840, 851, 856, 860, 865, 866, 867, 868, 869, 873, 875, 876], "perform": [5, 7, 9, 13, 23, 25, 26, 27, 28, 30, 31, 33, 35, 42, 44, 52, 56, 60, 61, 69, 70, 75, 79, 80, 83, 84, 92, 93, 112, 116, 136, 137, 209, 217, 239, 272, 293, 340, 362, 371, 372, 374, 375, 377, 384, 386, 397, 398, 399, 400, 402, 403, 407, 408, 416, 418, 444, 460, 514, 522, 523, 544, 545, 546, 559, 560, 561, 577, 587, 625, 628, 630, 631, 633, 635, 636, 639, 640, 646, 647, 658, 661, 677, 686, 688, 693, 714, 715, 716, 724, 725, 756, 757, 766, 767, 770, 787, 791, 805, 809, 822, 823, 824, 826, 828, 829, 830, 835, 836, 837, 839, 840, 841, 843, 844, 846, 848, 851, 854, 860, 862, 863, 866, 869, 870, 871, 872, 873, 874, 876], "comput": [5, 27, 28, 30, 31, 37, 38, 43, 44, 46, 50, 55, 56, 57, 58, 60, 61, 62, 67, 69, 72, 73, 78, 79, 80, 81, 83, 84, 85, 92, 96, 97, 99, 112, 116, 212, 222, 229, 232, 234, 239, 240, 241, 246, 247, 248, 250, 251, 257, 258, 259, 266, 267, 268, 269, 271, 272, 275, 280, 281, 299, 303, 307, 313, 316, 317, 329, 330, 331, 334, 335, 337, 341, 343, 346, 348, 349, 353, 355, 360, 361, 362, 363, 364, 365, 366, 368, 371, 372, 373, 374, 375, 376, 377, 380, 384, 386, 393, 394, 395, 396, 397, 402, 403, 406, 407, 408, 410, 411, 412, 413, 414, 417, 418, 419, 422, 423, 425, 427, 428, 429, 430, 432, 433, 435, 437, 440, 442, 444, 447, 448, 450, 452, 453, 454, 455, 456, 457, 458, 477, 480, 493, 500, 502, 513, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 538, 539, 540, 584, 607, 614, 616, 617, 619, 623, 624, 630, 631, 633, 634, 635, 636, 637, 638, 640, 644, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 666, 667, 671, 672, 673, 676, 677, 679, 681, 683, 685, 686, 688, 690, 692, 693, 695, 696, 697, 701, 723, 748, 749, 750, 751, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 772, 777, 791, 794, 805, 811, 818, 826, 827, 828, 836, 838, 840, 843, 845, 846, 848, 851, 854, 856, 859, 860, 862, 863, 865, 867, 869, 870, 872, 873, 875], "strength": 5, "both": [5, 8, 10, 11, 12, 13, 15, 17, 25, 27, 30, 31, 35, 36, 43, 45, 52, 55, 56, 57, 60, 61, 75, 78, 79, 80, 83, 84, 125, 126, 127, 129, 130, 131, 132, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 147, 148, 154, 170, 174, 177, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 239, 240, 242, 244, 245, 246, 250, 251, 252, 253, 254, 255, 259, 261, 262, 263, 264, 266, 267, 268, 269, 272, 274, 275, 276, 277, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 312, 328, 334, 335, 337, 338, 340, 345, 350, 368, 371, 374, 375, 377, 381, 386, 393, 394, 395, 396, 398, 399, 400, 406, 411, 412, 413, 418, 420, 429, 477, 483, 491, 494, 495, 507, 521, 524, 551, 555, 557, 559, 568, 590, 599, 623, 624, 628, 629, 631, 633, 634, 635, 636, 638, 641, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 657, 658, 659, 661, 662, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 690, 692, 693, 694, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 736, 743, 744, 746, 747, 748, 749, 750, 751, 752, 755, 759, 760, 761, 762, 763, 764, 765, 766, 767, 770, 791, 811, 815, 817, 819, 824, 826, 827, 828, 829, 830, 831, 832, 833, 835, 836, 839, 840, 843, 846, 848, 850, 851, 852, 853, 854, 862, 863, 869, 872, 874, 875, 876], "wise": [5, 30, 50, 55, 56, 61, 72, 78, 79, 84, 101, 102, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 219, 220, 222, 223, 224, 226, 227, 229, 230, 231, 232, 233, 234, 238, 239, 240, 241, 243, 246, 247, 248, 249, 250, 251, 257, 258, 259, 264, 265, 266, 267, 268, 269, 270, 271, 272, 275, 277, 278, 280, 281, 288, 293, 294, 295, 296, 297, 298, 300, 302, 304, 305, 306, 308, 309, 310, 333, 336, 341, 344, 345, 346, 349, 350, 351, 352, 356, 357, 360, 361, 366, 371, 374, 375, 377, 398, 399, 400, 427, 434, 470, 477, 479, 480, 499, 625, 631, 638, 667, 698, 795, 846], "supervis": [5, 6, 56, 376, 451], "excel": [5, 876], "variou": [5, 13, 24, 34, 36, 42, 811, 814, 817, 818, 819, 822, 827, 828, 831, 832, 835, 837, 838, 840, 841, 842, 843, 855, 865, 867, 868, 869, 872, 875], "convent": [5, 286, 631, 636, 646, 676, 758, 819, 824, 835, 844, 858, 875], "demonstr": [5, 6, 13, 27, 30, 31, 45, 811, 820, 828, 830, 832, 850], "improv": [5, 10, 12, 13, 30, 33, 814, 819, 828, 835, 836, 846, 848, 856, 860, 862, 867, 869, 871, 872], "accuraci": [5, 13, 44, 46, 49, 374, 418, 828], "scalabl": [5, 848, 858, 874, 875], "sometim": [5, 817, 818, 819, 822, 828, 836, 840, 843, 846], "rival": 5, "even": [5, 10, 27, 30, 31, 56, 79, 96, 239, 272, 277, 282, 377, 386, 483, 521, 631, 818, 819, 820, 822, 824, 827, 828, 829, 831, 835, 836, 839, 840, 841, 846, 850, 851, 852, 853, 854, 859, 860, 875], "block": [5, 10, 30, 31, 34, 35, 36, 37, 375, 435, 811, 819, 826, 828, 832, 836, 843, 847, 849, 853, 854, 856, 863, 874, 876], "term": [5, 56, 79, 311, 318, 321, 368, 376, 455, 456, 635, 660, 661, 791, 805, 811, 819, 826, 848, 856, 858, 869], "specif": [5, 6, 21, 22, 27, 28, 30, 31, 32, 34, 36, 44, 54, 56, 57, 77, 79, 80, 179, 210, 213, 246, 267, 268, 277, 321, 334, 335, 368, 371, 377, 381, 491, 511, 544, 545, 546, 572, 629, 630, 631, 633, 636, 638, 639, 642, 645, 646, 672, 673, 688, 709, 714, 715, 716, 737, 754, 759, 760, 761, 763, 770, 772, 792, 793, 800, 801, 807, 809, 811, 814, 815, 817, 818, 819, 822, 823, 824, 825, 826, 828, 829, 832, 834, 835, 836, 839, 840, 841, 842, 843, 844, 846, 848, 849, 850, 852, 853, 854, 855, 856, 858, 862, 863, 864, 865, 867, 868, 870, 871, 872, 876], "group": [5, 56, 79, 377, 380, 497, 501, 635, 640, 648, 655, 656, 719, 809, 820, 822, 826, 828, 836, 840, 841, 865, 868, 874], "activ": [5, 15, 28, 30, 31, 56, 57, 60, 71, 79, 83, 94, 109, 110, 111, 112, 113, 114, 115, 116, 117, 294, 295, 296, 298, 302, 303, 304, 305, 306, 307, 308, 309, 310, 594, 635, 662, 665, 790, 791, 809, 811, 818, 819, 828, 834, 844, 845, 852, 863, 869, 872], "downsampl": [5, 11, 56, 79, 410], "detial": 5, "outsid": [5, 638, 698, 709, 828, 829, 836, 850, 874], "scope": [5, 824, 870, 874], "demo": [5, 6, 7, 10, 11, 12, 13, 31, 38, 42, 46, 811], "interest": [5, 6, 28, 30, 42, 239, 272, 631, 817, 819], "reader": [5, 6], "might": [5, 6, 11, 36, 57, 97, 178, 543, 629, 633, 815, 817, 818, 819, 827, 828, 830, 833, 834, 837, 840, 843, 844, 846, 848, 850, 851, 856], "paper": [5, 635, 662, 811, 860], "necessari": [5, 6, 36, 52, 56, 75, 79, 86, 127, 239, 272, 376, 377, 451, 461, 462, 463, 469, 471, 472, 473, 474, 475, 482, 498, 584, 607, 631, 633, 701, 702, 703, 705, 707, 708, 710, 712, 811, 817, 818, 823, 824, 826, 828, 830, 839, 840, 843, 845, 846, 862, 863], "mostli": [5, 829, 839, 843], "kera": [5, 8, 9, 14, 15, 17, 19, 20, 28, 30, 31, 47, 48, 788, 811, 860, 863, 875], "wrapper": [5, 19, 20, 23, 56, 79, 297, 783, 823, 825, 826, 828, 832, 836, 839, 840, 843, 850, 856, 865, 869], "prepar": [5, 31, 44, 46, 49, 811, 827], "data": [5, 6, 17, 25, 26, 27, 28, 31, 36, 44, 46, 49, 50, 52, 55, 56, 57, 60, 61, 63, 65, 66, 67, 68, 69, 70, 72, 73, 75, 78, 79, 80, 83, 84, 86, 88, 89, 90, 91, 92, 93, 101, 102, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 147, 148, 149, 150, 151, 153, 154, 156, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 180, 181, 182, 183, 185, 191, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 242, 244, 245, 246, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 272, 274, 275, 276, 277, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 299, 300, 301, 302, 311, 312, 313, 314, 315, 316, 317, 328, 329, 330, 331, 332, 334, 335, 336, 353, 358, 366, 368, 371, 374, 375, 377, 381, 385, 386, 389, 398, 399, 400, 416, 418, 420, 426, 428, 448, 466, 488, 491, 492, 494, 495, 507, 508, 509, 510, 511, 517, 521, 522, 523, 527, 530, 531, 548, 561, 563, 564, 567, 594, 625, 628, 630, 631, 633, 635, 636, 638, 640, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 658, 659, 660, 666, 667, 668, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 690, 692, 693, 699, 702, 703, 705, 706, 708, 709, 713, 721, 738, 739, 740, 742, 743, 744, 746, 747, 752, 754, 756, 757, 759, 760, 761, 762, 763, 764, 765, 766, 767, 770, 772, 773, 775, 776, 777, 778, 783, 787, 790, 791, 792, 793, 797, 805, 809, 811, 818, 821, 822, 823, 824, 825, 826, 829, 831, 835, 836, 837, 839, 841, 844, 846, 848, 850, 856, 857, 859, 869, 870, 871, 873, 874, 875], "request": [5, 6, 10, 11, 12, 25, 26, 27, 28, 30, 31, 44, 47, 56, 203, 381, 511, 630, 809, 811, 812, 814, 817, 830, 834, 844, 846, 860, 863], "tqdm": [5, 6, 13, 25, 26, 27, 28, 44, 46, 811], "experiment": [5, 9, 809, 815, 819, 828, 840, 844, 848, 869], "set_memory_growth": 5, "list_physical_devic": 5, "torch": [5, 6, 8, 9, 10, 12, 13, 14, 15, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 42, 44, 47, 48, 49, 52, 57, 61, 71, 80, 84, 128, 166, 193, 194, 198, 208, 210, 215, 282, 334, 335, 371, 377, 495, 537, 561, 594, 628, 629, 630, 631, 633, 636, 639, 686, 715, 716, 772, 783, 788, 800, 809, 811, 815, 818, 819, 822, 823, 824, 825, 827, 828, 829, 832, 833, 835, 836, 837, 838, 839, 840, 841, 843, 844, 846, 848, 850, 851, 853, 854, 856, 862, 863, 864, 875], "manual_se": [5, 6, 28], "random": [5, 8, 10, 12, 15, 17, 22, 23, 24, 25, 26, 28, 30, 31, 32, 33, 35, 36, 37, 44, 46, 47, 56, 60, 73, 79, 83, 322, 323, 324, 325, 326, 368, 375, 376, 433, 444, 450, 456, 507, 508, 509, 510, 511, 635, 658, 737, 738, 739, 740, 741, 742, 775, 777, 790, 804, 805, 811, 817, 829, 841, 843, 844, 853, 863, 864, 869], "set_se": 5, "2024": 5, "03": [5, 13, 26, 45, 52, 55, 57, 58, 78, 79, 81, 88, 137, 237, 262, 342, 343, 591, 592, 615, 620, 628, 631, 633, 634, 636, 675, 739], "17": [5, 7, 8, 9, 12, 13, 25, 26, 27, 28, 42, 44, 46, 49, 50, 56, 61, 72, 78, 79, 80, 81, 83, 84, 88, 102, 111, 112, 137, 222, 239, 264, 272, 303, 311, 362, 368, 374, 377, 393, 394, 402, 403, 406, 407, 411, 412, 417, 421, 473, 545, 560, 614, 616, 625, 628, 631, 633, 634, 635, 636, 640, 642, 649, 658, 659, 670, 674, 725, 738, 739, 740, 742, 826], "51": [5, 13, 42, 46, 55, 56, 78, 79, 80, 88, 234, 272, 285, 375, 396, 450, 631, 740, 775], "38": [5, 12, 13, 26, 42, 44, 46, 49, 53, 56, 78, 79, 88, 164, 289, 356, 371, 374, 386, 394, 413, 416, 417, 522, 629, 631, 636, 678, 775, 830], "926817": 5, "e": [5, 12, 30, 47, 48, 52, 56, 61, 65, 67, 68, 69, 71, 78, 79, 84, 88, 91, 92, 94, 96, 97, 101, 128, 137, 138, 141, 142, 146, 150, 179, 192, 219, 220, 221, 225, 227, 228, 231, 233, 235, 239, 240, 242, 245, 246, 252, 253, 260, 261, 262, 263, 270, 271, 272, 273, 275, 279, 281, 282, 285, 286, 290, 300, 327, 334, 335, 368, 371, 374, 375, 376, 377, 381, 386, 387, 393, 394, 397, 411, 412, 413, 414, 418, 431, 434, 442, 456, 491, 495, 507, 508, 509, 510, 511, 522, 523, 532, 626, 628, 629, 630, 631, 635, 636, 638, 640, 642, 644, 645, 646, 662, 667, 672, 673, 676, 677, 679, 682, 685, 686, 687, 690, 693, 701, 709, 720, 724, 725, 726, 729, 734, 735, 738, 739, 740, 748, 749, 750, 751, 752, 755, 756, 757, 759, 760, 761, 762, 763, 764, 765, 791, 804, 805, 809, 811, 812, 815, 817, 818, 819, 821, 822, 824, 826, 828, 832, 833, 838, 840, 843, 848, 851, 854, 855, 856, 859, 860, 862, 865, 877], "extern": [5, 826, 835, 840, 843, 844], "local_xla": 5, "xla": [5, 12, 840, 854, 856, 869], "stream_executor": [5, 12], "cuda_dnn": [5, 12], "cc": [5, 12, 25, 26, 28, 45, 833], "9261": 5, "regist": [5, 12, 793, 819, 855, 862], "cudnn": [5, 12], "factori": [5, 12, 56, 376, 455, 456, 805], "attempt": [5, 6, 8, 9, 12, 22, 25, 26, 27, 28, 44, 46, 49, 818, 845, 854], "plugin": [5, 12, 818], "when": [5, 6, 7, 8, 9, 11, 12, 13, 21, 22, 23, 25, 26, 27, 28, 30, 31, 33, 35, 36, 37, 45, 47, 51, 52, 53, 55, 56, 61, 62, 65, 66, 69, 73, 75, 76, 78, 79, 84, 85, 88, 89, 92, 102, 140, 151, 222, 239, 244, 246, 262, 272, 290, 291, 299, 334, 335, 366, 371, 374, 375, 376, 380, 381, 386, 397, 410, 422, 429, 433, 444, 450, 451, 456, 500, 502, 508, 528, 531, 561, 577, 585, 592, 628, 629, 631, 633, 635, 636, 637, 638, 640, 642, 643, 646, 648, 660, 662, 679, 684, 695, 696, 697, 705, 728, 729, 738, 739, 740, 743, 744, 746, 747, 759, 761, 763, 765, 775, 778, 790, 791, 792, 793, 794, 800, 809, 811, 812, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 843, 844, 845, 846, 848, 850, 851, 853, 854, 855, 858, 859, 862, 863, 867, 869, 872, 873, 874, 875], "been": [5, 6, 12, 15, 17, 25, 27, 30, 31, 56, 57, 65, 79, 80, 88, 195, 282, 377, 490, 544, 545, 546, 630, 631, 633, 642, 737, 804, 805, 817, 819, 822, 824, 826, 827, 828, 829, 831, 832, 835, 836, 839, 843, 848, 850, 854, 855, 862, 869, 876], "926873": 5, "cuda_fft": [5, 12], "607": 5, "cufft": [5, 12], "928224": 5, "cuda_bla": [5, 12], "1515": 5, "cubla": [5, 12], "936743": 5, "core": [5, 25, 26, 28, 44, 45, 46, 48, 49, 56, 79, 96, 99, 203, 375, 433, 444, 449, 450, 630, 818, 829, 833, 843, 853, 858, 867, 868, 869, 870, 874, 876], "cpu_feature_guard": [5, 25, 26, 28], "182": [5, 25, 26, 28, 79], "binari": [5, 13, 25, 26, 28, 56, 57, 60, 62, 79, 83, 85, 229, 232, 234, 269, 289, 374, 376, 420, 455, 458, 631, 635, 637, 658, 662, 695], "optim": [5, 6, 10, 12, 13, 21, 25, 26, 28, 30, 31, 44, 46, 47, 49, 56, 58, 79, 81, 311, 368, 376, 455, 456, 535, 622, 633, 634, 639, 714, 715, 716, 790, 805, 811, 828, 839, 846, 849, 851, 853, 860, 863, 867, 868, 869, 870, 871, 872, 873, 876], "cpu": [5, 6, 7, 8, 9, 10, 12, 25, 26, 27, 28, 30, 44, 45, 46, 48, 49, 52, 54, 56, 65, 75, 77, 79, 88, 125, 131, 134, 136, 137, 140, 141, 142, 148, 192, 193, 195, 196, 197, 198, 203, 206, 208, 210, 213, 214, 216, 218, 375, 381, 437, 507, 508, 510, 511, 628, 630, 642, 737, 738, 739, 740, 772, 790, 791, 792, 793, 794, 795, 796, 809, 811, 815, 818, 819, 825, 828, 829, 833, 840, 843, 854, 867, 869, 872, 874], "instruct": [5, 25, 26, 28, 73, 102, 811, 817, 818, 822, 832, 834, 841, 843, 855, 867, 870, 873, 875], "critic": [5, 25, 26, 28, 30, 31, 809, 869, 875], "oper": [5, 21, 22, 25, 26, 27, 28, 30, 31, 32, 36, 43, 46, 52, 53, 55, 56, 57, 60, 61, 73, 75, 76, 78, 79, 80, 83, 84, 102, 117, 136, 137, 179, 209, 217, 222, 224, 233, 236, 239, 246, 261, 263, 272, 273, 277, 281, 284, 289, 301, 309, 329, 330, 331, 363, 366, 368, 373, 374, 376, 377, 388, 389, 390, 391, 393, 394, 395, 401, 402, 403, 407, 411, 412, 413, 414, 416, 417, 419, 421, 422, 451, 488, 490, 537, 544, 545, 546, 594, 625, 628, 629, 630, 631, 633, 635, 636, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 662, 677, 688, 690, 762, 764, 775, 778, 791, 805, 809, 811, 817, 818, 821, 822, 823, 826, 828, 829, 830, 831, 832, 836, 839, 840, 843, 846, 848, 851, 852, 856, 858, 862, 865, 866, 867, 868, 869, 870, 872, 873, 874, 875, 876], "avx2": [5, 25, 26, 28], "fma": [5, 25, 26, 28], "rebuild": [5, 25, 26, 28, 73, 102], "appropri": [5, 10, 21, 25, 26, 28, 30, 31, 57, 66, 71, 89, 94, 222, 239, 246, 272, 333, 350, 371, 631, 643, 743, 811, 817, 818, 819, 832, 837, 843], "compil": [5, 8, 9, 10, 11, 12, 13, 25, 26, 28, 30, 31, 34, 47, 49, 290, 631, 783, 818, 840, 844, 848, 854, 856, 863, 865, 868, 869, 870, 873, 876], "flag": [5, 25, 26, 28, 73, 195, 376, 386, 453, 521, 630, 635, 662, 772, 783, 794, 819, 828, 829, 839, 840, 841, 843, 862, 863], "40": [5, 8, 13, 42, 44, 46, 56, 57, 78, 79, 80, 88, 92, 102, 233, 237, 257, 286, 348, 371, 374, 377, 394, 396, 406, 412, 488, 544, 546, 551, 552, 576, 591, 613, 616, 631, 633, 634, 636, 640, 646, 675, 681, 726, 739, 758, 762, 811, 827], "071672": 5, "w": [5, 7, 12, 45, 46, 56, 57, 58, 60, 73, 78, 79, 80, 81, 83, 96, 266, 348, 363, 371, 373, 374, 375, 380, 393, 394, 395, 397, 411, 412, 413, 414, 430, 450, 505, 520, 544, 546, 591, 614, 615, 616, 618, 620, 621, 622, 633, 634, 635, 640, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 723, 821, 838, 848, 851, 852, 863, 877], "tf2tensorrt": [5, 12], "util": [5, 6, 7, 8, 9, 12, 22, 25, 26, 27, 28, 44, 47, 56, 79, 197, 375, 446, 630, 797, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 818, 825, 829, 832, 833, 836, 839, 843, 844, 848, 863, 867, 875, 876], "py_util": [5, 12], "trt": [5, 12], "could": [5, 12, 30, 31, 36, 67, 644, 748, 749, 750, 751, 817, 818, 819, 822, 827, 828, 830, 837, 839, 840, 841, 843, 848, 850, 851, 852, 859, 860, 869, 874, 875], "find": [5, 12, 19, 45, 46, 49, 61, 67, 73, 84, 636, 640, 644, 679, 719, 748, 749, 750, 751, 804, 805, 811, 812, 813, 814, 816, 817, 818, 819, 822, 825, 827, 833, 838, 843, 846, 848, 851, 855, 856, 858, 862], "tensorrt": [5, 12], "map": [5, 56, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 95, 102, 109, 110, 111, 112, 113, 114, 115, 116, 117, 133, 135, 140, 142, 148, 152, 154, 167, 171, 172, 179, 213, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 250, 251, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 302, 303, 304, 305, 306, 308, 309, 310, 312, 333, 334, 335, 336, 337, 339, 341, 349, 350, 356, 358, 360, 361, 362, 371, 374, 398, 399, 400, 418, 451, 452, 453, 454, 455, 456, 457, 458, 461, 462, 463, 467, 468, 489, 491, 492, 493, 495, 500, 502, 503, 504, 506, 508, 521, 522, 523, 524, 533, 536, 537, 539, 540, 544, 545, 546, 547, 548, 551, 552, 555, 557, 559, 560, 561, 563, 564, 567, 575, 576, 590, 591, 592, 594, 596, 598, 599, 612, 613, 618, 623, 633, 640, 649, 650, 651, 652, 658, 659, 665, 666, 667, 672, 673, 674, 675, 676, 677, 679, 681, 683, 684, 690, 695, 696, 697, 698, 702, 705, 706, 707, 708, 709, 712, 713, 724, 725, 729, 730, 737, 738, 739, 740, 742, 745, 748, 749, 750, 751, 752, 756, 757, 760, 762, 763, 765, 766, 767, 805, 823, 826, 828, 835, 836, 840, 843, 844, 851, 854, 856, 863, 870], "label": [5, 6, 13, 44, 45, 46, 56, 62, 79, 85, 376, 451, 452, 454, 455, 456, 457, 458, 637, 695, 696, 697, 811, 817, 822, 840, 847, 848, 849, 853, 855, 869], "dataset": [5, 6, 13, 30, 73, 811, 851, 862, 863], "gist": 5, "yrevar": 5, "942d3a0ac09ec9e5eb3a": 5, "238f720ff059c1f82f368259d1ca4ffa5dd8f9f5": 5, "imagenet1000_clsidx_to_label": 5, "idx2label": 5, "read": [5, 44, 46, 56, 63, 73, 75, 79, 86, 133, 377, 473, 628, 638, 705, 817, 818, 825, 827, 833, 843, 845, 846, 869], "44": [5, 6, 8, 9, 42, 46, 55, 56, 65, 78, 79, 88, 225, 272, 282, 286, 287, 338, 371, 374, 395, 396, 631, 635, 636, 640, 643, 646, 658, 681, 725, 738, 739, 747, 758], "resolv": [5, 11, 44, 46, 56, 69, 246, 386, 522, 523, 631, 638, 646, 701, 756, 757, 762, 764, 819, 825, 828, 834, 848], "185": [5, 11, 44, 72], "199": [5, 11, 44, 225, 631], "108": [5, 11, 13, 25, 26, 27, 28, 44, 635, 646, 659, 758], "133": [5, 11, 44, 60, 659], "109": [5, 11, 44, 61, 636, 674], "111": [5, 11, 44, 640, 735], "443": [5, 11, 44, 284, 631], "sent": [5, 11, 44], "await": [5, 11, 44], "respons": [5, 11, 44, 380, 505, 819, 827, 828], "200": [5, 11, 13, 44, 80, 83, 233, 374, 398, 399, 552, 576, 631, 633, 804, 851], "ok": [5, 11, 44, 818], "length": [5, 11, 44, 45, 52, 56, 62, 63, 73, 79, 85, 86, 96, 97, 102, 125, 133, 138, 313, 316, 317, 332, 340, 368, 371, 374, 375, 377, 381, 384, 396, 397, 402, 403, 406, 407, 408, 418, 419, 420, 422, 434, 443, 483, 492, 509, 514, 613, 628, 633, 635, 636, 637, 638, 644, 662, 686, 687, 695, 705, 748, 775, 791, 843, 851], "30564": 5, "30k": 5, "plain": [5, 11, 44], "imagenet1000_clsidx": 5, "100": [5, 6, 8, 10, 11, 12, 13, 42, 44, 46, 52, 55, 56, 75, 78, 79, 80, 83, 100, 137, 146, 233, 273, 286, 327, 350, 359, 368, 371, 374, 375, 377, 398, 399, 444, 450, 488, 552, 560, 576, 628, 631, 633, 636, 640, 675, 723, 811, 827, 828, 843, 851, 852, 853, 854, 859, 860, 862], "29": [5, 13, 42, 44, 46, 49, 61, 78, 80, 81, 83, 88, 227, 386, 417, 522, 544, 545, 616, 620, 631, 633, 634, 636, 674, 738, 739, 740], "85k": 5, "kb": [5, 6, 8, 9, 11, 44, 46, 49], "003": 5, "mb": [5, 6, 8, 9, 11, 44, 46, 49, 827], "is_avail": [5, 13], "url": [5, 6, 10, 12, 27, 30, 31, 44, 47, 811, 863], "cocodataset": [5, 6, 10, 12, 27, 30, 31, 47, 811, 863], "org": [5, 6, 10, 11, 12, 27, 30, 31, 44, 46, 47, 49, 55, 56, 78, 79, 81, 146, 154, 242, 252, 253, 268, 327, 334, 335, 368, 371, 374, 377, 386, 418, 491, 521, 614, 615, 628, 629, 631, 634, 636, 638, 646, 684, 685, 713, 763, 811, 831, 863], "val2017": [5, 6, 10, 12, 30, 47], "000000039769": [5, 6, 10, 12, 30, 47], "stream": [5, 6, 10, 12, 27, 30, 31, 44, 47, 54, 77, 213, 630, 811, 863, 873], "initialis": [5, 822, 840, 843], "api": [5, 6, 18, 23, 28, 29, 33, 46, 48, 55, 56, 61, 78, 79, 125, 126, 127, 129, 130, 131, 132, 134, 135, 136, 138, 141, 142, 143, 144, 145, 147, 148, 154, 164, 167, 177, 179, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 239, 240, 242, 244, 245, 246, 250, 251, 252, 253, 254, 255, 259, 261, 262, 263, 264, 266, 267, 268, 269, 272, 274, 275, 276, 277, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 334, 335, 337, 371, 374, 377, 386, 418, 491, 495, 521, 628, 629, 631, 636, 638, 643, 644, 645, 646, 647, 666, 667, 668, 669, 670, 672, 673, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 692, 693, 699, 701, 702, 703, 705, 706, 708, 709, 713, 743, 744, 746, 747, 748, 749, 750, 751, 752, 755, 759, 760, 761, 762, 763, 764, 765, 766, 767, 811, 815, 818, 819, 821, 823, 825, 828, 829, 830, 831, 832, 833, 835, 837, 839, 840, 841, 843, 846, 847, 849, 851, 854, 856, 857, 858, 865, 867, 869, 871, 874, 876], "convnextxlarg": 5, "while": [5, 6, 13, 30, 31, 38, 56, 60, 73, 79, 83, 96, 97, 102, 124, 140, 178, 246, 247, 267, 268, 346, 371, 374, 375, 377, 419, 420, 442, 485, 486, 520, 627, 628, 629, 631, 635, 644, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 748, 760, 763, 773, 815, 817, 818, 819, 823, 824, 825, 827, 828, 829, 830, 833, 834, 835, 836, 838, 839, 840, 841, 842, 843, 844, 846, 850, 852, 853, 854, 855, 858, 859, 862, 869, 875, 876], "would": [5, 6, 7, 8, 9, 12, 13, 22, 24, 25, 26, 27, 28, 30, 31, 34, 36, 38, 46, 52, 54, 56, 75, 77, 79, 86, 112, 116, 127, 213, 374, 377, 402, 407, 461, 462, 469, 471, 473, 474, 475, 482, 486, 498, 625, 630, 701, 702, 703, 705, 707, 708, 710, 712, 777, 787, 791, 811, 812, 815, 817, 818, 819, 820, 821, 822, 823, 824, 826, 827, 828, 830, 831, 833, 835, 837, 839, 840, 841, 843, 844, 846, 847, 848, 850, 852, 853, 854, 855, 859, 862, 869, 875], "arbitrari": [5, 23, 33, 52, 53, 56, 73, 76, 79, 138, 152, 179, 321, 376, 453, 461, 462, 463, 616, 628, 629, 634, 835, 836, 838, 839, 840, 843, 852, 854, 862, 864, 870, 875], "regardless": [5, 30, 31, 42, 73, 812, 828, 832, 850, 853, 860], "being": [5, 6, 8, 30, 31, 42, 56, 73, 79, 94, 101, 105, 125, 375, 377, 439, 467, 483, 585, 628, 633, 635, 636, 660, 673, 772, 778, 790, 811, 818, 819, 822, 823, 824, 826, 828, 829, 830, 833, 835, 837, 839, 840, 841, 843, 844, 846, 848, 851, 854, 859, 860, 865, 867, 868, 869, 870, 875, 876], "host": [5, 809, 813, 827, 854, 859, 874], "local": [5, 6, 7, 8, 9, 10, 12, 13, 15, 17, 19, 21, 22, 23, 24, 25, 26, 27, 28, 31, 35, 36, 37, 44, 45, 46, 49, 380, 505, 556, 633, 812, 818, 822, 825, 833, 836, 841, 843], "applic": [5, 17, 19, 44, 46, 49, 56, 60, 79, 83, 99, 375, 450, 635, 636, 640, 646, 662, 665, 690, 723, 724, 725, 729, 730, 762, 764, 811, 818, 827, 828, 829, 837, 852, 866, 867, 869, 871, 873, 875], "model_nam": [5, 46], "convnext_xlarg": 5, "include_top": [5, 17, 811], "include_preprocess": 5, "input_tensor": [5, 56, 79, 375, 376, 447, 451, 456, 840], "input_shap": [5, 10, 17, 28, 30, 31, 811], "pool": [5, 56, 79, 83, 374, 388, 389, 390, 391, 393, 394, 395, 411, 412, 413, 414, 417, 791, 818], "classifier_activ": 5, "46": [5, 42, 44, 46, 56, 65, 79, 83, 88, 137, 262, 283, 313, 368, 374, 394, 412, 413, 628, 631, 640, 718, 738, 739], "936026": 5, "common_runtim": [5, 45], "gpu_devic": 5, "1929": 5, "creat": [5, 6, 7, 8, 9, 12, 21, 22, 23, 25, 26, 27, 28, 30, 31, 32, 33, 35, 36, 37, 44, 45, 46, 48, 49, 52, 55, 56, 65, 73, 75, 78, 79, 84, 88, 97, 125, 126, 127, 129, 130, 131, 134, 135, 136, 137, 139, 140, 141, 142, 146, 147, 148, 273, 311, 312, 322, 324, 326, 327, 368, 374, 375, 377, 381, 393, 394, 395, 416, 433, 444, 450, 459, 467, 483, 488, 507, 508, 509, 510, 511, 579, 596, 613, 624, 628, 631, 633, 634, 642, 681, 737, 738, 739, 740, 742, 772, 783, 788, 790, 791, 792, 793, 794, 795, 796, 812, 814, 818, 819, 820, 823, 824, 825, 827, 828, 829, 832, 836, 837, 839, 840, 841, 843, 846, 848, 849, 852, 855, 856, 859, 862, 863, 864, 869, 870, 875], "job": [5, 30, 31, 811, 825, 827, 863], "localhost": 5, "replica": 5, "14791": 5, "tesla": 5, "v100": [5, 10], "pcie": [5, 859], "16gb": 5, "pci": 5, "bu": [5, 84, 859], "id": [5, 13, 45, 56, 79, 195, 329, 330, 331, 368, 556, 630, 633, 811, 816, 818, 823, 825, 826, 834, 838, 843, 855, 877], "0001": [5, 55, 56, 79, 282, 283, 375, 444, 450, 775, 778, 795], "00": [5, 6, 8, 9, 11, 13, 44, 46, 49, 56, 57, 61, 79, 80, 84, 244, 311, 342, 343, 368, 374, 396, 402, 406, 407, 548, 592, 631, 633, 636, 673, 683, 775, 834, 843], "capabl": [5, 19, 27, 31, 843, 846], "A": [5, 30, 31, 45, 52, 53, 56, 57, 63, 65, 69, 70, 73, 76, 78, 79, 80, 83, 84, 86, 88, 90, 93, 96, 97, 102, 121, 122, 124, 131, 139, 146, 152, 193, 212, 274, 276, 280, 312, 323, 327, 329, 330, 331, 333, 347, 350, 354, 355, 368, 371, 374, 375, 376, 377, 380, 381, 386, 389, 403, 417, 420, 422, 429, 437, 442, 445, 453, 457, 468, 471, 489, 493, 494, 500, 501, 502, 503, 507, 508, 509, 510, 511, 519, 528, 531, 536, 538, 547, 556, 559, 560, 591, 592, 593, 596, 624, 627, 628, 629, 630, 631, 633, 634, 635, 636, 638, 640, 642, 646, 647, 658, 662, 670, 672, 675, 680, 681, 685, 686, 698, 701, 703, 707, 709, 717, 720, 722, 724, 725, 726, 727, 728, 732, 733, 734, 735, 737, 738, 739, 740, 742, 748, 758, 766, 767, 770, 772, 773, 775, 776, 777, 778, 783, 790, 805, 809, 811, 816, 817, 818, 821, 826, 828, 829, 832, 835, 836, 840, 841, 843, 848, 851, 854, 855, 856, 857, 858, 859, 860, 862, 863, 864, 869, 870], "over": [5, 6, 8, 21, 28, 31, 33, 44, 56, 61, 69, 70, 71, 76, 79, 83, 84, 92, 93, 94, 96, 121, 319, 320, 334, 335, 348, 355, 368, 371, 374, 375, 376, 377, 384, 386, 388, 389, 390, 391, 394, 403, 408, 412, 416, 417, 418, 419, 420, 421, 443, 451, 460, 473, 488, 491, 492, 495, 514, 524, 530, 579, 613, 627, 633, 636, 641, 642, 646, 647, 667, 677, 688, 690, 692, 693, 736, 740, 759, 760, 761, 762, 763, 764, 765, 766, 767, 791, 794, 800, 804, 811, 818, 819, 824, 830, 831, 838, 839, 841, 844, 848, 850, 854, 858, 860, 867, 869], "wonder": [5, 850, 858, 860], "why": [5, 21, 811, 819, 839, 850, 857, 859], "just": [5, 10, 12, 13, 15, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 42, 44, 46, 56, 61, 69, 84, 96, 99, 146, 327, 368, 375, 443, 628, 636, 646, 679, 758, 783, 791, 811, 815, 818, 819, 820, 822, 824, 827, 828, 829, 830, 831, 833, 836, 837, 839, 840, 841, 843, 848, 850, 851, 854, 859, 860, 863, 869, 870, 875], "One": [5, 6, 46, 56, 57, 63, 65, 79, 80, 86, 88, 99, 377, 461, 462, 463, 466, 483, 492, 495, 545, 633, 638, 642, 705, 738, 823, 826, 828, 830, 836, 841, 843, 848, 850, 851], "reason": [5, 281, 290, 631, 817, 819, 822, 823, 826, 827, 828, 830, 836, 839, 840, 843, 844, 846, 848, 850, 859, 875], "highlight": [5, 819, 827, 830, 840, 842], "quickli": [5, 818, 819, 827, 851, 852, 858, 860, 869, 876], "directli": [5, 15, 17, 21, 24, 28, 30, 31, 34, 374, 375, 410, 434, 640, 729, 811, 817, 818, 819, 820, 822, 823, 826, 827, 828, 829, 831, 834, 836, 837, 839, 840, 841, 844, 845, 848, 850, 852, 853, 854, 855, 860, 862, 863, 864, 873, 874, 875], "receiv": [5, 44, 48, 96, 535, 571, 633, 639, 714, 715, 716, 791, 809, 814, 818, 819, 828, 829, 843, 846], "instanc": [5, 13, 21, 27, 30, 31, 44, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 101, 102, 109, 110, 111, 112, 113, 114, 115, 116, 117, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 164, 167, 170, 171, 172, 174, 179, 196, 213, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 302, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 316, 317, 318, 321, 327, 328, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 368, 371, 374, 375, 376, 377, 380, 386, 393, 394, 395, 396, 398, 399, 400, 402, 406, 407, 411, 412, 413, 417, 418, 420, 421, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 435, 439, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 506, 508, 509, 510, 511, 512, 513, 514, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 536, 537, 539, 540, 543, 544, 545, 546, 547, 548, 551, 552, 555, 557, 559, 560, 561, 563, 564, 565, 567, 568, 570, 575, 576, 586, 590, 591, 592, 593, 594, 596, 598, 599, 612, 614, 615, 618, 620, 621, 622, 623, 628, 629, 631, 633, 634, 635, 636, 637, 638, 641, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 657, 658, 659, 661, 662, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 736, 737, 738, 739, 740, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 783, 788, 809, 817, 818, 819, 822, 823, 824, 828, 830, 831, 832, 833, 835, 836, 837, 838, 839, 843, 851, 852, 853, 856, 862, 870], "much": [5, 10, 12, 13, 21, 22, 28, 30, 31, 32, 33, 44, 99, 333, 350, 371, 790, 817, 818, 819, 823, 826, 828, 836, 839, 840, 841, 844, 845, 846, 848, 850, 851, 859, 867, 869, 875, 876], "more": [5, 6, 15, 18, 19, 21, 22, 23, 26, 28, 30, 31, 32, 33, 42, 44, 45, 46, 50, 55, 56, 61, 63, 67, 72, 78, 79, 84, 86, 90, 109, 110, 111, 112, 113, 114, 115, 116, 117, 125, 152, 244, 246, 262, 277, 290, 294, 299, 300, 302, 362, 366, 372, 375, 376, 377, 423, 425, 437, 439, 442, 455, 461, 462, 463, 468, 489, 579, 625, 628, 629, 631, 633, 636, 638, 644, 670, 676, 679, 682, 684, 686, 693, 702, 709, 748, 749, 750, 751, 777, 787, 805, 811, 813, 816, 817, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 830, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 847, 848, 849, 850, 851, 852, 853, 854, 855, 863, 864, 867, 868, 869, 870, 871, 872, 875, 876], "compat": [5, 8, 22, 28, 32, 36, 42, 49, 55, 56, 61, 63, 66, 69, 70, 78, 79, 84, 86, 89, 92, 93, 101, 102, 153, 222, 227, 229, 231, 232, 233, 234, 239, 240, 246, 250, 251, 258, 259, 264, 266, 268, 269, 272, 275, 277, 281, 288, 293, 334, 335, 371, 629, 631, 636, 638, 643, 646, 647, 667, 679, 682, 685, 688, 692, 693, 705, 744, 759, 760, 761, 762, 763, 764, 765, 766, 767, 809, 811, 818, 824, 835, 840, 841, 844, 848, 854, 859], "There": [5, 21, 28, 31, 36, 96, 367, 369, 370, 378, 379, 383, 777, 817, 818, 819, 822, 823, 825, 826, 828, 829, 830, 832, 834, 836, 838, 840, 841, 845, 848, 851, 854, 858, 862, 870, 871, 875, 876], "deeper": [5, 19, 21, 31, 51, 640, 728, 729, 811, 819, 821, 843, 847, 858], "what": [5, 10, 12, 19, 24, 30, 31, 34, 35, 38, 43, 44, 374, 408, 419, 777, 805, 811, 817, 819, 821, 826, 827, 830, 831, 834, 835, 837, 838, 839, 840, 841, 843, 847, 848, 850, 851, 852, 853, 854, 859, 860, 865, 870, 871, 874], "offer": [5, 840, 852, 860, 869, 875, 876], "limit": [5, 73, 102, 164, 167, 539, 540, 556, 629, 633, 638, 698, 775, 777, 778, 790, 797, 805, 811, 818, 819, 825, 827, 830, 832, 840, 843, 846, 851, 854, 868, 869, 870], "soon": [5, 817, 819, 827, 828, 854, 862], "detail": [5, 6, 23, 33, 46, 50, 55, 56, 61, 63, 67, 72, 78, 79, 80, 84, 86, 90, 109, 110, 111, 112, 113, 114, 115, 116, 117, 132, 143, 290, 294, 299, 300, 302, 366, 375, 425, 468, 547, 625, 628, 631, 644, 670, 676, 682, 686, 709, 748, 749, 750, 751, 787, 811, 817, 819, 822, 824, 825, 826, 827, 834, 835, 836, 837, 840, 841, 842, 843, 844, 845, 848, 850, 851, 852, 871, 875], "comparison": [5, 9, 11, 56, 79, 240, 275, 336, 371, 376, 455, 456, 631, 636, 687, 770, 832], "between": [5, 13, 19, 20, 25, 35, 36, 37, 42, 55, 56, 57, 60, 61, 62, 63, 67, 73, 78, 79, 83, 84, 85, 86, 102, 125, 164, 227, 240, 275, 291, 333, 350, 352, 371, 374, 375, 376, 377, 386, 398, 399, 400, 411, 412, 413, 421, 427, 431, 452, 453, 454, 455, 456, 457, 458, 483, 531, 628, 629, 631, 635, 637, 638, 640, 642, 644, 658, 681, 695, 696, 697, 701, 709, 723, 738, 749, 750, 751, 776, 783, 795, 811, 823, 824, 828, 830, 835, 836, 837, 839, 840, 841, 842, 843, 846, 847, 849, 850, 851, 853, 858, 862, 863, 865, 866, 868, 869, 870, 875], "separ": [5, 45, 56, 57, 79, 380, 501, 548, 633, 635, 662, 772, 783, 818, 819, 823, 826, 827, 830, 841, 842, 843, 848, 850, 851, 870, 874], "stai": [5, 811, 827], "origin": [5, 6, 8, 9, 10, 12, 13, 28, 30, 31, 32, 33, 34, 36, 43, 44, 45, 49, 56, 61, 63, 69, 73, 79, 84, 86, 92, 96, 99, 101, 102, 227, 252, 279, 318, 368, 374, 375, 377, 386, 418, 444, 476, 482, 484, 487, 522, 523, 527, 528, 529, 530, 531, 631, 636, 638, 646, 677, 705, 706, 757, 772, 777, 800, 801, 811, 813, 817, 818, 819, 824, 825, 827, 828, 833, 837, 839, 840, 841, 848, 860, 862, 863, 869, 870], "expand_dim": [5, 13, 27, 30, 31, 46, 48, 63, 86, 635, 638, 657, 811, 840, 848, 851, 863], "convert_to_tensor": 5, "len": [5, 6, 7, 13, 44, 46, 52, 56, 61, 79, 84, 138, 315, 324, 325, 368, 374, 375, 386, 408, 419, 431, 434, 444, 450, 531, 628, 636, 672, 691, 811, 826, 827, 832, 839, 840, 843, 850, 853, 862], "tmp": [5, 44, 46, 588, 611, 633], "ipykernel_65585": 5, "3221769294": 5, "py": [5, 6, 7, 8, 9, 11, 12, 22, 25, 26, 27, 28, 44, 46, 49, 92, 375, 446, 758, 800, 804, 811, 817, 818, 819, 822, 824, 827, 828, 829, 831, 832, 833, 834, 835, 836, 840, 841, 843, 844, 848, 850, 852, 853], "_eagertensorbas": 5, "op": [5, 15, 21, 42, 787, 800, 809, 844, 848, 854], "deprec": [5, 49], "remov": [5, 8, 13, 19, 20, 23, 28, 30, 31, 33, 61, 73, 84, 636, 638, 639, 640, 670, 676, 690, 708, 714, 715, 731, 805, 808, 811, 817, 824, 825, 827, 828, 831, 836, 842, 843, 846, 853, 862, 863, 869], "futur": [5, 8, 21, 28, 30, 44, 636, 672, 673, 811, 818, 819, 820, 827, 828, 843, 844, 846, 850, 854, 858, 860, 875], "instead": [5, 12, 15, 17, 21, 25, 26, 27, 28, 30, 37, 44, 49, 55, 56, 61, 78, 79, 84, 97, 193, 281, 315, 368, 374, 386, 411, 412, 413, 521, 524, 630, 631, 636, 679, 775, 817, 818, 819, 822, 825, 827, 828, 830, 831, 832, 835, 836, 837, 839, 840, 841, 843, 846, 848, 850, 851, 854, 862, 863, 864, 867, 869, 875, 876], "logits_np": [5, 6], "class_id": 5, "int": [5, 6, 7, 44, 47, 50, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 96, 99, 101, 105, 112, 116, 117, 126, 127, 131, 133, 134, 135, 136, 137, 140, 144, 145, 146, 153, 160, 163, 164, 167, 174, 189, 203, 204, 205, 212, 213, 222, 229, 230, 231, 232, 233, 234, 246, 249, 273, 277, 282, 288, 291, 299, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 334, 335, 339, 340, 344, 348, 355, 357, 359, 362, 366, 368, 371, 372, 374, 375, 376, 377, 380, 381, 382, 384, 386, 388, 389, 390, 391, 393, 394, 395, 396, 397, 401, 402, 403, 406, 407, 408, 410, 411, 412, 413, 414, 416, 417, 418, 419, 420, 421, 422, 425, 429, 431, 432, 433, 434, 436, 441, 443, 444, 447, 448, 450, 455, 459, 460, 464, 468, 469, 472, 473, 476, 478, 481, 482, 483, 484, 485, 486, 487, 488, 489, 491, 492, 493, 495, 496, 497, 498, 501, 503, 504, 506, 507, 508, 509, 510, 511, 512, 514, 519, 521, 522, 523, 524, 526, 527, 528, 529, 530, 531, 534, 544, 545, 546, 548, 551, 552, 555, 556, 570, 573, 575, 590, 591, 592, 593, 597, 613, 614, 615, 616, 617, 620, 625, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 660, 662, 667, 669, 670, 677, 678, 683, 688, 690, 691, 692, 693, 695, 696, 697, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 720, 723, 724, 726, 728, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 746, 748, 750, 752, 754, 755, 756, 757, 759, 760, 761, 762, 763, 764, 765, 766, 767, 775, 776, 777, 778, 787, 790, 791, 804, 805, 809, 826, 828, 829, 830, 832, 835, 836, 839, 841, 843, 844, 846, 848, 853, 862], "argmax": [5, 6, 7, 45, 46, 47, 66, 89, 377, 488, 643, 811, 840, 862, 866], "57": [5, 11, 13, 42, 44, 55, 56, 78, 79, 197, 220, 221, 224, 225, 227, 237, 238, 278, 294, 295, 366, 630, 631], "342029": 5, "local_tsl": 5, "tsl": 5, "subprocess": 5, "304": 5, "cannot": [5, 8, 44, 45, 46, 49, 56, 289, 461, 462, 463, 631, 819, 822, 824, 828, 840, 848, 853, 875], "spawn": [5, 572, 633], "child": 5, "No": [5, 30, 31, 44, 56, 62, 79, 85, 376, 453, 454, 455, 457, 458, 637, 695, 819, 827, 828, 869], "directori": [5, 44, 45, 46, 49, 588, 611, 630, 633, 809, 813, 817, 818, 819, 825, 827, 833, 840, 843, 855], "906376": 5, "454": 5, "8904": 5, "993553": 5, "58": [5, 6, 9, 42, 263, 539, 631, 633], "578886": 5, "servic": [5, 871], "168": [5, 46, 539, 633, 640, 717], "0x558ecdd86830": 5, "doe": [5, 6, 8, 9, 12, 13, 21, 22, 25, 26, 27, 28, 30, 43, 45, 55, 56, 57, 63, 73, 78, 79, 86, 96, 146, 273, 275, 283, 327, 368, 375, 376, 386, 387, 428, 455, 456, 527, 528, 532, 561, 628, 631, 633, 636, 638, 671, 707, 770, 805, 815, 817, 819, 821, 824, 827, 828, 830, 831, 833, 834, 835, 836, 839, 840, 841, 843, 846, 848, 850, 851, 854, 856, 859, 862, 865, 869, 870, 876], "guarante": [5, 644, 748, 750, 809, 823, 828, 839, 854, 860], "578915": 5, "176": [5, 539, 633], "streamexecutor": 5, "log": [5, 52, 55, 56, 61, 75, 78, 79, 84, 117, 137, 262, 264, 277, 299, 300, 353, 360, 366, 371, 376, 381, 453, 455, 456, 507, 625, 628, 631, 684, 775, 777, 778, 787, 819, 826, 827, 830, 836, 839, 840, 841, 843, 845, 846, 848, 851], "messag": [5, 797, 806, 810, 818, 819, 827, 830, 832, 834, 840, 848, 850, 859], "absl": [5, 44], "initializelog": 5, "stderr": 5, "i0000": 5, "1710255118": 5, "868823": 5, "65585": 5, "device_compil": 5, "h": [5, 7, 56, 57, 60, 79, 80, 83, 374, 380, 394, 395, 412, 413, 505, 544, 546, 633, 635, 640, 648, 651, 652, 653, 654, 655, 656, 657, 720, 724, 726, 729, 734, 812, 821, 825, 826, 827, 863, 865], "186": 5, "cluster": [5, 56, 79, 375, 429, 854, 869], "line": [5, 10, 12, 13, 19, 20, 23, 24, 27, 30, 31, 33, 34, 45, 46, 289, 631, 809, 811, 818, 822, 823, 827, 829, 830, 832, 840, 843, 846, 849, 850, 851, 852, 860, 863, 872], "lifetim": 5, "grei": 5, "fox": 5, "grai": 5, "urocyon": 5, "cinereoargenteu": 5, "eagerli": [5, 25, 26, 30, 31, 35, 36, 37, 44, 811, 862, 863, 864], "explain": [5, 6, 36, 56, 79, 374, 408, 419, 811, 817, 818, 819, 822, 823, 824, 825, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 838, 839, 840, 843, 844, 846, 848, 849, 850, 851, 852, 853, 865, 872, 875], "doc": [5, 12, 13, 15, 17, 19, 21, 22, 23, 24, 25, 26, 27, 28, 31, 45, 46, 79, 146, 327, 334, 335, 368, 371, 523, 628, 811, 812, 816, 817, 821, 830, 831, 834, 835, 843, 848, 851, 852, 862, 863, 864], "involv": [5, 15, 18, 19, 26, 28, 53, 76, 179, 222, 239, 246, 272, 277, 629, 631, 805, 812, 820, 821, 827, 828, 830, 841, 846, 853, 859, 869, 875], "dummi": [5, 25, 26, 35, 36, 37, 43, 819], "argument": [5, 8, 25, 27, 28, 30, 31, 33, 35, 36, 37, 42, 44, 46, 48, 51, 52, 55, 56, 57, 61, 73, 74, 78, 79, 80, 96, 97, 102, 125, 126, 127, 129, 130, 131, 132, 134, 135, 136, 137, 138, 141, 142, 143, 144, 145, 146, 147, 148, 154, 170, 174, 179, 208, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 239, 240, 242, 244, 245, 246, 250, 251, 252, 253, 254, 255, 259, 261, 262, 263, 264, 266, 267, 268, 269, 272, 274, 275, 276, 277, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 312, 327, 328, 334, 335, 337, 340, 342, 343, 368, 371, 374, 375, 377, 386, 393, 394, 395, 396, 397, 398, 399, 400, 402, 403, 406, 407, 408, 411, 412, 413, 418, 420, 422, 429, 483, 491, 495, 521, 524, 528, 534, 535, 537, 538, 543, 545, 546, 551, 555, 557, 559, 561, 571, 575, 576, 590, 594, 599, 600, 613, 623, 628, 629, 630, 631, 633, 634, 635, 636, 638, 639, 640, 641, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 657, 658, 659, 660, 662, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 692, 693, 694, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 716, 723, 736, 743, 744, 746, 747, 748, 749, 750, 751, 752, 755, 759, 760, 761, 762, 763, 764, 765, 766, 767, 770, 772, 775, 776, 783, 788, 791, 792, 793, 800, 804, 807, 811, 817, 821, 822, 823, 824, 825, 826, 830, 831, 834, 836, 841, 843, 844, 846, 848, 850, 851, 856, 858, 862, 863, 864, 869], "ones": [5, 21, 28, 30, 42, 48, 52, 56, 58, 60, 65, 73, 75, 79, 83, 88, 131, 135, 140, 142, 148, 198, 199, 235, 312, 368, 386, 530, 614, 628, 630, 631, 634, 635, 653, 654, 738, 739, 740, 776, 811, 817, 823, 827, 830, 835, 836, 842, 843, 850, 851, 869], "transpiled_model": [5, 6], "backend_compil": [5, 30, 31], "root": [5, 6, 8, 11, 12, 25, 26, 27, 28, 44, 45, 46, 49, 55, 78, 286, 631, 813, 817, 818, 819, 825, 833, 840, 851], "placement": [5, 12, 817], "consid": [5, 6, 8, 9, 12, 13, 22, 25, 26, 27, 28, 35, 36, 56, 61, 67, 79, 84, 117, 146, 267, 268, 327, 333, 338, 350, 368, 371, 375, 386, 429, 433, 444, 521, 625, 628, 631, 636, 644, 669, 679, 748, 749, 750, 751, 777, 790, 823, 827, 828, 836, 838, 844, 846, 849, 850, 851, 858, 859, 862, 866, 870, 874, 876], "case": [5, 15, 17, 23, 25, 30, 31, 33, 34, 35, 36, 44, 51, 52, 56, 57, 63, 69, 73, 75, 79, 80, 86, 96, 97, 102, 127, 138, 165, 166, 193, 198, 199, 206, 214, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 235, 236, 237, 239, 240, 242, 244, 245, 246, 247, 253, 254, 255, 260, 261, 262, 263, 264, 267, 272, 275, 277, 281, 282, 283, 284, 285, 286, 289, 290, 292, 334, 335, 346, 348, 358, 371, 374, 376, 377, 380, 381, 387, 398, 399, 400, 420, 451, 461, 462, 463, 469, 471, 473, 474, 475, 478, 482, 488, 489, 495, 498, 500, 502, 509, 532, 549, 550, 554, 561, 575, 576, 577, 628, 629, 630, 631, 633, 636, 638, 640, 646, 684, 690, 701, 702, 703, 705, 707, 708, 710, 712, 720, 726, 759, 760, 761, 762, 763, 764, 765, 775, 776, 795, 805, 811, 815, 817, 818, 819, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 843, 844, 846, 848, 850, 852, 853, 854, 859, 862, 863, 864, 868, 872], "ad": [5, 11, 12, 13, 25, 26, 27, 28, 56, 63, 79, 86, 94, 239, 272, 333, 350, 371, 380, 500, 501, 502, 591, 592, 631, 633, 635, 636, 638, 662, 672, 673, 701, 791, 796, 811, 815, 816, 817, 818, 819, 822, 823, 825, 826, 827, 828, 830, 831, 832, 833, 835, 836, 837, 838, 839, 840, 841, 844, 846, 848, 852, 854, 859, 862, 868, 869], "therebi": [5, 843], "effect": [5, 36, 52, 56, 58, 69, 79, 81, 92, 138, 376, 410, 455, 614, 622, 628, 634, 635, 646, 662, 763, 765, 775, 778, 817, 823, 826, 827, 831, 835, 839, 841, 846, 854, 859], "logits_transpil": 5, "logits_transpiled_np": 5, "class_id_transpil": 5, "But": [5, 6, 30, 31, 777, 826, 827, 831, 834, 837, 846, 853], "produc": [5, 6, 8, 43, 56, 57, 60, 79, 83, 301, 311, 314, 366, 368, 374, 422, 635, 665, 775, 805, 817, 828, 833, 834, 839, 841, 843, 844, 862, 870, 872], "granular": [5, 6], "level": [5, 6, 21, 30, 31, 33, 56, 79, 80, 375, 447, 536, 805, 809, 811, 812, 817, 818, 819, 820, 826, 828, 832, 836, 838, 839, 840, 842, 845, 846, 847, 848, 851, 852, 853, 854, 856, 860, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 877], "close": [5, 6, 46, 61, 244, 262, 282, 311, 368, 631, 636, 638, 686, 701, 814, 815, 817, 818, 819, 820, 828, 831, 833, 840, 846, 869], "inde": [5, 6, 835, 846, 854, 867], "consist": [5, 6, 11, 12, 13, 25, 26, 27, 28, 30, 31, 69, 73, 239, 246, 272, 374, 375, 418, 428, 631, 636, 646, 671, 672, 758, 792, 793, 814, 822, 823, 827, 828, 834, 839, 848, 858, 870], "kei": [5, 6, 10, 23, 24, 30, 31, 46, 48, 51, 56, 60, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 102, 109, 110, 111, 112, 113, 114, 115, 116, 117, 133, 135, 140, 142, 148, 152, 154, 167, 171, 172, 179, 213, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 250, 251, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 298, 302, 303, 304, 305, 306, 308, 309, 310, 312, 333, 334, 335, 337, 339, 341, 349, 350, 356, 358, 360, 361, 362, 384, 398, 399, 400, 418, 451, 452, 453, 454, 455, 456, 457, 458, 467, 468, 489, 491, 493, 495, 500, 502, 503, 504, 506, 508, 514, 521, 522, 523, 524, 533, 534, 536, 537, 539, 540, 541, 544, 545, 546, 547, 548, 551, 552, 555, 557, 559, 560, 561, 563, 564, 567, 575, 576, 590, 591, 592, 594, 596, 598, 599, 612, 618, 623, 633, 635, 639, 640, 649, 650, 651, 652, 658, 659, 662, 665, 666, 667, 672, 673, 674, 675, 676, 677, 679, 681, 683, 684, 690, 695, 696, 697, 698, 702, 705, 706, 707, 708, 709, 712, 713, 714, 715, 720, 726, 730, 737, 738, 739, 740, 742, 745, 748, 749, 750, 751, 752, 756, 757, 760, 762, 763, 765, 766, 767, 775, 776, 782, 788, 791, 795, 811, 814, 825, 826, 827, 836, 839, 840, 841, 843, 851, 863, 869, 872, 876], "benefit": [5, 6, 31, 811, 818, 823, 826, 839, 846, 850, 851, 854, 859, 860, 867, 871, 874], "trainabl": [5, 6, 15, 17, 21, 27, 28, 30, 31, 48, 788, 792, 793, 796, 811, 831, 849, 851, 852, 863, 864], "further": [5, 6, 21, 73, 102, 777, 811, 819, 822, 823, 827, 830, 832, 835, 836, 839, 840, 842, 843, 847, 848, 851, 852, 859, 860, 874, 875], "few": [5, 6, 811, 816, 817, 819, 826, 828, 829, 835, 836, 838, 839, 841, 843, 846, 848, 849, 850, 851, 852, 860, 869, 871], "cifar": [5, 6], "dataload": [5, 6, 851], "cifar10": [5, 6], "fals": [5, 6, 7, 10, 11, 12, 17, 21, 22, 30, 33, 44, 45, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62, 63, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 99, 100, 101, 102, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 122, 127, 128, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 144, 145, 146, 148, 151, 152, 153, 154, 155, 157, 158, 159, 160, 161, 162, 164, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 195, 196, 201, 203, 206, 207, 209, 212, 213, 215, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 250, 251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 322, 323, 324, 325, 326, 327, 328, 332, 333, 334, 335, 336, 337, 339, 341, 349, 350, 355, 356, 357, 358, 359, 360, 361, 362, 368, 371, 372, 374, 375, 376, 377, 380, 386, 388, 389, 390, 391, 393, 394, 395, 397, 398, 399, 400, 401, 402, 410, 411, 412, 413, 416, 417, 418, 420, 421, 422, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 460, 461, 462, 463, 467, 468, 469, 470, 471, 472, 473, 474, 475, 478, 479, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 495, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 513, 514, 520, 521, 522, 523, 524, 526, 527, 528, 529, 530, 531, 533, 536, 537, 539, 540, 543, 544, 545, 546, 547, 548, 551, 552, 554, 555, 557, 559, 560, 561, 563, 564, 565, 567, 568, 571, 575, 576, 577, 580, 583, 584, 586, 587, 589, 590, 591, 592, 594, 596, 598, 599, 601, 606, 607, 609, 610, 612, 615, 616, 618, 622, 623, 625, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 657, 658, 659, 660, 661, 662, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 723, 727, 728, 729, 730, 737, 738, 739, 740, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 770, 772, 773, 775, 776, 777, 778, 783, 787, 788, 791, 792, 793, 795, 797, 800, 804, 805, 806, 809, 811, 815, 818, 822, 824, 827, 828, 829, 830, 832, 833, 839, 840, 841, 843, 845, 846, 848, 851, 852, 853, 862, 863], "batch_siz": [5, 6, 44, 46, 49, 56, 60, 65, 79, 83, 88, 374, 376, 393, 394, 395, 411, 412, 413, 414, 458, 635, 642, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 660, 662, 737, 811, 851], "shuffl": [5, 6, 46, 56, 65, 73, 79, 88, 509, 642], "drop_last": [5, 6], "num_work": [5, 6], "opt": [5, 6, 25, 26, 27, 28, 48, 818, 824, 828, 839, 843, 846], "sgd": [5, 6, 44, 795, 869], "paramet": [5, 6, 13, 17, 28, 30, 31, 44, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 99, 101, 102, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 203, 205, 206, 207, 208, 210, 211, 212, 213, 214, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 371, 372, 373, 374, 375, 376, 377, 380, 381, 382, 384, 386, 387, 388, 389, 390, 391, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 406, 407, 408, 410, 411, 412, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 554, 555, 556, 557, 559, 560, 561, 563, 564, 565, 566, 567, 568, 570, 571, 572, 575, 576, 579, 580, 581, 582, 585, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 631, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 770, 772, 775, 776, 777, 778, 783, 788, 790, 791, 792, 793, 794, 795, 796, 800, 801, 804, 805, 807, 809, 811, 817, 823, 831, 832, 835, 840, 841, 843, 844, 848, 850, 851, 862, 863, 864, 870], "lr": [5, 44, 58, 81, 535, 615, 618, 620, 621, 622, 633, 634, 795, 851, 852], "1e": [5, 6, 8, 9, 10, 11, 12, 15, 17, 30, 42, 46, 53, 56, 58, 61, 62, 64, 76, 79, 81, 84, 85, 87, 100, 164, 333, 350, 371, 376, 380, 456, 500, 501, 502, 581, 582, 591, 604, 605, 614, 615, 620, 622, 629, 633, 634, 636, 637, 641, 686, 695, 696, 697, 736, 770, 772, 792, 794, 795, 811, 815, 826, 833, 836, 839, 841, 852, 853], "loss_fn": [5, 30, 31, 42, 44, 46, 811, 851, 852, 853], "crossentropyloss": [5, 44, 792], "verifi": [5, 8, 9, 13, 27, 324, 325, 368, 817, 828, 829, 840, 843, 844], "loop": [5, 6, 10, 12, 13, 23, 38, 71, 79, 94, 121, 124, 374, 420, 627, 639, 714, 715, 716, 811, 824, 854, 862], "epoch": [5, 6, 30, 31, 44, 46, 811], "loss_epoch_arr": [5, 6], "loss_arr": [5, 6], "enumer": [5, 6, 7, 44, 46, 780], "permut": [5, 7, 11, 44, 63, 86, 101, 384, 513, 638, 703, 710, 863], "loss": [5, 6, 30, 31, 44, 46, 56, 79, 96, 451, 452, 453, 454, 455, 456, 457, 458, 584, 607, 633, 695, 696, 697, 811, 827, 828, 836, 840, 844, 845, 851, 852, 853, 869, 876], "backward": [5, 6, 44, 56, 70, 79, 93, 281, 374, 397, 402, 403, 407, 408, 418, 419, 631, 636, 647, 667, 692, 766, 767, 791, 809, 844, 854], "append": [5, 6, 13, 45, 46, 56, 61, 73, 79, 231, 340, 371, 631, 636, 638, 670, 676, 701, 805, 811, 827, 843, 848, 851, 866], "avg_loss": [5, 6, 44], "sum": [5, 6, 44, 46, 55, 56, 57, 60, 61, 62, 69, 73, 78, 79, 80, 83, 84, 85, 92, 96, 101, 102, 212, 222, 264, 288, 331, 355, 368, 371, 375, 376, 377, 380, 386, 417, 427, 451, 452, 453, 454, 455, 456, 457, 458, 488, 505, 527, 528, 545, 575, 576, 630, 631, 633, 635, 636, 637, 646, 658, 665, 677, 686, 690, 693, 695, 757, 758, 790, 792, 804, 811, 826, 828, 836, 838, 839, 840, 848, 862, 863, 864, 866], "02": [5, 11, 12, 44, 52, 57, 58, 64, 65, 78, 81, 88, 137, 224, 225, 264, 374, 396, 406, 407, 591, 592, 614, 615, 620, 628, 631, 633, 634, 641, 642, 736, 739, 740, 841], "04": [5, 44, 45, 52, 58, 72, 76, 79, 81, 111, 112, 137, 164, 244, 581, 614, 615, 620, 625, 628, 629, 631, 633, 634, 775, 818, 843], "24": [5, 13, 23, 42, 44, 55, 56, 61, 69, 78, 79, 80, 83, 84, 88, 101, 234, 242, 257, 259, 272, 282, 283, 286, 348, 351, 371, 374, 386, 393, 395, 396, 406, 411, 412, 413, 417, 421, 522, 544, 545, 631, 633, 636, 640, 646, 649, 670, 677, 681, 718, 729, 738, 739, 740, 756, 758, 772, 832, 851], "94": [5, 13, 42, 55, 56, 58, 65, 78, 79, 81, 88, 206, 282, 283, 359, 371, 406, 618, 630, 634, 740], "averag": [5, 6, 44, 46, 56, 58, 62, 79, 81, 85, 374, 376, 380, 386, 388, 389, 393, 394, 395, 453, 454, 455, 456, 457, 458, 505, 521, 614, 615, 620, 634, 635, 637, 639, 662, 695, 714, 715, 790, 791], "ve": [5, 6, 7, 8, 13, 19, 28, 30, 65, 88, 642, 737, 817, 818, 819, 820, 833, 843, 846, 847, 850, 856], "matplotlib": [5, 6, 13, 25, 26, 27, 28, 44, 45, 46, 49], "pyplot": [5, 6, 13, 44, 45, 46, 49], "plt": [5, 6, 13, 44, 45, 46, 49], "plot": [5, 6, 13, 45, 869], "And": [5, 6, 10, 12, 13, 15, 17, 22, 25, 30, 31, 32, 45, 76, 364, 365, 373, 811, 822, 825, 834, 836, 843, 862], "successfulli": [5, 6, 44, 46, 49, 793, 814, 818, 823], "plug": 5, "seen": [5, 15, 17, 22, 28, 30, 375, 381, 434, 509, 556, 633, 800, 827, 828, 830, 832, 840, 843, 848, 850, 851, 858, 859, 875], "head": [5, 6, 47, 48, 635, 662, 791, 811, 816, 818, 827, 840, 866], "d": [5, 6, 45, 56, 57, 60, 61, 63, 75, 79, 80, 83, 84, 86, 99, 115, 137, 146, 179, 222, 239, 240, 272, 275, 327, 368, 374, 375, 377, 380, 381, 384, 393, 394, 395, 402, 407, 411, 412, 413, 414, 416, 420, 426, 442, 463, 469, 471, 474, 478, 492, 494, 498, 505, 507, 513, 536, 547, 625, 628, 629, 631, 635, 636, 638, 640, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 669, 670, 674, 677, 681, 690, 691, 707, 720, 724, 725, 726, 729, 734, 735, 776, 805, 811, 812, 818, 821, 824, 825, 826, 833, 838, 843, 846, 851, 859, 860, 865], "explor": [5, 6, 13, 15, 17, 21, 25, 26, 27, 30, 31, 36, 37, 38, 817, 818, 819, 828, 833, 846, 849, 853, 869, 872], "own": [5, 6, 9, 15, 17, 21, 30, 31, 36, 811, 818, 822, 827, 828, 831, 832, 839, 840, 844, 848, 854, 856, 859, 860, 865, 868, 869, 874, 875], "machin": [5, 6, 11, 12, 25, 26, 27, 28, 33, 34, 42, 48, 56, 61, 79, 84, 164, 167, 375, 429, 629, 636, 679, 682, 811, 818, 822, 836, 856, 859, 867, 869, 871, 872, 873, 874, 875], "sign": [5, 6, 55, 56, 61, 67, 69, 78, 79, 84, 96, 125, 219, 220, 221, 222, 225, 227, 228, 233, 237, 239, 242, 244, 246, 272, 274, 281, 285, 286, 290, 338, 371, 375, 377, 386, 446, 490, 491, 522, 523, 628, 631, 636, 644, 646, 684, 748, 749, 750, 751, 756, 757, 762, 764, 811, 818, 820, 828, 848, 853, 859], "develop": [5, 6, 15, 29, 30, 31, 811, 812, 813, 814, 815, 816, 817, 818, 819, 822, 825, 827, 833, 842, 844, 854, 856, 858, 859, 860, 862, 863, 867, 868, 869, 870, 871, 874, 875, 876], "ask": [5, 6, 811, 817, 818, 830, 848, 850, 854, 855, 860], "server": [5, 6, 44, 811, 818, 819, 825, 833, 855, 869], "forward": [5, 6, 7, 11, 17, 30, 31, 44, 46, 56, 79, 364, 373, 374, 397, 402, 403, 407, 408, 418, 419, 788, 790, 791, 793, 795, 809, 811, 818, 824, 831, 838, 843, 844, 846, 853, 854, 862, 869, 870], "whenev": [6, 8, 9, 12, 22, 25, 26, 27, 28, 791, 819, 824, 827, 828, 832, 839, 842, 843, 845, 851], "come": [6, 21, 44, 814, 817, 818, 819, 823, 827, 840, 845, 846, 852, 856, 869], "onto": [6, 640, 723, 729, 857, 858, 869], "scene": [6, 811, 821, 847, 849, 857, 858, 869], "almost": [6, 44, 816, 826, 841, 849, 851, 858], "alwai": [6, 52, 53, 56, 57, 63, 75, 76, 79, 86, 109, 127, 151, 222, 272, 345, 371, 375, 377, 446, 461, 462, 463, 469, 471, 473, 474, 475, 478, 482, 489, 498, 554, 561, 625, 629, 631, 633, 638, 701, 702, 703, 705, 707, 708, 710, 712, 777, 811, 817, 818, 819, 823, 824, 826, 828, 831, 834, 835, 836, 839, 840, 841, 842, 843, 844, 846, 848, 854, 862], "huggingfac": [6, 44, 862, 863], "implement": [6, 13, 21, 22, 30, 32, 36, 44, 47, 53, 54, 56, 67, 68, 76, 77, 79, 84, 91, 96, 151, 165, 166, 179, 198, 199, 213, 219, 220, 221, 224, 225, 226, 227, 236, 237, 239, 242, 244, 246, 260, 261, 262, 263, 272, 274, 277, 281, 284, 285, 289, 290, 334, 335, 358, 371, 375, 386, 427, 428, 527, 528, 549, 550, 629, 630, 631, 633, 635, 636, 644, 645, 646, 662, 671, 672, 673, 681, 690, 748, 749, 750, 751, 752, 755, 759, 760, 761, 762, 763, 764, 776, 778, 800, 811, 815, 817, 821, 822, 823, 824, 826, 828, 829, 831, 832, 833, 835, 836, 837, 839, 841, 843, 844, 846, 848, 850, 851, 852, 853, 854, 856, 866, 867, 868, 869, 872, 875, 876], "conveni": [6, 24, 34, 817, 828, 829, 835, 841, 849, 851, 852, 856, 875], "non": [6, 23, 33, 53, 55, 56, 61, 65, 66, 69, 70, 76, 78, 79, 84, 88, 89, 92, 93, 133, 151, 169, 178, 247, 267, 268, 273, 334, 335, 339, 346, 359, 371, 374, 375, 377, 386, 418, 429, 433, 439, 462, 463, 524, 527, 628, 629, 631, 636, 640, 642, 643, 646, 647, 667, 668, 677, 679, 686, 688, 692, 693, 730, 739, 743, 744, 745, 746, 759, 760, 761, 762, 763, 765, 766, 767, 775, 790, 792, 793, 795, 823, 826, 830, 848, 862, 863, 864, 869], "who": [6, 19, 811, 814, 820, 821, 832, 847, 854, 869, 871, 877], "must": [6, 36, 44, 50, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 96, 97, 99, 101, 102, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 147, 148, 151, 152, 153, 212, 213, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 314, 324, 325, 328, 329, 330, 331, 334, 335, 336, 337, 338, 340, 342, 343, 345, 347, 349, 351, 352, 353, 354, 358, 361, 366, 368, 371, 374, 375, 376, 377, 380, 381, 384, 386, 388, 390, 391, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 406, 407, 408, 410, 411, 412, 413, 416, 418, 419, 421, 423, 425, 426, 428, 434, 435, 440, 441, 442, 443, 448, 452, 453, 454, 455, 457, 458, 461, 462, 463, 468, 469, 471, 473, 474, 475, 476, 478, 482, 484, 485, 486, 487, 489, 491, 492, 493, 495, 496, 498, 503, 504, 506, 507, 508, 510, 511, 514, 521, 522, 523, 524, 531, 539, 540, 544, 545, 546, 551, 552, 554, 561, 575, 576, 613, 614, 615, 618, 620, 621, 622, 623, 625, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 662, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 754, 755, 756, 757, 759, 760, 761, 762, 763, 764, 765, 766, 767, 772, 790, 791, 795, 797, 816, 817, 818, 819, 822, 823, 827, 828, 829, 830, 831, 832, 835, 836, 837, 839, 840, 843, 844, 845, 846, 848, 852, 853, 858, 860, 863, 864, 870, 876], "reimplement": 6, "choic": [6, 13, 31, 48, 56, 69, 79, 92, 375, 377, 446, 466, 646, 763, 765, 811, 818, 827, 839, 840, 851, 860, 863, 869, 876], "veri": [6, 15, 23, 30, 31, 33, 55, 78, 273, 333, 350, 371, 631, 636, 684, 777, 816, 817, 818, 819, 825, 826, 828, 829, 830, 832, 833, 835, 836, 839, 840, 841, 843, 844, 846, 849, 851, 852, 853, 854, 858, 859, 865, 866, 867, 869, 870, 871, 874, 875, 876], "thousand": [6, 854], "especi": [6, 818, 824, 834, 858, 869], "china": 6, "howev": [6, 13, 21, 22, 23, 24, 25, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 61, 84, 246, 289, 290, 377, 380, 491, 500, 502, 579, 631, 633, 636, 684, 686, 800, 817, 818, 822, 823, 824, 826, 828, 829, 830, 831, 832, 834, 835, 836, 839, 840, 841, 843, 846, 848, 850, 851, 852, 853, 854, 859, 862, 868, 869, 875], "suffer": 6, "problem": [6, 811, 814, 817, 819, 822, 823, 829, 840, 850, 859, 865, 871, 875], "describ": [6, 56, 69, 79, 97, 222, 239, 240, 272, 275, 277, 376, 381, 384, 456, 511, 514, 631, 635, 646, 662, 758, 762, 764, 813, 814, 817, 818, 819, 825, 827, 839, 840, 843, 848, 853, 869], "abov": [6, 21, 26, 30, 31, 36, 37, 52, 55, 56, 61, 65, 72, 78, 79, 84, 88, 97, 117, 125, 126, 127, 129, 130, 131, 132, 134, 135, 136, 137, 138, 141, 142, 143, 144, 145, 146, 147, 148, 154, 170, 174, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 239, 240, 242, 244, 245, 246, 250, 251, 252, 253, 254, 255, 256, 259, 261, 262, 263, 264, 266, 267, 268, 269, 272, 274, 275, 276, 277, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 310, 312, 327, 328, 334, 335, 337, 340, 366, 368, 371, 374, 375, 377, 386, 393, 394, 395, 396, 398, 399, 400, 406, 408, 411, 412, 413, 418, 419, 420, 428, 429, 483, 491, 495, 521, 524, 551, 555, 557, 559, 561, 590, 599, 623, 625, 628, 629, 631, 633, 634, 635, 636, 638, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 657, 658, 659, 662, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 690, 692, 693, 694, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 736, 738, 743, 744, 746, 747, 748, 749, 750, 751, 752, 755, 759, 760, 761, 762, 763, 764, 765, 766, 767, 811, 815, 817, 818, 819, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 835, 836, 838, 839, 840, 841, 843, 846, 848, 850, 851, 852, 853, 869, 874], "second": [6, 8, 55, 56, 58, 61, 63, 67, 78, 79, 80, 81, 84, 86, 90, 97, 101, 102, 122, 146, 177, 185, 222, 227, 229, 231, 232, 233, 234, 240, 246, 247, 248, 249, 250, 251, 257, 258, 259, 264, 265, 266, 268, 269, 272, 275, 277, 288, 318, 327, 333, 346, 348, 349, 350, 356, 360, 361, 368, 371, 375, 376, 377, 384, 386, 427, 428, 429, 431, 435, 457, 489, 497, 508, 510, 514, 521, 524, 536, 585, 608, 614, 615, 620, 627, 628, 629, 631, 633, 634, 636, 638, 639, 640, 644, 667, 670, 671, 672, 674, 676, 681, 683, 684, 686, 688, 690, 692, 709, 710, 715, 718, 748, 749, 750, 795, 818, 822, 825, 828, 830, 834, 839, 840, 843, 845, 850, 860, 874], "iter": [6, 44, 46, 51, 56, 57, 63, 71, 73, 79, 80, 86, 94, 99, 102, 121, 212, 319, 320, 368, 374, 375, 377, 420, 433, 444, 450, 467, 483, 533, 571, 627, 630, 633, 638, 640, 700, 704, 711, 713, 718, 719, 720, 721, 722, 723, 725, 726, 727, 728, 729, 732, 733, 735, 804, 805, 809, 822, 824, 826, 848, 851, 860, 862], "dino": 6, "meta": [6, 44, 714, 715, 716, 823, 844, 869], "vit": 6, "purpos": [6, 23, 30, 31, 33, 44, 46, 146, 244, 262, 327, 368, 628, 631, 636, 684, 819, 821, 823, 826, 827, 829, 830, 832, 835, 836, 837, 840, 842, 843, 846, 847, 850, 856, 868, 870, 873, 874, 875], "abund": [6, 860], "literatur": 6, "mainli": [6, 811, 817, 821, 838, 840, 843, 849, 851, 856, 869], "focus": [6, 811, 828, 844, 867, 868, 869, 875, 876], "rather": [6, 36, 57, 73, 80, 125, 212, 563, 564, 567, 628, 630, 633, 635, 660, 815, 819, 822, 826, 828, 831, 833, 840, 841, 843, 844, 853, 854, 859, 865, 868, 869], "than": [6, 8, 9, 13, 30, 31, 33, 36, 55, 56, 57, 60, 61, 63, 65, 66, 67, 69, 73, 78, 79, 80, 83, 84, 86, 88, 89, 90, 92, 101, 102, 125, 133, 164, 212, 220, 221, 224, 225, 227, 228, 231, 233, 235, 239, 245, 246, 260, 261, 262, 263, 270, 272, 277, 281, 283, 285, 286, 290, 291, 292, 301, 311, 333, 336, 350, 357, 368, 371, 374, 375, 376, 377, 386, 396, 397, 402, 403, 406, 407, 408, 418, 419, 423, 425, 444, 450, 451, 474, 475, 522, 523, 524, 563, 564, 567, 584, 607, 628, 629, 630, 631, 633, 635, 636, 638, 642, 643, 644, 646, 660, 665, 667, 676, 677, 678, 679, 682, 693, 698, 702, 708, 740, 746, 749, 750, 751, 756, 757, 762, 763, 764, 765, 791, 805, 815, 817, 819, 822, 826, 827, 828, 830, 832, 833, 839, 840, 841, 843, 844, 845, 846, 848, 851, 852, 853, 854, 855, 859, 866, 867, 868, 869, 875, 876], "eta": [6, 8, 9, 44, 46, 49], "45": [6, 8, 9, 42, 44, 46, 55, 56, 69, 78, 79, 81, 83, 88, 102, 223, 227, 239, 282, 283, 342, 343, 356, 371, 374, 386, 396, 406, 417, 522, 528, 614, 620, 631, 634, 636, 638, 646, 681, 707, 739, 740, 758, 775], "143": [6, 8, 9, 61, 78, 102, 289, 631, 636, 674, 830], "756": [6, 8, 9], "65": [6, 13, 42, 44, 46, 49, 78, 81, 88, 233, 272, 559, 614, 631, 633, 634, 636, 646, 681, 739, 740, 758, 827], "116": [6, 8, 9], "59": [6, 42, 55, 234, 386, 522], "749": 6, "77": [6, 13, 42, 46, 80, 592, 636, 646, 681, 758], "env": [6, 25, 26, 27, 28], "flags_fraction_of_gpu_memory_to_us": 6, "auto_growth": 6, "paddl": [6, 25, 26, 27, 28, 208, 334, 335, 371, 630, 788, 800, 817, 818, 828, 833], "autoimageprocessor": [6, 862, 863], "automodelforimageclassif": 6, "device_count": 6, "seed": [6, 22, 25, 26, 46, 47, 56, 60, 65, 67, 73, 79, 83, 88, 322, 323, 324, 325, 326, 368, 375, 381, 433, 444, 450, 507, 508, 509, 510, 511, 635, 642, 644, 658, 737, 738, 739, 740, 742, 748, 783, 788, 790, 805, 837, 841, 843], "libpaddl": 6, "0x7c8738e15470": 6, "processor": [6, 874], "facebook": [6, 47], "imagenet1k": 6, "id2label": [6, 47, 862], "predicted_class_idx": [6, 47], "usag": [6, 212, 630, 828, 836, 839, 843, 848, 854, 859, 872], "usr": [6, 7, 8, 9, 10, 12, 44, 45, 46, 49, 818], "lib": [6, 7, 8, 9, 13, 25, 26, 27, 28, 44, 45, 46, 49], "python3": [6, 7, 8, 9, 11, 25, 26, 27, 28, 30, 44, 46, 49, 818, 819], "dist": [6, 7, 8, 9, 44, 45, 46, 49], "except": [6, 8, 9, 12, 22, 25, 26, 27, 28, 45, 46, 49, 56, 57, 63, 65, 70, 73, 79, 80, 84, 88, 93, 153, 334, 335, 340, 359, 371, 377, 381, 386, 467, 491, 495, 508, 527, 528, 543, 561, 578, 594, 600, 629, 633, 636, 638, 642, 643, 647, 682, 699, 701, 709, 738, 739, 740, 746, 766, 767, 770, 773, 777, 811, 819, 820, 821, 822, 823, 827, 828, 829, 831, 833, 835, 839, 840, 844, 845, 846, 850, 854], "383": [6, 8, 9, 22], "userwarn": [6, 7, 8, 9, 11, 12, 22, 25, 26, 27, 28, 49], "current": [6, 8, 9, 12, 21, 22, 25, 26, 27, 28, 30, 31, 44, 45, 51, 56, 57, 73, 79, 102, 121, 165, 166, 169, 186, 187, 188, 189, 190, 191, 197, 198, 199, 200, 205, 207, 375, 377, 427, 428, 483, 491, 549, 550, 553, 556, 558, 562, 573, 574, 594, 627, 629, 630, 633, 636, 640, 671, 717, 727, 728, 772, 776, 792, 793, 800, 801, 805, 808, 809, 811, 813, 817, 818, 819, 822, 824, 826, 827, 828, 829, 832, 833, 834, 836, 839, 840, 841, 842, 843, 846, 848, 853, 854, 860, 862, 869, 875, 876], "inplac": [6, 7, 8, 9, 11, 12, 13, 22, 25, 26, 27, 28, 51, 57, 73, 80, 96, 99, 535, 537, 558, 561, 562, 579, 580, 633, 640, 724, 725, 729, 734, 735, 782, 783, 788, 795, 821, 823, 830, 833, 835, 837, 840, 846, 850, 852], "quietli": [6, 8, 9, 12, 22, 25, 26, 27, 28], "lead": [6, 7, 8, 9, 12, 22, 25, 26, 27, 28, 61, 73, 84, 102, 246, 375, 439, 579, 631, 633, 636, 683, 686, 777, 827, 828, 830, 842, 844, 854, 859, 860], "overhead": [6, 7, 8, 9, 12, 22, 23, 25, 26, 27, 28, 30, 31, 33, 854, 862, 872], "appli": [6, 8, 9, 10, 12, 22, 25, 26, 27, 28, 30, 31, 44, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 96, 97, 101, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 127, 128, 130, 132, 133, 135, 137, 138, 139, 140, 142, 144, 145, 148, 152, 153, 154, 167, 171, 172, 179, 196, 213, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 316, 317, 318, 321, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 366, 371, 372, 374, 375, 376, 377, 380, 386, 388, 389, 390, 391, 393, 394, 395, 396, 398, 399, 400, 402, 406, 407, 408, 410, 411, 412, 413, 417, 418, 421, 422, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 435, 439, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 536, 537, 539, 540, 543, 544, 545, 546, 547, 548, 551, 552, 555, 557, 559, 560, 561, 563, 564, 565, 567, 568, 570, 575, 576, 590, 591, 592, 593, 594, 596, 598, 599, 612, 614, 615, 618, 620, 621, 622, 623, 625, 629, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 644, 646, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 665, 666, 667, 669, 670, 671, 672, 673, 674, 675, 676, 677, 679, 681, 682, 683, 684, 686, 690, 693, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 723, 726, 729, 730, 736, 737, 738, 739, 740, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 765, 766, 767, 777, 778, 787, 791, 794, 811, 817, 818, 819, 823, 826, 828, 829, 830, 831, 832, 834, 835, 836, 837, 839, 840, 843, 844, 846, 850, 851, 852, 853, 854, 862, 863, 870], "view": [6, 7, 8, 9, 12, 22, 25, 26, 27, 28, 56, 63, 79, 101, 132, 143, 377, 461, 462, 463, 469, 471, 473, 474, 475, 478, 482, 489, 495, 498, 554, 628, 633, 638, 701, 702, 703, 705, 707, 708, 710, 712, 818, 819, 832, 869], "control": [6, 8, 9, 12, 22, 25, 26, 27, 28, 38, 56, 79, 146, 295, 327, 366, 368, 374, 377, 398, 399, 400, 466, 492, 579, 628, 633, 636, 669, 826, 828, 829, 838, 839, 840, 841, 846, 850, 851, 856, 862, 869, 875], "manag": [6, 8, 9, 12, 21, 22, 25, 26, 27, 28, 30, 579, 603, 633, 811, 812, 820, 824, 828, 829, 839, 842, 854, 860, 871, 873], "set_inplace_mod": [6, 8, 9, 12, 22, 25, 26, 27, 28, 603, 633], "strict": [6, 8, 9, 12, 22, 25, 26, 27, 28, 579, 603, 633], "rais": [6, 8, 9, 12, 22, 25, 26, 27, 28, 45, 46, 52, 56, 57, 65, 67, 70, 73, 75, 79, 80, 86, 88, 90, 93, 127, 153, 242, 277, 334, 335, 345, 371, 374, 376, 377, 381, 386, 408, 419, 456, 461, 462, 469, 471, 473, 474, 475, 482, 491, 498, 508, 527, 528, 537, 561, 579, 581, 592, 594, 600, 604, 629, 631, 633, 636, 638, 642, 643, 644, 646, 647, 676, 678, 692, 701, 702, 703, 705, 707, 708, 709, 710, 712, 738, 739, 740, 746, 751, 759, 761, 766, 767, 770, 777, 795, 811, 819, 822, 824, 828, 829, 832, 839, 840, 844, 845, 848, 850, 855, 859], "error": [6, 8, 9, 12, 13, 22, 25, 26, 27, 28, 36, 47, 49, 55, 56, 60, 73, 78, 79, 83, 109, 241, 289, 334, 335, 342, 343, 371, 375, 376, 377, 386, 387, 444, 450, 452, 454, 491, 528, 532, 579, 625, 631, 633, 635, 636, 646, 665, 684, 687, 759, 761, 777, 795, 808, 812, 816, 817, 818, 819, 822, 823, 824, 827, 828, 829, 830, 834, 835, 840, 843, 844, 845, 850, 854, 860, 869], "paddle_input": 6, "pixel_valu": 6, "to_tensor": [6, 95, 96, 97, 98, 99, 100], "stop_gradi": [6, 58, 81, 212, 535, 615, 618, 620, 621, 622, 630, 633, 634, 639, 714, 715, 716, 795, 852], "logits_np_transpil": 6, "within": [6, 13, 15, 17, 21, 30, 31, 51, 56, 79, 125, 333, 350, 371, 374, 380, 411, 412, 413, 418, 421, 461, 462, 463, 505, 628, 642, 740, 805, 814, 817, 819, 820, 823, 827, 828, 840, 841, 842, 843, 852, 854, 863, 865, 866, 870], "4th": 6, "decim": [6, 55, 78, 282, 631, 845], "io": [6, 12, 25, 26, 27, 28, 45, 48, 818, 827], "to_rgb": 6, "cv2": [6, 44, 46, 48, 851], "learning_r": [6, 13], "cach": [6, 11, 12, 25, 26, 27, 28, 44, 46, 49, 194, 538, 630, 633, 780, 800, 834, 836, 839, 843], "tar": [6, 44, 45, 46, 49], "gz": [6, 44, 45, 46, 49], "found": [6, 44, 46, 47, 49, 61, 63, 67, 73, 79, 84, 86, 90, 102, 200, 386, 468, 522, 630, 640, 670, 676, 709, 728, 748, 805, 814, 817, 818, 819, 823, 824, 825, 826, 828, 829, 831, 834, 837, 839, 840, 855, 871], "bj": [6, 222, 239, 272, 337, 371, 631], "bcebo": 6, "begin": [6, 26, 56, 79, 283, 376, 377, 451, 467, 483, 484, 485, 486, 487, 631, 640, 717, 728, 775, 818, 822, 827, 841], "41626": 6, "2m": 6, "cross_entropi": [6, 46, 62, 85, 637, 697, 811, 826, 836, 839], "01": [6, 11, 25, 26, 28, 46, 52, 56, 57, 58, 61, 79, 80, 81, 84, 88, 137, 264, 282, 283, 311, 317, 342, 343, 350, 368, 374, 396, 406, 407, 548, 591, 592, 614, 615, 620, 628, 631, 633, 634, 636, 639, 642, 673, 683, 715, 716, 739, 740, 775, 824, 853], "33": [6, 13, 42, 44, 45, 55, 65, 69, 78, 79, 80, 81, 83, 225, 226, 233, 282, 374, 375, 377, 386, 394, 416, 417, 447, 466, 522, 540, 591, 618, 631, 633, 634, 635, 636, 640, 646, 658, 659, 681, 735, 738, 758, 765, 775, 778], "bring": [6, 30, 31, 822, 842, 843, 848, 849, 856, 859], "hope": [6, 42, 854, 859, 875, 877], "milesi": 7, "blob": [7, 44, 46, 811], "2f62e6b1c8e98022a6418d31a76f6abd800e5ae7": 7, "data_load": 7, "l65": 7, "mask_valu": 7, "pil_img": 7, "scale": [7, 10, 44, 56, 60, 64, 79, 81, 83, 87, 111, 210, 211, 303, 304, 307, 318, 348, 366, 368, 371, 374, 375, 380, 392, 398, 399, 400, 408, 410, 415, 419, 435, 500, 501, 502, 621, 625, 630, 634, 635, 641, 658, 662, 665, 736, 775, 777, 778, 790, 791, 795, 805, 869, 871], "is_mask": 7, "size": [7, 13, 15, 17, 22, 25, 26, 32, 33, 35, 36, 37, 44, 46, 49, 56, 57, 60, 61, 63, 65, 66, 73, 79, 80, 83, 84, 86, 88, 89, 96, 97, 101, 102, 133, 136, 210, 211, 212, 311, 314, 318, 329, 330, 331, 332, 339, 355, 362, 368, 371, 372, 374, 375, 376, 377, 380, 381, 384, 386, 388, 389, 390, 391, 392, 393, 394, 410, 411, 412, 414, 415, 421, 422, 429, 432, 444, 450, 451, 453, 467, 469, 481, 491, 493, 495, 501, 502, 505, 509, 514, 526, 527, 528, 529, 530, 531, 570, 575, 628, 630, 633, 635, 636, 638, 642, 643, 647, 660, 662, 665, 667, 670, 674, 677, 681, 683, 686, 692, 701, 706, 707, 708, 737, 743, 746, 766, 767, 775, 777, 778, 791, 805, 811, 839, 841, 843, 846, 851, 862, 864], "neww": 7, "newh": 7, "assert": [7, 13, 45, 47, 49, 73, 537, 633, 783, 815, 821, 822, 833, 836, 839, 840, 841, 843, 844, 850, 851], "too": [7, 56, 79, 222, 239, 246, 272, 377, 491, 631, 790, 817, 818, 819, 822, 828, 832, 844, 854], "small": [7, 13, 46, 55, 56, 61, 64, 78, 79, 84, 87, 239, 246, 272, 273, 333, 350, 371, 375, 376, 380, 439, 456, 500, 501, 502, 631, 636, 641, 679, 682, 684, 736, 790, 794, 811, 818, 827, 830, 836, 841, 846, 848, 852, 854, 862, 863, 870], "pixel": [7, 44, 56, 79, 374, 410], "resampl": 7, "nearest": [7, 56, 79, 222, 239, 272, 282, 344, 371, 374, 386, 410, 531, 631, 846], "bicub": [7, 56, 79, 374, 410, 846], "zero": [7, 44, 52, 53, 55, 56, 57, 58, 60, 61, 63, 66, 67, 69, 70, 75, 76, 78, 79, 81, 83, 84, 88, 89, 92, 93, 97, 111, 113, 114, 115, 117, 128, 129, 131, 133, 138, 140, 141, 142, 144, 145, 148, 151, 152, 220, 221, 222, 224, 225, 226, 227, 228, 231, 233, 234, 236, 237, 238, 239, 241, 244, 245, 246, 253, 254, 255, 256, 262, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 282, 284, 285, 286, 287, 289, 290, 292, 293, 295, 297, 298, 302, 304, 310, 312, 321, 328, 334, 335, 338, 339, 340, 344, 352, 355, 357, 358, 359, 360, 366, 368, 371, 374, 375, 377, 384, 386, 396, 397, 398, 399, 400, 402, 403, 406, 407, 408, 417, 418, 419, 420, 421, 422, 427, 429, 437, 442, 445, 467, 477, 482, 483, 494, 495, 513, 522, 523, 540, 544, 551, 571, 576, 614, 615, 620, 621, 622, 623, 625, 628, 629, 631, 633, 634, 635, 636, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 655, 657, 658, 659, 662, 665, 666, 668, 672, 673, 675, 676, 677, 678, 679, 680, 682, 684, 690, 692, 693, 700, 701, 702, 703, 705, 706, 713, 736, 738, 739, 740, 743, 744, 745, 746, 748, 749, 750, 751, 755, 756, 757, 759, 760, 761, 762, 763, 764, 765, 766, 767, 775, 790, 791, 795, 809, 823, 826, 828, 829, 830, 835, 837, 838, 841, 848, 851, 852, 860, 868], "int64": [7, 56, 65, 66, 68, 69, 76, 88, 89, 91, 92, 141, 154, 160, 163, 165, 167, 171, 172, 176, 183, 315, 368, 384, 386, 514, 522, 523, 628, 629, 643, 645, 646, 738, 743, 744, 745, 754, 756, 757, 762, 764, 775, 776, 828, 840, 843, 848], "ndim": [7, 56, 61, 66, 79, 84, 89, 101, 105, 375, 377, 443, 444, 450, 461, 462, 463, 476, 484, 486, 496, 613, 633, 636, 643, 683, 686, 746, 826, 836, 843], "newaxi": [7, 626], "transpos": [7, 27, 30, 31, 48, 56, 60, 61, 73, 79, 83, 84, 101, 375, 423, 441, 443, 445, 520, 635, 636, 648, 650, 652, 654, 655, 656, 660, 676, 680, 682, 688, 777, 791, 811, 833, 839, 850, 853, 863], "255": [7, 27, 30, 31, 44, 45, 46, 48, 60, 79, 83, 233, 631, 657, 811, 863], "car": 7, "full_img": 7, "from_numpi": [7, 8, 851], "img_numpi": 7, "torch_unet": 7, "unet_carvana": 7, "ivy_unet": 7, "n_channel": 7, "n_class": 7, "effici": [7, 10, 11, 12, 19, 20, 22, 23, 30, 31, 32, 33, 56, 61, 79, 84, 375, 376, 439, 455, 584, 607, 633, 636, 679, 811, 818, 819, 826, 836, 837, 839, 843, 845, 848, 851, 854, 863, 869, 871, 872], "l62": 7, "mask_to_imag": 7, "ndarrai": [7, 52, 56, 57, 75, 79, 97, 126, 127, 139, 374, 375, 377, 386, 419, 444, 488, 527, 528, 598, 628, 633, 800, 804, 817, 823, 828, 829, 832, 835, 839, 840, 841, 844, 846, 848, 850, 853, 856], "isinst": [7, 13, 28, 30, 31, 832, 840, 843, 844, 852, 853], "uint8": [7, 27, 30, 31, 46, 154, 161, 165, 176, 179, 184, 190, 629, 775, 776, 828, 843], "elif": [7, 10, 827, 832, 839, 840, 841], "bool": [7, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 101, 102, 109, 110, 111, 112, 113, 114, 115, 116, 117, 126, 127, 128, 133, 134, 135, 136, 137, 138, 140, 142, 148, 151, 152, 154, 155, 157, 158, 159, 160, 161, 162, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 181, 187, 191, 195, 196, 198, 199, 201, 203, 206, 207, 212, 213, 215, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 250, 251, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 322, 323, 324, 325, 326, 328, 333, 334, 335, 336, 337, 339, 341, 349, 350, 355, 356, 358, 360, 361, 362, 368, 371, 372, 374, 375, 376, 377, 380, 386, 393, 394, 395, 397, 398, 399, 400, 410, 411, 412, 413, 416, 418, 420, 422, 429, 433, 436, 437, 441, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 460, 461, 462, 463, 467, 468, 469, 471, 472, 473, 474, 475, 478, 482, 486, 489, 491, 492, 493, 495, 498, 500, 502, 503, 504, 505, 506, 508, 520, 521, 522, 523, 524, 526, 527, 528, 529, 530, 531, 533, 536, 537, 539, 540, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 554, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 571, 575, 576, 580, 589, 590, 591, 592, 594, 596, 598, 599, 612, 615, 616, 618, 620, 621, 622, 623, 625, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 658, 659, 660, 661, 662, 665, 666, 667, 672, 673, 674, 675, 676, 677, 679, 680, 681, 683, 684, 685, 686, 690, 691, 693, 695, 696, 697, 698, 701, 702, 703, 705, 706, 707, 708, 709, 710, 712, 713, 714, 715, 716, 717, 718, 723, 724, 725, 727, 728, 729, 734, 735, 737, 738, 739, 740, 742, 743, 744, 745, 746, 748, 749, 750, 751, 752, 755, 756, 757, 759, 760, 761, 762, 763, 764, 765, 766, 767, 772, 773, 775, 776, 777, 787, 791, 794, 795, 804, 805, 809, 828, 830, 832, 839, 840, 843, 844, 846, 848, 853, 862, 863], "fromarrai": [7, 27, 30, 31, 46], "interpol": [7, 44, 56, 79, 352, 371, 374, 386, 531, 635, 662, 846, 869], "bilinear": [7, 56, 79, 374, 410, 846], "torch_mask": 7, "squeez": [7, 44, 63, 86, 638, 869], "torch_result": 7, "to_numpi": [7, 13, 30, 31, 42, 45, 46, 49, 57, 80, 633, 811, 833, 841, 851, 866], "give": [7, 22, 32, 42, 56, 60, 79, 83, 178, 364, 373, 374, 417, 421, 629, 635, 638, 648, 649, 650, 651, 653, 655, 657, 705, 790, 811, 818, 819, 821, 824, 827, 828, 830, 831, 833, 834, 835, 843, 860, 869, 873], "img_tf": 7, "math": [7, 47, 97, 289, 631, 828, 839, 840, 841, 853, 867], "lot": [7, 827, 828, 837, 843, 854, 859, 860, 868], "far": [7, 30, 31, 640, 717, 728, 805, 829, 830, 849, 874, 875], "space": [7, 52, 55, 56, 57, 75, 78, 79, 80, 125, 136, 137, 291, 348, 371, 376, 453, 544, 548, 628, 631, 633, 846, 859], "del": [7, 827], "empty_cach": 7, "permute_dim": [7, 63, 86, 638, 833], "func_wrapp": [7, 50, 55, 56, 72, 78, 79, 109, 110, 111, 112, 113, 114, 115, 116, 117, 290, 294, 299, 300, 302, 366, 625, 631, 787, 829, 840, 845], "242": [7, 79], "mani": [7, 30, 31, 34, 63, 73, 86, 146, 327, 368, 628, 638, 707, 811, 817, 818, 819, 823, 824, 826, 827, 828, 829, 830, 831, 835, 836, 837, 839, 840, 841, 843, 846, 848, 850, 851, 854, 858, 859, 860, 865, 869, 872, 875, 876], "factor": [7, 13, 56, 58, 60, 61, 79, 81, 83, 84, 95, 96, 97, 98, 99, 210, 211, 212, 374, 375, 380, 408, 419, 433, 434, 444, 447, 449, 450, 505, 614, 615, 620, 621, 630, 634, 635, 636, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 666, 775, 777, 778, 790, 791, 795, 832, 859], "inc": 7, "unetdoubleconv": 7, "down1": 7, "unetdown": 7, "128": [7, 11, 30, 31, 44, 53, 55, 60, 76, 78, 83, 102, 167, 243, 374, 396, 406, 544, 554, 629, 631, 633, 635, 636, 650, 652, 657, 681, 811], "down2": 7, "down3": 7, "down4": 7, "1024": [7, 11, 44, 45, 811], "up1": 7, "unetup": 7, "up2": 7, "up3": 7, "up4": 7, "outc": 7, "unetoutconv": 7, "x1": [7, 21, 30, 31, 49, 53, 55, 56, 57, 61, 66, 76, 78, 79, 80, 84, 89, 91, 101, 102, 106, 152, 162, 178, 185, 205, 222, 227, 229, 231, 232, 233, 234, 239, 240, 246, 247, 248, 249, 250, 251, 257, 258, 259, 264, 265, 266, 268, 269, 270, 271, 272, 275, 277, 281, 288, 293, 312, 333, 338, 345, 346, 347, 349, 351, 356, 360, 368, 371, 375, 377, 386, 445, 477, 521, 533, 536, 629, 630, 631, 633, 636, 643, 645, 667, 674, 676, 681, 685, 688, 689, 692, 747, 754, 772, 797, 811, 822, 828, 830, 832, 835, 839, 840, 863, 864], "x2": [7, 21, 30, 31, 53, 55, 56, 57, 61, 66, 76, 78, 79, 80, 84, 89, 101, 102, 106, 152, 178, 185, 205, 222, 227, 229, 231, 232, 233, 234, 239, 240, 246, 247, 248, 249, 250, 251, 257, 258, 259, 264, 265, 266, 268, 269, 270, 271, 272, 275, 277, 281, 288, 293, 333, 338, 345, 346, 347, 349, 351, 356, 360, 371, 375, 377, 386, 431, 445, 477, 521, 533, 536, 629, 630, 631, 633, 636, 643, 667, 674, 676, 681, 685, 688, 689, 692, 747, 772, 797, 822, 828, 830, 832, 835, 839, 840], "x3": [7, 53, 57, 152, 533, 629, 633], "x4": 7, "x5": 7, "in_channel": 7, "out_channel": 7, "mid_channel": 7, "double_conv": 7, "with_bia": [7, 791, 811, 852, 863], "batchnorm2d": [7, 11, 794], "downscal": [7, 57, 80, 539, 540, 561, 633], "maxpool": [7, 11], "doubl": 7, "conv": [7, 635, 791, 846], "maxpool_conv": 7, "upscal": 7, "scale_factor": [7, 56, 79, 374, 410, 846], "align_corn": [7, 56, 79, 374, 410, 846], "conv2dtranspos": [7, 791], "valid": [7, 44, 46, 56, 60, 70, 79, 83, 93, 96, 97, 156, 374, 375, 393, 394, 395, 411, 412, 413, 414, 416, 417, 421, 442, 450, 564, 629, 633, 635, 638, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 701, 709, 766, 767, 775, 776, 791, 804, 818, 824, 828, 830, 834, 838, 841, 843, 862, 870], "bhwc": 7, "diff_h": 7, "diff_w": 7, "pad_width": [7, 56, 63, 79, 86, 377, 483, 638, 700, 713], "constant_pad": [7, 63, 86, 638], "concat": [7, 42, 47, 57, 63, 73, 86, 212, 548, 630, 633, 638, 713, 841, 846, 848, 862], "via": [8, 33, 36, 246, 375, 377, 444, 447, 450, 491, 631, 640, 727, 728, 819, 822, 826, 828, 829, 839, 844, 846, 848, 850, 851, 869], "alongsid": [8, 19, 20, 21, 22, 32, 635, 662, 859], "basic": [8, 15, 17, 21, 24, 28, 30, 31, 34, 37, 377, 490, 811, 812, 817, 830, 843], "contain": [8, 21, 30, 31, 45, 50, 51, 52, 53, 55, 56, 57, 60, 61, 62, 63, 66, 67, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 101, 109, 110, 111, 112, 113, 114, 115, 116, 117, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 162, 164, 165, 166, 167, 170, 171, 172, 174, 176, 179, 196, 198, 199, 200, 205, 213, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 316, 317, 318, 321, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 366, 368, 371, 373, 374, 375, 376, 377, 380, 386, 388, 389, 390, 391, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 406, 407, 408, 410, 411, 412, 413, 414, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 435, 439, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 506, 507, 508, 509, 510, 511, 512, 513, 514, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 544, 545, 546, 547, 548, 549, 550, 551, 552, 555, 556, 557, 559, 560, 561, 563, 564, 565, 567, 568, 570, 575, 576, 580, 583, 585, 590, 591, 592, 593, 594, 596, 598, 599, 606, 612, 613, 614, 615, 616, 618, 620, 621, 622, 623, 625, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 656, 657, 658, 659, 661, 662, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 720, 724, 725, 726, 729, 730, 734, 735, 736, 737, 738, 739, 740, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 770, 772, 775, 782, 783, 791, 792, 793, 795, 796, 800, 804, 805, 809, 811, 813, 815, 817, 818, 821, 822, 823, 824, 825, 827, 828, 830, 831, 833, 835, 836, 837, 838, 839, 841, 843, 845, 846, 847, 848, 849, 852, 854, 855, 856, 858, 862, 869, 870, 875], "singl": [8, 23, 33, 42, 47, 55, 65, 73, 78, 88, 97, 291, 350, 371, 375, 381, 442, 508, 599, 612, 616, 631, 633, 634, 635, 642, 644, 662, 738, 739, 740, 748, 775, 791, 809, 811, 817, 818, 819, 822, 827, 830, 835, 836, 837, 838, 839, 840, 841, 843, 844, 846, 848, 851, 852, 853, 854, 860], "lstm": [8, 9, 635, 661, 791, 848, 869], "sample_input": 8, "uniform": [8, 22, 23, 24, 25, 26, 30, 31, 32, 33, 35, 36, 37, 44, 56, 65, 79, 88, 386, 524, 642, 737, 738, 740, 790, 811, 842, 852, 863, 864, 876], "build": [8, 14, 18, 19, 21, 28, 30, 31, 34, 35, 36, 37, 42, 44, 49, 67, 73, 102, 644, 748, 749, 750, 751, 791, 792, 793, 811, 812, 818, 821, 827, 828, 836, 838, 847, 849, 852, 853, 854, 856, 859, 863, 867, 869, 871, 874, 875, 876], "tf_lstm": [8, 9], "torch_lstm": [8, 9], "physicaldevic": 8, "physical_devic": 8, "device_typ": 8, "alloc": [8, 52, 53, 56, 76, 144, 145, 151, 328, 368, 628, 629, 809, 817, 819, 854], "physic": [8, 203, 630], "modifi": [8, 46, 56, 73, 79, 96, 377, 386, 480, 483, 488, 528, 775, 805, 817, 818, 819, 822, 824, 825, 828, 829, 831, 833, 834, 836, 839, 841, 843, 844, 848], "164": 8, "state_upd": [8, 28], "properti": [8, 28, 73, 96, 97, 98, 99, 100, 101, 105, 793, 795, 822, 826, 836, 841, 843, 850, 851, 852, 875], "_transpil": [8, 28], "those": [8, 19, 43, 44, 61, 63, 73, 79, 84, 86, 125, 178, 239, 272, 492, 613, 628, 629, 631, 633, 636, 638, 640, 643, 683, 686, 698, 719, 746, 814, 817, 818, 819, 820, 823, 826, 827, 828, 837, 839, 840, 841, 843, 846, 858, 866], "wa": [8, 30, 31, 36, 45, 56, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 99, 109, 110, 111, 112, 113, 114, 115, 116, 117, 133, 135, 140, 142, 148, 152, 154, 179, 213, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 250, 251, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 302, 303, 304, 305, 306, 308, 309, 310, 311, 312, 333, 334, 335, 336, 337, 339, 341, 349, 350, 356, 357, 358, 360, 361, 362, 368, 371, 375, 398, 399, 400, 418, 449, 451, 452, 453, 454, 455, 456, 457, 458, 461, 462, 463, 467, 468, 489, 491, 492, 493, 495, 500, 502, 503, 504, 506, 508, 521, 522, 523, 524, 533, 536, 537, 539, 540, 544, 545, 546, 547, 548, 551, 552, 555, 557, 559, 560, 561, 563, 564, 567, 575, 576, 590, 591, 592, 594, 596, 598, 599, 600, 612, 618, 623, 631, 633, 640, 646, 647, 649, 650, 651, 652, 658, 659, 665, 666, 667, 672, 673, 674, 675, 676, 677, 679, 681, 683, 684, 690, 695, 696, 697, 698, 702, 705, 706, 707, 708, 709, 712, 713, 730, 737, 738, 739, 740, 742, 745, 748, 749, 750, 751, 752, 756, 757, 759, 760, 761, 762, 763, 764, 765, 766, 767, 800, 811, 813, 819, 822, 824, 825, 827, 830, 836, 838, 840, 848, 850, 859, 862, 863, 868, 869, 871], "torch_input": 8, "rand": [8, 9, 28, 30, 31, 46, 804, 805, 811, 862], "tf_input": [8, 863], "constant": [8, 9, 15, 17, 22, 25, 26, 32, 35, 37, 42, 56, 63, 64, 79, 86, 87, 96, 97, 321, 368, 374, 376, 377, 420, 455, 456, 483, 638, 640, 641, 700, 723, 736, 790, 794, 811, 836, 841, 844, 852, 853, 854, 862, 864], "tf_output": 8, "toler": [8, 9, 56, 61, 79, 84, 333, 350, 371, 375, 429, 444, 450, 636, 679, 682, 770, 772, 822, 841, 869], "final": [8, 10, 12, 15, 17, 19, 27, 30, 31, 36, 42, 43, 52, 56, 57, 79, 80, 96, 124, 136, 137, 321, 368, 374, 419, 548, 627, 628, 633, 635, 660, 661, 662, 805, 817, 819, 820, 822, 823, 825, 827, 828, 830, 831, 836, 838, 839, 840, 842, 846, 847, 851, 862, 863, 865, 875], "benchmark": [8, 9, 871], "n_run": [8, 9], "tf_time": 8, "round": [8, 55, 56, 78, 79, 96, 98, 99, 100, 222, 235, 239, 245, 246, 272, 286, 292, 293, 344, 371, 631, 815, 817, 818, 819, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 843, 844, 846, 848, 849, 850, 851, 852, 853, 858, 859, 860, 866], "torch_tim": 8, "cpu_speedup": 8, "gpu_speedup": 8, "ntranspil": 8, "5017": 8, "1101": 8, "7519": 8, "901": 8, "607x": 8, "944x": 8, "significantli": [8, 10, 12, 30, 56, 61, 79, 84, 375, 448, 636, 686, 827, 858, 867], "53": [9, 13, 25, 42, 61, 65, 78, 83, 158, 214, 244, 417, 617, 619, 629, 630, 634, 636, 641, 674, 736, 740], "32": [9, 13, 28, 30, 31, 42, 44, 45, 46, 55, 56, 65, 78, 79, 83, 84, 88, 101, 102, 111, 163, 221, 233, 234, 243, 257, 263, 279, 282, 283, 337, 371, 374, 375, 377, 386, 394, 395, 396, 406, 416, 417, 427, 431, 466, 522, 544, 560, 625, 629, 631, 633, 635, 636, 642, 643, 646, 650, 652, 653, 657, 659, 676, 681, 692, 738, 739, 740, 747, 758, 775, 778, 811, 827, 828, 838, 851, 874], "original_output": 9, "transpiled_output": 9, "original_torch_tim": 9, "autograph": 9, "do_not_convert": 9, "compiled_tf_lstm": 9, "transpiled_tf_tim": 9, "original_tf_lstm": 9, "time_major": [9, 79, 374, 420, 635, 661], "return_sequ": [9, 791], "original_tf_tim": 9, "slower": [9, 23, 840], "480074623755541x": 9, "362692848996253x": 9, "openmim": 10, "mim": 10, "0rc8": 10, "get_model": 10, "list_model": 10, "mmengin": 10, "configdict": 10, "saniti": [10, 12, 13, 30, 840], "checkpoint": [10, 11, 47, 854], "correct": [10, 15, 17, 26, 36, 42, 44, 46, 69, 92, 185, 375, 446, 629, 638, 646, 698, 763, 765, 772, 775, 811, 815, 817, 819, 821, 826, 827, 828, 829, 832, 833, 835, 836, 839, 841, 843, 863], "against": [10, 53, 56, 57, 61, 66, 76, 78, 79, 80, 84, 89, 152, 271, 290, 333, 336, 339, 350, 371, 386, 527, 528, 529, 530, 531, 568, 629, 631, 633, 636, 643, 676, 677, 679, 682, 743, 843, 848, 854, 858, 869], "zoo": 10, "checkpoint_nam": [10, 12, 30], "tiny_32xb128": 10, "noema_in1k": 10, "openmmlab": 10, "dure": [10, 12, 23, 25, 30, 33, 35, 36, 54, 58, 69, 73, 77, 81, 92, 213, 374, 398, 399, 400, 579, 600, 614, 615, 620, 630, 633, 634, 635, 636, 639, 646, 658, 676, 714, 715, 716, 763, 765, 783, 794, 795, 809, 818, 826, 828, 829, 832, 836, 837, 839, 840, 841, 842, 843, 846, 854, 862, 869, 870, 875], "get_scal": 10, "cfg": [10, 834], "_config": 10, "train_pipelin": 10, "tensor_imag": 10, "transpiled_graph": [10, 12, 30], "issu": [10, 12, 376, 453, 790, 812, 813, 814, 815, 816, 818, 820, 822, 824, 825, 827, 828, 829, 830, 832, 833, 840, 843, 844, 846, 848, 852, 854, 860, 862], "107960": [10, 12], "export": [10, 12, 45, 827, 868, 875], "lc_all": [10, 12], "en_u": [10, 12], "utf": [10, 12], "ld_library_path": [10, 12], "lib64": [10, 12], "nvidia": [10, 12, 25, 26, 27, 28, 44, 46, 49, 873, 874], "library_path": [10, 12], "stub": [10, 12, 825], "ldconfig": [10, 12], "_f": [10, 12, 30], "comp_model": [10, 12, 30], "equival": [10, 12, 30, 61, 84, 96, 97, 125, 233, 246, 267, 268, 281, 282, 377, 467, 491, 497, 628, 631, 636, 679, 682, 685, 693, 800, 839, 840, 846, 851, 853, 855, 863], "np_imag": [10, 27, 30, 31], "jax_imag": 10, "hk": [10, 12, 30, 44, 48, 811, 853, 863], "rng_kei": [10, 12, 30, 811, 863], "prngkei": [10, 12, 23, 24, 30, 31, 44, 811, 853, 863], "42": [10, 12, 13, 23, 24, 28, 30, 31, 42, 44, 45, 50, 65, 72, 81, 88, 117, 233, 374, 396, 406, 614, 618, 625, 631, 634, 636, 641, 642, 646, 677, 681, 736, 737, 738, 739, 740, 741, 758, 811, 848, 853, 863], "jax_mlp_forward": 10, "param": [10, 12, 13, 30, 44, 45, 46, 48, 73, 79, 80, 102, 534, 551, 552, 633, 797, 811, 853, 863], "init": [10, 12, 30, 44, 46, 56, 79, 375, 433, 444, 450, 811, 822, 853, 863], "rng": [10, 12, 30, 44, 811, 853, 863], "each": [10, 12, 13, 23, 24, 25, 30, 31, 33, 34, 35, 37, 44, 50, 52, 53, 55, 56, 57, 58, 60, 61, 63, 66, 67, 69, 73, 76, 78, 79, 80, 81, 83, 84, 86, 89, 90, 92, 96, 97, 99, 101, 102, 110, 111, 113, 114, 115, 117, 121, 138, 152, 164, 167, 212, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 244, 245, 246, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 294, 296, 297, 302, 304, 305, 306, 308, 309, 310, 315, 326, 329, 330, 331, 337, 345, 349, 353, 358, 361, 366, 368, 371, 374, 375, 377, 380, 381, 384, 386, 393, 394, 395, 398, 399, 400, 403, 411, 412, 413, 414, 417, 419, 420, 421, 428, 429, 434, 443, 444, 448, 450, 461, 462, 463, 467, 468, 469, 474, 475, 477, 478, 480, 482, 483, 486, 488, 497, 498, 505, 507, 514, 519, 520, 521, 522, 523, 524, 533, 536, 544, 551, 552, 568, 593, 613, 615, 616, 618, 620, 621, 622, 625, 627, 628, 629, 630, 631, 633, 634, 635, 636, 638, 640, 642, 643, 644, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 660, 662, 666, 667, 668, 671, 672, 673, 676, 678, 679, 680, 682, 684, 685, 686, 691, 700, 704, 706, 707, 709, 711, 713, 723, 730, 737, 746, 748, 749, 751, 757, 758, 765, 772, 775, 777, 783, 791, 794, 795, 796, 805, 809, 814, 815, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 843, 844, 845, 846, 848, 850, 851, 853, 854, 858, 859, 860, 862, 863, 865, 866, 870, 872, 875], "timeit": [10, 12, 13, 23, 30, 31, 47, 49], "06": [10, 13, 25, 46, 53, 65, 78, 81, 100, 109, 164, 221, 237, 374, 396, 406, 620, 625, 629, 634, 740, 770, 772, 843, 851], "m": [10, 11, 12, 13, 30, 43, 45, 47, 49, 52, 56, 61, 65, 78, 79, 84, 88, 101, 138, 144, 145, 146, 266, 327, 328, 368, 374, 375, 376, 377, 381, 397, 428, 433, 434, 436, 437, 452, 463, 474, 475, 489, 507, 508, 509, 510, 511, 628, 636, 640, 642, 666, 668, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 690, 725, 738, 739, 740, 811, 818, 819, 821, 827, 848], "per": [10, 12, 13, 23, 44, 46, 56, 60, 79, 83, 318, 368, 374, 375, 377, 393, 394, 395, 411, 412, 413, 414, 443, 490, 635, 649, 651, 652, 653, 654, 657, 662, 791, 819, 827, 837, 840, 851], "block_until_readi": 10, "08": [10, 56, 69, 79, 88, 225, 333, 350, 371, 374, 376, 396, 406, 456, 631, 739, 740, 765, 770, 775, 834], "\u00b5": [10, 12, 13, 23], "better": [10, 13, 33, 42, 48, 49, 817, 821, 840, 841, 844, 846, 847, 850, 851, 852, 860, 872], "3x": 10, "increas": [10, 12, 13, 23, 30, 33, 56, 61, 63, 79, 84, 86, 99, 377, 386, 483, 524, 636, 638, 691, 700, 713, 777, 828, 832, 840, 844, 846, 858, 862, 869], "train2017": [10, 12, 27, 30, 31, 811, 863], "000000283921": [10, 12, 30], "out_torch": [10, 12, 30], "et": [10, 635, 636, 662, 686], "took": [10, 78, 279], "out_jax": [10, 12, 30], "66m": 10, "53m": 10, "That": [10, 12, 15, 17, 22, 23, 24, 25, 26, 30, 31, 32, 33, 34, 35, 36, 37, 44, 281, 376, 455, 631, 804, 818, 819, 823, 843, 850, 851, 852, 870], "pretti": [10, 12, 30, 31, 44, 815, 833, 851, 875], "achiev": [10, 12, 13, 30, 811, 812, 814, 820, 827, 828, 836, 837, 843, 846, 851, 853, 856], "solid": [10, 12, 30], "associ": [11, 56, 61, 79, 84, 222, 272, 377, 386, 460, 524, 631, 636, 679, 682, 694, 772, 819, 828, 836, 837, 840, 841, 843, 854], "2023": [11, 12, 25, 26, 27, 28, 44], "52": [11, 13, 42, 55, 78, 80, 81, 88, 227, 237, 239, 386, 522, 544, 545, 560, 614, 631, 633, 634, 635, 636, 646, 659, 681, 740, 758, 804], "110": [11, 44], "10472": 11, "10k": 11, "tx": 11, "23k": 11, "634575": 11, "620k": 11, "jpeg": [11, 45, 46], "619": 11, "70k": 11, "113": 11, "resnet34_weight": 11, "torch_resnet_34": 11, "conv1": 11, "kernel_s": [11, 28, 30, 31, 46, 56, 79, 374, 393, 394, 395, 414, 421, 791, 797], "stride": [11, 56, 60, 79, 80, 83, 101, 374, 377, 393, 394, 395, 411, 412, 413, 414, 416, 417, 421, 459, 633, 635, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 791, 839, 844, 869], "bia": [11, 56, 60, 79, 83, 87, 380, 386, 505, 521, 571, 633, 635, 641, 648, 649, 650, 651, 652, 653, 654, 655, 656, 659, 660, 661, 662, 736, 791, 836, 843, 848, 852], "bn1": 11, "ep": [11, 56, 61, 64, 79, 84, 87, 164, 299, 366, 375, 376, 380, 429, 456, 500, 501, 502, 629, 636, 641, 679, 682, 736, 787, 794], "05": [11, 13, 46, 52, 55, 56, 58, 64, 78, 79, 81, 87, 137, 264, 317, 333, 342, 343, 350, 368, 371, 380, 500, 501, 502, 559, 581, 604, 614, 615, 620, 628, 631, 633, 634, 636, 641, 677, 736, 770, 775, 790, 794, 841, 843], "momentum": [11, 44, 56, 79, 380, 500, 502, 794, 859], "affin": [11, 794], "track_running_stat": [11, 794], "dilat": [11, 48, 56, 60, 79, 83, 374, 377, 411, 412, 413, 416, 417, 421, 483, 635, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 791], "ceil_mod": [11, 56, 79, 374, 393, 394, 395, 411, 412, 413, 416, 791], "layer1": 11, "basicblock": 11, "conv2": 11, "bn2": 11, "layer2": 11, "layer3": 11, "layer4": 11, "output_s": [11, 56, 79, 374, 388, 389, 390, 391, 635, 664, 791, 811, 863], "fc": [11, 17, 44, 811, 852, 863], "in_featur": [11, 60, 83, 635, 659, 843], "out_featur": [11, 60, 83, 635, 659, 843], "resnet_34": 11, "ivy_resnet_34": 11, "34": [11, 13, 42, 44, 78, 79, 80, 88, 167, 237, 264, 285, 374, 386, 417, 528, 544, 545, 629, 631, 633, 635, 636, 642, 659, 678, 739, 740, 829], "333f7ec4": 11, "pth": 11, "83": [11, 13, 42, 61, 83, 88, 286, 374, 386, 396, 406, 417, 522, 631, 635, 636, 659, 674, 739], "3m": 11, "56": [11, 13, 42, 44, 55, 56, 60, 65, 78, 79, 83, 137, 272, 286, 289, 292, 374, 396, 406, 614, 628, 631, 634, 635, 636, 640, 646, 650, 652, 654, 656, 659, 681, 717, 739, 758, 830], "4mb": 11, "preserv": [11, 12, 25, 26, 27, 28, 56, 57, 58, 73, 79, 80, 81, 102, 374, 375, 377, 386, 410, 444, 461, 462, 463, 474, 475, 494, 528, 561, 623, 633, 634, 638, 702, 775, 842, 843, 853, 854, 863], "multipl": [11, 12, 21, 25, 26, 27, 28, 30, 55, 56, 61, 64, 69, 70, 73, 78, 79, 80, 81, 84, 86, 87, 92, 93, 133, 233, 257, 264, 270, 271, 272, 274, 334, 335, 371, 374, 375, 377, 380, 384, 396, 403, 406, 408, 442, 469, 478, 495, 498, 505, 514, 533, 540, 571, 614, 615, 618, 620, 621, 622, 623, 628, 631, 633, 634, 635, 636, 638, 641, 643, 646, 647, 650, 651, 652, 653, 666, 675, 676, 677, 690, 698, 701, 706, 707, 736, 743, 744, 759, 760, 761, 762, 763, 764, 765, 766, 767, 791, 805, 809, 811, 817, 819, 823, 824, 826, 830, 832, 834, 836, 839, 840, 841, 843, 846, 848, 854, 860, 862, 867, 868, 869, 876], "rel": [11, 12, 25, 26, 27, 28, 56, 58, 61, 63, 68, 75, 79, 81, 84, 86, 91, 101, 135, 333, 350, 371, 376, 386, 455, 456, 521, 615, 618, 620, 621, 622, 634, 636, 638, 645, 670, 679, 682, 690, 702, 706, 752, 755, 770, 772, 819, 827, 841, 846, 869, 871], "home": [11, 12, 25, 26, 27, 28, 827], "workspac": [11, 12, 22, 25, 26, 27, 28, 818, 833], "95": [11, 13, 42, 56, 58, 61, 65, 72, 81, 83, 88, 109, 359, 371, 417, 614, 618, 622, 625, 634, 636, 642, 674, 739, 740], "builtin": [11, 818, 850, 852], "callabl": [11, 48, 56, 57, 71, 79, 80, 83, 94, 121, 122, 124, 165, 166, 198, 199, 212, 362, 364, 365, 372, 373, 374, 377, 417, 420, 422, 460, 483, 534, 538, 543, 545, 549, 550, 571, 600, 613, 617, 619, 624, 627, 629, 630, 633, 634, 639, 640, 714, 715, 716, 723, 724, 725, 727, 728, 729, 730, 770, 773, 783, 795, 806, 809, 826, 832, 838, 840, 848, 861, 862, 863, 864], "track": [11, 21, 30, 31, 43, 44, 809, 818, 819, 822, 838, 839, 862, 869], "properli": [11, 818, 821, 832, 834, 840, 843], "_trace_graph": 11, "shown": [11, 28, 30, 71, 73, 94, 256, 279, 337, 371, 631, 817, 818, 819, 822, 825, 827, 828, 830, 832, 834, 835, 840, 841, 843, 844, 845, 848, 850, 854], "8507": 11, "1351": 11, "0069": 11, "85072625": 11, "13506091": 11, "00688289": 11, "resnet50_weight": 11, "torch_resnet_50": 11, "imagenet1k_v2": 11, "11ad3fa6": 11, "97": [11, 13, 42, 56, 58, 78, 81, 88, 225, 359, 371, 618, 631, 634, 739], "8m": 11, "8mb": 11, "bottleneck": [11, 858], "conv3": 11, "bn3": 11, "2048": [11, 592, 633], "resnet_50": 11, "ivy_resnet_50": 11, "3429": 11, "0408": 11, "0121": 11, "34288204": 11, "04077014": 11, "01212029": 11, "depend": [12, 13, 15, 17, 21, 22, 23, 24, 25, 26, 27, 28, 30, 32, 35, 52, 53, 56, 57, 61, 67, 68, 76, 79, 84, 91, 92, 122, 128, 151, 219, 220, 221, 224, 225, 226, 227, 236, 237, 239, 242, 244, 260, 261, 262, 263, 272, 274, 277, 284, 285, 289, 290, 358, 371, 374, 375, 420, 428, 446, 594, 627, 628, 629, 631, 633, 635, 636, 643, 645, 660, 671, 672, 683, 684, 685, 686, 747, 752, 755, 765, 813, 815, 817, 818, 819, 825, 828, 829, 831, 833, 837, 839, 840, 841, 842, 843, 846, 848, 854, 855, 859, 862, 867, 869, 870], "yet": [12, 13, 15, 17, 21, 22, 23, 24, 25, 26, 27, 28, 31, 46, 367, 369, 370, 378, 379, 383, 817, 818, 833, 854, 855, 862, 863, 864], "broken": [12, 25, 26, 27, 28, 865, 869], "permiss": [12, 25, 26, 27, 28, 818, 827], "conflict": [12, 25, 26, 27, 28, 36, 818, 819, 827, 840, 851], "behaviour": [12, 25, 26, 27, 28, 111, 114, 273, 625, 631, 816, 819, 821, 822, 823, 826, 828, 829, 831, 832, 835, 836, 837, 839, 840, 843, 844, 850], "system": [12, 25, 26, 27, 28, 46, 375, 445, 636, 685, 775, 811, 818, 819, 820, 824, 827, 828, 854, 863, 867, 869, 872, 874, 876], "recommend": [12, 25, 26, 27, 28, 267, 268, 281, 376, 453, 631, 646, 760, 763, 813, 818, 824, 825, 834, 837, 838, 862], "virtual": [12, 25, 26, 27, 28, 819, 840, 859, 872, 873], "pypa": [12, 25, 26, 27, 28], "venv": [12, 25, 26, 27, 28], "autofeatureextractor": [12, 30], "extractor": [12, 15, 17, 30, 46, 811], "hug": [12, 30, 862], "face": [12, 30, 812, 818, 822, 833, 834, 838, 846, 848, 862, 869, 875], "arch_nam": [12, 30], "microsoft": [12, 30, 859, 862, 863, 869, 874, 876], "50": [12, 13, 30, 31, 42, 46, 56, 69, 78, 79, 80, 238, 278, 356, 371, 374, 375, 377, 403, 427, 435, 488, 546, 552, 559, 560, 576, 591, 631, 633, 636, 640, 643, 646, 675, 681, 692, 718, 720, 746, 758, 775, 778, 838, 850, 862, 863], "feature_extractor": [12, 30], "23": [12, 13, 25, 26, 27, 28, 42, 44, 46, 55, 56, 61, 65, 75, 78, 79, 80, 83, 88, 135, 234, 237, 254, 255, 256, 279, 281, 282, 283, 285, 292, 337, 338, 371, 374, 377, 386, 393, 394, 396, 406, 411, 412, 413, 417, 421, 466, 522, 528, 628, 631, 635, 636, 640, 643, 654, 656, 670, 674, 677, 685, 687, 688, 718, 725, 729, 738, 739, 740, 747, 811, 827, 843, 848], "980130": 12, "9342": 12, "980177": 12, "609": 12, "980207": 12, "1518": 12, "351203": 12, "390": [12, 25, 26, 27, 28], "inputs_jax": [12, 30], "last_hidden_st": [12, 30], "jax_forward": [12, 30], "jit_appli": 12, "63": [12, 13, 42, 46, 55, 72, 78, 83, 84, 117, 278, 285, 286, 374, 386, 396, 406, 417, 522, 631, 636, 640, 646, 666, 681, 718, 729, 758], "122": [12, 53, 167, 237, 631], "134": [12, 60, 636, 659, 678], "2x": [12, 30], "ipytest": 13, "panda": [13, 44, 46, 859, 866], "scikit": [13, 375, 446, 859], "cryptographi": 13, "frontend": [13, 578, 633, 772, 773, 776, 780, 783, 811, 816, 819, 821, 827, 828, 832, 833, 838, 842, 843, 846, 847, 849, 856, 863, 869], "sklearn": 13, "classification_report": 13, "model_select": 13, "train_test_split": 13, "load_breast_canc": 13, "pd": [13, 46], "functool": [13, 44, 832, 840, 850], "autoconfig": 13, "tqdm_notebook": 13, "These": [13, 37, 56, 79, 375, 377, 386, 428, 482, 521, 635, 636, 662, 671, 672, 811, 814, 816, 817, 818, 819, 822, 826, 828, 830, 831, 835, 836, 839, 840, 843, 848, 849, 851, 852, 853, 854, 856, 858, 859, 860, 863, 869, 873, 875, 876], "sole": [13, 42, 835, 844, 868, 869, 870], "re": [13, 19, 22, 23, 24, 30, 31, 32, 33, 34, 35, 36, 37, 44, 46, 47, 49, 56, 57, 66, 79, 89, 99, 212, 318, 368, 375, 377, 449, 484, 485, 544, 630, 633, 636, 638, 643, 688, 706, 745, 747, 812, 813, 817, 818, 819, 820, 821, 822, 825, 828, 833, 838, 839, 840, 841, 842, 844, 846, 850, 853, 854, 857, 858, 859, 869], "test_jax_gpu": 13, "xla_bridg": [13, 44], "get_backend": [13, 836], "test_torch_gpu": 13, "test_xgboost_gpu": 13, "capsi": 13, "load_diabet": 13, "y": [13, 30, 31, 42, 43, 45, 46, 50, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 72, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 101, 102, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 128, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 148, 151, 152, 153, 162, 164, 167, 179, 192, 196, 200, 205, 206, 207, 211, 213, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 250, 251, 253, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 333, 334, 335, 341, 349, 350, 351, 352, 353, 358, 360, 362, 366, 368, 371, 374, 375, 376, 377, 380, 386, 394, 396, 398, 399, 403, 406, 408, 412, 418, 425, 429, 435, 442, 449, 451, 452, 454, 455, 456, 457, 458, 468, 470, 479, 483, 491, 492, 493, 495, 499, 503, 504, 506, 514, 520, 521, 522, 523, 524, 527, 529, 530, 531, 533, 536, 539, 540, 543, 544, 546, 547, 548, 551, 552, 553, 557, 559, 560, 561, 563, 564, 567, 568, 573, 580, 581, 582, 585, 588, 589, 591, 592, 594, 596, 598, 599, 600, 604, 605, 608, 611, 612, 613, 623, 625, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 640, 641, 642, 643, 644, 645, 646, 647, 650, 652, 654, 656, 657, 658, 659, 666, 667, 668, 672, 673, 674, 675, 676, 677, 679, 680, 681, 682, 684, 686, 687, 688, 690, 692, 693, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 717, 720, 723, 724, 726, 734, 736, 737, 738, 739, 740, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 809, 811, 824, 826, 829, 830, 838, 840, 841, 843, 844, 846, 848, 850, 862], "target": [13, 15, 17, 23, 25, 26, 28, 30, 31, 33, 34, 35, 36, 37, 46, 56, 79, 194, 376, 451, 452, 453, 454, 455, 456, 457, 458, 630, 770, 791, 793, 799, 811, 815, 818, 821, 824, 833, 834, 841, 842, 847, 851, 852, 853, 863, 864, 865, 867, 868, 869, 872, 874, 875], "xgb_model": 13, "xgbregressor": 13, "tree_method": 13, "caus": [13, 376, 453, 818, 819, 822, 824, 826, 827, 828, 830, 839, 841, 843, 854], "either": [13, 25, 26, 35, 36, 37, 38, 42, 48, 55, 56, 57, 60, 69, 73, 78, 79, 80, 83, 84, 111, 114, 117, 122, 132, 133, 143, 219, 220, 221, 222, 227, 237, 239, 240, 242, 244, 246, 253, 254, 260, 261, 262, 263, 264, 272, 281, 283, 284, 286, 289, 290, 336, 358, 371, 374, 380, 386, 396, 406, 416, 417, 421, 505, 522, 523, 543, 563, 571, 572, 580, 600, 625, 627, 628, 631, 633, 635, 636, 639, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 662, 676, 681, 684, 688, 714, 715, 716, 756, 757, 762, 764, 777, 791, 792, 793, 800, 813, 817, 818, 819, 824, 825, 826, 828, 829, 830, 831, 832, 834, 836, 839, 840, 841, 842, 843, 846, 848, 851, 854, 855, 863, 869], "fit": [13, 63, 86, 638, 704, 817, 840, 848, 865, 866, 869], "consol": [13, 574, 633, 811, 819, 834, 843, 850, 855], "gpu_hist": 13, "captur": [13, 838, 843, 853, 870], "readouterr": 13, "err": 13, "99": [13, 42, 55, 56, 58, 76, 78, 88, 134, 221, 236, 359, 371, 591, 618, 628, 631, 633, 634, 640, 646, 721, 729, 739, 758], "tabular": 13, "pulsar": 13, "emploi": [13, 875], "column": [13, 46, 56, 61, 79, 84, 96, 97, 131, 146, 327, 368, 375, 377, 384, 386, 428, 434, 446, 467, 472, 474, 475, 479, 481, 514, 520, 521, 628, 636, 671, 672, 677, 683, 685, 686, 691, 775, 790], "well": [13, 30, 31, 44, 45, 46, 80, 376, 455, 557, 633, 636, 685, 777, 811, 813, 817, 819, 825, 827, 828, 832, 839, 840, 841, 843, 852, 853, 863, 868, 869, 870, 874], "standard": [13, 55, 61, 64, 65, 69, 78, 87, 88, 92, 125, 126, 127, 129, 130, 131, 132, 134, 135, 136, 138, 141, 142, 143, 144, 145, 147, 148, 154, 164, 167, 179, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 239, 240, 242, 244, 245, 246, 250, 251, 252, 253, 254, 255, 259, 261, 262, 263, 264, 266, 267, 268, 269, 272, 274, 275, 276, 277, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 334, 335, 337, 371, 374, 375, 377, 386, 418, 448, 491, 495, 521, 613, 628, 629, 631, 633, 636, 638, 641, 642, 643, 644, 645, 646, 647, 666, 667, 668, 669, 670, 672, 673, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 692, 693, 699, 701, 702, 703, 705, 706, 708, 709, 713, 736, 739, 743, 744, 746, 747, 748, 749, 750, 751, 752, 755, 759, 760, 761, 762, 763, 764, 765, 766, 767, 777, 790, 794, 804, 805, 811, 814, 821, 822, 823, 826, 828, 831, 835, 839, 842, 843, 844, 854, 857, 863, 865, 867, 868, 871, 872, 874], "extra": [13, 31, 73, 102, 121, 613, 627, 633, 823, 828, 830, 837, 839, 840, 841, 846, 848, 862, 863, 866, 871], "dimens": [13, 52, 56, 57, 60, 61, 62, 63, 65, 66, 67, 69, 70, 73, 75, 79, 80, 83, 84, 85, 86, 88, 89, 90, 92, 93, 99, 101, 102, 105, 112, 116, 140, 144, 145, 315, 326, 328, 329, 330, 331, 334, 335, 339, 340, 348, 355, 362, 368, 371, 372, 374, 375, 376, 377, 380, 381, 384, 386, 388, 390, 391, 393, 394, 395, 397, 402, 403, 407, 411, 412, 413, 414, 417, 418, 420, 421, 423, 425, 428, 437, 446, 451, 455, 461, 462, 463, 467, 473, 484, 485, 486, 487, 489, 491, 495, 500, 501, 502, 505, 509, 511, 514, 524, 526, 527, 528, 529, 530, 531, 544, 545, 546, 548, 555, 589, 593, 613, 625, 628, 633, 635, 636, 637, 638, 639, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 661, 662, 666, 667, 668, 670, 671, 672, 673, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 690, 692, 693, 696, 697, 699, 701, 702, 703, 704, 705, 706, 707, 708, 709, 712, 714, 715, 716, 742, 743, 744, 746, 748, 749, 750, 751, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 775, 777, 787, 791, 794, 830, 832, 838, 840, 841, 843, 846, 848, 851], "load_data": 13, "standardscal": 13, "df": [13, 46], "read_csv": [13, 46], "delimit": [13, 851], "drop": [13, 46, 56, 79, 330, 368, 376, 377, 455, 492, 790, 791, 818, 854], "sc": 13, "fit_transform": 13, "prepare_data": 13, "tupl": [13, 48, 51, 52, 53, 55, 56, 57, 60, 61, 63, 66, 67, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 99, 105, 109, 110, 111, 112, 113, 114, 115, 116, 117, 121, 126, 127, 133, 135, 139, 140, 142, 146, 148, 152, 153, 154, 165, 166, 167, 171, 172, 178, 179, 185, 195, 198, 199, 213, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 249, 250, 251, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 302, 303, 304, 305, 306, 308, 309, 310, 312, 315, 320, 324, 327, 333, 334, 335, 336, 337, 339, 340, 341, 344, 345, 347, 348, 349, 350, 354, 355, 356, 357, 358, 360, 361, 362, 363, 368, 371, 373, 374, 375, 377, 380, 381, 382, 384, 386, 393, 394, 395, 397, 398, 399, 400, 402, 407, 408, 411, 412, 413, 414, 416, 417, 418, 419, 420, 421, 428, 429, 433, 437, 439, 444, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 461, 462, 463, 464, 467, 468, 478, 483, 489, 491, 492, 493, 495, 497, 500, 502, 503, 504, 505, 506, 508, 509, 511, 512, 513, 521, 522, 523, 524, 526, 527, 528, 529, 530, 533, 536, 537, 539, 540, 544, 545, 546, 547, 548, 549, 550, 551, 552, 554, 555, 557, 559, 560, 561, 563, 564, 567, 575, 576, 580, 590, 591, 592, 593, 594, 596, 597, 598, 599, 612, 613, 614, 615, 616, 618, 620, 623, 627, 628, 629, 630, 631, 633, 634, 635, 636, 638, 639, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 665, 666, 667, 671, 672, 673, 674, 675, 676, 677, 679, 681, 682, 683, 684, 686, 688, 689, 690, 693, 695, 696, 697, 698, 699, 700, 702, 703, 705, 706, 707, 708, 709, 712, 713, 714, 715, 716, 717, 718, 720, 721, 722, 724, 725, 726, 728, 729, 732, 733, 734, 735, 737, 738, 739, 740, 742, 745, 746, 748, 749, 750, 751, 752, 753, 756, 757, 759, 760, 761, 762, 763, 764, 765, 766, 767, 775, 776, 777, 790, 791, 793, 804, 805, 823, 828, 835, 836, 839, 841, 843, 848, 851, 852, 854, 862, 863, 864], "astyp": [13, 15, 17, 22, 44, 45, 46, 53, 60, 76, 83, 629, 635, 651, 653, 654, 657, 811, 828, 839, 840, 846, 864], "csv": [13, 46], "117564": 13, "structur": [13, 31, 73, 76, 102, 164, 167, 541, 633, 640, 721, 730, 811, 817, 819, 820, 823, 826, 836, 841, 842, 843, 844, 851, 852, 868, 869], "navig": [13, 815, 818, 819, 821, 833], "rerun": [13, 44], "method": [13, 21, 30, 46, 50, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 101, 102, 109, 110, 111, 112, 113, 114, 115, 116, 117, 127, 128, 130, 132, 133, 135, 137, 138, 139, 140, 142, 144, 145, 148, 151, 152, 153, 154, 164, 167, 171, 172, 179, 196, 213, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 302, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 316, 317, 318, 321, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 371, 374, 375, 376, 377, 386, 393, 394, 395, 396, 398, 399, 400, 402, 406, 407, 408, 411, 412, 413, 417, 418, 421, 422, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 435, 439, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 506, 508, 509, 510, 511, 512, 513, 514, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 536, 537, 539, 540, 541, 543, 544, 545, 546, 547, 548, 551, 552, 555, 557, 559, 560, 561, 563, 564, 565, 567, 568, 570, 575, 576, 590, 591, 592, 593, 594, 596, 598, 599, 612, 614, 615, 618, 620, 621, 622, 623, 628, 629, 631, 633, 634, 636, 637, 640, 643, 646, 647, 649, 650, 651, 652, 653, 654, 657, 658, 659, 661, 665, 666, 667, 669, 670, 671, 672, 673, 674, 675, 676, 677, 679, 680, 681, 682, 683, 684, 686, 687, 690, 691, 693, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 728, 729, 730, 736, 737, 738, 739, 740, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 765, 766, 767, 772, 783, 789, 790, 791, 792, 793, 817, 819, 822, 823, 827, 828, 829, 830, 831, 835, 843, 844, 848, 849, 852, 853, 854, 862, 863, 864, 870, 876], "signific": [13, 56, 376, 456, 845, 854, 858, 859, 869], "object": [13, 21, 26, 28, 30, 44, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 102, 105, 106, 128, 132, 133, 143, 155, 164, 167, 175, 178, 213, 271, 508, 556, 572, 616, 628, 629, 630, 633, 634, 640, 642, 720, 721, 722, 724, 725, 726, 732, 733, 734, 735, 742, 770, 772, 773, 780, 781, 782, 788, 789, 791, 792, 793, 800, 804, 811, 823, 824, 826, 827, 836, 837, 840, 841, 843, 846, 850, 853, 861, 862, 863, 864, 869, 875], "logist": 13, "booster": 13, "gblinear": 13, "n_estim": 13, "reg_lambda": 13, "reg_alpha": 13, "base_margin": 13, "xgb_cl": 13, "ivy_cl": 13, "n": [13, 42, 45, 46, 47, 49, 52, 55, 56, 60, 61, 63, 65, 66, 69, 70, 78, 79, 83, 84, 86, 88, 89, 92, 93, 96, 101, 138, 144, 145, 146, 219, 289, 291, 327, 328, 340, 368, 371, 374, 375, 376, 377, 380, 381, 384, 386, 388, 389, 390, 391, 396, 397, 402, 403, 406, 407, 408, 416, 417, 418, 419, 421, 429, 430, 437, 441, 443, 445, 450, 451, 463, 469, 472, 476, 478, 489, 498, 500, 501, 502, 505, 507, 508, 509, 510, 511, 514, 521, 531, 628, 631, 635, 636, 638, 640, 642, 643, 646, 647, 648, 649, 650, 651, 653, 655, 657, 662, 667, 670, 674, 676, 677, 678, 679, 680, 681, 682, 683, 686, 687, 690, 691, 692, 693, 700, 701, 703, 709, 713, 725, 738, 739, 740, 746, 760, 762, 763, 764, 765, 766, 767, 791, 794, 804, 811, 821, 825, 827, 843, 855, 863], "436": 13, "48": [13, 42, 46, 55, 56, 78, 79, 80, 81, 88, 111, 221, 244, 286, 374, 394, 395, 396, 406, 412, 413, 416, 559, 614, 618, 625, 631, 633, 634, 636, 640, 646, 681, 718, 739, 758], "t4": 13, "higher": [13, 56, 79, 375, 377, 386, 432, 444, 450, 461, 462, 463, 531, 790, 828, 839, 847, 848, 853, 854, 866, 869, 870, 873, 875, 876], "tier": [13, 820], "reduc": [13, 56, 57, 61, 66, 69, 70, 73, 79, 80, 84, 89, 92, 93, 212, 334, 335, 355, 371, 372, 386, 526, 527, 528, 529, 530, 531, 545, 630, 633, 636, 643, 646, 647, 683, 743, 744, 759, 760, 761, 762, 763, 764, 765, 766, 767, 804, 805, 827, 832, 840, 846, 848, 850, 862, 867, 871, 872, 873], "lower": [13, 46, 52, 55, 56, 61, 65, 78, 79, 84, 88, 131, 144, 270, 306, 312, 318, 327, 328, 366, 368, 386, 524, 525, 531, 628, 631, 636, 642, 666, 672, 673, 679, 740, 777, 790, 819, 828, 830, 840, 843, 848, 854, 856, 865, 866, 867, 869, 870, 875, 876], "although": [13, 636, 684, 813, 823, 825, 826, 840, 846, 867, 869], "experi": [13, 19, 46, 811, 818, 832, 843, 849, 851, 854], "substanti": [13, 814, 819, 823, 828, 843, 859, 869], "dive": [13, 19, 21, 30, 42, 811, 812, 813, 816, 817, 819, 822, 826, 828, 834, 841, 847, 850, 851, 854, 875], "stuff": 13, "tool": [13, 21, 30, 31, 811, 818, 819, 830, 834, 849, 853, 854, 857, 860, 863, 867, 868, 869, 870, 872, 875, 876], "30": [13, 25, 26, 27, 28, 42, 44, 55, 56, 57, 79, 80, 88, 92, 102, 272, 303, 348, 356, 371, 374, 377, 396, 406, 417, 466, 488, 512, 544, 546, 551, 552, 559, 560, 576, 585, 591, 631, 633, 636, 640, 646, 675, 681, 726, 738, 739, 757, 758, 762, 777, 790, 805, 814, 827], "25": [13, 42, 44, 45, 46, 55, 56, 57, 61, 62, 65, 69, 72, 78, 79, 80, 83, 84, 87, 88, 92, 101, 102, 117, 136, 222, 223, 233, 239, 241, 252, 257, 272, 277, 280, 282, 285, 286, 287, 292, 314, 368, 376, 386, 417, 452, 455, 522, 531, 559, 560, 576, 591, 628, 631, 633, 636, 637, 640, 641, 646, 649, 666, 670, 675, 691, 696, 718, 725, 729, 736, 738, 739, 740, 757, 758, 760, 765, 820, 826, 838], "22": [13, 25, 26, 27, 28, 42, 44, 46, 49, 50, 55, 56, 57, 65, 69, 72, 79, 80, 83, 88, 112, 117, 234, 242, 303, 307, 366, 374, 375, 376, 377, 382, 386, 393, 394, 396, 411, 412, 413, 417, 421, 427, 451, 466, 512, 522, 545, 576, 612, 625, 631, 635, 636, 640, 643, 646, 658, 659, 670, 675, 681, 685, 725, 735, 738, 739, 740, 747, 757, 758, 818, 826, 832], "201": [13, 78, 79, 224, 396, 631], "20x": 13, "ivy_pr": 13, "xgb_pred": 13, "ivyclassifi": 13, "nxgbclassifi": 13, "precis": [13, 56, 61, 79, 84, 164, 252, 272, 279, 286, 345, 371, 375, 386, 429, 521, 584, 607, 629, 631, 633, 636, 672, 673, 677, 684, 686, 687, 693, 783, 827, 840, 845, 846, 873], "recal": 13, "f1": [13, 828], "score": [13, 60, 83, 376, 458, 635, 663, 665, 811], "106597": 13, "10967": 13, "macro": 13, "avg": [13, 374, 393, 395, 416], "96": [13, 42, 56, 58, 78, 79, 80, 88, 236, 257, 289, 359, 371, 374, 396, 544, 545, 618, 631, 633, 634, 636, 646, 681, 740, 758], "67": [13, 42, 55, 56, 57, 61, 78, 79, 80, 83, 88, 101, 237, 242, 282, 283, 285, 292, 303, 307, 366, 386, 417, 522, 544, 545, 591, 617, 619, 631, 633, 634, 636, 674, 740], "73": [13, 42, 55, 84, 286, 386, 522, 636, 642, 666, 739, 843], "92": [13, 42, 46, 56, 57, 88, 359, 371, 612, 622, 634, 636, 668, 739, 740], "28": [13, 28, 30, 31, 42, 44, 46, 49, 55, 56, 60, 64, 78, 79, 80, 83, 84, 88, 92, 238, 241, 262, 278, 374, 375, 396, 406, 427, 528, 559, 614, 631, 633, 634, 635, 636, 641, 646, 650, 652, 654, 656, 657, 659, 681, 736, 738, 739, 740, 758, 762, 811], "27": [13, 42, 44, 49, 55, 56, 61, 65, 78, 79, 80, 83, 84, 88, 92, 233, 234, 237, 277, 285, 286, 345, 371, 374, 396, 406, 560, 590, 631, 633, 636, 640, 646, 676, 681, 691, 718, 725, 739, 758, 762, 775, 877], "852": [13, 635, 659], "449": 13, "47": [13, 42, 46, 55, 56, 61, 65, 78, 79, 80, 81, 83, 88, 228, 286, 374, 386, 394, 412, 413, 522, 544, 545, 618, 631, 633, 634, 635, 636, 642, 659, 674, 739, 740], "82": [13, 42, 44, 49, 50, 55, 81, 88, 112, 225, 386, 522, 614, 634, 739, 740, 815, 833], "68": [13, 42, 46, 49, 55, 88, 112, 134, 227, 374, 396, 406, 625, 628, 631, 636, 641, 692, 736, 739, 740], "nevertheless": 13, "fall": [13, 44, 795, 817, 828, 847], "short": [13, 42, 56, 79, 422, 635, 660, 661, 817, 819, 828, 848, 852], "blaze": 13, "31": [13, 25, 26, 27, 28, 42, 44, 45, 49, 50, 55, 56, 78, 79, 80, 83, 88, 112, 117, 137, 233, 264, 272, 374, 377, 386, 395, 396, 466, 522, 539, 625, 628, 631, 633, 739, 740, 851], "62": [13, 42, 44, 50, 72, 78, 79, 88, 112, 257, 285, 631, 641, 642, 736, 738, 740], "36": [13, 42, 46, 55, 56, 60, 69, 79, 80, 84, 227, 282, 283, 348, 371, 374, 375, 386, 396, 406, 432, 522, 544, 545, 592, 631, 633, 636, 640, 646, 659, 678, 681, 691, 728, 758], "35": [13, 42, 50, 60, 61, 72, 78, 79, 83, 84, 88, 112, 227, 286, 374, 396, 406, 631, 635, 636, 643, 646, 659, 667, 674, 739, 747, 758], "37": [13, 25, 26, 27, 28, 42, 50, 55, 56, 72, 78, 79, 83, 101, 112, 225, 233, 282, 285, 289, 382, 417, 512, 631, 635, 636, 640, 642, 659, 678, 725, 739, 827], "surpass": 13, "remark": [13, 854], "artifici": 13, "simpli": [13, 21, 30, 31, 33, 42, 50, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 101, 109, 110, 111, 112, 113, 114, 115, 116, 117, 127, 128, 130, 132, 133, 135, 137, 138, 139, 140, 142, 144, 145, 148, 152, 153, 154, 167, 171, 172, 179, 196, 213, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 300, 302, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 316, 317, 318, 321, 328, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 374, 377, 386, 393, 394, 395, 396, 398, 399, 400, 402, 406, 407, 408, 411, 412, 413, 417, 418, 421, 422, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 435, 439, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 506, 508, 509, 510, 511, 512, 513, 514, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 536, 537, 539, 540, 543, 544, 545, 546, 547, 548, 551, 552, 555, 557, 559, 561, 563, 564, 565, 567, 568, 570, 575, 576, 590, 591, 592, 593, 594, 596, 598, 599, 612, 614, 615, 618, 620, 621, 622, 623, 631, 649, 650, 651, 652, 653, 654, 657, 658, 659, 661, 665, 666, 667, 669, 670, 671, 672, 673, 674, 675, 676, 677, 682, 683, 684, 686, 693, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 736, 737, 738, 739, 740, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 765, 766, 767, 811, 817, 818, 819, 823, 824, 825, 827, 828, 829, 830, 831, 833, 835, 836, 839, 840, 841, 843, 846, 848, 852, 853, 854, 856, 870, 875], "stack": [13, 23, 25, 26, 27, 28, 33, 42, 46, 56, 61, 63, 73, 79, 84, 86, 101, 144, 145, 328, 368, 375, 377, 428, 467, 468, 470, 479, 499, 578, 587, 610, 628, 633, 636, 638, 640, 668, 670, 671, 672, 673, 675, 676, 678, 679, 680, 682, 683, 684, 686, 687, 690, 717, 727, 728, 791, 811, 816, 822, 839, 848, 865, 867, 874, 875], "x_doubl": 13, "vstack": [13, 56, 79, 377, 479], "y_doubl": 13, "235128": 13, "41": [13, 25, 26, 27, 28, 42, 44, 49, 55, 56, 61, 78, 79, 80, 83, 84, 112, 226, 234, 241, 272, 286, 374, 375, 382, 386, 394, 412, 417, 439, 512, 522, 539, 625, 631, 633, 636, 646, 666, 674, 764], "315": [13, 278, 631], "879": 13, "380": 13, "seem": [13, 817, 818, 846, 852, 853, 854, 869], "observ": [13, 56, 79, 386, 520, 521, 819, 828, 832, 848, 862, 871], "examin": 13, "600": [13, 46, 80, 83, 374, 398, 399, 552, 827], "conduct": [13, 873], "num_boosting_round": 13, "300": [13, 78, 80, 83, 282, 374, 398, 399, 552, 576, 631, 633, 636, 675, 843], "400": [13, 80, 83, 374, 398, 399, 552, 576, 633, 636, 675], "500": [13, 56, 79, 80, 83, 374, 375, 398, 399, 450, 552, 633], "ivy_elapsed_tim": 13, "xgb_elapsed_tim": 13, "ivy_tim": 13, "partial": [13, 56, 73, 79, 165, 166, 198, 199, 348, 371, 374, 375, 377, 386, 422, 437, 444, 484, 485, 486, 487, 528, 549, 550, 619, 629, 630, 633, 634, 776, 778, 792, 793, 819, 825, 846], "xgb_time": 13, "fivethirtyeight": 13, "legend": [13, 46, 817], "loc": [13, 866], "best": [13, 44, 571, 633, 805, 809, 811, 812, 815, 816, 817, 818, 819, 821, 827, 828, 832, 833, 842, 843, 844, 855, 872, 873], "xlabel": 13, "ylabel": 13, "obviou": [13, 851, 869], "trend": 13, "longer": [13, 818, 828, 839, 843, 869], "gap": 13, "slightli": [13, 311, 368, 826, 840, 843, 848, 852], "x_train": 13, "y_train": [13, 46], "train_siz": [13, 44], "random_st": [13, 375, 433], "clear": [13, 194, 630, 817, 819, 824, 828, 829, 830, 840, 846, 848, 850, 858, 859, 860, 869], "amount": [13, 62, 85, 214, 630, 637, 695, 696, 697, 805, 818, 827, 829, 841], "widen": 13, "impress": 13, "outcom": [13, 56, 79, 336, 348, 371, 805], "tend": 13, "outperform": 13, "proce": [13, 817, 818], "95933": 13, "9874": 13, "105807": 13, "70": [13, 42, 44, 56, 79, 80, 374, 396, 406, 552, 576, 636, 646, 681, 758, 859], "93": [13, 42, 56, 78, 80, 88, 197, 286, 359, 371, 544, 545, 630, 633, 739, 740], "wrap": [13, 21, 23, 30, 31, 33, 44, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 101, 102, 105, 109, 110, 111, 112, 113, 114, 115, 116, 117, 127, 128, 130, 132, 133, 135, 137, 138, 139, 140, 142, 144, 145, 148, 152, 153, 154, 167, 171, 172, 179, 196, 213, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 300, 302, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 316, 317, 318, 321, 328, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 374, 377, 386, 393, 394, 395, 396, 398, 399, 400, 402, 406, 407, 408, 411, 412, 413, 417, 418, 421, 422, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 435, 439, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 506, 508, 509, 510, 511, 512, 513, 514, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 536, 537, 538, 539, 540, 543, 544, 545, 546, 547, 548, 551, 552, 555, 557, 559, 560, 561, 563, 564, 565, 567, 568, 570, 575, 576, 587, 590, 591, 592, 593, 594, 596, 598, 599, 610, 612, 614, 615, 618, 620, 621, 622, 623, 633, 649, 650, 651, 652, 653, 654, 657, 658, 659, 661, 665, 666, 667, 669, 670, 671, 672, 673, 674, 675, 676, 677, 682, 683, 684, 686, 693, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 736, 737, 738, 739, 740, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 765, 766, 767, 772, 811, 821, 822, 823, 824, 826, 827, 828, 829, 831, 832, 835, 836, 839, 840, 843, 848, 850, 853, 854, 856, 862, 863, 865, 869, 870, 875, 876], "balanc": 13, "breast": 13, "cancer": 13, "return_x_i": 13, "x_test": 13, "y_test": 13, "test_siz": [13, 44], "76": [13, 23, 42, 55, 56, 69, 76, 78, 79, 88, 167, 221, 237, 285, 321, 368, 406, 629, 631, 636, 640, 646, 688, 725, 739, 758], "87": [13, 42, 81, 83, 233, 262, 386, 417, 522, 614, 631, 634, 775, 833], "171": [13, 61, 636, 674, 775], "90": [13, 42, 44, 46, 55, 56, 78, 79, 238, 278, 282, 359, 371, 377, 386, 489, 522, 631, 636, 646, 681, 758, 805, 859], "86": [13, 42, 65, 79, 88, 374, 386, 406, 522, 614, 634, 739, 740], "88": [13, 42, 81, 88, 111, 386, 522, 618, 625, 634, 636, 642, 646, 681, 740, 758], "perfectli": [13, 777, 860], "align": [13, 56, 73, 79, 374, 375, 410, 426, 635, 664, 805, 814, 818, 827, 840, 842, 848, 850, 856, 875], "gain": [13, 790, 819, 820, 822, 847, 852, 869], "combin": [13, 36, 56, 73, 79, 102, 374, 386, 408, 419, 521, 549, 550, 633, 636, 667, 676, 819, 823, 826, 827, 828, 830, 832, 836, 843, 853, 869], "timm": [14, 15, 19, 30, 31, 811, 863], "guid": [15, 28, 811, 812, 817, 818, 819, 825, 834, 840, 842, 875], "focu": [15, 28, 817, 838, 867, 868, 871, 876], "usual": [15, 17, 47, 239, 272, 631, 804, 818, 822, 828, 840, 843, 846], "mlp": 15, "mixer": 15, "onli": [15, 17, 30, 31, 36, 42, 44, 46, 48, 51, 52, 55, 56, 61, 63, 65, 73, 75, 78, 79, 84, 86, 88, 96, 99, 101, 117, 137, 177, 178, 207, 267, 268, 273, 279, 311, 341, 348, 368, 371, 374, 375, 377, 381, 386, 397, 410, 420, 429, 434, 448, 450, 461, 462, 463, 473, 507, 508, 524, 538, 625, 628, 629, 630, 631, 633, 635, 636, 638, 640, 642, 643, 645, 646, 662, 676, 683, 686, 687, 702, 705, 717, 718, 724, 725, 727, 728, 729, 734, 735, 738, 739, 740, 743, 744, 754, 760, 763, 773, 775, 776, 778, 791, 795, 804, 809, 811, 812, 813, 817, 818, 819, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 835, 836, 838, 839, 840, 841, 843, 844, 845, 846, 848, 850, 851, 852, 853, 854, 858, 862, 863, 868, 869, 870, 875, 876], "retriev": [15, 17, 21, 534, 556, 581, 633, 819, 840], "mlp_encod": [15, 30, 31, 811, 863], "create_model": [15, 30, 31, 811, 863], "mixer_b16_224": [15, 30, 31, 811, 863], "nois": [15, 17, 30, 31, 811, 862, 863], "randn": [15, 17, 30, 31, 377, 495, 811, 863], "tf_mlp_encod": [15, 30, 31], "output_torch": [15, 17], "output_tf": [15, 17], "output_dens": [15, 30, 31, 811], "dens": [15, 28, 30, 31, 315, 368, 791, 811], "unit": [15, 30, 31, 56, 72, 79, 96, 97, 109, 111, 112, 113, 114, 115, 116, 117, 294, 295, 298, 302, 304, 305, 308, 309, 310, 366, 503, 504, 625, 811, 818, 822, 828, 840, 841, 843, 854, 870, 873], "mention": [15, 17, 30, 31, 36, 817, 818, 819, 823, 830, 835, 836, 839, 840, 843, 846, 859, 864, 869], "fulli": [15, 17, 19, 20, 23, 28, 30, 31, 44, 56, 79, 386, 528, 791, 811, 823, 828, 835, 838, 846, 848, 849, 850, 851, 852, 853, 854, 860, 864, 867, 868, 869, 875, 876], "fine": [15, 17, 30, 31, 818, 819, 828, 830, 840, 850, 853, 875], "tune": [15, 17, 30, 31, 874, 875], "ground": [15, 17, 376, 452, 770, 772, 783, 815, 833, 840, 843, 858], "ret": [15, 17, 30, 31, 50, 51, 52, 53, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 101, 102, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 208, 211, 212, 213, 214, 215, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 371, 372, 373, 374, 375, 376, 377, 380, 381, 382, 384, 386, 387, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 406, 407, 408, 411, 412, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428, 430, 435, 437, 440, 442, 445, 448, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 489, 491, 492, 493, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 571, 572, 573, 575, 576, 580, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 720, 723, 724, 725, 726, 727, 728, 729, 734, 735, 736, 737, 738, 739, 740, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 772, 775, 776, 777, 778, 788, 793, 795, 800, 805, 807, 811, 828, 829, 831, 832, 838, 839, 840, 841, 844, 848, 853, 863], "eagertensor": [15, 21, 42, 800, 841], "readi": [15, 17, 22, 23, 24, 32, 33, 34, 35, 36, 37, 44, 46, 817, 818], "deepmind": [16, 860], "perceiverio": [16, 860], "backbon": [16, 44, 811, 848, 851], "TO": [16, 18, 29], "replac": [16, 18, 29, 45, 55, 56, 57, 63, 65, 73, 78, 79, 80, 86, 88, 131, 273, 309, 312, 366, 368, 377, 488, 491, 495, 575, 576, 580, 628, 631, 633, 638, 642, 698, 737, 775, 819, 825, 826, 828, 829, 837, 840, 843, 850, 853, 854, 859, 863, 876], "efficientnet": 17, "eff_encod": [17, 811], "efficientnet_v2": [17, 811], "efficientnetv2b0": [17, 811], "storag": [17, 44, 45, 851, 859], "googleapi": [17, 44, 45], "efficientnetv2": 17, "b0_notop": 17, "h5": [17, 73], "24274472": 17, "0u": 17, "torch_eff_encod": [17, 811], "modes_to_trac": 17, "1280": [17, 544, 633, 811], "welcom": [19, 45, 811, 812, 818, 819, 820, 842], "goal": [19, 44, 246, 631, 811, 817, 820, 859, 869, 875], "varieti": [19, 822, 827, 828, 829, 843, 845, 865, 867, 871, 872, 875, 876], "organ": [19, 823, 826, 836, 840, 842, 844, 856, 859], "main": [19, 31, 52, 56, 61, 79, 84, 131, 144, 145, 146, 312, 327, 328, 368, 375, 377, 426, 472, 628, 636, 669, 670, 690, 811, 814, 817, 818, 819, 820, 822, 825, 826, 833, 837, 839, 867, 869, 870, 875], "exactli": [19, 23, 33, 42, 43, 47, 289, 631, 817, 826, 827, 828, 829, 830, 832, 843, 846, 858, 860], "rush": [19, 860], "jump": [19, 841], "straight": [19, 811, 827, 840, 843, 850], "quickstart": [19, 811], "introduct": [19, 21, 28, 30, 31, 869], "point": [19, 28, 53, 55, 56, 61, 65, 67, 69, 76, 78, 79, 84, 88, 92, 125, 126, 127, 129, 131, 134, 141, 142, 147, 151, 164, 168, 172, 179, 219, 220, 221, 222, 224, 225, 226, 227, 228, 235, 236, 237, 239, 240, 242, 244, 245, 246, 252, 253, 254, 255, 260, 261, 262, 263, 264, 272, 274, 275, 277, 279, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 311, 312, 314, 334, 335, 352, 353, 356, 358, 368, 371, 374, 375, 376, 381, 386, 389, 398, 399, 400, 418, 428, 448, 452, 507, 508, 509, 510, 511, 521, 522, 523, 531, 626, 628, 629, 631, 636, 642, 643, 644, 645, 646, 666, 668, 671, 672, 673, 675, 677, 678, 679, 682, 683, 684, 685, 686, 687, 688, 690, 693, 739, 740, 746, 748, 749, 750, 751, 754, 756, 757, 759, 760, 761, 762, 763, 764, 765, 800, 801, 809, 815, 817, 818, 819, 822, 823, 825, 827, 828, 830, 831, 833, 835, 839, 840, 843, 844, 846, 848, 850, 851, 860, 862, 875], "showcas": [19, 811], "real": [19, 27, 55, 56, 69, 78, 79, 92, 101, 111, 114, 117, 141, 142, 219, 220, 221, 222, 224, 225, 226, 227, 228, 237, 239, 240, 242, 244, 246, 250, 251, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 269, 272, 274, 275, 277, 281, 282, 283, 285, 286, 287, 288, 289, 290, 292, 293, 334, 335, 341, 342, 343, 353, 371, 374, 375, 397, 418, 419, 428, 429, 625, 628, 631, 636, 643, 646, 671, 672, 673, 677, 684, 686, 687, 690, 693, 746, 759, 761, 762, 763, 764, 826, 871], "world": [19, 27, 819, 871], "whether": [19, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 65, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 97, 102, 109, 110, 111, 112, 113, 114, 115, 116, 117, 124, 126, 127, 133, 135, 140, 142, 148, 151, 152, 154, 157, 158, 159, 160, 161, 162, 165, 166, 167, 169, 170, 171, 172, 174, 175, 176, 177, 179, 191, 195, 196, 198, 199, 201, 203, 206, 207, 209, 212, 213, 215, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 250, 251, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 302, 303, 304, 305, 306, 308, 309, 310, 312, 328, 333, 334, 335, 336, 337, 339, 341, 349, 350, 356, 358, 360, 361, 362, 368, 371, 374, 375, 376, 377, 386, 393, 394, 395, 397, 398, 399, 400, 416, 418, 420, 422, 437, 439, 445, 450, 451, 452, 453, 454, 455, 456, 457, 458, 460, 461, 462, 463, 467, 468, 469, 471, 473, 474, 475, 478, 482, 489, 491, 492, 493, 495, 498, 500, 502, 503, 504, 506, 508, 521, 522, 523, 524, 533, 536, 537, 539, 540, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 554, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 571, 575, 576, 577, 578, 580, 583, 584, 586, 587, 589, 590, 591, 592, 594, 596, 598, 599, 606, 607, 610, 612, 615, 616, 618, 620, 621, 622, 623, 625, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 640, 642, 646, 647, 649, 650, 651, 652, 658, 659, 660, 661, 662, 665, 666, 667, 672, 673, 674, 675, 676, 677, 679, 681, 683, 684, 685, 690, 695, 696, 697, 698, 701, 702, 703, 705, 706, 707, 708, 709, 710, 712, 713, 714, 715, 716, 717, 718, 723, 724, 725, 727, 728, 729, 730, 734, 735, 737, 738, 739, 740, 742, 745, 748, 749, 750, 751, 752, 756, 757, 760, 762, 763, 765, 766, 767, 770, 772, 775, 787, 788, 791, 792, 793, 794, 795, 804, 811, 812, 817, 818, 823, 826, 828, 830, 835, 839, 840, 843, 845, 846, 862, 863], "beginn": [19, 812, 869], "advanc": [19, 42, 818, 820, 868], "got": [19, 42, 832], "cover": [19, 30, 56, 79, 374, 411, 412, 413, 817, 822, 823, 825, 828, 830, 831, 836, 837, 843, 846, 847], "write": [19, 20, 30, 31, 42, 46, 50, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 96, 101, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 140, 141, 142, 143, 144, 145, 147, 148, 151, 153, 213, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 316, 317, 328, 332, 334, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 349, 351, 352, 353, 354, 357, 358, 359, 366, 368, 371, 374, 375, 376, 377, 380, 381, 382, 384, 386, 387, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 406, 407, 408, 410, 411, 412, 413, 416, 418, 419, 422, 423, 425, 426, 434, 435, 437, 440, 441, 442, 443, 449, 452, 453, 454, 455, 457, 458, 467, 468, 471, 472, 473, 474, 475, 476, 477, 480, 481, 482, 484, 485, 486, 487, 489, 490, 491, 492, 493, 495, 496, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 539, 540, 544, 545, 546, 551, 552, 561, 575, 576, 614, 615, 618, 620, 621, 622, 623, 625, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 662, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 677, 679, 680, 681, 682, 683, 685, 687, 688, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 708, 709, 710, 711, 713, 736, 737, 738, 739, 740, 742, 744, 745, 747, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 773, 811, 816, 817, 819, 821, 822, 824, 825, 827, 828, 830, 831, 832, 836, 839, 841, 844, 848, 850, 853, 860, 869, 876], "familiar": [19, 20, 21, 817, 818], "concept": [19, 20, 21], "agnost": [19, 20, 21, 22, 30, 31, 32, 36, 42, 811, 823, 828, 835, 848, 850, 853, 854, 875, 876], "unifi": [19, 20, 21, 23, 24, 30, 33, 34, 38, 45, 73, 212, 630, 820, 821, 822, 823, 827, 828, 832, 837, 838, 840, 846, 848, 854, 857, 859, 861, 863, 865, 866, 867, 869, 873, 876], "turn": [19, 20, 23, 33, 60, 83, 96, 97, 398, 399, 400, 635, 658, 791, 818, 825, 826, 829, 830, 840, 843, 860], "unus": [19, 20, 23, 830, 839], "part": [19, 20, 23, 52, 55, 56, 78, 79, 84, 101, 111, 114, 117, 144, 145, 146, 252, 256, 279, 327, 328, 354, 368, 371, 374, 375, 377, 386, 418, 429, 483, 531, 625, 628, 631, 636, 672, 673, 772, 811, 817, 818, 819, 820, 822, 825, 828, 834, 836, 839, 840, 843, 844, 846, 848, 849, 853, 854, 862, 863, 864, 867, 869, 874, 875, 876], "lazi": [19, 20, 23, 26, 33, 36, 37, 48], "understand": [19, 20, 21, 25, 42, 48, 815, 816, 817, 818, 819, 821, 822, 825, 830, 831, 835, 841, 842, 847, 860, 865, 875], "decor": [19, 20, 25, 27, 28, 36, 48, 538, 633, 775, 777, 783, 815, 822, 823, 826, 828, 829, 833, 836, 839, 840, 841, 846], "kornia": [19, 20, 27, 30, 31, 44, 48, 811, 863], "roundup": 21, "indep": [21, 30], "proof": [21, 30], "delv": [21, 31, 811], "theori": [21, 813, 825], "esenti": [21, 30], "abstract": [21, 30, 31, 790, 795, 811, 826, 828, 839, 840, 843, 846, 852, 858, 867, 869, 871, 872, 876], "quirk": [21, 30], "perk": [21, 30, 811, 823, 826], "under": [21, 30, 31, 56, 376, 455, 456, 804, 811, 817, 818, 821, 822, 829, 830, 831, 834, 840, 841, 843, 846, 847, 848, 851, 853, 854, 862, 863, 869, 872, 876], "hood": [21, 30, 31, 811, 821, 829, 830, 834, 840, 843, 846, 847, 848, 851, 853, 862, 863, 876], "appropi": 21, "string": [21, 30, 31, 46, 56, 57, 60, 73, 79, 83, 149, 150, 162, 169, 191, 192, 193, 194, 195, 197, 206, 213, 214, 218, 374, 375, 377, 417, 421, 429, 483, 494, 523, 542, 629, 630, 633, 635, 636, 648, 649, 650, 651, 653, 655, 657, 673, 770, 772, 776, 804, 805, 824, 825, 827, 828, 829, 832, 840, 848, 851], "simplest": [21, 818, 830, 843, 846], "interact": [21, 30, 45, 48, 817, 868, 869, 874], "submodul": [21, 30, 44, 46, 101, 102, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 787, 788, 790, 791, 793, 794, 795, 796, 817, 818, 819, 822, 825, 827, 829, 833, 836, 837, 843, 847, 848, 852, 856], "likewis": [21, 26, 30, 37, 811, 819, 826, 828, 831, 835, 836, 840, 846, 851, 862, 863, 875], "nativearrai": [21, 30, 31, 51, 52, 53, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 67, 69, 72, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 101, 105, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 121, 122, 124, 126, 127, 128, 130, 135, 136, 137, 138, 139, 140, 142, 144, 145, 148, 151, 152, 153, 154, 157, 158, 159, 160, 161, 162, 164, 167, 170, 171, 172, 174, 176, 178, 179, 185, 195, 196, 212, 213, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 316, 317, 321, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 366, 368, 371, 372, 374, 375, 376, 377, 380, 381, 382, 384, 386, 388, 389, 390, 391, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 406, 407, 408, 410, 411, 412, 413, 414, 416, 417, 418, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 466, 467, 468, 469, 471, 472, 473, 474, 475, 477, 478, 480, 481, 482, 483, 484, 485, 486, 487, 489, 490, 491, 492, 493, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 521, 522, 523, 524, 525, 533, 536, 537, 539, 540, 544, 545, 546, 548, 551, 552, 553, 554, 555, 557, 559, 560, 561, 564, 567, 568, 570, 575, 576, 577, 580, 589, 590, 591, 592, 593, 594, 596, 598, 599, 601, 612, 614, 615, 616, 618, 620, 621, 622, 623, 625, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 717, 718, 719, 720, 724, 725, 726, 729, 734, 735, 736, 737, 738, 739, 740, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 796, 823, 826, 830, 832, 835, 836, 837, 839, 840, 844, 845, 848, 850, 856], "alia": [21, 30, 334, 335, 371, 626, 817, 840, 861, 864], "select": [21, 30, 35, 48, 56, 69, 79, 92, 375, 377, 386, 429, 442, 491, 492, 495, 522, 523, 646, 756, 757, 817, 818, 819, 827, 833, 839, 843, 848, 850, 853, 854, 869, 872, 873], "lastli": [21, 30, 823], "subclass": [21, 30, 31, 837, 840, 846, 863], "dict": [21, 30, 31, 44, 48, 51, 57, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 102, 109, 110, 111, 112, 113, 114, 115, 116, 117, 122, 124, 133, 135, 140, 142, 148, 152, 154, 165, 166, 167, 171, 172, 179, 195, 198, 199, 213, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 250, 251, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 301, 302, 303, 304, 305, 306, 308, 309, 310, 312, 324, 333, 334, 335, 336, 337, 339, 341, 349, 350, 356, 358, 360, 361, 362, 368, 377, 397, 398, 399, 400, 418, 451, 452, 453, 454, 455, 456, 457, 458, 461, 462, 463, 467, 468, 483, 489, 491, 492, 493, 495, 500, 502, 503, 504, 506, 508, 521, 522, 523, 524, 533, 534, 536, 537, 539, 540, 544, 545, 546, 547, 548, 549, 550, 551, 552, 555, 557, 559, 560, 561, 563, 564, 567, 571, 575, 576, 590, 591, 592, 594, 596, 598, 599, 612, 623, 627, 629, 630, 633, 640, 649, 650, 651, 652, 658, 659, 665, 666, 667, 672, 673, 674, 675, 676, 677, 679, 681, 683, 684, 690, 695, 696, 697, 698, 702, 705, 706, 707, 708, 709, 712, 713, 717, 718, 720, 723, 724, 725, 726, 728, 729, 730, 734, 735, 737, 738, 739, 740, 742, 745, 748, 749, 750, 751, 752, 756, 757, 760, 762, 763, 765, 766, 767, 772, 773, 788, 791, 793, 800, 805, 823, 826, 851, 852, 856, 862, 863, 864], "recurs": [21, 30, 31, 44, 46, 51, 73, 74, 165, 166, 198, 199, 375, 447, 549, 550, 556, 629, 630, 633, 640, 717, 718, 721, 727, 728, 729, 770, 818, 822, 825, 826, 833, 836, 839, 852, 854], "fashion": [21, 777, 843, 863], "native_arrai": [21, 30, 31, 52, 53, 55, 75, 77, 78, 79, 80, 84, 91, 109, 112, 135, 138, 140, 142, 148, 151, 152, 153, 154, 162, 167, 174, 196, 205, 213, 229, 233, 238, 239, 240, 242, 246, 250, 258, 259, 267, 272, 275, 278, 281, 286, 334, 335, 362, 371, 376, 377, 457, 483, 489, 493, 533, 536, 563, 564, 567, 598, 625, 628, 629, 630, 631, 633, 635, 636, 637, 638, 642, 643, 646, 647, 649, 650, 657, 665, 668, 672, 673, 678, 679, 683, 687, 688, 690, 693, 695, 697, 698, 705, 737, 746, 755, 761, 764, 766, 772, 782, 800, 815, 833, 841, 843], "data_class": [21, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 394, 395, 544, 548, 686, 711], "low": [21, 30, 33, 49, 56, 60, 65, 79, 83, 88, 374, 417, 421, 635, 642, 648, 649, 650, 651, 653, 655, 657, 738, 740, 777, 826, 832, 839, 840, 846, 848, 865, 867, 869, 870, 871, 873, 875], "c": [21, 30, 36, 45, 46, 52, 56, 57, 58, 60, 63, 69, 75, 76, 78, 79, 80, 81, 83, 84, 86, 90, 92, 96, 97, 115, 126, 127, 137, 140, 164, 167, 222, 233, 239, 240, 260, 261, 263, 272, 275, 283, 290, 374, 375, 377, 380, 386, 388, 389, 390, 391, 402, 407, 423, 425, 427, 428, 430, 442, 461, 462, 463, 473, 491, 495, 500, 501, 502, 505, 523, 536, 544, 545, 546, 547, 555, 559, 560, 590, 599, 614, 615, 618, 620, 621, 622, 625, 628, 629, 631, 633, 634, 635, 636, 638, 640, 643, 644, 646, 649, 650, 651, 652, 653, 654, 656, 671, 673, 675, 705, 709, 717, 720, 724, 725, 726, 728, 729, 734, 735, 746, 751, 757, 758, 763, 765, 794, 804, 805, 812, 818, 821, 824, 825, 826, 830, 836, 838, 847, 848, 849, 851, 854, 856, 857, 859, 860, 863, 865, 869, 873, 874, 876], "fundament": [21, 30, 827, 840, 846, 848, 858, 869], "common": [21, 24, 30, 34, 55, 56, 73, 78, 178, 249, 257, 338, 345, 371, 629, 631, 812, 815, 817, 818, 825, 828, 829, 830, 836, 837, 840, 844, 846, 854, 858, 866, 869, 876], "signatur": [21, 30, 377, 386, 483, 521, 828, 829, 830, 831, 835, 839, 843, 844, 846, 859, 866, 875], "matmul": [21, 30, 31, 47, 61, 84, 375, 445, 613, 633, 636, 686, 824, 843, 844, 848], "to_n": [21, 30, 31, 42, 51, 74, 848], "jaxlib": [21, 27, 45, 800, 818, 823, 828, 829, 835, 844, 848, 850], "xla_extens": [21, 27, 800, 823, 828, 829, 835, 844, 848, 850], "arrayimpl": [21, 27, 800], "underli": [21, 30, 31, 42, 56, 63, 79, 86, 99, 229, 232, 234, 269, 376, 377, 456, 473, 631, 636, 638, 684, 705, 826, 839, 846, 862, 869], "disabl": [21, 30, 56, 79, 377, 491, 793, 809, 825], "array_mod": [21, 30, 577, 601, 633, 845], "set_array_mod": [21, 30, 601, 633, 845], "composit": [21, 30, 165, 166, 198, 199, 291, 375, 435, 549, 550, 629, 630, 631, 633, 776, 778, 817, 821, 823, 824, 826, 828, 829, 837, 839, 840, 841, 843, 846, 848, 852, 853, 854, 856, 862, 870], "ultim": [21, 30, 862], "sigmoid": [21, 30, 31, 42, 50, 56, 72, 79, 300, 366, 381, 507, 625, 787, 848, 851, 852], "z": [21, 30, 31, 43, 44, 52, 55, 56, 57, 61, 62, 65, 67, 69, 75, 78, 79, 80, 84, 85, 86, 88, 92, 101, 102, 136, 137, 139, 140, 200, 222, 223, 227, 229, 232, 234, 239, 250, 251, 254, 255, 256, 258, 259, 264, 266, 268, 269, 270, 271, 279, 288, 299, 300, 334, 335, 337, 366, 371, 376, 386, 452, 454, 455, 456, 457, 458, 464, 468, 479, 520, 521, 524, 531, 536, 548, 551, 552, 559, 560, 576, 589, 591, 592, 600, 613, 628, 630, 631, 633, 636, 637, 638, 640, 642, 643, 644, 646, 667, 676, 681, 682, 686, 693, 695, 696, 697, 698, 720, 724, 726, 734, 738, 739, 740, 743, 748, 758, 759, 761, 762, 763, 790, 811, 824, 826, 829, 830, 848, 850, 862], "divid": [21, 26, 30, 31, 47, 55, 56, 57, 63, 73, 78, 79, 86, 101, 102, 246, 380, 453, 500, 501, 502, 505, 591, 631, 633, 638, 707, 823, 826, 830, 834, 843], "exp": [21, 30, 31, 55, 56, 78, 79, 115, 117, 244, 264, 277, 300, 366, 374, 376, 402, 407, 456, 625, 631, 636, 684, 838, 840], "entir": [21, 30, 31, 33, 46, 56, 69, 70, 73, 79, 80, 92, 93, 212, 242, 244, 284, 285, 334, 335, 371, 374, 377, 386, 398, 399, 400, 483, 524, 557, 630, 631, 646, 647, 759, 760, 761, 762, 763, 764, 765, 766, 767, 791, 805, 817, 818, 819, 822, 823, 826, 828, 830, 832, 839, 840, 841, 843, 846, 848, 851, 852, 853, 854, 859, 860, 863, 869, 875, 876], "congratul": [21, 27], "independ": [21, 31, 56, 65, 79, 88, 222, 239, 272, 282, 380, 381, 505, 507, 631, 636, 642, 667, 685, 737, 811, 822, 828, 830, 837, 848, 853, 863, 867], "good": [21, 30, 31, 816, 817, 818, 819, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 841, 843, 844, 846, 848, 849, 852], "foundat": [21, 859, 872], "power": [21, 30, 31, 55, 56, 57, 61, 78, 79, 80, 84, 101, 102, 233, 242, 243, 277, 332, 345, 368, 371, 374, 422, 581, 592, 604, 631, 633, 636, 640, 678, 691, 723, 790, 845, 850, 851, 852, 869, 871, 875], "defin": [22, 28, 30, 31, 32, 52, 56, 57, 61, 75, 79, 80, 84, 99, 115, 140, 144, 145, 146, 222, 239, 246, 272, 273, 281, 283, 286, 299, 303, 307, 313, 316, 317, 318, 327, 328, 329, 330, 331, 334, 335, 337, 366, 368, 371, 374, 375, 377, 386, 410, 427, 483, 489, 524, 559, 560, 580, 625, 628, 631, 633, 635, 636, 646, 660, 667, 672, 673, 685, 759, 760, 761, 763, 811, 817, 818, 823, 824, 827, 828, 831, 835, 838, 840, 841, 843, 844, 850, 852, 854, 856, 864, 866, 867, 868, 869, 870, 873, 875, 876], "div": [22, 23, 24, 25, 26, 30, 31, 32, 33, 34, 35, 36, 37, 864], "sub": [22, 23, 24, 25, 26, 30, 31, 32, 33, 34, 35, 36, 37, 56, 61, 63, 73, 74, 78, 79, 80, 84, 86, 102, 271, 375, 377, 386, 429, 469, 478, 498, 527, 528, 556, 633, 636, 638, 639, 670, 690, 707, 714, 715, 716, 817, 819, 821, 826, 832, 840, 841, 843, 850, 851, 852, 864, 865], "By": [22, 42, 49, 56, 62, 63, 69, 70, 79, 85, 86, 92, 93, 286, 332, 334, 335, 348, 355, 368, 371, 374, 376, 377, 384, 386, 397, 455, 456, 491, 495, 514, 521, 524, 579, 631, 633, 636, 637, 638, 646, 647, 667, 692, 695, 704, 756, 759, 760, 761, 762, 763, 764, 765, 766, 767, 818, 824, 828, 830, 832, 836, 838, 839, 840, 848, 852, 853, 862], "with_numpi": 22, "123": [22, 75, 76, 79, 135, 167, 455, 547, 628, 633, 805, 843], "reproduc": [22, 47, 60, 83, 635, 658, 775, 776, 777, 778, 783, 815, 822, 833], "x_": [22, 32, 97, 283, 631, 864], "66391283": 22, "12516928": 22, "38367081": 22, "03102401": 22, "76419425": 22, "52797794": 22, "90346956": 22, "61316347": 22, "27585283": 22, "66309303": 22, "ivy_repo": 22, "sever": [22, 23, 32, 33, 35, 36, 37, 56, 79, 96, 374, 375, 388, 389, 390, 391, 443, 775, 818, 819, 844, 854, 867, 873], "pro": [22, 23, 24, 32, 33, 34, 35, 36, 37], "pick": [23, 33, 790], "off": [23, 33, 60, 61, 83, 84, 398, 399, 400, 635, 636, 658, 670, 690, 790, 791, 818, 833, 847, 860, 862, 875], "last": [23, 28, 30, 33, 52, 56, 60, 61, 62, 63, 66, 68, 69, 70, 73, 75, 79, 83, 84, 85, 86, 91, 92, 93, 97, 101, 136, 137, 140, 195, 312, 340, 368, 371, 374, 375, 376, 377, 384, 386, 403, 408, 418, 419, 420, 431, 455, 473, 483, 485, 491, 495, 514, 522, 523, 628, 630, 635, 636, 637, 638, 643, 645, 646, 647, 661, 662, 667, 670, 681, 690, 692, 696, 697, 699, 702, 705, 706, 707, 709, 743, 744, 752, 754, 755, 756, 757, 766, 767, 791, 800, 811, 819, 822, 824, 825, 828, 830, 839, 841, 843, 846, 848, 854, 860, 863, 869], "trigger": [23, 33, 793, 817, 834], "unif": [23, 25, 26, 33, 35, 812, 850, 859, 865, 875], "55563945": 23, "65538704": 23, "14150524": 23, "46951997": 23, "30220294": 23, "14739668": 23, "57017946": 23, "91962677": 23, "51029003": 23, "59644395": 23, "constitu": [23, 33, 73, 853], "due": [23, 30, 31, 33, 47, 49, 272, 282, 377, 491, 631, 818, 822, 827, 832, 839, 840, 859, 862, 863, 869], "manner": [23, 31, 33, 43, 51, 74, 640, 729, 818, 828, 829, 831, 836, 840, 844, 851, 854, 858, 865, 867, 875, 876], "5556394": 23, "655387": 23, "1415051": 23, "4695197": 23, "3022028": 23, "1473966": 23, "5701794": 23, "91962665": 23, "51028997": 23, "5964439": 23, "assess": [23, 33, 817, 846], "985": 23, "000": [23, 78, 273, 775, 815, 827, 833], "69": [23, 42, 49, 55, 81, 88, 220, 262, 374, 396, 406, 618, 631, 634, 636, 677, 678, 739, 843, 851], "On": [23, 30, 31, 818, 828, 829, 834, 840, 843, 846, 849, 853], "hand": [23, 55, 375, 445, 775, 811, 822, 828, 829, 834, 836, 843, 854], "learnt": [24, 34], "two": [24, 34, 36, 42, 52, 56, 61, 67, 79, 80, 84, 101, 102, 122, 125, 131, 138, 144, 145, 146, 177, 185, 233, 247, 248, 282, 327, 328, 333, 346, 347, 349, 350, 352, 354, 361, 368, 371, 374, 375, 376, 377, 386, 403, 426, 427, 428, 437, 442, 451, 453, 457, 462, 483, 489, 493, 521, 531, 536, 627, 628, 629, 631, 633, 635, 636, 638, 644, 660, 666, 668, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 690, 692, 710, 748, 749, 750, 751, 775, 777, 783, 791, 817, 818, 822, 823, 828, 829, 830, 831, 836, 840, 841, 843, 846, 847, 851, 853, 860, 866, 874], "ivy_norm": 24, "jax_norm": [24, 30, 31], "wider": [24, 34, 584, 607, 633, 828, 845, 875], "avoid": [24, 34, 36, 56, 63, 79, 239, 244, 246, 262, 272, 376, 377, 380, 453, 461, 462, 463, 469, 471, 473, 474, 475, 478, 482, 489, 498, 500, 501, 502, 538, 554, 556, 579, 584, 607, 631, 633, 638, 701, 702, 703, 705, 707, 708, 710, 712, 777, 778, 818, 819, 824, 825, 826, 827, 828, 832, 837, 840, 843, 844, 845, 846, 869], "act": [24, 34, 56, 79, 297, 362, 372, 819, 830, 845, 854, 876], "shorthand": [24, 34, 36, 843], "pair": [24, 34, 44, 56, 60, 79, 83, 227, 246, 319, 361, 368, 371, 374, 408, 417, 419, 421, 631, 635, 636, 648, 649, 650, 651, 653, 655, 657, 665, 667, 805], "93968587": 24, "26075466": 24, "22723222": 24, "06276492": 24, "47426987": 24, "72835908": 24, "71737559": 24, "50411096": 24, "65419174": 24, "15576624": 24, "implic": [24, 34, 35, 38, 826], "satisfi": [25, 26, 27, 28, 44, 46, 49, 56, 374, 375, 397, 429, 828, 830], "fw": [25, 26, 27, 28, 60, 83, 386, 521, 635, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 772, 818, 843], "mxnet": [25, 26, 27, 28, 208, 630, 800, 817, 818, 859, 876], "26": [25, 26, 27, 28, 42, 44, 46, 49, 55, 56, 64, 65, 79, 80, 81, 88, 234, 239, 285, 374, 375, 396, 432, 442, 559, 614, 631, 633, 634, 635, 636, 640, 641, 646, 657, 670, 681, 688, 718, 736, 738, 739, 758], "einop": [25, 26, 27, 28, 44, 46, 49, 57, 80, 544, 545, 546, 633, 828, 859], "miniconda": [25, 26, 27, 28], "multienv": [25, 26, 27, 28], "site": [25, 26, 27, 28, 870], "psutil": [25, 26, 27, 28, 44, 46, 49], "termcolor": [25, 26, 27, 28, 44, 46, 49, 73, 102], "colorama": [25, 26, 27, 28, 44, 46], "535": [25, 26, 27, 28, 50, 72, 117, 625, 832], "diskcach": [25, 26, 27, 28, 44], "auth": [25, 26, 27, 28], "urllib3": [25, 26, 27, 28, 44], "pyvi": [25, 26, 27, 28, 30, 31], "dill": [25, 26, 27, 28, 44], "astunpars": [25, 26, 27, 28], "cloudpickl": [25, 26, 27, 28], "gast": [25, 26, 27, 28], "66": [25, 26, 27, 28, 42, 44, 46, 69, 79, 80, 81, 374, 406, 544, 545, 618, 633, 634, 636, 646, 681, 758], "wheel": [25, 26, 27, 28, 44, 46, 49, 858], "six": [25, 26, 27, 28, 44, 49, 818, 846], "cachetool": [25, 26, 27, 28], "pyasn1": [25, 26, 27, 28], "rsa": [25, 26, 27, 28], "jinja2": [25, 26, 27, 28], "jsonpickl": [25, 26, 27, 28], "networkx": [25, 26, 27, 28, 49], "charset": [25, 26, 27, 28, 44], "idna": [25, 26, 27, 28, 44], "certifi": [25, 26, 27, 28, 44], "2017": [25, 26, 27, 28, 44, 635, 662], "jedi": [25, 26, 27, 28], "inlin": [25, 26, 27, 28, 825], "prompt": [25, 26, 27, 28, 817, 819], "toolkit": [25, 26, 27, 28, 869, 870, 876], "pygment": [25, 26, 27, 28], "traitlet": [25, 26, 27, 28], "exceptiongroup": [25, 26, 27, 28], "pexpect": [25, 26, 27, 28], "markupsaf": [25, 26, 27, 28], "parso": [25, 26, 27, 28], "ptyprocess": [25, 26, 27, 28], "wcwidth": [25, 26, 27, 28], "asttoken": [25, 26, 27, 28], "pure": [25, 26, 27, 28, 36, 46, 811, 831, 835, 840, 846, 850, 853, 854, 869, 875, 876], "lazili": [25, 26, 27, 30, 31, 35, 37, 48, 811, 862, 863, 864], "actual": [25, 35, 815, 819, 821, 827, 833, 836, 837, 839, 840, 841, 843, 846, 847, 852, 854, 870, 875], "occur": [25, 30, 31, 35, 48, 53, 55, 67, 76, 78, 90, 154, 273, 289, 629, 631, 643, 644, 743, 744, 748, 749, 750, 751, 822, 827, 829, 832, 845], "becaus": [25, 33, 35, 45, 56, 374, 397, 770, 818, 819, 822, 823, 824, 825, 826, 828, 829, 831, 832, 833, 835, 836, 837, 838, 839, 840, 841, 843, 846, 848, 852, 853, 854, 869, 872, 875], "altern": [25, 35, 45, 56, 79, 84, 96, 97, 333, 341, 342, 343, 347, 349, 350, 351, 352, 354, 355, 356, 360, 361, 371, 817, 818, 825, 839, 851, 872], "assum": [25, 26, 35, 36, 37, 52, 55, 56, 57, 60, 61, 62, 78, 79, 80, 83, 84, 85, 125, 126, 127, 129, 130, 131, 132, 134, 135, 136, 137, 138, 141, 142, 143, 144, 145, 147, 148, 154, 170, 174, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 239, 240, 242, 244, 245, 246, 250, 251, 252, 253, 254, 255, 256, 259, 261, 262, 263, 264, 266, 267, 268, 269, 272, 274, 275, 276, 277, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 312, 328, 334, 335, 337, 340, 358, 368, 371, 374, 375, 377, 386, 393, 394, 395, 396, 398, 399, 400, 406, 411, 412, 413, 418, 420, 429, 443, 445, 483, 491, 495, 521, 524, 551, 555, 557, 559, 568, 590, 599, 623, 628, 629, 631, 633, 634, 635, 636, 637, 638, 641, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 657, 658, 659, 662, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 692, 693, 694, 695, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 736, 743, 744, 746, 747, 748, 749, 750, 751, 752, 755, 759, 760, 761, 762, 763, 764, 765, 766, 767, 791, 804, 811, 818, 822, 824, 827, 828, 831, 841, 843, 846, 850, 851, 854], "201733": 25, "slowli": [25, 35], "norm": [25, 35, 36, 56, 57, 61, 79, 80, 84, 95, 96, 374, 375, 396, 397, 401, 402, 403, 406, 407, 408, 418, 419, 425, 429, 503, 504, 506, 539, 540, 561, 633, 636, 677, 693, 736, 791, 795, 844], "slow": [25, 35, 813, 818, 825], "34431235": [25, 26], "51129461": [25, 26], "06686894": [25, 26], "36452447": [25, 26], "98795534": [25, 26], "15493582": [25, 26], "91630631": [25, 26], "41939619": [25, 26], "78909753": [25, 26], "19475674": [25, 26], "norm_trac": 25, "float64": [25, 26, 53, 56, 65, 69, 75, 76, 78, 79, 80, 88, 92, 125, 133, 134, 151, 154, 158, 159, 164, 165, 168, 169, 174, 175, 179, 181, 182, 188, 191, 273, 345, 371, 376, 386, 451, 456, 521, 570, 628, 629, 633, 636, 642, 672, 673, 677, 693, 739, 740, 757, 772, 775, 776, 828, 841, 843], "norm_tran": [25, 35], "know": [25, 26, 35, 36, 37, 67, 644, 748, 749, 750, 751, 811, 813, 817, 819, 829, 837, 841, 843, 846, 860, 864, 870], "07": [26, 44, 46, 58, 62, 78, 81, 85, 88, 227, 260, 263, 264, 283, 374, 406, 604, 614, 615, 617, 618, 619, 620, 631, 633, 634, 637, 696, 697, 739, 792, 795, 852], "981554": 26, "happen": [26, 30, 31, 291, 631, 811, 818, 819, 820, 829, 839, 843, 851, 860, 862, 863], "wherea": [26, 37, 79, 374, 420, 819, 823, 826, 828, 829, 830, 835, 836, 843, 853, 866], "subtract": [26, 30, 31, 55, 78, 101, 102, 133, 377, 483, 628, 631, 823, 826, 830], "filelock": [27, 44], "extens": [27, 44, 55, 61, 78, 125, 126, 127, 129, 130, 131, 132, 134, 135, 136, 138, 141, 142, 143, 144, 145, 147, 148, 154, 164, 167, 179, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 239, 240, 242, 244, 245, 246, 250, 251, 252, 253, 254, 255, 259, 261, 262, 263, 264, 266, 267, 268, 269, 272, 274, 275, 276, 277, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 334, 335, 337, 371, 374, 377, 386, 418, 491, 495, 521, 628, 629, 631, 636, 638, 643, 644, 645, 646, 647, 666, 667, 668, 669, 670, 672, 673, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 692, 693, 699, 701, 702, 703, 705, 706, 708, 709, 713, 743, 744, 746, 747, 748, 749, 750, 751, 752, 755, 759, 760, 761, 762, 763, 764, 765, 766, 767, 816, 818, 819, 831, 833, 834, 843, 866, 869, 876], "sympi": [27, 859], "fsspec": [27, 44], "mpmath": 27, "scenario": [27, 828, 838], "often": [27, 56, 376, 451, 816, 822, 832, 835, 836, 840, 843, 854, 860, 870, 873, 876], "fortun": [27, 28, 822], "everyth": [27, 45, 804, 811, 817, 818, 819, 820, 821, 827, 830, 839, 840, 841, 843, 849, 854, 855, 860], "practic": [27, 819, 824, 827, 840, 842, 872], "specifi": [27, 28, 30, 31, 35, 36, 37, 48, 50, 52, 53, 55, 56, 57, 60, 61, 62, 63, 65, 66, 67, 69, 70, 72, 73, 76, 78, 79, 80, 83, 84, 85, 86, 88, 89, 92, 93, 96, 109, 110, 111, 112, 113, 114, 115, 116, 117, 125, 129, 134, 136, 141, 144, 145, 147, 151, 153, 200, 205, 207, 211, 212, 213, 281, 290, 294, 299, 300, 302, 328, 333, 350, 355, 366, 368, 371, 374, 375, 376, 377, 381, 386, 393, 394, 395, 397, 403, 408, 418, 419, 420, 421, 429, 441, 443, 448, 451, 455, 456, 457, 459, 473, 476, 485, 486, 488, 489, 491, 495, 508, 519, 521, 522, 523, 526, 527, 531, 534, 551, 552, 554, 556, 557, 570, 572, 580, 613, 625, 628, 629, 630, 631, 633, 635, 636, 637, 638, 640, 642, 643, 644, 645, 646, 647, 660, 662, 665, 667, 669, 670, 672, 673, 677, 685, 688, 690, 691, 692, 693, 695, 696, 697, 698, 699, 700, 701, 702, 706, 708, 709, 712, 713, 721, 722, 724, 725, 732, 733, 734, 735, 738, 739, 740, 742, 743, 744, 746, 749, 750, 751, 752, 756, 757, 758, 762, 764, 766, 767, 775, 778, 787, 791, 792, 793, 805, 809, 818, 821, 825, 828, 829, 835, 836, 837, 839, 840, 841, 843, 848, 851, 852, 862, 863, 864, 875], "everi": [27, 30, 31, 36, 44, 52, 56, 57, 79, 80, 134, 135, 300, 334, 335, 348, 366, 371, 374, 377, 411, 412, 413, 420, 497, 533, 628, 633, 817, 819, 822, 824, 825, 827, 828, 830, 834, 835, 836, 837, 839, 840, 841, 843, 848, 850, 852, 862, 863, 864, 869], "jax_kornia": [27, 30, 31, 811, 863], "though": [27, 816, 817, 819, 828, 829, 831, 836, 839, 840, 846, 851, 854], "000000000034": [27, 30, 31, 811, 863], "raw_img": [27, 30, 31, 811, 863], "enhanc": [27, 30, 31, 811, 842, 863], "sharp": [27, 30, 31, 811], "prefer": [27, 30, 31, 246, 631, 818, 826, 832, 833, 837, 840, 855, 869], "leverag": [27, 30, 31, 811, 818, 839, 863, 867, 869], "whole": [28, 56, 79, 377, 380, 490, 503, 504, 506, 819, 825, 834], "full": [28, 56, 61, 79, 83, 84, 96, 97, 99, 164, 251, 259, 322, 323, 324, 325, 326, 368, 375, 376, 377, 448, 449, 455, 456, 484, 487, 578, 587, 602, 610, 628, 629, 631, 633, 635, 636, 650, 652, 653, 654, 656, 679, 683, 685, 686, 776, 783, 811, 818, 819, 825, 828, 831, 832, 835, 836, 840, 843, 846, 848, 854, 859, 860, 867, 869, 875], "complex": [28, 30, 31, 44, 50, 55, 56, 61, 69, 72, 76, 78, 79, 84, 92, 109, 110, 111, 112, 113, 114, 115, 116, 117, 141, 142, 157, 171, 180, 186, 219, 220, 221, 222, 223, 224, 225, 228, 236, 237, 239, 240, 242, 244, 252, 253, 254, 255, 256, 260, 261, 262, 263, 272, 274, 275, 277, 279, 282, 283, 284, 285, 286, 289, 290, 294, 299, 300, 302, 337, 342, 343, 366, 371, 374, 375, 386, 397, 408, 418, 419, 423, 428, 429, 430, 441, 443, 529, 530, 591, 592, 625, 628, 629, 631, 633, 636, 643, 646, 671, 672, 673, 677, 684, 686, 688, 690, 693, 746, 761, 762, 764, 776, 787, 805, 814, 817, 820, 825, 828, 830, 837, 840, 843, 844, 846, 851, 852, 853, 854, 856, 863, 865, 867, 869, 871, 875, 876], "neccessari": 28, "set_random_se": [28, 47], "301436": 28, "_c": 28, "0x7f252c392390": 28, "flatten": [28, 30, 31, 44, 46, 49, 56, 57, 61, 63, 66, 67, 79, 80, 84, 86, 89, 90, 339, 355, 371, 375, 377, 386, 426, 472, 482, 486, 491, 492, 495, 497, 519, 526, 527, 528, 529, 530, 531, 544, 548, 633, 636, 638, 643, 644, 674, 681, 693, 699, 704, 706, 743, 744, 748, 749, 750, 751, 770, 772, 811, 839, 846], "keyword": [28, 30, 31, 46, 48, 51, 52, 56, 73, 79, 102, 138, 273, 374, 377, 386, 422, 483, 521, 535, 538, 571, 600, 628, 631, 633, 636, 640, 646, 687, 723, 764, 770, 772, 776, 792, 793, 804, 817, 823, 826, 828, 829, 837, 839, 840, 841, 843, 844, 846, 851, 862, 863, 864], "input_arrai": [28, 30, 31, 839], "torch_model": [28, 30, 31, 48], "159": [28, 72, 109, 625, 635, 659], "thank": [28, 851, 859], "fledg": [28, 818, 848, 849], "output_arrai": [28, 30, 31, 56, 453], "0893": 28, "1504": 28, "1372": 28, "0991": 28, "0867": 28, "0851": 28, "0911": 28, "0804": 28, "0926": 28, "0881": 28, "softmaxbackward0": 28, "furthermor": 28, "relat": [28, 246, 631, 811, 813, 816, 817, 818, 819, 825, 832, 840, 843, 844, 845, 846, 863, 872], "continu": [28, 30, 31, 46, 124, 286, 294, 366, 627, 631, 811, 816, 817, 818, 821, 822, 833, 839, 842, 843, 854, 859, 860, 869], "regress": [29, 869, 876], "checkout": [30, 45, 819, 822, 843], "f705efe7cb5d18df17ce6c1e20f04d0eb4933f48": 30, "theoret": 30, "aspect": [30, 31, 812, 838, 851, 869], "switch": [30, 42, 783, 824, 832, 836, 837, 876], "easiest": [30, 811, 813, 818, 855], "defer": [30, 31, 817, 823, 828, 829, 836, 839, 840, 843, 875], "similarli": [30, 43, 138, 146, 222, 327, 334, 335, 368, 371, 628, 631, 824, 828, 840, 846, 850, 875], "obtain": [30, 31, 49, 56, 79, 318, 368, 374, 414, 635, 662, 777, 840, 862], "essenc": [30, 870, 875], "becom": [30, 56, 79, 96, 345, 371, 377, 463, 638, 698, 800, 819, 820, 826, 828, 830, 832, 839, 854, 858, 860, 862], "slide": [30, 56, 60, 79, 83, 374, 393, 394, 395, 411, 412, 413, 414, 417, 421, 635, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 791], "regressor": [30, 31, 811], "input_dim": [30, 31, 45, 811], "output_dim": [30, 31, 45, 811], "linear0": [30, 31, 42, 811, 851, 852], "linear1": [30, 31, 42, 811, 851, 852], "instanti": [30, 31, 783, 831], "adam": [30, 31, 42, 46, 58, 81, 535, 614, 615, 620, 633, 634, 795, 811, 851, 852, 853, 869], "n_training_exampl": [30, 31, 811], "2000": [30, 31, 79, 313, 368, 811], "random_norm": [30, 31, 60, 61, 65, 83, 84, 88, 544, 633, 635, 636, 642, 650, 652, 653, 654, 656, 657, 661, 686, 811], "linspac": [30, 31, 52, 75, 125, 628, 811, 835, 846, 848, 876], "pred": [30, 31, 45, 46, 56, 62, 79, 85, 376, 452, 455, 637, 695, 696, 697, 811, 826, 836, 839], "gradient": [30, 31, 44, 46, 56, 79, 96, 212, 363, 371, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 630, 639, 714, 715, 716, 772, 783, 795, 811, 821, 844, 851, 852, 854, 869], "grad": [30, 31, 42, 46, 614, 634, 795, 811, 838, 851, 852, 853], "execute_with_gradi": [30, 31, 42, 46, 634, 811, 851, 852, 853, 854], "lambda": [30, 31, 47, 49, 79, 122, 124, 296, 306, 543, 556, 616, 617, 619, 624, 627, 633, 634, 636, 640, 672, 724, 725, 729, 811, 817, 836, 837, 838, 841, 846, 848, 851], "2d": [30, 31, 46, 56, 79, 96, 312, 368, 374, 375, 377, 386, 389, 390, 398, 399, 441, 448, 462, 472, 521, 791, 809, 811, 840, 846], "5f": [30, 31, 811], "nonetheless": [30, 31], "slight": [30, 31, 828, 843, 852], "address": [30, 31, 56, 57, 79, 377, 491, 598, 633, 817, 819, 822, 823, 835, 842, 848, 860, 865, 867, 869, 875], "extract": [30, 31, 38, 45, 56, 79, 97, 377, 466, 492, 840, 842, 844, 865, 869, 870, 875], "gc": [30, 31, 556, 633], "decompos": [30, 31, 56, 79, 96, 99, 322, 323, 324, 325, 326, 347, 354, 368, 371, 375, 439, 444, 447, 450, 840, 853], "said": [30, 31, 777, 844, 860, 862], "otherwis": [30, 31, 48, 51, 52, 53, 55, 56, 57, 60, 61, 66, 67, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 96, 109, 110, 111, 112, 113, 114, 115, 116, 117, 122, 125, 127, 128, 133, 135, 136, 137, 140, 142, 148, 151, 152, 154, 155, 157, 158, 159, 160, 161, 170, 174, 178, 179, 195, 213, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 250, 251, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 302, 303, 304, 305, 306, 308, 309, 310, 312, 322, 323, 324, 325, 326, 333, 334, 335, 336, 337, 339, 340, 341, 349, 350, 356, 358, 360, 361, 362, 366, 368, 371, 374, 375, 377, 380, 393, 394, 395, 398, 399, 400, 418, 431, 446, 448, 451, 452, 453, 454, 455, 456, 457, 458, 461, 462, 463, 467, 468, 469, 471, 473, 474, 475, 482, 489, 491, 492, 493, 495, 498, 500, 502, 503, 504, 506, 508, 520, 521, 522, 523, 524, 533, 536, 537, 539, 540, 544, 545, 546, 547, 548, 551, 552, 555, 557, 559, 560, 561, 563, 564, 567, 568, 575, 576, 590, 591, 592, 594, 596, 598, 599, 600, 612, 616, 618, 623, 627, 628, 629, 630, 631, 633, 634, 635, 636, 639, 640, 643, 644, 645, 646, 647, 649, 650, 651, 652, 658, 659, 660, 662, 665, 666, 667, 668, 672, 673, 674, 675, 676, 677, 679, 681, 683, 684, 686, 690, 692, 693, 695, 696, 697, 698, 701, 702, 703, 705, 706, 707, 708, 709, 710, 712, 713, 714, 715, 730, 737, 738, 739, 740, 742, 743, 744, 745, 747, 748, 749, 750, 751, 752, 754, 756, 757, 759, 760, 761, 762, 763, 764, 765, 766, 767, 770, 775, 776, 791, 793, 794, 800, 811, 819, 823, 826, 828, 829, 830, 836, 837, 839, 843, 848, 855, 862, 863], "x0": [30, 31, 49, 80, 536, 633, 830], "normalize_trac": [30, 31], "html": [30, 31, 45, 55, 56, 78, 79, 146, 154, 242, 252, 253, 268, 327, 334, 335, 368, 371, 374, 377, 386, 418, 491, 521, 628, 629, 631, 636, 638, 646, 684, 685, 713, 763, 831, 859], "fname": [30, 31, 47, 49, 793, 851], "anticip": [30, 31], "addition": [30, 31, 826, 839, 840, 875], "normalize_native_comp": [30, 31], "return_backend_compiled_fn": 30, "immedi": [30, 31, 809, 817, 818], "built": [30, 31, 36, 44, 46, 49, 125, 628, 791, 792, 793, 811, 818, 819, 825, 826, 843, 849, 855, 862, 868, 869, 873], "summar": [30, 31, 96, 843], "eager_graph": [30, 31, 811, 862, 863], "lazy_graph": [30, 31, 811, 862, 863], "thought": [30, 31, 818, 819, 835, 859, 867], "matter": [30, 31, 36, 830, 858], "haven": [30, 31, 36, 855, 869], "jax_out": [30, 31], "ideal": [30, 31, 827, 828, 840, 846, 851], "worth": [30, 31], "differenti": [30, 31, 294, 364, 365, 366, 373, 869], "chosen": [30, 31, 49, 99, 125, 227, 628, 631, 643, 747, 817, 827, 840], "plai": [30, 31, 376, 455, 811, 814, 818, 820, 823, 829, 833, 840, 843, 853, 869, 872], "role": [30, 31, 811, 814, 819, 820, 829, 840, 849, 870, 872, 876], "dl": [30, 31], "effortlessli": [30, 31], "previous": [30, 31, 602, 633, 800, 817, 818, 824, 836, 838, 843, 848], "default_devic": [30, 31, 205, 208, 209, 210, 216, 217, 630, 829, 832, 833], "as_n": [30, 31, 53, 54, 73, 76, 77, 157, 158, 159, 160, 161, 162, 168, 195, 196, 629, 630, 828], "certainli": [30, 31, 811, 859, 875], "upon": [30, 31, 48, 809, 819, 820, 830, 839, 843, 846, 854, 868, 869], "unnecessari": [30, 31, 840], "extend": [30, 31, 56, 79, 377, 386, 483, 524, 824, 825, 828, 831, 832, 835, 840, 844, 854, 866, 869, 875], "infrastructur": [30, 31, 865, 871, 872], "least": [30, 55, 56, 61, 78, 79, 239, 257, 272, 374, 377, 386, 402, 407, 461, 462, 463, 472, 474, 521, 631, 636, 643, 676, 746, 811, 819, 823, 827, 828, 829, 830, 836, 839, 843, 863], "coco": 30, "seamlessli": [31, 843], "therefor": [31, 36, 52, 55, 56, 61, 78, 79, 125, 126, 127, 129, 130, 131, 132, 134, 135, 136, 137, 138, 141, 142, 143, 144, 145, 146, 147, 148, 154, 170, 174, 178, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 239, 240, 242, 244, 245, 246, 250, 251, 252, 253, 254, 255, 259, 261, 262, 263, 264, 266, 267, 268, 269, 272, 274, 275, 276, 277, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 312, 327, 328, 334, 335, 337, 340, 368, 371, 374, 375, 377, 386, 393, 394, 395, 396, 398, 399, 400, 406, 411, 412, 413, 418, 420, 429, 476, 483, 484, 486, 491, 495, 496, 521, 524, 528, 537, 545, 546, 551, 555, 557, 559, 561, 575, 590, 594, 599, 623, 628, 629, 631, 633, 634, 635, 636, 638, 641, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 657, 658, 659, 662, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 692, 693, 694, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 736, 743, 744, 746, 747, 748, 749, 750, 751, 752, 755, 759, 760, 761, 762, 763, 764, 765, 766, 767, 817, 819, 822, 823, 826, 827, 828, 829, 830, 831, 832, 835, 836, 837, 839, 840, 841, 843, 844, 846, 848, 850, 852, 854, 858, 866, 869, 875], "wide": [31, 811, 819, 843, 867, 869], "plenti": 31, "resourc": [31, 812, 817, 818, 827], "visit": [31, 817, 818, 819, 827], "page": [31, 811, 817, 818, 819, 825, 827, 833, 849, 850, 853, 855, 864, 877], "newli": [32, 33, 45, 47, 53, 76, 151, 538, 629, 633, 819, 827, 839, 843], "randon": [32, 33, 35, 36, 37], "mean_": 32, "std_": 32, "detect": [32, 36, 55, 73, 78, 254, 631, 640, 717, 728, 817, 818, 824, 826, 827, 834, 843, 851, 852], "inspect": [32, 36, 534, 633], "__": [32, 33, 34, 35, 36, 37, 73, 830, 851], "exhibit": [33, 875], "script": [33, 811, 818, 819, 822, 827, 830, 848, 854, 869], "comp": 33, "low_level": 33, "chain": [33, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 96, 109, 110, 111, 112, 113, 114, 115, 116, 117, 133, 135, 140, 142, 148, 152, 154, 167, 171, 172, 179, 213, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 250, 251, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 298, 302, 303, 304, 305, 306, 308, 309, 310, 312, 333, 334, 335, 337, 339, 341, 349, 350, 356, 358, 360, 361, 362, 398, 399, 400, 418, 451, 452, 453, 454, 455, 456, 457, 458, 467, 468, 489, 491, 493, 495, 500, 502, 503, 504, 506, 508, 521, 522, 523, 524, 533, 536, 537, 539, 540, 544, 545, 546, 547, 548, 551, 552, 555, 557, 559, 560, 561, 563, 564, 567, 575, 576, 590, 591, 592, 594, 596, 598, 599, 612, 618, 623, 639, 640, 649, 650, 651, 652, 658, 659, 665, 666, 667, 672, 673, 674, 675, 676, 677, 679, 681, 683, 684, 690, 695, 696, 697, 698, 702, 705, 706, 707, 708, 709, 712, 713, 714, 715, 719, 730, 737, 738, 739, 740, 742, 745, 748, 749, 750, 751, 752, 756, 757, 760, 762, 763, 765, 766, 767, 796, 823, 826, 838, 840, 852, 853, 854, 869], "un": [33, 169, 629, 828, 848], "partial_comp": 33, "time_funct": 33, "slowest": [33, 56, 63, 79, 86, 377, 473, 638, 705], "express": [33, 55, 56, 78, 79, 97, 220, 224, 226, 227, 236, 238, 278, 284, 289, 358, 371, 631, 797, 805, 831, 840, 848, 853, 869, 870], "fastest": [33, 56, 63, 79, 86, 375, 377, 442, 473, 638, 705], "maxim": [33, 836, 839, 848, 866, 867, 871, 872, 873], "conclud": [34, 844], "collect": [34, 44, 46, 48, 49, 51, 73, 74, 625, 630, 633, 634, 635, 637, 640, 641, 642, 730, 787, 791, 792, 793, 794, 795, 818, 827, 832, 833, 837, 838, 841, 843, 867, 869, 872], "norm_comp": [35, 36], "global": [35, 36, 46, 57, 73, 80, 102, 157, 158, 159, 160, 161, 210, 211, 212, 581, 582, 585, 591, 592, 604, 605, 608, 629, 630, 633, 783, 794, 800, 818, 823, 824, 827, 828, 829, 832, 836, 840, 848, 869], "approach": [35, 815, 817, 818, 819, 823, 826, 828, 829, 833, 836, 840, 843, 844, 846, 850, 851, 854, 866, 873, 875], "b": [36, 50, 55, 56, 57, 60, 61, 69, 72, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 96, 97, 100, 101, 102, 109, 110, 111, 112, 113, 114, 115, 116, 126, 127, 128, 133, 134, 135, 137, 140, 142, 148, 151, 152, 153, 154, 162, 172, 174, 179, 196, 213, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 316, 317, 329, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 360, 361, 362, 366, 368, 371, 374, 375, 376, 377, 381, 384, 386, 393, 394, 395, 396, 398, 399, 402, 406, 407, 408, 411, 412, 413, 417, 418, 421, 424, 427, 429, 431, 435, 438, 442, 445, 450, 451, 452, 454, 455, 456, 457, 461, 462, 463, 464, 467, 468, 469, 470, 473, 474, 475, 477, 478, 479, 480, 482, 483, 489, 491, 492, 493, 494, 495, 498, 499, 504, 506, 508, 509, 511, 512, 514, 521, 522, 523, 524, 526, 528, 531, 533, 536, 537, 539, 540, 543, 544, 545, 546, 547, 548, 551, 552, 555, 557, 559, 560, 561, 563, 564, 567, 568, 575, 576, 590, 591, 592, 594, 598, 599, 612, 614, 615, 616, 618, 620, 621, 622, 623, 625, 628, 629, 631, 633, 634, 635, 636, 637, 638, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 656, 657, 658, 659, 661, 665, 666, 667, 668, 670, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 695, 696, 697, 698, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 717, 720, 723, 724, 725, 726, 728, 729, 734, 735, 736, 738, 739, 740, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 775, 804, 805, 809, 811, 812, 815, 819, 821, 822, 824, 826, 827, 830, 833, 836, 838, 841, 847, 848, 849, 851, 852, 853, 857, 860, 862, 865], "option": [36, 45, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 96, 101, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 167, 169, 179, 191, 195, 207, 210, 211, 212, 213, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 316, 317, 318, 322, 323, 324, 325, 326, 327, 328, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 366, 368, 371, 374, 375, 376, 377, 380, 381, 382, 384, 386, 387, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 406, 407, 408, 410, 411, 412, 413, 414, 416, 418, 419, 420, 422, 423, 425, 426, 427, 429, 431, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 461, 462, 463, 466, 467, 468, 469, 471, 473, 474, 475, 476, 477, 478, 480, 481, 482, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 536, 537, 539, 540, 542, 544, 545, 546, 547, 548, 551, 552, 554, 555, 556, 557, 559, 560, 561, 563, 564, 567, 572, 575, 576, 580, 590, 591, 592, 594, 596, 598, 599, 600, 612, 614, 615, 618, 620, 621, 622, 623, 625, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 677, 679, 680, 681, 682, 683, 684, 685, 687, 688, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 723, 724, 728, 729, 734, 736, 737, 738, 739, 740, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 770, 772, 776, 783, 787, 788, 790, 791, 793, 795, 796, 804, 809, 817, 818, 819, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 839, 840, 841, 843, 844, 846, 848, 853, 854, 862, 863, 864, 869, 875], "prioriti": [36, 73, 800, 814, 817, 819, 820, 829, 839], "normalize_via_oper": 36, "determin": [36, 55, 56, 61, 63, 67, 70, 73, 78, 79, 80, 84, 91, 93, 96, 99, 101, 102, 131, 154, 156, 163, 169, 170, 171, 172, 174, 175, 176, 191, 201, 203, 204, 215, 220, 221, 222, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 236, 237, 239, 242, 244, 246, 252, 253, 254, 255, 256, 260, 261, 262, 263, 264, 269, 272, 277, 281, 284, 285, 286, 287, 288, 289, 290, 293, 303, 307, 353, 358, 366, 371, 374, 375, 376, 377, 386, 410, 418, 429, 451, 452, 491, 495, 521, 533, 536, 557, 558, 562, 563, 564, 565, 566, 567, 594, 612, 628, 629, 630, 631, 633, 636, 638, 639, 644, 647, 666, 667, 668, 670, 674, 675, 676, 678, 679, 681, 682, 684, 685, 690, 692, 693, 699, 714, 715, 716, 748, 749, 750, 751, 752, 766, 767, 777, 783, 790, 794, 826, 828, 829, 831, 836, 840, 843, 845, 846, 858], "think": [36, 817, 819, 827, 830, 846, 870], "uniqu": [36, 46, 56, 57, 67, 79, 80, 90, 374, 375, 377, 422, 445, 482, 483, 497, 568, 633, 639, 640, 644, 714, 715, 716, 719, 723, 748, 749, 750, 751, 777, 811, 822, 826, 836, 840, 841, 842, 846, 854, 858, 872], "rule": [36, 53, 55, 56, 61, 76, 78, 79, 84, 151, 154, 177, 178, 179, 228, 239, 272, 274, 281, 283, 291, 293, 374, 377, 386, 418, 471, 521, 629, 631, 636, 638, 666, 667, 674, 678, 681, 685, 699, 777, 804, 822, 823, 826, 827, 828, 830, 834, 835, 836, 838, 843, 846, 870], "broadcast": [36, 50, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 96, 101, 102, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 140, 141, 142, 143, 144, 145, 147, 148, 151, 152, 153, 213, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 250, 251, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 328, 334, 335, 336, 337, 338, 339, 342, 343, 345, 347, 349, 351, 352, 353, 354, 358, 366, 368, 371, 374, 375, 376, 377, 380, 381, 386, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 407, 408, 410, 411, 412, 413, 416, 418, 423, 425, 426, 434, 435, 440, 441, 443, 452, 453, 454, 455, 457, 458, 464, 468, 471, 476, 484, 485, 486, 487, 489, 491, 493, 495, 496, 500, 503, 504, 506, 507, 508, 510, 511, 521, 522, 523, 524, 527, 528, 529, 530, 531, 539, 540, 544, 545, 546, 551, 552, 561, 575, 576, 614, 615, 618, 620, 621, 622, 623, 625, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 662, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 677, 679, 680, 681, 682, 683, 685, 687, 688, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 708, 709, 710, 711, 713, 736, 737, 738, 739, 740, 742, 743, 744, 745, 747, 751, 752, 756, 757, 759, 760, 761, 762, 763, 764, 765, 766, 767, 775, 777, 804, 826, 828, 830, 831, 832, 843, 844, 848], "elementwis": [36, 56, 64, 79, 87, 299, 301, 361, 366, 636, 641, 691, 736, 836, 844, 848], "taken": [36, 56, 61, 79, 84, 340, 371, 374, 419, 636, 670, 690, 817, 827, 840, 844, 853, 870], "account": [36, 46, 48, 56, 63, 79, 86, 286, 377, 473, 631, 638, 705, 790, 804, 818, 827, 831, 840, 844, 862], "fact": [36, 96, 819, 822, 827, 840, 843, 848, 851], "consum": [36, 772, 826, 827, 835, 841, 843], "thrown": [36, 561, 633, 818, 823, 829, 832, 834, 854], "doesn": [36, 561, 579, 633, 770, 791, 817, 818, 824, 826, 827, 828, 829, 830, 833, 834, 836, 838, 843, 846, 848, 854, 862, 867], "consider": [36, 817, 830, 835, 846, 858, 866, 867], "standalon": [37, 817, 823, 843, 856, 865, 870, 875, 876], "static": [37, 56, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 105, 106, 128, 318, 374, 395, 408, 413, 422, 444, 450, 489, 501, 594, 628, 635, 662, 681, 788, 793, 840, 845, 854, 868, 869, 870], "flow": [38, 826, 862, 869, 870], "statement": [38, 43, 827, 839, 843, 846, 854, 862, 863], "opposit": 38, "exclud": [38, 69, 79, 92, 125, 146, 327, 368, 522, 523, 628, 642, 740, 756, 775, 778, 800, 830, 848, 862], "todo": [39, 40, 41, 46, 49, 79, 523, 817, 828, 840], "aim": [42, 815, 819, 822, 833, 837, 840, 843, 847, 867, 869, 872], "interfac": [42, 75, 133, 628, 850, 853, 854, 856, 859, 865, 866, 867, 868, 869, 873, 876], "set_framework": [42, 49], "underneath": [42, 827, 867], "sai": [42, 817, 818, 833, 837, 850, 860, 877], "clip": [42, 55, 56, 63, 78, 79, 80, 86, 270, 271, 377, 466, 491, 492, 539, 540, 631, 633, 638, 826, 836, 838, 839, 851, 853, 866], "a_min": 42, "a_max": 42, "tensforflow": 42, "clip_by_valu": [42, 853, 866], "clip_value_min": 42, "clip_value_max": 42, "clamp": [42, 56, 79, 299, 366, 853], "min": [42, 46, 53, 56, 57, 61, 69, 76, 79, 80, 84, 92, 144, 146, 164, 167, 271, 327, 330, 335, 368, 371, 375, 377, 429, 488, 529, 545, 575, 576, 591, 628, 629, 631, 633, 636, 646, 677, 683, 686, 687, 693, 811, 866], "max": [42, 44, 53, 56, 57, 61, 69, 76, 79, 80, 84, 92, 164, 167, 270, 334, 371, 374, 375, 376, 377, 393, 394, 395, 411, 412, 413, 414, 416, 418, 429, 451, 488, 490, 491, 539, 540, 545, 561, 575, 576, 629, 631, 633, 636, 646, 677, 679, 682, 775, 791, 795, 827, 840, 866], "49": [42, 46, 56, 65, 79, 83, 84, 286, 374, 375, 386, 396, 406, 417, 442, 522, 631, 646, 691, 739, 758], "devicearrai": [42, 823, 840, 848, 850], "concaten": [42, 56, 57, 63, 79, 84, 377, 468, 544, 548, 633, 635, 638, 662, 681, 699, 775, 841, 846, 848, 851], "accept": [42, 51, 52, 55, 56, 61, 74, 78, 79, 125, 126, 127, 129, 130, 131, 132, 134, 135, 136, 137, 138, 141, 142, 143, 144, 145, 146, 147, 148, 154, 170, 174, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 239, 240, 242, 244, 245, 246, 250, 251, 252, 253, 254, 255, 256, 259, 261, 262, 263, 264, 266, 267, 268, 269, 272, 274, 275, 276, 277, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 312, 327, 328, 334, 335, 337, 340, 341, 363, 368, 371, 373, 374, 375, 377, 386, 393, 394, 395, 396, 398, 399, 400, 406, 411, 412, 413, 418, 420, 429, 483, 491, 495, 521, 524, 528, 537, 545, 546, 551, 555, 557, 559, 561, 575, 590, 594, 599, 623, 628, 629, 631, 633, 634, 635, 636, 638, 641, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 657, 658, 659, 662, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 692, 693, 694, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 736, 743, 744, 746, 747, 748, 749, 750, 751, 752, 755, 759, 760, 761, 762, 763, 764, 765, 766, 767, 811, 817, 818, 819, 823, 826, 828, 829, 830, 831, 835, 836, 837, 838, 839, 840, 841, 843, 844, 846, 850, 856, 867], "jax_concat": 42, "tf_concat": 42, "np_concat": 42, "torch_concat": 42, "85": [42, 50, 56, 65, 72, 78, 79, 81, 83, 88, 102, 111, 224, 233, 234, 278, 294, 295, 298, 366, 386, 522, 591, 618, 625, 631, 633, 634, 635, 642, 659, 738, 739, 740], "mymodel": [42, 851], "x_in": [42, 851, 852, 853], "reduce_mean": [42, 811, 851, 852, 853], "91": [42, 56, 83, 88, 359, 371, 417, 635, 636, 642, 646, 659, 681, 739, 758], "49040043354034424": 42, "48975786566734314": 42, "4892795979976654": 42, "48886892199516296": 42, "4884953498840332": 42, "4881443977355957": 42, "4878086447715759": 42, "48748287558555603": 42, "48716384172439575": 42, "48684927821159363": 42, "48653748631477356": 42, "48622724413871765": 42, "4859171509742737": 42, "48560672998428345": 42, "48529526591300964": 42, "4849821627140045": 42, "48466697335243225": 42, "4843493402004242": 42, "4840289056301117": 42, "4837053418159485": 42, "4833785891532898": 42, "4830484390258789": 42, "48271444439888": 42, "48237672448158264": 42, "48203518986701965": 42, "48168954253196716": 42, "4813397228717804": 42, "4809857904911041": 42, "48062753677368164": 42, "48026490211486816": 42, "479898065328598": 42, "47952669858932495": 42, "4791509211063385": 42, "4787706732749939": 42, "47838595509529114": 42, "4779967665672302": 42, "47760307788848877": 42, "4772048890590668": 42, "47680220007896423": 42, "47639501094818115": 42, "47598329186439514": 42, "4755673110485077": 42, "4751465618610382": 42, "4747215211391449": 42, "4742920398712158": 42, "47385817766189575": 42, "47341999411582947": 42, "47297725081443787": 42, "4725303053855896": 42, "47207894921302795": 42, "47162333130836487": 42, "47116345167160034": 42, "470699280500412": 42, "47023090720176697": 42, "54": [42, 53, 55, 60, 78, 79, 83, 88, 167, 236, 237, 242, 257, 286, 292, 313, 368, 374, 386, 396, 406, 522, 631, 635, 636, 646, 659, 678, 681, 738, 739, 740, 758, 827, 830], "4697583019733429": 42, "55": [42, 50, 79, 88, 117, 233, 292, 386, 522, 559, 631, 633, 636, 642, 646, 675, 681, 739, 740, 758, 822], "46928152441978455": 42, "46880054473876953": 42, "4683155119419098": 42, "4678264260292053": 42, "46733325719833374": 42, "46683603525161743": 42, "61": [42, 44, 55, 56, 61, 78, 79, 81, 85, 88, 225, 260, 262, 287, 396, 614, 631, 634, 635, 636, 657, 674, 740, 833], "4663347601890564": 42, "4658295214176178": 42, "465320348739624": 42, "4648073613643646": 42, "46429020166397095": 42, "4637692868709564": 42, "46324464678764343": 42, "4627160429954529": 42, "4621836841106415": 42, "4616474211215973": 42, "71": [42, 55, 78, 83, 238, 278, 417, 631], "46110764145851135": 42, "72": [42, 56, 65, 79, 81, 244, 348, 371, 374, 396, 406, 618, 631, 634, 636, 646, 681, 739, 758], "460563987493515": 42, "4600166976451874": 42, "74": [42, 44, 55, 88, 234, 264, 631, 636, 678], "45946577191352844": 42, "45891112089157104": 42, "45835286378860474": 42, "4577910006046295": 42, "78": [42, 58, 283, 620, 631, 634, 636, 642, 646, 681, 739, 758], "45722562074661255": 42, "79": [42, 44, 56, 57, 79, 80, 83, 88, 101, 239, 374, 396, 406, 417, 539, 540, 631, 633, 740], "45665669441223145": 42, "80": [42, 56, 79, 348, 371, 375, 386, 442, 522, 636, 640, 646, 681, 728, 758, 859], "4560841917991638": 42, "81": [42, 46, 55, 61, 76, 78, 84, 88, 167, 237, 262, 263, 287, 386, 522, 629, 631, 636, 640, 642, 646, 674, 678, 691, 725, 740, 758, 843], "4555082619190216": 42, "45492875576019287": 42, "45434585213661194": 42, "84": [42, 60, 69, 78, 88, 167, 197, 262, 629, 630, 636, 641, 646, 659, 681, 736, 739, 740, 758], "45375964045524597": 42, "4531698524951935": 42, "4525766670703888": 42, "45198020339012146": 42, "4513803720474243": 42, "4507772624492645": 42, "4501707851886749": 42, "4495610296726227": 42, "4489481747150421": 42, "44833192229270935": 42, "4477125108242035": 42, "44708991050720215": 42, "44646409153938293": 42, "44583529233932495": 42, "98": [42, 50, 56, 58, 65, 72, 78, 81, 88, 112, 237, 285, 359, 371, 618, 625, 634, 636, 640, 643, 646, 681, 718, 729, 738, 740, 747, 758], "4452032148838043": 42, "44456806778907776": 42, "4439": 42, "selectbackward0": 42, "ivy_compil": 43, "ic": 43, "numer": [43, 52, 53, 55, 56, 57, 61, 65, 66, 69, 76, 78, 79, 80, 84, 88, 89, 91, 101, 102, 138, 151, 219, 222, 235, 239, 244, 245, 246, 253, 254, 255, 258, 267, 268, 272, 274, 275, 276, 277, 281, 282, 283, 287, 288, 292, 293, 374, 376, 381, 386, 418, 453, 508, 521, 581, 582, 591, 592, 604, 605, 628, 629, 631, 633, 636, 642, 643, 646, 667, 674, 676, 681, 684, 686, 688, 690, 692, 738, 739, 740, 742, 743, 744, 746, 747, 752, 759, 762, 764, 775, 776, 777, 778, 790, 815, 828, 833, 838, 840, 841, 843, 844, 845, 846, 848, 852, 866, 869, 875], "anyth": [43, 56, 79, 386, 527, 528, 819, 832, 843, 844, 869, 870], "affect": [43, 49, 56, 376, 456, 827, 840], "intermedi": [43, 867, 868, 869, 870, 875], "variabl": [43, 45, 46, 48, 56, 57, 58, 64, 73, 79, 80, 81, 87, 121, 122, 124, 321, 368, 374, 375, 381, 386, 420, 446, 509, 520, 521, 537, 561, 562, 563, 564, 567, 594, 615, 616, 618, 620, 621, 622, 627, 633, 634, 636, 639, 641, 685, 714, 715, 716, 736, 772, 783, 788, 790, 791, 792, 793, 794, 795, 796, 819, 824, 828, 831, 835, 838, 839, 843, 844, 848, 851, 852, 853, 854, 855, 862, 870], "original_fn": 43, "100000": 43, "var": [43, 69, 92, 94, 121, 122, 123, 124, 627, 639, 646, 714, 715, 797, 818, 830, 848, 866], "co": [43, 44, 55, 57, 78, 237, 242, 244, 285, 548, 631, 633, 816, 828, 848, 859], "sin": [43, 55, 57, 78, 237, 242, 244, 285, 548, 631, 633, 823, 848], "tan": [43, 55, 78, 535, 631, 633, 831, 835, 836, 839, 840, 848], "comp_fn": 43, "compile_graph": [43, 49], "expected_result": 43, "compiled_result": 43, "irrelev": [43, 827, 828, 830], "opeat": 43, "_layer": [43, 848], "net": [43, 48, 49, 848, 853, 859, 860], "compiled_net": 43, "proceed": 44, "latest": [44, 46, 55, 56, 78, 79, 154, 242, 252, 253, 268, 334, 335, 371, 374, 377, 386, 418, 420, 491, 521, 629, 631, 636, 638, 646, 684, 685, 713, 763, 791, 811, 817, 818, 819, 822, 824, 827, 831, 833, 844, 854, 855, 863, 874], "pypi": [44, 46, 49, 817, 818, 844, 854], "pkg": [44, 46, 49], "public": [44, 46, 49, 541, 633, 827, 838, 850, 872], "revis": [44, 46, 819], "req": [44, 46], "tabqrujw": 44, "command": [44, 46, 813, 818, 822, 825, 827, 833, 834, 855], "filter": [44, 46, 48, 56, 60, 79, 83, 316, 317, 368, 374, 395, 413, 635, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 777, 791, 811, 824, 827], "quiet": [44, 46], "commit": [44, 46, 814, 815, 817, 820, 822, 830, 842, 843], "f3be3702c9fab1c9fa97c743813a4bdb39525705": 44, "metadata": [44, 46, 49, 839], "setup": [44, 46, 49, 818, 819, 825, 827, 833], "done": [44, 46, 49, 636, 673, 816, 817, 818, 819, 822, 825, 827, 829, 830, 833, 834, 839, 840, 843, 851, 862, 863, 869], "py3": [44, 46, 49], "whl": [44, 45, 46, 49], "cp39": [44, 46], "manylinux_2_12_x86_64": [44, 46], "manylinux2010_x86_64": [44, 46], "manylinux_2_17_x86_64": [44, 46, 818], "manylinux2014_x86_64": [44, 45, 46], "py2": [44, 46], "495": [44, 46], "nvidia_ml_pi": [44, 46], "pypars": [44, 46, 49], "ivy_cor": [44, 46, 49, 818], "1338326": 44, "sha256": [44, 46, 49], "e5c4205c80116b781373daf4502d61881235c5e3eb0d55096ab07dcc6eb66bec": 44, "store": [44, 46, 49, 53, 56, 57, 61, 63, 73, 76, 79, 80, 84, 86, 153, 374, 375, 419, 427, 431, 445, 449, 548, 633, 636, 638, 690, 707, 772, 773, 791, 792, 793, 813, 819, 823, 824, 826, 831, 837, 839, 840, 841, 848, 850, 851, 852, 856, 862], "ephem": [44, 46], "njrc_e6b": 44, "2e": [44, 46], "ae2d7c5ce8708e605368a33e08d57d1de8e107e3db157c3063": [44, 46], "4845": [44, 46], "a8cde63eca203d3bd7f900fa32f44dbd038476606a3836de14caf2b0a5ff7460": 44, "b6": [44, 46], "0d": [44, 46], "0d1bbd99855f99cb2f6c2e5ff96f8023fad8ec367695f7d72d": [44, 46], "uninstal": [44, 46, 49], "vnd": [44, 46, 49], "json": [44, 46, 49, 73, 818, 833, 851], "psst": 44, "pickl": [44, 45, 73, 793, 826, 851], "imageio": 44, "urllib": [44, 49], "_src": 44, "tpu": [44, 193, 199, 208, 210, 215, 630, 809, 829, 869, 872], "back": [44, 56, 63, 79, 86, 377, 473, 494, 577, 601, 633, 635, 638, 662, 705, 790, 795, 805, 818, 823, 828, 829, 832, 837, 838, 845, 847, 854, 855, 859, 867, 871], "tf_cpp_min_log_level": 44, "info": [44, 808, 809, 811, 825, 831, 834], "mkdir": [44, 45, 46, 818, 827], "perceiv": [44, 45], "touch": 44, "io_processor": 44, "position_encod": 44, "jmp": 44, "tabul": 44, "29359": 44, "29k": 44, "67k": 44, "002": 44, "30179": 44, "47k": 44, "8107": 44, "9k": 44, "92k": 44, "itertool": 44, "preprocessor": 44, "vector": [44, 52, 56, 57, 60, 61, 79, 80, 83, 84, 96, 97, 99, 138, 364, 365, 373, 374, 375, 377, 380, 381, 386, 397, 428, 433, 441, 443, 448, 483, 485, 487, 505, 509, 521, 540, 544, 561, 613, 628, 633, 635, 636, 659, 662, 667, 671, 672, 674, 676, 681, 686, 687, 691, 692, 693, 694, 775, 791, 869], "perceiverbackbon": 44, "input_preprocessor": 44, "_input_preprocessor": 44, "_encod": 44, "__call__": [44, 772, 791, 792, 793, 811, 863], "is_train": 44, "po": [44, 805], "input_mask": 44, "network_input_is_1d": 44, "_input_is_1d": 44, "queri": [44, 45, 60, 73, 83, 197, 211, 554, 580, 630, 633, 635, 662, 665, 791, 826, 828, 833, 850, 869], "decod": [44, 851], "cross": [44, 46, 61, 62, 84, 85, 97, 636, 637, 695, 696, 697, 811, 827, 828], "attend": [44, 635, 662], "encoder_queri": 44, "latent": [44, 639, 715, 716], "imagepreprocessor": 44, "deal": [44, 793, 815, 829, 836, 838, 840, 843, 854], "image_s": 44, "fourier_pos_config": 44, "position_encoding_typ": 44, "fourier": [44, 56, 79, 374, 397, 402, 403, 407, 408, 418, 419, 422, 548, 633], "fourier_position_encoding_kwarg": 44, "concat_po": 44, "max_resolut": 44, "num_band": [44, 57, 80, 548, 633], "sine_onli": 44, "prep_typ": 44, "spatial_downsampl": 44, "cross_attend_widening_factor": 44, "cross_attention_shape_for_attn": 44, "kv": 44, "dropout_prob": 44, "num_block": 44, "num_cross_attend_head": 44, "num_self_attend_head": 44, "num_self_attends_per_block": 44, "num_z_channel": 44, "self_attend_widening_factor": 44, "use_query_residu": 44, "z_index_dim": 44, "z_pos_enc_init_scal": 44, "perceiver_backbon": [44, 811], "perceiverencod": 44, "At": [44, 817, 818, 819, 822, 833, 843, 844, 859, 869], "publish": [44, 811, 854, 860, 863], "thankfulli": [44, 843], "perceiver_io": [44, 45], "imagenet_fourier_position_encod": 44, "pystat": 44, "imagenet_checkpoint": 44, "rb": 44, "ckpt": 44, "09": [44, 50, 55, 81, 88, 117, 277, 287, 614, 625, 631, 634, 739], "173": [44, 61, 636, 674], "194": 44, "217": [44, 832], "125": [44, 56, 61, 84, 233, 345, 371, 376, 452, 631, 636, 691], "177": [44, 46], "193776248": 44, "185m": 44, "octet": 44, "184": 44, "80m": 44, "144mb": 44, "144": 44, "mean_rgb": 44, "stddev_rgb": 44, "im": 44, "denorm": 44, "resize_and_center_crop": 44, "crop": [44, 56, 79, 374, 403, 408, 419], "center": [44, 790], "image_height": [44, 46, 811], "image_width": [44, 811], "padded_center_crop_s": 44, "minimum": [44, 55, 56, 57, 63, 66, 69, 78, 79, 80, 86, 89, 92, 219, 247, 274, 298, 330, 334, 335, 345, 366, 368, 371, 377, 386, 483, 519, 523, 529, 581, 582, 591, 592, 604, 605, 631, 633, 638, 643, 646, 698, 744, 759, 761, 775, 777, 778, 783, 828, 845, 866, 872, 876], "offset_height": 44, "offset_width": 44, "crop_window": 44, "inter_cub": 44, "ye": [44, 854], "dummy_input": [44, 811], "transpili": 44, "torch_perceiver_backbon": 44, "quicker": 44, "params_v": [44, 811, 863], "perceiverioclassifi": [44, 811], "max_pool": [44, 811], "Of": [44, 823, 839, 840, 851, 874, 875], "cours": [44, 818, 819, 822, 823, 830, 839, 840, 846, 851, 854, 874, 875], "468": 44, "huggingface_hub": 44, "multiprocess": [44, 73, 102, 633, 851, 854], "py39": 44, "132": [44, 79], "pyarrow": 44, "xxhash": 44, "212": [44, 56, 60, 79, 358, 371, 659], "pyyaml": 44, "2021": [44, 56, 79, 361, 371, 811], "aiohttp": 44, "async": 44, "timeout": [44, 73, 102, 585, 608, 633, 845], "0a3": 44, "async_timeout": 44, "frozenlist": 44, "manylinux_2_5_x86_64": [44, 49], "manylinux1_x86_64": [44, 49], "158": 44, "attr": [44, 828], "aiosign": 44, "multidict": 44, "114": [44, 374, 396, 406], "yarl": 44, "264": [44, 640, 717], "2022": [44, 45], "pytz": 44, "2020": [44, 822, 869], "dateutil": [44, 49], "wikiart": 44, "paint": [44, 811, 848, 858], "load_dataset": [44, 862, 863], "n_sampl": [44, 56, 79, 375, 377, 424, 432, 486], "10000": [44, 46, 52, 75, 137, 628], "huggan": 44, "split": [44, 45, 46, 50, 55, 56, 63, 72, 73, 78, 79, 86, 109, 110, 111, 112, 113, 114, 115, 116, 117, 210, 211, 212, 290, 294, 299, 300, 302, 347, 354, 366, 377, 469, 478, 498, 544, 571, 625, 630, 631, 633, 635, 638, 648, 655, 656, 710, 772, 787, 791, 811, 812, 819, 827, 847, 848, 854, 876], "wiki_art": 44, "gib": 44, "unknown": [44, 775], "total": [44, 46, 56, 69, 73, 79, 92, 102, 133, 214, 329, 330, 331, 339, 368, 371, 376, 451, 628, 630, 643, 646, 746, 763, 765, 805, 811, 812, 818, 819, 828, 829, 830, 843, 846, 851, 852, 854, 860], "huggan___parquet": 44, "36ee951979f9b56c": 44, "2a3b91fbd88a2c90d1dbbb32b460cf621d31bd5b05b934492fdef7d8d6f236ec": 44, "parquet": 44, "subsequ": [44, 800, 818, 823, 827, 828, 830, 835, 836, 839, 843, 852, 870], "reus": [44, 52, 75, 79, 86, 127, 461, 462, 469, 471, 473, 474, 475, 482, 498, 701, 702, 703, 705, 707, 708, 710, 712, 832, 843, 874], "curl": [44, 818], "row": [44, 56, 79, 97, 131, 146, 327, 368, 375, 377, 384, 386, 434, 446, 475, 481, 499, 514, 520, 521, 628, 636, 642, 643, 677, 685, 686, 691, 737, 746, 790], "2fwikiart": 44, "xferd": 44, "dload": 44, "upload": [44, 843], "spent": [44, 860], "25936": 44, "278k": 44, "number": [44, 46, 47, 48, 49, 52, 53, 55, 56, 57, 60, 61, 62, 63, 65, 66, 67, 69, 70, 73, 75, 76, 78, 79, 80, 83, 84, 85, 86, 88, 89, 90, 92, 93, 96, 97, 99, 101, 102, 105, 125, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 146, 152, 157, 158, 159, 160, 161, 163, 164, 167, 170, 171, 172, 174, 176, 179, 203, 204, 205, 219, 220, 221, 222, 223, 225, 227, 228, 235, 237, 239, 240, 242, 244, 245, 246, 252, 253, 254, 256, 260, 262, 270, 271, 272, 273, 274, 275, 277, 279, 281, 282, 283, 285, 286, 290, 292, 318, 322, 323, 324, 325, 326, 327, 329, 330, 331, 333, 334, 335, 337, 338, 339, 340, 350, 355, 359, 368, 371, 374, 375, 376, 377, 380, 386, 408, 419, 422, 425, 428, 432, 433, 434, 444, 448, 450, 451, 461, 462, 463, 483, 484, 485, 486, 487, 489, 491, 493, 495, 497, 500, 501, 502, 519, 521, 522, 523, 524, 530, 548, 555, 573, 590, 591, 592, 599, 612, 613, 626, 628, 629, 630, 631, 633, 635, 636, 637, 638, 639, 642, 643, 644, 646, 647, 648, 655, 656, 658, 660, 662, 667, 671, 672, 673, 679, 684, 686, 690, 691, 692, 695, 698, 700, 701, 703, 704, 706, 707, 709, 711, 713, 714, 715, 716, 737, 741, 746, 748, 749, 756, 757, 759, 760, 761, 762, 763, 764, 765, 766, 767, 772, 775, 776, 777, 783, 790, 791, 794, 805, 809, 811, 818, 819, 826, 827, 828, 829, 830, 837, 838, 839, 843, 844, 845, 846, 848, 851, 857, 858, 862], "abstract_expression": 44, "action_paint": 44, "analytical_cub": 44, "art_nouveau": 44, "baroqu": 44, "color_field_paint": 44, "contemporary_r": 44, "cubism": 44, "early_renaiss": 44, "expression": 44, "fauvism": 44, "high_renaiss": 44, "impression": 44, "mannerism_late_renaiss": 44, "minim": [44, 50, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 101, 109, 110, 111, 112, 113, 114, 115, 116, 117, 127, 128, 130, 132, 133, 135, 137, 138, 139, 140, 142, 144, 145, 148, 152, 153, 154, 167, 171, 172, 179, 196, 213, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 300, 302, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 316, 317, 318, 321, 328, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 368, 374, 376, 377, 386, 393, 394, 395, 396, 398, 399, 400, 402, 406, 407, 408, 411, 412, 413, 417, 418, 421, 422, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 435, 439, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 506, 508, 509, 510, 511, 512, 513, 514, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 536, 537, 539, 540, 543, 544, 545, 546, 547, 548, 551, 552, 555, 557, 559, 560, 561, 563, 564, 565, 567, 568, 570, 575, 576, 590, 591, 592, 593, 594, 596, 598, 599, 612, 614, 615, 618, 620, 621, 622, 623, 649, 650, 651, 652, 653, 654, 657, 658, 659, 661, 665, 666, 667, 669, 670, 671, 672, 673, 674, 675, 676, 677, 682, 683, 684, 686, 693, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 736, 737, 738, 739, 740, 742, 743, 744, 745, 746, 747, 748, 749, 750, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 765, 766, 767, 805, 831, 839, 841, 846, 848, 862, 867, 875], "naive_art_primitiv": 44, "new_real": 44, "northern_renaiss": 44, "pointil": 44, "pop_art": 44, "post_impression": 44, "realism": 44, "rococo": 44, "romantic": 44, "symbol": [44, 804, 817, 818, 869, 870], "synthetic_cub": 44, "ukiyo_": 44, "custom": [44, 56, 79, 298, 310, 363, 366, 373, 775, 804, 813, 821, 827, 832, 837, 841, 843, 846, 852, 859, 869, 873, 874, 875], "hugginfac": 44, "customdataset": 44, "__len__": [44, 826], "__getitem__": [44, 73, 826], "idx": [44, 45, 46, 534, 633, 811, 829, 850], "random_split": 44, "224x224": 44, "val_siz": 44, "dataset_train": 44, "dataset_v": 44, "dataset_test": 44, "dataloader_train": 44, "dataloader_v": 44, "dataloader_test": 44, "batch": [44, 45, 46, 56, 57, 61, 73, 79, 80, 84, 210, 211, 374, 375, 376, 380, 388, 390, 391, 397, 410, 420, 437, 451, 453, 500, 501, 502, 505, 548, 551, 552, 613, 630, 633, 635, 636, 639, 641, 659, 660, 661, 662, 693, 714, 715, 716, 736, 775, 791, 794, 811, 826, 836, 841, 851, 867], "train_featur": 44, "train_label": 44, "imshow": [44, 45], "001": [44, 55, 56, 64, 76, 79, 81, 164, 262, 279, 337, 350, 371, 615, 629, 631, 634, 641, 736, 775, 851, 852], "train_step": 44, "running_loss": [44, 46, 811], "last_loss": 44, "training_load": 44, "intra": 44, "report": [44, 814, 817, 843], "zero_grad": 44, "adjust": [44, 69, 92, 375, 446, 646, 763, 765, 800, 809], "999": [44, 58, 78, 81, 290, 614, 615, 620, 622, 631, 634, 795, 852], "epoch_numb": 44, "best_vloss": 44, "1_000_000": 44, "running_vloss": 44, "vdata": 44, "vinput": 44, "vlabel": 44, "voutput": 44, "vloss": 44, "avg_vloss": 44, "model_path": 44, "model_": 44, "state_dict": [44, 792, 793], "highest": [44, 56, 65, 79, 88, 318, 321, 368, 642, 738, 828], "energi": 44, "augment": 44, "mayb": [44, 45, 51, 811, 818, 827, 848, 850], "finetun": 44, "deploi": [44, 811, 827, 856, 863, 867, 868, 869, 871, 875], "present": [45, 56, 69, 73, 79, 92, 337, 371, 380, 500, 501, 502, 646, 761, 817, 818, 819, 826, 828, 829, 835, 839, 848, 858, 866, 867, 876], "percieverio": 45, "ai": [45, 827, 867, 871], "contribut": [45, 56, 79, 386, 524, 814, 816, 818, 819, 820, 825, 833, 834, 840, 841, 848, 855, 862, 873, 877], "highli": [45, 811, 817, 869], "invit": [45, 817, 820, 840, 846], "g4ar9q7dtn": 45, "step1": 45, "printf": 45, "8packag": 45, "share": [45, 73, 185, 629, 775, 776, 811, 824, 826, 830, 836, 838, 840, 841, 843, 846, 848, 859, 867, 868, 875], "googledr": 45, "10_wfp1u4rmzc20eignrdqa9v2s9byjwv": 45, "file_id": 45, "drive": [45, 46], "uc": 45, "tee": [45, 818], "file_id_wget_cmd": 45, "perl": 45, "pe": 45, "g": [45, 47, 48, 56, 65, 67, 69, 71, 79, 88, 94, 96, 150, 179, 192, 239, 252, 272, 279, 282, 334, 335, 371, 374, 375, 377, 381, 386, 411, 413, 450, 491, 507, 508, 509, 510, 511, 522, 523, 629, 630, 631, 636, 640, 642, 644, 646, 672, 673, 677, 684, 686, 687, 693, 720, 724, 726, 729, 734, 738, 739, 740, 748, 749, 750, 751, 756, 757, 759, 761, 762, 764, 790, 809, 812, 817, 818, 821, 822, 824, 825, 826, 838, 840, 843, 848, 854, 856, 860, 865], "uuid": 45, "anywai": [45, 823, 837, 840], "bin": [45, 56, 79, 386, 519, 524, 818, 819, 822, 826], "bash": [45, 818, 819, 822], "step2": 45, "interpret": [45, 52, 56, 75, 79, 126, 127, 133, 139, 376, 386, 453, 521, 628, 827, 870], "sudo": [45, 818], "apt": [45, 818], "yf": 45, "step3": 45, "delet": [45, 819, 827], "xvzf": 45, "rm": [45, 47, 813, 819], "step4": 45, "symlink": 45, "unzip": [45, 46], "fr": 45, "l": [45, 56, 61, 78, 84, 266, 375, 376, 428, 451, 635, 636, 662, 666, 671, 672, 673, 676, 690, 819, 821], "ln": 45, "sf": 45, "la": 45, "step5": 45, "regular": [45, 79, 375, 386, 437, 442, 525, 818, 840, 869], "step6": 45, "ipkykernel": 45, "step7": 45, "engbjapanpython3": 45, "ipykernel": 45, "reconnect": 45, "sy": [45, 877], "oct": 45, "gcc": [45, 867, 874], "lf": 45, "upgrad": 45, "cuda11": 45, "cudnn805": 45, "cp38": [45, 49, 818], "helper": [45, 770, 772, 773, 779, 781, 782, 811, 815, 825, 828, 832, 833, 842, 851, 856], "feedforward": 45, "prenorm": 45, "perceiveriospec": 45, "fetch": [45, 556, 633, 818, 819, 822, 827], "ogbanugot": [45, 877], "xmartlab": 45, "caffeflow": 45, "fetch_class": 45, "class_label": 45, "ground_truth": 45, "127": [45, 53, 56, 61, 76, 79, 167, 358, 371, 629, 636, 674], "path_to_imag": 45, "get_imag": 45, "ax": [45, 50, 56, 61, 63, 66, 69, 70, 72, 79, 84, 86, 89, 92, 93, 101, 105, 112, 116, 212, 334, 335, 339, 340, 355, 362, 371, 372, 374, 375, 377, 380, 386, 403, 408, 419, 445, 482, 483, 489, 503, 526, 527, 528, 529, 530, 531, 544, 613, 630, 633, 636, 638, 643, 646, 647, 667, 677, 685, 688, 689, 693, 700, 702, 703, 706, 708, 710, 713, 743, 744, 759, 760, 761, 762, 763, 764, 765, 766, 767, 775, 777, 791, 828, 830, 843, 844, 848, 850], "fig": [45, 46], "subplot": [45, 46], "spine": 45, "set_vis": 45, "right": [45, 56, 61, 73, 79, 84, 102, 119, 120, 231, 233, 286, 349, 371, 374, 375, 377, 409, 439, 445, 446, 448, 474, 544, 627, 631, 633, 636, 645, 686, 691, 754, 775, 812, 817, 818, 819, 821, 822, 830, 833, 846, 851, 862], "bottom": [45, 544, 633, 817, 818, 827, 833, 875], "tick_param": 45, "set_xticklabel": 45, "set_yticklabel": 45, "show_result": 45, "along": [45, 50, 52, 55, 56, 57, 61, 62, 63, 65, 66, 68, 69, 70, 72, 73, 75, 78, 79, 80, 84, 85, 86, 88, 89, 91, 92, 93, 96, 97, 99, 112, 116, 121, 136, 137, 212, 286, 289, 291, 329, 330, 331, 334, 335, 339, 340, 355, 362, 368, 371, 372, 374, 375, 376, 377, 380, 386, 396, 402, 403, 406, 407, 408, 418, 419, 444, 455, 468, 469, 470, 472, 474, 475, 483, 488, 491, 493, 495, 503, 504, 505, 506, 522, 523, 524, 526, 527, 528, 529, 530, 531, 544, 551, 627, 628, 630, 631, 633, 636, 637, 638, 639, 642, 643, 645, 646, 647, 667, 681, 690, 692, 693, 695, 696, 697, 699, 702, 703, 704, 706, 707, 709, 711, 712, 714, 715, 716, 742, 743, 744, 752, 753, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 772, 775, 791, 811, 817, 820, 821, 830, 839, 842, 844, 846, 848, 869], "figur": [45, 845], "figsiz": [45, 46], "listdir": [45, 46], "endswith": 45, "this_dir": 45, "dirnam": 45, "join": [45, 46, 63, 73, 79, 86, 467, 468, 638, 699, 709, 811, 820], "add_subplot": 45, "xtick": 45, "ytick": 45, "set_titl": [45, 46], "color": [45, 73, 102, 810], "green": [45, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 102, 810, 817, 818, 819], "red": 45, "perceiver_io_img_classif": 45, "normalize_imag": 45, "batch_shap": [45, 60, 65, 75, 83, 88, 131, 140, 628, 635, 636, 642, 661, 665, 694, 737, 791, 846, 848, 850], "img_dim": 45, "queries_dim": 45, "learn_queri": 45, "load_weight": 45, "num_input_ax": 45, "network_depth": 45, "num_lat_att_per_lay": 45, "query_shap": 45, "num_fourier_freq_band": 45, "weight_fpath": 45, "pretrained_weight": 45, "isfil": 45, "noinspect": [45, 850], "pybroadexcept": 45, "from_disk_as_pickl": 45, "action": [45, 809, 816, 827, 830, 834, 843], "fail": [45, 770, 815, 818, 819, 822, 827, 828, 830, 834, 837, 839, 840, 841], "placehold": [45, 640, 724, 729, 734, 791, 819, 823, 835, 856], "pyunboundlocalvari": 45, "max_fourier_freq": 45, "random_uniform": [45, 49, 65, 88, 642, 811, 829, 832, 843, 848, 852], "817437": 45, "gpu_bfc_alloc": 45, "orig_valu": 45, "tf_force_gpu_allow_growth": 45, "autograd": [45, 854], "declar": [45, 819, 842], "_3r2_73j": 46, "0edf8c1e8ea835f4c456bdf89737d89032f50b5a": 46, "1297564": 46, "05fcafac1e19fec835a9ac61270b3ac6039a5095f6b0f9fde20bacc2a5abba45": 46, "le3bu3_v": 46, "cc6508f5d7e25538c5df5fdae52a41d2bf17b9a517aedd125cfca913bb5b259b": 46, "third": [46, 96, 97, 377, 470, 497, 636, 644, 686, 748, 825, 828, 839, 854, 868, 869, 875], "parti": [46, 825, 828, 854, 859, 868, 869, 875], "mount": [46, 813, 819], "mydriv": 46, "chdir": 46, "kaggl": 46, "medium": 46, "articl": [46, 811, 834], "insert": [46, 56, 66, 79, 89, 377, 458, 468, 638, 640, 643, 645, 701, 721, 722, 743, 754, 827, 834], "www": [46, 334, 335, 371], "your_kaggle_usernam": 46, "competit": 46, "digit": 46, "recogn": [46, 814, 820], "zip": [46, 848], "readabl": [46, 823, 826, 832, 834, 835, 843, 844, 850, 851], "chmod": [46, 818, 827], "recent": [46, 808, 818, 819, 843, 858, 859], "forc": [46, 825, 827, 829], "archiv": [46, 818], "inflat": [46, 828], "sample_submiss": 46, "frame": [46, 56, 79, 318, 368, 374, 422, 859, 869], "later": [46, 73, 538, 633, 817, 834, 839, 843, 844, 869], "my": [46, 827], "label_df": 46, "mod_train": 46, "data_valu": 46, "test_data_valu": 46, "correct_label": 46, "train_path": 46, "str": [46, 48, 51, 52, 56, 57, 60, 61, 62, 63, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 109, 110, 111, 112, 113, 114, 115, 116, 117, 122, 124, 133, 135, 138, 140, 142, 148, 149, 152, 154, 156, 157, 158, 159, 163, 164, 167, 168, 169, 170, 171, 172, 174, 176, 179, 180, 181, 182, 183, 184, 191, 192, 212, 213, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 250, 251, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 301, 302, 303, 304, 305, 306, 308, 309, 310, 312, 333, 334, 335, 336, 337, 339, 341, 349, 350, 356, 358, 360, 361, 362, 374, 375, 376, 377, 380, 386, 389, 393, 394, 395, 397, 398, 399, 400, 402, 403, 407, 408, 411, 412, 413, 414, 416, 417, 418, 419, 421, 422, 425, 429, 444, 450, 451, 452, 453, 454, 455, 456, 457, 458, 461, 462, 463, 466, 467, 468, 473, 489, 491, 492, 493, 494, 495, 500, 501, 502, 503, 504, 506, 508, 510, 521, 522, 523, 524, 531, 533, 534, 536, 537, 539, 540, 542, 544, 545, 546, 547, 548, 551, 552, 555, 557, 559, 560, 561, 563, 564, 567, 572, 575, 576, 578, 579, 588, 590, 591, 592, 594, 596, 598, 599, 612, 616, 623, 627, 628, 629, 630, 633, 634, 635, 636, 637, 638, 639, 640, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 665, 666, 667, 672, 673, 674, 675, 676, 677, 679, 681, 683, 684, 687, 690, 695, 696, 697, 698, 702, 705, 706, 707, 708, 709, 712, 713, 714, 715, 716, 723, 724, 729, 734, 737, 738, 739, 740, 742, 745, 748, 749, 750, 752, 756, 757, 758, 760, 762, 763, 765, 766, 767, 772, 773, 775, 776, 781, 783, 791, 793, 794, 804, 805, 809, 828, 829, 832, 836, 839, 840, 844, 848, 853, 862, 863, 864], "makedir": 46, "valid_path": 46, "28x28": 46, "pic": 46, "pictur": [46, 811, 817, 848, 858], "int8": [46, 53, 65, 75, 76, 88, 133, 160, 165, 167, 168, 172, 628, 629, 738, 775, 776, 828, 843], "new_img": [46, 48], "builder": [46, 813], "batchwis": 46, "subset": [46, 777, 823, 827, 831, 835, 838, 840, 843, 848, 869], "goe": [46, 377, 466, 821, 834, 839, 846], "seed_valu": [46, 73, 642, 741], "randomize_dataset": 46, "create_dataset": 46, "num_examples_per_class": 46, "img_arrai": 46, "class_nam": [46, 772], "dir": [46, 851], "img_path": 46, "imread": [46, 48, 851], "imread_grayscal": 46, "generate_batch": [46, 811], "dataset_s": [46, 811], "ivyerror": [46, 806, 811, 832], "smaller": [46, 56, 63, 69, 79, 86, 301, 333, 350, 366, 371, 374, 376, 386, 403, 408, 419, 451, 521, 522, 523, 544, 633, 638, 646, 698, 706, 756, 757, 762, 764, 811, 819, 832, 848], "yield": [46, 66, 319, 320, 368, 377, 483, 643, 747, 811, 827], "x_batch_inst": 46, "form": [46, 48, 51, 52, 56, 61, 73, 75, 84, 95, 96, 97, 126, 127, 139, 144, 145, 311, 314, 328, 337, 368, 371, 375, 377, 428, 439, 470, 479, 483, 499, 534, 595, 597, 628, 633, 635, 636, 640, 666, 668, 670, 671, 672, 673, 675, 677, 678, 679, 680, 682, 683, 684, 685, 686, 687, 690, 718, 729, 775, 790, 812, 817, 818, 836, 843, 846, 852, 853, 859, 869, 870, 875], "intialis": 46, "num_epoch": [46, 811], "inherit": [46, 823, 826, 832, 850, 854, 856], "creation": [46, 56, 73, 79, 102, 825, 828, 829, 835, 837, 840, 841, 843, 844, 848, 862, 869, 871, 875], "inform": [46, 48, 53, 56, 58, 76, 81, 164, 167, 318, 368, 534, 623, 629, 633, 634, 639, 716, 809, 811, 816, 817, 818, 819, 820, 822, 826, 827, 832, 836, 837, 839, 841, 843, 872], "insid": [46, 61, 84, 102, 377, 493, 636, 679, 773, 818, 819, 823, 826, 828, 829, 833, 836, 837, 843, 844, 862, 875], "ivynet": [46, 811], "h_w": [46, 811], "input_channel": [46, 791, 811, 848, 852], "output_channel": [46, 791, 811, 852], "gelu": [46, 47, 50, 72, 625, 787, 811], "image_widht": 46, "start_dim": [46, 56, 79, 377, 473, 811], "end_dim": [46, 56, 79, 377, 473, 811], "gpu_is_avail": [46, 630, 811], "120": [46, 69, 92, 102, 636, 681, 756, 811], "__name__": [46, 47, 49, 600, 633, 832], "heavi": [46, 777, 818, 840, 841, 846, 870], "lift": [46, 841, 870], "num_correct": [46, 811], "y_pred": 46, "epoch_loss": [46, 811], "field": [46, 61, 67, 84, 90, 375, 377, 428, 497, 636, 644, 671, 672, 683, 684, 686, 748, 749, 750, 827, 867, 875], "training_accuraci": [46, 811], "train_loss": 46, "train_correct": [46, 811], "train_loop": [46, 811], "posit": [46, 48, 51, 55, 56, 57, 61, 62, 63, 78, 79, 80, 84, 85, 86, 96, 131, 133, 146, 164, 219, 220, 221, 225, 228, 239, 246, 253, 254, 260, 262, 272, 273, 280, 281, 285, 286, 290, 312, 327, 333, 338, 350, 368, 371, 375, 377, 426, 446, 457, 482, 491, 538, 548, 613, 626, 628, 629, 631, 633, 636, 637, 638, 642, 643, 647, 666, 669, 690, 695, 701, 706, 741, 746, 766, 767, 772, 775, 783, 788, 792, 793, 805, 811, 817, 819, 822, 826, 840, 843, 844, 851, 862, 871], "leav": [46, 51, 56, 74, 76, 78, 79, 80, 83, 84, 86, 92, 102, 164, 167, 239, 296, 299, 300, 306, 377, 467, 468, 473, 485, 486, 487, 503, 504, 506, 522, 523, 528, 548, 596, 638, 640, 654, 665, 670, 686, 700, 704, 709, 711, 712, 717, 718, 727, 728, 729, 730, 756, 757, 804, 811, 817, 826, 827, 828, 830, 831, 835, 836, 839, 840, 843, 851, 852], "xbatch": [46, 811], "ybatch": [46, 811], "to_devic": [46, 54, 77, 195, 630, 793, 811], "entropi": [46, 62, 85, 637, 695, 696, 697, 811], "hot": [46, 52, 75, 140, 628, 811], "ybatch_encod": [46, 811], "one_hot": [46, 52, 75, 628, 811, 853], "loss_prob": [46, 811], "ret_grad_idx": [46, 616, 634, 772, 838], "xs_grad_idx": [46, 616, 634, 772, 838], "batch_loss": [46, 811], "set_descript": [46, 811], "set_postfix": [46, 811], "accuracy_percentag": [46, 811], "naverag": [46, 811], "6f": [46, 811], "_train_summari": 46, "writer": 46, "writerow": 46, "157it": 46, "06it": 46, "475401": 46, "11it": 46, "081436": 46, "13it": 46, "0187": 46, "029279": 46, "0324": 46, "008382": 46, "07it": 46, "00456": 46, "003816": 46, "82it": 46, "00277": 46, "002179": 46, "05it": 46, "00175": 46, "001569": 46, "00147": 46, "001235": 46, "09it": 46, "00128": 46, "001005": 46, "106": 46, "10it": 46, "00112": 46, "000837": 46, "129": [46, 635, 654, 656], "12it": 46, "000989": 46, "000709": 46, "145": 46, "000873": 46, "000606": 46, "08it": 46, "000774": 46, "000524": 46, "000688": 46, "000455": 46, "000613": 46, "000398": 46, "000547": 46, "000350": 46, "205": 46, "000488": 46, "000308": 46, "218": 46, "000437": 46, "000273": 46, "000391": 46, "000243": 46, "238": [46, 246, 631], "98it": 46, "000351": 46, "000216": 46, "260": 46, "plot_summari": 46, "seaborn": 46, "whitegrid": 46, "ax1": 46, "ax2": 46, "nrow": 46, "ncol": 46, "fontweight": 46, "bold": 46, "set_xlabel": 46, "set_ylabel": 46, "tight_layout": 46, "savefig": 46, "summary_plot": 46, "png": [46, 48, 49, 851], "save_weight": [46, 793], "model_param": 46, "ivynet_weight": 46, "hdf5": [46, 73, 793, 851], "deitimageprocessor": 47, "tfdeitforimageclassif": 47, "tfdeitforimageclassificationwithteach": 47, "distillation_classifi": 47, "cls_classifi": 47, "randomli": [47, 374, 398, 399, 400, 635, 658, 775, 776, 777, 778, 783, 791], "henc": [47, 67, 222, 337, 371, 631, 638, 644, 701, 748, 749, 750, 751, 800, 818, 826, 827, 828, 839, 843], "image_processor": [47, 862, 863], "distil": [47, 870], "patch16": 47, "outputs_from_original_model": 47, "bertforsequenceclassif": 47, "bertforpretrain": 47, "NOT": [47, 267, 631, 804, 817], "probabl": [47, 56, 60, 62, 65, 79, 83, 85, 88, 374, 376, 381, 386, 398, 399, 400, 453, 507, 521, 524, 528, 635, 637, 642, 658, 662, 665, 695, 737, 777, 790, 791, 811, 843, 855, 860], "ptarmigan": 47, "rf": [47, 819], "branch": [47, 227, 239, 242, 244, 272, 284, 285, 286, 289, 631, 818, 819, 822, 827, 834, 854, 862, 869], "moduleconvert": [47, 788, 793], "mc": 47, "from_keras_modul": [47, 788], "compiled_func": 47, "return_graph": [47, 49], "compiled_output": 47, "diverg": [47, 56, 79, 246, 376, 453, 631], "_all_funct": [47, 49], "convert_to_tensor_v2_with_dispatch": 47, "transpose_v2": 47, "convolution_v2": 47, "bias_add": 47, "binary_op_wrapp": 47, "cast": [47, 53, 55, 56, 61, 69, 76, 78, 84, 151, 154, 179, 273, 386, 522, 523, 629, 631, 636, 646, 677, 693, 756, 757, 762, 764, 776, 836, 841, 848, 866], "moments_v2": 47, "batch_norm": [47, 49, 56, 79, 380], "tensordot": [47, 61, 84, 636, 805, 828], "softmax_v2": 47, "_slice_help": 47, "save_to_disk": [47, 49, 793], "12265048989200113": 47, "11038777417100028": 47, "1167045795539998": 47, "ivy_api_kei": 48, "obj": [48, 126, 127, 556, 628, 633, 862, 863, 864], "combo": [48, 851], "permit": [48, 823, 835, 840, 843, 846], "usabl": [48, 835, 844], "neither": [48, 222, 239, 246, 272, 631, 636, 688, 827, 840, 846], "nor": [48, 222, 239, 246, 272, 631, 827, 840, 873], "specifc": 48, "invoc": 48, "represent": [48, 56, 57, 73, 79, 80, 102, 149, 150, 164, 167, 192, 193, 219, 222, 229, 232, 234, 239, 246, 269, 272, 274, 289, 315, 347, 351, 356, 360, 368, 371, 534, 596, 626, 629, 630, 631, 633, 775, 777, 778, 791, 828, 867, 868, 870, 874, 875], "externally_link": 48, "logo": 48, "patch": [48, 290, 631, 828, 869], "cv2_imshow": 48, "envrion": 48, "canni": 48, "original_img": 48, "fn_arg": 48, "dilate_edg": 48, "edg": [48, 56, 63, 79, 86, 318, 368, 374, 377, 386, 410, 483, 524, 638, 698, 700, 713, 778, 822, 843, 863, 869, 871, 875], "morphologi": 48, "hk_model": 48, "resnet18": [48, 49], "keras_model": 48, "count": [48, 56, 63, 67, 70, 75, 79, 86, 90, 93, 133, 205, 339, 371, 377, 386, 491, 495, 497, 519, 524, 628, 630, 636, 638, 644, 647, 667, 692, 699, 702, 748, 749, 766, 767, 825, 826, 830, 851], "odsc": 48, "talk": [48, 874], "228": 49, "352": [49, 83, 635, 659, 832], "nvidia_ml_py3": 49, "19190": 49, "241af6b4a51197474b0da3ee7bfa32d847756c8f0d93b51448655d6458312714": 49, "b9": 49, "b1": [49, 636, 685], "cb4feab29709d4155310d29a421389665dcab9eb3b679b527b": 49, "cycler": 49, "fonttool": 49, "965": 49, "pillow": 49, "kiwisolv": 49, "show_graph": [49, 793], "to_ivy_modul": [49, 788, 853], "image_dim": 49, "v0": [49, 852], "urlerror": 49, "dev_str": 49, "comp_network": 49, "time_chronolog": 49, "ret0_nc": 49, "ret1_nc": 49, "ret0_c": 49, "ret1_c": 49, "pytorch_vision_v0": 49, "distribut": [49, 56, 62, 65, 79, 85, 88, 374, 375, 376, 381, 398, 399, 400, 433, 444, 450, 453, 455, 456, 458, 507, 508, 509, 510, 511, 637, 642, 695, 696, 697, 737, 738, 739, 740, 742, 790, 791, 817, 818, 827, 829, 854, 869, 872], "distributed_c10d": 49, "262": 49, "reduce_op": 49, "reduceop": 49, "004645566477999864": 49, "0044566806820000695": 49, "attribut": [49, 73, 164, 165, 166, 167, 198, 199, 207, 549, 550, 629, 630, 633, 773, 824, 825, 826, 831, 832, 836, 837, 839, 840, 846, 849, 850, 851, 852], "definit": [49, 55, 61, 78, 84, 291, 631, 636, 666, 811, 815, 819, 823, 828, 833, 836, 850, 863], "max_pool2d": [49, 56, 79, 374, 394], "__iadd__": 49, "adaptive_avg_pool2d": [49, 56, 79, 374], "_arraywithactiv": [50, 101], "abc": [50, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 73, 105, 547, 633, 640, 735, 790, 795, 804, 805, 850], "_abc_impl": [50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 105, 106], "_abc": [50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 105, 106], "_abc_data": [50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 105, 106], "approxim": [50, 55, 56, 61, 72, 78, 79, 84, 96, 99, 109, 220, 221, 224, 225, 226, 227, 236, 237, 242, 244, 246, 260, 261, 262, 263, 277, 284, 285, 289, 290, 291, 348, 358, 371, 376, 455, 456, 625, 631, 636, 679, 682, 787, 831, 840], "complex_mod": [50, 55, 56, 72, 78, 79, 109, 110, 111, 112, 113, 114, 115, 116, 117, 290, 294, 299, 300, 302, 366, 625, 631, 787, 837], "variant": [50, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 101, 109, 110, 111, 112, 113, 114, 115, 116, 117, 127, 128, 130, 132, 133, 135, 137, 138, 139, 140, 142, 144, 145, 148, 152, 153, 154, 164, 167, 171, 172, 179, 196, 213, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 300, 302, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 316, 317, 318, 321, 328, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 374, 377, 386, 393, 394, 395, 396, 398, 399, 400, 402, 406, 407, 408, 411, 412, 413, 417, 418, 421, 422, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 435, 439, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 506, 508, 509, 510, 511, 512, 513, 514, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 536, 537, 539, 540, 543, 544, 545, 546, 547, 548, 551, 552, 555, 557, 559, 560, 561, 563, 564, 565, 567, 568, 570, 575, 576, 590, 591, 592, 593, 594, 596, 598, 599, 612, 614, 615, 618, 620, 621, 622, 623, 649, 650, 651, 652, 653, 654, 657, 658, 659, 661, 665, 666, 667, 669, 670, 671, 672, 673, 674, 675, 676, 677, 679, 682, 683, 684, 686, 690, 691, 693, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 736, 737, 738, 739, 740, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 765, 766, 767, 823, 830, 831, 846], "docstr": [50, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 101, 109, 110, 111, 112, 113, 114, 115, 116, 117, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 147, 148, 152, 153, 154, 164, 167, 171, 172, 179, 196, 213, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 300, 302, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 316, 317, 318, 321, 328, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 371, 374, 377, 386, 393, 394, 395, 396, 398, 399, 400, 402, 406, 407, 408, 411, 412, 413, 417, 418, 421, 422, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 435, 439, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 506, 508, 509, 510, 511, 512, 513, 514, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 536, 537, 539, 540, 543, 544, 545, 546, 547, 548, 551, 552, 555, 557, 559, 560, 561, 563, 564, 565, 567, 568, 570, 575, 576, 590, 591, 592, 593, 594, 596, 598, 599, 612, 613, 614, 615, 618, 620, 621, 622, 623, 628, 629, 631, 633, 636, 638, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 657, 658, 659, 661, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 692, 693, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 736, 737, 738, 739, 740, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 816, 817, 821, 825, 834, 835, 836, 837, 840, 842, 844], "liter": [50, 55, 56, 61, 72, 78, 79, 84, 109, 110, 111, 112, 113, 114, 115, 116, 117, 290, 294, 299, 300, 302, 366, 374, 375, 377, 380, 396, 406, 410, 418, 433, 439, 444, 447, 450, 483, 505, 625, 631, 636, 645, 677, 693, 754, 787, 846], "magnitud": [50, 55, 56, 72, 78, 79, 109, 110, 111, 112, 113, 114, 115, 116, 117, 219, 222, 239, 246, 272, 290, 294, 299, 300, 302, 366, 625, 631, 636, 686, 687, 787, 828], "handle_complex_input": [50, 55, 56, 72, 78, 79, 109, 110, 111, 112, 113, 114, 115, 116, 117, 290, 294, 299, 300, 302, 366, 625, 631, 787, 837], "element": [50, 52, 55, 56, 57, 60, 61, 63, 65, 66, 67, 69, 72, 73, 75, 76, 78, 79, 80, 83, 84, 86, 88, 89, 90, 92, 97, 101, 102, 105, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 125, 128, 134, 135, 144, 145, 146, 162, 164, 167, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 300, 302, 304, 305, 306, 308, 309, 310, 327, 328, 329, 330, 331, 333, 334, 335, 336, 337, 341, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 366, 368, 371, 374, 375, 376, 377, 386, 387, 398, 399, 400, 403, 408, 411, 412, 413, 417, 419, 420, 421, 427, 428, 429, 451, 461, 462, 463, 473, 474, 475, 477, 480, 490, 491, 493, 495, 497, 519, 520, 522, 523, 524, 525, 526, 527, 529, 530, 532, 536, 539, 540, 551, 552, 568, 570, 590, 591, 592, 594, 598, 599, 625, 628, 631, 633, 635, 636, 638, 640, 642, 643, 644, 645, 646, 647, 658, 667, 669, 671, 672, 676, 681, 683, 684, 686, 690, 698, 701, 702, 703, 704, 705, 706, 707, 708, 717, 720, 726, 737, 745, 746, 747, 748, 749, 750, 751, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 770, 772, 775, 777, 791, 805, 831, 841, 843, 846, 848, 873], "138": [50, 109, 625], "165": [50, 109, 625, 635, 659], "hardswish": [50, 56, 72, 79, 297, 366, 625, 787], "leaky_relu": [50, 72, 79, 294, 625, 776], "alpha": [50, 55, 56, 72, 78, 79, 106, 111, 222, 288, 294, 295, 303, 307, 313, 366, 368, 375, 380, 381, 429, 505, 508, 509, 510, 625, 631, 787, 835, 840, 841], "float": [50, 52, 53, 55, 56, 57, 58, 60, 61, 62, 64, 65, 67, 69, 72, 75, 76, 78, 79, 80, 81, 83, 84, 85, 87, 88, 92, 96, 99, 101, 111, 117, 125, 126, 127, 129, 131, 133, 134, 135, 136, 137, 141, 142, 147, 151, 155, 159, 164, 168, 172, 178, 179, 182, 188, 197, 206, 210, 211, 214, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 235, 236, 237, 239, 240, 242, 243, 244, 245, 246, 250, 252, 253, 254, 255, 256, 258, 260, 261, 262, 263, 264, 265, 272, 273, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 301, 303, 306, 307, 309, 310, 311, 312, 313, 314, 316, 317, 318, 333, 334, 335, 336, 344, 345, 350, 352, 353, 356, 357, 358, 361, 362, 366, 368, 371, 372, 374, 375, 376, 377, 380, 381, 386, 389, 398, 399, 400, 417, 418, 425, 428, 429, 431, 444, 448, 450, 451, 452, 456, 457, 472, 490, 500, 501, 502, 505, 506, 507, 508, 509, 510, 511, 521, 522, 523, 524, 529, 530, 531, 538, 539, 540, 548, 557, 581, 582, 585, 591, 592, 612, 614, 615, 618, 620, 621, 622, 625, 626, 628, 629, 630, 631, 633, 634, 635, 636, 637, 639, 640, 641, 642, 643, 644, 646, 658, 660, 662, 665, 666, 668, 671, 672, 673, 675, 677, 678, 679, 682, 683, 684, 685, 686, 687, 688, 690, 693, 695, 696, 697, 714, 715, 716, 723, 736, 739, 740, 746, 748, 749, 750, 751, 756, 757, 759, 760, 761, 762, 763, 764, 765, 772, 775, 776, 778, 787, 790, 791, 794, 795, 809, 815, 822, 826, 828, 831, 832, 833, 835, 836, 838, 839, 841, 843, 844, 846, 848, 850, 852], "slope": [50, 56, 72, 79, 111, 294, 295, 301, 303, 307, 366, 625, 787], "neg": [50, 55, 56, 61, 63, 65, 70, 72, 78, 79, 84, 86, 88, 93, 96, 111, 114, 117, 125, 131, 133, 146, 239, 246, 253, 254, 272, 273, 281, 286, 294, 312, 327, 330, 366, 368, 375, 376, 377, 381, 426, 433, 439, 456, 491, 495, 511, 625, 628, 631, 636, 638, 642, 647, 667, 669, 686, 690, 692, 693, 699, 701, 702, 706, 739, 766, 767, 775, 777, 787, 826, 839], "leaki": [50, 72, 111, 625, 787], "log_softmax": [50, 72, 625, 787], "0719": [50, 72, 112], "221": [50, 112], "mish": [50, 72, 625, 787], "30340147": [50, 113, 625], "86509842": [50, 72, 113, 625], "269": [50, 115], "731": [50, 115], "881": [50, 55, 78, 115, 225, 238, 278, 631], "422": [50, 116, 625], "155": [50, 83, 116, 625, 635, 659], "softplu": [50, 72, 625, 787, 846], "beta": [50, 56, 64, 72, 79, 87, 117, 303, 307, 313, 316, 317, 366, 368, 375, 376, 380, 381, 429, 457, 505, 509, 510, 625, 641, 736, 787, 846], "threshold": [50, 55, 56, 72, 78, 79, 117, 270, 271, 310, 336, 366, 371, 376, 377, 452, 457, 490, 625, 631, 787, 846], "union": [50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 205, 206, 207, 208, 210, 211, 212, 213, 214, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 366, 368, 371, 372, 374, 375, 376, 377, 380, 381, 382, 384, 386, 388, 389, 390, 391, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 406, 407, 408, 410, 411, 412, 413, 414, 416, 417, 418, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482, 483, 484, 485, 486, 487, 489, 490, 491, 492, 493, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 533, 536, 537, 539, 540, 544, 545, 546, 547, 548, 551, 552, 553, 554, 555, 557, 559, 560, 561, 563, 564, 567, 568, 570, 571, 575, 576, 580, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 612, 613, 614, 615, 616, 617, 618, 620, 621, 622, 623, 625, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 724, 725, 726, 728, 729, 734, 735, 736, 737, 738, 739, 740, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 772, 775, 790, 795, 796, 823, 826, 828, 829, 830, 832, 835, 836, 839, 844, 846, 848, 853, 862, 863, 864], "3461": [50, 72, 117, 625], "6491": [50, 72, 117, 625], "_array_to_new_backend": 51, "_to_ivi": 51, "_to_n": 51, "to_ignor": [51, 71, 94, 640, 728, 729], "_to_new_backend": 51, "args_to_ivi": 51, "include_deriv": [51, 74, 640, 718, 729, 772], "nest": [51, 73, 74, 102, 105, 242, 566, 596, 613, 616, 631, 633, 634, 639, 714, 715, 717, 718, 719, 720, 721, 722, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 795, 823, 825, 826, 836, 838, 844, 851, 852, 854, 856, 869], "unchang": [51, 55, 374, 377, 419, 473, 635, 658], "deriv": [51, 52, 56, 58, 74, 75, 79, 81, 130, 135, 142, 148, 312, 316, 341, 368, 371, 614, 615, 618, 619, 620, 621, 622, 628, 634, 639, 640, 716, 718, 729, 793, 795, 796, 828, 829, 850, 852], "word": [51, 125, 377, 476, 628, 642, 740, 788, 791, 826, 839, 840, 856], "args_to_n": [51, 839], "cont_inplac": 51, "decid": [51, 73, 640, 728, 729, 811, 817, 818, 828, 846], "args_to_new_backend": 51, "shallow": [51, 640, 724, 725, 729, 734, 735], "nativevari": 51, "mutabl": [51, 640, 718, 724, 725, 729, 734, 735, 824], "to_ivi": [51, 74, 640, 730, 839], "leaf": [51, 73, 80, 92, 102, 547, 640, 727, 728, 730, 757, 826, 836, 851], "travers": [51, 74, 640, 721, 729, 826, 828, 832, 848], "lowest": [51, 56, 65, 74, 79, 88, 386, 524, 640, 642, 729, 738, 805, 836, 854, 856, 866, 870, 874], "search": [51, 56, 74, 79, 743, 744, 783, 816, 818, 826, 830, 833, 843, 844, 858], "to_new_backend": 51, "_arraywithcr": [52, 101], "boolean": [52, 53, 55, 56, 57, 63, 66, 69, 73, 75, 76, 78, 79, 80, 86, 89, 92, 101, 102, 122, 124, 126, 127, 128, 134, 151, 167, 169, 171, 172, 175, 191, 201, 209, 215, 229, 230, 231, 232, 233, 234, 266, 267, 268, 269, 334, 335, 350, 371, 375, 377, 433, 444, 450, 461, 462, 463, 469, 471, 473, 474, 475, 478, 482, 489, 491, 498, 533, 536, 547, 554, 557, 558, 562, 563, 564, 565, 566, 567, 568, 577, 580, 583, 584, 586, 587, 612, 627, 628, 629, 630, 631, 633, 635, 638, 639, 640, 643, 646, 662, 701, 702, 703, 705, 707, 708, 710, 712, 714, 715, 727, 745, 746, 747, 759, 761, 775, 776, 777, 778, 783, 794, 826, 828, 836, 840, 843, 846], "never": [52, 56, 63, 75, 79, 86, 127, 377, 461, 462, 463, 469, 471, 473, 474, 475, 478, 482, 489, 498, 554, 633, 638, 701, 702, 703, 705, 707, 708, 710, 712, 819, 828, 839, 840, 843], "valueerror": [52, 56, 63, 75, 79, 86, 90, 127, 374, 376, 408, 419, 456, 461, 462, 469, 471, 473, 474, 475, 482, 498, 638, 701, 702, 703, 705, 707, 708, 710, 712, 751, 777, 806, 832], "buffer": [52, 75, 79, 86, 127, 133, 461, 462, 469, 471, 473, 474, 475, 482, 498, 628, 701, 702, 703, 705, 707, 708, 710, 712, 792, 793, 839, 854], "nativedtyp": [52, 53, 56, 60, 61, 65, 66, 69, 75, 79, 84, 88, 89, 92, 125, 126, 127, 129, 130, 131, 133, 134, 135, 136, 137, 139, 140, 141, 142, 147, 148, 150, 151, 156, 157, 158, 159, 160, 161, 162, 163, 168, 169, 173, 175, 177, 181, 191, 311, 312, 313, 314, 315, 316, 317, 332, 339, 355, 368, 371, 381, 386, 507, 508, 509, 510, 511, 521, 522, 523, 524, 527, 530, 628, 629, 635, 636, 642, 643, 645, 646, 658, 677, 693, 738, 739, 740, 743, 744, 754, 756, 757, 762, 764, 790, 828, 829, 835, 844, 848], "datatyp": [52, 56, 73, 75, 79, 127, 135, 139, 156, 177, 181, 374, 422, 628, 629, 770, 844, 862], "nativedevic": [52, 54, 56, 65, 75, 77, 79, 88, 125, 126, 127, 129, 130, 131, 134, 135, 136, 137, 139, 140, 141, 142, 146, 147, 148, 193, 194, 195, 196, 197, 200, 205, 206, 207, 208, 210, 211, 212, 213, 214, 218, 311, 312, 327, 368, 381, 507, 508, 510, 511, 628, 630, 642, 737, 738, 739, 740, 790, 795, 796, 828, 829, 832, 835, 844], "39999998": [52, 126, 127, 628, 644, 749], "5999999": [52, 56, 79, 83, 126, 127, 296, 366, 375, 424, 628, 635, 658, 665], "0999999": [52, 69, 126, 127, 296, 306, 309, 352, 366, 371, 628, 760], "10000038": [52, 126, 127, 628], "90786433e": [52, 126, 127, 628], "310": [52, 126, 127, 628], "copy_arrai": [52, 75, 628], "to_ivy_arrai": [52, 75, 128, 628], "empty_lik": [52, 56, 75, 79, 263, 375, 427, 628, 631], "uniniti": [52, 129, 130, 628, 834], "from_dlpack": [52, 75, 628], "full_lik": [52, 75, 628, 844], "fill_valu": [52, 56, 66, 75, 79, 89, 134, 135, 251, 259, 377, 381, 491, 511, 628, 631, 643, 746, 828, 841, 844], "scalar": [52, 55, 56, 57, 61, 72, 75, 78, 79, 80, 84, 96, 111, 135, 140, 222, 243, 288, 294, 337, 338, 340, 345, 348, 350, 352, 357, 371, 374, 375, 376, 377, 422, 429, 451, 461, 462, 463, 472, 477, 599, 612, 628, 631, 633, 636, 693, 828, 838, 840, 854, 869], "fill": [52, 55, 56, 65, 66, 73, 75, 78, 79, 88, 89, 129, 134, 135, 137, 140, 141, 142, 147, 148, 273, 312, 368, 375, 377, 381, 433, 439, 444, 450, 472, 491, 492, 508, 510, 511, 628, 631, 642, 643, 738, 746, 790, 817, 841], "000123": [52, 135, 628], "stop": [52, 56, 58, 75, 79, 81, 125, 136, 137, 212, 375, 444, 450, 577, 615, 618, 620, 621, 622, 623, 628, 630, 633, 634, 639, 640, 714, 715, 716, 728, 795, 809, 835, 838, 846, 848, 854, 869], "num": [52, 75, 136, 137, 628, 775, 819, 835, 848], "endpoint": [52, 75, 136, 137, 628, 790, 835], "logspac": [52, 75, 628, 848], "sequenc": [52, 56, 60, 61, 63, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 102, 109, 110, 111, 112, 113, 114, 115, 116, 117, 131, 133, 135, 137, 140, 142, 148, 152, 154, 167, 171, 172, 179, 213, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 250, 251, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 302, 303, 304, 305, 306, 308, 309, 310, 312, 315, 322, 323, 324, 325, 326, 333, 334, 335, 336, 337, 339, 341, 349, 350, 356, 358, 360, 361, 362, 364, 365, 368, 371, 372, 373, 374, 375, 377, 381, 386, 387, 389, 390, 391, 398, 399, 400, 402, 403, 407, 408, 410, 417, 418, 419, 420, 421, 424, 432, 433, 434, 436, 442, 443, 444, 447, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 461, 462, 463, 467, 468, 469, 470, 476, 478, 479, 481, 482, 484, 487, 489, 491, 492, 493, 495, 498, 499, 500, 502, 503, 504, 506, 508, 509, 521, 522, 523, 524, 531, 532, 533, 536, 537, 539, 540, 544, 545, 546, 547, 548, 551, 552, 555, 557, 559, 560, 561, 563, 564, 567, 571, 575, 576, 590, 591, 592, 594, 596, 598, 599, 612, 613, 616, 617, 618, 623, 628, 631, 633, 634, 635, 636, 638, 640, 646, 647, 648, 649, 650, 651, 652, 653, 655, 657, 658, 659, 660, 662, 665, 666, 667, 672, 673, 674, 675, 676, 677, 679, 681, 683, 684, 690, 693, 695, 696, 697, 698, 699, 701, 702, 704, 705, 706, 707, 708, 709, 712, 713, 717, 724, 734, 737, 738, 739, 740, 742, 745, 748, 749, 750, 751, 752, 756, 757, 759, 760, 761, 762, 763, 764, 765, 766, 767, 791, 794, 796, 819, 827, 828, 829, 830, 832, 843, 844, 846, 848, 853, 872], "on_valu": [52, 75, 137, 140, 628], "off_valu": [52, 75, 137, 140, 628], "evenli": [52, 55, 56, 60, 63, 73, 75, 78, 79, 83, 86, 125, 136, 137, 291, 374, 417, 421, 628, 631, 635, 638, 648, 649, 650, 651, 653, 655, 657, 707], "hint": [52, 55, 56, 61, 78, 79, 125, 126, 127, 129, 130, 131, 132, 134, 135, 136, 137, 138, 141, 142, 143, 144, 145, 147, 148, 154, 170, 174, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 239, 240, 242, 244, 245, 246, 250, 251, 252, 253, 254, 255, 256, 259, 261, 262, 263, 264, 266, 267, 268, 269, 272, 274, 275, 276, 277, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 312, 328, 334, 335, 337, 340, 368, 371, 374, 375, 377, 386, 393, 394, 395, 396, 398, 399, 400, 406, 411, 412, 413, 418, 420, 429, 483, 491, 495, 521, 524, 551, 555, 557, 559, 590, 599, 623, 628, 629, 631, 633, 634, 635, 636, 638, 641, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 657, 658, 659, 662, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 692, 693, 694, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 736, 743, 744, 746, 747, 748, 749, 750, 751, 752, 755, 759, 760, 761, 762, 763, 764, 765, 766, 767, 817, 823, 831, 833, 835, 836, 839, 840, 844], "simplic": [52, 55, 56, 61, 78, 79, 125, 126, 127, 129, 130, 131, 132, 134, 135, 136, 137, 138, 141, 142, 143, 144, 145, 147, 148, 154, 170, 174, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 239, 240, 242, 244, 245, 246, 250, 251, 252, 253, 254, 255, 256, 259, 261, 262, 263, 264, 266, 267, 268, 269, 272, 274, 275, 276, 277, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 312, 328, 334, 335, 337, 340, 368, 371, 374, 375, 377, 386, 393, 394, 395, 396, 398, 399, 400, 406, 411, 412, 413, 418, 420, 429, 483, 491, 495, 521, 524, 551, 555, 557, 559, 590, 599, 623, 628, 629, 631, 633, 634, 635, 636, 638, 641, 643, 644, 645, 646, 649, 650, 651, 652, 653, 657, 658, 659, 662, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 692, 693, 694, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 736, 743, 744, 746, 747, 748, 749, 750, 751, 752, 755, 759, 760, 761, 762, 763, 764, 765, 831, 846, 852], "nestabl": [52, 55, 56, 61, 78, 79, 125, 126, 127, 129, 130, 131, 132, 134, 135, 136, 137, 138, 141, 142, 143, 144, 145, 146, 147, 148, 154, 170, 174, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 239, 240, 242, 244, 245, 246, 250, 251, 252, 253, 254, 255, 259, 261, 262, 263, 264, 266, 267, 268, 269, 272, 274, 275, 276, 277, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 312, 327, 328, 334, 335, 337, 340, 368, 371, 374, 375, 377, 386, 393, 394, 395, 396, 398, 399, 400, 406, 411, 412, 413, 418, 420, 429, 483, 491, 495, 521, 524, 528, 537, 545, 546, 551, 555, 557, 559, 561, 575, 590, 594, 599, 623, 628, 629, 631, 633, 634, 635, 636, 638, 641, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 657, 658, 659, 662, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 692, 693, 694, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 736, 743, 744, 746, 747, 748, 749, 750, 751, 752, 755, 759, 760, 761, 762, 763, 764, 765, 766, 767, 817, 821, 830, 831, 839, 843, 856], "464": [52, 55, 88, 137, 226, 227, 631], "15888336": [52, 137], "2154": [52, 137], "43469003": [52, 137], "meshgrid": [52, 75, 628], "spars": [52, 56, 62, 75, 79, 85, 138, 315, 368, 375, 433, 444, 450, 628, 637, 697], "xy": [52, 75, 138, 628], "dimension": [52, 55, 56, 61, 63, 66, 69, 70, 73, 75, 78, 79, 84, 86, 92, 93, 101, 125, 131, 133, 138, 146, 291, 327, 334, 335, 368, 371, 374, 375, 377, 386, 402, 403, 407, 408, 418, 419, 426, 461, 462, 463, 467, 472, 473, 519, 531, 628, 631, 636, 638, 643, 646, 647, 667, 668, 674, 676, 679, 681, 682, 692, 693, 707, 743, 744, 746, 759, 760, 761, 762, 763, 764, 765, 766, 767, 836, 838, 843, 846, 848, 866, 869, 876], "repres": [52, 55, 56, 60, 61, 78, 79, 83, 84, 99, 124, 138, 140, 163, 221, 222, 225, 228, 237, 239, 246, 272, 285, 289, 290, 315, 329, 330, 331, 348, 365, 368, 371, 373, 374, 375, 376, 377, 380, 381, 384, 417, 421, 435, 449, 451, 456, 483, 494, 500, 501, 502, 507, 513, 520, 556, 627, 628, 629, 631, 633, 635, 636, 658, 659, 660, 674, 681, 684, 685, 777, 790, 794, 805, 818, 823, 828, 846, 850, 866, 867, 870], "coordin": [52, 55, 66, 78, 79, 89, 138, 146, 227, 289, 319, 320, 327, 348, 368, 382, 512, 628, 631, 643, 746], "conserv": [52, 138, 628], "cartesian": [52, 138, 628], "matrix": [52, 56, 57, 60, 61, 79, 80, 83, 84, 96, 97, 99, 101, 138, 144, 145, 146, 327, 328, 368, 375, 377, 386, 425, 428, 429, 432, 433, 434, 436, 439, 440, 441, 442, 443, 444, 445, 446, 449, 450, 481, 521, 533, 539, 628, 633, 635, 636, 659, 666, 668, 670, 671, 672, 673, 675, 676, 677, 678, 679, 680, 682, 683, 684, 685, 686, 687, 688, 690, 691, 694, 775, 777, 790, 791, 805, 809, 817, 828, 840, 867, 869], "ij": [52, 69, 138, 628, 646, 758, 805], "respect": [52, 55, 56, 58, 61, 78, 79, 81, 84, 96, 138, 219, 222, 227, 229, 231, 232, 233, 234, 239, 240, 246, 250, 251, 258, 259, 264, 266, 268, 269, 272, 275, 281, 285, 288, 289, 299, 348, 363, 366, 371, 373, 375, 377, 380, 431, 448, 460, 500, 502, 556, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 628, 631, 633, 634, 635, 636, 639, 648, 655, 656, 662, 667, 683, 686, 714, 715, 716, 772, 775, 790, 805, 816, 817, 818, 819, 823, 824, 826, 827, 828, 829, 830, 835, 836, 838, 839, 840, 843, 844, 845, 865, 875], "rank": [52, 56, 61, 63, 70, 79, 84, 86, 93, 96, 97, 98, 99, 100, 105, 138, 322, 323, 324, 325, 326, 368, 375, 377, 386, 433, 434, 444, 447, 450, 483, 491, 495, 531, 628, 636, 638, 643, 647, 667, 669, 677, 679, 683, 685, 690, 692, 693, 700, 701, 709, 712, 713, 746, 766, 767, 812, 877], "ni": [52, 138, 628], "xi": [52, 138, 628], "scatter": [52, 57, 75, 80, 140, 575, 576, 628, 633, 825, 839, 846, 876], "j": [52, 55, 56, 57, 61, 69, 75, 78, 79, 84, 96, 124, 140, 220, 221, 222, 223, 225, 228, 237, 239, 242, 244, 252, 260, 262, 266, 272, 283, 285, 286, 289, 290, 337, 371, 374, 375, 386, 402, 403, 407, 418, 419, 423, 428, 430, 441, 447, 531, 536, 627, 628, 631, 633, 636, 646, 671, 690, 758, 805, 819, 821, 825, 862, 865], "unless": [52, 56, 61, 75, 79, 140, 272, 333, 350, 355, 371, 628, 631, 636, 679, 824, 829, 839, 854, 863, 864], "ones_lik": [52, 75, 628, 824, 853, 866], "tril": [52, 75, 628], "whose": [52, 55, 56, 57, 61, 63, 67, 69, 75, 78, 79, 80, 84, 86, 90, 92, 97, 99, 101, 135, 144, 145, 221, 225, 228, 236, 237, 238, 277, 278, 284, 285, 289, 290, 291, 328, 342, 343, 347, 351, 352, 354, 358, 368, 375, 377, 428, 449, 482, 491, 497, 538, 594, 628, 631, 633, 636, 638, 644, 646, 666, 668, 670, 671, 672, 673, 674, 675, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 690, 693, 702, 706, 748, 749, 750, 757, 758, 777, 814, 831, 843], "innermost": [52, 56, 61, 84, 144, 145, 328, 368, 375, 428, 628, 636, 666, 668, 670, 671, 672, 673, 675, 677, 678, 679, 680, 682, 683, 684, 685, 686, 687, 690], "mxn": [52, 56, 61, 84, 144, 145, 328, 368, 628, 636, 670, 677, 679, 680, 682, 683, 687, 690], "matric": [52, 56, 61, 79, 84, 96, 97, 101, 138, 144, 145, 328, 368, 375, 377, 428, 433, 434, 436, 442, 443, 448, 472, 628, 635, 636, 659, 666, 668, 670, 671, 672, 673, 674, 675, 677, 678, 679, 680, 682, 683, 684, 685, 686, 687, 690, 691, 777, 815, 833, 869], "diagon": [52, 56, 61, 79, 84, 97, 131, 144, 145, 146, 312, 327, 328, 368, 375, 377, 426, 429, 439, 445, 472, 628, 636, 669, 690], "triangular": [52, 56, 61, 84, 144, 145, 146, 327, 328, 368, 375, 445, 628, 636, 666, 672, 673, 679, 683], "triu": [52, 75, 628], "upper": [52, 56, 61, 65, 79, 84, 88, 131, 145, 146, 312, 328, 368, 375, 386, 445, 524, 628, 636, 642, 666, 672, 673, 683, 740, 828, 839, 843], "zeros_lik": [52, 56, 75, 151, 268, 377, 491, 614, 615, 618, 620, 621, 622, 628, 629, 631, 634, 636, 638, 683, 698, 840, 846], "data_typ": [53, 56, 76, 79, 181, 629, 825, 828, 843, 844], "_arraywithdatatyp": [53, 101], "irrespect": [53, 61, 76, 84, 151, 629, 636, 686, 826, 839, 850, 876], "promot": [53, 55, 56, 61, 76, 78, 79, 84, 91, 101, 102, 151, 154, 177, 178, 179, 185, 220, 221, 222, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 236, 237, 239, 242, 244, 246, 260, 261, 262, 263, 264, 269, 272, 277, 281, 284, 285, 286, 287, 288, 289, 290, 293, 345, 353, 358, 371, 374, 386, 418, 521, 584, 607, 629, 631, 633, 636, 638, 646, 666, 667, 674, 675, 676, 677, 678, 679, 681, 682, 684, 685, 692, 693, 699, 709, 752, 760, 763, 775, 776, 820, 822, 831, 832, 836, 845], "nan": [53, 55, 56, 57, 67, 69, 76, 78, 79, 80, 151, 219, 220, 221, 222, 224, 225, 226, 227, 228, 235, 236, 237, 238, 239, 240, 242, 244, 245, 246, 247, 248, 253, 254, 255, 260, 261, 262, 263, 264, 267, 272, 273, 275, 277, 278, 281, 282, 283, 284, 285, 286, 289, 290, 292, 299, 333, 334, 335, 346, 350, 355, 358, 366, 371, 377, 386, 491, 519, 520, 527, 528, 529, 530, 557, 612, 626, 629, 631, 633, 644, 646, 647, 748, 749, 750, 751, 759, 760, 761, 763, 764, 765, 766, 767, 775, 778, 822, 828, 831, 838, 844, 845], "infin": [53, 55, 57, 61, 76, 78, 84, 151, 219, 220, 221, 222, 225, 226, 227, 228, 235, 236, 237, 239, 240, 242, 244, 245, 246, 253, 254, 260, 261, 262, 263, 264, 267, 272, 273, 275, 277, 281, 282, 284, 285, 286, 289, 290, 292, 334, 335, 358, 371, 557, 626, 629, 631, 633, 636, 646, 647, 684, 693, 759, 761, 766, 767, 822, 831], "desir": [53, 54, 56, 66, 73, 76, 77, 79, 89, 96, 151, 153, 154, 213, 318, 359, 368, 371, 377, 386, 481, 527, 530, 531, 629, 630, 636, 643, 688, 745, 790, 791, 819, 824, 827, 828, 829, 840, 848, 858, 862, 869], "broadcast_arrai": [53, 76, 629], "mix": [53, 55, 76, 78, 79, 80, 85, 88, 101, 102, 152, 165, 166, 179, 198, 199, 229, 232, 233, 234, 239, 240, 246, 250, 258, 259, 269, 272, 275, 281, 376, 386, 457, 528, 547, 549, 550, 551, 552, 561, 596, 599, 629, 630, 631, 633, 635, 636, 637, 638, 641, 646, 649, 651, 654, 656, 657, 659, 665, 666, 688, 695, 697, 698, 736, 758, 760, 763, 776, 778, 817, 821, 828, 829, 830, 839, 846, 848, 856, 869, 873, 875], "broadcast_to": [53, 76, 629, 828], "can_cast": [53, 76, 629, 828, 836, 840], "accord": [53, 56, 57, 63, 69, 76, 86, 92, 154, 164, 222, 233, 239, 246, 272, 283, 318, 368, 374, 377, 419, 483, 551, 554, 575, 576, 629, 631, 633, 636, 638, 646, 692, 700, 713, 763, 765, 770, 777, 797, 804, 817, 818, 822, 828, 834, 836, 840, 843], "finfo": [53, 76, 629, 843], "resolut": [53, 76, 164, 629, 819], "4028235e": [53, 164, 629], "iinfo": [53, 76, 629], "integ": [53, 55, 56, 60, 61, 63, 65, 69, 70, 73, 78, 79, 80, 83, 84, 86, 88, 92, 93, 101, 102, 125, 134, 167, 168, 174, 178, 179, 183, 219, 229, 230, 231, 232, 233, 234, 235, 245, 246, 257, 269, 274, 277, 281, 282, 292, 293, 329, 330, 331, 334, 335, 339, 344, 345, 368, 371, 374, 377, 381, 384, 386, 402, 407, 417, 420, 421, 422, 469, 478, 483, 491, 495, 498, 507, 508, 509, 510, 511, 513, 514, 519, 521, 522, 523, 528, 531, 554, 570, 580, 613, 628, 629, 631, 633, 635, 636, 638, 642, 645, 646, 647, 648, 649, 650, 651, 653, 655, 657, 667, 669, 678, 692, 693, 707, 737, 738, 739, 740, 741, 742, 754, 756, 757, 759, 760, 761, 762, 763, 764, 765, 766, 767, 775, 776, 777, 778, 783, 791, 805, 819, 826, 828, 838, 841, 843, 848, 850], "119": [53, 167], "1220": [53, 167], "int16": [53, 56, 65, 69, 76, 88, 154, 158, 160, 165, 167, 174, 189, 386, 522, 523, 629, 646, 738, 756, 757, 762, 764, 775, 776, 828, 840, 843, 848], "32768": [53, 76, 167, 592, 633], "32767": [53, 76, 167], "is_bool_dtyp": [53, 76, 629], "is_float_dtyp": [53, 76, 629, 844], "is_int_dtyp": [53, 76, 629, 841, 844], "is_uint_dtyp": [53, 76, 629, 841, 844], "result_typ": [53, 76, 629, 828], "arrays_and_dtyp": [53, 76, 179, 629], "_arraywithdevic": [54, 101], "move": [54, 56, 77, 79, 146, 209, 213, 217, 327, 368, 377, 482, 628, 630, 793, 811, 819, 829, 844], "addit": [54, 56, 57, 64, 77, 79, 80, 87, 122, 124, 213, 222, 282, 376, 380, 386, 451, 505, 520, 525, 544, 545, 546, 613, 627, 630, 631, 633, 635, 639, 641, 662, 716, 736, 791, 805, 817, 818, 819, 824, 828, 830, 831, 834, 836, 838, 839, 840, 843, 844, 846, 850, 851, 853, 862, 869, 870, 871, 875], "__dlpack__": [54, 77, 132, 213, 628, 630], "caveat": [54, 77, 213, 376, 455, 630], "portabl": [54, 77, 213, 630, 811, 867], "_arraywithelementwis": [55, 101], "ab": [55, 61, 71, 78, 94, 101, 102, 277, 333, 350, 371, 377, 490, 631, 636, 640, 677, 687, 693, 725, 728, 772, 804, 805, 815, 823, 828, 833, 837, 840, 843, 866], "absolut": [55, 56, 61, 71, 73, 78, 79, 84, 101, 219, 283, 333, 350, 353, 359, 371, 375, 376, 429, 446, 452, 454, 631, 636, 677, 678, 679, 684, 770, 772, 775, 777, 778, 812, 818], "aco": [55, 78, 631], "invers": [55, 56, 61, 78, 79, 84, 220, 221, 224, 225, 226, 227, 228, 343, 371, 374, 384, 397, 406, 408, 418, 513, 631, 636, 675, 678, 682, 797, 828], "cosin": [55, 78, 220, 221, 236, 237, 311, 314, 368, 374, 396, 406, 631, 791], "acosh": [55, 78, 165, 166, 629, 631, 815, 833], "area": [55, 56, 78, 79, 83, 221, 225, 228, 374, 410, 417, 421, 631, 814, 839, 846, 859, 865], "hyperbol": [55, 78, 221, 225, 228, 237, 285, 289, 290, 303, 307, 366, 631], "sector": [55, 78, 221, 225, 228, 631, 859], "multipli": [55, 56, 60, 69, 78, 79, 83, 96, 222, 288, 351, 374, 375, 410, 441, 442, 522, 523, 631, 635, 646, 658, 756, 762, 819, 823, 824, 826, 830], "angl": [55, 78, 227, 237, 285, 290, 349, 371, 631], "deg": [55, 78, 223, 631], "radian": [55, 56, 78, 79, 220, 223, 224, 226, 227, 236, 238, 278, 284, 289, 358, 371, 631, 831], "degre": [55, 56, 69, 78, 79, 92, 223, 238, 278, 321, 368, 377, 489, 631, 646, 763, 765, 868], "1j": [55, 78, 79, 223, 224, 236, 237, 242, 244, 256, 279, 284, 285, 289, 337, 591, 631, 633], "2j": [55, 56, 78, 79, 223, 252, 337, 374, 402, 407, 592, 631, 633], "3j": [55, 56, 78, 79, 223, 256, 279, 337, 371, 631], "35619449": [55, 223, 631], "78539816": [55, 223, 631], "135": [55, 223, 539, 631, 633], "asin": [55, 78, 631], "sine": [55, 78, 224, 225, 284, 285, 631], "927": [55, 78, 224], "asinh": [55, 78, 224, 631], "atan": [55, 78, 631], "tangent": [55, 78, 226, 227, 228, 289, 290, 303, 307, 364, 366, 373, 631, 831], "785": [55, 78, 226, 227, 631], "atan2": [55, 78, 631], "quotient": [55, 78, 227, 239, 246, 631], "245": [55, 83, 227, 635, 658, 659], "588": [55, 227, 631], "inf": [55, 56, 57, 61, 78, 79, 80, 84, 227, 244, 253, 254, 255, 256, 260, 261, 263, 273, 299, 343, 353, 366, 371, 375, 386, 425, 524, 557, 612, 626, 631, 633, 635, 636, 663, 677, 693, 775, 778, 815, 828, 833, 838], "719": [55, 227, 631], "197": [55, 227, 631], "atanh": [55, 78, 631], "549": [55, 78, 83, 228, 631, 635, 659], "bitwise_and": [55, 78, 631], "bitwise_invert": [55, 78, 631], "bitiwse_invert": [55, 230], "bitwise_left_shift": [55, 78, 631], "bitwise_or": [55, 78, 631], "bitwise_right_shift": [55, 78, 101, 631], "bitwise_xor": [55, 78, 101, 631], "ceil": [55, 56, 78, 79, 96, 99, 125, 374, 393, 394, 395, 411, 412, 413, 416, 628, 631, 791, 839], "416": [55, 236, 631], "540": [55, 236], "990": [55, 236], "cosh": [55, 78, 236, 631], "deg2rad": [55, 78, 631], "convers": [55, 56, 79, 238, 278, 577, 587, 633, 792, 793, 817, 847, 849, 853, 854, 856, 860, 868, 875], "180": [55, 78, 238, 278, 631], "270": [55, 78, 238, 278, 631], "360": [55, 78, 238, 278, 631, 827], "dividend": [55, 78, 239, 246, 281, 293, 631], "divisor": [55, 56, 58, 69, 78, 79, 81, 92, 239, 246, 249, 250, 281, 293, 374, 377, 393, 394, 395, 469, 478, 498, 614, 615, 620, 631, 634, 646, 763, 765, 791, 795], "375": [55, 240, 275], "erf": [55, 78, 342, 371, 631], "exponenti": [55, 56, 78, 79, 241, 242, 244, 264, 277, 294, 304, 366, 375, 440, 631], "gauss": [55, 78, 241, 631], "328": [55, 241, 289, 631], "677": [55, 241], "842": [55, 241, 289, 631], "71828198": [55, 78, 242], "38905573": [55, 78, 242], "08553696": [55, 78, 242, 631], "exp2": [55, 78, 631], "expm1": [55, 78, 631, 828], "244": [55, 244, 811], "918": [55, 244], "147": [55, 244, 631], "floor": [55, 56, 78, 79, 96, 99, 233, 246, 374, 393, 394, 395, 397, 411, 412, 413, 416, 631, 791, 839], "floor_divid": [55, 78, 631, 783, 828], "fmin": [55, 78, 631, 828], "gcd": [55, 78, 631, 828], "greater": [55, 56, 60, 63, 65, 78, 79, 83, 88, 101, 102, 133, 220, 221, 224, 225, 227, 228, 231, 233, 239, 245, 246, 260, 262, 277, 281, 283, 285, 286, 290, 291, 292, 336, 371, 374, 397, 402, 407, 418, 628, 631, 635, 636, 638, 642, 665, 667, 678, 708, 740, 777, 791, 819, 820, 841, 866], "greater_equ": [55, 78, 101, 102, 264, 631, 866], "isfinit": [55, 78, 631, 840], "out_i": [55, 78, 253, 254, 255, 256, 279, 631], "self_i": [55, 78, 253, 254, 255, 256, 279], "finit": [55, 78, 219, 220, 221, 222, 225, 227, 228, 237, 239, 240, 242, 244, 246, 253, 254, 260, 262, 272, 273, 275, 277, 281, 285, 286, 290, 631], "isinf": [55, 78, 631], "detect_posit": [55, 78, 254, 631], "detect_neg": [55, 78, 254, 631], "isnan": [55, 78, 631], "isreal": [55, 78, 631], "5j": [55, 78, 79, 256, 279, 337, 371, 631], "6j": [55, 56, 78, 252, 256, 337, 631], "lcm": [55, 78, 631, 828], "less": [55, 56, 61, 65, 69, 78, 79, 84, 88, 101, 102, 220, 221, 224, 227, 228, 235, 239, 246, 260, 261, 262, 263, 277, 281, 283, 286, 357, 371, 374, 375, 386, 396, 397, 406, 418, 444, 450, 521, 524, 631, 636, 642, 646, 677, 678, 679, 682, 693, 740, 763, 765, 791, 818, 819, 826, 828, 830, 832, 835, 840, 843, 846, 847, 848, 859, 866, 869, 871], "less_equ": [55, 78, 101, 102, 631, 832, 866], "log10": [55, 56, 78, 318, 368, 631], "logarithm": [55, 78, 242, 260, 261, 262, 263, 264, 341, 353, 371, 631, 636, 684], "602": [55, 261, 631], "699": [55, 261, 631], "log1p": [55, 78, 631, 838], "693": [55, 78, 116, 225, 262, 625, 631], "0953": [55, 78, 260, 262, 631], "log2": [55, 78, 265, 631], "logaddexp": [55, 78, 631], "logaddexp2": [55, 78, 631, 815, 833], "169925": [55, 78, 265, 631], "logical_and": [55, 78, 631, 840, 846, 876], "logical_not": [55, 78, 631, 828], "logical_or": [55, 78, 631, 876], "conform": [55, 61, 78, 125, 126, 127, 129, 130, 131, 132, 134, 135, 136, 138, 141, 142, 143, 144, 145, 147, 148, 154, 164, 167, 179, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 239, 240, 242, 244, 245, 246, 250, 251, 252, 253, 254, 255, 259, 261, 262, 263, 264, 266, 267, 268, 269, 272, 274, 275, 276, 277, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 334, 335, 337, 371, 374, 377, 386, 418, 491, 495, 521, 628, 629, 631, 636, 638, 643, 644, 645, 646, 647, 666, 667, 668, 669, 670, 672, 673, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 692, 693, 699, 701, 702, 703, 705, 706, 708, 709, 713, 743, 744, 746, 747, 748, 749, 750, 751, 752, 755, 759, 760, 761, 762, 763, 764, 765, 766, 767, 831, 834], "api_specif": [55, 56, 78, 79, 154, 242, 252, 253, 268, 334, 335, 371, 374, 377, 418, 491, 629, 631, 638, 646, 713, 763, 831], "array_api": [55, 78, 154, 242, 252, 253, 268, 374, 377, 418, 491, 629, 631, 636, 638, 646, 684, 685, 713, 763, 831], "logical_xor": [55, 78, 631], "maximum": [55, 56, 57, 58, 63, 66, 69, 73, 78, 79, 80, 81, 86, 89, 92, 102, 212, 298, 334, 335, 346, 359, 366, 371, 374, 375, 377, 386, 390, 391, 401, 444, 447, 450, 483, 522, 524, 529, 539, 540, 548, 556, 620, 630, 631, 633, 634, 636, 638, 643, 646, 677, 698, 743, 744, 759, 761, 775, 777, 778, 783, 805, 819, 828, 830, 839, 851, 866, 876], "use_wher": [55, 78, 270, 271, 631], "formula": [55, 56, 78, 239, 261, 263, 270, 271, 272, 318, 352, 368, 371, 380, 500, 502, 631, 809], "exce": [55, 56, 79, 271, 377, 493, 631], "product": [55, 56, 60, 61, 69, 78, 79, 83, 84, 92, 96, 97, 99, 272, 364, 365, 373, 375, 377, 386, 424, 427, 431, 434, 435, 436, 441, 442, 443, 495, 522, 523, 530, 631, 635, 636, 646, 662, 665, 667, 674, 676, 681, 688, 692, 756, 757, 758, 762, 763, 805, 817, 848, 869, 871], "nan_to_num": [55, 78, 631], "posinf": [55, 78, 273, 631], "neginf": [55, 78, 273, 631], "5e": [55, 58, 78, 79, 273, 356, 620, 631, 634], "not_equ": [55, 78, 101, 102, 631, 866], "pow": [55, 78, 101, 102, 631, 822, 866], "expon": [55, 56, 57, 79, 80, 277, 345, 347, 351, 371, 380, 505, 592, 631, 633, 636, 678], "rad2deg": [55, 78, 631], "286": [55, 79, 278], "458": [55, 278], "573": [55, 278, 631], "reciproc": [55, 78, 631], "333": [55, 78, 239, 280, 631], "remaind": [55, 56, 63, 73, 78, 79, 86, 248, 631, 638, 707, 822, 839], "modulu": [55, 78, 281, 631, 839], "x2_i": [55, 78, 222, 227, 229, 231, 232, 233, 234, 239, 240, 246, 250, 251, 258, 259, 264, 266, 268, 269, 272, 275, 277, 281, 288, 631, 822], "678": [55, 282, 283], "np_variant": [55, 78, 283, 631], "841": [55, 72, 78, 109, 284, 625, 631], "909": [55, 78, 80, 284, 631], "141": [55, 78, 151, 284, 629, 631], "sinh": [55, 78, 284, 631], "232": [55, 78, 285, 631], "sqrt": [55, 56, 78, 79, 374, 397, 402, 403, 407, 408, 418, 631, 790, 791, 811], "squar": [55, 56, 61, 78, 79, 84, 286, 375, 376, 380, 386, 428, 440, 452, 505, 521, 616, 617, 619, 624, 631, 634, 636, 640, 666, 668, 669, 671, 672, 673, 675, 678, 684, 685, 686, 691, 723, 811], "tanh": [55, 56, 78, 79, 289, 303, 307, 366, 631, 787, 848], "762": [55, 78, 290, 631], "964": [55, 78, 290, 631], "trapz": [55, 78, 631], "dx": [55, 78, 291, 631], "apart": [55, 78, 291, 631], "trapezoid": [55, 78, 291, 631], "trunc": [55, 78, 631], "025": [55, 292, 376, 457, 631, 639, 716], "trunc_divid": [55, 78, 631], "_arraywithactivationsexperiment": [56, 101], "celu": [56, 79, 366], "formul": [56, 72, 79, 97, 109, 294, 296, 366, 787], "elu": [56, 79, 298, 366, 787], "scaler": [56, 79, 295, 366, 775, 778, 843], "hardshrink": [56, 79, 366], "lambd": [56, 79, 296, 306, 366], "hardsilu": [56, 79, 366], "66666667": [56, 118, 297, 386, 521, 625], "hardtanh": [56, 79, 366], "max_val": [56, 79, 298, 366], "min_val": [56, 79, 298, 366], "region": [56, 79, 298, 306, 366, 818], "19722438": [56, 79, 299, 366], "38629448": [56, 79, 299, 366], "38629436": [56, 79, 299, 366], "logsigmoid": [56, 79, 366, 787], "31326175": [56, 72, 300, 366], "126928": [56, 79, 300], "01814993": [56, 300], "00004578": [56, 300], "57888985": [56, 300], "31326169": [56, 79, 300, 366], "69314718": [56, 61, 72, 79, 84, 300, 353, 366, 371, 636, 684], "01104775": [56, 300], "prelu": [56, 79, 366, 787], "unidirect": [56, 301, 366, 635, 660], "relu6": [56, 79, 366, 787], "rectifi": [56, 72, 79, 111, 113, 114, 302, 305, 310, 366, 625], "scaled_tanh": [56, 79, 307, 366], "7159": [56, 79, 303, 307, 366], "amplitud": [56, 79, 303, 307, 366], "65537548": [56, 79, 303], "49570239": [56, 79, 303], "77637792": [56, 303], "selu": [56, 79, 366, 787], "11133075": [56, 304, 366], "05070102": [56, 79, 304, 366], "10140204": [56, 304, 366], "15210295": [56, 304, 366], "20280409": [56, 304, 366], "25350523": [56, 304, 366], "30420589": [56, 304, 366], "35490704": [56, 304, 366], "silu": [56, 79, 366, 787], "26894143": [56, 305], "73105854": [56, 79, 305], "softshrink": [56, 79, 366], "bound": [56, 79, 306, 318, 366, 368, 377, 466, 491, 492, 775, 828, 832, 840, 843, 848, 875], "tanhshrink": [56, 79, 366], "23840582": [56, 79, 308, 366], "condit": [56, 66, 79, 89, 122, 309, 324, 325, 368, 375, 425, 627, 640, 643, 727, 728, 747, 777, 822, 828, 830, 832, 836, 837, 839, 843, 862], "met": [56, 79, 309, 832], "hreshold": [56, 309], "thresholded_relu": [56, 79, 366], "_arraywithconversionsexperiment": [56, 101], "_arraywithcreationexperiment": [56, 101], "blackman_window": [56, 79, 368], "period": [56, 79, 285, 289, 311, 313, 314, 316, 317, 368, 374, 409, 631, 819], "window": [56, 60, 79, 83, 311, 313, 314, 316, 317, 332, 368, 374, 380, 393, 394, 395, 397, 411, 412, 413, 414, 416, 417, 421, 422, 505, 635, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 791, 813, 819, 825, 833, 874], "symmetr": [56, 61, 79, 84, 96, 97, 311, 313, 314, 316, 317, 368, 375, 377, 428, 483, 636, 666, 671, 672, 673, 694, 826], "38777878e": [56, 79, 311, 368], "40000000e": [56, 311, 368], "00000000e": [56, 61, 79, 80, 311, 342, 343, 368, 374, 396, 402, 406, 407, 636, 683, 815, 833], "30000000e": [56, 79, 311, 368], "eye_lik": [56, 79, 368], "elsewher": [56, 79, 131, 312, 368, 628, 643, 747, 818], "mel_weight_matrix": [56, 79, 368], "num_mel_bin": [56, 79, 318, 368], "dft_length": [56, 79, 318, 368, 374, 397], "sample_r": [56, 79, 318, 368], "lower_edge_hertz": [56, 79, 318, 368], "upper_edge_hertz": [56, 79, 318, 368], "3000": [56, 79, 318, 368], "melweightmatrix": [56, 79, 318, 368], "linearli": [56, 57, 80, 318, 368, 548, 633, 636, 685], "frequenc": [56, 57, 79, 80, 318, 368, 386, 521, 548, 633, 819], "spectra": [56, 318, 368], "dft": [56, 79, 318, 368, 374], "stft": [56, 79, 318, 368, 374], "mel": [56, 79, 318, 368], "hertz": [56, 318, 368], "2595": [56, 318, 368], "700": [56, 80, 318, 368, 552], "band": [56, 57, 79, 80, 318, 368, 548, 633], "spectrum": [56, 79, 318, 368], "n_fft": [56, 79, 318, 368, 374, 397], "signal": [56, 79, 318, 368, 374, 388, 389, 390, 391, 396, 397, 406, 422, 791, 868, 869], "8000": [56, 79, 313, 318, 368], "75694758": [56, 318, 368], "trilu": [56, 79, 368], "retain": [56, 146, 327, 328, 368, 616, 628, 634, 838, 842, 856], "unsorted_segment_mean": [56, 79, 368], "segment_id": [56, 79, 329, 330, 331, 368, 797], "num_seg": [56, 79, 329, 330, 331, 368, 797], "identifi": [56, 79, 329, 330, 331, 368, 817, 822, 827, 828, 843, 846], "th": [56, 79, 97, 329, 330, 331, 340, 368, 371, 375, 376, 386, 426, 433, 451, 531], "distinct": [56, 67, 79, 329, 330, 331, 368, 644, 748, 749, 750, 751, 814, 818, 826, 831, 838, 839, 840, 847, 859, 869], "unsorted_segment_min": [56, 79, 368], "unsorted_segment_sum": [56, 79, 368], "polyv": [56, 79, 368], "coeff": [56, 79, 321, 368], "polynomi": [56, 79, 321, 368], "coeffici": [56, 79, 313, 321, 368, 375, 445, 636, 685, 795], "indetermin": [56, 79, 321, 368], "simplifi": [56, 79, 321, 368, 804, 805, 832, 840, 848, 849, 852, 859, 862, 865, 867, 868, 869, 872, 875, 876], "substitut": [56, 79, 321, 368], "_arraywithdata_typeexperiment": [56, 101], "_arraywithdeviceexperiment": [56, 101], "_arraywithelementwiseexperiment": [56, 101], "equal_nan": [56, 79, 333, 350, 371], "1e10": [56, 333, 350, 371], "00001e10": [56, 333, 350, 371], "00001e": [56, 333, 371], "amax": [56, 79, 371], "keepdim": [56, 61, 63, 66, 69, 70, 73, 79, 84, 86, 89, 92, 93, 334, 335, 339, 355, 362, 371, 372, 377, 386, 488, 526, 527, 528, 529, 530, 531, 636, 638, 643, 646, 647, 677, 693, 712, 743, 744, 759, 760, 761, 762, 763, 764, 765, 766, 767, 832, 840, 848], "singleton": [56, 61, 66, 69, 70, 79, 84, 89, 92, 93, 334, 335, 371, 636, 638, 643, 646, 647, 693, 701, 708, 744, 759, 760, 761, 762, 763, 764, 765, 766, 767, 848], "amin": [56, 79, 371], "binar": [56, 79, 371], "conj": [56, 79, 237, 242, 244, 285, 286, 290, 371, 631], "conjug": [56, 61, 79, 84, 337, 371, 374, 375, 381, 397, 423, 429, 441, 443, 445, 509, 636, 676, 680, 688], "copysign": [56, 79, 371], "unsign": [56, 69, 79, 338, 371, 377, 386, 491, 522, 523, 646, 756, 757, 762, 764, 776, 828, 848], "count_nonzero": [56, 79, 371], "diff": [56, 73, 79, 371, 830, 839, 866], "prepend": [56, 79, 340, 371, 636, 638, 676, 701, 818], "differenc": [56, 79, 340, 371], "prior": [56, 79, 340, 371, 381, 509, 636, 688, 832, 844], "expand": [56, 57, 63, 79, 80, 340, 371, 377, 495, 548, 633, 638, 701, 811, 826, 842], "discret": [56, 79, 340, 371, 374, 396, 397, 402, 403, 406, 407, 408, 418, 419, 637, 696, 791], "digamma": [56, 79, 371], "7549271": [56, 341, 371], "92278427": [56, 79, 341, 371], "9988394": [56, 341, 371], "erfc": [56, 79, 371], "complementari": [56, 79, 332, 342, 368, 371, 867, 875], "84270084e": [56, 342, 343], "80259693e": [56, 342, 343], "erfinv": [56, 79, 371], "toward": [56, 63, 79, 86, 246, 293, 344, 356, 371, 377, 386, 489, 524, 631, 638, 706, 811, 815, 817, 818, 833, 848, 865, 869], "float_pow": [56, 79, 371], "fmax": [56, 79, 371], "fmod": [56, 79, 631], "divis": [56, 57, 58, 79, 80, 81, 233, 239, 246, 248, 281, 283, 293, 377, 469, 582, 591, 605, 614, 615, 620, 631, 633, 634, 635, 648, 655, 656, 795, 836, 845], "frexp": [56, 79, 371], "edge_ord": [56, 79, 348, 371], "estim": [56, 79, 348, 371, 386, 521, 809], "boundari": [56, 65, 79, 88, 99, 324, 325, 348, 368, 371, 374, 410, 642, 740, 869], "33333333": [56, 79, 280, 348, 371, 451, 631], "hypot": [56, 79, 371], "hypotenus": [56, 349, 371], "4031": [56, 349, 371], "8102": [56, 349, 371], "isclos": [56, 79, 371, 822], "ldexp": [56, 79, 371], "lerp": [56, 79, 371], "lgamma": [56, 79, 371], "45373654": [56, 353, 371], "6477685": [56, 353, 371], "modf": [56, 79, 371], "fraction": [56, 79, 354, 371, 386, 531, 635, 658], "nansum": [56, 79, 371], "accumul": [56, 79, 355, 371, 377, 488], "nextaft": [56, 79, 371], "0e": [56, 58, 79, 81, 356, 371, 620, 634], "4013e": [56, 79, 356, 371], "4028e": [56, 79, 356, 371], "signbit": [56, 79, 371], "637": [56, 79, 358, 371], "0909": [56, 79, 358, 371], "sparsify_tensor": [56, 79, 371], "sparsifi": [56, 79, 359, 371], "arang": [56, 61, 69, 79, 84, 136, 359, 371, 374, 375, 393, 394, 395, 402, 407, 411, 412, 413, 416, 425, 442, 475, 571, 613, 628, 633, 636, 639, 646, 677, 693, 715, 716, 758, 811, 828, 839, 876], "xlogi": [56, 79, 371], "0986": [56, 79, 360, 371], "3863": [56, 79, 360, 371], "0000": [56, 79, 313, 314, 317, 343, 360, 368, 371, 375, 377, 440, 477], "zeta": [56, 79, 371], "0369": [56, 79, 361, 371], "_arraywithgeneralexperiment": [56, 101], "init_valu": [56, 79, 83, 362, 372, 374, 417], "reduct": [56, 57, 62, 70, 73, 79, 80, 83, 85, 93, 362, 372, 374, 376, 377, 417, 451, 452, 453, 454, 455, 456, 457, 458, 488, 545, 575, 576, 633, 637, 647, 695, 696, 697, 766, 767, 792, 828, 836, 839, 843, 850], "_arraywithgradientsexperiment": [56, 101], "_arraywithimageexperiment": [56, 101], "_arraywithlayersexperiment": [56, 101], "adaptive_avg_pool1d": [56, 79, 374], "1d": [56, 79, 96, 97, 374, 375, 377, 386, 388, 396, 398, 400, 406, 441, 461, 466, 488, 492, 521, 775, 791], "adapt": [56, 79, 81, 374, 388, 389, 390, 391, 621, 634, 791, 795, 859], "plane": [56, 79, 239, 242, 244, 272, 284, 285, 286, 289, 374, 377, 388, 389, 390, 391, 489, 631], "l_in": [56, 79, 374, 388], "spatial": [56, 60, 79, 83, 374, 380, 388, 389, 390, 391, 410, 417, 421, 500, 501, 502, 505, 635, 648, 649, 650, 651, 653, 655, 657, 794], "Will": [56, 79, 374, 388, 389, 390, 391, 800, 854], "l_out": [56, 79, 374, 388], "nhwc": [56, 60, 79, 83, 374, 380, 389, 394, 399, 412, 416, 505, 635, 648, 651, 652, 655, 656, 657, 791], "3d": [56, 61, 79, 374, 389, 391, 398, 399, 463, 636, 674, 791, 846], "4d": [56, 79, 374, 375, 380, 389, 399, 400, 449, 505], "s_0": [56, 79, 374, 389, 390], "s_1": [56, 79, 374, 389, 390], "adaptive_max_pool2d": [56, 79, 374], "h_in": [56, 79, 374, 390, 391], "w_in": [56, 79, 374, 390, 391], "adaptive_max_pool3d": [56, 79, 374], "avg_pool1d": [56, 79, 374], "kernel": [56, 60, 79, 83, 374, 393, 394, 395, 411, 412, 413, 414, 635, 661, 848, 854, 869, 872, 873], "nwc": [56, 60, 79, 83, 374, 393, 398, 411, 414, 635, 648, 649, 650, 655, 656, 791], "count_include_pad": [56, 79, 374, 393, 394, 395, 791], "d_in": [56, 60, 79, 83, 374, 391, 393, 394, 395, 397, 402, 403, 407, 411, 412, 413, 414, 635, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657], "algorithm": [56, 60, 72, 79, 83, 109, 374, 375, 393, 394, 395, 410, 411, 412, 413, 414, 444, 446, 450, 636, 649, 651, 652, 653, 654, 657, 684, 787, 791, 805, 828, 840, 846, 854, 869, 871, 873], "ncw": [56, 60, 79, 83, 374, 393, 398, 399, 411, 414, 635, 648, 649, 650, 655, 656, 791], "avg_pool2d": [56, 79, 374], "divisor_overrid": [56, 79, 374, 393, 394, 395, 791], "avg_pool3d": [56, 79, 374], "ndhwc": [56, 60, 79, 83, 374, 395, 400, 413, 635, 648, 653, 654, 655, 656, 791], "volum": [56, 60, 79, 83, 374, 395, 397, 402, 403, 407, 413, 635, 653, 654], "ncdhw": [56, 60, 79, 83, 374, 395, 400, 413, 635, 648, 653, 654, 655, 656, 791], "dct": [56, 79, 374, 791, 851], "truncat": [56, 79, 374, 375, 396, 402, 406, 407, 408, 419, 448, 578, 633, 791, 832, 851], "larger": [56, 63, 69, 79, 86, 92, 164, 374, 396, 403, 406, 408, 419, 629, 638, 646, 698, 706, 763, 765, 791, 843, 846, 876], "ortho": [56, 79, 374, 396, 397, 402, 403, 406, 407, 408, 418, 419, 791], "onesid": [56, 79, 374, 397], "fft": [56, 79, 374, 397, 403, 418, 419, 422, 791, 817, 869], "symmetri": [56, 374, 397], "rfft": [56, 79, 374, 397, 419], "invok": [56, 374, 397, 811, 834, 862, 863], "batch_idx": [56, 374, 397], "signal_dim1": [56, 374, 397], "signal_dim2": [56, 374, 397], "signal_dimn": [56, 374, 397], "signal_dim": [56, 374, 397], "embed": [56, 79, 374, 376, 451, 635, 662, 777, 791, 869], "max_norm": [56, 57, 79, 80, 374, 401, 539, 540, 633, 791], "ifft": [56, 79, 374, 402, 408, 791], "pi": [56, 79, 285, 289, 374, 376, 402, 407, 456, 626, 631], "44509285e": [56, 79, 374, 402], "14423775e": [56, 79, 374, 402], "17j": [56, 79, 374, 402, 407], "11483250e": [56, 79, 374, 402], "16j": [56, 79, 374, 402, 407], "33486982e": [56, 79, 374, 402], "22464680e": [56, 79, 374, 402], "95799250e": [56, 79, 374, 402], "66951701e": [56, 79, 374, 402], "fft2": [56, 374], "vari": [56, 67, 96, 97, 290, 403, 544, 631, 633, 636, 644, 683, 749, 750, 751, 805, 826, 830, 840, 843, 850], "20477401j": [56, 374, 403], "0614962j": [56, 374, 403], "idct": [56, 79, 374], "49862671": [56, 79, 374, 396, 406], "37691498": [56, 79, 374, 396, 406], "00390816": [56, 79, 374, 396, 406], "58938599": [56, 79, 374, 396, 406], "92713165": [56, 79, 374, 396, 406], "078475": [56, 79, 374, 396, 406], "19664812": [56, 79, 374, 396, 406], "95411837": [56, 79, 374, 396, 406], "30636606e": [56, 79, 374, 407], "43029718e": [56, 79, 374, 407], "18j": [56, 79, 374, 402, 407], "53080850e": [56, 79, 374, 407], "58689626e": [56, 79, 374, 407], "24474906e": [56, 79, 374, 407], "91858728e": [56, 79, 374, 407], "01435406e": [56, 79, 374, 407], "ifftn": [56, 79, 374], "24730653": [56, 79, 374, 408], "90832391j": [56, 79, 374, 408], "49495562": [56, 79, 374, 408], "9039565j": [56, 79, 374, 408], "98193269": [56, 79, 374, 408], "49560517j": [56, 79, 374, 408], "93280757": [56, 79, 374, 408], "48075343j": [56, 79, 374, 408], "28526384": [56, 79, 374, 408], "3351205j": [56, 79, 374, 408], "2343787": [56, 79, 374, 408], "83528011j": [56, 79, 374, 408], "18791352": [56, 79, 374, 408], "30690572j": [56, 79, 374, 408], "82115787": [56, 79, 374, 408], "96195183j": [56, 79, 374, 408], "44719226": [56, 79, 374, 408], "72654048j": [56, 79, 374, 408], "51476765": [56, 374, 408], "66160417j": [56, 374, 408], "04319742": [56, 374, 408], "05411636j": [56, 374, 408], "015561": [56, 374, 408], "04216015j": [56, 374, 408], "06310689": [56, 374, 408], "05347854j": [56, 374, 408], "13392983": [56, 374, 408], "16052352j": [56, 374, 408], "08371392": [56, 374, 408], "17252843j": [56, 374, 408], "0031429": [56, 374, 408], "05421245j": [56, 374, 408], "10446617": [56, 374, 408], "17747098j": [56, 374, 408], "05344324": [56, 374, 408], "07972424j": [56, 374, 408], "8344667": [56, 79, 374, 408], "98222595j": [56, 79, 374, 408], "48472244": [56, 79, 374, 408], "30233797j": [56, 79, 374, 408], "recompute_scale_factor": [56, 79, 374, 410, 846], "antialia": [56, 79, 374, 410, 846], "height": [56, 57, 60, 79, 80, 83, 374, 410, 544, 633, 635, 651, 652, 653, 654, 657, 820, 851], "width": [56, 57, 60, 79, 80, 83, 374, 375, 377, 380, 386, 410, 429, 483, 505, 524, 544, 633, 635, 649, 650, 651, 652, 653, 654, 657, 662], "trilinear": [56, 79, 374, 410, 846], "nearest_exact": [56, 79, 374, 410, 846], "tf_area": [56, 79, 374, 410, 846], "mitchellcub": [56, 79, 374, 410, 846], "lanczos3": [56, 79, 374, 410, 846], "lanczos5": [56, 79, 374, 410, 846], "gaussian": [56, 79, 109, 374, 410, 625, 846], "overwrit": [56, 73, 79, 212, 374, 410, 630, 819, 839, 840, 848], "thu": [56, 79, 233, 246, 281, 289, 290, 374, 375, 410, 428, 631, 636, 671, 672, 817, 827, 832, 837, 840, 844], "antialias": [56, 79, 410], "max_pool1d": [56, 79, 374], "dilaton": [56, 79, 411, 412, 413], "max_pool3d": [56, 79, 374], "max_unpool1d": [56, 79, 374], "unpool": [56, 79, 374, 414], "reduce_window": [56, 83, 374], "window_dimens": [56, 83, 374, 417], "window_strid": [56, 83, 374, 417], "base_dil": [56, 83, 374, 417], "window_dil": [56, 83, 374, 417], "trim": [56, 73, 79, 374, 377, 418, 494], "orthonorm": [56, 61, 79, 84, 374, 418, 636, 683, 686], "8660254j": [56, 79, 374, 418], "rfftn": [56, 79, 374], "sliding_window": [56, 79, 374], "window_s": [56, 79, 374, 421], "frame_length": [56, 79, 374, 422], "frame_step": [56, 79, 374, 422], "fft_length": [56, 79, 374, 422], "window_fn": [56, 79, 374, 422], "pad_end": [56, 79, 374, 422], "smallest": [56, 73, 79, 164, 167, 235, 374, 377, 422, 493, 629, 631, 636, 677, 775, 777, 778], "enclos": [56, 79, 374, 422, 870], "window_length": [56, 79, 311, 313, 316, 317, 332, 368, 374, 422], "li": [56, 79, 374, 375, 386, 422, 429, 531, 858], "past": [56, 79, 374, 422, 819, 822, 841, 843, 855, 869], "fft_unique_bin": [56, 79, 374, 422], "complex64": [56, 76, 79, 157, 171, 180, 186, 252, 279, 374, 418, 422, 629, 631, 636, 684, 686, 687, 776, 828, 833], "complex128": [56, 79, 80, 157, 158, 171, 180, 186, 374, 422, 570, 629, 633, 636, 672, 673, 677, 693, 775, 776, 815, 828, 833], "compon": [56, 79, 141, 142, 220, 221, 222, 225, 228, 237, 239, 240, 242, 244, 272, 274, 275, 282, 285, 286, 289, 290, 322, 326, 337, 368, 371, 374, 375, 380, 422, 433, 444, 505, 628, 631, 643, 746, 811, 842, 848, 859, 865, 870, 872], "linear_algebra": [56, 61, 79, 84, 636, 844], "_arraywithlinearalgebraexperiment": [56, 101], "adjoint": [56, 61, 79, 84, 375, 445, 636, 675, 685, 686, 775], "batched_out": [56, 79, 375], "j1": [56, 79, 375, 424], "jn": [56, 79, 375, 424], "k1": [56, 79, 375, 424], "km": [56, 79, 375, 424], "outer": [56, 61, 79, 84, 96, 375, 424, 636, 639, 714, 715, 716, 805, 817], "30000001": [56, 79, 375, 424, 544, 633, 644, 749], "40000001": [56, 60, 72, 79, 101, 102, 111, 114, 295, 366, 375, 424, 625, 635, 644, 665, 749], "60000002": [56, 79, 92, 102, 375, 380, 424, 504, 506, 540, 633, 760], "80000001": [56, 79, 375, 380, 424, 504, 506], "60000001": [56, 79, 375, 424], "90000004": [56, 79, 375, 424, 646, 760], "20000002": [56, 79, 375, 424, 540, 633], "20000005": [56, 58, 79, 295, 303, 306, 307, 366, 375, 424, 614], "00000012": [56, 79, 375, 424], "49999994": [56, 79, 375, 424], "00000006": [56, 79, 375, 424], "60000014": [56, 79, 375, 424], "19999993": [56, 79, 375, 424], "80000007": [56, 79, 375, 424, 540, 633], "20000017": [56, 79, 375, 424], "89999992": [56, 79, 375, 424], "60000008": [56, 79, 375, 424], "80000019": [56, 79, 352, 371, 375, 424], "4000001": [56, 79, 83, 375, 424, 635, 658, 665], "cond": [56, 79, 122, 375, 627, 854], "933034373659268": [56, 425], "diagflat": [56, 79, 375, 435, 440], "offset": [56, 61, 64, 75, 79, 84, 87, 133, 375, 380, 426, 500, 501, 502, 628, 636, 641, 670, 690, 736, 782], "padding_valu": [56, 79, 375, 426], "right_left": [56, 79, 375, 426], "num_row": [56, 79, 375, 426], "num_col": [56, 79, 375, 426], "dot": [56, 60, 79, 83, 96, 375, 376, 442, 451, 635, 636, 662, 665, 692, 805, 811, 818, 827], "eig": [56, 61, 79, 375, 636, 672, 673], "37228132": [56, 79, 375, 428, 430, 671], "82456484": [56, 428, 671], "41597356": [56, 428, 671], "56576746": [56, 428, 671], "90937671": [56, 428, 671], "eigh_tridiagon": [56, 79, 375], "eigvals_onli": [56, 79, 375, 429], "select_rang": [56, 79, 375, 429], "tol": [56, 79, 100, 375, 429, 444, 450], "eigenvalu": [56, 61, 79, 84, 96, 97, 375, 428, 429, 430, 636, 671, 672, 673, 679], "eigenvector": [56, 79, 375, 428, 429, 636, 671, 672], "interv": [56, 65, 70, 79, 88, 93, 125, 136, 137, 144, 375, 386, 429, 524, 628, 636, 638, 642, 647, 667, 692, 698, 701, 709, 738, 740, 766, 767], "converg": [56, 79, 375, 429, 860], "_2": [56, 79, 375, 429], "eig_val": [56, 79, 375, 429], "decreas": [56, 79, 375, 429, 777], "eig_vector": [56, 79, 375, 429], "38196": [56, 429], "61803": [56, 429], "eigval": [56, 79, 375], "general_inner_product": [56, 84, 375], "n_mode": [56, 84, 375, 431], "tradit": [56, 84, 375, 431], "inner": [56, 61, 75, 84, 105, 140, 375, 428, 431, 628, 636, 639, 671, 672, 676, 714, 715, 716, 805, 817, 839], "higher_order_mo": [56, 79, 375], "n_featur": [56, 79, 375, 432], "d1": [56, 79, 375, 432], "dn": [56, 79, 375, 432], "initialize_tuck": [56, 79, 375], "svd": [56, 61, 79, 84, 99, 375, 433, 439, 444, 446, 447, 448, 450, 636, 687], "truncated_svd": [56, 79, 375, 433, 444, 447, 450], "non_neg": [56, 79, 326, 368, 375, 433], "mask": [56, 60, 79, 83, 96, 374, 375, 377, 420, 433, 434, 444, 450, 490, 554, 633, 635, 658, 662, 665, 846], "svd_mask_repeat": [56, 79, 375, 433, 444, 450], "tuckertensor": [56, 79, 100, 326, 368, 375, 433, 444, 450], "scheme": [56, 79, 375, 433, 444, 822, 852, 869], "tucker": [56, 79, 326, 368, 375, 433, 444], "decomposit": [56, 61, 79, 84, 96, 97, 99, 322, 323, 324, 325, 326, 368, 375, 433, 437, 444, 447, 449, 450, 636, 666, 672, 683, 686, 817, 876], "miss": [56, 79, 375, 377, 433, 444, 450, 490, 795, 817, 818, 823, 826, 827, 830, 840, 843, 846], "everywher": [56, 79, 375, 433, 444, 450], "imput": [56, 79, 375, 433, 444, 450], "kron": [56, 79, 375, 440, 876], "make_svd_non_neg": [56, 79, 375, 448], "nntype": [56, 79, 375, 439], "nndsvd": [56, 79, 375, 439], "singular": [56, 61, 79, 84, 375, 433, 439, 446, 448, 636, 677, 679, 682, 686, 687, 775, 777, 828], "nndsvda": [56, 79, 375, 439], "boutsidi": [56, 79, 375, 439], "gallopoulo": [56, 79, 375, 439], "pattern": [56, 57, 79, 80, 375, 439, 544, 545, 546, 633, 828, 831, 842, 860], "recognit": [56, 79, 375, 439, 814], "1350": [56, 79, 375, 439], "1362": [56, 79, 375, 439], "2008": [56, 79, 375, 439, 869], "matrix_exp": [56, 79, 375], "7183": [56, 79, 375, 440], "3891": [56, 79, 375, 440], "mode_dot": [56, 79, 95, 96, 100, 375], "matrix_or_vector": [56, 79, 96, 100, 375, 441], "i_1": [56, 79, 96, 97, 375, 441], "i_k": [56, 79, 96, 375, 441], "i_n": [56, 79, 96, 375, 441], "i_": [56, 79, 96, 375, 386, 441, 524], "multi_dot": [56, 79, 375], "148": [56, 78, 79, 242, 375, 442], "multi_mode_dot": [56, 79, 375], "mat_or_vec_list": [56, 79, 375, 443], "times_0": [56, 375, 443], "vec": [56, 375, 443], "times_1": [56, 375, 443], "cdot": [56, 272, 375, 443, 631], "times_n": [56, 375, 443], "partial_tuck": [56, 79, 375], "n_iter_max": [56, 79, 375, 444, 450], "verbos": [56, 79, 375, 444, 447, 450, 809, 843, 848], "return_error": [56, 79, 375, 444, 450], "variat": [56, 79, 375, 444, 450, 830, 840, 843], "reconstruct": [56, 61, 67, 79, 90, 99, 375, 377, 444, 450, 497, 636, 644, 686, 748, 750, 841], "return_erro": [56, 375, 444, 450], "svd_flip": [56, 79, 375], "u_based_decis": [56, 79, 375, 446], "basi": [56, 79, 375, 446, 819, 822, 851], "flip": [56, 63, 79, 86, 96, 230, 375, 377, 446, 474, 475, 631, 638, 839, 850, 851, 853], "decis": [56, 79, 375, 446, 811, 822, 828, 846, 848, 850, 869], "u_adjust": [56, 79, 375, 446], "v_adjust": [56, 79, 375, 446], "tensor_train": [56, 79, 375], "tt": [56, 79, 325, 368, 375, 447, 449], "kth": [56, 375, 447], "tttensor": [56, 99, 325, 368, 375, 447], "compute_uv": [56, 61, 79, 84, 375, 448, 636, 686], "n_eigenvec": [56, 79, 375, 448], "returnedv": [56, 448], "vh": [56, 61, 79, 84, 375, 448, 636, 686], "eigen": [56, 79, 375, 448], "namedtupl": [56, 61, 67, 79, 84, 90, 375, 377, 428, 448, 497, 636, 644, 671, 672, 683, 684, 686, 748, 749, 750], "tt_matrix_to_tensor": [56, 79, 375], "known": [56, 79, 283, 375, 447, 449, 631, 790, 822, 827, 828, 840, 843], "rank_k": [56, 79, 375, 449], "left_dim_k": [56, 79, 375, 449], "right_dim_k": [56, 79, 375, 449], "rank_": [56, 79, 375, 449], "49671414": [56, 79, 375, 449, 642, 739], "1382643": [56, 79, 375, 449, 642, 739], "64768857": [56, 79, 375, 449, 642, 739], "5230298": [56, 79, 375, 449, 642, 739], "23415337": [56, 79, 375, 449, 642, 739], "23413695": [56, 79, 375, 449, 642, 739], "57921278": [56, 79, 375, 449], "76743472": [56, 79, 375, 449], "1163073": [56, 79, 375, 449], "11629914": [56, 79, 375, 449], "03237505": [56, 79, 375, 449], "03237278": [56, 79, 375, 449], "78441733": [56, 79, 375, 449], "38119566": [56, 79, 375, 449], "21834874": [56, 79, 375, 449], "10610882": [56, 79, 375, 449], "15165846": [56, 79, 375, 449], "15164782": [56, 79, 375, 449], "35662258": [56, 79, 375, 449], "35659757": [56, 79, 375, 449], "02283812": [56, 79, 375, 449], "49705869": [56, 79, 375, 449], "40518808": [56, 79, 375, 449], "16882598": [56, 79, 375, 449], "fixed_factor": [56, 79, 375, 450], "tl": [56, 79, 375, 450], "kolda": [56, 79, 375, 450], "bader": [56, 79, 375, 450], "siam": [56, 79, 375, 447, 450], "review": [56, 79, 375, 450, 813, 814, 817, 819, 825, 827, 830, 840, 844], "vol": [56, 79, 375, 450], "pp": [56, 79, 375, 450], "455": [56, 79, 375, 450], "2009": [56, 79, 375, 450], "_arraywithlossesexperiment": [56, 101], "hinge_embedding_loss": [56, 79, 376], "margin": [56, 79, 376, 451, 458, 840], "measur": [56, 376, 451, 635, 662, 791], "semi": [56, 376, 451], "l_n": [56, 376, 451], "x_n": [56, 376, 451], "y_n": [56, 376, 451], "ell": [56, 376, 451], "operatornam": [56, 283, 285, 376, 451, 631, 636, 672], "l_1": [56, 376, 451], "hyperparamet": [56, 79, 376, 451], "aggreg": [56, 79, 376, 451, 644, 748, 827], "unreduc": [56, 79, 376, 451], "hing": [56, 79, 376, 451, 458], "target_tensor": [56, 376, 451, 456], "huber_loss": [56, 79, 376], "delta": [56, 58, 79, 81, 376, 452, 614, 634], "transit": [56, 79, 376, 452, 869], "huber": [56, 79, 376, 452], "kl_div": [56, 79, 376], "log_target": [56, 79, 376, 453], "contai": [56, 453], "batchmean": [56, 376, 453], "kullback": [56, 79, 376, 453], "leibler": [56, 79, 376, 453], "0916": [56, 453], "l1_loss": [56, 79, 376, 455], "l1": [56, 61, 79, 84, 376, 380, 452, 454, 455, 457, 503, 636, 693, 826, 851], "targetict": [56, 79, 376, 454, 455, 457, 458], "20000000000000004": [56, 454], "log_poisson_loss": [56, 79, 376], "compute_full_loss": [56, 79, 376, 455, 792], "favor": [56, 79, 376, 455], "likelihood": [56, 79, 376, 455, 456], "28402555": [56, 376, 455], "03402555": [56, 376, 455], "1573164": [56, 376, 455], "poisson_nll_loss": [56, 79, 376], "log_input": [56, 79, 376, 456], "poisson": [56, 79, 376, 381, 455, 456], "assumpt": [56, 376, 455, 456], "minu": [56, 376, 455, 456], "omiss": [56, 376, 456], "stirl": [56, 79, 376, 455, 456], "prevent": [56, 58, 79, 81, 376, 456, 556, 614, 615, 620, 633, 634, 635, 646, 658, 764, 790, 795, 817, 819, 827, 828, 832, 839, 840, 844], "1977562": [56, 456], "smooth_l1_loss": [56, 79, 376], "smooth": [56, 62, 79, 85, 376, 452, 457, 637, 695, 696, 697, 838], "8125": [56, 457], "soft_margin_loss": [56, 79, 376], "soft": [56, 79, 306, 376, 377, 458, 490, 829], "35667497": [56, 458], "22314353": [56, 458], "60943791": [56, 458], "manipul": [56, 79, 839, 840, 844, 846, 848, 853, 858, 869], "_arraywithmanipulationexperiment": [56, 101], "as_strid": [56, 79, 377], "nativeshap": [56, 60, 63, 65, 79, 86, 88, 126, 127, 129, 134, 141, 147, 377, 381, 459, 471, 476, 484, 487, 507, 508, 509, 510, 511, 576, 589, 595, 597, 628, 633, 635, 638, 642, 648, 650, 652, 654, 656, 705, 738, 739, 740, 835, 837], "byte": [56, 57, 75, 79, 80, 101, 133, 377, 459, 570, 628, 633, 874, 875], "associative_scan": [56, 79, 377], "revers": [56, 57, 61, 69, 79, 84, 92, 101, 102, 365, 373, 374, 375, 377, 386, 420, 436, 460, 474, 475, 522, 523, 543, 633, 636, 638, 646, 691, 702, 756, 757, 817, 826, 827, 828, 830, 831, 839, 840, 846, 853, 854], "scan": [56, 79, 377, 460, 854], "atleast_1d": [56, 79, 377], "ari": [56, 79, 377, 461, 462, 463, 469, 478, 498], "a1": [56, 80, 377, 461, 462, 463, 467, 536], "a2": [56, 80, 377, 461, 462, 463, 467, 536], "atleast_2d": [56, 79, 377], "atleast_3d": [56, 79, 377], "column_stack": [56, 79, 377], "concat_from_sequ": [56, 79, 377], "input_sequ": [56, 79, 377, 468], "new_axi": [56, 79, 377, 468, 853], "dsplit": [56, 79, 377], "indices_or_sect": [56, 79, 377, 469, 478, 498], "3rd": [56, 79, 377, 469], "dstack": [56, 79, 377], "fill_diagon": [56, 79, 377], "fill_diag": [56, 472], "fortran": [56, 63, 79, 86, 377, 473, 638, 705, 869, 873], "layout": [56, 63, 79, 86, 377, 473, 638, 705, 824, 839, 840, 846], "fliplr": [56, 79, 377, 839], "diag": [56, 61, 79, 84, 97, 377, 474, 475, 636, 672, 848], "flipud": [56, 79, 377, 839], "fold": [56, 79, 377, 484, 485, 827], "unfold": [56, 79, 96, 97, 99, 375, 377, 433, 476, 484, 486], "folded_tensor": [56, 377, 476], "heavisid": [56, 79, 377], "5000": [56, 377, 477, 636, 675, 805], "hsplit": [56, 79, 377], "horizont": [56, 79, 377, 467, 478, 544, 633], "hstack": [56, 79, 377, 467], "i0": [56, 79, 377, 386, 524], "bessel": [56, 69, 79, 92, 316, 368, 377, 480, 646, 763, 765], "kind": [56, 69, 79, 164, 167, 168, 386, 480, 522, 523, 528, 629, 646, 756, 757, 762, 764, 775, 776, 816, 840, 843, 846, 848, 854], "26606588": [56, 79, 377, 480], "2795853": [56, 79, 377, 480], "88079259": [56, 79, 377, 480], "row_mod": [56, 79, 377, 481], "column_mod": [56, 79, 377, 481], "ascend": [56, 68, 79, 91, 377, 384, 481, 514, 645, 752, 754, 820], "prod": [56, 57, 69, 80, 92, 375, 377, 434, 436, 481, 530, 545, 633, 646, 775, 805, 828, 830, 848, 866], "moveaxi": [56, 79, 377], "destin": [56, 79, 377, 482], "unstack": [56, 63, 73, 86, 482, 638, 826, 848, 851, 876], "reorder": [56, 63, 79, 86, 377, 482, 544, 633, 638, 702, 842], "stat_length": [56, 79, 377, 483], "constant_valu": [56, 79, 377, 483], "end_valu": [56, 79, 377, 483], "reflect_typ": [56, 79, 377, 483], "partial_fold": [56, 79, 377], "skip_begin": [56, 79, 377, 484, 485, 486, 487], "untouch": [56, 79, 377, 484, 485, 486, 487], "partial_tensor_to_vec": [56, 79, 377], "skip_end": [56, 79, 377, 485, 486], "vectoris": [56, 79, 96, 377, 485, 487], "partial_unfold": [56, 79, 377], "ravel_tensor": [56, 79, 377, 486], "n_1": [56, 79, 377, 486], "n_2": [56, 79, 377, 486], "n_i": [56, 79, 375, 377, 434, 486], "partial_vec_to_tensor": [56, 79, 377], "put_along_axi": [56, 79, 377], "rot90": [56, 79, 377, 839], "rotat": [56, 79, 377, 489], "soft_threshold": [56, 79, 377], "behav": [56, 79, 334, 335, 371, 375, 377, 428, 491, 636, 671, 822, 832, 837, 839, 840, 841, 850, 870], "invalid": [56, 70, 79, 93, 377, 491, 636, 638, 647, 692, 701, 766, 767, 775, 818, 828], "slice": [56, 69, 73, 79, 80, 92, 97, 146, 327, 368, 377, 466, 488, 491, 492, 551, 552, 554, 580, 628, 633, 640, 646, 726, 761, 843, 869], "inexact": [56, 79, 345, 371, 377, 491], "largest": [56, 73, 79, 164, 167, 375, 377, 446, 491, 493, 629, 636, 677, 686], "take_along_axi": [56, 79, 377], "arr": [56, 57, 76, 79, 172, 377, 466, 488, 492, 576, 629, 828, 829], "top_k": [56, 79, 377], "sort": [56, 67, 73, 79, 90, 102, 198, 291, 375, 377, 386, 428, 493, 514, 528, 630, 631, 636, 644, 671, 672, 686, 687, 748, 752, 753, 754, 777, 811, 816, 827, 842, 844], "trim_zero": [56, 79, 377], "fb": [56, 79, 377, 494], "front": [56, 79, 377, 494, 840, 847, 848, 851, 858, 867, 869], "unflatten": [56, 79, 377], "unfolded_tensor": [56, 377, 496], "unique_consecut": [56, 79, 377], "vsplit": [56, 79, 377], "vertic": [56, 79, 377, 498, 499, 544, 633, 819], "_arraywithnormsexperiment": [56, 101], "varianc": [56, 69, 79, 92, 380, 500, 502, 646, 765, 790, 794], "nsc": [56, 79, 380, 500, 501, 502, 794], "braodcast": [56, 79, 380, 500], "running_mean": [56, 79, 380, 500, 502, 794], "running_var": [56, 79, 380, 500, 502, 794], "nc": [56, 79, 380, 500, 501, 502, 794], "group_norm": [56, 79, 380], "num_group": [56, 79, 380, 501], "instance_norm": [56, 79, 380], "l1_normal": [56, 79, 380], "33333334": [56, 79, 297, 366, 380, 503, 506, 540, 616, 633, 634, 635, 636, 657, 693], "33333337": [56, 136, 380, 503, 616, 628, 634], "28571439": [56, 380, 503], "l2_normal": [56, 79, 380, 506], "l2": [56, 61, 84, 95, 96, 380, 504, 506, 636, 693, 791, 826], "44721359": [56, 79, 380, 504, 506], "89442718": [56, 79, 380, 504, 506, 540, 633], "lp_normal": [56, 79, 380], "lp": [56, 380, 506], "_arraywithrandomexperiment": [56, 101], "bernoulli": [56, 79, 374, 381, 398, 399, 400], "event": [56, 79, 381, 507, 843], "entri": [56, 63, 73, 79, 86, 90, 97, 136, 375, 377, 381, 445, 472, 474, 475, 507, 628, 638, 640, 707, 730, 748, 818, 827, 843, 869], "parameter": [56, 65, 79, 88, 381, 507, 508, 510, 511, 642, 737, 739, 740], "odd": [56, 79, 277, 377, 381, 483, 507, 631, 805, 816, 822], "drawn": [56, 65, 79, 88, 381, 507, 508, 509, 510, 511, 642, 737, 738, 739, 740, 775, 776, 777, 790, 843], "dirichlet": [56, 79, 381], "10598304": [56, 381, 509], "21537054": [56, 381, 509], "67864642": [56, 381, 509], "48006698": [56, 381, 509], "07472073": [56, 381, 509], "44521229": [56, 381, 509], "55479872": [56, 381, 509], "05426367": [56, 381, 509], "39093761": [56, 381, 509], "19531053": [56, 381, 509], "51675832": [56, 381, 509], "28793114": [56, 381, 509], "12315625": [56, 381, 509], "29823365": [56, 381, 509], "5786101": [56, 381, 509], "15564976": [56, 381, 509], "50542368": [56, 381, 509], "33892656": [56, 381, 509], "1325352": [56, 381, 509], "44439589": [56, 381, 509], "42306891": [56, 381, 509], "gamma": [56, 64, 79, 87, 341, 353, 371, 381, 386, 525, 641, 736], "rate": [56, 58, 79, 81, 374, 381, 416, 511, 615, 618, 620, 621, 622, 634, 635, 639, 660, 714, 715, 716, 795, 827], "lam": [56, 79, 381, 511], "_arraywithsearchingexperiment": [56, 101], "unravel_index": [56, 79, 382], "unravel": [56, 79, 382, 512], "_arraywithsetexperiment": [56, 101], "_arraywithsortingexperiment": [56, 101], "lexsort": [56, 79, 384], "indirectli": [56, 79, 384, 514], "statist": [56, 79, 94, 377, 483, 794, 809, 817, 828, 843, 844, 869], "_arraywithstatisticalexperiment": [56, 101], "bincount": [56, 79, 386], "minlength": [56, 79, 386, 519], "corrcoef": [56, 79, 386], "rowvar": [56, 79, 386, 520, 521], "relationship": [56, 79, 520, 790, 842], "cov": [56, 79, 386], "ddof": [56, 79, 386, 521], "fweight": [56, 79, 386, 521], "aweight": [56, 79, 386, 521], "overridden": [56, 79, 386, 521, 795, 823], "unbias": [56, 69, 79, 92, 386, 521, 646, 765], "assign": [56, 79, 96, 386, 521, 817, 819, 824, 828, 839, 842, 850], "covari": [56, 79, 386, 521], "cummax": [56, 79, 386], "exclus": [56, 57, 69, 73, 79, 80, 92, 125, 375, 386, 444, 522, 523, 563, 564, 567, 628, 633, 642, 646, 738, 756, 757, 814, 826, 828, 836, 853, 873, 875], "cumul": [56, 69, 79, 92, 386, 522, 523, 646, 756, 757], "uint64": [56, 69, 161, 166, 168, 169, 179, 181, 184, 386, 522, 523, 629, 646, 756, 757, 762, 764, 775, 776, 828, 843, 848], "uint16": [56, 69, 156, 161, 166, 167, 176, 386, 522, 523, 629, 646, 756, 757, 762, 764, 775, 776, 828, 840, 843, 848], "bit": [56, 69, 163, 164, 167, 230, 231, 233, 386, 522, 523, 629, 631, 646, 756, 757, 762, 764, 811, 816, 817, 818, 826, 827, 828, 830, 836, 848, 850, 875], "uint32": [56, 69, 161, 166, 167, 168, 190, 386, 522, 523, 629, 646, 756, 757, 762, 764, 775, 776, 828, 843, 848], "cummin": [56, 79, 386], "histogram": [56, 79, 386], "extend_lower_interv": [56, 79, 386, 524], "extend_upper_interv": [56, 79, 386, 524], "densiti": [56, 79, 386, 524], "monoton": [56, 79, 386, 524], "rightmost": [56, 79, 386, 524], "c1": [56, 79, 386, 524, 826], "ff": [56, 79, 386, 524], "c_": [56, 79, 97, 386, 524], "igamma": [56, 79, 386], "incomplet": [56, 79, 386, 525, 819], "3614": [56, 79, 386, 525], "2085": [56, 79, 386, 525], "median": [56, 79, 377, 386, 483, 528], "nanmean": [56, 79, 386], "6666666666666665": [56, 79, 386, 527], "nanmedian": [56, 79, 386], "overwrite_input": [56, 79, 386, 528], "treat": [56, 73, 79, 102, 277, 355, 371, 377, 380, 386, 492, 505, 528, 530, 631, 772, 838, 843, 849, 853], "undefin": [56, 79, 377, 386, 387, 483, 528, 532, 828, 832, 838], "nanmin": [56, 79, 386], "nanprod": [56, 79, 386], "Not": [56, 79, 355, 371, 375, 386, 430, 530, 626, 824, 832, 841, 851, 852, 854], "quantil": [56, 79, 386, 866], "inclus": [56, 79, 125, 386, 531, 628, 642, 738, 812, 824, 839, 846], "midpoint": [56, 79, 386, 531], "surround": [56, 79, 386, 531, 846], "whichev": [56, 79, 386, 531], "_arraywithutilityexperiment": [56, 101], "optional_get_el": [56, 79, 387], "empti": [56, 57, 69, 73, 80, 92, 125, 377, 387, 483, 532, 539, 576, 628, 633, 636, 640, 646, 647, 690, 693, 731, 761, 762, 764, 766, 767, 817, 818, 823, 825, 828, 829, 839], "_arraywithgener": [57, 101], "all_equ": [57, 80, 633], "equality_matrix": [57, 80, 533, 633], "array_equ": [57, 80, 633], "assert_supports_inplac": [57, 80, 633], "ivybackendexcept": [57, 80, 537, 561, 633, 806, 823, 829, 832, 833], "clip_matrix_norm": [57, 80, 633], "894": [57, 80, 539, 540, 633, 641, 736], "clip_vector_norm": [57, 80, 633], "default_v": [57, 543, 633], "catch_except": [57, 543, 633], "rev": [57, 543, 633], "with_cal": [57, 543, 633], "catch": [57, 543, 633, 837, 843], "einops_rearrang": [57, 80, 633], "axes_length": [57, 80, 544, 545, 546, 633], "arrang": [57, 544, 633], "rearrang": [57, 80, 544, 546, 633, 842], "einops_reduc": [57, 80, 633, 828], "einops_repeat": [57, 80, 633], "fourier_encod": [57, 80, 633], "max_freq": [57, 80, 548, 633], "oppos": [57, 80, 548, 633, 828], "geometr": [57, 80, 548, 633, 636, 691], "0000000e": [57, 80, 548, 633], "2246468e": [57, 80, 548, 633], "4492936e": [57, 548, 633], "6739404e": [57, 80, 548, 633], "batch_dim": [57, 80, 551, 552, 633, 797], "gather_nd": [57, 80, 633], "get_num_dim": [57, 80, 633], "as_arrai": [57, 80, 555, 589, 633, 797], "has_nan": [57, 80, 633], "include_inf": [57, 80, 557, 612, 633], "inplace_decr": [57, 80, 633], "val": [57, 73, 78, 80, 252, 377, 472, 559, 560, 561, 580, 581, 582, 631, 633, 828, 839, 850], "decrement": [57, 80, 559, 633], "inplace_incr": [57, 80, 633], "increment": [57, 80, 560, 633, 819, 869], "inplace_upd": [57, 80, 579, 633, 788, 839], "ensure_in_backend": [57, 80, 561, 633, 839], "keep_input_dtyp": [57, 80, 561, 633, 839], "is_arrai": [57, 80, 633, 839, 840], "is_ivy_arrai": [57, 80, 633, 839, 850], "is_ivy_contain": [57, 633], "is_native_arrai": [57, 80, 175, 564, 629, 633, 850], "isin": [57, 80, 633, 866], "test_el": [57, 80, 568, 633], "assume_uniqu": [57, 80, 568, 633], "invert": [57, 80, 230, 568, 631, 633, 636, 678], "scatter_flat": [57, 80, 633], "occupi": [57, 164, 167, 575, 576, 629, 633], "scatter_nd": [57, 80, 633, 846, 850], "stable_divid": [57, 80, 633, 836], "denomin": [57, 64, 80, 87, 582, 591, 605, 633, 641, 736, 794, 836, 845, 854, 866], "min_denomin": [57, 80, 582, 591, 605, 633, 845], "_min_denomin": [57, 591, 633], "stable_pow": [57, 80, 633], "min_bas": [57, 80, 581, 592, 604, 633, 794, 845], "stabl": [57, 68, 80, 91, 146, 327, 334, 335, 368, 371, 384, 514, 581, 582, 591, 592, 604, 605, 628, 633, 645, 752, 755, 777, 818, 824, 828, 840, 845, 848, 854], "00004": [57, 80, 592, 633], "00008": [57, 80, 592, 633], "00004000e": [57, 592], "56002560e": [57, 592], "60001200e": [57, 592], "09602048e": [57, 592], "supports_inplace_upd": [57, 80, 633], "to_fil": 57, "fid": 57, "sep": 57, "format_": 57, "recov": [57, 832, 840], "to_scalar": [57, 80, 633], "value_is_nan": [57, 80, 633], "_arraywithgradi": [58, 101], "adam_step": [58, 81, 634], "mw": [58, 81, 614, 615, 634, 852], "vw": [58, 81, 614, 615, 634, 852], "beta1": [58, 81, 535, 614, 615, 620, 633, 634, 795, 852], "beta2": [58, 81, 535, 614, 615, 620, 633, 634, 795, 852], "epsilon": [58, 61, 62, 81, 84, 85, 535, 614, 615, 620, 633, 634, 636, 637, 679, 682, 695, 696, 697, 787, 792, 794, 795, 826, 836, 839, 852], "dc": [58, 81, 614, 615, 618, 620, 621, 622, 634], "dw": [58, 81, 614, 615, 618, 620, 621, 622, 634], "forget": [58, 81, 614, 615, 620, 634, 795, 811, 828], "dcdw": [58, 81, 614, 615, 618, 620, 621, 634], "adam_step_delta": [58, 81, 614, 634], "2020105": [58, 614, 634], "22187898": [58, 614, 634], "24144873": [58, 614, 634], "10000002": [58, 92, 295, 366, 614, 760], "00300002": [58, 614], "00800002": [58, 614], "adam_upd": [58, 81, 634, 852], "mw_tm1": [58, 81, 615, 620, 634], "vw_tm1": [58, 81, 615, 620, 634], "ws_new": [58, 81, 615, 620, 621, 622, 634], "updated_weight": [58, 81, 615, 634], "92558753": [58, 615], "92558873": [58, 615, 634], "92558718": [58, 615, 634], "00000063e": [58, 81, 615, 634], "00000016e": [58, 81, 615, 634], "00000086e": [58, 81, 615, 634], "gradient_descent_upd": [58, 81, 634, 639, 714, 715, 716], "descent": [58, 81, 618, 634, 795, 852, 869], "new_weight": [58, 81, 618, 620, 621, 634, 851], "lamb_upd": [58, 81, 634], "max_trust_ratio": [58, 81, 620, 634, 795], "decay_lambda": [58, 81, 620, 621, 634, 795], "trust": [58, 81, 620, 634, 795], "ratio": [58, 81, 620, 634, 795], "decai": [58, 81, 620, 621, 634, 795], "lamb": [58, 81, 620, 634, 795, 852], "784": [58, 620, 634], "lars_upd": [58, 81, 634], "lar": [58, 81, 621, 634, 795, 852], "34077978": [58, 621, 634], "78025991": [58, 621, 634], "56051969": [58, 621, 634], "78026009": [58, 621, 634], "56051981": [58, 621, 634], "12103939": [58, 621, 634], "optimizer_upd": [58, 81, 634], "effective_grad": [58, 81, 622, 634], "3e": [58, 81, 622, 634], "preserve_typ": [58, 81, 623, 634], "_arraywithimag": [59, 101], "_arraywithlay": [60, 101], "conv1d": [60, 83, 635, 791], "filter_format": [60, 83, 635, 648, 649, 650, 651, 652, 653, 654, 655, 656], "channel_last": [60, 83, 635, 648, 649, 650, 651, 652, 653, 654, 655, 656, 775], "x_dilat": [60, 83, 635, 648, 649, 651, 652, 653, 655], "d_out": [60, 83, 374, 391, 635, 648, 649, 650, 651, 652, 653, 654, 655, 656], "channel_first": [60, 83, 635, 648, 649, 650, 651, 652, 653, 654, 655, 656], "wio": [60, 635, 648, 649, 650, 655], "conv1d_transpos": [60, 83, 635], "output_shap": [60, 83, 635, 648, 650, 652, 654, 656, 791], "iow": [60, 83, 635, 650], "woi": [60, 83, 635, 650], "fh": [60, 83, 635, 640, 648, 651, 652, 653, 654, 655, 656, 657, 729], "hwio": [60, 635, 648, 649, 651, 655], "conv2d_transpos": [60, 83, 635], "iohw": [60, 83, 635, 652], "hwoi": [60, 83, 635, 652], "conv3d": [60, 83, 635, 654, 791], "fd": [60, 83, 635, 648, 653, 654, 655, 656], "conv3d_transpos": [60, 83, 635, 656], "iodhw": [60, 83, 635, 654, 656], "dhwoi": [60, 83, 635, 654, 656], "depthwise_conv2d": [60, 83, 635], "randint": [60, 65, 67, 83, 88, 642, 644, 657, 661, 748, 811, 828, 862], "noise_shap": [60, 83, 635, 658], "42857146": [60, 635, 658], "85714293": [60, 635, 658], "28571415": [60, 83, 635, 658], "71428585": [60, 83, 635, 658], "14285755": [60, 83, 635, 658], "5714283": [60, 635, 658], "4285717": [60, 83, 635, 658], "8571434": [60, 83, 635, 658], "2857151": [60, 635, 658], "dropout1d": [60, 83, 374], "droput1d": [60, 398, 399], "dropout2d": [60, 83, 374], "dropout3d": [60, 83, 374], "droput3d": [60, 400], "outer_batch_shap": [60, 83, 635, 659], "inner_batch_shap": [60, 83, 635, 659], "lstm_updat": [60, 83, 635, 848], "init_h": [60, 83, 635, 661, 848], "init_c": [60, 83, 635, 661, 848], "recurrent_kernel": [60, 83, 635, 661, 848], "recurrent_bia": [60, 83, 635, 661, 848], "hidden": [60, 83, 635, 660, 661, 791, 825, 832, 848, 852], "recurr": [60, 79, 83, 374, 420, 635, 661, 848, 869, 873], "timestep": [60, 79, 83, 374, 420, 635, 660, 661, 662, 791, 848], "h_i": [60, 83, 661], "c_i": [60, 83, 661], "rc": [60, 83, 661], "multi_head_attent": [60, 83, 635, 839], "num_head": [60, 83, 635, 662, 791], "in_proj_weight": [60, 83, 635, 662], "q_proj_weight": [60, 83, 635, 662], "k_proj_weight": [60, 83, 635, 662], "v_proj_weight": [60, 83, 635, 662], "out_proj_weight": [60, 83, 635, 662], "in_proj_bia": [60, 83, 635, 662], "out_proj_bia": [60, 83, 635, 662], "is_caus": [60, 83, 635, 662, 665], "key_padding_mask": [60, 83, 635, 662], "bias_k": [60, 83, 635, 662], "bias_v": [60, 83, 635, 662], "static_k": [60, 83, 635, 662], "static_v": [60, 83, 635, 662], "add_zero_attn": [60, 83, 635, 662], "return_attention_weight": [60, 83, 635, 662], "average_attention_weight": [60, 83, 635, 662], "scaled_dot_product_attent": [60, 83, 635], "dropout_p": [60, 83, 635, 665], "num_queri": [60, 83, 635, 665], "feat_dim": [60, 83, 635, 665], "num_kei": [60, 83, 635, 665], "causal": [60, 83, 635, 662, 665], "attent": [60, 83, 635, 662, 665, 791, 819, 823, 859], "29999995": [60, 295, 296, 306, 366, 374, 418, 635, 644, 665, 749], "19994521": [60, 635, 665], "09994531": [60, 635, 665], "30000019": [60, 377, 467, 635, 665], "_arraywithlinearalgebra": [61, 101], "choleski": [61, 84, 636, 839], "625": [61, 79, 347, 636, 666], "vif": [61, 84, 667], "det": [61, 84, 636, 684, 827], "axis1": [61, 63, 84, 86, 636, 638, 670, 690, 710], "axis2": [61, 84, 636, 670, 690], "eigh": [61, 84, 375, 428, 636, 671], "uplo": [61, 84, 636, 672, 673], "eigvalsh": [61, 84, 636], "array_lik": [61, 84, 374, 376, 377, 419, 452, 453, 457, 458, 488, 636, 674, 681, 805], "105": [61, 83, 635, 636, 658, 659, 674, 681], "149": [61, 636, 674], "203": [61, 78, 228, 636, 641, 674, 736], "233": [61, 636, 674], "inv": [61, 84, 636], "transpose_a": [61, 84, 636, 676], "transpose_b": [61, 84, 636, 676], "adjoint_a": [61, 84, 636, 676], "adjoint_b": [61, 84, 636, 676], "matrix_norm": [61, 84, 636], "ord": [61, 84, 636, 677, 693], "fro": [61, 84, 376, 452, 636, 677], "nuc": [61, 84, 636, 677], "performingth": [61, 677], "matrix_pow": [61, 84, 636], "matrix_rank": [61, 84, 636], "hermitian": [61, 84, 375, 428, 429, 636, 671, 672, 673, 679, 686], "largest_singular_valu": [61, 84, 636, 679, 682], "defici": [61, 636, 679], "matrix_transpos": [61, 84, 636, 850], "pinv": [61, 84, 636], "pseudo": [61, 84, 636, 682, 838], "99999988": [61, 84, 636, 682], "qr": [61, 84, 636, 841], "complet": [61, 73, 84, 636, 683, 776, 817, 818, 819, 820, 822, 823, 826, 827, 830, 832, 836, 840, 841, 843, 846, 850, 851, 859, 867], "12309149": [61, 636, 683], "90453403": [61, 636, 683], "40824829": [61, 636, 683], "49236596": [61, 636, 683], "30151134": [61, 636, 683], "81649658": [61, 636, 683], "86164044": [61, 636, 683], "12403841e": [61, 636, 683], "60113630e": [61, 636, 683], "10782342e": [61, 636, 683], "04534034e": [61, 636, 683], "80906807e": [61, 636, 683], "88178420e": [61, 84, 636, 673, 683], "slogdet": [61, 84, 636], "logabsdet": [61, 84, 636, 684], "natur": [61, 84, 242, 260, 261, 262, 263, 282, 353, 371, 631, 636, 684, 823, 830, 832, 841, 859], "098611": [61, 636, 684], "solv": [61, 84, 375, 439, 636, 775, 811, 818, 822, 833, 840, 849, 871], "full_matric": [61, 84, 636, 686], "svf": [61, 686], "reconstructed_x": [61, 636, 686], "svdval": [61, 84, 636], "tensorsolv": [61, 84, 636], "vander": [61, 84, 636], "vandermond": [61, 84, 636, 691], "vecdot": [61, 84, 636], "vector_norm": [61, 84, 636], "mathemat": [61, 84, 222, 227, 239, 244, 246, 262, 272, 626, 631, 636, 677, 693, 828, 840, 846, 869, 875], "manhattan": [61, 84, 636, 693], "euclidean": [61, 84, 96, 97, 636, 693], "7416575": [61, 84, 636, 693], "vector_to_skew_symmetric_matrix": [61, 84, 636], "_arraywithloss": [62, 101], "binary_cross_entropi": [62, 85, 637, 827], "from_logit": [62, 85, 637, 695, 792], "pos_weight": [62, 85, 637, 695], "crossentropi": [62, 85, 637, 695], "26765382": [62, 637, 695], "34657359": [62, 637, 696], "sparse_cross_entropi": [62, 85, 637], "07438118": [62, 85, 697], "11889165": [62, 697], "_arraywithmanipul": [63, 101], "x_min": [63, 86, 638, 698, 853], "x_max": [63, 86, 638, 698, 853], "before_1": [63, 86, 377, 483, 638, 700, 713], "after_1": [63, 86, 377, 483, 638, 700, 713], "before_n": [63, 86, 377, 483, 638, 700, 713], "after_n": [63, 86, 377, 483, 638, 700, 713], "repetit": [63, 86, 638, 704, 711, 846], "flat": [63, 73, 86, 382, 512, 575, 633, 638, 704], "allowzero": [63, 86, 638, 705], "remain": [63, 66, 79, 86, 89, 222, 239, 240, 246, 254, 255, 272, 275, 281, 283, 374, 398, 399, 400, 419, 631, 638, 640, 643, 705, 723, 746, 805, 818, 819, 827, 830, 832, 836, 844, 846, 854], "roll": [63, 86, 638, 835, 866], "shift": [63, 75, 86, 102, 135, 146, 231, 233, 327, 368, 628, 631, 638, 706, 818, 819, 829, 830, 835, 842, 866], "restor": [63, 86, 638, 706, 834], "num_or_size_split": [63, 73, 86, 638, 707, 848], "with_remaind": [63, 73, 86, 638, 707], "squeezabl": [63, 638, 708], "swapax": [63, 86, 638], "axis0": [63, 86, 638, 710], "swap_ax": [63, 710], "swap": [63, 86, 638, 710, 800, 863], "tile": [63, 80, 86, 546, 638], "unpack": [63, 86, 638, 712, 841, 843], "zero_pad": [63, 86, 638], "_arraywithnorm": [64, 101], "layer_norm": [64, 87, 641], "normalized_idx": [64, 87, 641, 736], "new_std": [64, 87, 641, 736, 794], "learnabl": [64, 87, 635, 639, 641, 660, 716, 736, 791, 794, 853], "deviat": [64, 65, 69, 87, 88, 92, 641, 642, 646, 736, 739, 763, 777, 790, 794, 822, 860], "0976": [64, 641, 736], "3452": [64, 641, 736], "2740": [64, 641, 736], "1047": [64, 641, 736], "5886": [64, 641, 736], "2732": [64, 641, 736], "7696": [64, 641, 736, 775], "7024": [64, 641, 736], "2518": [64, 641, 736], "826": [64, 641, 736], "178": [64, 641, 736], "981": [64, 641, 736], "831": [64, 641, 736], "421": [64, 641, 736], "_arraywithrandom": [65, 101], "multinomi": [65, 88, 381, 509, 642], "population_s": [65, 88, 642, 737], "num_sampl": [65, 88, 642, 737], "unnorm": [65, 88, 642, 737, 843], "popul": [65, 69, 73, 88, 92, 642, 646, 737, 763, 765, 828, 829, 839, 843, 848, 875], "draw": [65, 88, 381, 507, 509, 511, 642, 737, 739, 740, 775, 776, 777, 778, 783, 790, 817, 822, 841, 843], "half": [65, 88, 125, 286, 628, 631, 642, 738, 740, 815, 833, 846], "235": [65, 739], "float16": [65, 76, 88, 133, 156, 158, 159, 164, 166, 345, 371, 628, 629, 636, 693, 739, 740, 775, 776, 815, 828, 833, 840, 843], "807": [65, 739], "_arraywithsearch": [66, 101], "select_last_index": [66, 89, 643, 743, 744], "occurr": [66, 377, 386, 497, 519, 643, 644, 743, 744, 748], "argmin": [66, 89, 643, 866], "output_dtyp": [66, 89, 643, 744], "argwher": [66, 89, 643], "nonzero": [66, 89, 97, 220, 221, 222, 225, 228, 237, 239, 242, 244, 246, 272, 285, 290, 631, 643], "as_tupl": [66, 89, 643, 746], "fewer": [66, 89, 643, 746], "_arraywithset": [67, 101], "unique_al": [67, 90, 644], "by_valu": [67, 90, 644, 748], "inverse_indic": [67, 90, 377, 497, 644, 748, 750], "unique_count": [67, 90, 644], "unique_invers": [67, 90, 644], "unique_valu": [67, 90, 644], "admonit": [67, 751], "dask": [67, 644, 748, 749, 750, 751, 859], "difficult": [67, 644, 748, 749, 750, 751, 819, 822, 828, 843, 854], "omit": [67, 282, 631, 644, 748, 749, 750, 751, 835, 839, 840], "x_i": [67, 69, 78, 97, 219, 220, 221, 224, 225, 226, 228, 230, 235, 236, 237, 242, 244, 245, 252, 253, 254, 255, 256, 260, 261, 262, 263, 267, 274, 279, 282, 283, 284, 285, 286, 287, 289, 290, 292, 334, 335, 337, 358, 371, 631, 644, 646, 748, 749, 750, 751, 759, 760, 761, 763, 764, 765, 790, 831], "x_j": [67, 644, 748, 749, 750, 751], "impli": [67, 644, 748, 749, 750, 751, 843], "typeerror": [67, 90, 644, 751, 850], "_arraywithsort": [68, 101], "stabil": [68, 91, 591, 592, 633, 645, 752, 755, 828, 838, 844, 846], "maintain": [68, 91, 645, 752, 755, 811, 818, 819, 822, 834, 839, 841, 842, 843, 858, 868], "msort": [68, 91, 645], "searchsort": [68, 91, 645, 776], "side": [68, 91, 349, 371, 375, 445, 645, 754, 775, 791, 804, 805, 818, 819, 825], "sorter": [68, 91, 645, 754], "ret_dtyp": [68, 91, 645, 754], "_arraywithstatist": [69, 101], "cumprod": [69, 92, 646, 840, 853, 866], "cumsum": [69, 92, 646, 828, 866], "einsum": [69, 92, 646], "equat": [69, 79, 92, 313, 368, 375, 445, 636, 646, 685, 758, 775, 804, 827, 869], "operand": [69, 79, 83, 219, 220, 221, 222, 224, 225, 226, 227, 228, 235, 236, 237, 239, 240, 242, 244, 245, 246, 253, 254, 255, 260, 261, 262, 263, 264, 272, 275, 277, 281, 282, 283, 284, 285, 286, 289, 290, 292, 334, 335, 358, 362, 371, 372, 374, 417, 631, 636, 646, 684, 690, 758, 759, 761, 762, 764, 804, 805, 823, 826, 831, 840], "contract": [69, 636, 646, 688, 758, 805], "seq": [69, 646, 758, 775], "ii": [69, 92, 646, 758, 819], "jk": [69, 646, 758, 805], "ik": [69, 646, 758, 805], "126": [69, 109, 278, 625, 631, 636, 646, 678, 758], "510": [69, 646, 758], "special": [69, 84, 96, 97, 101, 102, 219, 220, 221, 222, 224, 225, 226, 227, 228, 235, 236, 237, 239, 240, 242, 244, 245, 246, 253, 254, 255, 260, 261, 262, 263, 264, 267, 272, 275, 277, 281, 282, 283, 284, 285, 286, 289, 290, 292, 334, 335, 358, 371, 631, 636, 646, 684, 690, 759, 760, 761, 762, 763, 764, 765, 775, 776, 777, 778, 783, 790, 817, 820, 822, 823, 825, 827, 830, 831, 832, 835, 839, 841, 842, 843, 844, 846, 869, 870, 871], "arithmet": [69, 92, 233, 239, 272, 631, 646, 760, 840], "propag": [69, 233, 334, 335, 371, 631, 646, 759, 760, 761, 763, 764, 765, 838], "04999995": [69, 760], "freedom": [69, 92, 646, 763, 765, 824], "constitut": [69, 92, 646, 763, 765, 836, 848, 870], "commonli": [69, 92, 646, 763, 765, 832, 836, 838], "81649661": [69, 646, 763], "6666665": [69, 765, 851], "667": [69, 80, 239, 540, 591, 631, 633, 765], "_arraywithutil": [70, 101], "logic": [70, 93, 203, 239, 240, 266, 267, 268, 272, 275, 630, 631, 647, 766, 767, 817, 823, 827, 828, 829, 832, 836, 837, 838, 839, 840, 842, 843, 846, 850, 863], "AND": [70, 93, 229, 240, 266, 631, 647, 766], "OR": [70, 93, 232, 268, 275, 631, 647, 767, 818, 819, 838], "_wrap_funct": [71, 94, 825, 836, 837], "function_nam": [71, 94, 817, 844], "new_funct": [71, 94, 825], "add_ivy_array_instance_method": 71, "cl": [71, 94], "moduletyp": [71, 94, 862, 863, 864], "toi": [71, 94], "arrayexampl": 71, "hasattr": [71, 94], "_containerwithactiv": [72, 102], "dict_in": [72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 102], "queue": [72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 102, 585, 608, 633, 845, 851], "queue_load_s": [72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 102], "container_combine_method": [72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 102], "list_join": [72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 102], "queue_timeout": [72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 102, 585, 608, 633, 845], "print_limit": [72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 102], "key_length_limit": [72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 102], "print_ind": [72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 102], "print_line_spac": [72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 102], "ivyh": [72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 102], "default_key_color": [72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 102], "keyword_color_dict": [72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 102], "rebuild_child_contain": [72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 102], "types_to_iteratively_nest": [72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 102], "alphabetical_kei": [72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 102], "dynamic_backend": [72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 101, 102, 792, 793, 824, 845], "build_cal": [72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 102], "containerbas": [72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 826], "_static_gelu": 72, "key_chain": [72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 109, 110, 111, 112, 113, 114, 115, 116, 117, 127, 128, 130, 132, 133, 135, 136, 137, 138, 139, 140, 142, 144, 145, 146, 148, 151, 152, 153, 154, 162, 164, 167, 170, 171, 172, 174, 176, 179, 213, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 250, 251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 312, 313, 316, 317, 327, 328, 332, 333, 334, 335, 336, 337, 339, 341, 349, 350, 356, 358, 359, 360, 361, 362, 388, 389, 390, 391, 393, 394, 395, 397, 398, 399, 400, 401, 402, 410, 411, 412, 413, 417, 418, 421, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 435, 439, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 461, 462, 463, 467, 468, 470, 479, 481, 483, 484, 485, 487, 488, 489, 490, 491, 492, 493, 495, 497, 499, 500, 501, 502, 503, 504, 506, 508, 513, 514, 521, 522, 523, 524, 531, 533, 536, 537, 539, 540, 544, 545, 546, 547, 548, 551, 552, 555, 557, 559, 560, 561, 563, 564, 567, 575, 576, 590, 591, 592, 594, 596, 598, 599, 612, 618, 623, 649, 650, 651, 652, 653, 654, 657, 658, 659, 661, 662, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 683, 684, 685, 686, 687, 688, 689, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 737, 738, 739, 740, 742, 745, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767], "to_appli": [72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 109, 110, 111, 112, 113, 114, 115, 116, 117, 127, 128, 130, 132, 133, 135, 136, 137, 138, 139, 140, 142, 144, 145, 146, 148, 151, 152, 153, 154, 162, 164, 167, 170, 171, 172, 174, 176, 179, 213, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 250, 251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 312, 313, 316, 317, 327, 328, 332, 333, 334, 335, 336, 337, 339, 341, 349, 350, 356, 358, 359, 360, 361, 362, 388, 389, 390, 391, 393, 394, 395, 397, 398, 399, 400, 401, 402, 410, 411, 412, 413, 417, 418, 421, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 435, 439, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 461, 462, 463, 467, 468, 470, 479, 481, 483, 484, 485, 487, 488, 489, 490, 491, 492, 493, 495, 497, 499, 500, 501, 502, 503, 504, 506, 508, 513, 514, 521, 522, 523, 524, 531, 533, 536, 537, 539, 540, 544, 545, 546, 547, 548, 551, 552, 555, 557, 559, 560, 561, 563, 564, 567, 575, 576, 590, 591, 592, 594, 596, 598, 599, 612, 618, 623, 640, 649, 650, 651, 652, 653, 654, 657, 658, 659, 661, 662, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 683, 684, 685, 686, 687, 688, 689, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 730, 737, 738, 739, 740, 742, 745, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767], "prune_unappli": [72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 109, 110, 111, 112, 113, 114, 115, 116, 117, 127, 128, 130, 132, 133, 135, 136, 137, 138, 139, 140, 142, 144, 145, 146, 148, 151, 152, 153, 154, 162, 164, 167, 170, 171, 172, 174, 176, 179, 213, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 250, 251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 312, 313, 316, 317, 327, 328, 332, 333, 334, 335, 336, 337, 339, 341, 349, 350, 356, 358, 359, 360, 361, 362, 388, 389, 390, 391, 393, 394, 395, 397, 398, 399, 400, 401, 402, 410, 411, 412, 413, 417, 418, 421, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 435, 439, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 461, 462, 463, 467, 468, 470, 479, 481, 483, 484, 485, 487, 488, 489, 490, 491, 492, 493, 495, 497, 499, 500, 501, 502, 503, 504, 506, 508, 513, 514, 521, 522, 523, 524, 531, 533, 536, 537, 539, 540, 544, 545, 546, 547, 548, 551, 552, 555, 557, 559, 560, 561, 563, 564, 567, 575, 576, 590, 591, 592, 594, 596, 598, 599, 612, 618, 623, 640, 649, 650, 651, 652, 653, 654, 657, 658, 659, 661, 662, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 683, 684, 685, 686, 687, 688, 689, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 730, 737, 738, 739, 740, 742, 745, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767], "map_sequ": [72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 109, 110, 111, 112, 113, 114, 115, 116, 117, 127, 128, 130, 132, 133, 135, 136, 137, 138, 139, 140, 142, 144, 145, 146, 148, 151, 152, 153, 154, 162, 164, 167, 170, 171, 172, 174, 176, 179, 213, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 250, 251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 312, 313, 316, 317, 327, 328, 332, 333, 334, 335, 336, 337, 339, 341, 349, 350, 356, 358, 359, 360, 361, 362, 388, 389, 390, 391, 393, 394, 395, 397, 398, 399, 400, 401, 402, 410, 411, 412, 413, 417, 418, 421, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 435, 439, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 461, 462, 463, 467, 468, 470, 479, 481, 483, 484, 485, 487, 488, 489, 490, 491, 492, 493, 495, 497, 499, 500, 501, 502, 503, 504, 506, 508, 513, 514, 521, 522, 523, 524, 531, 533, 536, 537, 539, 540, 544, 545, 546, 547, 548, 551, 552, 555, 557, 559, 560, 561, 563, 564, 567, 575, 576, 590, 591, 592, 594, 596, 598, 599, 612, 618, 623, 649, 650, 651, 652, 653, 654, 657, 658, 659, 661, 662, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 683, 684, 685, 686, 687, 688, 689, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 737, 738, 739, 740, 742, 745, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767], "prune": [72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 109, 110, 111, 112, 113, 114, 115, 116, 117, 133, 135, 140, 142, 148, 152, 154, 167, 171, 172, 179, 213, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 250, 251, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 302, 303, 304, 305, 306, 308, 309, 310, 312, 333, 334, 335, 336, 337, 339, 341, 349, 350, 356, 358, 360, 361, 362, 398, 399, 400, 418, 451, 452, 453, 454, 455, 456, 457, 458, 461, 462, 463, 467, 468, 489, 491, 492, 493, 495, 500, 502, 503, 504, 506, 508, 521, 522, 523, 524, 533, 536, 537, 539, 540, 544, 545, 546, 547, 548, 551, 552, 555, 557, 559, 560, 561, 563, 564, 567, 575, 576, 590, 591, 592, 594, 596, 598, 599, 612, 618, 623, 640, 649, 650, 651, 652, 658, 659, 665, 666, 667, 672, 673, 674, 675, 676, 677, 679, 681, 683, 684, 690, 695, 696, 697, 698, 702, 705, 706, 707, 708, 709, 712, 713, 730, 731, 732, 733, 737, 738, 739, 740, 742, 745, 748, 749, 750, 751, 752, 756, 757, 760, 762, 763, 765, 766, 767, 773, 776, 827], "static_gelu": 72, "046": 72, "_static_hardswish": 72, "_static_leaky_relu": 72, "static_leaky_relu": 72, "38999999": [72, 79, 111, 294, 295, 366], "_static_log_softmax": 72, "static_log_softmax": 72, "371": [72, 112], "_static_mish": 72, "static_mish": 72, "30883577": [72, 113, 625], "28903052": [72, 113, 625], "10714479": [72, 113, 625], "_static_relu": 72, "static_relu": 72, "_static_sigmoid": 72, "static_sigmoid": 72, "2689414": [72, 115, 116, 625], "7310586": [72, 115, 116, 625], "88079703": [72, 115, 625], "62245935": [72, 115], "4750208": [72, 115], "_static_softmax": 72, "static_softmax": 72, "72844321": [72, 116], "19852395": [72, 116], "07303288": [72, 116], "_static_softplu": 72, "revert": [72, 117, 625], "static_softplu": 72, "53499615": 72, "42036411": 72, "948": [72, 117, 640, 717], "166": [72, 109, 625], "dictionari": [73, 90, 102, 211, 600, 616, 630, 633, 634, 751, 770, 772, 805, 823, 827, 828, 836, 840, 841, 851, 854], "asynchron": [73, 102, 869], "wait": [73, 102, 585, 633, 811, 817, 819, 827, 840], "arriv": [73, 102, 585, 633, 846], "cont_list_join": [73, 102], "whitespac": [73, 102], "indent": [73, 102, 851], "newlin": [73, 102, 831], "termin": [73, 102, 818, 819, 826, 833, 834, 848, 851], "constructor": [73, 102, 535, 633, 772, 788, 796, 828, 829, 831, 850], "kept": [73, 102, 639, 714, 715, 819, 839, 844], "encount": [73, 102, 791, 815, 817, 828, 832, 833, 843], "node": [73, 80, 102, 537, 547, 594, 640, 727, 728, 790, 799, 825, 826, 840, 859, 862, 863, 870], "alphabet": [73, 102], "__setitem__": [73, 377, 491, 823, 826, 850], "_cont_at_key_chains_input_as_dict": 73, "current_chain": 73, "ignore_key_error": 73, "_cont_at_key_chains_input_as_seq": 73, "_cont_call_static_method_with_flexible_arg": 73, "static_method": 73, "kw": 73, "self_idx": 73, "_cont_concat_unifi": 73, "_cont_get_dev": 73, "_cont_get_dtyp": 73, "_cont_get_shap": 73, "_cont_ivi": 73, "_cont_mean_unifi": 73, "_1": 73, "_cont_prune_key_chains_input_as_dict": 73, "return_cont": 73, "_cont_prune_key_chains_input_as_seq": 73, "_cont_slice_kei": 73, "key_slic": 73, "_cont_sum_unifi": 73, "_get_queue_item": 73, "cont_all_fals": 73, "assert_is_bool": 73, "cont_all_key_chain": 73, "include_empti": 73, "cont_all_tru": [73, 826, 851], "cont_as_bool": 73, "cont_assert_contains_sub_contain": 73, "sub_cont": 73, "screen": [73, 817, 818, 851], "cont_assert_contains_sub_structur": 73, "check_shap": [73, 797], "cont_assert_ident": 73, "check_typ": 73, "same_arrai": [73, 851], "arrays_equ": 73, "cont_assert_identical_structur": 73, "assert_and_assign": 73, "congruent": 73, "cont_at_key_chain": 73, "ignore_non": 73, "cont_at_kei": 73, "substr": 73, "cont_combin": 73, "duplic": [73, 377, 488, 556, 633, 640, 719, 824, 831, 837, 838, 841, 852, 875], "configur": [73, 211, 630, 640, 730, 818, 819, 825, 827, 828, 833, 834], "container_rightmost": 73, "cont_common_key_chain": 73, "cont_config": 73, "cont_contains_sub_contain": 73, "cont_contains_sub_structur": 73, "cont_copi": [73, 851], "cont_create_if_abs": 73, "noth": [73, 846, 875], "cont_cutoff_at_depth": 73, "depth_cutoff": 73, "summari": [73, 168, 541, 629, 633, 818, 819, 843], "cont_cutoff_at_height": 73, "height_cutoff": 73, "cont_deep_copi": [73, 851, 862], "cont_dev": 73, "cont_dev_str": 73, "cont_diff": [73, 851], "diff_kei": 73, "detect_key_diff": 73, "detect_value_diff": 73, "detect_shape_diff": 73, "container0": 73, "cont_dtyp": 73, "cont_duplicate_array_keychain": 73, "cont_find_sub_contain": 73, "sub_cont_to_find": 73, "cont_find_sub_structur": 73, "sub_struc_to_find": 73, "cont_flatten_key_chain": [73, 851], "above_height": [73, 851], "below_depth": [73, 851], "cont_format_key_chain": 73, "format_fn": 73, "cont_from_disk_as_hdf5": [73, 851], "h5_obj_or_filepath": 73, "slice_obj": 73, "disk": [73, 793, 851, 868], "h5py": 73, "filepath": [73, 647, 768, 769, 819, 822], "cont_from_disk_as_json": [73, 851], "json_filepath": 73, "cont_from_disk_as_pickl": [73, 851], "pickle_filepath": 73, "cont_from_flat_list": 73, "flat_list": 73, "hierarchi": [73, 809, 817, 842, 851, 865, 875], "cont_handle_inplac": 73, "prime": [73, 828], "overwritten": [73, 823, 824], "cont_has_kei": 73, "query_kei": 73, "somewher": [73, 827], "cont_has_key_chain": 73, "cont_ident": [73, 851], "cont_identical_array_shap": 73, "cont_identical_config": 73, "cont_identical_structur": 73, "cont_if_exist": 73, "cont_inplace_upd": 73, "cont_ivi": 73, "cont_key_chains_contain": 73, "sub_str": 73, "cont_list_stack": [73, 851], "cont_load": 73, "cont_map": [73, 826, 851], "func": [73, 96, 212, 363, 364, 365, 373, 538, 613, 616, 617, 619, 624, 630, 633, 634, 640, 730, 772, 817, 822, 823, 830, 832, 838], "cont_map_sub_cont": 73, "include_self": 73, "possibli": [73, 596, 633, 775, 843, 854], "cont_max_depth": 73, "cont_multi_map": 73, "map_nest": 73, "assert_ident": 73, "leftmost": [73, 640, 730], "cont_multi_map_in_funct": 73, "cont_num_arrai": 73, "cont_overwrite_at_key_chain": 73, "target_dict": 73, "return_dict": 73, "cont_prune_empti": 73, "keep_non": 73, "cont_prune_key_chain": 73, "key1": [73, 811, 852], "key2": [73, 811], "key3": 73, "cont_prune_key_from_key_chain": 73, "certain": [73, 125, 136, 137, 376, 453, 628, 817, 818, 819, 822, 828, 836, 842, 843, 846, 854, 862, 863, 864, 873], "cont_prune_kei": 73, "cont_prune_keys_from_key_chain": 73, "cont_reduc": 73, "cont_remove_key_length_limit": 73, "cont_remove_print_limit": 73, "cont_reshape_lik": 73, "leading_shap": 73, "cont_restructur": 73, "keep_orig": 73, "old": [73, 818, 824, 839], "cont_restructure_key_chain": 73, "keychain_map": 73, "cont_sav": 73, "cont_set_at_key_chain": 73, "cont_set_at_kei": 73, "cont_shap": [73, 635, 653], "cont_show": 73, "cont_show_sub_contain": 73, "sub_cont_or_keychain": 73, "cont_size_ordered_arrai": 73, "keychain": [73, 79, 297, 336, 461, 462, 463, 492], "cont_slice_kei": 73, "all_depth": 73, "cont_slice_via_kei": 73, "slice_kei": 73, "cont_sort_by_kei": 73, "cont_structural_diff": 73, "cont_to_dict": 73, "cont_to_disk_as_hdf5": [73, 851], "starting_index": 73, "max_batch_s": 73, "cont_to_disk_as_json": [73, 851], "cont_to_disk_as_pickl": [73, 851], "cont_to_flat_list": 73, "cont_to_iter": [73, 826], "leaf_keys_onli": 73, "cont_to_iterator_kei": 73, "cont_to_iterator_valu": 73, "cont_to_json": 73, "cont_to_nested_list": 73, "cont_to_raw": 73, "cont_trim_kei": 73, "cont_try_kc": 73, "cont_unifi": 73, "concatten": [73, 212, 630], "cont_unstack_cont": 73, "dim_siz": 73, "cont_update_config": 73, "cont_with_default_key_color": 73, "cont_with_entries_as_list": 73, "cont_with_ivy_backend": 73, "ivy_backend": [73, 841], "cont_with_key_length_limit": [73, 851], "cont_with_print_ind": [73, 851], "cont_with_print_limit": [73, 851], "cont_with_print_line_spac": 73, "h5_file_s": 73, "shuffle_h5_fil": 73, "split_cont": 73, "_is_json": 73, "_repr": 73, "_containerwithconvers": [74, 102], "_static_to_ivi": 74, "_static_to_n": 74, "_containerwithcr": [75, 102], "_static_arang": 75, "_static_asarrai": 75, "_static_copy_arrai": 75, "_static_empti": 75, "_static_empty_lik": 75, "_static_ey": 75, "n_row": [75, 79, 131, 146, 327, 368, 375, 436, 628], "n_col": [75, 79, 131, 146, 327, 368, 628], "_static_from_dlpack": 75, "_static_ful": 75, "_static_full_lik": 75, "static_full_lik": 75, "2324": [75, 135, 628], "234": [75, 78, 135, 158, 241, 292, 628, 629, 631, 635, 659, 775], "_static_linspac": 75, "_static_logspac": 75, "static_logspac": 75, "15443469": [75, 137], "64158883": [75, 137], "_static_meshgrid": 75, "_static_native_arrai": 75, "_static_one_hot": 75, "static_one_hot": 75, "_static_on": 75, "_static_ones_lik": 75, "_static_tril": 75, "_static_triu": 75, "_static_zero": 75, "_static_zeros_lik": 75, "frombuff": [75, 628], "expos": [75, 133, 541, 628, 633, 811, 827, 848, 852, 858], "x00": [75, 133, 628], "xf0": [75, 133, 628], "x01": [75, 133, 628], "x02": [75, 133, 628], "x03": [75, 133, 628], "x04": [75, 133, 628], "x05": [75, 133], "5443469": [75, 137, 628], "static_frombuff": 75, "static_triu_indic": 75, "triu_indic": [75, 628], "_containerwithdatatyp": [76, 102], "_static_astyp": 76, "718": [76, 78, 151, 268, 629], "618": [76, 78, 151, 268, 629], "static_astyp": 76, "_static_broadcast_arrai": 76, "static_broadcast_arrai": 76, "_static_broadcast_to": 76, "static_broadcast_to": 76, "_static_can_cast": 76, "from_": [76, 154, 629], "static_can_cast": 76, "_static_default_complex_dtyp": 76, "complex_dtyp": [76, 157, 180, 629], "_static_default_float_dtyp": 76, "float_dtyp": [76, 159, 182, 629], "_static_dtyp": 76, "_static_finfo": 76, "inquir": [76, 164, 167], "static_finfo": 76, "55040e": [76, 164, 629], "7976931348623157e": [76, 164, 629], "308": [76, 164, 629, 775, 843], "_static_function_supported_dtyp": 76, "_static_function_unsupported_dtyp": 76, "_static_iinfo": 76, "1800": [76, 167, 629], "1084": 76, "40000": 76, "static_iinfo": 76, "2147483648": [76, 79, 167, 377, 491, 629], "2147483647": [76, 167, 629], "_static_is_bool_dtyp": 76, "dtype_in": [76, 149, 150, 163, 169, 170, 171, 172, 173, 174, 175, 176, 191, 629], "_static_is_complex_dtyp": 76, "is_complex_dtyp": [76, 629, 844], "roughli": [76, 818, 822, 872], "static_is_complex_dtyp": 76, "_static_is_float_dtyp": 76, "static_is_float_dtyp": 76, "_static_is_int_dtyp": 76, "_static_is_uint_dtyp": 76, "_static_result_typ": 76, "static_result_typ": 76, "broadcats": [76, 152], "_containerwithdevic": [77, 102], "_static_dev": 77, "static_dev": 77, "_static_to_devic": 77, "static_to_devic": 77, "contaion": [77, 196], "_containerwithelementwis": [78, 102], "_static_ab": 78, "static_ab": 78, "_static_aco": 78, "static_aco": 78, "_static_acosh": 78, "static_acosh": 78, "_static_add": 78, "static_add": [78, 106], "_static_asin": 78, "static_asin": 78, "524": [78, 224, 631], "412": [78, 83, 224, 631, 640, 717], "_static_asinh": 78, "static_asinh": 78, "_static_atan": 78, "static_atan": 78, "_static_atan2": 78, "static_atan2": 78, "915": [78, 227, 631], "983": [78, 227, 631], "978": [78, 227, 631], "696": [78, 88, 227, 631, 739], "993": [78, 227, 631], "_static_atanh": 78, "static_atanh": 78, "_static_bitwise_and": 78, "static_bitwise_and": 78, "_static_bitwise_invert": 78, "static_bitwise_invert": 78, "_static_bitwise_left_shift": 78, "_static_bitwise_or": 78, "static_bitwise_or": 78, "_static_bitwise_right_shift": 78, "static_bitwise_right_shift": 78, "_static_bitwise_xor": 78, "static_bitwise_xor": 78, "_static_ceil": 78, "static_ceil": 78, "_static_co": 78, "static_co": 78, "_static_cosh": 78, "static_cosh": 78, "_static_deg2rad": 78, "static_deg2rad": 78, "0262": [78, 238, 278, 631], "873": [78, 238, 278, 631], "_static_divid": 78, "static_divid": 78, "_static_equ": 78, "static_equ": 78, "_static_erf": 78, "static_erf": 78, "27632612": [78, 241], "934008": [78, 241, 631], "99999928": [78, 241], "91903949": [78, 241], "_static_exp": 78, "static_exp": 78, "59814835": [78, 242, 631], "4131622": [78, 242], "_static_expm1": 78, "thefunct": [78, 241], "areal": 78, "static_expm1": 78, "71828175": [78, 242, 631], "38905621": [78, 242, 631], "59815216": 78, "_static_floor": 78, "static_floor": 78, "_static_floor_divid": 78, "static_floor_divid": 78, "_static_great": 78, "static_great": 78, "_static_greater_equ": 78, "static_greater_equ": 78, "_static_isfinit": 78, "999999999999": [78, 253, 631], "static_isfinit": 78, "_static_isinf": 78, "static_isinf": 78, "_static_isnan": 78, "static_isnan": 78, "_static_isr": 78, "0j": [78, 79, 141, 142, 220, 221, 222, 225, 228, 237, 242, 244, 256, 260, 262, 279, 283, 285, 286, 290, 337, 371, 628, 631, 636, 684], "23j": [78, 79], "9j": [78, 79], "static_isr": 78, "_static_lcm": 78, "1080": [78, 257], "1550": [78, 257], "130": [78, 257], "_static_less": 78, "static_less": 78, "_static_less_equ": 78, "static_less_equ": 78, "_static_log": 78, "static_log": 78, "_static_log10": 78, "static_log10": 78, "898": [78, 261, 631], "0414": [78, 261, 631], "_static_log1p": 78, "static_log1p": 78, "_static_log2": 78, "static_log2": 78, "_static_logaddexp": 78, "static_logaddexp": 78, "_static_logical_and": 78, "static_logical_and": 78, "_static_logical_not": 78, "static_logical_not": 78, "_static_logical_or": 78, "static_logical_or": 78, "_static_logical_xor": 78, "static_logical_xor": 78, "_static_maximum": 78, "static_maximum": 78, "_static_minimum": 78, "static_minimum": 78, "_static_multipli": 78, "static_multipli": 78, "_static_neg": 78, "static_neg": 78, "_static_not_equ": 78, "static_not_equ": 78, "_static_posit": 78, "static_posit": 78, "_static_pow": 78, "static_pow": 78, "_static_rad2deg": 78, "static_rad2deg": 78, "5160": 78, "10300": [78, 278, 631], "15500": 78, "20600": 78, "2860": [78, 278], "_static_reciproc": 78, "recirpoc": [78, 280], "static_reciproc": 78, "_static_remaind": 78, "static_remaind": 78, "_static_round": 78, "thevfunct": 78, "527": [78, 282, 631], "static_round": 78, "301": [78, 282, 631], "_static_sign": 78, "static_sign": 78, "_static_sin": 78, "static_sin": 78, "757": [78, 284, 631], "959": [78, 244, 284, 631], "279": [78, 284, 374, 396, 406, 539, 631, 633], "_static_sinh": 78, "static_sinh": 78, "835": [78, 285], "347": [78, 285], "721": [78, 285], "_static_sqrt": 78, "static_sqrt": 78, "_static_squar": 78, "static_squar": 78, "_static_subtract": 78, "static_subtract": 78, "_static_tan": 78, "static_tan": 78, "_static_tanh": 78, "static_tanh": 78, "995": [78, 290, 631], "9999": 78, "_static_trapz": 78, "static_trapz": 78, "_static_trunc": 78, "static_trunc": 78, "_static_trunc_divid": 78, "75j": [78, 223, 252], "01317055": [78, 223], "05634501": [78, 223], "115": [78, 223, 278, 631], "3461759": [78, 223], "524111": [78, 223], "644": [78, 224, 631, 852], "305": [78, 83, 224, 631], "351": [78, 238, 278], "00613": [78, 238], "0154": [78, 238], "403": [78, 242], "428772": [78, 242], "649": [78, 244], "220": [78, 244], "865": [78, 244], "metho": [78, 251, 263], "imaginari": [78, 101, 111, 114, 117, 141, 142, 220, 221, 222, 237, 239, 240, 242, 244, 252, 272, 274, 275, 282, 285, 286, 290, 337, 371, 374, 375, 418, 429, 625, 628, 631, 643, 746, 830], "4j": [78, 252, 374, 418, 592, 631, 633], "7j": [78, 79, 256, 279, 337, 371, 631], "956": [78, 262], "08746284": [78, 265], "32192809": [78, 265], "nuner": [78, 272], "413": [78, 278], "335": [78, 79, 279, 337], "345j": [78, 79, 279, 337], "static_angl": 78, "static_exp2": 78, "static_fmin": 78, "static_gcd": 78, "static_imag": 78, "static_logaddexp2": 78, "static_nan_to_num": 78, "static_r": 78, "_containerwithactivationexperiment": [79, 102], "_static_celu": 79, "formlat": 79, "static_celu": 79, "_static_elu": 79, "static_elu": 79, "_static_hardshrink": 79, "hard": [79, 296, 819, 850, 869], "shrinkag": [79, 296, 306, 377, 490], "_static_hardsilu": 79, "20833333": [79, 297, 366], "29166666": [79, 297, 366], "66666669": [79, 102, 297, 366, 380, 506, 616, 634], "66666663": [79, 136, 297, 366, 628], "_static_hardtanh": 79, "3899": 79, "_static_scaled_tanh": 79, "931": 79, "71587813": 79, "88367474": 79, "00376701": [79, 303], "2285642": 79, "99999881": 79, "49999905": 79, "_static_silu": 79, "static_silu": 79, "27777028": [79, 305], "23947507": [79, 305], "0900332": [79, 305], "_static_softshrink": 79, "_static_tanhshrink": 79, "36634541": [79, 308], "02005103": [79, 308], "00262468": [79, 308], "_static_threshold": 79, "389999": [79, 298], "19722462": [79, 299], "84729779": [79, 299], "31326163": [79, 300], "46328258": [79, 300], "51301527": [79, 300], "79813886": [79, 300], "simplywrap": [79, 303], "54939651": [79, 303], "09999998": [79, 303, 614, 634], "09999999": [79, 303], "08336546": [79, 303], "0379949": [79, 303], "22856998": [79, 304], "42028043": [79, 304], "31868932": [79, 304], "static_logit": 79, "static_logsigmoid": 79, "34115386": 79, "64439666": 79, "24115384": 79, "55435526": 79, "07888974": 79, "00741899": 79, "26328245": 79, "00012302": 79, "static_prelu": 79, "static_relu6": 79, "static_selu": 79, "static_thresholded_relu": 79, "_containerwithconversionexperiment": [79, 102], "_containerwithcreationexperiment": [79, 102], "_static_trilu": 79, "blackman": [79, 311, 368], "00770143e": [79, 311], "49229857e": [79, 311], "hamming_window": [79, 368], "ham": [79, 313, 368], "4180": [79, 313], "8180": [79, 313], "hann_window": [79, 368], "hann": [79, 314, 368], "7500": [79, 314], "3455": [79, 314], "9045": [79, 314], "kaiser_bessel_derived_window": [79, 368], "suitabl": [79, 316, 317, 368, 645, 754, 777, 818, 819, 826, 844, 869], "spectral": [79, 316, 317, 368], "analysi": [79, 316, 317, 368, 869, 870], "kaiser": [79, 311, 316, 317, 368], "70710677": [79, 316, 504, 506], "18493208": [79, 316, 368], "9827513": [79, 316, 368], "kaiser_window": [79, 368], "static_kaiser_window": [79, 317], "2049": [79, 317], "8712": [79, 317], "0367": [79, 317, 368], "7753": [79, 317], "static_blackman_window": 79, "static_eye_lik": 79, "static_hamming_window": 79, "static_hann_window": 79, "static_hann": 79, "static_kaiser_bessel_derived_window": 79, "static_mel_weight_matrix": 79, "static_polyv": 79, "static_tril_indic": 79, "static_unsorted_segment_mean": 79, "static_unsorted_segment_min": 79, "static_unsorted_segment_sum": 79, "static_vorbis_window": 79, "vorbis_window": [79, 368], "vorbi": [79, 332, 368], "38268343": [79, 332, 636, 672], "92387953": [79, 332], "14943586": [79, 332, 368], "51644717": [79, 332], "85631905": [79, 332], "98877142": [79, 332], "tril_indic": [79, 368], "_containerwithdata_typeexperiment": [79, 102], "_containerwithdeviceexperiment": [79, 102], "_containerwithelementwiseexperiment": [79, 102], "0003": [79, 333, 636, 675, 775, 778], "0006": [79, 333, 361], "2345j": [79, 337], "5772": [79, 341], "9635": [79, 341], "4228": [79, 341], "9228": [79, 341], "57299206e": [79, 342, 343], "67773480e": [79, 342, 343], "20904985e": [79, 342, 343], "84270084": [79, 342, 343, 371], "99532223": [79, 342, 343], "99997795": [79, 342, 343], "mantissa": [79, 347, 371, 828], "frist": [79, 348, 371], "coord": [79, 348], "6055": [79, 349], "160": [79, 351], "10240": [79, 351], "60000038": [79, 352, 371, 636, 692], "0707": [79, 358, 371], "0579": [79, 358, 371], "static_allclos": 79, "static_amax": 79, "static_amin": 79, "static_binar": 79, "static_conj": 79, "static_copysign": 79, "static_count_nonzero": 79, "static_diff": 79, "static_digamma": 79, "57721537": 79, "96351004": 79, "static_erfc": 79, "15729921": 79, "00467773": [79, 342, 371], "static_erfinv": 79, "static_fix": 79, "static_float_pow": 79, "static_fmax": 79, "static_fmod": 79, "static_frexp": 79, "static_gradi": 79, "static_hypot": 79, "static_isclos": 79, "static_ldexp": 79, "static_lerp": 79, "90000057": [79, 352, 371], "70000076": [79, 352, 371], "55000019": [79, 352, 371], "05000019": [79, 352, 371], "static_modf": 79, "static_nansum": 79, "static_nextaft": 79, "static_signbit": 79, "static_sinc": 79, "636": 79, "090": 79, "070": 79, "057": 79, "static_sparsify_tensor": 79, "static_xlogi": 79, "static_zeta": 79, "0244": [79, 361], "_containerwithgeneralexperiment": [79, 102], "_static_reduc": 79, "static_reduc": 79, "_containerwithgradientsexperiment": [79, 102], "_containerwithimageexperiment": [79, 102], "_containerwithlayersexperiment": [79, 102], "_static_fft": 79, "static_fft": 79, "_static_sliding_window": 79, "673": [79, 396], "0507": [79, 396], "79711437": [79, 374, 396, 406], "94867325": [79, 374, 396, 406], "74089146": [79, 374, 396, 406], "25980937": [79, 374, 396, 406], "64958102": [79, 374, 396, 406], "2442648": [79, 374, 396, 406], "247306": [79, 408], "908323j": [79, 408], "494955": [79, 408], "90395j": [79, 408], "static_adaptive_avg_pool1d": 79, "static_adaptive_avg_pool2d": 79, "static_adaptive_max_pool2d": 79, "static_adaptive_max_pool3d": 79, "static_avg_pool1d": 79, "static_avg_pool2d": 79, "static_avg_pool3d": 79, "static_dct": 79, "253": [79, 285, 631], "515": [79, 642, 739], "467": 79, "static_dft": 79, "static_embed": 79, "static_idct": 79, "93732834": [79, 374, 396], "75048852": [79, 374, 396], "29723358": [79, 374, 406], "6950531": 79, "93914509": 79, "88008738": 79, "18951225": 79, "06697273": [79, 374, 406], "57439804": 79, "68861485": [79, 374, 406], "41308832": [79, 374, 406], "0700836": 79, "2449036": 79, "6711426": 79, "514": 79, "501709": 79, "4924011": 79, "static_ifft": 79, "static_ifftn": 79, "static_interpol": 79, "static_max_pool1d": 79, "static_max_pool2d": 79, "max_pool2dd": 79, "static_max_pool3d": 79, "static_max_unpool1d": 79, "static_rfft": 79, "static_rfftn": 79, "static_rnn": 79, "step_funct": [79, 374, 420], "initial_st": [79, 374, 420, 635, 660], "go_backward": [79, 374, 420], "unrol": [79, 374, 420, 635, 661, 848, 851], "input_length": [79, 374, 420], "zero_output_for_mask": [79, 374, 420], "return_all_output": [79, 374, 420], "rnn": [79, 374, 869], "tempor": [79, 374, 420], "state_s": [79, 374, 420], "while_loop": [79, 374, 420, 627], "otput": [79, 374, 420], "funciton": [79, 374, 420], "static_stft": 79, "_containerwithlinearalgebraexperiment": [79, 102], "933034": [79, 375, 425], "eigenvealu": [79, 428, 671], "xx": [79, 428, 430, 671], "37228107": [79, 428, 671], "3722816": [79, 428, 671], "8245648": [79, 428, 671], "41597357": [79, 428, 671], "56576747": [79, 428, 671], "9093767": [79, 428, 671], "56155": [79, 429], "82842": [79, 429], "450": [79, 435], "static_adjoint": 79, "static_batched_out": 79, "static_cond": 79, "static_diagflat": 79, "static_dot": 79, "static_eig": 79, "static_eigh_tridiagon": 79, "static_eigv": 79, "static_higher_order_mo": 79, "static_initialize_tuck": 79, "static_kron": 79, "kroneck": [79, 375, 434, 435], "static_make_svd_non_neg": 79, "static_matrix_exp": 79, "static_mode_dot": 79, "static_multi_dot": 79, "static_multi_mode_dot": 79, "static_partial_tuck": 79, "static_svd_flip": 79, "static_tensor_train": 79, "static_truncated_svd": 79, "static_tt_matrix_to_tensor": 79, "tt_matrix": [79, 375, 449], "output_tensor": [79, 99, 375, 449], "static_tuck": 79, "_containerwithlossesexperiment": [79, 102], "_static_hinge_embedding_loss": 79, "_static_huber_loss": 79, "static_huber_loss": 79, "0575": [79, 452], "_static_kl_div": 79, "_static_l1_loss": 79, "static_l1_loss": 79, "_static_log_poisson_loss": 79, "static_log_poisson_loss": 79, "_static_poisson_nll_loss": 79, "06446016": 79, "55611551": 79, "30244565": [79, 456], "_static_smooth_l1_loss": 79, "static_smooth_l1_loss": 79, "_static_soft_margin_loss": 79, "3890561": [79, 455], "413159": [79, 455], "06429195": [79, 456], "43333333": [79, 457], "10666666": [79, 457], "_containerwithmanipulationexperiment": [79, 102], "_static_fill_diagon": 79, "_static_put_along_axi": 79, "_static_tak": 79, "69999981": [79, 306, 366, 377, 467, 491], "_static_trim_zero": 79, "_static_unflatten": 79, "_static_unique_consecut": 79, "ary1": [79, 377, 461, 462, 463], "ary2": [79, 377, 461, 462, 463], "broadcast_shap": [79, 105, 377, 775, 777], "static_concat_from_sequ": [79, 468], "30192195": [79, 480], "static_as_strid": 79, "static_atleast_1d": 79, "static_atleast_2d": 79, "static_atleast_3d": 79, "static_broadcast_shap": 79, "static_column_stack": 79, "static_dsplit": 79, "static_dstack": 79, "static_expand": 79, "static_flatten": 79, "static_fliplr": 79, "static_flipud": 79, "static_fold": 79, "static_heavisid": 79, "static_hsplit": 79, "static_hstack": 79, "static_i0": 79, "static_matric": 79, "static_moveaxi": 79, "static_pad": 79, "static_partial_fold": 79, "static_partial_tensor_to_vec": 79, "static_partial_unfold": 79, "static_partial_vec_to_tensor": 79, "static_rot90": 79, "static_soft_threshold": 79, "static_take_along_axi": 79, "static_top_k": 79, "static_unfold": 79, "static_vsplit": 79, "static_vstack": 79, "_containerwithnormsexperiment": [79, 102], "16903085": [79, 504, 506], "50709254": [79, 504, 506], "84515423": [79, 504, 506], "44183609": [79, 504, 506], "56807494": [79, 504, 506], "69431382": [79, 504, 506], "static_batch_norm": 79, "static_group_norm": 79, "static_instance_norm": 79, "static_l1_norm": 79, "static_l2_norm": 79, "static_lp_norm": 79, "12500000": 79, "37500000": 79, "62500000": 79, "27500000": 79, "35000000": 79, "42500000": 79, "0000000": 79, "5000000": 79, "2500000": 79, "_containerwithrandomexperiment": [79, 102], "43643127": [79, 509], "32325703": [79, 509], "24031169": [79, 509], "34251311": [79, 509], "31692529": [79, 509], "3405616": [79, 509], "5319725": [79, 509], "22458365": [79, 509], "24344385": [79, 509], "26588406": [79, 509], "61075421": [79, 509], "12336174": [79, 509], "51142915": [79, 509], "25041268": [79, 509], "23815817": [79, 509], "64042903": [79, 509], "25763214": [79, 509], "10193883": [79, 509], "31624692": [79, 509], "46567987": [79, 509], "21807321": [79, 509], "37677699": [79, 509], "39914594": [79, 509], "22407707": [79, 509], "static_bernoulli": 79, "static_beta": 79, "static_dirichlet": 79, "static_gamma": 79, "static_poisson": 79, "_containerwithsearchingexperiment": [79, 102], "static_unravel_index": 79, "_containerwithsetexperiment": [79, 102], "_containerwithsortingexperiment": [79, 102], "invert_permut": [79, 384], "static_invert_permut": 79, "static_lexsort": [79, 91], "_containerwithstatisticalexperiment": [79, 102], "_static_cummax": 79, "static_cummax": 79, "_static_cummin": 79, "static_cummin": 79, "_static_nanmin": 79, "static_nanmin": 79, "func_nam": [79, 524, 817, 830, 831, 836, 840], "static_bincount": 79, "static_corrcoef": 79, "static_cov": [79, 386, 521], "static_histogram": 79, "static_igamma": 79, "static_lgamma": 79, "static_median": 79, "static_nanmean": 79, "static_nanmedian": 79, "static_nanprod": 79, "static_quantil": 79, "_containerwithutilityexperiment": [79, 102], "static_optional_get_el": 79, "_containerwithgener": [80, 102], "_static_all_equ": 80, "static_all_equ": 80, "_static_array_equ": 80, "a0": [80, 377, 467], "static_array_equ": 80, "_static_assert_supports_inplac": 80, "_static_clip_matrix_norm": 80, "static_clip_matrix_norm": 80, "849": [80, 539, 633], "_static_clip_vector_norm": 80, "static_clip_vector_norm": 80, "_static_einops_rearrang": 80, "static_einops_rearrang": 80, "_static_einops_reduc": 80, "static_einops_reduc": 80, "29333329": [80, 545, 633], "53000069": [80, 545, 633], "39666676": [80, 545, 633], "20666695": [80, 545, 633], "_static_einops_repeat": 80, "static_einops_repeat": 80, "_static_exist": 80, "_static_fourier_encod": 80, "static_fourier_encod": 80, "classivi": [80, 644, 749], "89858720e": 80, "79717439e": 80, "_static_gath": 80, "static_gath": 80, "_static_gather_nd": 80, "static_gather_nd": 80, "_static_get_num_dim": 80, "static_get_num_dim": 80, "_static_has_nan": 80, "leafwis": 80, "static_has_nan": 80, "_static_inplace_decr": 80, "_static_inplace_incr": 80, "_static_inplace_upd": 80, "_static_is_arrai": 80, "static_is_arrai": 80, "_static_is_ivy_arrai": 80, "static_is_ivy_arrai": 80, "_static_is_native_arrai": 80, "static_is_native_arrai": 80, "_static_scatter_flat": 80, "_static_scatter_nd": 80, "static_scatter_nd": 80, "_static_s": 80, "static_s": 80, "_static_stable_divid": 80, "22222222": 80, "11111111": 80, "857": [80, 591, 633], "444": 80, "_static_stable_pow": 80, "00012": [80, 592, 633], "00016": [80, 81, 592, 620, 633, 634], "00001": [80, 592, 633, 775], "00032": [80, 592], "00256": [80, 592], "1679638": [80, 592], "395": [80, 592], "16777383": [80, 592], "_static_supports_inplace_upd": 80, "_static_to_list": 80, "static_to_list": 80, "_static_to_numpi": 80, "static_to_numpi": 80, "_static_to_scalar": 80, "static_to_scalar": 80, "_static_value_is_nan": 80, "452": 80, "static_value_is_nan": 80, "833": [80, 540], "items": [80, 101, 633], "static_isin": 80, "static_items": 80, "static_strid": 80, "425": [80, 612], "_containerwithgradi": [81, 102], "_static_stop_gradi": 81, "static_stop_gradi": 81, "976": [81, 290, 614, 631, 634], "49e": [81, 614, 634], "74e": [81, 614, 634], "95e": [81, 614, 634], "024": [81, 614, 634], "096": [81, 614, 634], "216": [81, 84, 614, 634, 691], "626": [81, 614, 634], "en": [81, 614, 615, 634, 827], "wikipedia": [81, 614, 615, 634], "wiki": [81, 614, 615, 634], "stochastic_gradient_desc": [81, 614, 615, 634], "01099": [81, 615], "01003": [81, 615, 634], "01015": [81, 615, 634], "99936122": [81, 615, 634], "99936116": [81, 615, 634], "99936128": [81, 615, 634], "99936104": [81, 615, 634], "w_new": [81, 618, 634], "708": [81, 620, 634], "445": [81, 620, 634], "6e": [81, 620, 634], "00036": [81, 620, 634], "00049": [81, 620, 634], "layerwis": [81, 621, 634], "01132035": [81, 621, 634], "22264051": [81, 621, 634], "2056601": [81, 621, 634], "1324538": [81, 621, 634], "56490755": [81, 621, 634], "96622658": [81, 621, 634], "90848625": [81, 621, 634], "93616199": [81, 621, 634], "77232409": [81, 621, 634], "_containerwithimag": [82, 102], "_containerwithlay": [83, 102], "_static_conv1d": 83, "static_conv1d": 83, "_static_conv1d_transpos": 83, "static_conv1d_transpos": 83, "112": [83, 636, 646, 650, 681, 758], "_static_conv2d": 83, "ey": [83, 628, 635, 651, 657, 846, 853], "static_conv2d": 83, "_static_conv2d_transpos": 83, "static_conv2d_transpos": 83, "_static_conv3d": 83, "fdfh": [83, 653], "static_conv3d": 83, "_static_conv3d_transpos": 83, "static_conv3d_transpos": 83, "_static_depthwise_conv2d": 83, "inp": [83, 635, 657], "static_depthwise_conv2d": 83, "_static_dropout": 83, "static_dropout": 83, "_static_dropout1d": 83, "static_dropout1d": 83, "_static_dropout2d": 83, "_static_dropout3d": 83, "_static_linear": 83, "278": [83, 635, 658, 659], "static_linear": 83, "195": 83, "_static_lstm_upd": 83, "_static_multi_head_attent": 83, "_static_reduce_window": 83, "_static_scaled_dot_product_attent": 83, "static_scaled_dot_product_attent": 83, "39999962": [83, 635, 658, 659], "19999695": [83, 659], "11600018": [83, 659], "88399887": [83, 659], "196": [83, 635, 659], "306": [83, 635, 659], "19999981": [83, 296, 309, 366, 374, 418, 635, 658, 665], "59249449": [83, 635, 665], "68226194": [83, 635, 665], "19603825": [83, 635, 665], "9960382": [83, 635, 665], "26894283": [83, 635, 665], "40236187": [83, 635, 665], "39999437": [83, 635, 665], "59999037": [83, 635, 665], "35046196": [83, 635, 665], "54282808": [83, 635, 665], "39989519": [83, 635, 665], "5998764": [83, 635, 665], "_containerwithlinearalgebra": [84, 102], "_static_choleski": 84, "static_choleski": 84, "577": [84, 636, 666], "707": [84, 636, 666], "static_rol": [84, 86], "_static_cross": 84, "static_cross": 84, "_static_det": 84, "_static_diag": 84, "_static_diagon": 84, "static_diagon": 84, "_static_eigh": 84, "_static_eigvalsh": 84, "static_eigvalsh": 84, "51572949": [84, 636, 673], "17091519": [84, 636, 673], "3448143": [84, 636, 673], "35898387e": [84, 636, 673], "46410179e": [84, 636, 673], "_static_inn": 84, "static_inn": 84, "_static_inv": 84, "static_inv": 84, "_static_matmul": 84, "matul": 84, "static_matmul": 84, "_static_matrix_norm": 84, "deimens": 84, "static_matrix_norm": 84, "_static_matrix_pow": 84, "_static_matrix_rank": 84, "static_matrix_rank": 84, "_static_matrix_transpos": 84, "static_matrix_transpos": 84, "_static_out": 84, "n1": [84, 138, 628], "n2": [84, 138, 628], "static_out": [84, 681], "_static_pinv": 84, "static_pinv": 84, "0426": 84, "0964": 84, "0605": 84, "1368": 84, "_static_qr": 84, "static_qr": 84, "31622777": [84, 636, 683], "9486833": [84, 636, 683], "4472136": [84, 636, 683], "89442719": [84, 636, 683], "16227766": [84, 636, 683], "42718872": [84, 636, 683], "63245553": [84, 636, 683], "47213595": [84, 636, 683], "81377674": [84, 636, 683], "_static_slogdet": 84, "static_slogdet": 84, "6931472": 84, "0986123": 84, "_static_solv": 84, "_static_svd": 84, "static_svd": 84, "au": 84, "aS": 84, "avh": 84, "bvh": 84, "_static_svdv": 84, "_static_tensordot": 84, "_static_tensorsolv": 84, "_static_trac": 84, "static_trac": 84, "_static_vand": 84, "static_vand": 84, "343": [84, 282, 631, 691], "729": [84, 691, 852], "_static_vecdot": 84, "_static_vector_norm": 84, "static_vector_norm": 84, "77359247": [84, 693], "_static_vector_to_skew_symmetric_matrix": 84, "09861231": [84, 636, 684], "static_general_inner_product": 84, "3475602": [84, 686], "93765765": [84, 686], "58776021": [84, 686], "10416126": [84, 686], "80644298": [84, 686], "87024701": [84, 686], "48127627": [84, 686], "79101127": [84, 686], "98288572": [84, 686], "68917423": [84, 686], "_containerwithloss": [85, 102], "_static_binary_cross_entropi": 85, "static_binary_cross_entropi": 85, "511": 85, "223": 85, "357": 85, "_static_cross_entropi": 85, "static_cross_entropi": 85, "20397282": 85, "83258148": 85, "60943794": [85, 636, 684], "_static_sparse_cross_entropi": 85, "static_sparse_cross_entropi": 85, "36354783": [85, 637, 695], "14733934": [85, 637, 695], "17027519": [85, 696], "53647931": [85, 696], "53647929": [85, 697], "1702752": [85, 697], "_containerwithmanipul": [86, 102], "_static_clip": 86, "static_clip": 86, "_static_concat": 86, "_static_constant_pad": 86, "static_constant_pad": 86, "_static_expand_dim": 86, "static_expand_dim": 86, "container_axi": [86, 638, 701], "_static_flip": 86, "static_flip": 86, "_static_permute_dim": 86, "static_permute_dim": 86, "_static_repeat": 86, "static_repeat": 86, "_static_reshap": 86, "static_reshap": 86, "_static_rol": 86, "positivclip": 86, "_static_split": 86, "static_split": 86, "_static_squeez": 86, "static_squeez": 86, "_static_stack": 86, "leavv": 86, "static_stack": 86, "_static_swapax": 86, "_static_til": 86, "static_til": 86, "_static_unstack": 86, "static_unstack": 86, "_static_zero_pad": 86, "repreat": [86, 704], "_containerwithnorm": [87, 102], "34198591": [87, 641, 736], "04274819": [87, 641, 736], "29923761": [87, 641, 736], "24053511": [87, 641, 736], "62221265": [87, 736], "20277636": [87, 736], "41943574": [87, 736], "83710337": [87, 736], "_containerwithrandom": [88, 102], "_static_multinomi": 88, "_static_randint": 88, "static_randint": 88, "_static_random_norm": 88, "static_random_norm": 88, "651": 88, "_static_random_uniform": 88, "static_random_uniform": 88, "481": 88, "0999": 88, "_static_shuffl": 88, "static_shuffl": 88, "431": [88, 739], "274": [88, 739], "_containerwithsearch": [89, 102], "_static_argmax": 89, "static_argmax": 89, "_static_argmin": 89, "static_argmin": 89, "_static_argwher": 89, "static_argwher": 89, "_static_nonzero": 89, "_static_wher": 89, "static_wher": 89, "_containerwithset": [90, 102], "_static_unique_al": 90, "static_unique_al": 90, "_static_unique_count": 90, "static_unique_count": 90, "_static_unique_invers": 90, "static_unique_invers": 90, "_static_unique_valu": 90, "_containerwithsort": [91, 102], "_static_argsort": 91, "static_argsort": 91, "_static_searchsort": 91, "_static_sort": 91, "static_sort": 91, "static_msort": 91, "_containerwithstatist": [92, 102], "_static_cumprod": 92, "static_cumprod": 92, "_static_cumsum": 92, "static_cumsum": 92, "_static_min": 92, "_static_prod": 92, "static_prod": 92, "11000001": [92, 762], "23100001": [92, 762], "30800003": [92, 646, 762], "_static_sum": 92, "_static_var": 92, "static_var": 92, "12666667": [92, 646, 765], "11555555": [92, 646, 765], "rtype": [92, 758, 804], "respectv": [92, 763], "81649649": [92, 763], "94280904": [92, 763], "509902": [92, 646, 763], "2472192": [92, 763], "44948983": [92, 763], "41421354": [92, 763], "6666667": [92, 765], "_containerwithutil": [93, 102], "_static_al": 93, "static_al": 93, "_static_ani": 93, "static_ani": 93, "add_ivy_container_instance_method": 94, "containerexampl": 94, "factorized_tensor": [95, 96, 97, 98, 99, 100], "factorizedtensor": [95, 96, 97, 98, 99, 100], "matrix_or_tensor": 95, "to_unfold": [95, 96, 97, 98, 99, 100], "to_vec": [95, 96, 97, 98, 99, 100], "cp_tensor": [96, 97], "cptensor": [96, 97, 322, 368], "cp_copi": 96, "cp_flip_sign": 96, "s_i": [96, 97], "normalisation_weight": [96, 97], "normalised_factor": [96, 97], "cp_lstsq_grad": 96, "return_loss": 96, "nabla": 96, "mathcal": 96, "mathbf": 96, "factor_matric": 96, "cp_gradient": 96, "quantiti": 96, "cp_mode_dot": 96, "keep_dim": [96, 100], "cp_multi_mode_dot": 96, "cp_n_param": 96, "tensor_shap": [96, 98, 99, 100], "n_param": [96, 97, 98, 99, 100], "cp_norm": 96, "cp_to_tensor": 96, "khatria": 96, "rao": [96, 375, 434], "khatri": [96, 375, 434], "cp_normal": 96, "normalis": [96, 97], "u_1": [96, 97], "u_n": [96, 97], "v_1": [96, 97], "v_n": [96, 97], "v_k": [96, 97], "u_k": [96, 97], "absorb": [96, 97], "refold": [96, 377, 476, 487], "cp_to_unfold": 96, "ie": 96, "s_u_i": 96, "exploit": [96, 872], "khatri_rao": [96, 375], "cp_to_vec": 96, "ravel": [96, 846], "unfolding_dot_khatri_rao": 96, "mttkrp": 96, "validate_cp_rank": 96, "percent": [96, 99], "validate_cp_tensor": 96, "parafac2_tensor": 97, "parafac2tensor": [97, 323, 368], "apply_parafac2_project": 97, "evolv": [97, 858, 869], "b_i": 97, "ijk": [97, 805], "sum_r": 97, "a_": 97, "ir": [97, 867, 870, 875], "jr": 97, "kr": 97, "coupl": [97, 818, 823, 850, 852, 869], "factoris": 97, "i1": [97, 386, 524], "classmethod": [97, 104, 105, 780], "from_cptensor": 97, "parafac2_tensor_ok": 97, "parafac2_normalis": 97, "normalised_project": 97, "parafac2_to_slic": 97, "slice_idx": 97, "frontal": 97, "a_i": 97, "j_i": 97, "b_": 97, "reformul": 97, "p_i": 97, "orthogon": [97, 322, 326, 368, 375, 428, 444, 450, 636, 671, 672], "sum_": 97, "ijr": 97, "constraint": [97, 805, 827, 828, 838], "projection_matric": 97, "parafac2_to_tensor": 97, "construct": [97, 638, 711, 791, 794, 795, 796, 842, 848, 852, 853, 867, 869, 876], "uneven": 97, "parafac2_to_unfold": 97, "parafac2_to_vec": 97, "validate_parafac2_tensor": 97, "cp": [97, 322, 368, 819], "tr_tensor": 98, "trtensor": [98, 324, 368], "tr_n_param": 98, "tr_to_tensor": 98, "tr_to_unfold": 98, "tr_to_vec": 98, "validate_tr_rank": 98, "validate_tr_tensor": 98, "tt_tensor": 99, "_tt_n_param": 99, "mp": [99, 325, 368], "index_upd": 99, "pad_tt_rank": 99, "factor_list": 99, "n_pad": 99, "pad_boundari": 99, "ring": 99, "bond": 99, "padded_factor_list": 99, "tt_to_tensor": 99, "assembl": [99, 375, 449], "tt_to_unfold": 99, "reassembl": 99, "tt_to_vec": 99, "validate_tt_rank": 99, "constant_rank": 99, "allow_overparametr": 99, "proport": [99, 790], "realiz": [99, 869], "validate_tt_tensor": 99, "tucker_tensor": 100, "tucker_copi": 100, "tucker_mode_dot": [100, 876], "tucker_n_param": 100, "tucker_norm": 100, "tucker_to_tensor": 100, "skip_factor": 100, "transpose_factor": 100, "tucker_to_unfold": 100, "tucker_to_vec": 100, "validate_tucker_rank": 100, "fixed_mod": 100, "validate_tucker_tensor": 100, "_bisection_root_find": 100, "fun": [100, 365, 373, 613, 633, 640, 728, 827], "max_it": 100, "__abs__": [101, 102], "__add__": [101, 102, 823, 826, 830, 831, 835, 840, 841, 850], "__eq__": [101, 102], "__ge__": [101, 102], "__gt__": [101, 102, 846], "__le__": [101, 102], "__lt__": [101, 102], "__ne__": [101, 102], "__pow__": [101, 102, 850], "69678056": 101, "59876156": 101, "82660675": 101, "__radd__": [101, 102, 830, 831, 840], "__rrshift__": [101, 102], "__rshift__": [101, 102], "__rsub__": [101, 102], "__sub__": [101, 102, 823, 826, 830, 835, 850], "__truediv__": [101, 102, 823, 826, 830], "__xor__": [101, 102], "referenc": [101, 832, 839], "resid": [101, 105, 638, 701, 840, 848, 852], "mt": [101, 850], "hopefulli": [101, 102, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 787, 788, 790, 791, 793, 794, 795, 796, 815, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 843, 844, 846, 848, 849, 850, 851, 852, 853, 858, 859, 860], "overview": [101, 102, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 787, 788, 790, 791, 793, 794, 795, 796, 811, 825, 827, 841, 843, 847], "reach": [101, 102, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 787, 788, 790, 791, 793, 794, 795, 796, 815, 817, 818, 819, 820, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 843, 844, 846, 848, 849, 850, 851, 852, 853, 858, 859, 860, 868, 869], "eq": 102, "ge": 102, "le": 102, "ne": 102, "75979435": 102, "52153397": 102, "13532257": 102, "rshift": 102, "truediv": 102, "nested_arrai": [104, 105, 106, 825], "nestedarrai": 104, "nested_rank": [104, 105, 106], "inner_shap": [104, 105, 106], "nestedarraybas": [104, 105, 106], "from_row_length": 104, "row_length": 104, "from_row_split": 104, "row_split": 104, "ragged_map": 105, "ragged_multi_map": 105, "ragged_arrai": 105, "ragged_multi_map_in_funct": 105, "replace_ivy_arrai": 105, "unbind": 105, "nestedarrayelementwis": 106, "strictli": [111, 114, 117, 246, 625, 631, 835, 839], "24000001": [111, 625], "703": [112, 625], "683": [112, 625], "408": [112, 625], "313": [112, 625], "437": [112, 625], "40337825": [113, 625], "56114835": [113, 625], "20788449": [113, 625], "0768": [116, 625], "231": [116, 625], "\u03b2": [117, 625], "body_fn": [121, 122, 124, 627], "bodi": [121, 124, 627, 822, 843], "lst": [121, 627], "orelse_fn": [122, 627], "body1": [123, 627], "body2": [123, 627], "test_fn": [124, 627, 773, 811, 863, 864], "repeatedli": [124, 627, 640, 726, 827, 843], "ml_framework": [125, 628], "distanc": [125, 628], "adjac": [125, 628], "nestedsequ": [126, 127, 628], "typevar": [126, 127, 628], "supportsbufferprotocol": [126, 127, 628], "static_copy_arrai": [128, 628], "intdtyp": [131, 142, 148, 160, 171, 176, 183, 189, 628, 629], "pycapsul": [132, 143, 628], "interchang": [132, 143, 628, 638, 710], "plu": [133, 628], "x00b": [133, 628], "x00d": [133, 628], "x00e": [133, 628], "41588834": [137, 628], "7827941": [137, 628], "6227766": [137, 628], "23413252": [137, 628], "n3": [138, 628], "xv": [138, 628], "yv": [138, 628], "x_nativ": [139, 628, 839], "y_nativ": [139, 628], "z_nativ": [139, 628], "d_type": [141, 628], "col": [146, 327, 368, 628], "primari": [146, 165, 166, 198, 199, 327, 368, 384, 514, 549, 550, 628, 629, 630, 633, 776, 778, 817, 821, 824, 828, 837, 839, 840, 842, 843, 846, 854, 856], "upward": [146, 327, 368, 628], "downward": [146, 327, 368, 628], "2xn": [146, 327, 368, 628], "subarrai": [146, 327, 368, 628], "incompat": [153, 629], "closest": [156, 235, 245, 246, 282, 292, 629, 631, 843, 846], "xtype": [156, 629], "ytype": [156, 629], "native_uint16": [156, 629], "complexdtyp": [157, 171, 180, 629], "set_default_complex_dtyp": [157, 186, 629], "4294": [157, 159, 629], "967346": [157, 159, 629], "set_default_dtyp": [158, 187, 629, 828, 836], "floatdtyp": [159, 182, 629], "set_default_float_dtyp": [159, 168, 180, 188, 629, 828], "int_dtyp": [160, 183, 629], "set_default_int_dtyp": [160, 168, 189, 629, 828], "4294967346": [160, 161, 629], "uint_dtyp": [161, 184, 629], "uint": [161, 176, 184, 190, 629, 828, 841], "uintdtyp": [161, 176, 184, 190, 629], "set_default_uint_dtyp": [161, 168, 190, 629], "native_bool": [163, 629], "ieee": [164, 222, 239, 244, 262, 272, 281, 286, 289, 626, 629, 631, 859], "754": [164, 222, 239, 244, 262, 272, 281, 286, 289, 626, 629, 631, 859], "smallest_norm": [164, 629], "bfloat16": [165, 629, 775, 776, 828, 840, 843, 844], "unsupport": [166, 199, 550, 629, 630, 633, 770, 773, 815, 818, 833, 840], "encapsul": [167, 629, 827], "314": [167, 279, 337, 371, 629, 631], "9223372036854775808": [167, 629], "9223372036854775807": [167, 629], "65535": [167, 629], "4294967295": [167, 629], "native_uint8": [169, 629], "hashabl": [173, 629], "type1": [177, 629], "type2": [177, 629], "array_api_promot": [177, 178, 629, 775, 776], "unexpect": [178, 246, 629, 631, 828], "default_complex_dtyp": [180, 629], "default_dtype_stack": [181, 187, 629], "unset_default_dtyp": [181, 629], "native_uint64": [181, 629], "default_float_dtyp": [182, 629, 828], "default_int_dtyp": [183, 189, 629, 828], "default_uint_dtyp": [184, 190, 629], "ret1": [185, 629], "ret2": [185, 629], "reset": [186, 187, 188, 189, 190, 216, 217, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 629, 630, 633, 829], "default_complex_dtype_stack": [186, 629], "default_float_dtype_stack": [188, 629], "native_float16": [191, 629], "unmodifi": [193, 630, 824, 828], "aliv": [200, 205, 207, 553, 573, 574, 630, 633, 829], "139740789224448": [200, 630], "process_specif": [206, 218, 630], "percentag": [206, 630], "ram": [206, 214, 218, 630], "alon": [206, 218, 630, 811, 834, 843], "036902561555": [206, 630], "7024003467681645": [206, 630], "as_native_dev": [206, 630], "7095597456708771": [206, 630], "attr_onli": [207, 630], "soft_device_mod": [209, 217, 630], "chunk": [210, 211, 212, 630], "split_factor": [210, 630, 832], "max_chunk_s": [212, 630], "chunk_siz": [212, 630], "input_ax": [212, 630], "output_ax": [212, 630], "fed": [212, 630, 852], "fist": [212, 630], "gb": [214, 218, 630, 818, 833], "66700032": [214, 630], "589934592": [214, 630], "219563008": [218, 630], "902400346": [218, 630], "525205504": [218, 630], "na": [219, 631, 843], "noqa": [219, 286, 631, 791, 800, 841], "princip": [220, 224, 226, 358, 371, 631], "domain": [220, 221, 224, 225, 226, 227, 236, 237, 242, 244, 260, 261, 263, 284, 285, 286, 289, 290, 358, 371, 631, 831, 867, 869], "codomain": [220, 221, 224, 225, 226, 227, 236, 237, 242, 244, 260, 261, 263, 284, 285, 286, 289, 290, 358, 371, 631, 831], "\u03c0": [220, 224, 226, 227, 626, 631], "3\u03c0": [220, 227, 631], "unspecifi": [220, 221, 225, 228, 237, 242, 244, 246, 281, 285, 286, 290, 375, 428, 631, 636, 638, 671, 672, 709, 839], "\u03c0j": [221, 225, 228, 260, 262, 631], "3\u03c0j": [221, 260, 262, 631], "x1_i": [222, 227, 229, 231, 232, 233, 234, 239, 240, 246, 250, 251, 258, 259, 264, 266, 268, 269, 272, 275, 277, 281, 288, 631, 822], "2019": [222, 239, 244, 262, 272, 631, 869, 872], "overflow": [222, 239, 246, 631, 636, 646, 684, 764, 816, 828], "commut": [222, 631], "tabl": [222, 239, 272, 584, 607, 631, 633, 775, 776, 791, 840, 845, 869], "dj": [222, 239, 272, 631], "z1": [222, 631], "z2": [222, 631], "yj": [223, 631], "nanj": [225, 631], "809": [225, 631], "569": [225, 631], "733": [225, 631], "notat": [227, 631, 646, 758, 827], "denot": [227, 631, 793], "quadrant": [227, 631], "rai": [227, 631, 859], "bitwis": [229, 232, 234, 269, 631], "170": [233, 631], "243": [233, 631], "xor": [234, 269, 631], "654": [236, 631], "ci": [237, 242, 244, 285, 631, 822, 828, 834, 841, 843, 854], "368": [237, 631], "670": [237, 631], "202": [237, 631, 822], "548": [237, 631], "1490": [237, 631], "57079633": [238, 631], "14159265": [238, 631], "71238898": [238, 631], "28318531": [238, 631], "02617994": [238, 631], "87266463": [238, 631], "01919862": [238, 631], "03839725": [238, 631], "05759586": [238, 631], "07679449": [238, 631], "09599311": [238, 631], "11519173": [238, 631], "35081118": [238, 631], "88139129": [238, 631], "underflow": [239, 246, 631, 636, 684, 828], "textbook": [239, 272, 631], "frac": [239, 261, 263, 283, 285, 289, 374, 380, 402, 403, 407, 408, 500, 502, 631], "ac": [239, 272, 631, 804, 805], "bd": [239, 272, 631], "bc": [239, 272, 631, 804, 805], "versu": [239, 272, 631], "riemann": [239, 272, 631], "sphere": [239, 272, 631], "c99": [239, 272, 631], "infinit": [239, 272, 286, 631], "unlik": [239, 272, 631, 822, 827, 830, 859, 874, 876], "698": [239, 631], "truth": [240, 250, 251, 258, 259, 275, 376, 452, 631, 770, 772, 783, 815, 833, 840, 843], "32862675": [241, 631], "67780113": [241, 631], "11246294": [241, 631], "42839241": [241, 631], "52050018": [241, 631], "16799599": [241, 631], "30787992": [241, 631], "43796915": [241, 631], "98667163": [241, 631], "79690808": [241, 631], "88020504": [241, 631], "91031402": [241, 631], "95228523": [241, 631], "96610528": [241, 631], "cut": [242, 244, 284, 285, 286, 289, 631, 858, 875], "08553692": [242, 631], "567": [242, 631], "00344786": [242, 631], "76297021": [242, 631], "197948": [242, 631], "53253174": [242, 631], "fdlibm": [244, 262, 631], "compliant": [244, 262, 267, 268, 334, 335, 371, 631, 646, 759, 760, 761, 763], "potenti": [244, 262, 631, 811, 817, 818, 827, 828, 840, 847, 872], "632": [244, 631], "20e": [244, 631], "72e": [244, 631, 775], "greatest": [245, 246, 249, 631], "pep": [246, 631, 835], "disambigu": [246, 631, 838], "former": [246, 631, 818, 828, 831, 840], "latter": [246, 631, 818, 822, 824, 828, 831, 840], "overload": [246, 631, 843], "led": [246, 631, 822, 871], "subtl": [246, 631, 828, 875], "bug": [246, 631, 811, 817, 819, 825, 833, 834, 840, 843, 855], "ambigu": [246, 631], "semant": [246, 281, 377, 491, 631, 828, 848, 853, 858, 870], "ill": [246, 631, 777], "surpris": [246, 631, 854], "arrau": [252, 631], "log_": [261, 263, 631], "742": [262, 631], "negat": [274, 337, 371, 631], "52095687": [277, 631], "92457771": [277, 631], "49372482": [277, 631], "22738838": [277, 631], "156": [277, 631, 775], "5877228": [277, 631], "189": [278, 631, 640, 717], "252": [278, 631], "378": [278, 631], "1150": [278, 631], "2890": [278, 631], "172": [278, 631], "487": [278, 631, 635, 659], "344": [278, 631], "355j": [279, 337, 371, 631], "55j": [279, 337, 371, 631], "primarili": [281, 631, 817, 826, 869], "counterpart": [282, 631, 826, 837], "deliber": [282, 631, 846], "imprecis": [282, 631], "5654": [282, 631], "034": [282, 631], "433": [282, 617, 619, 631, 634], "signum": [283, 631], "textrm": [283, 631], "932": [284, 631], "746": [284, 631], "657": [284, 631], "indistinguish": [286, 631], "infti": [286, 631], "32455532": [286, 631], "89897949": [286, 631], "169": [286, 631], "analyt": [289, 631, 869, 871, 875], "pole": [289, 631], "546": [289, 631, 635, 659], "916": [289, 631], "996": [289, 631], "histor": [290, 631], "stem": [290, 631, 839], "older": [290, 631], "advis": [290, 631, 840], "462": [290, 631], "604": [290, 631], "984": [290, 631], "997": [290, 631], "0375": [292, 631], "032": [292, 631], "57258511": [295, 366], "69999999": [295, 366, 624, 634], "90928203": [295, 366], "98772264": [295, 366], "99591321": [295, 366], "99863964": [295, 366], "69880581": [295, 366], "18126924": [295, 366], "79999995": [296, 306, 309, 366], "70000005": [296, 309, 366], "1241": [297, 366], "4897": [297, 366], "4090": [297, 366], "31008321": [297, 366], "1147176": [297, 366], "40899992": [297, 366], "20141329": [300, 366], "40318608": [300, 366], "48683619": [300, 366], "46328247": [300, 366], "59813893": [300, 366], "43748799": [300, 366], "parametr": [301, 366, 822, 843, 869], "71589994": [303, 307, 366], "14324772": [303, 307, 366], "70648694": [303, 307, 366], "54488957": [303, 307, 366], "10740992": [303, 307, 366], "19514863": [303, 307, 366], "6705687": [304, 366], "52016652": [304, 366], "40560818": [304, 366], "45630932": [304, 366], "2689": [305, 366], "7310": [305, 366], "7615": [305, 366], "2784": [305, 366], "7168": [305, 366], "8708": [305, 366], "4374": [305, 366], "1379": [305, 366], "0089": [305, 366], "59999991": [306, 366], "03597236": [308, 366], "43827677": [308, 366], "80100036": [308, 366], "12954807": [308, 366], "76459098": [308, 366], "20044947": [308, 366], "60000372": [308, 366], "taper": [311, 314, 368], "summat": [311, 368, 646, 758, 804, 805], "leakag": [311, 368], "wors": [311, 368, 859], "y1": [312, 368], "0800": [313, 368], "3979": [313, 368], "9121": [313, 368], "5400": [313, 368], "han": [314, 368], "ith": [315, 368], "00726415": [316, 368], "9999736": [316, 368], "2773e": [317, 368], "0172e": [317, 368], "9294e": [317, 368], "4149": [317, 368], "9138": [317, 368], "5529": [317, 368], "multidimension": [319, 320, 368, 869], "normalise_factor": [322, 323, 368], "parafac2": [323, 368], "tr": [324, 368], "context": [324, 368, 572, 633, 817, 818, 819, 824, 828, 829, 830], "38268346": [332, 368], "38268352": [332, 368], "8563191": [332, 368], "14943568": [332, 368], "cn": [334, 335, 371], "zh": [334, 335, 371], "amax_cn": [334, 371], "sentinel": [334, 335, 371, 646, 759, 761], "amin_cn": [335, 371], "4769": [343, 371], "position": [345, 371], "triangl": [349, 371], "999999e": [350, 371], "65999985": [352, 371], "52000046": [352, 371], "1500001": [352, 371, 545, 633], "11259177": [353, 371], "3574118": [353, 371], "20097363": [353, 371], "suppli": [357, 371, 377, 483, 804, 823, 825, 843], "217234": [358, 371], "hurwitz": [361, 371], "custom_grad_func": [363, 373], "bind": [363, 373, 817, 838, 868, 869], "upstream": [363, 373, 818, 819, 822, 833, 838], "primal": [364, 365, 373], "jacobian": [364, 365, 373, 619, 634, 854, 869], "cotang": [365, 373], "stanh": 366, "ndenumer": 368, "ndindex": 368, "random_cp": 368, "random_parafac2": 368, "random_tr": 368, "random_tt": 368, "random_tuck": 368, "bind_custom_gradient_funct": [373, 838], "jvp": 373, "vjp": 373, "h_out": [374, 391, 635, 660], "w_out": [374, 391], "area_interpol": 374, "01823380e": [374, 396, 406], "15385818e": [374, 396, 406], "36371466e": [374, 396, 406], "38763905e": [374, 396, 406], "60722279e": [374, 396, 406], "80319249e": [374, 396, 406], "05617893e": [374, 396, 406], "21500000e": [374, 396, 406], "24000015e": [374, 396, 406], "90734863e": [374, 396, 406], "10000420e": [374, 396, 406], "15899994e": [374, 396, 406], "24000053e": [374, 396, 406], "81469727e": [374, 396, 406], "09999847e": [374, 396, 406], "4135742": [374, 396, 406], "6779785": [374, 396, 406], "3770599": [374, 396, 406], "8719864": [374, 396, 406], "72109985": [374, 396, 406], "52869415": [374, 396, 406], "79182434": [374, 396, 406], "72489166": [374, 396, 406], "container_n": [374, 396, 406], "container_typ": [374, 396, 406, 633], "container_norm": [374, 396, 406], "1580677": [374, 396], "89422607": [374, 396], "86190414": [374, 396], "00041008": [374, 396], "75149155": [374, 396], "97056389": [374, 396], "87819386": [374, 396], "89381361": [374, 396], "50000000e": [374, 396, 406, 775], "22044605e": [374, 396, 406], "ed": [374, 398, 399, 400], "rest": [374, 377, 398, 399, 400, 469, 818, 825, 827, 843, 853, 871], "5d": [374, 400, 791], "emb": [374, 401], "51285338": [374, 401], "87183261": [374, 401], "2308116": [374, 401], "02733949e": [374, 402], "00j": [374, 402], "49660576e": [374, 402], "68178638e": [374, 402], "01j": [374, 402, 407], "98912367e": [374, 402], "21802426e": [374, 402, 407], "04549134e": [374, 402, 407], "82842712e": [374, 402, 407], "86902654e": [374, 402, 407], "25501143e": [374, 402, 407], "32978028e": [374, 402, 407], "52068201e": [374, 402, 407], "71158374e": [374, 402, 407], "generate_einsum_equ": 374, "get_interpolate_kernel": 374, "27279224e": [374, 406], "44232273e": [374, 406], "70464332e": [374, 406], "73454881e": [374, 406], "00902849e": [374, 406], "10039906e": [374, 406], "07022366e": [374, 406], "69506073": [374, 406], "93914604": [374, 406], "88008881": [374, 406], "18951607": [374, 406], "57439613": [374, 406], "15318303e": [374, 407], "15148591e": [374, 407], "19j": [374, 407], "25000000e": [374, 407], "35378602e": [374, 407], "02j": [374, 407], "65404249e": [374, 407], "17611649e": [374, 407], "24320230e": [374, 407], "79344813e": [374, 407], "22374531e": [374, 407], "45929364e": [374, 407], "14208718e": [374, 407], "07177031e": [374, 407], "indexerror": [374, 408, 419, 638, 701, 806, 832], "interp": [374, 846], "xp": [374, 409, 822], "fp": [374, 409], "nd": [374, 410], "tf_bicub": [374, 410, 846], "nearest_interpol": 374, "window_shap": [374, 416], "pool_typ": [374, 416], "irfft": [374, 418], "silent": [374, 418], "discard": [374, 418, 827], "1400001": [374, 418], "3999999": [374, 418], "3999996": [374, 418], "99038106j": [374, 419], "33012702": [374, 419], "23205081j": [374, 419], "33012702j": [374, 419], "superdiagon": [375, 426, 636, 669], "subdiagon": [375, 426, 636, 669], "eigendecomposit": [375, 428, 636, 671, 672], "qlq\u1d40": [375, 428, 636, 671, 672], "tridiagon": [375, 429], "38196602": [375, 429], "61803389": [375, 429], "35048741": [375, 429], "56710052": [375, 429], "06693714": [375, 429], "74234426": [375, 429], "56155282": [375, 429], "56155276": [375, 429], "82842714": [375, 429], "82842731": [375, 429, 636, 672], "necessarili": [375, 430, 823, 826], "generalis": [375, 431], "skip_matrix": [375, 434, 436], "khatri_rao_product": [375, 434], "kronecker_product": [375, 436], "n_column": [375, 436], "lu_factor": 375, "pivot": [375, 437], "lu": [375, 437, 438], "lu_solv": 375, "nnmf": [375, 439], "hoi": [375, 444, 450], "solve_triangular": 375, "unit_diagon": [375, 445], "solut": [375, 445, 636, 685, 775, 811, 815, 817, 818, 819, 826, 828, 833, 841, 843, 846, 867, 871], "determinist": [375, 446, 843], "borrow": [375, 446, 821], "extmath": [375, 446], "ivan": [375, 447], "oseledet": [375, 447], "scientif": [375, 447, 869], "2295": [375, 447], "2317": [375, 447], "2011": [375, 447], "convention": [376, 453, 872], "explicit": [376, 377, 453, 491, 818, 826, 828, 838, 839, 840, 848, 854, 869], "555969": [376, 453], "223876": [376, 453], "111938": [376, 453], "42649534": [376, 453], "68651628": [376, 453], "51119184": [376, 453], "59967244": [376, 453], "mae": [376, 454], "666": [376, 454, 635, 636, 659, 677], "91097307": [376, 456], "3467": [376, 457], "0133": [376, 457], "0250": [376, 457], "0056": [376, 457], "0025": [376, 457], "0675": [376, 457], "6987": [376, 458], "1606": [376, 458], "3711": [376, 458], "4032": [376, 458], "6931": [376, 458], "whilst": [377, 461, 462, 463, 853, 856, 869], "ary3": [377, 463], "check_scalar": 377, "force_integ": [377, 465], "force_posit": [377, 465], "mod": [377, 466, 822], "tall": [377, 472], "appear": [377, 474, 475, 613, 633, 818, 819, 822, 840, 846, 862], "horizot": [377, 479], "shortcut": [377, 483, 818], "linear_ramp": [377, 483], "reflect": [377, 483, 819, 823, 839, 843], "ramp": [377, 483], "mirror": [377, 483, 814, 817, 869], "padding_func": [377, 483], "iaxis_pad_width": [377, 483], "iaxi": [377, 483], "unalt": [377, 483], "put": [377, 488, 811, 817, 843, 854, 875], "mul": [377, 488, 839, 850], "conceptu": [377, 491, 865, 870], "concern": [377, 491, 819, 821, 826, 828, 830, 839, 846, 847, 875], "regard": [377, 491, 816, 826, 840, 841, 846, 859], "mutat": [377, 491], "elimin": [377, 497, 818], "consecut": [377, 497], "batch_mean": [380, 500, 502], "batch_var": [380, 500, 502], "running_vari": [380, 500, 502], "local_response_norm": 380, "neighbour": [380, 505], "42857143": [380, 506], "5714286": [380, 506], "multivari": [381, 509], "bayesian": [381, 509], "supposedli": [384, 513], "indirect": [384, 514], "secondari": [384, 514], "is_ivy_sparse_arrai": 385, "is_native_sparse_arrai": 385, "native_sparse_arrai": 385, "coo_indic": [385, 517], "crow_indic": [385, 517], "col_indic": [385, 517], "ccol_indic": [385, 517], "row_indic": [385, 517], "dense_shap": [385, 517], "native_sparse_array_to_indices_values_and_shap": 385, "nativesparsearrai": 385, "sparsearrai": 385, "linalg": [386, 521, 636, 684, 685, 817, 839, 841], "aw": [386, 521, 859], "48447205": [386, 521], "c0": [386, 524], "ck": [386, 524], "c2": [386, 524], "nearest_jax": [386, 531], "trace_on_next_step": [535, 633, 795, 852], "recalcul": [538, 633], "my_sum": [538, 633], "val1": [538, 633], "val2": [538, 633], "cached_sum": [538, 633], "line_eq": [538, 633], "slp": [538, 633], "itc": [538, 633], "cached_line_eq": [538, 633], "0353": [539, 633], "424": [539, 633], "339": [539, 633], "271": [539, 633], "391": [539, 633], "78885436": [540, 633], "41666666": [540, 633], "58333331": [540, 633], "06666667": [540, 633], "13333334": [540, 633], "40000004": [540, 633], "26666668": [540, 633], "13137734": [540, 633], "26275468": [540, 633], "39413199": [540, 633], "52550936": [540, 633], "6568867": [540, 633], "78826398": [540, 633], "84852815": [540, 633], "1313709": [540, 633], "41421366": [540, 633], "27279221": [540, 633], "69705628": [540, 633], "12132034": [540, 633], "default_str": [543, 633], "46999979": [544, 633], "66000009": [544, 633], "93000001": [544, 633], "29000092": [544, 633], "33999991": [544, 633], "6400001": [544, 633], "96000004": [544, 633], "36000013": [544, 633], "51999998": [544, 633], "67000008": [544, 633], "suppos": [544, 633, 828, 843], "960": [544, 633], "3600": [544, 633], "h1": [544, 633], "w1": [544, 633], "40499985": [545, 633], "61000061": [545, 633], "max_depth": [556, 633], "seen_set": [556, 633], "local_set": [556, 633], "referr": [556, 633], "redund": [556, 633, 811, 828, 832, 840, 862], "example_funct": [556, 633], "repr": [556, 633], "ivyexcept": [561, 594, 633, 806, 829, 832, 837, 839, 840, 844], "allow_dupl": [571, 633], "fork": [572, 633, 812, 822, 827, 833], "forkserv": [572, 633], "mp_default": [572, 633], "defaultcontext": [572, 633], "0x7f4e3193e520": [572, 633], "mp_fork": [572, 633], "forkcontext": [572, 633], "0x7f4e3193e580": [572, 633], "mp_spawn": [572, 633], "spawncontext": [572, 633], "0x7f4e3193e5e0": [572, 633], "mp_forkserv": [572, 633], "forkservercontext": [572, 633], "0x7f4e3193e640": [572, 633], "garbag": [574, 633], "collector": [574, 633], "get_all_arrays_in_memori": [574, 633], "exception_trace_mod": [578, 602, 633, 845], "lenient": [579, 603, 633], "inplace_mod": [579, 603, 633], "break": [579, 633, 811, 824, 828, 835, 844, 854], "infus": [580, 633], "unset": [581, 588, 633, 636, 684, 800, 824, 848], "unset_min_bas": [581, 633], "nestable_mod": [583, 606, 633, 845], "precise_mod": [584, 607, 633, 845], "shape_array_mod": [586, 609, 633, 845], "show_func_wrapper_trace_mod": [587, 610, 633, 845], "tmp_dr": [588, 633], "tmp_dir": [588, 611, 633, 845], "my_tmp": [588, 633], "unset_tmp_dir": [588, 633], "49999999999975": [591, 633], "5015015015010504": [591, 633], "000444502911705e": [591, 633], "9999999999995j": [591, 633], "00000262": [592, 633], "15605032": [592, 633], "01208451j": [592, 633], "00048": [592, 633], "1296": [592, 633], "00864": [592, 633], "isn": [594, 633, 814, 819, 837, 839, 843, 851, 854, 871], "100000023841858": [596, 633], "200000047683716": [596, 633], "299999952316284": [596, 633], "400000095367432": [596, 633], "599999904632568": [596, 633], "hemant": [600, 633], "unset_shape_array_mod": [601, 633], "set_exception_trace_mod": [602, 633, 832], "set_min_bas": [604, 633], "set_min_denomin": [605, 633], "set_nestable_mod": [606, 633], "set_precise_mod": [607, 633], "set_queue_timeout": [608, 633], "set_shape_array_mod": [609, 633], "set_show_func_wrapper_trace_mod": [610, 633, 832], "set_tmp_dir": [611, 633], "my_dir": [611, 633], "451": [612, 633], "in_ax": [613, 633], "out_ax": [613, 633], "thereof": [613, 633], "summaris": [613, 633], "99999998": [614, 634], "19999998": [614, 634], "00000001": [614, 634], "00300001": [614, 634], "00800001": [614, 634], "0125": [614, 634], "17294501": [614, 634], "15770318": [614, 634], "20863818": [614, 634], "90000075": [615, 634], "90000164": [615, 634], "9000032": [615, 634], "50000012e": [615, 634], "92558754": [615, 634], "92558694": [615, 634], "92558682": [615, 634], "92558861": [615, 634], "60000025e": [615, 634], "01024": [615, 634], "retain_grad": [616, 634], "func_ret": [616, 634, 838], "666666": [616, 634], "333332": [616, 634], "66666675": [616, 624, 634], "argnum": [617, 634], "933": [617, 619, 634], "jac_fn": [619, 634], "639": [620, 634], "361": [620, 634], "52565837": [621, 634], "8418861": [621, 634], "68377209": [621, 634], "value_grad": [624, 634], "42333412": [624, 634], "5333333": [624, 634], "93333334": [624, 634], "43333334": [624, 634], "0666666": [624, 634], "softsign": 625, "718281828459045": 626, "euler": 626, "141592653589793": 626, "cmp_i": 627, "cmp_isnot": 627, "for_loop": 627, "if_els": 627, "try_except": 627, "to_dlpack": 628, "as_ivy_dtyp": [629, 840], "as_native_dtyp": 629, "check_float": 629, "closest_valid_dtyp": 629, "default_dtyp": [629, 828, 836], "dtype_bit": 629, "function_supported_dtyp": [629, 828, 843], "function_unsupported_dtyp": [629, 828], "infer_default_dtyp": 629, "invalid_dtyp": [629, 828], "is_hashable_dtyp": 629, "is_native_dtyp": 629, "promote_typ": [629, 828], "promote_types_of_input": [629, 828, 839], "type_promote_arrai": [629, 828], "unset_default_complex_dtyp": 629, "unset_default_float_dtyp": 629, "unset_default_int_dtyp": 629, "unset_default_uint_dtyp": 629, "valid_dtyp": 629, "defaultcomplexdtyp": 629, "defaultdtyp": 629, "defaultfloatdtyp": 629, "defaultintdtyp": 629, "defaultuintdtyp": 629, "as_ivy_dev": [630, 850], "clear_cached_mem_on_dev": 630, "dev_util": [630, 829], "function_supported_devic": 630, "function_unsupported_devic": 630, "get_all_ivy_arrays_on_dev": [630, 829], "handle_soft_device_vari": [630, 829], "num_cpu_cor": [630, 829], "num_gpu": [630, 829, 843], "num_ivy_arrays_on_dev": 630, "percent_used_mem_on_dev": 630, "print_all_ivy_arrays_on_dev": 630, "set_split_factor": [630, 832], "split_func_cal": 630, "total_mem_on_dev": [630, 829], "tpu_is_avail": 630, "unset_default_devic": [630, 829], "unset_soft_device_mod": [630, 829], "used_mem_on_dev": 630, "defaultdevic": [630, 829], "profil": 630, "save_dir": 630, "arg_info": 633, "arg_nam": 633, "cache_fn": [633, 836], "current_backend_str": [633, 843, 848, 850], "function_supported_devices_and_dtyp": 633, "function_unsupported_devices_and_dtyp": 633, "get_item": [633, 839], "get_referrers_recurs": 633, "inplace_arrays_support": 633, "inplace_variables_support": 633, "is_ivy_nested_arrai": 633, "isscalar": 633, "match_kwarg": 633, "num_arrays_in_memori": 633, "print_all_arrays_in_memori": 633, "set_item": [633, 843], "to_ivy_shap": 633, "to_native_shap": 633, "try_else_non": 633, "unset_array_mod": [633, 845], "unset_exception_trace_mod": 633, "unset_inplace_mod": 633, "unset_min_denomin": 633, "unset_nestable_mod": 633, "unset_precise_mod": 633, "unset_queue_timeout": 633, "unset_show_func_wrapper_trace_mod": 633, "vmap": [633, 854, 869], "arraymod": 633, "precisemod": [633, 828], "jac": 634, "value_and_grad": [634, 838], "feature_group_count": [635, 648, 655, 656], "oiw": [635, 648, 649, 655], "oihw": [635, 648, 651, 655], "oidhw": [635, 648, 653, 655], "dhwio": [635, 648, 649, 653, 655], "conv_general_dil": [635, 840], "conv_general_transpos": 635, "depthwis": [635, 657, 777, 791], "overfit": [635, 658], "overal": [635, 658, 805, 826, 828, 829, 831, 853, 862, 865, 867, 868, 869], "1428566": [635, 658], "49000001": [635, 658], "55599999": [635, 658], "21000004": [635, 658], "incom": [635, 659], "4269": [635, 659], "911": [635, 659, 832], "157": [635, 659], "753": [635, 659], "545": [635, 642, 659, 740], "547": [635, 659, 829], "124": [635, 659], "963": [635, 659], "98495483": [635, 659], "0293808": [635, 659], "0159359": [635, 659], "74752808": [635, 659], "20942307": [635, 659], "3205719": [635, 659], "all_weight": [635, 660], "num_lay": [635, 660, 791], "batch_first": [635, 660, 662], "weights_transpos": [635, 660], "has_ih_bia": [635, 660], "has_hh_bia": [635, 660], "multi": [635, 636, 660, 662, 667, 777, 791, 830, 847, 854, 865, 867, 869, 873], "long": [635, 660, 661, 818, 819, 827, 828, 830, 832, 833, 840, 848, 869], "seq_len": [635, 660], "input_s": [635, 660], "h_0": [635, 660], "c_0": [635, 660], "num_direct": [635, 660], "hidden_s": [635, 660], "four": [635, 660, 814, 823, 828, 830, 835, 836, 843, 846, 851], "w_ih": [635, 660], "w_hh": [635, 660], "b_ih": [635, 660], "b_hh": [635, 660], "bias": [635, 660], "pack": [635, 660], "c_out": [635, 660], "vaswani": [635, 662], "al": [635, 662], "num_attention_head": [635, 662], "key_dim": [635, 662, 791], "value_dim": [635, 662, 791], "attention_weight": [635, 662], "unbatch": [635, 662], "nm": 635, "box": [635, 663, 664, 818], "iou_threshold": [635, 663], "max_output_s": [635, 663], "score_threshold": [635, 663], "roi_align": 635, "spatial_scal": [635, 664], "sampling_ratio": [635, 664], "23333359": [635, 665], "03946018": [635, 665], "0280633": [635, 665], "29981947": [635, 665], "29981089": [635, 665], "06345534": [635, 665], "9634552": [635, 665], "19336844": [635, 665], "09336829": [635, 665], "axisa": [636, 667], "axisb": [636, 667], "axisc": [636, 667], "293": [636, 668], "46997": [636, 668], "explicitli": [636, 672, 673, 688, 772, 791, 792, 793, 815, 822, 823, 824, 826, 828, 831, 832, 833, 836, 837, 838, 839, 841, 843, 848, 854, 863, 869], "17157288": [636, 672], "9238795": [636, 672], "78930789": [636, 672], "59803128": [636, 672], "19127655": [636, 672], "31213903": [636, 672], "63418275": [636, 672], "84632206": [636, 672], "70548367": [636, 672], "70223427": [636, 672], "09570674": [636, 672], "63116378": [636, 672], "56109613": [636, 672], "53554028": [636, 672], "32237405": [636, 672], "43822157": [636, 672], "83906901": [636, 672], "50766778": [636, 672], "71475857": [636, 672], "48103389": [636, 672], "3676433": [636, 672], "68466955": [636, 672], "62933773": [636, 672], "77917379": [636, 672], "14264561": [636, 672], "61036086": [636, 672], "45033181e": [636, 673], "02829754e": [636, 673], "54220343e": [636, 673], "12647155e": [636, 673], "38447177e": [636, 673], "56155300e": [636, 673], "26794919": [636, 673], "7320509": [636, 673], "0012": [636, 675], "00342": [636, 675], "000565": [636, 675], "0104": [636, 675], "000981": [636, 675], "00282": [636, 675], "000766": [636, 675], "0322": [636, 675], "00237": [636, 675], "000151": [636, 675], "00101": [636, 675], "00019": [636, 675], "0214": [636, 675], "00171": [636, 675], "0107": [636, 675], "0167": [636, 675], "0472": [636, 675], "0536": [636, 675], "0177": [636, 675], "000429": [636, 675], "00762": [636, 675], "frobeniu": [636, 677], "nuclear": [636, 677], "induc": [636, 677], "ranl": [636, 677], "47722558": [636, 677], "776": [636, 677], "6000004": [636, 677], "118": [636, 678], "moor": [636, 682], "penros": [636, 682], "31622776": [636, 683], "94868332": [636, 683], "1622777": [636, 683], "42718887": [636, 683], "deteremin": [636, 684], "logsabsdet": [636, 684], "subject": [636, 684], "unset_backend": [636, 684, 800, 824], "ordin": [636, 685], "b2": [636, 685], "usvh": [636, 686], "cetera": [636, 686], "driver": [636, 687, 854], "cusolv": [636, 687], "gesvd": [636, 687], "gesvdj": [636, 687], "gesvda": [636, 687], "86217213": [636, 687], "31816804": [636, 687], "615": [636, 687], "ss": [636, 687], "25994301": [636, 687], "16403675": [636, 687], "61529762": [636, 687], "51231241": [636, 687], "39777088": [636, 687], "15413129": [636, 687], "1029852": [636, 687], "01383495": [636, 687], "86647356": [636, 687], "7786541": [636, 687], "55970621": [636, 687], "16857576": [636, 687], "86412698": [636, 687], "37566757": [636, 687], "88477993": [636, 687], "95925522": [636, 687], "6444726": [636, 687], "54687881": [636, 687], "16134834": [636, 687], "35037804": [636, 687], "31025076": [636, 687], "35769391": [636, 687], "transposit": [636, 688], "success": [636, 646, 690, 762, 764, 814, 818, 827, 859], "0x": [636, 691], "Such": [636, 691, 836, 843], "progress": [636, 691, 814, 818, 819, 853], "alexandr": [636, 691], "theophil": [636, 691], "dot_product": [636, 692], "9000001": [636, 693], "64158917": [636, 693], "skew": [636, 694], "60309976": [637, 695], "6666193": [637, 695], "01348412": [637, 695], "05393649": [637, 695], "49992943": [637, 695], "83330965": [637, 695], "02136981": [637, 695], "32844672": [637, 695], "26561815": [637, 695], "22314337": [637, 695], "08916873": [637, 696, 697], "44832274": [637, 697], "75646281": [637, 697], "13862944": [637, 697], "57564628": [637, 697], "honor": [638, 705], "beyond": [638, 706, 811, 831, 840, 875], "famili": [638, 709], "intxx": [638, 709], "floatxx": [638, 709], "rep": [638, 711], "fomaml_step": 639, "inner_cost_fn": [639, 714, 715, 716], "outer_cost_fn": [639, 714, 715], "inner_grad_step": [639, 714, 715, 716], "inner_learning_r": [639, 714, 715, 716], "inner_optimization_step": [639, 714, 715, 716], "inner_batch_fn": [639, 714, 715], "outer_batch_fn": [639, 714, 715], "average_across_step": [639, 714, 715], "inner_v": [639, 714, 715], "keep_inner_v": [639, 714, 715], "outer_v": [639, 714, 715], "keep_outer_v": [639, 714, 715], "return_inner_v": [639, 714, 715, 716], "num_task": [639, 714, 715, 716], "maml": [639, 714, 715], "0x759b66eabb50": [639, 714, 715, 716], "maml_step": 639, "vanilla": [639, 715, 852, 869], "_variabl": [639, 715, 716], "sub_batch": [639, 715], "40069818": [639, 715], "13723135": [639, 715], "reptile_step": 639, "cost_fn": [639, 716], "reptil": [639, 716], "batch_in": [639, 716], "4485182": [639, 716], "139": [639, 716], "9569855": [639, 716], "9880483": [639, 716], "01766968": [639, 716], "02197957": [639, 716], "02197981": [639, 716], "all_nested_indic": 640, "include_nest": [640, 717], "_index": [640, 717, 728], "_base": [640, 717, 727, 728, 839], "themselv": [640, 717, 826, 828, 829, 831, 836, 840, 852, 866, 875], "863": [640, 717, 829], "672": [640, 717], "482": [640, 717], "674": [640, 717], "341": [640, 717], "copy_nest": 640, "to_mut": [640, 718, 729], "deepli": [640, 718, 820, 854, 869], "copied_nest": [640, 718], "1337": [640, 718, 729], "duplicate_array_index_chain": 640, "index_nest": [640, 836], "insert_into_nest_at_index": 640, "insert_into_nest_at_indic": 640, "special_squar": [640, 723], "6666666666666667": [640, 723], "special_pow": [640, 723], "linear_model": [640, 723], "map_nest_at_index": 640, "_result": [640, 724, 734], "hh": [640, 724, 729], "map_nest_at_indic": 640, "ub": [640, 725], "tb": [640, 725], "multi_index_nest": 640, "nested_ani": 640, "check_nest": [640, 727, 728], "nested_argwher": 640, "stop_after_n_found": [640, 728], "nested_indic": [640, 728], "nested_map": [640, 829, 836], "_tuple_check_fn": [640, 729], "_list_check_fn": [640, 729], "_dict_check_fn": [640, 729], "wherebi": [640, 729, 817, 866], "ah": [640, 729], "bh": [640, 729], "ch": [640, 729], "dh": [640, 729, 822], "eh": [640, 729], "gh": [640, 729, 818, 833], "ih": [640, 729], "1338": [640, 729], "nested_multi_map": 640, "index_chain": [640, 730], "nest0": [640, 730], "ivy_arrai": [640, 730, 823, 840], "unappli": [640, 730], "prune_empti": 640, "prune_nest_at_index": 640, "prune_nest_at_indic": 640, "set_nest_at_index": 640, "set_nest_at_indic": 640, "xyz": [640, 735], "pqr": [640, 735], "mini": [641, 736, 791, 794], "uniformli": [642, 738, 740], "22346112": [642, 739], "0922": [642, 739], "9213753": [642, 739], "12818667": [642, 739], "799": [642, 739], "469": [642, 739], "287": [642, 739], "0366": [642, 739], "26431865": [642, 740], "475": [642, 740], "878": [642, 740], "861": [642, 740], "929": [642, 740], "789": [642, 740], "519": [642, 740], "0435": [642, 740], "381": [642, 740], "4608004": [642, 740], "8458502": [642, 740], "67270088": [642, 740], "31128597": [642, 740], "394": [642, 742], "zeroel": [643, 746], "fourth": [644, 748], "1141": [644, 748], "8101": [644, 748], "9298": [644, 748], "8460": [644, 748], "2119": [644, 748], "3519": [644, 748], "6252": [644, 748], "4033": [644, 748], "7443": [644, 748], "2577": [644, 748], "3707": [644, 748], "0545": [644, 748], "3238": [644, 748], "5944": [644, 748], "0775": [644, 748], "4327": [644, 748], "62519997": [644, 748], "40329999": [644, 748], "59439999": [644, 748], "74430001": [644, 748], "81010002": [644, 748], "84600002": [644, 748], "92979997": [644, 748], "einstein": [646, 758, 804], "117": [646, 758], "intend": [646, 764, 773, 790, 822, 835, 838, 867, 869, 873, 874], "07472222": [646, 765], "00666667": [646, 765], "08966666": [646, 765], "simplicit": [647, 766, 767], "ivy_test": [770, 772, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 817, 818, 819, 822, 825, 827, 833, 841], "test_ivi": [770, 772, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 817, 818, 819, 825, 827, 833, 841, 843], "assert_all_clos": [770, 841], "ret_np": [770, 772, 841], "ret_from_gt_np": [770, 841], "ground_truth_backend": [770, 772, 773, 782, 783, 815, 833, 841], "mark": [770, 814, 817, 819, 822, 843, 848], "assert_same_typ": 770, "ret_from_target": 770, "ret_from_gt": 770, "backend_to_test": [770, 772, 815, 833, 841], "gt_backend": 770, "with_backend": [770, 800], "assert_same_type_and_shap": 770, "this_key_chain": 770, "check_unsupported_devic": 770, "input_devic": 770, "all_as_kwargs_np": [770, 772], "presenc": [770, 826, 839], "check_unsupported_device_and_dtyp": 770, "input_dtyp": [770, 772, 782, 815, 833, 841, 843], "check_unsupported_dtyp": 770, "test_unsupported_funct": 770, "value_test": 770, "ret_np_flat": 770, "ret_np_from_gt_flat": 770, "specific_tolerance_dict": 770, "ret_from_np_gt_flat": 770, "function_test": 772, "args_to_contain": 772, "array_arg": [772, 836], "args_to_frontend": 772, "frontend_array_fn": 772, "arrays_to_frontend": 772, "as_list": 772, "convtru": 772, "nativeclass": 772, "counter": [772, 852], "create_args_kwarg": 772, "args_np": 772, "arg_np_val": 772, "args_idx": 772, "kwargs_np": 772, "kwarg_np_val": 772, "kwargs_idx": 772, "test_flag": [772, 815, 833, 841, 843], "on_devic": [772, 782, 815, 833, 841], "flatten_and_to_np": 772, "flatten_frontend": 772, "flatten_frontend_fw_to_np": 772, "frontend_ret": [772, 841], "isscalar_func": 772, "is_native_array_func": 772, "to_numpy_func": 772, "flatten_frontend_to_np": 772, "get_frontend_ret": 772, "frontend_fn": 772, "frontend_array_funct": 772, "precision_mod": [772, 782, 783, 833], "test_trac": [772, 782, 783, 815, 822, 833], "test_trace_each": [772, 782, 783], "get_ret_and_flattened_np_arrai": 772, "gradient_incompatible_funct": 772, "gradient_test": [772, 843], "rtol_": [772, 815, 833], "atol_": [772, 815, 833, 841], "tolerance_dict": 772, "gradient_unsupported_dtyp": 772, "kwargs_to_args_n_kwarg": 772, "num_positional_arg": [772, 782, 783, 815, 833, 841, 843], "port": [772, 860], "test_frontend_funct": [772, 841], "fn_tree": [772, 773, 783, 815, 833, 840, 841, 843], "gt_fn_tree": [772, 783], "test_valu": [772, 841, 843], "frontend_function_flag": [772, 782], "functiontestflag": [772, 782, 815, 833], "with_out": [772, 782, 815, 833, 841, 843], "instance_method": [772, 782, 815, 833, 843], "as_vari": [772, 782, 815, 833, 841, 843], "namespac": [772, 817, 828, 837, 840, 841, 844, 848, 853], "arg_": 772, "test_frontend_method": [772, 841], "init_input_dtyp": [772, 841], "method_input_dtyp": [772, 841], "init_flag": [772, 841, 843], "method_flag": [772, 782, 841, 843], "init_all_as_kwargs_np": [772, 841], "method_all_as_kwargs_np": [772, 841], "frontend_method_data": [772, 841], "init_as_variable_flag": [772, 783], "dictat": [772, 823, 830, 835, 839], "init_num_positional_arg": [772, 783], "init_native_array_flag": 772, "with_v": 772, "ret_gt": 772, "test_funct": [772, 815, 818, 819, 827, 833, 841, 843], "fn_name": [772, 773, 783, 815, 824, 833, 841, 843], "return_flat_np_arrai": 772, "as_variable_flag": [772, 783, 843], "native_array_flag": [772, 783, 843], "container_flag": [772, 782, 783, 843], "test_function_backend_comput": 772, "test_function_ground_truth_comput": 772, "arg_np_arrai": 772, "arrays_args_indic": 772, "arrays_kwargs_indic": 772, "kwarg_np_arrai": 772, "test_gradient_backend_comput": 772, "test_gradient_ground_truth_comput": 772, "test_method": 772, "method_nam": [772, 781, 783, 841], "init_with_v": 772, "method_with_v": 772, "test_gradi": [772, 782, 783, 815, 833, 843], "method_as_variable_flag": [772, 783], "method_num_positional_arg": [772, 783], "method_native_array_flag": 772, "method_container_flag": [772, 783], "test_method_backend_comput": 772, "test_method_ground_truth_comput": 772, "org_con_data": 772, "args_np_method": 772, "met_arg_np_v": 772, "met_args_idx": 772, "kwargs_np_method": 772, "met_kwarg_np_v": 772, "met_kwargs_idx": 772, "v_np": 772, "traced_if_requir": 772, "wrap_frontend_function_arg": 772, "holder": 773, "current_frontend_config": 773, "0x759b5a5ddf00": 773, "interruptedtest": 773, "test_interrupt": 773, "baseexcept": 773, "tri": [773, 828], "testdata": 773, "supported_device_dtyp": 773, "is_method": 773, "setup_api_test": 773, "test_data": 773, "setup_frontend_test": 773, "teardown_api_test": 773, "teardown_frontend_test": 773, "hypothesis_help": [775, 776, 777, 778], "array_help": 775, "array_and_broadcastable_shap": 775, "searchstrategi": [775, 776, 777, 778, 782, 783, 843], "array_bool": [775, 843], "min_valu": [775, 776, 777, 778, 815, 833, 841, 843], "max_valu": [775, 776, 777, 778, 841, 843], "ex": [775, 776, 777, 778, 783, 827, 863], "strategi": [775, 776, 777, 778, 782, 783, 817, 841], "array_helpers_dtype_info_help": 775, "kind_dtyp": [775, 777], "array_indices_axi": 775, "array_dtyp": [775, 776, 843], "indices_dtyp": 775, "get_dtyp": [775, 776, 815, 833, 841, 843], "abs_smallest_v": [775, 777, 778], "large_abs_safety_factor": [775, 777, 778, 815, 833, 841, 843], "small_abs_safety_factor": [775, 777, 778, 815, 833, 841], "safety_factor_scal": [775, 777, 778, 841, 843], "disable_random_axi": 775, "axis_zero": 775, "allow_inf": [775, 778, 841, 843], "min_num_dim": [775, 777, 841, 843], "max_num_dim": [775, 777, 841, 843], "min_dim_s": [775, 777, 841, 843], "max_dim_s": [775, 777, 841], "first_dimension_onli": 775, "indices_same_dim": 775, "valid_bound": 775, "safeti": [775, 777, 778, 869], "0002": [775, 778], "hypothesi": [775, 777, 783, 817, 819, 822, 827, 837], "65536": 775, "44758124e": [775, 843], "array_indices_put_along_axi": 775, "values_dtyp": 775, "array_valu": [775, 843], "allow_nan": [775, 778, 843], "allow_subnorm": [775, 778, 843], "exclude_min": [775, 778, 843], "exclude_max": [775, 778], "subnorm": [775, 778], "get_shap": [775, 777, 841, 843], "1806": 775, "36912": 775, "6955": 775, "59576": 775, "1025": 775, "arrays_and_ax": 775, "available_dtyp": [775, 776, 815, 833, 841, 843], "allow_non": [775, 777, 841, 843], "return_dtyp": 775, "force_int_axi": 775, "26e": 775, "10e": 775, "24322108": 775, "26446279e": 775, "96046448e": 775, "008": 775, "17549435e": 775, "038": 775, "06541027e": 775, "13725760e": 775, "07143888": 775, "arrays_for_pool": 775, "min_dim": 775, "max_dim": 775, "min_sid": 775, "max_sid": 775, "explicit_or_str_pad": 775, "only_explicit_pad": 775, "return_dil": 775, "mixed_fn_compo": [775, 776, 777, 778, 843], "return_data_format": 775, "cond_data_gen_help": 775, "create_concatenable_arrays_dtyp": 775, "min_num_arrai": 775, "max_num_arrai": 775, "concat_dim": 775, "common_shap": [775, 843], "stackabl": 775, "given_common_shap": 775, "create_nested_input": 775, "leaf_valu": 775, "dtype_and_valu": [775, 815, 833, 841, 843], "num_arrai": [775, 776, 841, 843], "shared_dtyp": [775, 776, 841], "ret_shap": 775, "array_api_dtyp": [775, 776], "shape_kei": 775, "37915": 775, "6322": 775, "26765": 775, "12413": 775, "26986": 775, "34665": 775, "000e": 775, "711e": 775, "100e": 775, "955e": [775, 843], "40817": 775, "56193": 775, "29200": 775, "5851": 775, "9746": 775, "9604645e": 775, "103": 775, "41795": 775, "1170789994": 775, "44251": 775, "44209": 775, "433075925": 775, "24791": 775, "24691": 775, "24892": 775, "16711": 775, "972": 775, "15357": 775, "72057594037927936": 775, "dtype_array_queri": 775, "allow_mask": 775, "allow_neg_step": 775, "dtype_array_query_v": 775, "dtype_values_axi": [775, 843], "min_axi": 775, "max_axi": 775, "valid_axi": 775, "allow_neg_ax": 775, "min_axes_s": 775, "max_axes_s": 775, "force_tuple_axi": 775, "29788": 775, "62222885e": 775, "68281172e": 775, "257j": 775, "40129846e": 775, "90000000e": 775, "63426649e": 775, "91931887e": 775, "29488e": 775, "14361019e": 775, "12445": 775, "einsum_help": 775, "get_first_solve_batch_matrix": 775, "choose_adjoint": 775, "get_second_solve_batch_matrix": 775, "get_first_solve_matrix": 775, "allow_simplifi": 775, "choose_sid": 775, "xa": 775, "get_second_solve_matrix": 775, "list_of_s": 775, "sampled_from": [775, 841, 843], "min_siz": [775, 777, 783, 843], "max_siz": [775, 777, 783, 843], "size_bound": [775, 843], "999999999999999": 775, "9394938006792373": 775, "mutually_broadcastable_shap": 775, "num_shap": 775, "base_shap": 775, "dtype_help": 776, "univers": [776, 840, 858], "cast_filt": 776, "cast_filter_help": 776, "current_backend": [776, 800, 817, 824, 832, 836, 841, 844, 848], "get_castable_dtyp": 776, "castabl": 776, "prune_funct": 776, "intersect": [776, 827, 843], "signed_integ": 776, "real_and_complex": 776, "float_and_complex": 776, "general_help": 777, "broadcasterror": 777, "apply_safety_factor": 777, "dims_and_offset": 777, "ensure_dim_uniqu": 777, "embedding_help": 777, "general_helpers_dtype_info_help": 777, "get_axi": [777, 843], "allow_neg": 777, "sort_valu": 777, "force_tupl": 777, "force_int": 777, "assertionerror": [777, 815, 822, 832, 833, 841, 843], "get_bound": [777, 843], "get_mean_std": 777, "matrix_is_st": 777, "cond_limit": 777, "instabl": [777, 815, 828, 833], "computation": [777, 818], "prone": [777, 828], "thumb": 777, "gradual": 777, "strong": [777, 854, 859, 869], "collinear": 777, "reshape_shap": [777, 843], "sizes_": 777, "two_broadcastable_shap": 777, "x_and_filt": 777, "number_help": 778, "arbitrarili": [778, 851], "safety_factor": 778, "backend_proc": 779, "input_queu": 779, "output_queu": 779, "frontend_proc": 779, "pipeline_help": 780, "backendhandl": 780, "update_backend": [780, 841], "backendhandlermod": 780, "enum": 780, "setbackend": 780, "withbackend": 780, "withbackendcontext": 780, "get_frontend_config": 780, "frontendmethoddata": 781, "ivy_init_modul": 781, "framework_init_modul": 781, "init_nam": 781, "test_parameter_flag": 782, "dynamicflag": [782, 783], "frontendfunctiontestflag": [782, 833], "with_copi": 782, "generate_frontend_arrai": [782, 783, 833], "testflag": 782, "apply_flag": 782, "args_to_iter": 782, "frontendinittestflag": 782, "frontendmethodtestflag": 782, "test_cython_wrapp": [782, 783], "initmethodtestflag": 782, "methodtestflag": 782, "build_flag": 782, "frontend_init_flag": 782, "frontend_method_flag": 782, "function_flag": 782, "init_method_flag": 782, "testing_help": 783, "handle_exampl": [783, 843], "test_exampl": [783, 843], "test_frontend_exampl": [783, 843], "test_method_exampl": [783, 843], "test_frontend_method_exampl": [783, 843], "given_kwarg": 783, "handle_frontend_method": [783, 841, 843], "class_tre": [783, 841], "init_tre": [783, 841], "init_native_arrai": 783, "_as_varaible_strategi": 783, "method_native_arrai": 783, "test_inplac": [783, 843], "_given_kwarg": 783, "test_compil": 783, "handle_frontend_test": [783, 841, 843], "alias": [783, 817, 840, 841], "number_positional_arg": [783, 841], "test_with_out": [783, 841, 843], "test_with_copi": 783, "handle_method": [783, 843], "method_tre": [783, 841, 843], "_gradient_strategi": 783, "handle_test": [783, 815, 833, 843], "test_instance_method": [783, 843], "num_positional_args_help": 783, "num_positional_args_method": 783, "geglu": 787, "leakyrelu": 787, "logsoftmax": 787, "from_flax_modul": 788, "native_modul": 788, "params_fx": 788, "rng_seed": 788, "constructor_arg": 788, "constructor_kwarg": 788, "instance_arg": 788, "instance_kwarg": 788, "flax": [788, 853, 854, 860, 869], "from_haiku_modul": 788, "params_hk": 788, "from_paddle_modul": 788, "from_torch_modul": 788, "dedic": [788, 820, 835, 846, 850, 852], "to_keras_modul": 788, "native_module_class": 788, "modulehelp": [789, 793], "create_vari": [790, 852], "var_shap": [790, 852], "fan_out": [790, 852], "fan_in": [790, 852], "rectangular": 790, "firstlayersiren": 790, "siren": 790, "glorotuniform": [790, 791, 852], "glorot": 790, "xavier": 790, "neuron": 790, "w_1x_1": 790, "w_2x_2": 790, "w_nx_n": 790, "w_i": 790, "vanish": 790, "explod": [790, 857, 858], "kaimingnorm": 790, "fan_mod": [790, 852], "kaim": 790, "he": 790, "negative_slop": 790, "fan": 790, "propog": 790, "fan_sum": [790, 852], "Ones": 790, "randomnorm": 790, "stddev": 790, "w0": 790, "wlim": 790, "predefin": 790, "fan_avg": 790, "adaptiveavgpool1d": 791, "avgpool1d": 791, "implicit": [791, 826, 831, 840, 843, 848, 869], "avgpool2d": 791, "avgpool3d": 791, "e501": 791, "filter_s": 791, "weight_initi": [791, 852], "bias_initi": [791, 852], "0x759b66ad8580": 791, "0x759b66ad85e0": 791, "conv1dtranspos": 791, "0x759b66ad8640": 791, "0x759b66ad86a0": 791, "filter_shap": 791, "0x759b66ad8700": 791, "0x759b66ad8760": 791, "0x759b66ad87c0": 791, "0x759b66ad8820": 791, "0x759b66ad8940": 791, "0x759b66ad89a0": 791, "conv3dtranspos": 791, "0x759b66ad8a00": 791, "0x759b66ad8a60": 791, "depthwiseconv2d": 791, "num_channel": 791, "0x759b66ad8880": 791, "0x759b66ad88e0": 791, "bernoul": 791, "num_embed": 791, "embedding_dim": 791, "padding_idx": 791, "lookup": 791, "num_embeddingss": 791, "renorm": 791, "insensit": 791, "return_st": 791, "0x759b66ad8ac0": 791, "get_initial_st": 791, "0x759b66ad84c0": 791, "0x759b66ad8520": 791, "maxpool1d": 791, "maxpool3d": 791, "multiheadattent": 791, "embed_dim": 791, "head_dim": 791, "dropout_r": 791, "use_proj_bia": 791, "attention_ax": 791, "build_mod": [791, 792, 793], "on_init": [791, 793], "parallel": [791, 825, 869, 873, 874], "binarycrossentropyloss": 792, "store_var": [792, 793], "with_partial_v": [792, 793], "logpoissonloss": 792, "modulemeta": 793, "temporarili": [793, 815, 822, 833], "from_cal": 793, "module_dict": 793, "register_buff": 793, "register_paramet": 793, "weights_path": 793, "randomness_factor": 793, "with_edge_label": 793, "with_arg_label": 793, "with_output_label": 793, "output_connected_onli": 793, "highlight_subgraph": 793, "trace_kwarg": 793, "_unified_ivy_graph": 793, "_call": 793, "num_featur": 794, "trail": 794, "layernorm": 794, "normalized_shap": 794, "elementwise_affin": 794, "set_stat": [795, 852], "adamw": 795, "weight_decai": 795, "init_on_first_step": 795, "fallback_to_non_trac": 795, "ignore_miss": 795, "privat": [795, 840, 843], "_step": [795, 852], "stochast": [795, 869], "sub_modul": 796, "check_al": 797, "check_all_or_any_fn": 797, "check_ani": 797, "check_dev_correct_format": 797, "check_dimens": 797, "check_elem_in_list": [797, 836, 839, 840], "elem": 797, "check_equ": [797, 840], "check_exist": 797, "check_fals": 797, "check_gather_input_valid": 797, "check_gather_nd_input_valid": 797, "check_great": 797, "allow_equ": [797, 832], "check_inplace_sizes_valid": [797, 839], "check_isinst": 797, "allowed_typ": 797, "check_kernel_padding_s": 797, "padding_s": 797, "check_less": [797, 832], "check_one_way_broadcast": 797, "check_same_dtyp": 797, "check_shapes_broadcast": 797, "check_tru": 797, "check_unsorted_segment_valid_param": 797, "ast_help": 799, "importtransform": 799, "nodetransform": 799, "impersonate_import": 799, "tree": [799, 828], "local_ivy_id": 799, "visit_import": 799, "visit_importfrom": 799, "ivyload": 799, "loader": [799, 851, 854], "exec_modul": 799, "ivypathfind": 799, "metapathfind": 799, "find_spec": 799, "fullnam": 799, "contextmanag": 800, "choose_random_backend": 800, "global_backend": 800, "dynamic_backend_convert": 800, "backend_stack": [800, 848], "prevent_access_loc": 800, "previous_backend": [800, 824], "Or": [800, 811, 813, 818, 839, 851], "set_backend_to_specific_vers": 800, "set_jax_backend": 800, "set_mxnet_backend": 800, "mx": 800, "set_numpy_backend": 800, "set_paddle_backend": 800, "set_tensorflow_backend": 800, "set_torch_backend": 800, "sub_backend_handl": 801, "clear_sub_backend": 801, "find_available_sub_backend": 801, "sub_backends_loc": 801, "fn_name_from_version_specific_fn_nam": 801, "fn_name_from_version_specific_fn_name_sub_backend": 801, "sub_backend_vers": 801, "backend_vers": [801, 815, 828, 833], "set_sub_backend": 801, "sub_backend_str": 801, "set_sub_backend_to_specific_vers": 801, "sub_backend": 801, "unset_sub_backend": 801, "check_for_binari": 802, "cleanup_and_fetch_binari": [802, 818], "clean": [802, 819, 844, 848, 849, 851], "dynamic_import": 803, "import_modul": [803, 848], "einsum_pars": 804, "convert_interleaved_input": 804, "interleav": 804, "convert_subscript": 804, "old_sub": 804, "symbol_map": 804, "subscript": [804, 805], "oe": 804, "ellipsi": [804, 805], "find_output_shap": 804, "find_output_str": 804, "canon": 804, "gen_unused_symbol": 804, "abd": [804, 805], "get_symbol": 804, "letter": 804, "resort": 804, "unicod": 804, "charact": [804, 840, 859], "chr": 804, "surrog": 804, "\u0155": 804, "20000": 804, "\u4eac": 804, "has_valid_einsum_chars_onli": 804, "einsum_str": 804, "abaz": 804, "\u00f6ver": 804, "is_valid_einsum_char": 804, "\u01f5": 804, "legalise_einsum_expr": 804, "reproduct": [804, 805], "pars": [804, 805, 825, 830, 854], "intak": 804, "contract_path": 804, "parse_einsum_input": [804, 805], "einsum_eqn": 804, "legalis": 804, "legalise_einsum_eqn": 804, "za": [804, 805], "xza": [804, 805], "xz": [804, 805], "possibly_convert_to_numpi": 804, "myshap": 804, "__main__": 804, "0x10f850710": 804, "einsum_path_help": 805, "can_dot": 805, "idx_remov": 805, "bla": 805, "benefici": 805, "movement": 805, "costli": 805, "gemm": 805, "ijj": 805, "ddot": 805, "ikj": 805, "compute_size_by_dict": 805, "idx_dict": 805, "abbc": 805, "find_contract": 805, "input_set": 805, "output_set": 805, "lh": 805, "rh": 805, "new_result": 805, "idx_contract": 805, "iset": 805, "oset": 805, "bdc": 805, "flop_count": 805, "num_term": 805, "size_dictionari": 805, "flop": [805, 809], "greedy_path": 805, "memory_limit": 805, "exhaust": [805, 839, 843, 866, 875], "indices_remov": 805, "priorit": [805, 817, 842, 846], "hadamard": 805, "cubic": 805, "greedi": 805, "idx_siz": 805, "optimal_path": 805, "siev": 805, "input_str": 805, "output_str": 805, "parse_possible_contract": 805, "path_cost": 805, "naive_cost": 805, "propos": [805, 819, 840, 846, 869], "intermediari": [805, 824], "unoptim": 805, "new_input_set": 805, "update_other_result": 805, "provision": 805, "_parse_possible_contract": 805, "mod_result": 805, "inplaceupdateexcept": 806, "include_backend": [806, 832], "ivyattributeerror": [806, 832], "attributeerror": [806, 832, 850], "ivybroadcastshapeerror": [806, 832], "ivydeviceerror": 806, "ivydtypepromotionerror": [806, 832], "ivyindexerror": [806, 832], "ivyinvalidbackendexcept": 806, "ivynotimplementedexcept": [806, 832], "notimplementederror": 806, "ivyvalueerror": [806, 832], "handle_except": [806, 835, 837], "add_array_spec": 807, "fn_array_spec": 807, "set_logging_mod": 808, "debug": [808, 814, 818, 819, 826, 827, 838, 843, 846, 851, 869, 877], "unset_logging_mod": 808, "print_stat": 809, "viz": 809, "snakeviz": 809, "bonu": 809, "cprofil": 809, "tensorflow_profile_start": 809, "logdir": 809, "host_tracer_level": 809, "python_tracer_level": 809, "device_tracer_level": 809, "delay_m": 809, "toggl": [809, 819], "timestamp": 809, "awai": [809, 811, 867, 869], "millisecond": 809, "guess": 809, "tensorflow_profile_stop": 809, "torch_profiler_init": 809, "schedul": [809, 827, 854, 869, 876], "on_trace_readi": 809, "record_shap": 809, "profile_memori": 809, "with_stack": 809, "with_flop": 809, "with_modul": 809, "experimental_config": 809, "profileract": 809, "record_and_sav": 809, "dealloc": 809, "record": [809, 818, 854, 870], "callstack": 809, "aten": 809, "torchscript": [809, 848, 856, 876], "_experimentalconfig": 809, "kineto": 809, "torch_profiler_start": 809, "torch_profiler_stop": 809, "cprint": [810, 848], "pilot": [811, 816, 855], "grow": [811, 814, 820, 869, 877], "peopl": [811, 816, 818, 819, 821, 869, 871], "brief": [811, 839, 843], "idea": [811, 817, 842, 844, 849, 860, 868], "docker": [811, 815, 816, 833], "challeng": [811, 817, 824, 875], "pull": [811, 812, 814, 817, 818, 822, 830, 834, 844, 846, 854, 855, 860], "jax_fn": 811, "jax_x": 811, "torch_x": 811, "torch_fn": 811, "shorter": [811, 850], "ensp": 811, "customiz": [811, 825], "15c235f": 811, "deepmind_perceiver_io": 811, "sm_framework": 811, "segmentation_model": 811, "sm": 811, "torch_sm": 811, "metric": [811, 854], "iou_scor": 811, "rax": 811, "torch_rax": 811, "poly1_softmax_loss": 811, "madmom": 811, "madmon": 811, "torch_madmom": 811, "freq": 811, "audio": 811, "hz2midi": 811, "torch_loss": 811, "maxpooling1d": 811, "pool_siz": 811, "tf_kornia": 811, "tf_rax": 811, "tf_madmom": 811, "tf_loss": 811, "_forward_classifi": [811, 863], "forward_classifi": [811, 863], "hk_eff_encod": 811, "dummy_x": 811, "jax_sm": 811, "jax_madmom": 811, "jax_loss": 811, "np_kornia": 811, "np_sm": 811, "np_rax": 811, "np_loss": 811, "yourself": [811, 817, 819, 834, 843, 846], "favourit": [811, 818], "hyperparam": 811, "instantli": [811, 863], "flexibl": [811, 826, 828, 835, 838, 844, 846, 869], "everyon": [811, 812, 817, 818, 819, 854, 860], "plan": [811, 855], "interoper": [811, 859, 866, 867, 869, 872], "essenti": [811, 814, 817, 824, 826, 829, 830, 836, 839, 840, 841, 858, 859, 875], "handler": [811, 847, 849, 853, 856], "facilit": [811, 820], "mse_loss": 811, "jax_ms": 811, "tf_mse": 811, "np_mse": 811, "torch_ms": 811, "someth": [811, 815, 819, 824, 833, 834, 844, 851, 852, 854, 855, 875], "motiv": [811, 850, 859], "contextu": 811, "explos": [811, 857, 859], "adher": [811, 822, 828, 831, 835, 846, 848, 853, 858, 859, 865, 866, 875], "orient": 811, "contributor": [811, 812, 815, 817, 818, 819, 833, 840, 847, 869], "believ": [811, 819, 859], "feedback": [811, 817, 827], "appreci": [811, 820], "amaz": [811, 877], "journei": [811, 812, 820], "ambiti": 811, "season": 811, "perfect": 811, "fellow": 811, "twitter": 811, "sneak": 811, "peek": 811, "proper": [811, 817, 840, 863], "credit": 811, "accompani": 811, "lenton2021ivi": 811, "inter": 811, "author": [811, 817, 819, 867, 871], "lenton": 811, "daniel": 811, "pardo": 811, "fabio": 811, "falck": 811, "fabian": 811, "jame": 811, "stephen": 811, "clark": 811, "ronald": 811, "journal": 811, "arxiv": 811, "preprint": 811, "2102": 811, "02886": 811, "year": [811, 822, 854, 858, 860, 869], "strongli": [812, 818, 840, 875, 876], "engag": [812, 819, 820, 859], "skill": [812, 820, 871], "veteran": 812, "effort": [812, 817, 854, 859, 865, 869, 875], "board": [812, 825], "stage": [812, 819, 821, 822, 825, 843, 859, 869], "excit": [812, 821, 859], "reward": [812, 820], "badg": [812, 820, 827, 877], "program": [812, 839, 866, 867, 869, 872, 873, 876], "climb": [812, 816], "Be": [813, 825], "awar": [813, 825, 832, 834], "linux": [813, 818, 819, 825, 872, 874], "regularli": [813, 825, 827], "internet": [813, 825], "codespac": [813, 825, 833], "make_doc": 813, "sh": [813, 818, 819, 822, 827], "pwd": 813, "ssh": [813, 827], "make_docs_without_dock": [813, 825], "award": 814, "formal": 814, "dynamo": [814, 877], "earn": [814, 820], "thoroughli": [814, 822], "valuabl": [814, 817, 819], "merg": [814, 817, 819, 822, 827, 840, 869, 877], "meet": [814, 820, 840], "qualiti": [814, 819], "wizard": [814, 877], "impact": [814, 827, 843, 852, 871], "inspector": [814, 877], "acknowledg": [814, 820], "honour": 814, "dilig": 814, "bronz": [814, 820, 877], "silver": [814, 820, 877], "gold": [814, 820, 854, 877], "expertis": [814, 820, 871], "assist": [815, 833], "runtimeerror": [815, 833], "logaddexp2_cpu": [815, 833], "falsifi": [815, 822, 833, 843], "test_logaddexp2": [815, 833], "backend_fw": [815, 833, 841], "dtype_and_x": [815, 833, 841, 843], "reproduce_failur": [815, 822, 833, 837, 843], "axicy2bkaamobaar2waaaacvaai": [815, 833], "decoartor": [815, 833], "with_unsupported_dtyp": [815, 828, 833, 840], "25830078125": [815, 833], "258544921875": [815, 833], "test_acosh": [815, 833], "axicy2baabyqwqgiaabdaai": [815, 833], "quit": [815, 819, 823, 830, 831, 833, 836, 837, 843, 846, 869, 875], "41421356": [815, 833], "41421356e": [815, 833], "34078079e": [815, 833], "154": [815, 833], "test_ab": [815, 818, 833, 843], "000j": [815, 833], "154j": [815, 833], "axicy2zkyaiibibgziaaxqhexsaab7juqaaamteazq": [815, 833], "thread": [815, 817, 818, 819, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 846, 851, 869], "pycharm": [815, 841, 843], "steep": 816, "curv": 816, "realpython": 816, "pyn": 816, "exchang": [816, 859, 865, 867], "stuck": [816, 817], "spell": 816, "sound": [816, 827, 847], "frequent": [817, 819, 824, 869], "outlin": [817, 818, 819, 821, 826, 828, 831, 836, 839, 840, 843], "broad": [817, 871], "individu": [817, 819, 822, 824, 828, 836, 840, 869, 872, 875, 876], "clearli": [817, 819, 830, 841, 843, 859, 873], "straightforward": [817, 820, 851], "lie": 817, "urgent": 817, "encourag": [817, 820, 834, 854, 859], "tackl": [817, 820, 840], "categoris": [817, 822, 840], "comfort": [817, 818, 832], "linkag": 817, "pr": [817, 819, 820, 822, 834, 840, 841, 843], "confid": 817, "submit": [817, 834], "scipi": [817, 859, 871, 876], "mindspor": 817, "simpler": [817, 819, 834, 862, 870, 876], "member": [817, 819, 840, 855, 859], "comment": [817, 818, 819, 822, 828, 834, 840, 842, 846], "composition": 817, "feasibl": [817, 827, 843, 859, 862], "pend": 817, "helpfulli": [817, 846, 867], "problemat": [817, 818], "unimpl": 817, "issue_link": 817, "alias_nam": 817, "notic": [817, 823, 827, 833, 834, 843, 846, 862], "push": [817, 819, 820, 822, 841, 843, 875], "liner": 817, "meanwhil": [817, 827], "reselect": 817, "faithfulli": 817, "creation_routin": [817, 841], "indexing_routin": 817, "ma": 817, "manipulation_routin": 817, "mathematical_funct": [817, 840], "sorting_searching_count": 817, "ufunc": [817, 840], "matrix_and_vector_product": 817, "matrix_eigenvalu": 817, "norms_and_other_numb": 817, "solving_equations_and_inverting_matric": 817, "gleam": 817, "uncom": 817, "test_numpy_inn": 817, "test_frontend": [817, 827, 833, 841], "unsur": [817, 843], "statu": [817, 820, 827, 834, 860], "refrain": 817, "checkbox": [817, 818], "aforement": 817, "parent": [817, 827, 850], "arraywithelementwis": [817, 823, 850], "containerwithmanipul": 817, "thorough": [817, 831, 835, 843], "add_reformatting_checklist_": 817, "category_nam": [817, 828, 829, 831, 835, 836], "autom": [817, 827, 834, 843, 856, 871], "bot": [817, 834], "markdown": [817, 825], "patient": [817, 818], "elabor": 817, "struggl": 817, "assigne": 817, "status": 817, "central": [817, 834, 846, 859, 875], "analyz": [817, 856], "relevant_submodul": 817, "roadmap": [817, 827], "deem": [817, 840], "subtask": 817, "clearer": [817, 832, 841, 851], "backend_nam": [817, 824, 828, 829, 831, 835, 836, 837], "rare": [817, 829, 854, 874], "button": [817, 818, 819, 833], "centr": 817, "predetermin": 817, "superset": [817, 821, 836, 839, 854], "reserv": 817, "happi": [818, 833, 854, 860], "your_usernam": [818, 833], "your_fold": [818, 833], "enter": [818, 819, 823, 828, 829, 833, 835, 837], "sync": [818, 822, 833], "remot": [818, 822, 833, 834], "nutshel": [818, 835], "hook": [818, 834, 842], "lint": [818, 821], "succe": [818, 862], "whatev": [818, 826, 854], "elig": [818, 820], "student": 818, "licens": [818, 872], "remind": 818, "expir": 818, "won": [818, 819, 826, 828, 853, 855, 859, 860, 862, 863, 864], "profession": 818, "trial": 818, "jetbrain": 818, "month": [818, 858], "bui": [818, 875], "paid": 818, "rapid": [818, 858, 859, 869], "pace": 818, "person": [818, 819], "abil": [818, 846, 849, 854, 869], "perhap": [818, 850, 851, 852, 854, 875], "conda": [818, 859, 871], "ivy_dev": [818, 819], "icon": [818, 819, 833], "panel": 818, "vscode": [818, 833], "palett": 818, "ctrl": [818, 819], "mac": [818, 819], "intel": [818, 859, 867, 874], "m1": 818, "optional_apple_silicon_1": 818, "optional_apple_silicon_2": 818, "array_api_test": [818, 819, 822, 833], "test_array_api": [818, 819, 822, 833, 843], "suit": [818, 821, 822, 827, 833, 842, 843, 851, 859, 869, 875], "cmd": 818, "bat": [818, 819], "virtualenv": 818, "tick": [818, 819, 827], "nz2": 818, "openssl": 818, "libssl1": 818, "1_1": 818, "1f": 818, "1ubuntu2": 818, "20_amd64": 818, "deb": 818, "dpkg": 818, "mitig": [818, 875], "desktop": [818, 833], "powershel": 818, "admin": 818, "deploy": [818, 863, 868, 871, 872, 875, 876], "menu": [818, 833], "introspect": 818, "dialog": 818, "persist": 818, "earlier": [818, 819, 828, 844], "virtualis": 818, "bio": [818, 859], "dropdown": [818, 827], "dockerfil": 818, "ca": 818, "certif": 818, "gnupg": 818, "lsb": 818, "keyr": 818, "fssl": 818, "gpg": 818, "dearmor": 818, "echo": [818, 827, 855], "arch": 818, "lsb_releas": 818, "null": [818, 833], "ce": 818, "cli": 818, "containerd": 818, "systemctl": 818, "softwar": [818, 819, 858, 859, 867, 872, 873, 874], "press": [818, 819, 851], "4a": 818, "socket": 818, "rwx": 818, "sock": 818, "pid": 818, "editor": 818, "pytest": [818, 819, 822, 827, 833, 837, 843], "keyboard": 818, "screenshot": 818, "pop": [818, 833, 859], "test_elementwis": 818, "bar": [818, 833], "shell": [818, 819, 822, 827], "setup_test": 818, "run_ivy_core_test": 818, "run_ivy_nn_test": 818, "run_ivy_stateful_test": 818, "run_test": [818, 827], "test_depend": 818, "test_ivy_cor": 818, "test_ivy_nn": 818, "test_ivy_st": 818, "unix": 818, "test_": [818, 841], "test_cor": [818, 819, 841], "offici": [818, 828, 848], "wish": [818, 840], "ivy_nn": 818, "ivy_st": 818, "header": [818, 819, 842], "arrow": 818, "test_stat": 818, "test_submodule_nam": 818, "test_function_nam": 818, "debugg": 818, "studio": [818, 833, 843], "afterward": [818, 851], "background": [818, 825, 833, 869, 871], "overlap": [818, 827, 833, 844, 846, 870], "test_file_path": [818, 833], "test_fn_nam": [818, 833], "engin": [818, 869, 871, 872], "devcontain": 818, "comma": 818, "postcreatecommand": 818, "post_create_command": 818, "poststartcommand": 818, "safe": [818, 840], "containerworkspacefold": 818, "reopen": 818, "test_fle_path": 818, "slash": 818, "isol": [818, 819, 870, 875], "container": 818, "intens": 818, "headach": 818, "arm": [818, 819], "vm": [818, 827], "azur": 818, "cloud": [818, 827, 871], "theme": [818, 825], "ipad": 818, "browser": [818, 825], "quota": 818, "requisit": 818, "pane": [818, 819, 827], "dockerfilegpu": 818, "ivv": 818, "multiv": 818, "multivers": [818, 844], "dockerfilemultivers": 818, "dockerhub": 818, "upto": [818, 819], "minut": [818, 827], "launch": 818, "kindli": [818, 842], "guidelin": 818, "colour": 818, "chanc": 818, "troubleshoot": 818, "ever": 818, "flask": [818, 833], "toolbar": [818, 819, 833], "_array_modul": [818, 822, 833], "refresh": [818, 833], "pytestarg": [818, 833], "unittesten": [818, 833], "pytesten": [818, 833], "autotestdiscoveronsaveen": [818, 833], "conftest": 818, "serv": [818, 819, 823, 826, 835, 836, 840, 841, 843, 846, 847, 856, 867], "aren": [818, 828], "available_config": 818, "cp310": 818, "x86": [818, 874], "newer": [818, 843], "_compil": 818, "meantim": 818, "suffici": [818, 830, 840, 843], "bear": [818, 823, 826, 828, 840], "tendenc": 819, "land": 819, "unrel": [819, 859], "fly": [819, 869], "internship": 819, "suspect": 819, "iii": 819, "issue_numb": 819, "12345": 819, "rememb": 819, "respond": 819, "dai": [819, 834], "freed": 819, "situat": [819, 827, 853], "obvious": [819, 827], "hypothet": 819, "frustrat": 819, "delai": [819, 862], "busi": 819, "inact": 819, "unfairli": 819, "investig": 819, "name_of_your_branch": 819, "date": [819, 822], "complic": [819, 841, 848], "merge_with_upstream": 819, "abort": 819, "tediou": [819, 830, 846], "stash": [819, 834], "reinstat": 819, "uncommit": 819, "unstag": [819, 834], "untrack": 819, "atlassian": 819, "wrote": 819, "piec": [819, 823, 836, 837, 848, 862, 865, 867], "blame": 819, "eg": 819, "week": [819, 860], "grep": 819, "commit_id": 819, "handi": 819, "histori": 819, "approv": 819, "someon": [819, 854], "hash": [819, 851], "cancel": 819, "speedup": 819, "unavail": 819, "tickbox": 819, "intent": [819, 839], "discourag": 819, "adopt": [819, 823, 835, 846, 859, 868, 869, 874], "philosophi": 819, "infrequ": 819, "earli": [819, 869], "wast": [819, 827], "spot": [819, 830, 836], "mistak": 819, "mountain": 819, "advoc": [819, 854], "session": [819, 869], "beauti": 819, "particularli": [819, 851, 854, 862, 867], "care": [819, 829, 840, 846, 853, 859], "undo": 819, "stress": 819, "nifti": 819, "reassur": 819, "local_path_to_ivi": 819, "subfold": [819, 841, 843, 844], "dep": 819, "fresh": 819, "arsen": 819, "exec": 819, "ivy_contain": 819, "test_imag": 819, "test_random_crop": 819, "test_creation_funct": 819, "test_arang": 819, "cursor": 819, "alt": [819, 877], "breakpoint": 819, "gutter": 819, "caret": 819, "f8": 819, "f9": 819, "Into": 819, "f7": 819, "smart": 819, "fragment": [819, 865, 867, 871], "wherein": [819, 836, 843], "failur": [819, 827, 841, 843], "embark": 820, "innov": [820, 859], "door": [820, 854], "elev": 820, "mission": [820, 859, 871], "opportun": 820, "testament": [820, 842], "stone": 820, "gift": 820, "acquir": 820, "peak": 820, "privileg": [820, 871], "bounti": 820, "cash": 820, "delight": 820, "weed": [821, 847], "tour": 821, "formatt": [821, 834], "conjunct": 822, "establish": [822, 871], "sens": [822, 828, 830, 840, 842, 850], "unconnect": 822, "strang": [822, 850], "test_linalg": [822, 841], "test_set_funct": 822, "test_signatur": 822, "excess": [822, 824, 830], "array_modul": 822, "vv": 822, "test_manipulation_funct": 822, "test_concat": [822, 843], "nb": 822, "liber": 822, "______________________": 822, "test_remaind": 822, "_______________________": 822, "test_operators_and_elementwise_funct": 822, "1264": 822, "1277": 822, "binary_param_assert_against_refimpl": 822, "ctx": 822, "620": 822, "binary_assert_against_refimpl": 822, "324": 822, "scalar_o": 822, "17304064": 822, "binaryparamcontext": 822, "axic42baaowcnp": 822, "rumwmabaear0": 822, "make_binary_param": 822, "numeric_dtyp": 822, "left_strat": 822, "left_sym": 822, "right_strat": 822, "right_sym": 822, "right_is_scalar": 822, "binary_param_assert_dtyp": 822, "binary_param_assert_shap": 822, "recreat": 822, "unexpectedli": 822, "discrep": [822, 841], "test_asarray_arrai": 822, "test_floor_divid": 822, "health": 822, "test_iop": 822, "__imod__": 822, "isequ": 822, "test_matrix_norm": 822, "alter": 822, "tweak": 822, "array_api_methods_to_test": 822, "test_special_cas": 822, "__ipow__": 822, "is_integ": 822, "easier": [822, 823, 824, 828, 841, 844, 856, 869, 871], "revisit": [822, 835], "_data": [823, 839, 840, 850], "organiz": [823, 826, 840], "underpin": [823, 826, 848], "programmat": [823, 826, 870], "backup": [823, 825, 826], "accident": [823, 826, 840], "absent": [823, 826], "auto": [823, 825, 826, 834, 851], "__mul__": [823, 826, 830, 835, 846, 850], "throw": [823, 828, 829, 832, 833, 850, 869], "imposs": 823, "inputs_to_native_arrai": [823, 836, 837], "outputs_to_ivy_arrai": [823, 828, 829, 835, 836, 837], "secondli": [823, 828], "__ivy_array_function__": 823, "__torch_function__": 823, "myarrai": 823, "handled_funct": 823, "notimpl": 823, "issubclass": 823, "enough": [823, 827, 828, 829, 843, 850, 851, 852], "ivy_funct": 823, "my_ab": 823, "my_arrai": 823, "implicit_backend": [824, 848], "__dict__": [824, 839, 848], "ivy_original_dict": [824, 848], "fallback": 824, "live": [824, 825, 828, 859, 860, 865, 867], "dlpack": 824, "set_dynamic_backend": 824, "unset_dynamic_backend": 824, "dynamic_backend_a": 824, "set_": 824, "unset_": 824, "backend_handl": 824, "requires_grad": 824, "memory_format": 824, "preserve_format": 824, "weren": 824, "vast": [824, 828, 869], "minor": [824, 846, 854], "fn_name_v_1p12_and_abov": 824, "fn_name_v_1p01_to_1p1": 824, "heavili": [825, 837, 854], "characterist": 825, "conf": 825, "cleanup": 825, "readm": [825, 854], "maxdepth": 825, "caption": 825, "related_work": 825, "deep_div": 825, "faq": 825, "glossari": 825, "autosummari": 825, "top_functional_toc": 825, "restructuredtext": 825, "discov": [825, 828], "ivy_toctree_caption_map": 825, "unfortun": [825, 834], "linker": 825, "foo": 825, "discussion_channel_map": 825, "1000043690254946374": 825, "1000043749088436315": 825, "forum": [825, 855], "seri": [825, 828, 840, 843, 869, 871], "discussion_paragraph": 825, "discord_link": 825, "channel_link": 825, "gg": 825, "zvqdvbznqj": 825, "799879767196958751": 825, "channel_id": 825, "autoskippablemethod": 825, "skippable_method_attribut": 825, "__qualname__": 825, "autodoc": 825, "__doc__": 825, "autoivydata": 825, "mutual": [826, 836], "containerwithelementwis": 826, "__repr__": 826, "__getattr__": [826, 862], "__setattr__": [826, 862], "__contains__": 826, "__getstate__": 826, "__setstate__": 826, "unpickl": 826, "num_dim": [826, 853], "restrict": [826, 827, 840, 848, 862, 866], "enforc": [826, 850], "lefthand": 826, "righthand": 826, "handle_nest": [826, 835, 836, 837, 848], "absenc": [826, 835, 869], "implicitli": [826, 838, 843, 848], "log_pr": [826, 836, 839], "intuit": [826, 843, 851, 852, 865], "chronolog": 826, "concurr": [826, 827, 836, 869], "despit": [826, 828, 829, 841, 848, 859, 866, 869], "__list__": 826, "whatsoev": [826, 836, 856, 875], "children": 826, "shallowest": 826, "deepest": 826, "rollback": 827, "incorpor": [827, 841, 851, 869], "techniqu": 827, "triplet": 827, "test_torch": [827, 841], "test_tensor": [827, 841], "test_torch_instance_arctan_": 827, "12500": 827, "daili": 827, "huge": [827, 851, 857, 859, 869, 875], "shoot": 827, "_reduce_loss": [827, 836, 839], "test_nn": 827, "test_loss": 827, "test_binary_cross_entropy_with_logit": 827, "test_cross_entropi": 827, "test_binary_cross_entropi": 827, "test_sparse_cross_entropi": 827, "test_loss_funct": 827, "test_torch_binary_cross_entropi": 827, "test_torch_cross_entropi": 827, "binary_cross_entropy_with_logit": 827, "torch_binary_cross_entropi": 827, "torch_cross_entropi": 827, "magic": 827, "readthedoc": 827, "pedagog": 827, "f_1": 827, "t_1": 827, "t_3": 827, "t_7": 827, "t_": 827, "f_m": 827, "cyclic": 827, "intellig": [827, 843, 871], "tests_fil": 827, "file_nam": [827, 843, 844], "tests_lin": 827, "correspondingli": 827, "tests_to_run": 827, "determine_tests_lin": 827, "mongodb": 827, "databas": [827, 843], "mechan": [827, 854], "secret": 827, "db": 827, "ssh_deploy_kei": 827, "suffic": [827, 837, 843], "massiv": 827, "yml": 827, "felicit": 827, "clone_map": 827, "deploy_kei": 827, "user_email": 827, "user_nam": 827, "target_branch": 827, "github_serv": 827, "deploy_key_fil": 827, "ssh_known_hosts_fil": 827, "known_host": 827, "keyscan": 827, "git_ssh_command": 827, "userknownhostsfil": 827, "email": [827, 859], "methodologi": 827, "master1": 827, "restructur": 827, "_map": 827, "t_2": 827, "t_n": 827, "index_map": 827, "test_map": 827, "snowbal": 827, "recalibr": 827, "workflow_dispatch": 827, "cron": 827, "saturdai": 827, "night": 827, "pm": 827, "gut": 827, "lesser": [827, 832], "lol": 827, "hour": [827, 860], "cater": [827, 842], "master2": 827, "master32": 827, "synchron": 827, "runner2": 827, "corrupt": 827, "decoupl": [827, 852], "150": 827, "cycl": [827, 843], "yellow": 827, "queu": 827, "redirect": 827, "book": 827, "onrend": 827, "jo": 827, "ran": 827, "clickabl": 827, "all_dtyp": 828, "all_numeric_dtyp": 828, "all_int_dtyp": 828, "all_float_dtyp": 828, "replic": [828, 838, 839, 840], "thirdli": 828, "native_float32": 828, "importantli": [828, 850, 853], "arguabl": [828, 829, 840], "jaxarrai": [828, 829, 832, 835, 839, 844, 848], "_handle_0_dim_output": 828, "subtli": [828, 839], "promote_types_frontend_nam": 828, "promote_types_of_frontend_name_input": 828, "frontend_nam": 828, "upcast": 828, "nearli": [828, 835, 837, 869], "downcast": 828, "footprint": 828, "concret": 828, "aris": [828, 834, 854, 859], "utterli": 828, "meant": [828, 830, 839], "twice": 828, "disadvantag": 828, "relax": 828, "f64": 828, "unwant": 828, "primaci": 828, "resembl": 828, "compound": 828, "infer_dtyp": [828, 829, 835, 837], "settabl": [828, 829], "handle_out_argu": [828, 829, 835, 836, 837, 839, 848], "infer_devic": [828, 829, 835, 837], "deleg": [828, 876], "shape_to_tupl": 828, "with_supported_dtyp": 828, "unment": 828, "_cast_for_unary_op": [828, 836, 839], "target_typ": 828, "syntax": [828, 858, 859, 869], "unsupported_dtyp": 828, "supported_dtypes_and_devic": 828, "with_unsupported_device_and_dtyp": 828, "globals_getter_func": 828, "f2": 828, "lack": [828, 839, 869, 876], "mandat": [828, 839, 843, 844, 859], "confus": [828, 832, 839, 846, 856, 860], "inconsist": [828, 832, 838], "is_nan": 828, "supported_dtyp": 828, "anytim": 828, "84530": 828, "unwarr": 828, "risk": [828, 875], "needlessli": 828, "bloat": 828, "undergo": [828, 854], "unsupported_devic": 828, "supported_devic": 828, "downsid": 828, "coverag": [828, 843], "undesir": 828, "accomplish": 828, "upcast_data_typ": 828, "downcast_data_typ": 828, "crosscast_data_typ": 828, "cast_data_typ": 828, "downcast_data_dtyp": 828, "vice": 828, "versa": 828, "till": 828, "crosscast": 828, "exmp1": 828, "watch": [828, 840], "handle_numpy_arrays_in_specific_backend": [828, 835], "cate": 828, "understood": 828, "consumpt": [828, 873], "dual": 829, "categor": [829, 836, 840], "210": 829, "_handle_except": [829, 832], "1013": 829, "_handle_nest": [829, 832], "905": 829, "_handle_out_argu": [829, 832], "441": 829, "_inputs_to_native_arrai": [829, 832], "new_arg": [829, 832], "new_kwarg": [829, 832], "_outputs_to_ivy_arrai": [829, 832], "358": 829, "_handle_array_funct": [829, 832], "_handle_device_shift": 829, "handle_device_shift": [829, 837], "crucial": [829, 838], "device_shifting_dev": 829, "__enter__": 829, "__exit__": 829, "soft_devic": 829, "eight": [830, 847], "op_nam": 830, "__r": 830, "unsurprisingli": [830, 858], "recap": [830, 852], "combinatori": 830, "okai": [830, 846, 848], "spec": [830, 831], "my_func": [830, 844], "some_flag": 830, "another_flag": 830, "jointli": 830, "5574077": 830, "1850398": 830, "5463025": 830, "8422884": 830, "91601413": 830, "9647598": 830, "3738229": 830, "1597457": 830, "0963247": 830, "9955841": 830, "3278579": 830, "asid": 830, "14254655": 830, "1578213": 830, "380515": 830, "trivial": [830, 839], "failing_fn_nam": 830, "onlin": [830, 831], "minutest": 830, "fault": [830, 869], "contrast": [831, 835, 840, 875], "preview": 831, "incorrectli": [831, 862], "needless": [831, 841], "renam": [831, 840], "judgment": 831, "operator_nam": 831, "succinct": 831, "docst": 831, "native_error": 832, "_combine_messag": 832, "truli": [832, 850], "wrong": [832, 834, 837, 840, 846], "198": 832, "392": 832, "_handle_array_like_without_promot": 832, "805": 832, "432": 832, "349": 832, "other_test": 832, "523": 832, "_handle_numpy_out": 832, "396": [832, 852], "_outputs_to_numpy_arrai": 832, "_inputs_to_ivy_arrays_np": 832, "ivy_arg": 832, "ivy_kwarg": 832, "453": 832, "_from_zero_dim_arrays_to_scalar": 832, "truth_value_test": 832, "visibl": 832, "unwieldi": 832, "squash": 832, "hide": [832, 862], "cleaner": [832, 851], "caught": [832, 834], "rethrow": 832, "_print_traceback_histori": 832, "error_stack": 832, "axiserror": 832, "polici": [832, 837, 843, 845], "moreov": 832, "submoodul": 833, "test_jax_transpos": 833, "manipulaiton": 833, "test_jax": [833, 841], "test_numpi": [833, 841], "test_manipul": [833, 841, 843], "preconditionnotmet": 833, "densetensor": 833, "holder_": 833, "phi": 833, "dense_tensor_impl": 833, "array_and_ax": 833, "aaegbaegaqaaaaaaaaaaaaab": 833, "black": 834, "flake8": 834, "linter": 834, "autoflak": 834, "docformatt": 834, "pydocstyl": 834, "yaml": 834, "patch1687898304": 834, "8072": 834, "3516aed563": 834, "reformat": 834, "akshai": 834, "jain": 834, "gui": 834, "cryptic": 834, "garden": 834, "utc": 834, "didn": 834, "human": 834, "intervent": 834, "typo": 834, "ui": 834, "handle_array_like_without_promot": [835, 837], "to_native_arrays_and_back": [835, 837, 848], "handle_array_funct": [835, 837], "inputs_to_native_shap": [835, 837], "rational": [835, 839, 846], "__div__": [835, 846], "484": 835, "annot": 835, "brittl": 835, "freeli": 835, "technic": [835, 839, 854, 869, 871], "original_typ": 835, "cumbersom": 835, "hinder": [835, 858], "venn": 836, "diagram": [836, 875], "light": [836, 844, 854, 856, 870, 875], "maximis": 836, "encompass": 836, "partial_mixed_handl": [836, 837, 846], "handle_partial_mixed_funct": [836, 837, 846], "fn_decor": 836, "mixed_backend_wrapp": [836, 839], "to_add": 836, "to_skip": 836, "inputs_to_ivy_arrai": [836, 837], "modif": [836, 869], "briefli": [836, 843, 851], "get_all_arrays_on_dev": 836, "outputs_to_ivy_shap": 837, "outputs_to_native_arrai": 837, "handle_view_index": [837, 839], "handle_view": [837, 839], "handle_rag": 837, "handle_backend_invalid": 837, "handle_nan": 837, "to_native_shapes_and_back": 837, "modern": [838, 858, 859, 874], "inter_func": 838, "custom_grad_fn": 838, "args1": 838, "eas": [838, 869], "speak": 839, "val_n": 839, "base_idx": 839, "_manipulation_stack": 839, "base_flat": 839, "_view_ref": 839, "_update_view": 839, "contigu": 839, "c_contigu": 839, "ascontiguousarrai": 839, "copyto": 839, "_is_vari": 839, "tensor_scatter_nd_upd": 839, "is_vari": 839, "_update_torch_view": 839, "predominantli": [839, 844], "support_native_out": [839, 848], "_scalar_output_to_0d_arrai": 839, "_wrap_fn": 839, "dim0": 839, "dim1": 839, "res_floor": 839, "extent": [839, 840], "to_out_fn": 839, "add_wrapp": 839, "paradigm": [839, 854, 869], "expans": 839, "weak": 839, "_torch_bas": 839, "_torch_view_ref": 839, "_torch_manipul": 839, "weakli": 839, "adequ": 839, "tf_frontend": 840, "lax": [840, 841, 846, 853, 854], "torch_frontend": [840, 841], "numpy_frontend": 840, "jax_frontend": 840, "to_ivy_arrays_and_back": [840, 841], "fidel": 840, "algebra": [840, 867, 868, 869, 872, 876], "dynamic": 840, "mimic": 840, "arithmetic_oper": 840, "handle_numpy_out": 840, "handle_numpy_dtyp": 840, "handle_numpy_cast": 840, "from_zero_dim_arrays_to_scalar": 840, "_add": 840, "same_kind": 840, "subok": [840, 841, 846], "promote_types_of_numpy_input": 840, "underscor": 840, "unhandl": 840, "trigonometric_funct": 840, "_tan": 840, "check_tensorflow_cast": 840, "raw_op": [840, 841], "map_raw_ops_alia": 840, "output_typ": 840, "kwargs_to_upd": 840, "pointwise_op": 840, "sensibl": 840, "ahead": [840, 844, 869], "reduce_logsumexp": 840, "logsumexp": 840, "trick": 840, "max_input_tensor": 840, "preferred_element_typ": 840, "languag": [840, 848, 856, 858, 860, 867, 870, 872, 873, 874, 875], "finer": 840, "logicaland": 840, "np_frontend": 840, "_ivy_arrai": 840, "radd": 840, "_init_data": 840, "_process_str_data": 840, "_dtype": [840, 841, 850], "_shape": [840, 850], "govern": 840, "promote_types_of_": 840, "_input": 840, "promote_types_of_torch_input": [840, 841], "handle_numpy_casting_speci": 840, "new_fn": 840, "equiv": 840, "unsaf": 840, "array_type_test": 840, "_isfinit": 840, "organis": 840, "grasp": 840, "youtub": 840, "knowledg": 841, "np_frontend_help": 841, "open_task": 841, "test_lax": 841, "test_oper": 841, "test_jax_tan": 841, "test_mathematical_funct": 841, "test_trigonometric_funct": 841, "dtypes_values_cast": 841, "dtypes_values_casting_dtyp": 841, "arr_func": 841, "get_num_positional_args_ufunc": 841, "test_numpy_tan": 841, "handle_where_and_array_bool": 841, "test_tensorflow": 841, "test_math": 841, "test_tensorflow_tan": 841, "test_pointwise_op": 841, "test_torch_tan": 841, "_fill_valu": 841, "test_glob": 841, "test_jax_ful": 841, "test_from_shape_or_valu": 841, "_input_fill_and_dtyp": 841, "dtype_and_input": 841, "dtype_to_cast": 841, "input_fill_dtyp": 841, "test_numpy_ful": 841, "test_raw_op": 841, "test_tensorflow_fil": 841, "test_creation_op": 841, "with_arrai": 841, "test_torch_ful": 841, "add_nois": 841, "all_clos": 841, "_get_dtype_and_matrix": 841, "test_torch_qr": 841, "frontend_q": 841, "frontend_r": 841, "walkthrough": 841, "comparison_op": 841, "test_comparison_op": 841, "test_torch_great": 841, "all_alias": 841, "test_ndarrai": 841, "test_numpy_instance_add__": 841, "test_tensorflow_instance_add": 841, "1e04": 841, "allow_infin": 841, "test_torch_instance_add": 841, "_arrays_idx_n_dtyp": 841, "surprisingli": 841, "closest_relevant_group": 841, "strive": [841, 843, 846, 854, 871], "craft": [842, 843], "tailor": 842, "clariti": [842, 843, 846, 869], "weav": 842, "thrill": 842, "brim": 842, "stand": [842, 843], "landscap": 842, "forese": 842, "refin": 842, "inquiri": 842, "fixtur": 843, "hit": [843, 848, 862], "eleg": [843, 869], "unexplor": 843, "artifact": 843, "bespok": 843, "_array_or_typ": 843, "rigor": [843, 858], "test_default_int_dtyp": 843, "print_hypothesis_exampl": 843, "custom_strategi": 843, "randomis": 843, "simplist": 843, "intricaci": 843, "glanc": 843, "one_of": 843, "datum": 843, "pipe": 843, "array_or_scal": 843, "len_of_arrai": 843, "test_add": 843, "test_gpu_is_avail": 843, "pretest": 843, "snippet": [843, 863], "outlier": 843, "frontend_test": 843, "frontend_method": 843, "criterion": 843, "valid_ax": 843, "hoc": 843, "11228": 843, "268": 843, "wherev": 843, "9622": 843, "28136": 843, "6375": 843, "12720": 843, "21354": 843, "900e": 843, "57384": 843, "25687": 843, "248": 843, "test_devic": 843, "array_shap": 843, "test_lay": 843, "some_sequ": 843, "arrays_valu": 843, "36418": 843, "213": 843, "21716926": 843, "none_or_list_of_float": 843, "get_prob": 843, "103515625e": 843, "099609375": 843, "probabilist": 843, "number_positional_argu": 843, "unreproduc": 843, "x_and_linear": 843, "is_torch_backend": 843, "x_shape": [843, 848], "weight_shap": 843, "bias_shap": 843, "ivy_np": 843, "valid_float_dtyp": 843, "test_demo": 843, "failing_test": 843, "traceback": 843, "shrink": 843, "prescrib": 843, "scratch": 843, "test_gelu": 843, "test_fil": 843, "phase": [843, 854, 869], "notabl": [843, 869], "max_exampl": 843, "deadlin": 843, "weird": 843, "systemat": 843, "safeguard": 843, "inabl": 843, "test_result_typ": 843, "9090909090909091": 843, "judgement": 844, "some_namespac": 844, "some_backend": 844, "another_backend": 844, "refactor": 844, "ongo": 844, "check_fill_value_and_dtype_are_compat": 844, "_to_devic": 844, "shouldn": [844, 862], "pin": 844, "unpinn": 844, "culmin": 844, "unsett": 845, "array_significant_figur": 845, "array_decimal_valu": 845, "warning_level": 845, "nan_polici": 845, "stablest": 845, "constantli": [846, 858], "answer": [846, 850, 854], "contradict": 846, "entail": 846, "sacrif": 846, "jacfwd": 846, "jacrev": 846, "banner": 846, "expens": 846, "incredibli": [846, 851, 854, 872], "price": 846, "pai": 846, "intrus": 846, "x_beta": 846, "equip": 846, "simplif": 846, "allevi": 846, "ineffici": [846, 854, 869], "fuse": 846, "hybrid": 846, "workaround": 846, "slip": 846, "radar": 846, "stumbl": 846, "gone": [847, 859], "fulfil": 847, "syntact": [848, 853], "power_seq": 848, "_determine_backend_from_arg": 848, "importlib": 848, "_backend_dict": 848, "x_flat": 848, "wi": 848, "wi_x": 848, "wii_x": 848, "wif_x": 848, "wig_x": 848, "wio_x": 848, "wh": 848, "ht": 848, "ct": 848, "hts_list": 848, "wii_xt": 848, "wif_xt": 848, "wig_xt": 848, "wio_xt": 848, "htm1": 848, "ctm1": 848, "wh_htm1": 848, "whi_htm1": 848, "whf_htm1": 848, "whg_htm1": 848, "who_htm1": 848, "ft": 848, "ot": 848, "reliabl": 848, "sacrific": 848, "hear": 848, "virtu": [848, 866], "pure_ivi": 848, "pure_torch": 848, "unclean": 848, "wx": 848, "temp": 848, "ivy_func": 848, "emphas": 848, "example_input": 848, "static_argnum": [848, 862], "static_argnam": [848, 862], "primit": [849, 854, 867, 869], "upcom": 849, "hierarch": [849, 851, 852, 869], "arraywithactiv": 850, "arraywithcr": 850, "arraywithdatatyp": 850, "arraywithdevic": 850, "arraywithgener": 850, "arraywithgradi": 850, "arraywithimag": 850, "arraywithlay": 850, "arraywithlinearalgebra": 850, "arraywithloss": 850, "arraywithmanipul": 850, "arraywithnorm": 850, "arraywithrandom": 850, "arraywithsearch": 850, "arraywithset": 850, "arraywithsort": 850, "arraywithstatist": 850, "arraywithutil": 850, "_init": 850, "_size": 850, "_devic": 850, "_dev_str": 850, "_pre_repr": 850, "_post_repr": 850, "framework_str": 850, "pypep8nam": 850, "immut": 850, "claim": 850, "_native_wrapp": 850, "genuin": 850, "some_method": 850, "rewritten": 850, "littl": [850, 858, 871], "compartment": 850, "newshap": 850, "new_shap": 850, "tidi": 850, "crystal": 850, "ton": 851, "ado": [851, 852], "soup": 851, "walk": [851, 852], "cnt": 851, "3333335": 851, "autocomplet": 851, "midwai": 851, "agent": 851, "total_spe": 851, "total_height": 851, "total_width": 851, "ag": 851, "tot": 851, "total_": 851, "total_h": 851, "cnt0": 851, "cnt1": 851, "diff_0": 851, "diff_1": 851, "config0": 851, "config1": 851, "l0": 851, "decoder__l0": 851, "decoder__l1": 851, "encoder__l0": 851, "encoder__l1": 851, "l0__b": 851, "l0__w": 851, "l1__b": 851, "l1__w": 851, "printabl": 851, "foresight": 851, "untidili": 851, "update_ag": 851, "normalize_img": 851, "img_max": 851, "reduce_max": 851, "img_min": 851, "reduce_min": 851, "img_rang": 851, "agent_posit": 851, "agent_veloc": 851, "agent_cam_front_rgb": 851, "agent_cam_front_depth": 851, "agent_cam_rear_rgb": 851, "agent_cam_rear_depth": 851, "agent_cam_lidar": 851, "camera": 851, "front_rgb": 851, "front_depth": 851, "rear_rgb": 851, "rear_depth": 851, "lidar": 851, "rgb": 851, "rear": 851, "veloc": 851, "cam": 851, "cam_max": 851, "cam_min": 851, "cam_rang": 851, "five": 851, "allud": [851, 859], "perman": 851, "_cnt": 851, "img_": 851, "_dataset_s": 851, "_batch_siz": 851, "_count": [851, 852], "__next__": 851, "img_fnam": 851, "loaded_img": 851, "batch_slic": 851, "0145": 851, "addbackward0": 851, "_create_vari": 852, "_input_channel": 852, "_output_channel": 852, "_w_shape": 852, "_b_shape": 852, "_with_bia": 852, "764": 852, "872": 852, "211": 852, "439": 852, "nightmar": 852, "overcom": 852, "v1": 852, "key0": 852, "linear3": 852, "v2": 852, "preced": [852, 859], "_w_init": 852, "_b_init": 852, "misnom": 852, "saw": 852, "_beta1": 852, "_beta2": 852, "_epsilon": 852, "_mw": 852, "_vw": 852, "_first_pass": 852, "_should_trac": 852, "new_v": 852, "_lr": 852, "_inplac": 852, "_stop_gradi": 852, "sparse_funct": 853, "vital": [853, 858], "_linear": 853, "jax_graph": 853, "to_backend": 853, "thinli": 853, "to_haiku_modul": 853, "loss_fn_t": 853, "without_apply_rng": 853, "update_rul": 853, "tree_multimap": 853, "trax": [853, 860], "objax": [853, 860], "matur": [854, 859, 869], "doubt": 854, "grate": [854, 877], "probe": 854, "lock": 854, "dex": 854, "tricki": [854, 856], "predictor": 854, "tight": 854, "dispatch": [854, 869, 872], "ast": 854, "autodiff": 854, "shine": 854, "merci": 854, "compet": [854, 869], "parallelis": 854, "spmd": 854, "mixtur": 854, "expert": 854, "sophist": 854, "depart": 854, "hundr": 854, "broadli": [854, 875], "supplementari": 854, "reusabl": [854, 867, 869], "fanci": [854, 869], "fusion": [854, 873], "lose": 854, "pmap": 854, "eventu": 854, "supplement": 854, "backdoor": 854, "callback": 854, "somewhat": [854, 869], "outsourc": 854, "ivy_root": 855, "pem": 855, "api_kei": 855, "asap": 855, "nail": 856, "scientist": 856, "correl": 856, "collabor": [857, 858, 859], "consortium": [857, 859], "grown": 858, "rapidli": 858, "shareabl": 858, "outdat": 858, "newest": 858, "prototyp": [858, 869], "obsolet": [858, 860], "invent": 858, "simultan": [858, 860], "runner": 858, "principl": [858, 867, 869, 872], "2006": 858, "cloth": 858, "forgiven": 859, "eyebrow": 859, "somehow": 859, "funni": 859, "comic": 859, "charger": 859, "instant": 859, "contrari": 859, "bumpi": 859, "road": 859, "technologi": [859, 867, 871], "motherboard": 859, "raid": 859, "bluetooth": 859, "wireless": 859, "btx": 859, "sata": 859, "tcp": 859, "ip": 859, "smtp": 859, "send": [859, 874], "gmail": 859, "outlook": 859, "growth": [859, 872], "necess": 859, "2015": [859, 869], "aros": 859, "ourselv": [859, 875], "quansight": [859, 875], "compani": [859, 865], "apach": [859, 871, 875], "onnx": [859, 867, 875], "cupi": [859, 869, 876], "modin": 859, "spyder": 859, "octoml": [859, 875], "sponsor": 859, "lg": 859, "electron": 859, "shaw": 859, "pursuit": 859, "complianc": 859, "convinc": 859, "celebr": 859, "streamlin": [860, 872], "awesom": 860, "love": 860, "slew": 860, "inevit": [860, 870], "erron": 860, "poor": 860, "spin": 860, "sake": 860, "wouldn": 860, "frantic": 860, "lucid": 860, "honk": 860, "hasn": 860, "spend": [860, 869], "sonnet": 860, "trainer": [860, 876], "quo": 860, "dopamin": 860, "ignit": 860, "catalyst": 860, "lightn": 860, "fastai": 860, "publicli": [862, 863, 864], "logger": 862, "arg_stateful_idx": 862, "kwarg_stateful_idx": 862, "include_gener": 862, "array_cach": 862, "return_backend_traced_fn": 862, "lazygraph": [862, 863, 864], "sum_j": 862, "traced_fn": 862, "impos": 862, "comp_func": 862, "trade": 862, "bake": 862, "cont": 862, "new_attribut": 862, "wip": 862, "resnet50": 862, "breed": 862, "resnetforimageclassif": [862, 863], "traced_graph": 862, "predicted_label": 862, "debug_mod": 863, "rough": 863, "transformed_with_st": 863, "bigger": 863, "hf": 863, "tf_model": 863, "transpile_kwarg": 864, "transpiled_func": 864, "unified_func": 864, "rwork": 865, "vendor": [865, 871], "complimentari": [865, 875], "acycl": [865, 870], "fillna": 866, "pct_chang": 866, "tail": 866, "_____________": 866, "__________________________________________________________________": 866, "scaffold": [867, 875], "heart": 867, "toolchain": [867, 872], "assembli": [867, 874, 875], "idl": 867, "middl": 867, "emit": 867, "gnu": [867, 872], "broader": 867, "heterogen": 867, "aid": 867, "coprocessor": 867, "programm": [867, 874], "gate": 867, "onednn": 867, "sit": [867, 870, 875], "tandem": 867, "possess": 867, "khrono": [868, 874], "appl": 868, "coremltool": 868, "albeit": 868, "promin": 869, "abbrevi": 869, "laboratori": 869, "proprietari": [869, 873, 874], "mathwork": 869, "commerci": 869, "1984": 869, "toolbox": 869, "mupad": 869, "simulink": 869, "graphic": [869, 873, 874], "simul": 869, "million": [869, 872], "worldwid": 869, "scienc": [869, 871], "econom": 869, "2001": 869, "od": 869, "solver": 869, "cython": 869, "friendli": 869, "2002": 869, "lua": 869, "luajit": 869, "idiap": 869, "epfl": 869, "2005": 869, "numarrai": 869, "cpython": 869, "partli": 869, "2007": 869, "forest": 869, "boost": 869, "dbscan": 869, "inbuilt": 869, "esqu": 869, "aesara": 869, "datafram": 869, "2012": 869, "polymorph": 869, "mpi": 869, "openmp": 869, "glue": 869, "jaot": 869, "nasa": 869, "cern": 869, "climat": 869, "allianc": 869, "influenti": 869, "2014": 869, "scala": 869, "ship": 869, "forgiv": 869, "decemb": 869, "announc": 869, "mainten": 869, "v7": 869, "meaning": 869, "2016": 869, "imper": 869, "amazon": 869, "traction": 869, "cognit": [869, 876], "grade": 869, "dnn": 869, "backpropag": 869, "succumb": 869, "came": 869, "monitor": 869, "hobbyist": 869, "tremend": 869, "gear": 869, "batteri": 869, "zygot": 869, "jl": 869, "workload": 869, "daggerflux": 869, "frontier": 869, "hessian": 869, "2018": 869, "lightweight": [869, 876], "shortcom": 869, "barrier": 869, "inexperienc": 869, "underdevelop": 869, "fanat": 869, "ounc": 869, "infanc": 869, "nich": 869, "mobil": 869, "lite": 869, "enterpris": 869, "reinvent": [869, 871], "inertia": 869, "creator": [869, 871], "paszk": 869, "hi": 869, "bulk": 869, "haskel": 869, "dataflow": 870, "trace_modul": 870, "scriptfunct": 870, "scriptmodul": 870, "fake": 870, "proxi": 870, "graphmodul": 870, "travi": 871, "oliph": 871, "leader": 871, "cornerston": 871, "numba": 871, "numfocu": 871, "pydata": 871, "confer": 871, "consult": 871, "devop": 871, "mlop": 871, "dashboard": 871, "startup": 871, "mlir": [871, 872, 875], "Their": 871, "held": 871, "presum": 871, "llvm": [871, 874], "founder": 871, "tvm": [871, 875], "sustain": 871, "empow": 871, "har": 871, "burden": 871, "precompil": 872, "executor": 872, "julia": [872, 875], "fsf": 872, "gpl": 872, "biggest": [872, 875], "throughput": 873, "autotun": 873, "gpgpu": 873, "classic": 874, "sycl": 874, "dpc": 874, "maco": 874, "oneapi": 874, "ia": 874, "aka": 874, "xeon": 874, "gen9": 874, "xe": 874, "arria": 874, "gx": 874, "fpga": 874, "lofti": 875, "ambit": 875, "realm": 875, "bedrock": 875, "flux": 875, "bite": 875, "chew": 875, "eagerpi": 875, "tensorli": 875, "thinc": 875, "neuropod": 875, "fx": 875, "retrain": 875, "closer": 875, "greatli": 875, "modular": 875, "anywher": 875, "theano": 876, "plaidml": 876, "partial_svd": 876, "subsystem": 876, "samund": 877, "singh": 877, "samthakur587": 877, "eyob": 877, "mishamo": 877, "nripeshn": 877, "suraj": 877, "muhammad": 877, "ishaqu": 877, "muhammadnizamani": 877, "suyash": 877, "gupta": 877, "sgalpha01": 877, "sanjai": 877, "suthar": 877, "sanjay8602": 877, "zera": 877, "marveen": 877, "lyngkhoi": 877, "fleventi": 877, "zheng": 877, "jai": 877, "choi": 877, "zjay07": 877, "nitesh": 877, "kesharwani": 877, "niteshk84": 877, "sarvesh": 877, "jackson": 877, "mcclintock": 877, "jacksondm33": 877, "ayush": 877, "lokar": 877, "ayush111111": 877, "chaitanya": 877, "lakhchaura": 877, "zenithflux": 877, "david": 877, "adlai": 877, "nettei": 877, "garima": 877, "saroj": 877, "androgari": 877, "lee": 877, "bissessar": 877, "leebissessar5": 877, "mostafa": 877, "gamal": 877, "mr": 877, "array22": 877, "ogban": 877, "ugot": 877, "rahul": 877, "prem": 877, "rp097": 877, "rohit": 877, "kumar": 877, "salla": 877, "rohitsalla": 877, "shreya": 877, "srikar": 877, "vedantam": 877, "shruzki": 877, "waqar": 877, "ahm": 877, "waqaarahm": 877, "aryan": 877, "pandei": 877, "aryan8912": 877, "dhruv": 877, "sharma": 877, "druvdub": 877, "kacper": 877, "ko\u017cdo\u0144": 877, "kozdon": 877, "mehmet": 877, "bilgehan": 877, "bezcioglu": 877, "bilgehanmehmet": 877, "sheroz": 877, "khan": 877, "ksheroz": 877, "muzakkir": 877, "hussain": 877, "muzakkirhussain011": 877}, "objects": {"ivy.Array": [[219, 0, 1, "", "abs"], [220, 0, 1, "", "acos"], [221, 0, 1, "", "acosh"], [614, 0, 1, "", "adam_step"], [615, 0, 1, "", "adam_update"], [388, 0, 1, "", "adaptive_avg_pool1d"], [389, 0, 1, "", "adaptive_avg_pool2d"], [390, 0, 1, "", "adaptive_max_pool2d"], [391, 0, 1, "", "adaptive_max_pool3d"], [222, 0, 1, "", "add"], [423, 0, 1, "", "adjoint"], [766, 0, 1, "", "all"], [533, 0, 1, "", "all_equal"], [333, 0, 1, "", "allclose"], [334, 0, 1, "", "amax"], [335, 0, 1, "", "amin"], [223, 0, 1, "", "angle"], [767, 0, 1, "", "any"], [743, 0, 1, "", "argmax"], [744, 0, 1, "", "argmin"], [752, 0, 1, "", "argsort"], [745, 0, 1, "", "argwhere"], [536, 0, 1, "", "array_equal"], [459, 0, 1, "", "as_strided"], [127, 0, 1, "", "asarray"], [224, 0, 1, "", "asin"], [225, 0, 1, "", "asinh"], [537, 0, 1, "", "assert_supports_inplace"], [460, 0, 1, "", "associative_scan"], [151, 0, 1, "", "astype"], [226, 0, 1, "", "atan"], [227, 0, 1, "", "atan2"], [228, 0, 1, "", "atanh"], [461, 0, 1, "", "atleast_1d"], [462, 0, 1, "", "atleast_2d"], [463, 0, 1, "", "atleast_3d"], [393, 0, 1, "", "avg_pool1d"], [394, 0, 1, "", "avg_pool2d"], [395, 0, 1, "", "avg_pool3d"], [500, 0, 1, "", "batch_norm"], [424, 0, 1, "", "batched_outer"], [507, 0, 1, "", "bernoulli"], [508, 0, 1, "", "beta"], [336, 0, 1, "", "binarizer"], [695, 0, 1, "", "binary_cross_entropy"], [519, 0, 1, "", "bincount"], [229, 0, 1, "", "bitwise_and"], [230, 0, 1, "", "bitwise_invert"], [231, 0, 1, "", "bitwise_left_shift"], [232, 0, 1, "", "bitwise_or"], [233, 0, 1, "", "bitwise_right_shift"], [234, 0, 1, "", "bitwise_xor"], [311, 0, 1, "", "blackman_window"], [152, 0, 1, "", "broadcast_arrays"], [153, 0, 1, "", "broadcast_to"], [154, 0, 1, "", "can_cast"], [235, 0, 1, "", "ceil"], [294, 0, 1, "", "celu"], [666, 0, 1, "", "cholesky"], [698, 0, 1, "", "clip"], [539, 0, 1, "", "clip_matrix_norm"], [540, 0, 1, "", "clip_vector_norm"], [467, 0, 1, "", "column_stack"], [699, 0, 1, "", "concat"], [468, 0, 1, "", "concat_from_sequence"], [425, 0, 1, "", "cond"], [337, 0, 1, "", "conj"], [700, 0, 1, "", "constant_pad"], [649, 0, 1, "", "conv1d"], [650, 0, 1, "", "conv1d_transpose"], [651, 0, 1, "", "conv2d"], [652, 0, 1, "", "conv2d_transpose"], [653, 0, 1, "", "conv3d"], [654, 0, 1, "", "conv3d_transpose"], [128, 0, 1, "", "copy_array"], [338, 0, 1, "", "copysign"], [520, 0, 1, "", "corrcoef"], [236, 0, 1, "", "cos"], [237, 0, 1, "", "cosh"], [339, 0, 1, "", "count_nonzero"], [521, 0, 1, "", "cov"], [667, 0, 1, "", "cross"], [696, 0, 1, "", "cross_entropy"], [522, 0, 1, "", "cummax"], [523, 0, 1, "", "cummin"], [756, 0, 1, "", "cumprod"], [757, 0, 1, "", "cumsum"], [396, 0, 1, "", "dct"], [543, 0, 1, "", "default"], [238, 0, 1, "", "deg2rad"], [657, 0, 1, "", "depthwise_conv2d"], [668, 0, 1, "", "det"], [196, 0, 1, "", "dev"], [397, 0, 1, "", "dft"], [669, 0, 1, "", "diag"], [426, 0, 1, "", "diagflat"], [670, 0, 1, "", "diagonal"], [340, 0, 1, "", "diff"], [341, 0, 1, "", "digamma"], [509, 0, 1, "", "dirichlet"], [239, 0, 1, "", "divide"], [427, 0, 1, "", "dot"], [658, 0, 1, "", "dropout"], [398, 0, 1, "", "dropout1d"], [399, 0, 1, "", "dropout2d"], [400, 0, 1, "", "dropout3d"], [469, 0, 1, "", "dsplit"], [470, 0, 1, "", "dstack"], [162, 0, 1, "", "dtype"], [428, 0, 1, "", "eig"], [672, 0, 1, "", "eigh"], [429, 0, 1, "", "eigh_tridiagonal"], [430, 0, 1, "", "eigvals"], [673, 0, 1, "", "eigvalsh"], [544, 0, 1, "", "einops_rearrange"], [545, 0, 1, "", "einops_reduce"], [546, 0, 1, "", "einops_repeat"], [758, 0, 1, "", "einsum"], [295, 0, 1, "", "elu"], [401, 0, 1, "", "embedding"], [130, 0, 1, "", "empty_like"], [240, 0, 1, "", "equal"], [241, 0, 1, "", "erf"], [342, 0, 1, "", "erfc"], [343, 0, 1, "", "erfinv"], [547, 0, 1, "", "exists"], [242, 0, 1, "", "exp"], [243, 0, 1, "", "exp2"], [471, 0, 1, "", "expand"], [701, 0, 1, "", "expand_dims"], [244, 0, 1, "", "expm1"], [312, 0, 1, "", "eye_like"], [402, 0, 1, "", "fft"], [403, 0, 1, "", "fft2"], [472, 0, 1, "", "fill_diagonal"], [164, 0, 1, "", "finfo"], [344, 0, 1, "", "fix"], [473, 0, 1, "", "flatten"], [702, 0, 1, "", "flip"], [474, 0, 1, "", "fliplr"], [475, 0, 1, "", "flipud"], [345, 0, 1, "", "float_power"], [245, 0, 1, "", "floor"], [246, 0, 1, "", "floor_divide"], [346, 0, 1, "", "fmax"], [247, 0, 1, "", "fmin"], [248, 0, 1, "", "fmod"], [476, 0, 1, "", "fold"], [548, 0, 1, "", "fourier_encode"], [347, 0, 1, "", "frexp"], [132, 0, 1, "", "from_dlpack"], [135, 0, 1, "", "full_like"], [510, 0, 1, "", "gamma"], [551, 0, 1, "", "gather"], [552, 0, 1, "", "gather_nd"], [249, 0, 1, "", "gcd"], [109, 0, 1, "", "gelu"], [431, 0, 1, "", "general_inner_product"], [555, 0, 1, "", "get_num_dims"], [348, 0, 1, "", "gradient"], [618, 0, 1, "", "gradient_descent_update"], [250, 0, 1, "", "greater"], [251, 0, 1, "", "greater_equal"], [501, 0, 1, "", "group_norm"], [296, 0, 1, "", "hardshrink"], [297, 0, 1, "", "hardsilu"], [110, 0, 1, "", "hardswish"], [298, 0, 1, "", "hardtanh"], [557, 0, 1, "", "has_nans"], [477, 0, 1, "", "heaviside"], [432, 0, 1, "", "higher_order_moment"], [451, 0, 1, "", "hinge_embedding_loss"], [524, 0, 1, "", "histogram"], [478, 0, 1, "", "hsplit"], [479, 0, 1, "", "hstack"], [452, 0, 1, "", "huber_loss"], [349, 0, 1, "", "hypot"], [480, 0, 1, "", "i0"], [406, 0, 1, "", "idct"], [407, 0, 1, "", "ifft"], [408, 0, 1, "", "ifftn"], [525, 0, 1, "", "igamma"], [167, 0, 1, "", "iinfo"], [252, 0, 1, "", "imag"], [433, 0, 1, "", "initialize_tucker"], [674, 0, 1, "", "inner"], [559, 0, 1, "", "inplace_decrement"], [560, 0, 1, "", "inplace_increment"], [561, 0, 1, "", "inplace_update"], [502, 0, 1, "", "instance_norm"], [410, 0, 1, "", "interpolate"], [675, 0, 1, "", "inv"], [563, 0, 1, "", "is_array"], [170, 0, 1, "", "is_bool_dtype"], [172, 0, 1, "", "is_float_dtype"], [174, 0, 1, "", "is_int_dtype"], [564, 0, 1, "", "is_ivy_array"], [565, 0, 1, "", "is_ivy_container"], [567, 0, 1, "", "is_native_array"], [176, 0, 1, "", "is_uint_dtype"], [350, 0, 1, "", "isclose"], [253, 0, 1, "", "isfinite"], [568, 0, 1, "", "isin"], [254, 0, 1, "", "isinf"], [255, 0, 1, "", "isnan"], [256, 0, 1, "", "isreal"], [570, 0, 1, "", "itemsize"], [453, 0, 1, "", "kl_div"], [435, 0, 1, "", "kron"], [454, 0, 1, "", "l1_loss"], [503, 0, 1, "", "l1_normalize"], [504, 0, 1, "", "l2_normalize"], [620, 0, 1, "", "lamb_update"], [621, 0, 1, "", "lars_update"], [736, 0, 1, "", "layer_norm"], [257, 0, 1, "", "lcm"], [351, 0, 1, "", "ldexp"], [111, 0, 1, "", "leaky_relu"], [352, 0, 1, "", "lerp"], [258, 0, 1, "", "less"], [259, 0, 1, "", "less_equal"], [514, 0, 1, "", "lexsort"], [353, 0, 1, "", "lgamma"], [659, 0, 1, "", "linear"], [136, 0, 1, "", "linspace"], [260, 0, 1, "", "log"], [261, 0, 1, "", "log10"], [262, 0, 1, "", "log1p"], [263, 0, 1, "", "log2"], [455, 0, 1, "", "log_poisson_loss"], [112, 0, 1, "", "log_softmax"], [264, 0, 1, "", "logaddexp"], [265, 0, 1, "", "logaddexp2"], [266, 0, 1, "", "logical_and"], [267, 0, 1, "", "logical_not"], [268, 0, 1, "", "logical_or"], [269, 0, 1, "", "logical_xor"], [299, 0, 1, "", "logit"], [300, 0, 1, "", "logsigmoid"], [137, 0, 1, "", "logspace"], [506, 0, 1, "", "lp_normalize"], [661, 0, 1, "", "lstm_update"], [439, 0, 1, "", "make_svd_non_negative"], [676, 0, 1, "", "matmul"], [481, 0, 1, "", "matricize"], [440, 0, 1, "", "matrix_exp"], [677, 0, 1, "", "matrix_norm"], [678, 0, 1, "", "matrix_power"], [679, 0, 1, "", "matrix_rank"], [680, 0, 1, "", "matrix_transpose"], [759, 0, 1, "", "max"], [411, 0, 1, "", "max_pool1d"], [412, 0, 1, "", "max_pool2d"], [413, 0, 1, "", "max_pool3d"], [414, 0, 1, "", "max_unpool1d"], [270, 0, 1, "", "maximum"], [760, 0, 1, "", "mean"], [526, 0, 1, "", "median"], [318, 0, 1, "", "mel_weight_matrix"], [138, 0, 1, "", "meshgrid"], [761, 0, 1, "", "min"], [271, 0, 1, "", "minimum"], [113, 0, 1, "", "mish"], [441, 0, 1, "", "mode_dot"], [354, 0, 1, "", "modf"], [482, 0, 1, "", "moveaxis"], [753, 0, 1, "", "msort"], [442, 0, 1, "", "multi_dot"], [662, 0, 1, "", "multi_head_attention"], [443, 0, 1, "", "multi_mode_dot"], [737, 0, 1, "", "multinomial"], [272, 0, 1, "", "multiply"], [273, 0, 1, "", "nan_to_num"], [527, 0, 1, "", "nanmean"], [528, 0, 1, "", "nanmedian"], [529, 0, 1, "", "nanmin"], [530, 0, 1, "", "nanprod"], [355, 0, 1, "", "nansum"], [139, 0, 1, "", "native_array"], [274, 0, 1, "", "negative"], [356, 0, 1, "", "nextafter"], [746, 0, 1, "", "nonzero"], [275, 0, 1, "", "not_equal"], [140, 0, 1, "", "one_hot"], [142, 0, 1, "", "ones_like"], [622, 0, 1, "", "optimizer_update"], [532, 0, 1, "", "optional_get_element"], [681, 0, 1, "", "outer"], [483, 0, 1, "", "pad"], [484, 0, 1, "", "partial_fold"], [485, 0, 1, "", "partial_tensor_to_vec"], [444, 0, 1, "", "partial_tucker"], [486, 0, 1, "", "partial_unfold"], [487, 0, 1, "", "partial_vec_to_tensor"], [703, 0, 1, "", "permute_dims"], [682, 0, 1, "", "pinv"], [511, 0, 1, "", "poisson"], [456, 0, 1, "", "poisson_nll_loss"], [276, 0, 1, "", "positive"], [277, 0, 1, "", "pow"], [301, 0, 1, "", "prelu"], [762, 0, 1, "", "prod"], [488, 0, 1, "", "put_along_axis"], [683, 0, 1, "", "qr"], [531, 0, 1, "", "quantile"], [278, 0, 1, "", "rad2deg"], [738, 0, 1, "", "randint"], [739, 0, 1, "", "random_normal"], [740, 0, 1, "", "random_uniform"], [279, 0, 1, "", "real"], [280, 0, 1, "", "reciprocal"], [362, 0, 1, "", "reduce"], [417, 0, 1, "", "reduce_window"], [114, 0, 1, "", "relu"], [302, 0, 1, "", "relu6"], [281, 0, 1, "", "remainder"], [704, 0, 1, "", "repeat"], [705, 0, 1, "", "reshape"], [179, 0, 1, "", "result_type"], [418, 0, 1, "", "rfft"], [419, 0, 1, "", "rfftn"], [706, 0, 1, "", "roll"], [489, 0, 1, "", "rot90"], [282, 0, 1, "", "round"], [665, 0, 1, "", "scaled_dot_product_attention"], [303, 0, 1, "", "scaled_tanh"], [575, 0, 1, "", "scatter_flat"], [576, 0, 1, "", "scatter_nd"], [754, 0, 1, "", "searchsorted"], [304, 0, 1, "", "selu"], [589, 0, 1, "", "shape"], [742, 0, 1, "", "shuffle"], [115, 0, 1, "", "sigmoid"], [283, 0, 1, "", "sign"], [357, 0, 1, "", "signbit"], [305, 0, 1, "", "silu"], [284, 0, 1, "", "sin"], [358, 0, 1, "", "sinc"], [285, 0, 1, "", "sinh"], [590, 0, 1, "", "size"], [421, 0, 1, "", "sliding_window"], [684, 0, 1, "", "slogdet"], [457, 0, 1, "", "smooth_l1_loss"], [458, 0, 1, "", "soft_margin_loss"], [490, 0, 1, "", "soft_thresholding"], [116, 0, 1, "", "softmax"], [117, 0, 1, "", "softplus"], [306, 0, 1, "", "softshrink"], [685, 0, 1, "", "solve"], [755, 0, 1, "", "sort"], [697, 0, 1, "", "sparse_cross_entropy"], [359, 0, 1, "", "sparsify_tensor"], [707, 0, 1, "", "split"], [286, 0, 1, "", "sqrt"], [287, 0, 1, "", "square"], [708, 0, 1, "", "squeeze"], [591, 0, 1, "", "stable_divide"], [592, 0, 1, "", "stable_pow"], [709, 0, 1, "", "stack"], [763, 0, 1, "", "std"], [422, 0, 1, "", "stft"], [623, 0, 1, "", "stop_gradient"], [593, 0, 1, "", "strides"], [288, 0, 1, "", "subtract"], [764, 0, 1, "", "sum"], [594, 0, 1, "", "supports_inplace_updates"], [686, 0, 1, "", "svd"], [446, 0, 1, "", "svd_flip"], [687, 0, 1, "", "svdvals"], [710, 0, 1, "", "swapaxes"], [491, 0, 1, "", "take"], [492, 0, 1, "", "take_along_axis"], [289, 0, 1, "", "tan"], [290, 0, 1, "", "tanh"], [308, 0, 1, "", "tanhshrink"], [447, 0, 1, "", "tensor_train"], [688, 0, 1, "", "tensordot"], [689, 0, 1, "", "tensorsolve"], [309, 0, 1, "", "threshold"], [310, 0, 1, "", "thresholded_relu"], [711, 0, 1, "", "tile"], [213, 0, 1, "", "to_device"], [596, 0, 1, "", "to_list"], [598, 0, 1, "", "to_numpy"], [599, 0, 1, "", "to_scalar"], [493, 0, 1, "", "top_k"], [690, 0, 1, "", "trace"], [291, 0, 1, "", "trapz"], [144, 0, 1, "", "tril"], [328, 0, 1, "", "trilu"], [494, 0, 1, "", "trim_zeros"], [145, 0, 1, "", "triu"], [292, 0, 1, "", "trunc"], [293, 0, 1, "", "trunc_divide"], [448, 0, 1, "", "truncated_svd"], [449, 0, 1, "", "tt_matrix_to_tensor"], [450, 0, 1, "", "tucker"], [495, 0, 1, "", "unflatten"], [496, 0, 1, "", "unfold"], [748, 0, 1, "", "unique_all"], [497, 0, 1, "", "unique_consecutive"], [749, 0, 1, "", "unique_counts"], [750, 0, 1, "", "unique_inverse"], [751, 0, 1, "", "unique_values"], [512, 0, 1, "", "unravel_index"], [329, 0, 1, "", "unsorted_segment_mean"], [330, 0, 1, "", "unsorted_segment_min"], [331, 0, 1, "", "unsorted_segment_sum"], [712, 0, 1, "", "unstack"], [612, 0, 1, "", "value_is_nan"], [691, 0, 1, "", "vander"], [765, 0, 1, "", "var"], [692, 0, 1, "", "vecdot"], [693, 0, 1, "", "vector_norm"], [694, 0, 1, "", "vector_to_skew_symmetric_matrix"], [498, 0, 1, "", "vsplit"], [499, 0, 1, "", "vstack"], [747, 0, 1, "", "where"], [360, 0, 1, "", "xlogy"], [713, 0, 1, "", "zero_pad"], [148, 0, 1, "", "zeros_like"], [361, 0, 1, "", "zeta"]], "ivy": [[633, 1, 1, "", "ArrayMode"], [629, 1, 1, "", "DefaultComplexDtype"], [630, 1, 1, "", "DefaultDevice"], [629, 1, 1, "", "DefaultDtype"], [629, 1, 1, "", "DefaultFloatDtype"], [629, 1, 1, "", "DefaultIntDtype"], [629, 1, 1, "", "DefaultUintDtype"], [385, 1, 1, "", "NativeSparseArray"], [628, 1, 1, "", "NestedSequence"], [633, 1, 1, "", "PreciseMode"], [630, 1, 1, "", "Profiler"], [385, 1, 1, "", "SparseArray"], [219, 2, 1, "", "abs"], [220, 2, 1, "", "acos"], [221, 2, 1, "", "acosh"], [634, 2, 1, "", "adam_step"], [634, 2, 1, "", "adam_update"], [388, 2, 1, "", "adaptive_avg_pool1d"], [389, 2, 1, "", "adaptive_avg_pool2d"], [390, 2, 1, "", "adaptive_max_pool2d"], [391, 2, 1, "", "adaptive_max_pool3d"], [222, 2, 1, "", "add"], [375, 2, 1, "", "adjoint"], [647, 2, 1, "", "all"], [633, 2, 1, "", "all_equal"], [640, 2, 1, "", "all_nested_indices"], [371, 2, 1, "", "allclose"], [371, 2, 1, "", "amax"], [371, 2, 1, "", "amin"], [223, 2, 1, "", "angle"], [647, 2, 1, "", "any"], [628, 2, 1, "", "arange"], [392, 2, 1, "", "area_interpolate"], [633, 2, 1, "", "arg_info"], [633, 2, 1, "", "arg_names"], [643, 2, 1, "", "argmax"], [643, 2, 1, "", "argmin"], [645, 2, 1, "", "argsort"], [643, 2, 1, "", "argwhere"], [628, 2, 1, "", "array"], [633, 2, 1, "", "array_equal"], [192, 2, 1, "", "as_ivy_dev"], [629, 2, 1, "", "as_ivy_dtype"], [193, 2, 1, "", "as_native_dev"], [629, 2, 1, "", "as_native_dtype"], [377, 2, 1, "", "as_strided"], [628, 2, 1, "", "asarray"], [224, 2, 1, "", "asin"], [225, 2, 1, "", "asinh"], [633, 2, 1, "", "assert_supports_inplace"], [377, 2, 1, "", "associative_scan"], [629, 2, 1, "", "astype"], [226, 2, 1, "", "atan"], [227, 2, 1, "", "atan2"], [228, 2, 1, "", "atanh"], [377, 2, 1, "", "atleast_1d"], [377, 2, 1, "", "atleast_2d"], [377, 2, 1, "", "atleast_3d"], [393, 2, 1, "", "avg_pool1d"], [394, 2, 1, "", "avg_pool2d"], [395, 2, 1, "", "avg_pool3d"], [380, 2, 1, "", "batch_norm"], [375, 2, 1, "", "batched_outer"], [381, 2, 1, "", "bernoulli"], [381, 2, 1, "", "beta"], [371, 2, 1, "", "binarizer"], [637, 2, 1, "", "binary_cross_entropy"], [386, 2, 1, "", "bincount"], [373, 2, 1, "", "bind_custom_gradient_function"], [229, 2, 1, "", "bitwise_and"], [230, 2, 1, "", "bitwise_invert"], [231, 2, 1, "", "bitwise_left_shift"], [232, 2, 1, "", "bitwise_or"], [233, 2, 1, "", "bitwise_right_shift"], [234, 2, 1, "", "bitwise_xor"], [311, 2, 1, "", "blackman_window"], [629, 2, 1, "", "broadcast_arrays"], [377, 2, 1, "", "broadcast_shapes"], [629, 2, 1, "", "broadcast_to"], [633, 2, 1, "", "cache_fn"], [629, 2, 1, "", "can_cast"], [235, 2, 1, "", "ceil"], [294, 2, 1, "", "celu"], [629, 2, 1, "", "check_float"], [377, 2, 1, "", "check_scalar"], [636, 2, 1, "", "cholesky"], [377, 2, 1, "", "choose"], [194, 2, 1, "", "clear_cached_mem_on_dev"], [638, 2, 1, "", "clip"], [633, 2, 1, "", "clip_matrix_norm"], [633, 2, 1, "", "clip_vector_norm"], [629, 2, 1, "", "closest_valid_dtype"], [627, 2, 1, "", "cmp_is"], [627, 2, 1, "", "cmp_isnot"], [377, 2, 1, "", "column_stack"], [638, 2, 1, "", "concat"], [377, 2, 1, "", "concat_from_sequence"], [375, 2, 1, "", "cond"], [371, 2, 1, "", "conj"], [638, 2, 1, "", "constant_pad"], [633, 2, 1, "", "container_types"], [635, 2, 1, "", "conv"], [635, 2, 1, "", "conv1d"], [635, 2, 1, "", "conv1d_transpose"], [635, 2, 1, "", "conv2d"], [635, 2, 1, "", "conv2d_transpose"], [635, 2, 1, "", "conv3d"], [635, 2, 1, "", "conv3d_transpose"], [635, 2, 1, "", "conv_general_dilated"], [635, 2, 1, "", "conv_general_transpose"], [628, 2, 1, "", "copy_array"], [640, 2, 1, "", "copy_nest"], [371, 2, 1, "", "copysign"], [386, 2, 1, "", "corrcoef"], [236, 2, 1, "", "cos"], [237, 2, 1, "", "cosh"], [371, 2, 1, "", "count_nonzero"], [386, 2, 1, "", "cov"], [636, 2, 1, "", "cross"], [637, 2, 1, "", "cross_entropy"], [386, 2, 1, "", "cummax"], [386, 2, 1, "", "cummin"], [646, 2, 1, "", "cumprod"], [646, 2, 1, "", "cumsum"], [633, 2, 1, "", "current_backend_str"], [396, 2, 1, "", "dct"], [633, 2, 1, "", "default"], [629, 2, 1, "", "default_complex_dtype"], [195, 2, 1, "", "default_device"], [629, 2, 1, "", "default_dtype"], [629, 2, 1, "", "default_float_dtype"], [629, 2, 1, "", "default_int_dtype"], [629, 2, 1, "", "default_uint_dtype"], [238, 2, 1, "", "deg2rad"], [635, 2, 1, "", "depthwise_conv2d"], [636, 2, 1, "", "det"], [196, 2, 1, "", "dev"], [197, 2, 1, "", "dev_util"], [397, 2, 1, "", "dft"], [636, 2, 1, "", "diag"], [375, 2, 1, "", "diagflat"], [636, 2, 1, "", "diagonal"], [371, 2, 1, "", "diff"], [371, 2, 1, "", "digamma"], [381, 2, 1, "", "dirichlet"], [239, 2, 1, "", "divide"], [375, 2, 1, "", "dot"], [635, 2, 1, "", "dropout"], [398, 2, 1, "", "dropout1d"], [399, 2, 1, "", "dropout2d"], [400, 2, 1, "", "dropout3d"], [377, 2, 1, "", "dsplit"], [377, 2, 1, "", "dstack"], [629, 2, 1, "", "dtype"], [629, 2, 1, "", "dtype_bits"], [640, 2, 1, "", "duplicate_array_index_chains"], [626, 6, 1, "", "e"], [375, 2, 1, "", "eig"], [636, 2, 1, "", "eigh"], [375, 2, 1, "", "eigh_tridiagonal"], [375, 2, 1, "", "eigvals"], [636, 2, 1, "", "eigvalsh"], [633, 2, 1, "", "einops_rearrange"], [633, 2, 1, "", "einops_reduce"], [633, 2, 1, "", "einops_repeat"], [646, 2, 1, "", "einsum"], [295, 2, 1, "", "elu"], [401, 2, 1, "", "embedding"], [628, 2, 1, "", "empty"], [628, 2, 1, "", "empty_like"], [240, 2, 1, "", "equal"], [241, 2, 1, "", "erf"], [371, 2, 1, "", "erfc"], [371, 2, 1, "", "erfinv"], [634, 2, 1, "", "execute_with_gradients"], [633, 2, 1, "", "exists"], [242, 2, 1, "", "exp"], [243, 2, 1, "", "exp2"], [377, 2, 1, "", "expand"], [638, 2, 1, "", "expand_dims"], [244, 2, 1, "", "expm1"], [628, 2, 1, "", "eye"], [312, 2, 1, "", "eye_like"], [402, 2, 1, "", "fft"], [403, 2, 1, "", "fft2"], [377, 2, 1, "", "fill_diagonal"], [629, 2, 1, "", "finfo"], [371, 2, 1, "", "fix"], [377, 2, 1, "", "flatten"], [638, 2, 1, "", "flip"], [377, 2, 1, "", "fliplr"], [377, 2, 1, "", "flipud"], [371, 2, 1, "", "float_power"], [245, 2, 1, "", "floor"], [246, 2, 1, "", "floor_divide"], [371, 2, 1, "", "fmax"], [247, 2, 1, "", "fmin"], [248, 2, 1, "", "fmod"], [377, 2, 1, "", "fold"], [639, 2, 1, "", "fomaml_step"], [627, 2, 1, "", "for_loop"], [633, 2, 1, "", "fourier_encode"], [371, 2, 1, "", "frexp"], [628, 2, 1, "", "from_dlpack"], [628, 2, 1, "", "frombuffer"], [628, 2, 1, "", "full"], [628, 2, 1, "", "full_like"], [198, 2, 1, "", "function_supported_devices"], [633, 2, 1, "", "function_supported_devices_and_dtypes"], [629, 2, 1, "", "function_supported_dtypes"], [199, 2, 1, "", "function_unsupported_devices"], [633, 2, 1, "", "function_unsupported_devices_and_dtypes"], [629, 2, 1, "", "function_unsupported_dtypes"], [381, 2, 1, "", "gamma"], [633, 2, 1, "", "gather"], [633, 2, 1, "", "gather_nd"], [249, 2, 1, "", "gcd"], [625, 2, 1, "", "gelu"], [375, 2, 1, "", "general_inner_product"], [404, 2, 1, "", "generate_einsum_equation"], [633, 2, 1, "", "get_all_arrays_in_memory"], [200, 2, 1, "", "get_all_ivy_arrays_on_dev"], [405, 2, 1, "", "get_interpolate_kernel"], [633, 2, 1, "", "get_item"], [633, 2, 1, "", "get_num_dims"], [633, 2, 1, "", "get_referrers_recursive"], [201, 2, 1, "", "gpu_is_available"], [634, 2, 1, "", "grad"], [371, 2, 1, "", "gradient"], [634, 2, 1, "", "gradient_descent_update"], [250, 2, 1, "", "greater"], [251, 2, 1, "", "greater_equal"], [380, 2, 1, "", "group_norm"], [313, 2, 1, "", "hamming_window"], [202, 2, 1, "", "handle_soft_device_variable"], [314, 2, 1, "", "hann_window"], [296, 2, 1, "", "hardshrink"], [297, 2, 1, "", "hardsilu"], [625, 2, 1, "", "hardswish"], [298, 2, 1, "", "hardtanh"], [633, 2, 1, "", "has_nans"], [377, 2, 1, "", "heaviside"], [375, 2, 1, "", "higher_order_moment"], [376, 2, 1, "", "hinge_embedding_loss"], [386, 2, 1, "", "histogram"], [377, 2, 1, "", "hsplit"], [377, 2, 1, "", "hstack"], [376, 2, 1, "", "huber_loss"], [371, 2, 1, "", "hypot"], [377, 2, 1, "", "i0"], [406, 2, 1, "", "idct"], [627, 2, 1, "", "if_else"], [407, 2, 1, "", "ifft"], [408, 2, 1, "", "ifftn"], [386, 2, 1, "", "igamma"], [629, 2, 1, "", "iinfo"], [252, 2, 1, "", "imag"], [640, 2, 1, "", "index_nest"], [315, 2, 1, "", "indices"], [626, 6, 1, "", "inf"], [629, 2, 1, "", "infer_default_dtype"], [375, 2, 1, "", "initialize_tucker"], [636, 2, 1, "", "inner"], [633, 2, 1, "", "inplace_arrays_supported"], [633, 2, 1, "", "inplace_decrement"], [633, 2, 1, "", "inplace_increment"], [633, 2, 1, "", "inplace_update"], [633, 2, 1, "", "inplace_variables_supported"], [640, 2, 1, "", "insert_into_nest_at_index"], [640, 2, 1, "", "insert_into_nest_at_indices"], [380, 2, 1, "", "instance_norm"], [409, 2, 1, "", "interp"], [410, 2, 1, "", "interpolate"], [636, 2, 1, "", "inv"], [629, 2, 1, "", "invalid_dtype"], [384, 2, 1, "", "invert_permutation"], [633, 2, 1, "", "is_array"], [629, 2, 1, "", "is_bool_dtype"], [629, 2, 1, "", "is_complex_dtype"], [629, 2, 1, "", "is_float_dtype"], [629, 2, 1, "", "is_hashable_dtype"], [629, 2, 1, "", "is_int_dtype"], [633, 2, 1, "", "is_ivy_array"], [633, 2, 1, "", "is_ivy_container"], [633, 2, 1, "", "is_ivy_nested_array"], [385, 2, 1, "", "is_ivy_sparse_array"], [633, 2, 1, "", "is_native_array"], [629, 2, 1, "", "is_native_dtype"], [385, 2, 1, "", "is_native_sparse_array"], [629, 2, 1, "", "is_uint_dtype"], [371, 2, 1, "", "isclose"], [253, 2, 1, "", "isfinite"], [633, 2, 1, "", "isin"], [254, 2, 1, "", "isinf"], [255, 2, 1, "", "isnan"], [256, 2, 1, "", "isreal"], [633, 2, 1, "", "isscalar"], [633, 2, 1, "", "itemsize"], [634, 2, 1, "", "jac"], [373, 2, 1, "", "jvp"], [316, 2, 1, "", "kaiser_bessel_derived_window"], [317, 2, 1, "", "kaiser_window"], [375, 2, 1, "", "khatri_rao"], [376, 2, 1, "", "kl_div"], [375, 2, 1, "", "kron"], [375, 2, 1, "", "kronecker"], [376, 2, 1, "", "l1_loss"], [380, 2, 1, "", "l1_normalize"], [380, 2, 1, "", "l2_normalize"], [634, 2, 1, "", "lamb_update"], [634, 2, 1, "", "lars_update"], [641, 2, 1, "", "layer_norm"], [257, 2, 1, "", "lcm"], [371, 2, 1, "", "ldexp"], [625, 2, 1, "", "leaky_relu"], [371, 2, 1, "", "lerp"], [258, 2, 1, "", "less"], [259, 2, 1, "", "less_equal"], [384, 2, 1, "", "lexsort"], [371, 2, 1, "", "lgamma"], [635, 2, 1, "", "linear"], [628, 2, 1, "", "linspace"], [647, 2, 1, "", "load"], [380, 2, 1, "", "local_response_norm"], [260, 2, 1, "", "log"], [261, 2, 1, "", "log10"], [262, 2, 1, "", "log1p"], [263, 2, 1, "", "log2"], [376, 2, 1, "", "log_poisson_loss"], [625, 2, 1, "", "log_softmax"], [264, 2, 1, "", "logaddexp"], [265, 2, 1, "", "logaddexp2"], [266, 2, 1, "", "logical_and"], [267, 2, 1, "", "logical_not"], [268, 2, 1, "", "logical_or"], [269, 2, 1, "", "logical_xor"], [299, 2, 1, "", "logit"], [300, 2, 1, "", "logsigmoid"], [628, 2, 1, "", "logspace"], [380, 2, 1, "", "lp_normalize"], [635, 2, 1, "", "lstm"], [635, 2, 1, "", "lstm_update"], [375, 2, 1, "", "lu_factor"], [375, 2, 1, "", "lu_solve"], [375, 2, 1, "", "make_svd_non_negative"], [639, 2, 1, "", "maml_step"], [640, 2, 1, "", "map"], [640, 2, 1, "", "map_nest_at_index"], [640, 2, 1, "", "map_nest_at_indices"], [633, 2, 1, "", "match_kwargs"], [636, 2, 1, "", "matmul"], [377, 2, 1, "", "matricize"], [375, 2, 1, "", "matrix_exp"], [636, 2, 1, "", "matrix_norm"], [636, 2, 1, "", "matrix_power"], [636, 2, 1, "", "matrix_rank"], [636, 2, 1, "", "matrix_transpose"], [646, 2, 1, "", "max"], [411, 2, 1, "", "max_pool1d"], [412, 2, 1, "", "max_pool2d"], [413, 2, 1, "", "max_pool3d"], [374, 2, 1, "", "max_unpool1d"], [270, 2, 1, "", "maximum"], [646, 2, 1, "", "mean"], [386, 2, 1, "", "median"], [318, 2, 1, "", "mel_weight_matrix"], [628, 2, 1, "", "meshgrid"], [646, 2, 1, "", "min"], [271, 2, 1, "", "minimum"], [625, 2, 1, "", "mish"], [375, 2, 1, "", "mode_dot"], [371, 2, 1, "", "modf"], [377, 2, 1, "", "moveaxis"], [645, 2, 1, "", "msort"], [375, 2, 1, "", "multi_dot"], [635, 2, 1, "", "multi_head_attention"], [640, 2, 1, "", "multi_index_nest"], [375, 2, 1, "", "multi_mode_dot"], [642, 2, 1, "", "multinomial"], [272, 2, 1, "", "multiply"], [633, 2, 1, "", "multiprocessing"], [626, 6, 1, "", "nan"], [273, 2, 1, "", "nan_to_num"], [386, 2, 1, "", "nanmean"], [386, 2, 1, "", "nanmedian"], [386, 2, 1, "", "nanmin"], [386, 2, 1, "", "nanprod"], [371, 2, 1, "", "nansum"], [628, 2, 1, "", "native_array"], [385, 2, 1, "", "native_sparse_array"], [385, 2, 1, "", "native_sparse_array_to_indices_values_and_shape"], [319, 2, 1, "", "ndenumerate"], [320, 2, 1, "", "ndindex"], [374, 2, 1, "", "nearest_interpolate"], [274, 2, 1, "", "negative"], [640, 2, 1, "", "nested_any"], [640, 2, 1, "", "nested_argwhere"], [640, 2, 1, "", "nested_map"], [640, 2, 1, "", "nested_multi_map"], [626, 6, 1, "", "newaxis"], [371, 2, 1, "", "nextafter"], [635, 2, 1, "", "nms"], [643, 2, 1, "", "nonzero"], [275, 2, 1, "", "not_equal"], [633, 2, 1, "", "num_arrays_in_memory"], [203, 2, 1, "", "num_cpu_cores"], [204, 2, 1, "", "num_gpus"], [205, 2, 1, "", "num_ivy_arrays_on_dev"], [628, 2, 1, "", "one_hot"], [628, 2, 1, "", "ones"], [628, 2, 1, "", "ones_like"], [634, 2, 1, "", "optimizer_update"], [387, 2, 1, "", "optional_get_element"], [636, 2, 1, "", "outer"], [377, 2, 1, "", "pad"], [377, 2, 1, "", "partial_fold"], [377, 2, 1, "", "partial_tensor_to_vec"], [375, 2, 1, "", "partial_tucker"], [377, 2, 1, "", "partial_unfold"], [377, 2, 1, "", "partial_vec_to_tensor"], [206, 2, 1, "", "percent_used_mem_on_dev"], [638, 2, 1, "", "permute_dims"], [626, 6, 1, "", "pi"], [636, 2, 1, "", "pinv"], [381, 2, 1, "", "poisson"], [376, 2, 1, "", "poisson_nll_loss"], [321, 2, 1, "", "polyval"], [374, 2, 1, "", "pool"], [276, 2, 1, "", "positive"], [277, 2, 1, "", "pow"], [301, 2, 1, "", "prelu"], [633, 2, 1, "", "print_all_arrays_in_memory"], [207, 2, 1, "", "print_all_ivy_arrays_on_dev"], [646, 2, 1, "", "prod"], [629, 2, 1, "", "promote_types"], [629, 2, 1, "", "promote_types_of_inputs"], [640, 2, 1, "", "prune_empty"], [640, 2, 1, "", "prune_nest_at_index"], [640, 2, 1, "", "prune_nest_at_indices"], [377, 2, 1, "", "put_along_axis"], [636, 2, 1, "", "qr"], [386, 2, 1, "", "quantile"], [278, 2, 1, "", "rad2deg"], [642, 2, 1, "", "randint"], [368, 2, 1, "", "random_cp"], [642, 2, 1, "", "random_normal"], [368, 2, 1, "", "random_parafac2"], [368, 2, 1, "", "random_tr"], [368, 2, 1, "", "random_tt"], [368, 2, 1, "", "random_tucker"], [642, 2, 1, "", "random_uniform"], [279, 2, 1, "", "real"], [280, 2, 1, "", "reciprocal"], [372, 2, 1, "", "reduce"], [374, 2, 1, "", "reduce_window"], [625, 2, 1, "", "relu"], [302, 2, 1, "", "relu6"], [281, 2, 1, "", "remainder"], [638, 2, 1, "", "repeat"], [639, 2, 1, "", "reptile_step"], [638, 2, 1, "", "reshape"], [629, 2, 1, "", "result_type"], [374, 2, 1, "", "rfft"], [374, 2, 1, "", "rfftn"], [374, 2, 1, "", "rnn"], [635, 2, 1, "", "roi_align"], [638, 2, 1, "", "roll"], [377, 2, 1, "", "rot90"], [282, 2, 1, "", "round"], [647, 2, 1, "", "save"], [635, 2, 1, "", "scaled_dot_product_attention"], [303, 2, 1, "", "scaled_tanh"], [633, 2, 1, "", "scatter_flat"], [633, 2, 1, "", "scatter_nd"], [645, 2, 1, "", "searchsorted"], [642, 2, 1, "", "seed"], [304, 2, 1, "", "selu"], [633, 2, 1, "", "set_array_mode"], [629, 2, 1, "", "set_default_complex_dtype"], [208, 2, 1, "", "set_default_device"], [629, 2, 1, "", "set_default_dtype"], [629, 2, 1, "", "set_default_float_dtype"], [629, 2, 1, "", "set_default_int_dtype"], [184, 2, 1, "", "set_default_uint_dtype"], [633, 2, 1, "", "set_exception_trace_mode"], [633, 2, 1, "", "set_inplace_mode"], [633, 2, 1, "", "set_item"], [633, 2, 1, "", "set_min_base"], [633, 2, 1, "", "set_min_denominator"], [640, 2, 1, "", "set_nest_at_index"], [640, 2, 1, "", "set_nest_at_indices"], [633, 2, 1, "", "set_nestable_mode"], [633, 2, 1, "", "set_precise_mode"], [633, 2, 1, "", "set_queue_timeout"], [633, 2, 1, "", "set_shape_array_mode"], [633, 2, 1, "", "set_show_func_wrapper_trace_mode"], [209, 2, 1, "", "set_soft_device_mode"], [210, 2, 1, "", "set_split_factor"], [633, 2, 1, "", "set_tmp_dir"], [633, 2, 1, "", "shape"], [642, 2, 1, "", "shuffle"], [625, 2, 1, "", "sigmoid"], [283, 2, 1, "", "sign"], [371, 2, 1, "", "signbit"], [305, 2, 1, "", "silu"], [284, 2, 1, "", "sin"], [371, 2, 1, "", "sinc"], [285, 2, 1, "", "sinh"], [633, 2, 1, "", "size"], [374, 2, 1, "", "sliding_window"], [636, 2, 1, "", "slogdet"], [376, 2, 1, "", "smooth_l1_loss"], [376, 2, 1, "", "soft_margin_loss"], [377, 2, 1, "", "soft_thresholding"], [625, 2, 1, "", "softmax"], [625, 2, 1, "", "softplus"], [306, 2, 1, "", "softshrink"], [625, 2, 1, "", "softsign"], [636, 2, 1, "", "solve"], [375, 2, 1, "", "solve_triangular"], [645, 2, 1, "", "sort"], [637, 2, 1, "", "sparse_cross_entropy"], [371, 2, 1, "", "sparsify_tensor"], [638, 2, 1, "", "split"], [211, 2, 1, "", "split_factor"], [212, 2, 1, "", "split_func_call"], [286, 2, 1, "", "sqrt"], [287, 2, 1, "", "square"], [638, 2, 1, "", "squeeze"], [633, 2, 1, "", "stable_divide"], [633, 2, 1, "", "stable_pow"], [638, 2, 1, "", "stack"], [307, 2, 1, "", "stanh"], [646, 2, 1, "", "std"], [374, 2, 1, "", "stft"], [634, 2, 1, "", "stop_gradient"], [633, 2, 1, "", "strides"], [288, 2, 1, "", "subtract"], [646, 2, 1, "", "sum"], [633, 2, 1, "", "supports_inplace_updates"], [636, 2, 1, "", "svd"], [375, 2, 1, "", "svd_flip"], [636, 2, 1, "", "svdvals"], [638, 2, 1, "", "swapaxes"], [377, 2, 1, "", "take"], [377, 2, 1, "", "take_along_axis"], [289, 2, 1, "", "tan"], [290, 2, 1, "", "tanh"], [308, 2, 1, "", "tanhshrink"], [375, 2, 1, "", "tensor_train"], [636, 2, 1, "", "tensordot"], [636, 2, 1, "", "tensorsolve"], [309, 2, 1, "", "threshold"], [310, 2, 1, "", "thresholded_relu"], [638, 2, 1, "", "tile"], [213, 2, 1, "", "to_device"], [628, 2, 1, "", "to_dlpack"], [633, 2, 1, "", "to_ivy_shape"], [633, 2, 1, "", "to_list"], [633, 2, 1, "", "to_native_shape"], [633, 2, 1, "", "to_numpy"], [633, 2, 1, "", "to_scalar"], [377, 2, 1, "", "top_k"], [214, 2, 1, "", "total_mem_on_dev"], [215, 2, 1, "", "tpu_is_available"], [636, 2, 1, "", "trace"], [862, 2, 1, "", "trace_graph"], [863, 2, 1, "", "transpile"], [291, 2, 1, "", "trapz"], [628, 2, 1, "", "tril"], [368, 2, 1, "", "tril_indices"], [368, 2, 1, "", "trilu"], [377, 2, 1, "", "trim_zeros"], [628, 2, 1, "", "triu"], [628, 2, 1, "", "triu_indices"], [292, 2, 1, "", "trunc"], [293, 2, 1, "", "trunc_divide"], [375, 2, 1, "", "truncated_svd"], [633, 2, 1, "", "try_else_none"], [627, 2, 1, "", "try_except"], [375, 2, 1, "", "tt_matrix_to_tensor"], [375, 2, 1, "", "tucker"], [185, 2, 1, "", "type_promote_arrays"], [377, 2, 1, "", "unflatten"], [377, 2, 1, "", "unfold"], [864, 2, 1, "", "unify"], [644, 2, 1, "", "unique_all"], [377, 2, 1, "", "unique_consecutive"], [644, 2, 1, "", "unique_counts"], [644, 2, 1, "", "unique_inverse"], [644, 2, 1, "", "unique_values"], [382, 2, 1, "", "unravel_index"], [633, 2, 1, "", "unset_array_mode"], [186, 2, 1, "", "unset_default_complex_dtype"], [216, 2, 1, "", "unset_default_device"], [187, 2, 1, "", "unset_default_dtype"], [188, 2, 1, "", "unset_default_float_dtype"], [189, 2, 1, "", "unset_default_int_dtype"], [190, 2, 1, "", "unset_default_uint_dtype"], [633, 2, 1, "", "unset_exception_trace_mode"], [633, 2, 1, "", "unset_inplace_mode"], [633, 2, 1, "", "unset_min_base"], [633, 2, 1, "", "unset_min_denominator"], [633, 2, 1, "", "unset_nestable_mode"], [633, 2, 1, "", "unset_precise_mode"], [633, 2, 1, "", "unset_queue_timeout"], [633, 2, 1, "", "unset_shape_array_mode"], [633, 2, 1, "", "unset_show_func_wrapper_trace_mode"], [217, 2, 1, "", "unset_soft_device_mode"], [633, 2, 1, "", "unset_tmp_dir"], [368, 2, 1, "", "unsorted_segment_mean"], [368, 2, 1, "", "unsorted_segment_min"], [368, 2, 1, "", "unsorted_segment_sum"], [638, 2, 1, "", "unstack"], [218, 2, 1, "", "used_mem_on_dev"], [191, 2, 1, "", "valid_dtype"], [634, 2, 1, "", "value_and_grad"], [633, 2, 1, "", "value_is_nan"], [636, 2, 1, "", "vander"], [646, 2, 1, "", "var"], [636, 2, 1, "", "vecdot"], [636, 2, 1, "", "vector_norm"], [636, 2, 1, "", "vector_to_skew_symmetric_matrix"], [373, 2, 1, "", "vjp"], [633, 2, 1, "", "vmap"], [368, 2, 1, "", "vorbis_window"], [377, 2, 1, "", "vsplit"], [377, 2, 1, "", "vstack"], [643, 2, 1, "", "where"], [627, 2, 1, "", "while_loop"], [371, 2, 1, "", "xlogy"], [638, 2, 1, "", "zero_pad"], [628, 2, 1, "", "zeros"], [628, 2, 1, "", "zeros_like"], [371, 2, 1, "", "zeta"]], "ivy.Container": [[219, 0, 1, "", "abs"], [220, 0, 1, "", "acos"], [221, 0, 1, "", "acosh"], [614, 0, 1, "", "adam_step"], [615, 0, 1, "", "adam_update"], [388, 0, 1, "", "adaptive_avg_pool1d"], [389, 0, 1, "", "adaptive_avg_pool2d"], [390, 0, 1, "", "adaptive_max_pool2d"], [391, 0, 1, "", "adaptive_max_pool3d"], [222, 0, 1, "", "add"], [423, 0, 1, "", "adjoint"], [766, 0, 1, "", "all"], [533, 0, 1, "", "all_equal"], [333, 0, 1, "", "allclose"], [334, 0, 1, "", "amax"], [335, 0, 1, "", "amin"], [223, 0, 1, "", "angle"], [767, 0, 1, "", "any"], [743, 0, 1, "", "argmax"], [744, 0, 1, "", "argmin"], [752, 0, 1, "", "argsort"], [745, 0, 1, "", "argwhere"], [536, 0, 1, "", "array_equal"], [459, 0, 1, "", "as_strided"], [127, 0, 1, "", "asarray"], [224, 0, 1, "", "asin"], [225, 0, 1, "", "asinh"], [537, 0, 1, "", "assert_supports_inplace"], [460, 0, 1, "", "associative_scan"], [151, 0, 1, "", "astype"], [226, 0, 1, "", "atan"], [227, 0, 1, "", "atan2"], [228, 0, 1, "", "atanh"], [461, 0, 1, "", "atleast_1d"], [462, 0, 1, "", "atleast_2d"], [463, 0, 1, "", "atleast_3d"], [393, 0, 1, "", "avg_pool1d"], [394, 0, 1, "", "avg_pool2d"], [395, 0, 1, "", "avg_pool3d"], [500, 0, 1, "", "batch_norm"], [424, 0, 1, "", "batched_outer"], [507, 0, 1, "", "bernoulli"], [508, 0, 1, "", "beta"], [336, 0, 1, "", "binarizer"], [695, 0, 1, "", "binary_cross_entropy"], [519, 0, 1, "", "bincount"], [229, 0, 1, "", "bitwise_and"], [230, 0, 1, "", "bitwise_invert"], [231, 0, 1, "", "bitwise_left_shift"], [232, 0, 1, "", "bitwise_or"], [233, 0, 1, "", "bitwise_right_shift"], [234, 0, 1, "", "bitwise_xor"], [311, 0, 1, "", "blackman_window"], [152, 0, 1, "", "broadcast_arrays"], [464, 0, 1, "", "broadcast_shapes"], [153, 0, 1, "", "broadcast_to"], [154, 0, 1, "", "can_cast"], [235, 0, 1, "", "ceil"], [294, 0, 1, "", "celu"], [666, 0, 1, "", "cholesky"], [698, 0, 1, "", "clip"], [539, 0, 1, "", "clip_matrix_norm"], [540, 0, 1, "", "clip_vector_norm"], [467, 0, 1, "", "column_stack"], [699, 0, 1, "", "concat"], [468, 0, 1, "", "concat_from_sequence"], [425, 0, 1, "", "cond"], [337, 0, 1, "", "conj"], [700, 0, 1, "", "constant_pad"], [649, 0, 1, "", "conv1d"], [650, 0, 1, "", "conv1d_transpose"], [651, 0, 1, "", "conv2d"], [652, 0, 1, "", "conv2d_transpose"], [653, 0, 1, "", "conv3d"], [654, 0, 1, "", "conv3d_transpose"], [128, 0, 1, "", "copy_array"], [338, 0, 1, "", "copysign"], [520, 0, 1, "", "corrcoef"], [236, 0, 1, "", "cos"], [237, 0, 1, "", "cosh"], [339, 0, 1, "", "count_nonzero"], [521, 0, 1, "", "cov"], [667, 0, 1, "", "cross"], [696, 0, 1, "", "cross_entropy"], [522, 0, 1, "", "cummax"], [523, 0, 1, "", "cummin"], [756, 0, 1, "", "cumprod"], [757, 0, 1, "", "cumsum"], [396, 0, 1, "", "dct"], [238, 0, 1, "", "deg2rad"], [657, 0, 1, "", "depthwise_conv2d"], [668, 0, 1, "", "det"], [196, 0, 1, "", "dev"], [397, 0, 1, "", "dft"], [669, 0, 1, "", "diag"], [426, 0, 1, "", "diagflat"], [670, 0, 1, "", "diagonal"], [340, 0, 1, "", "diff"], [341, 0, 1, "", "digamma"], [509, 0, 1, "", "dirichlet"], [239, 0, 1, "", "divide"], [427, 0, 1, "", "dot"], [658, 0, 1, "", "dropout"], [398, 0, 1, "", "dropout1d"], [399, 0, 1, "", "dropout2d"], [400, 0, 1, "", "dropout3d"], [469, 0, 1, "", "dsplit"], [470, 0, 1, "", "dstack"], [162, 0, 1, "", "dtype"], [428, 0, 1, "", "eig"], [672, 0, 1, "", "eigh"], [429, 0, 1, "", "eigh_tridiagonal"], [430, 0, 1, "", "eigvals"], [673, 0, 1, "", "eigvalsh"], [544, 0, 1, "", "einops_rearrange"], [545, 0, 1, "", "einops_reduce"], [546, 0, 1, "", "einops_repeat"], [758, 0, 1, "", "einsum"], [295, 0, 1, "", "elu"], [401, 0, 1, "", "embedding"], [130, 0, 1, "", "empty_like"], [240, 0, 1, "", "equal"], [241, 0, 1, "", "erf"], [342, 0, 1, "", "erfc"], [343, 0, 1, "", "erfinv"], [547, 0, 1, "", "exists"], [242, 0, 1, "", "exp"], [243, 0, 1, "", "exp2"], [471, 0, 1, "", "expand"], [701, 0, 1, "", "expand_dims"], [244, 0, 1, "", "expm1"], [312, 0, 1, "", "eye_like"], [402, 0, 1, "", "fft"], [472, 0, 1, "", "fill_diagonal"], [164, 0, 1, "", "finfo"], [344, 0, 1, "", "fix"], [473, 0, 1, "", "flatten"], [702, 0, 1, "", "flip"], [474, 0, 1, "", "fliplr"], [475, 0, 1, "", "flipud"], [345, 0, 1, "", "float_power"], [245, 0, 1, "", "floor"], [246, 0, 1, "", "floor_divide"], [346, 0, 1, "", "fmax"], [247, 0, 1, "", "fmin"], [248, 0, 1, "", "fmod"], [476, 0, 1, "", "fold"], [548, 0, 1, "", "fourier_encode"], [347, 0, 1, "", "frexp"], [132, 0, 1, "", "from_dlpack"], [133, 0, 1, "", "frombuffer"], [135, 0, 1, "", "full_like"], [510, 0, 1, "", "gamma"], [551, 0, 1, "", "gather"], [552, 0, 1, "", "gather_nd"], [249, 0, 1, "", "gcd"], [109, 0, 1, "", "gelu"], [431, 0, 1, "", "general_inner_product"], [555, 0, 1, "", "get_num_dims"], [348, 0, 1, "", "gradient"], [618, 0, 1, "", "gradient_descent_update"], [250, 0, 1, "", "greater"], [251, 0, 1, "", "greater_equal"], [501, 0, 1, "", "group_norm"], [313, 0, 1, "", "hamming_window"], [314, 0, 1, "", "hann_window"], [296, 0, 1, "", "hardshrink"], [297, 0, 1, "", "hardsilu"], [110, 0, 1, "", "hardswish"], [298, 0, 1, "", "hardtanh"], [557, 0, 1, "", "has_nans"], [477, 0, 1, "", "heaviside"], [432, 0, 1, "", "higher_order_moment"], [451, 0, 1, "", "hinge_embedding_loss"], [524, 0, 1, "", "histogram"], [478, 0, 1, "", "hsplit"], [479, 0, 1, "", "hstack"], [452, 0, 1, "", "huber_loss"], [349, 0, 1, "", "hypot"], [480, 0, 1, "", "i0"], [406, 0, 1, "", "idct"], [407, 0, 1, "", "ifft"], [408, 0, 1, "", "ifftn"], [525, 0, 1, "", "igamma"], [167, 0, 1, "", "iinfo"], [252, 0, 1, "", "imag"], [433, 0, 1, "", "initialize_tucker"], [674, 0, 1, "", "inner"], [559, 0, 1, "", "inplace_decrement"], [560, 0, 1, "", "inplace_increment"], [561, 0, 1, "", "inplace_update"], [502, 0, 1, "", "instance_norm"], [410, 0, 1, "", "interpolate"], [675, 0, 1, "", "inv"], [513, 0, 1, "", "invert_permutation"], [563, 0, 1, "", "is_array"], [170, 0, 1, "", "is_bool_dtype"], [171, 0, 1, "", "is_complex_dtype"], [172, 0, 1, "", "is_float_dtype"], [174, 0, 1, "", "is_int_dtype"], [564, 0, 1, "", "is_ivy_array"], [567, 0, 1, "", "is_native_array"], [176, 0, 1, "", "is_uint_dtype"], [350, 0, 1, "", "isclose"], [253, 0, 1, "", "isfinite"], [568, 0, 1, "", "isin"], [254, 0, 1, "", "isinf"], [255, 0, 1, "", "isnan"], [256, 0, 1, "", "isreal"], [570, 0, 1, "", "itemsize"], [316, 0, 1, "", "kaiser_bessel_derived_window"], [317, 0, 1, "", "kaiser_window"], [453, 0, 1, "", "kl_div"], [435, 0, 1, "", "kron"], [454, 0, 1, "", "l1_loss"], [503, 0, 1, "", "l1_normalize"], [504, 0, 1, "", "l2_normalize"], [620, 0, 1, "", "lamb_update"], [621, 0, 1, "", "lars_update"], [736, 0, 1, "", "layer_norm"], [257, 0, 1, "", "lcm"], [351, 0, 1, "", "ldexp"], [111, 0, 1, "", "leaky_relu"], [352, 0, 1, "", "lerp"], [258, 0, 1, "", "less"], [259, 0, 1, "", "less_equal"], [514, 0, 1, "", "lexsort"], [353, 0, 1, "", "lgamma"], [659, 0, 1, "", "linear"], [136, 0, 1, "", "linspace"], [260, 0, 1, "", "log"], [261, 0, 1, "", "log10"], [262, 0, 1, "", "log1p"], [263, 0, 1, "", "log2"], [455, 0, 1, "", "log_poisson_loss"], [112, 0, 1, "", "log_softmax"], [264, 0, 1, "", "logaddexp"], [265, 0, 1, "", "logaddexp2"], [266, 0, 1, "", "logical_and"], [267, 0, 1, "", "logical_not"], [268, 0, 1, "", "logical_or"], [269, 0, 1, "", "logical_xor"], [299, 0, 1, "", "logit"], [300, 0, 1, "", "logsigmoid"], [137, 0, 1, "", "logspace"], [506, 0, 1, "", "lp_normalize"], [661, 0, 1, "", "lstm_update"], [439, 0, 1, "", "make_svd_non_negative"], [676, 0, 1, "", "matmul"], [481, 0, 1, "", "matricize"], [440, 0, 1, "", "matrix_exp"], [677, 0, 1, "", "matrix_norm"], [678, 0, 1, "", "matrix_power"], [679, 0, 1, "", "matrix_rank"], [680, 0, 1, "", "matrix_transpose"], [759, 0, 1, "", "max"], [411, 0, 1, "", "max_pool1d"], [412, 0, 1, "", "max_pool2d"], [413, 0, 1, "", "max_pool3d"], [414, 0, 1, "", "max_unpool1d"], [270, 0, 1, "", "maximum"], [760, 0, 1, "", "mean"], [526, 0, 1, "", "median"], [318, 0, 1, "", "mel_weight_matrix"], [138, 0, 1, "", "meshgrid"], [761, 0, 1, "", "min"], [271, 0, 1, "", "minimum"], [113, 0, 1, "", "mish"], [441, 0, 1, "", "mode_dot"], [354, 0, 1, "", "modf"], [482, 0, 1, "", "moveaxis"], [753, 0, 1, "", "msort"], [442, 0, 1, "", "multi_dot"], [662, 0, 1, "", "multi_head_attention"], [443, 0, 1, "", "multi_mode_dot"], [737, 0, 1, "", "multinomial"], [272, 0, 1, "", "multiply"], [273, 0, 1, "", "nan_to_num"], [527, 0, 1, "", "nanmean"], [528, 0, 1, "", "nanmedian"], [529, 0, 1, "", "nanmin"], [530, 0, 1, "", "nanprod"], [355, 0, 1, "", "nansum"], [139, 0, 1, "", "native_array"], [274, 0, 1, "", "negative"], [356, 0, 1, "", "nextafter"], [746, 0, 1, "", "nonzero"], [275, 0, 1, "", "not_equal"], [140, 0, 1, "", "one_hot"], [142, 0, 1, "", "ones_like"], [622, 0, 1, "", "optimizer_update"], [532, 0, 1, "", "optional_get_element"], [681, 0, 1, "", "outer"], [483, 0, 1, "", "pad"], [484, 0, 1, "", "partial_fold"], [485, 0, 1, "", "partial_tensor_to_vec"], [444, 0, 1, "", "partial_tucker"], [486, 0, 1, "", "partial_unfold"], [487, 0, 1, "", "partial_vec_to_tensor"], [703, 0, 1, "", "permute_dims"], [682, 0, 1, "", "pinv"], [511, 0, 1, "", "poisson"], [456, 0, 1, "", "poisson_nll_loss"], [321, 0, 1, "", "polyval"], [276, 0, 1, "", "positive"], [277, 0, 1, "", "pow"], [301, 0, 1, "", "prelu"], [762, 0, 1, "", "prod"], [488, 0, 1, "", "put_along_axis"], [683, 0, 1, "", "qr"], [531, 0, 1, "", "quantile"], [278, 0, 1, "", "rad2deg"], [738, 0, 1, "", "randint"], [739, 0, 1, "", "random_normal"], [740, 0, 1, "", "random_uniform"], [279, 0, 1, "", "real"], [280, 0, 1, "", "reciprocal"], [362, 0, 1, "", "reduce"], [417, 0, 1, "", "reduce_window"], [114, 0, 1, "", "relu"], [302, 0, 1, "", "relu6"], [281, 0, 1, "", "remainder"], [704, 0, 1, "", "repeat"], [705, 0, 1, "", "reshape"], [179, 0, 1, "", "result_type"], [418, 0, 1, "", "rfft"], [419, 0, 1, "", "rfftn"], [706, 0, 1, "", "roll"], [489, 0, 1, "", "rot90"], [282, 0, 1, "", "round"], [665, 0, 1, "", "scaled_dot_product_attention"], [303, 0, 1, "", "scaled_tanh"], [575, 0, 1, "", "scatter_flat"], [576, 0, 1, "", "scatter_nd"], [754, 0, 1, "", "searchsorted"], [304, 0, 1, "", "selu"], [742, 0, 1, "", "shuffle"], [115, 0, 1, "", "sigmoid"], [283, 0, 1, "", "sign"], [357, 0, 1, "", "signbit"], [305, 0, 1, "", "silu"], [284, 0, 1, "", "sin"], [358, 0, 1, "", "sinc"], [285, 0, 1, "", "sinh"], [590, 0, 1, "", "size"], [421, 0, 1, "", "sliding_window"], [684, 0, 1, "", "slogdet"], [457, 0, 1, "", "smooth_l1_loss"], [458, 0, 1, "", "soft_margin_loss"], [490, 0, 1, "", "soft_thresholding"], [116, 0, 1, "", "softmax"], [117, 0, 1, "", "softplus"], [306, 0, 1, "", "softshrink"], [685, 0, 1, "", "solve"], [755, 0, 1, "", "sort"], [697, 0, 1, "", "sparse_cross_entropy"], [359, 0, 1, "", "sparsify_tensor"], [707, 0, 1, "", "split"], [286, 0, 1, "", "sqrt"], [287, 0, 1, "", "square"], [708, 0, 1, "", "squeeze"], [591, 0, 1, "", "stable_divide"], [592, 0, 1, "", "stable_pow"], [709, 0, 1, "", "stack"], [763, 0, 1, "", "std"], [422, 0, 1, "", "stft"], [623, 0, 1, "", "stop_gradient"], [593, 0, 1, "", "strides"], [288, 0, 1, "", "subtract"], [764, 0, 1, "", "sum"], [594, 0, 1, "", "supports_inplace_updates"], [686, 0, 1, "", "svd"], [446, 0, 1, "", "svd_flip"], [687, 0, 1, "", "svdvals"], [710, 0, 1, "", "swapaxes"], [491, 0, 1, "", "take"], [492, 0, 1, "", "take_along_axis"], [289, 0, 1, "", "tan"], [290, 0, 1, "", "tanh"], [308, 0, 1, "", "tanhshrink"], [447, 0, 1, "", "tensor_train"], [688, 0, 1, "", "tensordot"], [689, 0, 1, "", "tensorsolve"], [309, 0, 1, "", "threshold"], [310, 0, 1, "", "thresholded_relu"], [711, 0, 1, "", "tile"], [213, 0, 1, "", "to_device"], [596, 0, 1, "", "to_list"], [598, 0, 1, "", "to_numpy"], [599, 0, 1, "", "to_scalar"], [493, 0, 1, "", "top_k"], [690, 0, 1, "", "trace"], [291, 0, 1, "", "trapz"], [144, 0, 1, "", "tril"], [327, 0, 1, "", "tril_indices"], [328, 0, 1, "", "trilu"], [494, 0, 1, "", "trim_zeros"], [145, 0, 1, "", "triu"], [146, 0, 1, "", "triu_indices"], [292, 0, 1, "", "trunc"], [293, 0, 1, "", "trunc_divide"], [448, 0, 1, "", "truncated_svd"], [449, 0, 1, "", "tt_matrix_to_tensor"], [450, 0, 1, "", "tucker"], [495, 0, 1, "", "unflatten"], [496, 0, 1, "", "unfold"], [748, 0, 1, "", "unique_all"], [497, 0, 1, "", "unique_consecutive"], [749, 0, 1, "", "unique_counts"], [750, 0, 1, "", "unique_inverse"], [751, 0, 1, "", "unique_values"], [512, 0, 1, "", "unravel_index"], [329, 0, 1, "", "unsorted_segment_mean"], [330, 0, 1, "", "unsorted_segment_min"], [331, 0, 1, "", "unsorted_segment_sum"], [712, 0, 1, "", "unstack"], [612, 0, 1, "", "value_is_nan"], [691, 0, 1, "", "vander"], [765, 0, 1, "", "var"], [692, 0, 1, "", "vecdot"], [693, 0, 1, "", "vector_norm"], [694, 0, 1, "", "vector_to_skew_symmetric_matrix"], [332, 0, 1, "", "vorbis_window"], [498, 0, 1, "", "vsplit"], [499, 0, 1, "", "vstack"], [747, 0, 1, "", "where"], [360, 0, 1, "", "xlogy"], [713, 0, 1, "", "zero_pad"], [148, 0, 1, "", "zeros_like"], [361, 0, 1, "", "zeta"]], "ivy.data_classes.array": [[50, 3, 0, "-", "activations"], [101, 3, 0, "-", "array"], [51, 3, 0, "-", "conversions"], [52, 3, 0, "-", "creation"], [53, 3, 0, "-", "data_type"], [54, 3, 0, "-", "device"], [55, 3, 0, "-", "elementwise"], [56, 3, 0, "-", "experimental"], [57, 3, 0, "-", "general"], [58, 3, 0, "-", "gradients"], [59, 3, 0, "-", "image"], [60, 3, 0, "-", "layers"], [61, 3, 0, "-", "linear_algebra"], [62, 3, 0, "-", "losses"], [63, 3, 0, "-", "manipulation"], [64, 3, 0, "-", "norms"], [65, 3, 0, "-", "random"], [66, 3, 0, "-", "searching"], [67, 3, 0, "-", "set"], [68, 3, 0, "-", "sorting"], [69, 3, 0, "-", "statistical"], [70, 3, 0, "-", "utility"], [71, 3, 0, "-", "wrapping"]], "ivy.data_classes.array.activations": [[50, 1, 1, "", "_ArrayWithActivations"]], "ivy.data_classes.array.activations._ArrayWithActivations": [[50, 4, 1, "", "_abc_impl"], [50, 0, 1, "", "gelu"], [50, 0, 1, "", "hardswish"], [50, 0, 1, "", "leaky_relu"], [50, 0, 1, "", "log_softmax"], [50, 0, 1, "", "mish"], [50, 0, 1, "", "relu"], [50, 0, 1, "", "sigmoid"], [50, 0, 1, "", "softmax"], [50, 0, 1, "", "softplus"]], "ivy.data_classes.array.array": [[101, 1, 1, "", "Array"]], "ivy.data_classes.array.array.Array": [[101, 5, 1, "", "T"], [101, 0, 1, "", "__abs__"], [101, 0, 1, "", "__add__"], [101, 0, 1, "", "__eq__"], [101, 0, 1, "", "__ge__"], [101, 0, 1, "", "__gt__"], [101, 0, 1, "", "__init__"], [101, 0, 1, "", "__le__"], [101, 0, 1, "", "__lt__"], [101, 0, 1, "", "__ne__"], [101, 0, 1, "", "__pow__"], [101, 0, 1, "", "__radd__"], [101, 0, 1, "", "__rrshift__"], [101, 0, 1, "", "__rshift__"], [101, 0, 1, "", "__rsub__"], [101, 0, 1, "", "__sub__"], [101, 0, 1, "", "__truediv__"], [101, 0, 1, "", "__xor__"], [101, 5, 1, "", "backend"], [101, 5, 1, "", "base"], [101, 5, 1, "", "data"], [101, 5, 1, "", "device"], [101, 5, 1, "", "dtype"], [101, 5, 1, "", "dynamic_backend"], [101, 5, 1, "", "imag"], [101, 5, 1, "", "itemsize"], [101, 5, 1, "", "mT"], [101, 5, 1, "", "ndim"], [101, 5, 1, "", "real"], [101, 5, 1, "", "shape"], [101, 5, 1, "", "size"], [101, 5, 1, "", "strides"]], "ivy.data_classes.array.conversions": [[51, 2, 1, "", "_array_to_new_backend"], [51, 2, 1, "", "_to_ivy"], [51, 2, 1, "", "_to_native"], [51, 2, 1, "", "_to_new_backend"], [51, 2, 1, "", "args_to_ivy"], [51, 2, 1, "", "args_to_native"], [51, 2, 1, "", "args_to_new_backend"], [51, 2, 1, "", "to_ivy"], [51, 2, 1, "", "to_native"], [51, 2, 1, "", "to_new_backend"]], "ivy.data_classes.array.creation": [[52, 1, 1, "", "_ArrayWithCreation"]], "ivy.data_classes.array.creation._ArrayWithCreation": [[52, 4, 1, "", "_abc_impl"], [52, 0, 1, "", "asarray"], [52, 0, 1, "", "copy_array"], [52, 0, 1, "", "empty_like"], [52, 0, 1, "", "from_dlpack"], [52, 0, 1, "", "full_like"], [52, 0, 1, "", "linspace"], [52, 0, 1, "", "logspace"], [52, 0, 1, "", "meshgrid"], [52, 0, 1, "", "native_array"], [52, 0, 1, "", "one_hot"], [52, 0, 1, "", "ones_like"], [52, 0, 1, "", "tril"], [52, 0, 1, "", "triu"], [52, 0, 1, "", "zeros_like"]], "ivy.data_classes.array.data_type": [[53, 1, 1, "", "_ArrayWithDataTypes"]], "ivy.data_classes.array.data_type._ArrayWithDataTypes": [[53, 4, 1, "", "_abc_impl"], [53, 0, 1, "", "astype"], [53, 0, 1, "", "broadcast_arrays"], [53, 0, 1, "", "broadcast_to"], [53, 0, 1, "", "can_cast"], [53, 0, 1, "", "dtype"], [53, 0, 1, "", "finfo"], [53, 0, 1, "", "iinfo"], [53, 0, 1, "", "is_bool_dtype"], [53, 0, 1, "", "is_float_dtype"], [53, 0, 1, "", "is_int_dtype"], [53, 0, 1, "", "is_uint_dtype"], [53, 0, 1, "", "result_type"]], "ivy.data_classes.array.device": [[54, 1, 1, "", "_ArrayWithDevice"]], "ivy.data_classes.array.device._ArrayWithDevice": [[54, 4, 1, "", "_abc_impl"], [54, 0, 1, "", "dev"], [54, 0, 1, "", "to_device"]], "ivy.data_classes.array.elementwise": [[55, 1, 1, "", "_ArrayWithElementwise"]], "ivy.data_classes.array.elementwise._ArrayWithElementwise": [[55, 4, 1, "", "_abc_impl"], [55, 0, 1, "", "abs"], [55, 0, 1, "", "acos"], [55, 0, 1, "", "acosh"], [55, 0, 1, "", "add"], [55, 0, 1, "", "angle"], [55, 0, 1, "", "asin"], [55, 0, 1, "", "asinh"], [55, 0, 1, "", "atan"], [55, 0, 1, "", "atan2"], [55, 0, 1, "", "atanh"], [55, 0, 1, "", "bitwise_and"], [55, 0, 1, "", "bitwise_invert"], [55, 0, 1, "", "bitwise_left_shift"], [55, 0, 1, "", "bitwise_or"], [55, 0, 1, "", "bitwise_right_shift"], [55, 0, 1, "", "bitwise_xor"], [55, 0, 1, "", "ceil"], [55, 0, 1, "", "cos"], [55, 0, 1, "", "cosh"], [55, 0, 1, "", "deg2rad"], [55, 0, 1, "", "divide"], [55, 0, 1, "", "equal"], [55, 0, 1, "", "erf"], [55, 0, 1, "", "exp"], [55, 0, 1, "", "exp2"], [55, 0, 1, "", "expm1"], [55, 0, 1, "", "floor"], [55, 0, 1, "", "floor_divide"], [55, 0, 1, "", "fmin"], [55, 0, 1, "", "gcd"], [55, 0, 1, "", "greater"], [55, 0, 1, "", "greater_equal"], [55, 0, 1, "", "isfinite"], [55, 0, 1, "", "isinf"], [55, 0, 1, "", "isnan"], [55, 0, 1, "", "isreal"], [55, 0, 1, "", "lcm"], [55, 0, 1, "", "less"], [55, 0, 1, "", "less_equal"], [55, 0, 1, "", "log"], [55, 0, 1, "", "log10"], [55, 0, 1, "", "log1p"], [55, 0, 1, "", "log2"], [55, 0, 1, "", "logaddexp"], [55, 0, 1, "", "logaddexp2"], [55, 0, 1, "", "logical_and"], [55, 0, 1, "", "logical_not"], [55, 0, 1, "", "logical_or"], [55, 0, 1, "", "logical_xor"], [55, 0, 1, "", "maximum"], [55, 0, 1, "", "minimum"], [55, 0, 1, "", "multiply"], [55, 0, 1, "", "nan_to_num"], [55, 0, 1, "", "negative"], [55, 0, 1, "", "not_equal"], [55, 0, 1, "", "positive"], [55, 0, 1, "", "pow"], [55, 0, 1, "", "rad2deg"], [55, 0, 1, "", "real"], [55, 0, 1, "", "reciprocal"], [55, 0, 1, "", "remainder"], [55, 0, 1, "", "round"], [55, 0, 1, "", "sign"], [55, 0, 1, "", "sin"], [55, 0, 1, "", "sinh"], [55, 0, 1, "", "sqrt"], [55, 0, 1, "", "square"], [55, 0, 1, "", "subtract"], [55, 0, 1, "", "tan"], [55, 0, 1, "", "tanh"], [55, 0, 1, "", "trapz"], [55, 0, 1, "", "trunc"], [55, 0, 1, "", "trunc_divide"]], "ivy.data_classes.array.experimental": [[56, 3, 0, "-", "activations"], [56, 3, 0, "-", "conversions"], [56, 3, 0, "-", "creation"], [56, 3, 0, "-", "data_type"], [56, 3, 0, "-", "device"], [56, 3, 0, "-", "elementwise"], [56, 3, 0, "-", "general"], [56, 3, 0, "-", "gradients"], [56, 3, 0, "-", "image"], [56, 3, 0, "-", "layers"], [56, 3, 0, "-", "linear_algebra"], [56, 3, 0, "-", "losses"], [56, 3, 0, "-", "manipulation"], [56, 3, 0, "-", "norms"], [56, 3, 0, "-", "random"], [56, 3, 0, "-", "searching"], [56, 3, 0, "-", "set"], [56, 3, 0, "-", "sorting"], [56, 3, 0, "-", "statistical"], [56, 3, 0, "-", "utility"]], "ivy.data_classes.array.experimental.activations": [[56, 1, 1, "", "_ArrayWithActivationsExperimental"]], "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental": [[56, 4, 1, "", "_abc_impl"], [56, 0, 1, "", "celu"], [56, 0, 1, "", "elu"], [56, 0, 1, "", "hardshrink"], [56, 0, 1, "", "hardsilu"], [56, 0, 1, "", "hardtanh"], [56, 0, 1, "", "logit"], [56, 0, 1, "", "logsigmoid"], [56, 0, 1, "", "prelu"], [56, 0, 1, "", "relu6"], [56, 0, 1, "", "scaled_tanh"], [56, 0, 1, "", "selu"], [56, 0, 1, "", "silu"], [56, 0, 1, "", "softshrink"], [56, 0, 1, "", "tanhshrink"], [56, 0, 1, "", "threshold"], [56, 0, 1, "", "thresholded_relu"]], "ivy.data_classes.array.experimental.conversions": [[56, 1, 1, "", "_ArrayWithConversionsExperimental"]], "ivy.data_classes.array.experimental.conversions._ArrayWithConversionsExperimental": [[56, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.creation": [[56, 1, 1, "", "_ArrayWithCreationExperimental"], [56, 2, 1, "", "polyval"]], "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental": [[56, 4, 1, "", "_abc_impl"], [56, 0, 1, "", "blackman_window"], [56, 0, 1, "", "eye_like"], [56, 0, 1, "", "mel_weight_matrix"], [56, 0, 1, "", "trilu"], [56, 0, 1, "", "unsorted_segment_mean"], [56, 0, 1, "", "unsorted_segment_min"], [56, 0, 1, "", "unsorted_segment_sum"]], "ivy.data_classes.array.experimental.data_type": [[56, 1, 1, "", "_ArrayWithData_typeExperimental"]], "ivy.data_classes.array.experimental.data_type._ArrayWithData_typeExperimental": [[56, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.device": [[56, 1, 1, "", "_ArrayWithDeviceExperimental"]], "ivy.data_classes.array.experimental.device._ArrayWithDeviceExperimental": [[56, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.elementwise": [[56, 1, 1, "", "_ArrayWithElementWiseExperimental"]], "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental": [[56, 4, 1, "", "_abc_impl"], [56, 0, 1, "", "allclose"], [56, 0, 1, "", "amax"], [56, 0, 1, "", "amin"], [56, 0, 1, "", "binarizer"], [56, 0, 1, "", "conj"], [56, 0, 1, "", "copysign"], [56, 0, 1, "", "count_nonzero"], [56, 0, 1, "", "diff"], [56, 0, 1, "", "digamma"], [56, 0, 1, "", "erfc"], [56, 0, 1, "", "erfinv"], [56, 0, 1, "", "fix"], [56, 0, 1, "", "float_power"], [56, 0, 1, "", "fmax"], [56, 0, 1, "", "fmod"], [56, 0, 1, "", "frexp"], [56, 0, 1, "", "gradient"], [56, 0, 1, "", "hypot"], [56, 0, 1, "", "isclose"], [56, 0, 1, "", "ldexp"], [56, 0, 1, "", "lerp"], [56, 0, 1, "", "lgamma"], [56, 0, 1, "", "modf"], [56, 0, 1, "", "nansum"], [56, 0, 1, "", "nextafter"], [56, 0, 1, "", "signbit"], [56, 0, 1, "", "sinc"], [56, 0, 1, "", "sparsify_tensor"], [56, 0, 1, "", "xlogy"], [56, 0, 1, "", "zeta"]], "ivy.data_classes.array.experimental.general": [[56, 1, 1, "", "_ArrayWithGeneralExperimental"]], "ivy.data_classes.array.experimental.general._ArrayWithGeneralExperimental": [[56, 4, 1, "", "_abc_impl"], [56, 0, 1, "", "reduce"]], "ivy.data_classes.array.experimental.gradients": [[56, 1, 1, "", "_ArrayWithGradientsExperimental"]], "ivy.data_classes.array.experimental.gradients._ArrayWithGradientsExperimental": [[56, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.image": [[56, 1, 1, "", "_ArrayWithImageExperimental"]], "ivy.data_classes.array.experimental.image._ArrayWithImageExperimental": [[56, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.layers": [[56, 1, 1, "", "_ArrayWithLayersExperimental"]], "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental": [[56, 4, 1, "", "_abc_impl"], [56, 0, 1, "", "adaptive_avg_pool1d"], [56, 0, 1, "", "adaptive_avg_pool2d"], [56, 0, 1, "", "adaptive_max_pool2d"], [56, 0, 1, "", "adaptive_max_pool3d"], [56, 0, 1, "", "avg_pool1d"], [56, 0, 1, "", "avg_pool2d"], [56, 0, 1, "", "avg_pool3d"], [56, 0, 1, "", "dct"], [56, 0, 1, "", "dft"], [56, 0, 1, "", "embedding"], [56, 0, 1, "", "fft"], [56, 0, 1, "", "fft2"], [56, 0, 1, "", "idct"], [56, 0, 1, "", "ifft"], [56, 0, 1, "", "ifftn"], [56, 0, 1, "", "interpolate"], [56, 0, 1, "", "max_pool1d"], [56, 0, 1, "", "max_pool2d"], [56, 0, 1, "", "max_pool3d"], [56, 0, 1, "", "max_unpool1d"], [56, 0, 1, "", "reduce_window"], [56, 0, 1, "", "rfft"], [56, 0, 1, "", "rfftn"], [56, 0, 1, "", "sliding_window"], [56, 0, 1, "", "stft"]], "ivy.data_classes.array.experimental.linear_algebra": [[56, 1, 1, "", "_ArrayWithLinearAlgebraExperimental"]], "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental": [[56, 4, 1, "", "_abc_impl"], [56, 0, 1, "", "adjoint"], [56, 0, 1, "", "batched_outer"], [56, 0, 1, "", "cond"], [56, 0, 1, "", "diagflat"], [56, 0, 1, "", "dot"], [56, 0, 1, "", "eig"], [56, 0, 1, "", "eigh_tridiagonal"], [56, 0, 1, "", "eigvals"], [56, 0, 1, "", "general_inner_product"], [56, 0, 1, "", "higher_order_moment"], [56, 0, 1, "", "initialize_tucker"], [56, 0, 1, "", "kron"], [56, 0, 1, "", "make_svd_non_negative"], [56, 0, 1, "", "matrix_exp"], [56, 0, 1, "", "mode_dot"], [56, 0, 1, "", "multi_dot"], [56, 0, 1, "", "multi_mode_dot"], [56, 0, 1, "", "partial_tucker"], [56, 0, 1, "", "svd_flip"], [56, 0, 1, "", "tensor_train"], [56, 0, 1, "", "truncated_svd"], [56, 0, 1, "", "tt_matrix_to_tensor"], [56, 0, 1, "", "tucker"]], "ivy.data_classes.array.experimental.losses": [[56, 1, 1, "", "_ArrayWithLossesExperimental"]], "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental": [[56, 4, 1, "", "_abc_impl"], [56, 0, 1, "", "hinge_embedding_loss"], [56, 0, 1, "", "huber_loss"], [56, 0, 1, "", "kl_div"], [56, 0, 1, "", "l1_loss"], [56, 0, 1, "", "log_poisson_loss"], [56, 0, 1, "", "poisson_nll_loss"], [56, 0, 1, "", "smooth_l1_loss"], [56, 0, 1, "", "soft_margin_loss"]], "ivy.data_classes.array.experimental.manipulation": [[56, 1, 1, "", "_ArrayWithManipulationExperimental"]], "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental": [[56, 4, 1, "", "_abc_impl"], [56, 0, 1, "", "as_strided"], [56, 0, 1, "", "associative_scan"], [56, 0, 1, "", "atleast_1d"], [56, 0, 1, "", "atleast_2d"], [56, 0, 1, "", "atleast_3d"], [56, 0, 1, "", "column_stack"], [56, 0, 1, "", "concat_from_sequence"], [56, 0, 1, "", "dsplit"], [56, 0, 1, "", "dstack"], [56, 0, 1, "", "expand"], [56, 0, 1, "", "fill_diagonal"], [56, 0, 1, "", "flatten"], [56, 0, 1, "", "fliplr"], [56, 0, 1, "", "flipud"], [56, 0, 1, "", "fold"], [56, 0, 1, "", "heaviside"], [56, 0, 1, "", "hsplit"], [56, 0, 1, "", "hstack"], [56, 0, 1, "", "i0"], [56, 0, 1, "", "matricize"], [56, 0, 1, "", "moveaxis"], [56, 0, 1, "", "pad"], [56, 0, 1, "", "partial_fold"], [56, 0, 1, "", "partial_tensor_to_vec"], [56, 0, 1, "", "partial_unfold"], [56, 0, 1, "", "partial_vec_to_tensor"], [56, 0, 1, "", "put_along_axis"], [56, 0, 1, "", "rot90"], [56, 0, 1, "", "soft_thresholding"], [56, 0, 1, "", "take"], [56, 0, 1, "", "take_along_axis"], [56, 0, 1, "", "top_k"], [56, 0, 1, "", "trim_zeros"], [56, 0, 1, "", "unflatten"], [56, 0, 1, "", "unfold"], [56, 0, 1, "", "unique_consecutive"], [56, 0, 1, "", "vsplit"], [56, 0, 1, "", "vstack"]], "ivy.data_classes.array.experimental.norms": [[56, 1, 1, "", "_ArrayWithNormsExperimental"]], "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental": [[56, 4, 1, "", "_abc_impl"], [56, 0, 1, "", "batch_norm"], [56, 0, 1, "", "group_norm"], [56, 0, 1, "", "instance_norm"], [56, 0, 1, "", "l1_normalize"], [56, 0, 1, "", "l2_normalize"], [56, 0, 1, "", "lp_normalize"]], "ivy.data_classes.array.experimental.random": [[56, 1, 1, "", "_ArrayWithRandomExperimental"]], "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental": [[56, 4, 1, "", "_abc_impl"], [56, 0, 1, "", "bernoulli"], [56, 0, 1, "", "beta"], [56, 0, 1, "", "dirichlet"], [56, 0, 1, "", "gamma"], [56, 0, 1, "", "poisson"]], "ivy.data_classes.array.experimental.searching": [[56, 1, 1, "", "_ArrayWithSearchingExperimental"]], "ivy.data_classes.array.experimental.searching._ArrayWithSearchingExperimental": [[56, 4, 1, "", "_abc_impl"], [56, 0, 1, "", "unravel_index"]], "ivy.data_classes.array.experimental.set": [[56, 1, 1, "", "_ArrayWithSetExperimental"]], "ivy.data_classes.array.experimental.set._ArrayWithSetExperimental": [[56, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.sorting": [[56, 1, 1, "", "_ArrayWithSortingExperimental"]], "ivy.data_classes.array.experimental.sorting._ArrayWithSortingExperimental": [[56, 4, 1, "", "_abc_impl"], [56, 0, 1, "", "lexsort"]], "ivy.data_classes.array.experimental.statistical": [[56, 1, 1, "", "_ArrayWithStatisticalExperimental"]], "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental": [[56, 4, 1, "", "_abc_impl"], [56, 0, 1, "", "bincount"], [56, 0, 1, "", "corrcoef"], [56, 0, 1, "", "cov"], [56, 0, 1, "", "cummax"], [56, 0, 1, "", "cummin"], [56, 0, 1, "", "histogram"], [56, 0, 1, "", "igamma"], [56, 0, 1, "", "median"], [56, 0, 1, "", "nanmean"], [56, 0, 1, "", "nanmedian"], [56, 0, 1, "", "nanmin"], [56, 0, 1, "", "nanprod"], [56, 0, 1, "", "quantile"]], "ivy.data_classes.array.experimental.utility": [[56, 1, 1, "", "_ArrayWithUtilityExperimental"]], "ivy.data_classes.array.experimental.utility._ArrayWithUtilityExperimental": [[56, 4, 1, "", "_abc_impl"], [56, 0, 1, "", "optional_get_element"]], "ivy.data_classes.array.general": [[57, 1, 1, "", "_ArrayWithGeneral"]], "ivy.data_classes.array.general._ArrayWithGeneral": [[57, 4, 1, "", "_abc_impl"], [57, 0, 1, "", "all_equal"], [57, 0, 1, "", "array_equal"], [57, 0, 1, "", "assert_supports_inplace"], [57, 0, 1, "", "clip_matrix_norm"], [57, 0, 1, "", "clip_vector_norm"], [57, 0, 1, "", "default"], [57, 0, 1, "", "einops_rearrange"], [57, 0, 1, "", "einops_reduce"], [57, 0, 1, "", "einops_repeat"], [57, 0, 1, "", "exists"], [57, 0, 1, "", "fourier_encode"], [57, 0, 1, "", "gather"], [57, 0, 1, "", "gather_nd"], [57, 0, 1, "", "get_num_dims"], [57, 0, 1, "", "has_nans"], [57, 0, 1, "", "inplace_decrement"], [57, 0, 1, "", "inplace_increment"], [57, 0, 1, "", "inplace_update"], [57, 0, 1, "", "is_array"], [57, 0, 1, "", "is_ivy_array"], [57, 0, 1, "", "is_ivy_container"], [57, 0, 1, "", "is_native_array"], [57, 0, 1, "", "isin"], [57, 0, 1, "", "scatter_flat"], [57, 0, 1, "", "scatter_nd"], [57, 0, 1, "", "stable_divide"], [57, 0, 1, "", "stable_pow"], [57, 0, 1, "", "supports_inplace_updates"], [57, 0, 1, "", "to_file"], [57, 0, 1, "", "to_list"], [57, 0, 1, "", "to_numpy"], [57, 0, 1, "", "to_scalar"], [57, 0, 1, "", "value_is_nan"]], "ivy.data_classes.array.gradients": [[58, 1, 1, "", "_ArrayWithGradients"]], "ivy.data_classes.array.gradients._ArrayWithGradients": [[58, 4, 1, "", "_abc_impl"], [58, 0, 1, "", "adam_step"], [58, 0, 1, "", "adam_update"], [58, 0, 1, "", "gradient_descent_update"], [58, 0, 1, "", "lamb_update"], [58, 0, 1, "", "lars_update"], [58, 0, 1, "", "optimizer_update"], [58, 0, 1, "", "stop_gradient"]], "ivy.data_classes.array.image": [[59, 1, 1, "", "_ArrayWithImage"]], "ivy.data_classes.array.image._ArrayWithImage": [[59, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.layers": [[60, 1, 1, "", "_ArrayWithLayers"]], "ivy.data_classes.array.layers._ArrayWithLayers": [[60, 4, 1, "", "_abc_impl"], [60, 0, 1, "", "conv1d"], [60, 0, 1, "", "conv1d_transpose"], [60, 0, 1, "", "conv2d"], [60, 0, 1, "", "conv2d_transpose"], [60, 0, 1, "", "conv3d"], [60, 0, 1, "", "conv3d_transpose"], [60, 0, 1, "", "depthwise_conv2d"], [60, 0, 1, "", "dropout"], [60, 0, 1, "", "dropout1d"], [60, 0, 1, "", "dropout2d"], [60, 0, 1, "", "dropout3d"], [60, 0, 1, "", "linear"], [60, 0, 1, "", "lstm_update"], [60, 0, 1, "", "multi_head_attention"], [60, 0, 1, "", "scaled_dot_product_attention"]], "ivy.data_classes.array.linear_algebra": [[61, 1, 1, "", "_ArrayWithLinearAlgebra"]], "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra": [[61, 4, 1, "", "_abc_impl"], [61, 0, 1, "", "cholesky"], [61, 0, 1, "", "cross"], [61, 0, 1, "", "det"], [61, 0, 1, "", "diag"], [61, 0, 1, "", "diagonal"], [61, 0, 1, "", "eig"], [61, 0, 1, "", "eigh"], [61, 0, 1, "", "eigvalsh"], [61, 0, 1, "", "inner"], [61, 0, 1, "", "inv"], [61, 0, 1, "", "matmul"], [61, 0, 1, "", "matrix_norm"], [61, 0, 1, "", "matrix_power"], [61, 0, 1, "", "matrix_rank"], [61, 0, 1, "", "matrix_transpose"], [61, 0, 1, "", "outer"], [61, 0, 1, "", "pinv"], [61, 0, 1, "", "qr"], [61, 0, 1, "", "slogdet"], [61, 0, 1, "", "solve"], [61, 0, 1, "", "svd"], [61, 0, 1, "", "svdvals"], [61, 0, 1, "", "tensordot"], [61, 0, 1, "", "tensorsolve"], [61, 0, 1, "", "trace"], [61, 0, 1, "", "vander"], [61, 0, 1, "", "vecdot"], [61, 0, 1, "", "vector_norm"], [61, 0, 1, "", "vector_to_skew_symmetric_matrix"]], "ivy.data_classes.array.losses": [[62, 1, 1, "", "_ArrayWithLosses"]], "ivy.data_classes.array.losses._ArrayWithLosses": [[62, 4, 1, "", "_abc_impl"], [62, 0, 1, "", "binary_cross_entropy"], [62, 0, 1, "", "cross_entropy"], [62, 0, 1, "", "sparse_cross_entropy"]], "ivy.data_classes.array.manipulation": [[63, 1, 1, "", "_ArrayWithManipulation"]], "ivy.data_classes.array.manipulation._ArrayWithManipulation": [[63, 4, 1, "", "_abc_impl"], [63, 0, 1, "", "clip"], [63, 0, 1, "", "concat"], [63, 0, 1, "", "constant_pad"], [63, 0, 1, "", "expand_dims"], [63, 0, 1, "", "flip"], [63, 0, 1, "", "permute_dims"], [63, 0, 1, "", "repeat"], [63, 0, 1, "", "reshape"], [63, 0, 1, "", "roll"], [63, 0, 1, "", "split"], [63, 0, 1, "", "squeeze"], [63, 0, 1, "", "stack"], [63, 0, 1, "", "swapaxes"], [63, 0, 1, "", "tile"], [63, 0, 1, "", "unstack"], [63, 0, 1, "", "view"], [63, 0, 1, "", "zero_pad"]], "ivy.data_classes.array.norms": [[64, 1, 1, "", "_ArrayWithNorms"]], "ivy.data_classes.array.norms._ArrayWithNorms": [[64, 4, 1, "", "_abc_impl"], [64, 0, 1, "", "layer_norm"]], "ivy.data_classes.array.random": [[65, 1, 1, "", "_ArrayWithRandom"]], "ivy.data_classes.array.random._ArrayWithRandom": [[65, 4, 1, "", "_abc_impl"], [65, 0, 1, "", "multinomial"], [65, 0, 1, "", "randint"], [65, 0, 1, "", "random_normal"], [65, 0, 1, "", "random_uniform"], [65, 0, 1, "", "shuffle"]], "ivy.data_classes.array.searching": [[66, 1, 1, "", "_ArrayWithSearching"]], "ivy.data_classes.array.searching._ArrayWithSearching": [[66, 4, 1, "", "_abc_impl"], [66, 0, 1, "", "argmax"], [66, 0, 1, "", "argmin"], [66, 0, 1, "", "argwhere"], [66, 0, 1, "", "nonzero"], [66, 0, 1, "", "where"]], "ivy.data_classes.array.set": [[67, 1, 1, "", "_ArrayWithSet"]], "ivy.data_classes.array.set._ArrayWithSet": [[67, 4, 1, "", "_abc_impl"], [67, 0, 1, "", "unique_all"], [67, 0, 1, "", "unique_counts"], [67, 0, 1, "", "unique_inverse"], [67, 0, 1, "", "unique_values"]], "ivy.data_classes.array.sorting": [[68, 1, 1, "", "_ArrayWithSorting"]], "ivy.data_classes.array.sorting._ArrayWithSorting": [[68, 4, 1, "", "_abc_impl"], [68, 0, 1, "", "argsort"], [68, 0, 1, "", "msort"], [68, 0, 1, "", "searchsorted"], [68, 0, 1, "", "sort"]], "ivy.data_classes.array.statistical": [[69, 1, 1, "", "_ArrayWithStatistical"]], "ivy.data_classes.array.statistical._ArrayWithStatistical": [[69, 4, 1, "", "_abc_impl"], [69, 0, 1, "", "cumprod"], [69, 0, 1, "", "cumsum"], [69, 0, 1, "", "einsum"], [69, 0, 1, "", "max"], [69, 0, 1, "", "mean"], [69, 0, 1, "", "min"], [69, 0, 1, "", "prod"], [69, 0, 1, "", "std"], [69, 0, 1, "", "sum"], [69, 0, 1, "", "var"]], "ivy.data_classes.array.utility": [[70, 1, 1, "", "_ArrayWithUtility"]], "ivy.data_classes.array.utility._ArrayWithUtility": [[70, 4, 1, "", "_abc_impl"], [70, 0, 1, "", "all"], [70, 0, 1, "", "any"]], "ivy.data_classes.array.wrapping": [[71, 2, 1, "", "_wrap_function"], [71, 2, 1, "", "add_ivy_array_instance_methods"]], "ivy.data_classes.container": [[72, 3, 0, "-", "activations"], [73, 3, 0, "-", "base"], [102, 3, 0, "-", "container"], [74, 3, 0, "-", "conversions"], [75, 3, 0, "-", "creation"], [76, 3, 0, "-", "data_type"], [77, 3, 0, "-", "device"], [78, 3, 0, "-", "elementwise"], [79, 3, 0, "-", "experimental"], [80, 3, 0, "-", "general"], [81, 3, 0, "-", "gradients"], [82, 3, 0, "-", "image"], [83, 3, 0, "-", "layers"], [84, 3, 0, "-", "linear_algebra"], [85, 3, 0, "-", "losses"], [86, 3, 0, "-", "manipulation"], [87, 3, 0, "-", "norms"], [88, 3, 0, "-", "random"], [89, 3, 0, "-", "searching"], [90, 3, 0, "-", "set"], [91, 3, 0, "-", "sorting"], [92, 3, 0, "-", "statistical"], [93, 3, 0, "-", "utility"], [94, 3, 0, "-", "wrapping"]], "ivy.data_classes.container.activations": [[72, 1, 1, "", "_ContainerWithActivations"]], "ivy.data_classes.container.activations._ContainerWithActivations": [[72, 4, 1, "", "_abc_impl"], [72, 0, 1, "", "_static_gelu"], [72, 0, 1, "", "_static_hardswish"], [72, 0, 1, "", "_static_leaky_relu"], [72, 0, 1, "", "_static_log_softmax"], [72, 0, 1, "", "_static_mish"], [72, 0, 1, "", "_static_relu"], [72, 0, 1, "", "_static_sigmoid"], [72, 0, 1, "", "_static_softmax"], [72, 0, 1, "", "_static_softplus"], [72, 0, 1, "", "gelu"], [72, 0, 1, "", "hardswish"], [72, 0, 1, "", "leaky_relu"], [72, 0, 1, "", "log_softmax"], [72, 0, 1, "", "mish"], [72, 0, 1, "", "relu"], [72, 0, 1, "", "sigmoid"], [72, 0, 1, "", "softmax"], [72, 0, 1, "", "softplus"]], "ivy.data_classes.container.base": [[73, 1, 1, "", "ContainerBase"], [73, 2, 1, "", "_is_jsonable"], [73, 2, 1, "", "_repr"]], "ivy.data_classes.container.base.ContainerBase": [[73, 0, 1, "", "__getitem__"], [73, 0, 1, "", "__init__"], [73, 0, 1, "", "__setitem__"], [73, 4, 1, "", "_abc_impl"], [73, 0, 1, "", "_cont_at_key_chains_input_as_dict"], [73, 0, 1, "", "_cont_at_key_chains_input_as_seq"], [73, 0, 1, "", "_cont_call_static_method_with_flexible_args"], [73, 0, 1, "", "_cont_concat_unify"], [73, 0, 1, "", "_cont_get_dev"], [73, 0, 1, "", "_cont_get_dtype"], [73, 0, 1, "", "_cont_get_shape"], [73, 0, 1, "", "_cont_get_shapes"], [73, 5, 1, "", "_cont_ivy"], [73, 0, 1, "", "_cont_mean_unify"], [73, 0, 1, "", "_cont_prune_key_chains_input_as_dict"], [73, 0, 1, "", "_cont_prune_key_chains_input_as_seq"], [73, 0, 1, "", "_cont_slice_keys"], [73, 0, 1, "", "_cont_sum_unify"], [73, 0, 1, "", "_get_queue_item"], [73, 0, 1, "", "cont_all_false"], [73, 0, 1, "", "cont_all_key_chains"], [73, 0, 1, "", "cont_all_true"], [73, 0, 1, "", "cont_as_bools"], [73, 0, 1, "", "cont_assert_contains_sub_container"], [73, 0, 1, "", "cont_assert_contains_sub_structure"], [73, 0, 1, "", "cont_assert_identical"], [73, 0, 1, "", "cont_assert_identical_structure"], [73, 0, 1, "", "cont_at_key_chain"], [73, 0, 1, "", "cont_at_key_chains"], [73, 0, 1, "", "cont_at_keys"], [73, 0, 1, "", "cont_combine"], [73, 0, 1, "", "cont_common_key_chains"], [73, 5, 1, "", "cont_config"], [73, 0, 1, "", "cont_contains_sub_container"], [73, 0, 1, "", "cont_contains_sub_structure"], [73, 0, 1, "", "cont_copy"], [73, 0, 1, "", "cont_create_if_absent"], [73, 0, 1, "", "cont_cutoff_at_depth"], [73, 0, 1, "", "cont_cutoff_at_height"], [73, 0, 1, "", "cont_deep_copy"], [73, 5, 1, "", "cont_dev"], [73, 5, 1, "", "cont_dev_str"], [73, 0, 1, "", "cont_diff"], [73, 5, 1, "", "cont_dtype"], [73, 0, 1, "", "cont_duplicate_array_keychains"], [73, 0, 1, "", "cont_find_sub_container"], [73, 0, 1, "", "cont_find_sub_structure"], [73, 0, 1, "", "cont_flatten_key_chain"], [73, 0, 1, "", "cont_flatten_key_chains"], [73, 0, 1, "", "cont_format_key_chains"], [73, 0, 1, "", "cont_from_disk_as_hdf5"], [73, 0, 1, "", "cont_from_disk_as_json"], [73, 0, 1, "", "cont_from_disk_as_pickled"], [73, 0, 1, "", "cont_from_flat_list"], [73, 0, 1, "", "cont_handle_inplace"], [73, 0, 1, "", "cont_has_key"], [73, 0, 1, "", "cont_has_key_chain"], [73, 0, 1, "", "cont_identical"], [73, 0, 1, "", "cont_identical_array_shapes"], [73, 0, 1, "", "cont_identical_configs"], [73, 0, 1, "", "cont_identical_structure"], [73, 0, 1, "", "cont_if_exists"], [73, 0, 1, "", "cont_inplace_update"], [73, 5, 1, "", "cont_ivy"], [73, 0, 1, "", "cont_key_chains_containing"], [73, 0, 1, "", "cont_list_join"], [73, 0, 1, "", "cont_list_stack"], [73, 0, 1, "", "cont_load"], [73, 0, 1, "", "cont_map"], [73, 0, 1, "", "cont_map_sub_conts"], [73, 5, 1, "", "cont_max_depth"], [73, 0, 1, "", "cont_multi_map"], [73, 0, 1, "", "cont_multi_map_in_function"], [73, 0, 1, "", "cont_num_arrays"], [73, 0, 1, "", "cont_overwrite_at_key_chain"], [73, 0, 1, "", "cont_overwrite_at_key_chains"], [73, 0, 1, "", "cont_prune_empty"], [73, 0, 1, "", "cont_prune_key_chain"], [73, 0, 1, "", "cont_prune_key_chains"], [73, 0, 1, "", "cont_prune_key_from_key_chains"], [73, 0, 1, "", "cont_prune_keys"], [73, 0, 1, "", "cont_prune_keys_from_key_chains"], [73, 0, 1, "", "cont_reduce"], [73, 0, 1, "", "cont_remove_key_length_limit"], [73, 0, 1, "", "cont_remove_print_limit"], [73, 0, 1, "", "cont_reshape_like"], [73, 0, 1, "", "cont_restructure"], [73, 0, 1, "", "cont_restructure_key_chains"], [73, 0, 1, "", "cont_save"], [73, 0, 1, "", "cont_set_at_key_chain"], [73, 0, 1, "", "cont_set_at_key_chains"], [73, 0, 1, "", "cont_set_at_keys"], [73, 5, 1, "", "cont_shape"], [73, 5, 1, "", "cont_shapes"], [73, 0, 1, "", "cont_show"], [73, 0, 1, "", "cont_show_sub_container"], [73, 0, 1, "", "cont_size_ordered_arrays"], [73, 0, 1, "", "cont_slice_keys"], [73, 0, 1, "", "cont_slice_via_key"], [73, 0, 1, "", "cont_sort_by_key"], [73, 0, 1, "", "cont_structural_diff"], [73, 0, 1, "", "cont_to_dict"], [73, 0, 1, "", "cont_to_disk_as_hdf5"], [73, 0, 1, "", "cont_to_disk_as_json"], [73, 0, 1, "", "cont_to_disk_as_pickled"], [73, 0, 1, "", "cont_to_flat_list"], [73, 0, 1, "", "cont_to_iterator"], [73, 0, 1, "", "cont_to_iterator_keys"], [73, 0, 1, "", "cont_to_iterator_values"], [73, 0, 1, "", "cont_to_jsonable"], [73, 0, 1, "", "cont_to_nested_list"], [73, 0, 1, "", "cont_to_raw"], [73, 0, 1, "", "cont_trim_key"], [73, 0, 1, "", "cont_try_kc"], [73, 0, 1, "", "cont_unify"], [73, 0, 1, "", "cont_unstack_conts"], [73, 0, 1, "", "cont_update_config"], [73, 0, 1, "", "cont_with_default_key_color"], [73, 0, 1, "", "cont_with_entries_as_lists"], [73, 0, 1, "", "cont_with_ivy_backend"], [73, 0, 1, "", "cont_with_key_length_limit"], [73, 0, 1, "", "cont_with_print_indent"], [73, 0, 1, "", "cont_with_print_limit"], [73, 0, 1, "", "cont_with_print_line_spacing"], [73, 5, 1, "", "dynamic_backend"], [73, 0, 1, "", "h5_file_size"], [73, 0, 1, "", "shuffle_h5_file"], [73, 0, 1, "", "split_conts"]], "ivy.data_classes.container.container": [[102, 1, 1, "", "Container"]], "ivy.data_classes.container.container.Container": [[102, 0, 1, "", "__abs__"], [102, 0, 1, "", "__add__"], [102, 0, 1, "", "__eq__"], [102, 0, 1, "", "__ge__"], [102, 0, 1, "", "__gt__"], [102, 0, 1, "", "__init__"], [102, 0, 1, "", "__le__"], [102, 0, 1, "", "__lt__"], [102, 0, 1, "", "__ne__"], [102, 0, 1, "", "__pow__"], [102, 0, 1, "", "__radd__"], [102, 0, 1, "", "__rrshift__"], [102, 0, 1, "", "__rshift__"], [102, 0, 1, "", "__rsub__"], [102, 0, 1, "", "__sub__"], [102, 0, 1, "", "__truediv__"], [102, 0, 1, "", "__xor__"]], "ivy.data_classes.container.conversions": [[74, 1, 1, "", "_ContainerWithConversions"]], "ivy.data_classes.container.conversions._ContainerWithConversions": [[74, 4, 1, "", "_abc_impl"], [74, 0, 1, "", "_static_to_ivy"], [74, 0, 1, "", "_static_to_native"], [74, 0, 1, "", "to_ivy"], [74, 0, 1, "", "to_native"]], "ivy.data_classes.container.creation": [[75, 1, 1, "", "_ContainerWithCreation"]], "ivy.data_classes.container.creation._ContainerWithCreation": [[75, 4, 1, "", "_abc_impl"], [75, 0, 1, "", "_static_arange"], [75, 0, 1, "", "_static_asarray"], [75, 0, 1, "", "_static_copy_array"], [75, 0, 1, "", "_static_empty"], [75, 0, 1, "", "_static_empty_like"], [75, 0, 1, "", "_static_eye"], [75, 0, 1, "", "_static_from_dlpack"], [75, 0, 1, "", "_static_full"], [75, 0, 1, "", "_static_full_like"], [75, 0, 1, "", "_static_linspace"], [75, 0, 1, "", "_static_logspace"], [75, 0, 1, "", "_static_meshgrid"], [75, 0, 1, "", "_static_native_array"], [75, 0, 1, "", "_static_one_hot"], [75, 0, 1, "", "_static_ones"], [75, 0, 1, "", "_static_ones_like"], [75, 0, 1, "", "_static_tril"], [75, 0, 1, "", "_static_triu"], [75, 0, 1, "", "_static_zeros"], [75, 0, 1, "", "_static_zeros_like"], [75, 0, 1, "", "asarray"], [75, 0, 1, "", "copy_array"], [75, 0, 1, "", "empty_like"], [75, 0, 1, "", "from_dlpack"], [75, 0, 1, "", "frombuffer"], [75, 0, 1, "", "full_like"], [75, 0, 1, "", "linspace"], [75, 0, 1, "", "logspace"], [75, 0, 1, "", "meshgrid"], [75, 0, 1, "", "native_array"], [75, 0, 1, "", "one_hot"], [75, 0, 1, "", "ones_like"], [75, 0, 1, "", "static_frombuffer"], [75, 0, 1, "", "static_triu_indices"], [75, 0, 1, "", "tril"], [75, 0, 1, "", "triu"], [75, 0, 1, "", "triu_indices"], [75, 0, 1, "", "zeros_like"]], "ivy.data_classes.container.data_type": [[76, 1, 1, "", "_ContainerWithDataTypes"]], "ivy.data_classes.container.data_type._ContainerWithDataTypes": [[76, 4, 1, "", "_abc_impl"], [76, 0, 1, "", "_static_astype"], [76, 0, 1, "", "_static_broadcast_arrays"], [76, 0, 1, "", "_static_broadcast_to"], [76, 0, 1, "", "_static_can_cast"], [76, 0, 1, "", "_static_default_complex_dtype"], [76, 0, 1, "", "_static_default_float_dtype"], [76, 0, 1, "", "_static_dtype"], [76, 0, 1, "", "_static_finfo"], [76, 0, 1, "", "_static_function_supported_dtypes"], [76, 0, 1, "", "_static_function_unsupported_dtypes"], [76, 0, 1, "", "_static_iinfo"], [76, 0, 1, "", "_static_is_bool_dtype"], [76, 0, 1, "", "_static_is_complex_dtype"], [76, 0, 1, "", "_static_is_float_dtype"], [76, 0, 1, "", "_static_is_int_dtype"], [76, 0, 1, "", "_static_is_uint_dtype"], [76, 0, 1, "", "_static_result_type"], [76, 0, 1, "", "astype"], [76, 0, 1, "", "broadcast_arrays"], [76, 0, 1, "", "broadcast_to"], [76, 0, 1, "", "can_cast"], [76, 0, 1, "", "dtype"], [76, 0, 1, "", "finfo"], [76, 0, 1, "", "iinfo"], [76, 0, 1, "", "is_bool_dtype"], [76, 0, 1, "", "is_complex_dtype"], [76, 0, 1, "", "is_float_dtype"], [76, 0, 1, "", "is_int_dtype"], [76, 0, 1, "", "is_uint_dtype"], [76, 0, 1, "", "result_type"]], "ivy.data_classes.container.device": [[77, 1, 1, "", "_ContainerWithDevice"]], "ivy.data_classes.container.device._ContainerWithDevice": [[77, 4, 1, "", "_abc_impl"], [77, 0, 1, "", "_static_dev"], [77, 0, 1, "", "_static_to_device"], [77, 0, 1, "", "dev"], [77, 0, 1, "", "to_device"]], "ivy.data_classes.container.elementwise": [[78, 1, 1, "", "_ContainerWithElementwise"]], "ivy.data_classes.container.elementwise._ContainerWithElementwise": [[78, 4, 1, "", "_abc_impl"], [78, 0, 1, "", "_static_abs"], [78, 0, 1, "", "_static_acos"], [78, 0, 1, "", "_static_acosh"], [78, 0, 1, "", "_static_add"], [78, 0, 1, "", "_static_asin"], [78, 0, 1, "", "_static_asinh"], [78, 0, 1, "", "_static_atan"], [78, 0, 1, "", "_static_atan2"], [78, 0, 1, "", "_static_atanh"], [78, 0, 1, "", "_static_bitwise_and"], [78, 0, 1, "", "_static_bitwise_invert"], [78, 0, 1, "", "_static_bitwise_left_shift"], [78, 0, 1, "", "_static_bitwise_or"], [78, 0, 1, "", "_static_bitwise_right_shift"], [78, 0, 1, "", "_static_bitwise_xor"], [78, 0, 1, "", "_static_ceil"], [78, 0, 1, "", "_static_cos"], [78, 0, 1, "", "_static_cosh"], [78, 0, 1, "", "_static_deg2rad"], [78, 0, 1, "", "_static_divide"], [78, 0, 1, "", "_static_equal"], [78, 0, 1, "", "_static_erf"], [78, 0, 1, "", "_static_exp"], [78, 0, 1, "", "_static_expm1"], [78, 0, 1, "", "_static_floor"], [78, 0, 1, "", "_static_floor_divide"], [78, 0, 1, "", "_static_greater"], [78, 0, 1, "", "_static_greater_equal"], [78, 0, 1, "", "_static_isfinite"], [78, 0, 1, "", "_static_isinf"], [78, 0, 1, "", "_static_isnan"], [78, 0, 1, "", "_static_isreal"], [78, 0, 1, "", "_static_lcm"], [78, 0, 1, "", "_static_less"], [78, 0, 1, "", "_static_less_equal"], [78, 0, 1, "", "_static_log"], [78, 0, 1, "", "_static_log10"], [78, 0, 1, "", "_static_log1p"], [78, 0, 1, "", "_static_log2"], [78, 0, 1, "", "_static_logaddexp"], [78, 0, 1, "", "_static_logical_and"], [78, 0, 1, "", "_static_logical_not"], [78, 0, 1, "", "_static_logical_or"], [78, 0, 1, "", "_static_logical_xor"], [78, 0, 1, "", "_static_maximum"], [78, 0, 1, "", "_static_minimum"], [78, 0, 1, "", "_static_multiply"], [78, 0, 1, "", "_static_negative"], [78, 0, 1, "", "_static_not_equal"], [78, 0, 1, "", "_static_positive"], [78, 0, 1, "", "_static_pow"], [78, 0, 1, "", "_static_rad2deg"], [78, 0, 1, "", "_static_reciprocal"], [78, 0, 1, "", "_static_remainder"], [78, 0, 1, "", "_static_round"], [78, 0, 1, "", "_static_sign"], [78, 0, 1, "", "_static_sin"], [78, 0, 1, "", "_static_sinh"], [78, 0, 1, "", "_static_sqrt"], [78, 0, 1, "", "_static_square"], [78, 0, 1, "", "_static_subtract"], [78, 0, 1, "", "_static_tan"], [78, 0, 1, "", "_static_tanh"], [78, 0, 1, "", "_static_trapz"], [78, 0, 1, "", "_static_trunc"], [78, 0, 1, "", "_static_trunc_divide"], [78, 0, 1, "", "abs"], [78, 0, 1, "", "acos"], [78, 0, 1, "", "acosh"], [78, 0, 1, "", "add"], [78, 0, 1, "", "angle"], [78, 0, 1, "", "asin"], [78, 0, 1, "", "asinh"], [78, 0, 1, "", "atan"], [78, 0, 1, "", "atan2"], [78, 0, 1, "", "atanh"], [78, 0, 1, "", "bitwise_and"], [78, 0, 1, "", "bitwise_invert"], [78, 0, 1, "", "bitwise_left_shift"], [78, 0, 1, "", "bitwise_or"], [78, 0, 1, "", "bitwise_right_shift"], [78, 0, 1, "", "bitwise_xor"], [78, 0, 1, "", "ceil"], [78, 0, 1, "", "cos"], [78, 0, 1, "", "cosh"], [78, 0, 1, "", "deg2rad"], [78, 0, 1, "", "divide"], [78, 0, 1, "", "equal"], [78, 0, 1, "", "erf"], [78, 0, 1, "", "exp"], [78, 0, 1, "", "exp2"], [78, 0, 1, "", "expm1"], [78, 0, 1, "", "floor"], [78, 0, 1, "", "floor_divide"], [78, 0, 1, "", "fmin"], [78, 0, 1, "", "gcd"], [78, 0, 1, "", "greater"], [78, 0, 1, "", "greater_equal"], [78, 0, 1, "", "imag"], [78, 0, 1, "", "isfinite"], [78, 0, 1, "", "isinf"], [78, 0, 1, "", "isnan"], [78, 0, 1, "", "isreal"], [78, 0, 1, "", "lcm"], [78, 0, 1, "", "less"], [78, 0, 1, "", "less_equal"], [78, 0, 1, "", "log"], [78, 0, 1, "", "log10"], [78, 0, 1, "", "log1p"], [78, 0, 1, "", "log2"], [78, 0, 1, "", "logaddexp"], [78, 0, 1, "", "logaddexp2"], [78, 0, 1, "", "logical_and"], [78, 0, 1, "", "logical_not"], [78, 0, 1, "", "logical_or"], [78, 0, 1, "", "logical_xor"], [78, 0, 1, "", "maximum"], [78, 0, 1, "", "minimum"], [78, 0, 1, "", "multiply"], [78, 0, 1, "", "nan_to_num"], [78, 0, 1, "", "negative"], [78, 0, 1, "", "not_equal"], [78, 0, 1, "", "positive"], [78, 0, 1, "", "pow"], [78, 0, 1, "", "rad2deg"], [78, 0, 1, "", "real"], [78, 0, 1, "", "reciprocal"], [78, 0, 1, "", "remainder"], [78, 0, 1, "", "round"], [78, 0, 1, "", "sign"], [78, 0, 1, "", "sin"], [78, 0, 1, "", "sinh"], [78, 0, 1, "", "sqrt"], [78, 0, 1, "", "square"], [78, 0, 1, "", "static_angle"], [78, 0, 1, "", "static_exp2"], [78, 0, 1, "", "static_fmin"], [78, 0, 1, "", "static_gcd"], [78, 0, 1, "", "static_imag"], [78, 0, 1, "", "static_logaddexp2"], [78, 0, 1, "", "static_nan_to_num"], [78, 0, 1, "", "static_real"], [78, 0, 1, "", "subtract"], [78, 0, 1, "", "tan"], [78, 0, 1, "", "tanh"], [78, 0, 1, "", "trapz"], [78, 0, 1, "", "trunc"], [78, 0, 1, "", "trunc_divide"]], "ivy.data_classes.container.experimental": [[79, 3, 0, "-", "activations"], [79, 3, 0, "-", "conversions"], [79, 3, 0, "-", "creation"], [79, 3, 0, "-", "data_type"], [79, 3, 0, "-", "device"], [79, 3, 0, "-", "elementwise"], [79, 3, 0, "-", "general"], [79, 3, 0, "-", "gradients"], [79, 3, 0, "-", "image"], [79, 3, 0, "-", "layers"], [79, 3, 0, "-", "linear_algebra"], [79, 3, 0, "-", "losses"], [79, 3, 0, "-", "manipulation"], [79, 3, 0, "-", "norms"], [79, 3, 0, "-", "random"], [79, 3, 0, "-", "searching"], [79, 3, 0, "-", "set"], [79, 3, 0, "-", "sorting"], [79, 3, 0, "-", "statistical"], [79, 3, 0, "-", "utility"]], "ivy.data_classes.container.experimental.activations": [[79, 1, 1, "", "_ContainerWithActivationExperimental"]], "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental": [[79, 4, 1, "", "_abc_impl"], [79, 0, 1, "", "_static_celu"], [79, 0, 1, "", "_static_elu"], [79, 0, 1, "", "_static_hardshrink"], [79, 0, 1, "", "_static_hardsilu"], [79, 0, 1, "", "_static_hardtanh"], [79, 0, 1, "", "_static_scaled_tanh"], [79, 0, 1, "", "_static_silu"], [79, 0, 1, "", "_static_softshrink"], [79, 0, 1, "", "_static_tanhshrink"], [79, 0, 1, "", "_static_threshold"], [79, 0, 1, "", "celu"], [79, 0, 1, "", "elu"], [79, 0, 1, "", "hardshrink"], [79, 0, 1, "", "hardsilu"], [79, 0, 1, "", "hardtanh"], [79, 0, 1, "", "logit"], [79, 0, 1, "", "logsigmoid"], [79, 0, 1, "", "prelu"], [79, 0, 1, "", "relu6"], [79, 0, 1, "", "scaled_tanh"], [79, 0, 1, "", "selu"], [79, 0, 1, "", "silu"], [79, 0, 1, "", "softshrink"], [79, 0, 1, "", "static_logit"], [79, 0, 1, "", "static_logsigmoid"], [79, 0, 1, "", "static_prelu"], [79, 0, 1, "", "static_relu6"], [79, 0, 1, "", "static_selu"], [79, 0, 1, "", "static_thresholded_relu"], [79, 0, 1, "", "tanhshrink"], [79, 0, 1, "", "threshold"], [79, 0, 1, "", "thresholded_relu"]], "ivy.data_classes.container.experimental.conversions": [[79, 1, 1, "", "_ContainerWithConversionExperimental"]], "ivy.data_classes.container.experimental.conversions._ContainerWithConversionExperimental": [[79, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.creation": [[79, 1, 1, "", "_ContainerWithCreationExperimental"]], "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental": [[79, 4, 1, "", "_abc_impl"], [79, 0, 1, "", "_static_trilu"], [79, 0, 1, "", "blackman_window"], [79, 0, 1, "", "eye_like"], [79, 0, 1, "", "hamming_window"], [79, 0, 1, "", "hann_window"], [79, 0, 1, "", "kaiser_bessel_derived_window"], [79, 0, 1, "", "kaiser_window"], [79, 0, 1, "", "mel_weight_matrix"], [79, 0, 1, "", "polyval"], [79, 0, 1, "", "static_blackman_window"], [79, 0, 1, "", "static_eye_like"], [79, 0, 1, "", "static_hamming_window"], [79, 0, 1, "", "static_hann_window"], [79, 0, 1, "", "static_kaiser_bessel_derived_window"], [79, 0, 1, "", "static_kaiser_window"], [79, 0, 1, "", "static_mel_weight_matrix"], [79, 0, 1, "", "static_polyval"], [79, 0, 1, "", "static_tril_indices"], [79, 0, 1, "", "static_unsorted_segment_mean"], [79, 0, 1, "", "static_unsorted_segment_min"], [79, 0, 1, "", "static_unsorted_segment_sum"], [79, 0, 1, "", "static_vorbis_window"], [79, 0, 1, "", "tril_indices"], [79, 0, 1, "", "trilu"], [79, 0, 1, "", "unsorted_segment_mean"], [79, 0, 1, "", "unsorted_segment_min"], [79, 0, 1, "", "unsorted_segment_sum"], [79, 0, 1, "", "vorbis_window"]], "ivy.data_classes.container.experimental.data_type": [[79, 1, 1, "", "_ContainerWithData_typeExperimental"]], "ivy.data_classes.container.experimental.data_type._ContainerWithData_typeExperimental": [[79, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.device": [[79, 1, 1, "", "_ContainerWithDeviceExperimental"]], "ivy.data_classes.container.experimental.device._ContainerWithDeviceExperimental": [[79, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.elementwise": [[79, 1, 1, "", "_ContainerWithElementWiseExperimental"]], "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental": [[79, 4, 1, "", "_abc_impl"], [79, 0, 1, "", "allclose"], [79, 0, 1, "", "amax"], [79, 0, 1, "", "amin"], [79, 0, 1, "", "binarizer"], [79, 0, 1, "", "conj"], [79, 0, 1, "", "copysign"], [79, 0, 1, "", "count_nonzero"], [79, 0, 1, "", "diff"], [79, 0, 1, "", "digamma"], [79, 0, 1, "", "erfc"], [79, 0, 1, "", "erfinv"], [79, 0, 1, "", "fix"], [79, 0, 1, "", "float_power"], [79, 0, 1, "", "fmax"], [79, 0, 1, "", "fmod"], [79, 0, 1, "", "frexp"], [79, 0, 1, "", "gradient"], [79, 0, 1, "", "hypot"], [79, 0, 1, "", "isclose"], [79, 0, 1, "", "ldexp"], [79, 0, 1, "", "lerp"], [79, 0, 1, "", "modf"], [79, 0, 1, "", "nansum"], [79, 0, 1, "", "nextafter"], [79, 0, 1, "", "signbit"], [79, 0, 1, "", "sinc"], [79, 0, 1, "", "sparsify_tensor"], [79, 0, 1, "", "static_allclose"], [79, 0, 1, "", "static_amax"], [79, 0, 1, "", "static_amin"], [79, 0, 1, "", "static_binarizer"], [79, 0, 1, "", "static_conj"], [79, 0, 1, "", "static_copysign"], [79, 0, 1, "", "static_count_nonzero"], [79, 0, 1, "", "static_diff"], [79, 0, 1, "", "static_digamma"], [79, 0, 1, "", "static_erfc"], [79, 0, 1, "", "static_erfinv"], [79, 0, 1, "", "static_fix"], [79, 0, 1, "", "static_float_power"], [79, 0, 1, "", "static_fmax"], [79, 0, 1, "", "static_fmod"], [79, 0, 1, "", "static_frexp"], [79, 0, 1, "", "static_gradient"], [79, 0, 1, "", "static_hypot"], [79, 0, 1, "", "static_isclose"], [79, 0, 1, "", "static_ldexp"], [79, 0, 1, "", "static_lerp"], [79, 0, 1, "", "static_modf"], [79, 0, 1, "", "static_nansum"], [79, 0, 1, "", "static_nextafter"], [79, 0, 1, "", "static_signbit"], [79, 0, 1, "", "static_sinc"], [79, 0, 1, "", "static_sparsify_tensor"], [79, 0, 1, "", "static_xlogy"], [79, 0, 1, "", "static_zeta"], [79, 0, 1, "", "xlogy"], [79, 0, 1, "", "zeta"]], "ivy.data_classes.container.experimental.general": [[79, 1, 1, "", "_ContainerWithGeneralExperimental"]], "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental": [[79, 4, 1, "", "_abc_impl"], [79, 0, 1, "", "_static_reduce"], [79, 0, 1, "", "reduce"]], "ivy.data_classes.container.experimental.gradients": [[79, 1, 1, "", "_ContainerWithGradientsExperimental"]], "ivy.data_classes.container.experimental.gradients._ContainerWithGradientsExperimental": [[79, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.image": [[79, 1, 1, "", "_ContainerWithImageExperimental"]], "ivy.data_classes.container.experimental.image._ContainerWithImageExperimental": [[79, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.layers": [[79, 1, 1, "", "_ContainerWithLayersExperimental"]], "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental": [[79, 4, 1, "", "_abc_impl"], [79, 0, 1, "", "_static_fft"], [79, 0, 1, "", "_static_sliding_window"], [79, 0, 1, "", "adaptive_avg_pool1d"], [79, 0, 1, "", "adaptive_avg_pool2d"], [79, 0, 1, "", "adaptive_max_pool2d"], [79, 0, 1, "", "adaptive_max_pool3d"], [79, 0, 1, "", "avg_pool1d"], [79, 0, 1, "", "avg_pool2d"], [79, 0, 1, "", "avg_pool3d"], [79, 0, 1, "", "dct"], [79, 0, 1, "", "dft"], [79, 0, 1, "", "embedding"], [79, 0, 1, "", "fft"], [79, 0, 1, "", "idct"], [79, 0, 1, "", "ifft"], [79, 0, 1, "", "ifftn"], [79, 0, 1, "", "interpolate"], [79, 0, 1, "", "max_pool1d"], [79, 0, 1, "", "max_pool2d"], [79, 0, 1, "", "max_pool3d"], [79, 0, 1, "", "max_unpool1d"], [79, 0, 1, "", "rfft"], [79, 0, 1, "", "rfftn"], [79, 0, 1, "", "sliding_window"], [79, 0, 1, "", "static_adaptive_avg_pool1d"], [79, 0, 1, "", "static_adaptive_avg_pool2d"], [79, 0, 1, "", "static_adaptive_max_pool2d"], [79, 0, 1, "", "static_adaptive_max_pool3d"], [79, 0, 1, "", "static_avg_pool1d"], [79, 0, 1, "", "static_avg_pool2d"], [79, 0, 1, "", "static_avg_pool3d"], [79, 0, 1, "", "static_dct"], [79, 0, 1, "", "static_dft"], [79, 0, 1, "", "static_embedding"], [79, 0, 1, "", "static_idct"], [79, 0, 1, "", "static_ifft"], [79, 0, 1, "", "static_ifftn"], [79, 0, 1, "", "static_interpolate"], [79, 0, 1, "", "static_max_pool1d"], [79, 0, 1, "", "static_max_pool2d"], [79, 0, 1, "", "static_max_pool3d"], [79, 0, 1, "", "static_max_unpool1d"], [79, 0, 1, "", "static_rfft"], [79, 0, 1, "", "static_rfftn"], [79, 0, 1, "", "static_rnn"], [79, 0, 1, "", "static_stft"], [79, 0, 1, "", "stft"]], "ivy.data_classes.container.experimental.linear_algebra": [[79, 1, 1, "", "_ContainerWithLinearAlgebraExperimental"]], "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental": [[79, 4, 1, "", "_abc_impl"], [79, 0, 1, "", "adjoint"], [79, 0, 1, "", "batched_outer"], [79, 0, 1, "", "cond"], [79, 0, 1, "", "diagflat"], [79, 0, 1, "", "dot"], [79, 0, 1, "", "eig"], [79, 0, 1, "", "eigh_tridiagonal"], [79, 0, 1, "", "eigvals"], [79, 0, 1, "", "higher_order_moment"], [79, 0, 1, "", "initialize_tucker"], [79, 0, 1, "", "kron"], [79, 0, 1, "", "make_svd_non_negative"], [79, 0, 1, "", "matrix_exp"], [79, 0, 1, "", "mode_dot"], [79, 0, 1, "", "multi_dot"], [79, 0, 1, "", "multi_mode_dot"], [79, 0, 1, "", "partial_tucker"], [79, 0, 1, "", "static_adjoint"], [79, 0, 1, "", "static_batched_outer"], [79, 0, 1, "", "static_cond"], [79, 0, 1, "", "static_diagflat"], [79, 0, 1, "", "static_dot"], [79, 0, 1, "", "static_eig"], [79, 0, 1, "", "static_eigh_tridiagonal"], [79, 0, 1, "", "static_eigvals"], [79, 0, 1, "", "static_higher_order_moment"], [79, 0, 1, "", "static_initialize_tucker"], [79, 0, 1, "", "static_kron"], [79, 0, 1, "", "static_make_svd_non_negative"], [79, 0, 1, "", "static_matrix_exp"], [79, 0, 1, "", "static_mode_dot"], [79, 0, 1, "", "static_multi_dot"], [79, 0, 1, "", "static_multi_mode_dot"], [79, 0, 1, "", "static_partial_tucker"], [79, 0, 1, "", "static_svd_flip"], [79, 0, 1, "", "static_tensor_train"], [79, 0, 1, "", "static_truncated_svd"], [79, 0, 1, "", "static_tt_matrix_to_tensor"], [79, 0, 1, "", "static_tucker"], [79, 0, 1, "", "svd_flip"], [79, 0, 1, "", "tensor_train"], [79, 0, 1, "", "truncated_svd"], [79, 0, 1, "", "tt_matrix_to_tensor"], [79, 0, 1, "", "tucker"]], "ivy.data_classes.container.experimental.losses": [[79, 1, 1, "", "_ContainerWithLossesExperimental"]], "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental": [[79, 4, 1, "", "_abc_impl"], [79, 0, 1, "", "_static_hinge_embedding_loss"], [79, 0, 1, "", "_static_huber_loss"], [79, 0, 1, "", "_static_kl_div"], [79, 0, 1, "", "_static_l1_loss"], [79, 0, 1, "", "_static_log_poisson_loss"], [79, 0, 1, "", "_static_poisson_nll_loss"], [79, 0, 1, "", "_static_smooth_l1_loss"], [79, 0, 1, "", "_static_soft_margin_loss"], [79, 0, 1, "", "hinge_embedding_loss"], [79, 0, 1, "", "huber_loss"], [79, 0, 1, "", "kl_div"], [79, 0, 1, "", "l1_loss"], [79, 0, 1, "", "log_poisson_loss"], [79, 0, 1, "", "poisson_nll_loss"], [79, 0, 1, "", "smooth_l1_loss"], [79, 0, 1, "", "soft_margin_loss"]], "ivy.data_classes.container.experimental.manipulation": [[79, 1, 1, "", "_ContainerWithManipulationExperimental"], [79, 2, 1, "", "concat_from_sequence"]], "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental": [[79, 4, 1, "", "_abc_impl"], [79, 0, 1, "", "_static_fill_diagonal"], [79, 0, 1, "", "_static_put_along_axis"], [79, 0, 1, "", "_static_take"], [79, 0, 1, "", "_static_trim_zeros"], [79, 0, 1, "", "_static_unflatten"], [79, 0, 1, "", "_static_unique_consecutive"], [79, 0, 1, "", "as_strided"], [79, 0, 1, "", "associative_scan"], [79, 0, 1, "", "atleast_1d"], [79, 0, 1, "", "atleast_2d"], [79, 0, 1, "", "atleast_3d"], [79, 0, 1, "", "broadcast_shapes"], [79, 0, 1, "", "column_stack"], [79, 0, 1, "", "concat_from_sequence"], [79, 0, 1, "", "dsplit"], [79, 0, 1, "", "dstack"], [79, 0, 1, "", "expand"], [79, 0, 1, "", "fill_diagonal"], [79, 0, 1, "", "flatten"], [79, 0, 1, "", "fliplr"], [79, 0, 1, "", "flipud"], [79, 0, 1, "", "fold"], [79, 0, 1, "", "heaviside"], [79, 0, 1, "", "hsplit"], [79, 0, 1, "", "hstack"], [79, 0, 1, "", "i0"], [79, 0, 1, "", "matricize"], [79, 0, 1, "", "moveaxis"], [79, 0, 1, "", "pad"], [79, 0, 1, "", "partial_fold"], [79, 0, 1, "", "partial_tensor_to_vec"], [79, 0, 1, "", "partial_unfold"], [79, 0, 1, "", "partial_vec_to_tensor"], [79, 0, 1, "", "put_along_axis"], [79, 0, 1, "", "rot90"], [79, 0, 1, "", "soft_thresholding"], [79, 0, 1, "", "static_as_strided"], [79, 0, 1, "", "static_atleast_1d"], [79, 0, 1, "", "static_atleast_2d"], [79, 0, 1, "", "static_atleast_3d"], [79, 0, 1, "", "static_broadcast_shapes"], [79, 0, 1, "", "static_column_stack"], [79, 0, 1, "", "static_concat_from_sequence"], [79, 0, 1, "", "static_dsplit"], [79, 0, 1, "", "static_dstack"], [79, 0, 1, "", "static_expand"], [79, 0, 1, "", "static_flatten"], [79, 0, 1, "", "static_fliplr"], [79, 0, 1, "", "static_flipud"], [79, 0, 1, "", "static_fold"], [79, 0, 1, "", "static_heaviside"], [79, 0, 1, "", "static_hsplit"], [79, 0, 1, "", "static_hstack"], [79, 0, 1, "", "static_i0"], [79, 0, 1, "", "static_matricize"], [79, 0, 1, "", "static_moveaxis"], [79, 0, 1, "", "static_pad"], [79, 0, 1, "", "static_partial_fold"], [79, 0, 1, "", "static_partial_tensor_to_vec"], [79, 0, 1, "", "static_partial_unfold"], [79, 0, 1, "", "static_partial_vec_to_tensor"], [79, 0, 1, "", "static_rot90"], [79, 0, 1, "", "static_soft_thresholding"], [79, 0, 1, "", "static_take_along_axis"], [79, 0, 1, "", "static_top_k"], [79, 0, 1, "", "static_unfold"], [79, 0, 1, "", "static_vsplit"], [79, 0, 1, "", "static_vstack"], [79, 0, 1, "", "take"], [79, 0, 1, "", "take_along_axis"], [79, 0, 1, "", "top_k"], [79, 0, 1, "", "trim_zeros"], [79, 0, 1, "", "unflatten"], [79, 0, 1, "", "unfold"], [79, 0, 1, "", "unique_consecutive"], [79, 0, 1, "", "vsplit"], [79, 0, 1, "", "vstack"]], "ivy.data_classes.container.experimental.norms": [[79, 1, 1, "", "_ContainerWithNormsExperimental"]], "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental": [[79, 4, 1, "", "_abc_impl"], [79, 0, 1, "", "batch_norm"], [79, 0, 1, "", "group_norm"], [79, 0, 1, "", "instance_norm"], [79, 0, 1, "", "l1_normalize"], [79, 0, 1, "", "l2_normalize"], [79, 0, 1, "", "lp_normalize"], [79, 0, 1, "", "static_batch_norm"], [79, 0, 1, "", "static_group_norm"], [79, 0, 1, "", "static_instance_norm"], [79, 0, 1, "", "static_l1_normalize"], [79, 0, 1, "", "static_l2_normalize"], [79, 0, 1, "", "static_lp_normalize"]], "ivy.data_classes.container.experimental.random": [[79, 1, 1, "", "_ContainerWithRandomExperimental"]], "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental": [[79, 4, 1, "", "_abc_impl"], [79, 0, 1, "", "bernoulli"], [79, 0, 1, "", "beta"], [79, 0, 1, "", "dirichlet"], [79, 0, 1, "", "gamma"], [79, 0, 1, "", "poisson"], [79, 0, 1, "", "static_bernoulli"], [79, 0, 1, "", "static_beta"], [79, 0, 1, "", "static_dirichlet"], [79, 0, 1, "", "static_gamma"], [79, 0, 1, "", "static_poisson"]], "ivy.data_classes.container.experimental.searching": [[79, 1, 1, "", "_ContainerWithSearchingExperimental"]], "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental": [[79, 4, 1, "", "_abc_impl"], [79, 0, 1, "", "static_unravel_index"], [79, 0, 1, "", "unravel_index"]], "ivy.data_classes.container.experimental.set": [[79, 1, 1, "", "_ContainerWithSetExperimental"]], "ivy.data_classes.container.experimental.set._ContainerWithSetExperimental": [[79, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.sorting": [[79, 1, 1, "", "_ContainerWithSortingExperimental"]], "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental": [[79, 4, 1, "", "_abc_impl"], [79, 0, 1, "", "invert_permutation"], [79, 0, 1, "", "lexsort"], [79, 0, 1, "", "static_invert_permutation"], [79, 0, 1, "", "static_lexsort"]], "ivy.data_classes.container.experimental.statistical": [[79, 1, 1, "", "_ContainerWithStatisticalExperimental"]], "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental": [[79, 4, 1, "", "_abc_impl"], [79, 0, 1, "", "_static_cummax"], [79, 0, 1, "", "_static_cummin"], [79, 0, 1, "", "_static_nanmin"], [79, 0, 1, "", "bincount"], [79, 0, 1, "", "corrcoef"], [79, 0, 1, "", "cov"], [79, 0, 1, "", "cummax"], [79, 0, 1, "", "cummin"], [79, 0, 1, "", "histogram"], [79, 0, 1, "", "igamma"], [79, 0, 1, "", "lgamma"], [79, 0, 1, "", "median"], [79, 0, 1, "", "nanmean"], [79, 0, 1, "", "nanmedian"], [79, 0, 1, "", "nanmin"], [79, 0, 1, "", "nanprod"], [79, 0, 1, "", "quantile"], [79, 0, 1, "", "static_bincount"], [79, 0, 1, "", "static_corrcoef"], [79, 0, 1, "", "static_cov"], [79, 0, 1, "", "static_histogram"], [79, 0, 1, "", "static_igamma"], [79, 0, 1, "", "static_lgamma"], [79, 0, 1, "", "static_median"], [79, 0, 1, "", "static_nanmean"], [79, 0, 1, "", "static_nanmedian"], [79, 0, 1, "", "static_nanprod"], [79, 0, 1, "", "static_quantile"]], "ivy.data_classes.container.experimental.utility": [[79, 1, 1, "", "_ContainerWithUtilityExperimental"]], "ivy.data_classes.container.experimental.utility._ContainerWithUtilityExperimental": [[79, 4, 1, "", "_abc_impl"], [79, 0, 1, "", "optional_get_element"], [79, 0, 1, "", "static_optional_get_element"]], "ivy.data_classes.container.general": [[80, 1, 1, "", "_ContainerWithGeneral"]], "ivy.data_classes.container.general._ContainerWithGeneral": [[80, 4, 1, "", "_abc_impl"], [80, 0, 1, "", "_static_all_equal"], [80, 0, 1, "", "_static_array_equal"], [80, 0, 1, "", "_static_assert_supports_inplace"], [80, 0, 1, "", "_static_clip_matrix_norm"], [80, 0, 1, "", "_static_clip_vector_norm"], [80, 0, 1, "", "_static_einops_rearrange"], [80, 0, 1, "", "_static_einops_reduce"], [80, 0, 1, "", "_static_einops_repeat"], [80, 0, 1, "", "_static_exists"], [80, 0, 1, "", "_static_fourier_encode"], [80, 0, 1, "", "_static_gather"], [80, 0, 1, "", "_static_gather_nd"], [80, 0, 1, "", "_static_get_num_dims"], [80, 0, 1, "", "_static_has_nans"], [80, 0, 1, "", "_static_inplace_decrement"], [80, 0, 1, "", "_static_inplace_increment"], [80, 0, 1, "", "_static_inplace_update"], [80, 0, 1, "", "_static_is_array"], [80, 0, 1, "", "_static_is_ivy_array"], [80, 0, 1, "", "_static_is_native_array"], [80, 0, 1, "", "_static_scatter_flat"], [80, 0, 1, "", "_static_scatter_nd"], [80, 0, 1, "", "_static_size"], [80, 0, 1, "", "_static_stable_divide"], [80, 0, 1, "", "_static_stable_pow"], [80, 0, 1, "", "_static_supports_inplace_updates"], [80, 0, 1, "", "_static_to_list"], [80, 0, 1, "", "_static_to_numpy"], [80, 0, 1, "", "_static_to_scalar"], [80, 0, 1, "", "_static_value_is_nan"], [80, 0, 1, "", "all_equal"], [80, 0, 1, "", "array_equal"], [80, 0, 1, "", "assert_supports_inplace"], [80, 0, 1, "", "clip_matrix_norm"], [80, 0, 1, "", "clip_vector_norm"], [80, 0, 1, "", "einops_rearrange"], [80, 0, 1, "", "einops_reduce"], [80, 0, 1, "", "einops_repeat"], [80, 0, 1, "", "exists"], [80, 0, 1, "", "fourier_encode"], [80, 0, 1, "", "gather"], [80, 0, 1, "", "gather_nd"], [80, 0, 1, "", "get_num_dims"], [80, 0, 1, "", "has_nans"], [80, 0, 1, "", "inplace_decrement"], [80, 0, 1, "", "inplace_increment"], [80, 0, 1, "", "inplace_update"], [80, 0, 1, "", "is_array"], [80, 0, 1, "", "is_ivy_array"], [80, 0, 1, "", "is_native_array"], [80, 0, 1, "", "isin"], [80, 0, 1, "", "itemsize"], [80, 0, 1, "", "scatter_flat"], [80, 0, 1, "", "scatter_nd"], [80, 0, 1, "", "size"], [80, 0, 1, "", "stable_divide"], [80, 0, 1, "", "stable_pow"], [80, 0, 1, "", "static_isin"], [80, 0, 1, "", "static_itemsize"], [80, 0, 1, "", "static_strides"], [80, 0, 1, "", "strides"], [80, 0, 1, "", "supports_inplace_updates"], [80, 0, 1, "", "to_list"], [80, 0, 1, "", "to_numpy"], [80, 0, 1, "", "to_scalar"], [80, 0, 1, "", "value_is_nan"]], "ivy.data_classes.container.gradients": [[81, 1, 1, "", "_ContainerWithGradients"]], "ivy.data_classes.container.gradients._ContainerWithGradients": [[81, 4, 1, "", "_abc_impl"], [81, 0, 1, "", "_static_stop_gradient"], [81, 0, 1, "", "adam_step"], [81, 0, 1, "", "adam_update"], [81, 0, 1, "", "gradient_descent_update"], [81, 0, 1, "", "lamb_update"], [81, 0, 1, "", "lars_update"], [81, 0, 1, "", "optimizer_update"], [81, 0, 1, "", "stop_gradient"]], "ivy.data_classes.container.image": [[82, 1, 1, "", "_ContainerWithImage"]], "ivy.data_classes.container.image._ContainerWithImage": [[82, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.layers": [[83, 1, 1, "", "_ContainerWithLayers"]], "ivy.data_classes.container.layers._ContainerWithLayers": [[83, 4, 1, "", "_abc_impl"], [83, 0, 1, "", "_static_conv1d"], [83, 0, 1, "", "_static_conv1d_transpose"], [83, 0, 1, "", "_static_conv2d"], [83, 0, 1, "", "_static_conv2d_transpose"], [83, 0, 1, "", "_static_conv3d"], [83, 0, 1, "", "_static_conv3d_transpose"], [83, 0, 1, "", "_static_depthwise_conv2d"], [83, 0, 1, "", "_static_dropout"], [83, 0, 1, "", "_static_dropout1d"], [83, 0, 1, "", "_static_dropout2d"], [83, 0, 1, "", "_static_dropout3d"], [83, 0, 1, "", "_static_linear"], [83, 0, 1, "", "_static_lstm_update"], [83, 0, 1, "", "_static_multi_head_attention"], [83, 0, 1, "", "_static_reduce_window"], [83, 0, 1, "", "_static_scaled_dot_product_attention"], [83, 0, 1, "", "conv1d"], [83, 0, 1, "", "conv1d_transpose"], [83, 0, 1, "", "conv2d"], [83, 0, 1, "", "conv2d_transpose"], [83, 0, 1, "", "conv3d"], [83, 0, 1, "", "conv3d_transpose"], [83, 0, 1, "", "depthwise_conv2d"], [83, 0, 1, "", "dropout"], [83, 0, 1, "", "dropout1d"], [83, 0, 1, "", "dropout2d"], [83, 0, 1, "", "dropout3d"], [83, 0, 1, "", "linear"], [83, 0, 1, "", "lstm_update"], [83, 0, 1, "", "multi_head_attention"], [83, 0, 1, "", "reduce_window"], [83, 0, 1, "", "scaled_dot_product_attention"]], "ivy.data_classes.container.linear_algebra": [[84, 1, 1, "", "_ContainerWithLinearAlgebra"]], "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra": [[84, 4, 1, "", "_abc_impl"], [84, 0, 1, "", "_static_cholesky"], [84, 0, 1, "", "_static_cross"], [84, 0, 1, "", "_static_det"], [84, 0, 1, "", "_static_diag"], [84, 0, 1, "", "_static_diagonal"], [84, 0, 1, "", "_static_eigh"], [84, 0, 1, "", "_static_eigvalsh"], [84, 0, 1, "", "_static_inner"], [84, 0, 1, "", "_static_inv"], [84, 0, 1, "", "_static_matmul"], [84, 0, 1, "", "_static_matrix_norm"], [84, 0, 1, "", "_static_matrix_power"], [84, 0, 1, "", "_static_matrix_rank"], [84, 0, 1, "", "_static_matrix_transpose"], [84, 0, 1, "", "_static_outer"], [84, 0, 1, "", "_static_pinv"], [84, 0, 1, "", "_static_qr"], [84, 0, 1, "", "_static_slogdet"], [84, 0, 1, "", "_static_solve"], [84, 0, 1, "", "_static_svd"], [84, 0, 1, "", "_static_svdvals"], [84, 0, 1, "", "_static_tensordot"], [84, 0, 1, "", "_static_tensorsolve"], [84, 0, 1, "", "_static_trace"], [84, 0, 1, "", "_static_vander"], [84, 0, 1, "", "_static_vecdot"], [84, 0, 1, "", "_static_vector_norm"], [84, 0, 1, "", "_static_vector_to_skew_symmetric_matrix"], [84, 0, 1, "", "cholesky"], [84, 0, 1, "", "cross"], [84, 0, 1, "", "det"], [84, 0, 1, "", "diag"], [84, 0, 1, "", "diagonal"], [84, 0, 1, "", "eigh"], [84, 0, 1, "", "eigvalsh"], [84, 0, 1, "", "general_inner_product"], [84, 0, 1, "", "inner"], [84, 0, 1, "", "inv"], [84, 0, 1, "", "matmul"], [84, 0, 1, "", "matrix_norm"], [84, 0, 1, "", "matrix_power"], [84, 0, 1, "", "matrix_rank"], [84, 0, 1, "", "matrix_transpose"], [84, 0, 1, "", "outer"], [84, 0, 1, "", "pinv"], [84, 0, 1, "", "qr"], [84, 0, 1, "", "slogdet"], [84, 0, 1, "", "solve"], [84, 0, 1, "", "static_general_inner_product"], [84, 0, 1, "", "svd"], [84, 0, 1, "", "svdvals"], [84, 0, 1, "", "tensordot"], [84, 0, 1, "", "tensorsolve"], [84, 0, 1, "", "trace"], [84, 0, 1, "", "vander"], [84, 0, 1, "", "vecdot"], [84, 0, 1, "", "vector_norm"], [84, 0, 1, "", "vector_to_skew_symmetric_matrix"]], "ivy.data_classes.container.losses": [[85, 1, 1, "", "_ContainerWithLosses"]], "ivy.data_classes.container.losses._ContainerWithLosses": [[85, 4, 1, "", "_abc_impl"], [85, 0, 1, "", "_static_binary_cross_entropy"], [85, 0, 1, "", "_static_cross_entropy"], [85, 0, 1, "", "_static_sparse_cross_entropy"], [85, 0, 1, "", "binary_cross_entropy"], [85, 0, 1, "", "cross_entropy"], [85, 0, 1, "", "sparse_cross_entropy"]], "ivy.data_classes.container.manipulation": [[86, 1, 1, "", "_ContainerWithManipulation"]], "ivy.data_classes.container.manipulation._ContainerWithManipulation": [[86, 4, 1, "", "_abc_impl"], [86, 0, 1, "", "_static_clip"], [86, 0, 1, "", "_static_concat"], [86, 0, 1, "", "_static_constant_pad"], [86, 0, 1, "", "_static_expand_dims"], [86, 0, 1, "", "_static_flip"], [86, 0, 1, "", "_static_permute_dims"], [86, 0, 1, "", "_static_repeat"], [86, 0, 1, "", "_static_reshape"], [86, 0, 1, "", "_static_roll"], [86, 0, 1, "", "_static_split"], [86, 0, 1, "", "_static_squeeze"], [86, 0, 1, "", "_static_stack"], [86, 0, 1, "", "_static_swapaxes"], [86, 0, 1, "", "_static_tile"], [86, 0, 1, "", "_static_unstack"], [86, 0, 1, "", "_static_zero_pad"], [86, 0, 1, "", "clip"], [86, 0, 1, "", "concat"], [86, 0, 1, "", "constant_pad"], [86, 0, 1, "", "expand_dims"], [86, 0, 1, "", "flip"], [86, 0, 1, "", "permute_dims"], [86, 0, 1, "", "repeat"], [86, 0, 1, "", "reshape"], [86, 0, 1, "", "roll"], [86, 0, 1, "", "split"], [86, 0, 1, "", "squeeze"], [86, 0, 1, "", "stack"], [86, 0, 1, "", "swapaxes"], [86, 0, 1, "", "tile"], [86, 0, 1, "", "unstack"], [86, 0, 1, "", "zero_pad"]], "ivy.data_classes.container.norms": [[87, 1, 1, "", "_ContainerWithNorms"]], "ivy.data_classes.container.norms._ContainerWithNorms": [[87, 4, 1, "", "_abc_impl"], [87, 0, 1, "", "layer_norm"]], "ivy.data_classes.container.random": [[88, 1, 1, "", "_ContainerWithRandom"]], "ivy.data_classes.container.random._ContainerWithRandom": [[88, 4, 1, "", "_abc_impl"], [88, 0, 1, "", "_static_multinomial"], [88, 0, 1, "", "_static_randint"], [88, 0, 1, "", "_static_random_normal"], [88, 0, 1, "", "_static_random_uniform"], [88, 0, 1, "", "_static_shuffle"], [88, 0, 1, "", "multinomial"], [88, 0, 1, "", "randint"], [88, 0, 1, "", "random_normal"], [88, 0, 1, "", "random_uniform"], [88, 0, 1, "", "shuffle"]], "ivy.data_classes.container.searching": [[89, 1, 1, "", "_ContainerWithSearching"]], "ivy.data_classes.container.searching._ContainerWithSearching": [[89, 4, 1, "", "_abc_impl"], [89, 0, 1, "", "_static_argmax"], [89, 0, 1, "", "_static_argmin"], [89, 0, 1, "", "_static_argwhere"], [89, 0, 1, "", "_static_nonzero"], [89, 0, 1, "", "_static_where"], [89, 0, 1, "", "argmax"], [89, 0, 1, "", "argmin"], [89, 0, 1, "", "argwhere"], [89, 0, 1, "", "nonzero"], [89, 0, 1, "", "where"]], "ivy.data_classes.container.set": [[90, 1, 1, "", "_ContainerWithSet"]], "ivy.data_classes.container.set._ContainerWithSet": [[90, 4, 1, "", "_abc_impl"], [90, 0, 1, "", "_static_unique_all"], [90, 0, 1, "", "_static_unique_counts"], [90, 0, 1, "", "_static_unique_inverse"], [90, 0, 1, "", "_static_unique_values"], [90, 0, 1, "", "unique_all"], [90, 0, 1, "", "unique_counts"], [90, 0, 1, "", "unique_inverse"], [90, 0, 1, "", "unique_values"]], "ivy.data_classes.container.sorting": [[91, 1, 1, "", "_ContainerWithSorting"]], "ivy.data_classes.container.sorting._ContainerWithSorting": [[91, 4, 1, "", "_abc_impl"], [91, 0, 1, "", "_static_argsort"], [91, 0, 1, "", "_static_searchsorted"], [91, 0, 1, "", "_static_sort"], [91, 0, 1, "", "argsort"], [91, 0, 1, "", "msort"], [91, 0, 1, "", "searchsorted"], [91, 0, 1, "", "sort"], [91, 0, 1, "", "static_msort"]], "ivy.data_classes.container.statistical": [[92, 1, 1, "", "_ContainerWithStatistical"]], "ivy.data_classes.container.statistical._ContainerWithStatistical": [[92, 4, 1, "", "_abc_impl"], [92, 0, 1, "", "_static_cumprod"], [92, 0, 1, "", "_static_cumsum"], [92, 0, 1, "", "_static_min"], [92, 0, 1, "", "_static_prod"], [92, 0, 1, "", "_static_sum"], [92, 0, 1, "", "_static_var"], [92, 0, 1, "", "cumprod"], [92, 0, 1, "", "cumsum"], [92, 0, 1, "", "einsum"], [92, 0, 1, "", "max"], [92, 0, 1, "", "mean"], [92, 0, 1, "", "min"], [92, 0, 1, "", "prod"], [92, 0, 1, "", "std"], [92, 0, 1, "", "sum"], [92, 0, 1, "", "var"]], "ivy.data_classes.container.utility": [[93, 1, 1, "", "_ContainerWithUtility"]], "ivy.data_classes.container.utility._ContainerWithUtility": [[93, 4, 1, "", "_abc_impl"], [93, 0, 1, "", "_static_all"], [93, 0, 1, "", "_static_any"], [93, 0, 1, "", "all"], [93, 0, 1, "", "any"]], "ivy.data_classes.container.wrapping": [[94, 2, 1, "", "_wrap_function"], [94, 2, 1, "", "add_ivy_container_instance_methods"]], "ivy.data_classes.factorized_tensor": [[95, 3, 0, "-", "base"], [96, 3, 0, "-", "cp_tensor"], [97, 3, 0, "-", "parafac2_tensor"], [98, 3, 0, "-", "tr_tensor"], [99, 3, 0, "-", "tt_tensor"], [100, 3, 0, "-", "tucker_tensor"]], "ivy.data_classes.factorized_tensor.base": [[95, 1, 1, "", "FactorizedTensor"]], "ivy.data_classes.factorized_tensor.base.FactorizedTensor": [[95, 0, 1, "", "__init__"], [95, 4, 1, "", "_abc_impl"], [95, 0, 1, "", "mode_dot"], [95, 0, 1, "", "norm"], [95, 0, 1, "", "to_tensor"], [95, 0, 1, "", "to_unfolded"], [95, 0, 1, "", "to_vec"]], "ivy.data_classes.factorized_tensor.cp_tensor": [[96, 1, 1, "", "CPTensor"]], "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor": [[96, 0, 1, "", "__init__"], [96, 4, 1, "", "_abc_impl"], [96, 0, 1, "", "cp_copy"], [96, 0, 1, "", "cp_flip_sign"], [96, 0, 1, "", "cp_lstsq_grad"], [96, 0, 1, "", "cp_mode_dot"], [96, 0, 1, "", "cp_n_param"], [96, 0, 1, "", "cp_norm"], [96, 0, 1, "", "cp_normalize"], [96, 0, 1, "", "cp_to_tensor"], [96, 0, 1, "", "cp_to_unfolded"], [96, 0, 1, "", "cp_to_vec"], [96, 0, 1, "", "mode_dot"], [96, 5, 1, "", "n_param"], [96, 0, 1, "", "norm"], [96, 0, 1, "", "normalize"], [96, 0, 1, "", "to_tensor"], [96, 0, 1, "", "to_unfolded"], [96, 0, 1, "", "to_vec"], [96, 0, 1, "", "unfolding_dot_khatri_rao"], [96, 0, 1, "", "validate_cp_rank"], [96, 0, 1, "", "validate_cp_tensor"]], "ivy.data_classes.factorized_tensor.parafac2_tensor": [[97, 1, 1, "", "Parafac2Tensor"]], "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor": [[97, 0, 1, "", "__init__"], [97, 4, 1, "", "_abc_impl"], [97, 0, 1, "", "apply_parafac2_projections"], [97, 0, 1, "", "from_CPTensor"], [97, 5, 1, "", "n_param"], [97, 0, 1, "", "parafac2_normalise"], [97, 0, 1, "", "parafac2_to_slice"], [97, 0, 1, "", "parafac2_to_slices"], [97, 0, 1, "", "parafac2_to_tensor"], [97, 0, 1, "", "parafac2_to_unfolded"], [97, 0, 1, "", "parafac2_to_vec"], [97, 0, 1, "", "to_tensor"], [97, 0, 1, "", "to_unfolded"], [97, 0, 1, "", "to_vec"], [97, 0, 1, "", "validate_parafac2_tensor"]], "ivy.data_classes.factorized_tensor.tr_tensor": [[98, 1, 1, "", "TRTensor"]], "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor": [[98, 0, 1, "", "__init__"], [98, 4, 1, "", "_abc_impl"], [98, 5, 1, "", "n_param"], [98, 0, 1, "", "to_tensor"], [98, 0, 1, "", "to_unfolded"], [98, 0, 1, "", "to_vec"], [98, 0, 1, "", "tr_n_param"], [98, 0, 1, "", "tr_to_tensor"], [98, 0, 1, "", "tr_to_unfolded"], [98, 0, 1, "", "tr_to_vec"], [98, 0, 1, "", "validate_tr_rank"], [98, 0, 1, "", "validate_tr_tensor"]], "ivy.data_classes.factorized_tensor.tt_tensor": [[99, 1, 1, "", "TTTensor"]], "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor": [[99, 0, 1, "", "__init__"], [99, 4, 1, "", "_abc_impl"], [99, 0, 1, "", "_tt_n_param"], [99, 0, 1, "", "index_update"], [99, 5, 1, "", "n_param"], [99, 0, 1, "", "pad_tt_rank"], [99, 0, 1, "", "to_tensor"], [99, 0, 1, "", "to_unfolding"], [99, 0, 1, "", "to_vec"], [99, 0, 1, "", "tt_to_tensor"], [99, 0, 1, "", "tt_to_unfolded"], [99, 0, 1, "", "tt_to_vec"], [99, 0, 1, "", "validate_tt_rank"], [99, 0, 1, "", "validate_tt_tensor"]], "ivy.data_classes.factorized_tensor.tucker_tensor": [[100, 1, 1, "", "TuckerTensor"], [100, 2, 1, "", "_bisection_root_finder"]], "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor": [[100, 0, 1, "", "__init__"], [100, 4, 1, "", "_abc_impl"], [100, 0, 1, "", "mode_dot"], [100, 5, 1, "", "n_param"], [100, 0, 1, "", "to_tensor"], [100, 0, 1, "", "to_unfolded"], [100, 0, 1, "", "to_vec"], [100, 0, 1, "", "tucker_copy"], [100, 0, 1, "", "tucker_mode_dot"], [100, 0, 1, "", "tucker_n_param"], [100, 0, 1, "", "tucker_normalize"], [100, 0, 1, "", "tucker_to_tensor"], [100, 0, 1, "", "tucker_to_unfolded"], [100, 0, 1, "", "tucker_to_vec"], [100, 0, 1, "", "validate_tucker_rank"], [100, 0, 1, "", "validate_tucker_tensor"]], "ivy.data_classes.nested_array": [[105, 3, 0, "-", "base"], [106, 3, 0, "-", "elementwise"], [104, 3, 0, "-", "nested_array"]], "ivy.data_classes.nested_array.base": [[105, 1, 1, "", "NestedArrayBase"]], "ivy.data_classes.nested_array.base.NestedArrayBase": [[105, 0, 1, "", "__init__"], [105, 4, 1, "", "_abc_impl"], [105, 0, 1, "", "broadcast_shapes"], [105, 5, 1, "", "data"], [105, 5, 1, "", "device"], [105, 5, 1, "", "dtype"], [105, 5, 1, "", "inner_shape"], [105, 5, 1, "", "ndim"], [105, 0, 1, "", "nested_array"], [105, 5, 1, "", "nested_rank"], [105, 0, 1, "", "ragged_map"], [105, 0, 1, "", "ragged_multi_map"], [105, 0, 1, "", "ragged_multi_map_in_function"], [105, 0, 1, "", "replace_ivy_arrays"], [105, 5, 1, "", "shape"], [105, 0, 1, "", "unbind"]], "ivy.data_classes.nested_array.elementwise": [[106, 1, 1, "", "NestedArrayElementwise"]], "ivy.data_classes.nested_array.elementwise.NestedArrayElementwise": [[106, 4, 1, "", "_abc_impl"], [106, 0, 1, "", "static_add"]], "ivy.data_classes.nested_array.nested_array": [[104, 1, 1, "", "NestedArray"]], "ivy.data_classes.nested_array.nested_array.NestedArray": [[104, 0, 1, "", "__init__"], [104, 0, 1, "", "from_row_lengths"], [104, 0, 1, "", "from_row_splits"]], "ivy.functional.ivy": [[625, 3, 0, "-", "activations"], [626, 3, 0, "-", "constants"], [627, 3, 0, "-", "control_flow_ops"], [628, 3, 0, "-", "creation"], [629, 3, 0, "-", "data_type"], [630, 3, 0, "-", "device"], [631, 3, 0, "-", "elementwise"], [632, 3, 0, "-", "experimental"], [633, 3, 0, "-", "general"], [634, 3, 0, "-", "gradients"], [635, 3, 0, "-", "layers"], [636, 3, 0, "-", "linear_algebra"], [637, 3, 0, "-", "losses"], [638, 3, 0, "-", "manipulation"], [639, 3, 0, "-", "meta"], [640, 3, 0, "-", "nest"], [641, 3, 0, "-", "norms"], [642, 3, 0, "-", "random"], [643, 3, 0, "-", "searching"], [644, 3, 0, "-", "set"], [645, 3, 0, "-", "sorting"], [646, 3, 0, "-", "statistical"], [647, 3, 0, "-", "utility"]], "ivy.functional.ivy.experimental": [[366, 3, 0, "-", "activations"], [367, 3, 0, "-", "constants"], [368, 3, 0, "-", "creation"], [369, 3, 0, "-", "data_type"], [370, 3, 0, "-", "device"], [371, 3, 0, "-", "elementwise"], [372, 3, 0, "-", "general"], [373, 3, 0, "-", "gradients"], [374, 3, 0, "-", "layers"], [375, 3, 0, "-", "linear_algebra"], [376, 3, 0, "-", "losses"], [377, 3, 0, "-", "manipulation"], [378, 3, 0, "-", "meta"], [379, 3, 0, "-", "nest"], [380, 3, 0, "-", "norms"], [381, 3, 0, "-", "random"], [382, 3, 0, "-", "searching"], [383, 3, 0, "-", "set"], [384, 3, 0, "-", "sorting"], [385, 3, 0, "-", "sparse_array"], [386, 3, 0, "-", "statistical"], [387, 3, 0, "-", "utility"]], "ivy.stateful": [[787, 3, 0, "-", "activations"], [788, 3, 0, "-", "converters"], [789, 3, 0, "-", "helpers"], [790, 3, 0, "-", "initializers"], [791, 3, 0, "-", "layers"], [792, 3, 0, "-", "losses"], [793, 3, 0, "-", "module"], [794, 3, 0, "-", "norms"], [795, 3, 0, "-", "optimizers"], [796, 3, 0, "-", "sequential"]], "ivy.stateful.activations": [[787, 1, 1, "", "ELU"], [787, 1, 1, "", "GEGLU"], [787, 1, 1, "", "GELU"], [787, 1, 1, "", "Hardswish"], [787, 1, 1, "", "LeakyReLU"], [787, 1, 1, "", "LogSigmoid"], [787, 1, 1, "", "LogSoftmax"], [787, 1, 1, "", "Logit"], [787, 1, 1, "", "Mish"], [787, 1, 1, "", "PReLU"], [787, 1, 1, "", "ReLU"], [787, 1, 1, "", "ReLU6"], [787, 1, 1, "", "SeLU"], [787, 1, 1, "", "SiLU"], [787, 1, 1, "", "Sigmoid"], [787, 1, 1, "", "Softmax"], [787, 1, 1, "", "Softplus"], [787, 1, 1, "", "Tanh"]], "ivy.stateful.activations.ELU": [[787, 0, 1, "", "__init__"]], "ivy.stateful.activations.GEGLU": [[787, 0, 1, "", "__init__"]], "ivy.stateful.activations.GELU": [[787, 0, 1, "", "__init__"]], "ivy.stateful.activations.Hardswish": [[787, 0, 1, "", "__init__"]], "ivy.stateful.activations.LeakyReLU": [[787, 0, 1, "", "__init__"]], "ivy.stateful.activations.LogSigmoid": [[787, 0, 1, "", "__init__"]], "ivy.stateful.activations.LogSoftmax": [[787, 0, 1, "", "__init__"]], "ivy.stateful.activations.Logit": [[787, 0, 1, "", "__init__"]], "ivy.stateful.activations.Mish": [[787, 0, 1, "", "__init__"]], "ivy.stateful.activations.PReLU": [[787, 0, 1, "", "__init__"]], "ivy.stateful.activations.ReLU": [[787, 0, 1, "", "__init__"]], "ivy.stateful.activations.ReLU6": [[787, 0, 1, "", "__init__"]], "ivy.stateful.activations.SeLU": [[787, 0, 1, "", "__init__"]], "ivy.stateful.activations.SiLU": [[787, 0, 1, "", "__init__"]], "ivy.stateful.activations.Sigmoid": [[787, 0, 1, "", "__init__"]], "ivy.stateful.activations.Softmax": [[787, 0, 1, "", "__init__"]], "ivy.stateful.activations.Softplus": [[787, 0, 1, "", "__init__"]], "ivy.stateful.activations.Tanh": [[787, 0, 1, "", "__init__"]], "ivy.stateful.converters": [[788, 1, 1, "", "ModuleConverters"], [788, 2, 1, "", "to_ivy_module"]], "ivy.stateful.converters.ModuleConverters": [[788, 0, 1, "", "from_flax_module"], [788, 0, 1, "", "from_haiku_module"], [788, 0, 1, "", "from_keras_module"], [788, 0, 1, "", "from_paddle_module"], [788, 0, 1, "", "from_torch_module"], [788, 0, 1, "", "to_keras_module"]], "ivy.stateful.helpers": [[789, 1, 1, "", "ModuleHelpers"]], "ivy.stateful.initializers": [[790, 1, 1, "", "Constant"], [790, 1, 1, "", "FirstLayerSiren"], [790, 1, 1, "", "GlorotUniform"], [790, 1, 1, "", "Initializer"], [790, 1, 1, "", "KaimingNormal"], [790, 1, 1, "", "Ones"], [790, 1, 1, "", "RandomNormal"], [790, 1, 1, "", "Siren"], [790, 1, 1, "", "Uniform"], [790, 1, 1, "", "Zeros"]], "ivy.stateful.initializers.Constant": [[790, 0, 1, "", "__init__"], [790, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.FirstLayerSiren": [[790, 0, 1, "", "__init__"]], "ivy.stateful.initializers.GlorotUniform": [[790, 0, 1, "", "__init__"]], "ivy.stateful.initializers.Initializer": [[790, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.KaimingNormal": [[790, 0, 1, "", "__init__"], [790, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.Ones": [[790, 0, 1, "", "__init__"]], "ivy.stateful.initializers.RandomNormal": [[790, 0, 1, "", "__init__"], [790, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.Siren": [[790, 0, 1, "", "__init__"]], "ivy.stateful.initializers.Uniform": [[790, 0, 1, "", "__init__"], [790, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.Zeros": [[790, 0, 1, "", "__init__"]], "ivy.stateful.layers": [[791, 1, 1, "", "AdaptiveAvgPool1d"], [791, 1, 1, "", "AdaptiveAvgPool2d"], [791, 1, 1, "", "AvgPool1D"], [791, 1, 1, "", "AvgPool2D"], [791, 1, 1, "", "AvgPool3D"], [791, 1, 1, "", "Conv1D"], [791, 1, 1, "", "Conv1DTranspose"], [791, 1, 1, "", "Conv2D"], [791, 1, 1, "", "Conv2DTranspose"], [791, 1, 1, "", "Conv3D"], [791, 1, 1, "", "Conv3DTranspose"], [791, 1, 1, "", "Dct"], [791, 1, 1, "", "DepthwiseConv2D"], [791, 1, 1, "", "Dropout"], [791, 1, 1, "", "Embedding"], [791, 1, 1, "", "FFT"], [791, 1, 1, "", "IFFT"], [791, 1, 1, "", "Identity"], [791, 1, 1, "", "LSTM"], [791, 1, 1, "", "Linear"], [791, 1, 1, "", "MaxPool1D"], [791, 1, 1, "", "MaxPool2D"], [791, 1, 1, "", "MaxPool3D"], [791, 1, 1, "", "MultiHeadAttention"]], "ivy.stateful.layers.AdaptiveAvgPool1d": [[791, 0, 1, "", "__init__"]], "ivy.stateful.layers.AdaptiveAvgPool2d": [[791, 0, 1, "", "__init__"]], "ivy.stateful.layers.AvgPool1D": [[791, 0, 1, "", "__init__"]], "ivy.stateful.layers.AvgPool2D": [[791, 0, 1, "", "__init__"]], "ivy.stateful.layers.AvgPool3D": [[791, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv1D": [[791, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv1DTranspose": [[791, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv2D": [[791, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv2DTranspose": [[791, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv3D": [[791, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv3DTranspose": [[791, 0, 1, "", "__init__"]], "ivy.stateful.layers.Dct": [[791, 0, 1, "", "__init__"]], "ivy.stateful.layers.DepthwiseConv2D": [[791, 0, 1, "", "__init__"]], "ivy.stateful.layers.Dropout": [[791, 0, 1, "", "__init__"]], "ivy.stateful.layers.Embedding": [[791, 0, 1, "", "__init__"]], "ivy.stateful.layers.FFT": [[791, 0, 1, "", "__init__"]], "ivy.stateful.layers.IFFT": [[791, 0, 1, "", "__init__"]], "ivy.stateful.layers.Identity": [[791, 0, 1, "", "__init__"]], "ivy.stateful.layers.LSTM": [[791, 0, 1, "", "__init__"], [791, 0, 1, "", "get_initial_state"]], "ivy.stateful.layers.Linear": [[791, 0, 1, "", "__init__"]], "ivy.stateful.layers.MaxPool1D": [[791, 0, 1, "", "__init__"]], "ivy.stateful.layers.MaxPool2D": [[791, 0, 1, "", "__init__"]], "ivy.stateful.layers.MaxPool3D": [[791, 0, 1, "", "__init__"]], "ivy.stateful.layers.MultiHeadAttention": [[791, 0, 1, "", "__init__"]], "ivy.stateful.losses": [[792, 1, 1, "", "BinaryCrossEntropyLoss"], [792, 1, 1, "", "CrossEntropyLoss"], [792, 1, 1, "", "LogPoissonLoss"]], "ivy.stateful.losses.BinaryCrossEntropyLoss": [[792, 0, 1, "", "__init__"]], "ivy.stateful.losses.CrossEntropyLoss": [[792, 0, 1, "", "__init__"]], "ivy.stateful.losses.LogPoissonLoss": [[792, 0, 1, "", "__init__"]], "ivy.stateful.module": [[793, 1, 1, "", "Module"], [793, 1, 1, "", "ModuleMeta"]], "ivy.stateful.module.Module": [[793, 0, 1, "", "__call__"], [793, 0, 1, "", "__init__"], [793, 5, 1, "", "buffers"], [793, 0, 1, "", "build"], [793, 5, 1, "", "build_mode"], [793, 5, 1, "", "built"], [793, 5, 1, "", "device"], [793, 5, 1, "", "dtype"], [793, 0, 1, "", "eval"], [793, 0, 1, "", "load"], [793, 5, 1, "", "module_dict"], [793, 0, 1, "", "register_buffer"], [793, 0, 1, "", "register_parameter"], [793, 0, 1, "", "save"], [793, 0, 1, "", "save_weights"], [793, 0, 1, "", "show_graph"], [793, 5, 1, "", "state_dict"], [793, 0, 1, "", "to_device"], [793, 0, 1, "", "trace_graph"], [793, 0, 1, "", "train"], [793, 5, 1, "", "training"], [793, 5, 1, "", "v"]], "ivy.stateful.norms": [[794, 1, 1, "", "BatchNorm2D"], [794, 1, 1, "", "LayerNorm"]], "ivy.stateful.norms.BatchNorm2D": [[794, 0, 1, "", "__init__"]], "ivy.stateful.norms.LayerNorm": [[794, 0, 1, "", "__init__"]], "ivy.stateful.optimizers": [[795, 1, 1, "", "Adam"], [795, 1, 1, "", "AdamW"], [795, 1, 1, "", "LAMB"], [795, 1, 1, "", "LARS"], [795, 1, 1, "", "Optimizer"], [795, 1, 1, "", "SGD"]], "ivy.stateful.optimizers.Adam": [[795, 0, 1, "", "__init__"], [795, 0, 1, "", "set_state"], [795, 5, 1, "", "state"]], "ivy.stateful.optimizers.AdamW": [[795, 0, 1, "", "__init__"]], "ivy.stateful.optimizers.LAMB": [[795, 0, 1, "", "__init__"], [795, 0, 1, "", "set_state"], [795, 5, 1, "", "state"]], "ivy.stateful.optimizers.LARS": [[795, 0, 1, "", "__init__"], [795, 0, 1, "", "set_state"], [795, 5, 1, "", "state"]], "ivy.stateful.optimizers.Optimizer": [[795, 0, 1, "", "__init__"], [795, 0, 1, "", "set_state"], [795, 0, 1, "", "step"]], "ivy.stateful.optimizers.SGD": [[795, 0, 1, "", "__init__"], [795, 0, 1, "", "set_state"], [795, 5, 1, "", "state"]], "ivy.stateful.sequential": [[796, 1, 1, "", "Sequential"]], "ivy.stateful.sequential.Sequential": [[796, 0, 1, "", "__init__"]], "ivy.utils": [[797, 3, 0, "-", "assertions"], [798, 3, 0, "-", "backend"], [802, 3, 0, "-", "binaries"], [803, 3, 0, "-", "dynamic_import"], [804, 3, 0, "-", "einsum_parser"], [805, 3, 0, "-", "einsum_path_helpers"], [806, 3, 0, "-", "exceptions"], [807, 3, 0, "-", "inspection"], [808, 3, 0, "-", "logging"], [809, 3, 0, "-", "profiler"], [810, 3, 0, "-", "verbosity"]], "ivy.utils.assertions": [[797, 2, 1, "", "check_all"], [797, 2, 1, "", "check_all_or_any_fn"], [797, 2, 1, "", "check_any"], [797, 2, 1, "", "check_dev_correct_formatting"], [797, 2, 1, "", "check_dimensions"], [797, 2, 1, "", "check_elem_in_list"], [797, 2, 1, "", "check_equal"], [797, 2, 1, "", "check_exists"], [797, 2, 1, "", "check_false"], [797, 2, 1, "", "check_gather_input_valid"], [797, 2, 1, "", "check_gather_nd_input_valid"], [797, 2, 1, "", "check_greater"], [797, 2, 1, "", "check_inplace_sizes_valid"], [797, 2, 1, "", "check_isinstance"], [797, 2, 1, "", "check_kernel_padding_size"], [797, 2, 1, "", "check_less"], [797, 2, 1, "", "check_one_way_broadcastable"], [797, 2, 1, "", "check_same_dtype"], [797, 2, 1, "", "check_shape"], [797, 2, 1, "", "check_shapes_broadcastable"], [797, 2, 1, "", "check_true"], [797, 2, 1, "", "check_unsorted_segment_valid_params"]], "ivy.utils.backend": [[799, 3, 0, "-", "ast_helpers"], [800, 3, 0, "-", "handler"], [801, 3, 0, "-", "sub_backend_handler"]], "ivy.utils.backend.ast_helpers": [[799, 1, 1, "", "ImportTransformer"], [799, 1, 1, "", "IvyLoader"], [799, 1, 1, "", "IvyPathFinder"]], "ivy.utils.backend.ast_helpers.ImportTransformer": [[799, 0, 1, "", "__init__"], [799, 0, 1, "", "impersonate_import"], [799, 0, 1, "", "visit_Import"], [799, 0, 1, "", "visit_ImportFrom"]], "ivy.utils.backend.ast_helpers.IvyLoader": [[799, 0, 1, "", "__init__"], [799, 0, 1, "", "exec_module"]], "ivy.utils.backend.ast_helpers.IvyPathFinder": [[799, 0, 1, "", "find_spec"]], "ivy.utils.backend.handler": [[800, 1, 1, "", "ContextManager"], [800, 2, 1, "", "choose_random_backend"], [800, 2, 1, "", "current_backend"], [800, 2, 1, "", "dynamic_backend_converter"], [800, 2, 1, "", "prevent_access_locally"], [800, 2, 1, "", "previous_backend"], [800, 2, 1, "", "set_backend"], [800, 2, 1, "", "set_backend_to_specific_version"], [800, 2, 1, "", "set_jax_backend"], [800, 2, 1, "", "set_mxnet_backend"], [800, 2, 1, "", "set_numpy_backend"], [800, 2, 1, "", "set_paddle_backend"], [800, 2, 1, "", "set_tensorflow_backend"], [800, 2, 1, "", "set_torch_backend"], [800, 2, 1, "", "unset_backend"], [800, 2, 1, "", "with_backend"]], "ivy.utils.backend.handler.ContextManager": [[800, 0, 1, "", "__init__"]], "ivy.utils.backend.sub_backend_handler": [[801, 2, 1, "", "clear_sub_backends"], [801, 2, 1, "", "find_available_sub_backends"], [801, 2, 1, "", "fn_name_from_version_specific_fn_name"], [801, 2, 1, "", "fn_name_from_version_specific_fn_name_sub_backend"], [801, 2, 1, "", "set_sub_backend"], [801, 2, 1, "", "set_sub_backend_to_specific_version"], [801, 2, 1, "", "unset_sub_backend"]], "ivy.utils.binaries": [[802, 2, 1, "", "check_for_binaries"], [802, 2, 1, "", "cleanup_and_fetch_binaries"]], "ivy.utils.dynamic_import": [[803, 2, 1, "", "import_module"]], "ivy.utils.einsum_parser": [[804, 2, 1, "", "convert_interleaved_input"], [804, 2, 1, "", "convert_subscripts"], [804, 2, 1, "", "find_output_shape"], [804, 2, 1, "", "find_output_str"], [804, 2, 1, "", "gen_unused_symbols"], [804, 2, 1, "", "get_symbol"], [804, 2, 1, "", "has_valid_einsum_chars_only"], [804, 2, 1, "", "is_valid_einsum_char"], [804, 2, 1, "", "legalise_einsum_expr"], [804, 2, 1, "", "possibly_convert_to_numpy"]], "ivy.utils.einsum_path_helpers": [[805, 2, 1, "", "can_dot"], [805, 2, 1, "", "compute_size_by_dict"], [805, 2, 1, "", "find_contraction"], [805, 2, 1, "", "flop_count"], [805, 2, 1, "", "greedy_path"], [805, 2, 1, "", "optimal_path"], [805, 2, 1, "", "parse_einsum_input"], [805, 2, 1, "", "parse_possible_contraction"], [805, 2, 1, "", "update_other_results"]], "ivy.utils.exceptions": [[806, 7, 1, "", "InplaceUpdateException"], [806, 7, 1, "", "IvyAttributeError"], [806, 7, 1, "", "IvyBackendException"], [806, 7, 1, "", "IvyBroadcastShapeError"], [806, 7, 1, "", "IvyDeviceError"], [806, 7, 1, "", "IvyDtypePromotionError"], [806, 7, 1, "", "IvyError"], [806, 7, 1, "", "IvyException"], [806, 7, 1, "", "IvyIndexError"], [806, 7, 1, "", "IvyInvalidBackendException"], [806, 7, 1, "", "IvyNotImplementedException"], [806, 7, 1, "", "IvyValueError"], [806, 2, 1, "", "handle_exceptions"]], "ivy.utils.exceptions.InplaceUpdateException": [[806, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyAttributeError": [[806, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyBackendException": [[806, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyBroadcastShapeError": [[806, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyDeviceError": [[806, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyDtypePromotionError": [[806, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyError": [[806, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyException": [[806, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyIndexError": [[806, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyInvalidBackendException": [[806, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyNotImplementedException": [[806, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyValueError": [[806, 0, 1, "", "__init__"]], "ivy.utils.inspection": [[807, 2, 1, "", "add_array_specs"], [807, 2, 1, "", "fn_array_spec"]], "ivy.utils.logging": [[808, 2, 1, "", "set_logging_mode"], [808, 2, 1, "", "unset_logging_mode"]], "ivy.utils.profiler": [[809, 1, 1, "", "Profiler"], [809, 2, 1, "", "tensorflow_profile_start"], [809, 2, 1, "", "tensorflow_profile_stop"], [809, 2, 1, "", "torch_profiler_init"], [809, 2, 1, "", "torch_profiler_start"], [809, 2, 1, "", "torch_profiler_stop"]], "ivy.utils.profiler.Profiler": [[809, 0, 1, "", "__init__"], [809, 4, 1, "", "print_stats"], [809, 4, 1, "", "viz"]], "ivy.utils.verbosity": [[810, 2, 1, "", "cprint"]], "ivy_tests.test_ivy.helpers": [[770, 3, 0, "-", "assertions"], [771, 3, 0, "-", "available_frameworks"], [772, 3, 0, "-", "function_testing"], [773, 3, 0, "-", "globals"], [774, 3, 0, "-", "hypothesis_helpers"], [779, 3, 0, "-", "multiprocessing"], [780, 3, 0, "-", "pipeline_helper"], [781, 3, 0, "-", "structs"], [782, 3, 0, "-", "test_parameter_flags"], [783, 3, 0, "-", "testing_helpers"]], "ivy_tests.test_ivy.helpers.assertions": [[770, 2, 1, "", "assert_all_close"], [770, 2, 1, "", "assert_same_type"], [770, 2, 1, "", "assert_same_type_and_shape"], [770, 2, 1, "", "check_unsupported_device"], [770, 2, 1, "", "check_unsupported_device_and_dtype"], [770, 2, 1, "", "check_unsupported_dtype"], [770, 2, 1, "", "test_unsupported_function"], [770, 2, 1, "", "value_test"]], "ivy_tests.test_ivy.helpers.function_testing": [[772, 2, 1, "", "args_to_container"], [772, 2, 1, "", "args_to_frontend"], [772, 2, 1, "", "arrays_to_frontend"], [772, 2, 1, "", "as_lists"], [772, 2, 1, "", "convtrue"], [772, 2, 1, "", "create_args_kwargs"], [772, 2, 1, "", "flatten"], [772, 2, 1, "", "flatten_and_to_np"], [772, 2, 1, "", "flatten_frontend"], [772, 2, 1, "", "flatten_frontend_fw_to_np"], [772, 2, 1, "", "flatten_frontend_to_np"], [772, 2, 1, "", "get_frontend_ret"], [772, 2, 1, "", "get_ret_and_flattened_np_array"], [772, 2, 1, "", "gradient_incompatible_function"], [772, 2, 1, "", "gradient_test"], [772, 2, 1, "", "gradient_unsupported_dtypes"], [772, 2, 1, "", "kwargs_to_args_n_kwargs"], [772, 2, 1, "", "test_frontend_function"], [772, 2, 1, "", "test_frontend_method"], [772, 2, 1, "", "test_function"], [772, 2, 1, "", "test_function_backend_computation"], [772, 2, 1, "", "test_function_ground_truth_computation"], [772, 2, 1, "", "test_gradient_backend_computation"], [772, 2, 1, "", "test_gradient_ground_truth_computation"], [772, 2, 1, "", "test_method"], [772, 2, 1, "", "test_method_backend_computation"], [772, 2, 1, "", "test_method_ground_truth_computation"], [772, 2, 1, "", "traced_if_required"], [772, 2, 1, "", "wrap_frontend_function_args"]], "ivy_tests.test_ivy.helpers.globals": [[773, 6, 1, "", "CURRENT_FRONTEND_CONFIG"], [773, 7, 1, "", "InterruptedTest"], [773, 1, 1, "", "TestData"], [773, 2, 1, "", "setup_api_test"], [773, 2, 1, "", "setup_frontend_test"], [773, 2, 1, "", "teardown_api_test"], [773, 2, 1, "", "teardown_frontend_test"]], "ivy_tests.test_ivy.helpers.globals.InterruptedTest": [[773, 0, 1, "", "__init__"]], "ivy_tests.test_ivy.helpers.globals.TestData": [[773, 0, 1, "", "__init__"], [773, 4, 1, "", "fn_name"], [773, 4, 1, "", "fn_tree"], [773, 4, 1, "", "is_method"], [773, 4, 1, "", "supported_device_dtypes"], [773, 4, 1, "", "test_fn"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers": [[775, 3, 0, "-", "array_helpers"], [776, 3, 0, "-", "dtype_helpers"], [777, 3, 0, "-", "general_helpers"], [778, 3, 0, "-", "number_helpers"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers": [[775, 2, 1, "", "array_and_broadcastable_shape"], [775, 2, 1, "", "array_bools"], [775, 2, 1, "", "array_helpers_dtype_info_helper"], [775, 2, 1, "", "array_indices_axis"], [775, 2, 1, "", "array_indices_put_along_axis"], [775, 2, 1, "", "array_values"], [775, 2, 1, "", "arrays_and_axes"], [775, 2, 1, "", "arrays_for_pooling"], [775, 2, 1, "", "broadcast_shapes"], [775, 2, 1, "", "cond_data_gen_helper"], [775, 2, 1, "", "create_concatenable_arrays_dtypes"], [775, 2, 1, "", "create_nested_input"], [775, 2, 1, "", "dtype_and_values"], [775, 2, 1, "", "dtype_array_query"], [775, 2, 1, "", "dtype_array_query_val"], [775, 2, 1, "", "dtype_values_axis"], [775, 2, 1, "", "einsum_helper"], [775, 2, 1, "", "get_first_solve_batch_matrix"], [775, 2, 1, "", "get_first_solve_matrix"], [775, 2, 1, "", "get_second_solve_batch_matrix"], [775, 2, 1, "", "get_second_solve_matrix"], [775, 2, 1, "", "list_of_size"], [775, 2, 1, "", "lists"], [775, 2, 1, "", "mutually_broadcastable_shapes"], [775, 2, 1, "", "prod"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers": [[776, 2, 1, "", "array_dtypes"], [776, 2, 1, "", "cast_filter"], [776, 2, 1, "", "cast_filter_helper"], [776, 2, 1, "", "get_castable_dtype"], [776, 2, 1, "", "get_dtypes"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers": [[777, 7, 1, "", "BroadcastError"], [777, 2, 1, "", "apply_safety_factor"], [777, 2, 1, "", "broadcast_shapes"], [777, 2, 1, "", "dims_and_offset"], [777, 2, 1, "", "embedding_helper"], [777, 2, 1, "", "general_helpers_dtype_info_helper"], [777, 2, 1, "", "get_axis"], [777, 2, 1, "", "get_bounds"], [777, 2, 1, "", "get_mean_std"], [777, 2, 1, "", "get_shape"], [777, 2, 1, "", "matrix_is_stable"], [777, 2, 1, "", "reshape_shapes"], [777, 2, 1, "", "sizes_"], [777, 2, 1, "", "subsets"], [777, 2, 1, "", "two_broadcastable_shapes"], [777, 2, 1, "", "x_and_filters"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers": [[778, 2, 1, "", "floats"], [778, 2, 1, "", "ints"], [778, 2, 1, "", "number"]], "ivy_tests.test_ivy.helpers.multiprocessing": [[779, 2, 1, "", "backend_proc"], [779, 2, 1, "", "frontend_proc"]], "ivy_tests.test_ivy.helpers.pipeline_helper": [[780, 1, 1, "", "BackendHandler"], [780, 1, 1, "", "BackendHandlerMode"], [780, 1, 1, "", "WithBackendContext"], [780, 2, 1, "", "get_frontend_config"]], "ivy_tests.test_ivy.helpers.pipeline_helper.BackendHandler": [[780, 0, 1, "", "update_backend"]], "ivy_tests.test_ivy.helpers.pipeline_helper.BackendHandlerMode": [[780, 4, 1, "", "SetBackend"], [780, 4, 1, "", "WithBackend"]], "ivy_tests.test_ivy.helpers.pipeline_helper.WithBackendContext": [[780, 0, 1, "", "__init__"]], "ivy_tests.test_ivy.helpers.structs": [[781, 1, 1, "", "FrontendMethodData"]], "ivy_tests.test_ivy.helpers.structs.FrontendMethodData": [[781, 0, 1, "", "__init__"], [781, 4, 1, "", "framework_init_module"], [781, 4, 1, "", "init_name"], [781, 4, 1, "", "ivy_init_module"], [781, 4, 1, "", "method_name"]], "ivy_tests.test_ivy.helpers.test_parameter_flags": [[782, 1, 1, "", "DynamicFlag"], [782, 1, 1, "", "FrontendFunctionTestFlags"], [782, 1, 1, "", "FrontendInitTestFlags"], [782, 1, 1, "", "FrontendMethodTestFlags"], [782, 1, 1, "", "FunctionTestFlags"], [782, 1, 1, "", "InitMethodTestFlags"], [782, 1, 1, "", "MethodTestFlags"], [782, 1, 1, "", "TestFlags"], [782, 2, 1, "", "build_flag"], [782, 2, 1, "", "frontend_function_flags"], [782, 2, 1, "", "frontend_init_flags"], [782, 2, 1, "", "frontend_method_flags"], [782, 2, 1, "", "function_flags"], [782, 2, 1, "", "init_method_flags"], [782, 2, 1, "", "method_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.DynamicFlag": [[782, 0, 1, "", "__init__"], [782, 4, 1, "", "strategy"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendFunctionTestFlags": [[782, 0, 1, "", "__init__"], [782, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendInitTestFlags": [[782, 0, 1, "", "__init__"], [782, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendMethodTestFlags": [[782, 0, 1, "", "__init__"], [782, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.FunctionTestFlags": [[782, 0, 1, "", "__init__"], [782, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.InitMethodTestFlags": [[782, 0, 1, "", "__init__"], [782, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.MethodTestFlags": [[782, 0, 1, "", "__init__"], [782, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.TestFlags": [[782, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.testing_helpers": [[783, 2, 1, "", "handle_example"], [783, 2, 1, "", "handle_frontend_method"], [783, 2, 1, "", "handle_frontend_test"], [783, 2, 1, "", "handle_method"], [783, 2, 1, "", "handle_test"], [783, 2, 1, "", "num_positional_args"], [783, 2, 1, "", "num_positional_args_helper"], [783, 2, 1, "", "num_positional_args_method"], [783, 2, 1, "", "seed"]]}, "objtypes": {"0": "py:method", "1": "py:class", "2": "py:function", "3": "py:module", "4": "py:attribute", "5": "py:property", "6": "py:data", "7": "py:exception"}, "objnames": {"0": ["py", "method", "Python method"], "1": ["py", "class", "Python class"], "2": ["py", "function", "Python function"], "3": ["py", "module", "Python module"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "property", "Python property"], "6": ["py", "data", "Python data"], "7": ["py", "exception", "Python exception"]}, "titleterms": {"demo": [0, 2, 3, 4, 19, 30, 44, 45], "creat": [0, 42, 43, 817], "notebook": 0, "TO": 1, "replac": 1, "titl": 1, "exampl": [2, 7, 11, 13, 19, 38, 830, 835, 838, 841, 843, 846, 862, 863, 864], "ivi": [3, 4, 7, 11, 18, 21, 29, 30, 31, 42, 43, 45, 46, 48, 811, 817, 819, 823, 825, 827, 830, 832, 838, 840, 841, 842, 843, 844, 845, 848, 849, 850, 851, 852, 853, 855, 862, 863, 864, 875], "alexnet": 3, "instal": [3, 4, 11, 21, 42, 43, 45, 811, 855], "data": [3, 4, 7, 11, 13, 21, 30, 42, 53, 76, 107, 369, 629, 644, 748, 749, 750, 751, 828, 840, 843, 851, 854], "prepar": [3, 4, 7, 11], "infer": [3, 4, 7, 11, 837], "torch": [3, 4, 7, 11, 38, 45, 869, 870], "tensorflow": [3, 4, 5, 7, 13, 17, 38, 45, 46, 47, 869], "jax": [3, 4, 7, 10, 12, 13, 38, 45, 869], "appendix": [3, 7], "code": [3, 21, 22, 23, 24, 31, 42, 834, 842, 844], "implement": [3, 7, 827, 838, 840, 860], "bert": 4, "dependeci": 4, "import": [4, 7, 11, 13, 21, 42, 43, 46, 803], "modul": [4, 793, 828, 829, 852, 863], "sequenc": [4, 835], "classif": 4, "model": [4, 5, 6, 7, 10, 11, 12, 15, 16, 17, 28, 29, 30, 31, 42, 43, 44, 45, 46, 48, 853, 854], "us": [5, 7, 11, 18, 26, 29, 46, 48, 811, 813, 817, 818, 822, 838, 841, 851, 855, 862, 863], "your": [5, 7, 11, 819, 843], "pytorch": [5, 6, 12, 13, 15, 44, 869], "project": 5, "framework": [5, 30, 36, 42, 771, 784, 838, 841, 849, 869, 872, 875, 876], "incompat": 5, "transpil": [5, 6, 15, 16, 17, 24, 25, 26, 27, 28, 30, 31, 34, 35, 36, 37, 38, 44, 48, 853, 855, 863], "about": [5, 6, 42], "set": [5, 11, 38, 42, 43, 67, 90, 383, 644, 818, 824, 833, 845, 855], "up": [5, 15, 17, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 33, 34, 35, 36, 37, 44, 818, 833, 842, 855], "sourc": [5, 855], "convert": [5, 6, 788, 853], "from": [5, 6, 38, 45, 855], "compar": [5, 6, 13], "result": [5, 6, 43], "fine": [5, 6], "tune": [5, 6], "conclus": [5, 6], "how": [6, 26, 817, 825, 833, 842, 843], "To": [6, 48, 819], "paddlepaddl": 6, "imag": [7, 11, 59, 82, 252, 813, 825], "segment": 7, "unet": 7, "custom": [7, 823, 825, 838, 842, 851, 854], "preprocess": 7, "load": [7, 11, 13, 768, 851], "visualis": [7, 11], "initi": [7, 11, 790, 852], "nativ": [7, 11, 823, 846], "pretrain": [7, 11], "weight": [7, 11, 851], "mask": 7, "function": [7, 21, 30, 31, 42, 43, 44, 46, 48, 108, 772, 817, 826, 828, 829, 832, 835, 836, 837, 838, 840, 841, 843, 844, 845, 846, 848, 853, 854, 863], "backend": [7, 13, 21, 30, 42, 43, 45, 46, 798, 801, 817, 824, 828, 838, 844, 848, 854], "acceler": [10, 12, 13], "mmpretrain": 10, "resnet": [11, 49], "label": 11, "resnet34": 11, "classifi": 11, "resnet50": 11, "xgboost": 13, "test": [13, 44, 772, 782, 783, 786, 817, 818, 819, 822, 827, 833, 841, 843], "xgb_frontend": 13, "xgbclassifi": 13, "xgb": 13, "more": [13, 818, 846, 860], "exhaust": 13, "evalu": 13, "train": [13, 42, 44, 46], "time": 13, "v": [13, 25, 35, 38, 834, 854, 859, 862], "number": [13, 778, 835], "boost": 13, "round": [13, 15, 17, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 33, 34, 35, 36, 37, 44, 282, 842], "fraction": 13, "comparison": [13, 851], "metric": [13, 46], "guid": [14, 19], "build": [15, 16, 17, 46, 813, 825, 848], "top": [15, 16, 17, 820, 827, 877], "haiku": 16, "develop": 18, "convolut": 18, "network": [18, 43, 46, 851, 853], "tutori": [19, 46], "And": 19, "learn": [19, 20, 869], "basic": [19, 20, 42, 43, 819, 840], "write": [21, 29, 840, 843], "content": [21, 44], "handler": [21, 30, 800, 801, 848], "structur": [21, 30, 825, 838, 854], "api": [21, 30, 31, 817, 822, 826, 827, 838, 844, 848, 850, 852, 853, 855, 859, 862, 863, 864, 866, 873, 875], "state": [21, 30, 31, 852, 854, 862], "unifi": [22, 25, 26, 32, 35, 36, 37, 42, 811, 850, 860, 864, 871, 875], "trace": [23, 25, 26, 31, 690, 832], "lazi": [25, 35, 862], "eager": [25, 35, 862], "decor": [26, 37, 832, 837, 843], "ani": [27, 28, 30, 31, 767], "librari": [27, 30, 31, 46, 48, 863], "odsc": 30, "graph": [30, 47, 870, 875], "tracer": [30, 848, 853, 855, 862, 870, 875], "quickstart": 31, "get": [31, 811, 819, 855], "familiar": 31, "0": [32, 33, 34, 35, 39, 40], "1": [33, 35, 36, 37, 38, 41, 48, 869], "compil": [33, 35, 36, 37, 43, 862, 867, 872, 874, 875], "2": [34, 37, 39, 48, 869], "select": 36, "As": 37, "3": [38, 40, 41, 48], "dynam": [38, 46, 803, 824, 854], "static": 38, "todo": [38, 819], "explain": 38, "via": 38, "why": [38, 843, 860], "mode": [38, 828, 832, 845], "i": [38, 825, 846], "true": 38, "default": [38, 543], "when": 38, "numpi": [38, 45, 840, 869], "fals": 38, "kornia": 39, "perceiv": 40, "stabl": 41, "diffus": 41, "oper": [42, 835, 845, 850, 854], "ml": [42, 858, 871, 875], "chang": 42, "one": 42, "line": [42, 819], "No": [42, 818, 860], "need": [42, 843], "worri": 42, "type": [42, 53, 76, 369, 629, 828, 836, 840, 854], "differ": 42, "them": 42, "all": [42, 766], "standalon": [42, 836], "defin": [42, 43, 44, 46], "optim": [42, 795, 852], "input": [42, 43, 835], "target": 42, "loss": [42, 62, 85, 376, 637, 792], "loop": [42, 46], "sampl": 43, "check": [43, 834, 854], "simpl": 43, "neural": 43, "deepmind": [44, 45], "": [44, 46, 817, 825, 842, 855], "perceiverio": [44, 45], "tabl": [44, 825, 828, 866], "construct": [44, 851], "some": 44, "helper": [44, 774, 775, 776, 777, 778, 780, 783, 789, 799, 805, 841, 843, 844], "pipelin": [44, 46, 780, 825, 827, 843, 854], "dataset": [44, 46], "download": 44, "dataload": 44, "gpu": [45, 854], "introduct": [45, 48, 840, 841], "python3": 45, "8": 45, "setup": [45, 834], "kernel": 45, "clone": [45, 818, 827], "repo": [45, 818], "ivy_model": 45, "run": [45, 819, 822, 825, 833, 843], "end": 46, "let": 46, "we": [46, 843], "ar": 46, "mnist": 46, "thi": 46, "temporari": 46, "loader": 46, "util": [46, 70, 93, 387, 647, 785], "plot": 46, "save": [46, 769, 851], "huggingfac": 47, "deit": 47, "can": 47, "visual": 47, "displai": 47, "html": 47, "file": 47, "browser": [47, 819], "interfac": 48, "telemetri": 48, "18": 49, "activ": [50, 72, 366, 625, 787], "convers": [51, 74, 837], "creation": [52, 75, 368, 628], "devic": [54, 77, 370, 630, 829, 835, 840], "elementwis": [55, 78, 106, 371, 631], "experiment": [56, 79, 632, 817], "gener": [57, 80, 372, 633, 777, 838, 843, 846, 862], "gradient": [58, 81, 348, 373, 634, 838], "layer": [60, 83, 374, 635, 791], "linear": [61, 84, 375, 636, 659], "algebra": [61, 84, 375, 636], "manipul": [63, 86, 377, 638], "norm": [64, 87, 380, 641, 794], "random": [65, 88, 381, 642], "search": [66, 89, 382, 643], "sort": [68, 91, 384, 645, 755], "statist": [69, 92, 386, 646], "wrap": [71, 94, 837], "base": [73, 95, 105], "cp": 96, "tensor": [96, 97, 98, 99, 100, 103], "parafac2": 97, "tr": 98, "tt": 99, "tucker": [100, 450], "arrai": [101, 104, 126, 385, 775, 822, 823, 827, 835, 850, 859, 862, 866], "contain": [102, 819, 826, 851], "factor": 103, "nest": [104, 379, 640], "class": [107, 784, 823, 832, 840, 850], "gelu": 109, "hardswish": 110, "leaky_relu": 111, "log_softmax": 112, "mish": 113, "relu": 114, "sigmoid": 115, "softmax": 116, "softplu": 117, "softsign": 118, "cmp_i": 119, "cmp_isnot": 120, "for_loop": 121, "if_els": 122, "try_except": 123, "while_loop": 124, "arang": 125, "asarrai": 127, "copy_arrai": 128, "empti": 129, "empty_lik": 130, "ey": 131, "from_dlpack": 132, "note": [132, 143, 628], "frombuff": 133, "full": [134, 841], "full_lik": 135, "linspac": 136, "logspac": 137, "meshgrid": 138, "native_arrai": 139, "one_hot": 140, "ones": 141, "ones_lik": 142, "to_dlpack": 143, "tril": 144, "triu": 145, "triu_indic": 146, "zero": 147, "zeros_lik": 148, "as_ivy_dtyp": 149, "as_native_dtyp": 150, "astyp": 151, "broadcast_arrai": 152, "broadcast_to": 153, "can_cast": 154, "check_float": 155, "closest_valid_dtyp": 156, "default_complex_dtyp": 157, "default_dtyp": 158, "default_float_dtyp": 159, "default_int_dtyp": 160, "default_uint_dtyp": 161, "dtype": [162, 776, 835], "dtype_bit": 163, "finfo": 164, "function_supported_dtyp": 165, "function_unsupported_dtyp": 166, "iinfo": 167, "infer_default_dtyp": 168, "invalid_dtyp": 169, "is_bool_dtyp": 170, "is_complex_dtyp": 171, "is_float_dtyp": 172, "is_hashable_dtyp": 173, "is_int_dtyp": 174, "is_native_dtyp": 175, "is_uint_dtyp": 176, "promote_typ": 177, "promote_types_of_input": 178, "result_typ": 179, "set_default_complex_dtyp": 180, "set_default_dtyp": 181, "set_default_float_dtyp": 182, "set_default_int_dtyp": 183, "set_default_uint_dtyp": 184, "type_promote_arrai": 185, "unset_default_complex_dtyp": 186, "unset_default_dtyp": 187, "unset_default_float_dtyp": 188, "unset_default_int_dtyp": 189, "unset_default_uint_dtyp": 190, "valid_dtyp": 191, "as_ivy_dev": 192, "as_native_dev": 193, "clear_cached_mem_on_dev": 194, "default_devic": 195, "dev": 196, "dev_util": 197, "function_supported_devic": 198, "function_unsupported_devic": 199, "get_all_ivy_arrays_on_dev": 200, "gpu_is_avail": 201, "handle_soft_device_vari": 202, "num_cpu_cor": 203, "num_gpu": 204, "num_ivy_arrays_on_dev": 205, "percent_used_mem_on_dev": 206, "print_all_ivy_arrays_on_dev": 207, "set_default_devic": 208, "set_soft_device_mod": 209, "paramet": [209, 577, 578, 583, 584, 586, 587, 630, 633, 782, 787, 845], "set_split_factor": 210, "split_factor": 211, "split_func_cal": 212, "to_devic": 213, "total_mem_on_dev": 214, "tpu_is_avail": 215, "unset_default_devic": 216, "unset_soft_device_mod": 217, "used_mem_on_dev": 218, "ab": 219, "aco": 220, "acosh": 221, "add": [222, 830, 841, 875], "angl": 223, "asin": 224, "asinh": 225, "atan": 226, "atan2": 227, "atanh": 228, "bitwise_and": 229, "bitwise_invert": 230, "bitwise_left_shift": 231, "bitwise_or": 232, "bitwise_right_shift": 233, "bitwise_xor": 234, "ceil": 235, "co": 236, "cosh": 237, "deg2rad": 238, "divid": 239, "equal": 240, "erf": 241, "exp": 242, "exp2": 243, "expm1": 244, "floor": 245, "floor_divid": 246, "fmin": 247, "fmod": 248, "gcd": 249, "greater": 250, "greater_equ": 251, "isfinit": 253, "isinf": 254, "isnan": 255, "isreal": 256, "lcm": 257, "less": 258, "less_equ": 259, "log": [260, 808, 818], "log10": 261, "log1p": 262, "log2": 263, "logaddexp": 264, "logaddexp2": 265, "logical_and": 266, "logical_not": 267, "logical_or": 268, "logical_xor": 269, "maximum": 270, "minimum": 271, "multipli": 272, "nan_to_num": 273, "neg": 274, "not_equ": 275, "posit": [276, 835], "pow": 277, "rad2deg": 278, "real": 279, "reciproc": 280, "remaind": 281, "sign": 283, "sin": 284, "sinh": 285, "sqrt": 286, "squar": 287, "subtract": 288, "tan": [289, 830, 841], "tanh": 290, "trapz": 291, "trunc": 292, "trunc_divid": 293, "celu": 294, "elu": 295, "hardshrink": 296, "hardsilu": 297, "hardtanh": 298, "logit": 299, "logsigmoid": 300, "prelu": 301, "relu6": 302, "scaled_tanh": 303, "selu": 304, "silu": 305, "softshrink": 306, "stanh": 307, "tanhshrink": 308, "threshold": 309, "thresholded_relu": 310, "blackman_window": 311, "eye_lik": 312, "hamming_window": 313, "hann_window": 314, "indic": 315, "kaiser_bessel_derived_window": 316, "kaiser_window": 317, "mel_weight_matrix": 318, "ndenumer": 319, "ndindex": 320, "polyv": 321, "random_cp": 322, "random_parafac2": 323, "random_tr": 324, "random_tt": 325, "random_tuck": 326, "tril_indic": 327, "trilu": 328, "unsorted_segment_mean": 329, "unsorted_segment_min": 330, "unsorted_segment_sum": 331, "vorbis_window": 332, "allclos": 333, "amax": 334, "amin": 335, "binar": 336, "conj": 337, "copysign": 338, "count_nonzero": 339, "diff": 340, "digamma": 341, "erfc": 342, "erfinv": 343, "fix": [344, 817, 833], "float_pow": 345, "fmax": 346, "frexp": 347, "hypot": 349, "isclos": 350, "ldexp": 351, "lerp": 352, "lgamma": 353, "modf": 354, "nansum": 355, "nextaft": 356, "signbit": 357, "sinc": 358, "sparsify_tensor": 359, "xlogi": 360, "zeta": 361, "reduc": 362, "bind_custom_gradient_funct": 363, "jvp": 364, "vjp": 365, "constant": [367, 626], "meta": [378, 639], "spars": 385, "adaptive_avg_pool1d": 388, "adaptive_avg_pool2d": 389, "adaptive_max_pool2d": 390, "adaptive_max_pool3d": 391, "area_interpol": 392, "avg_pool1d": 393, "avg_pool2d": 394, "avg_pool3d": 395, "dct": 396, "dft": 397, "dropout1d": 398, "dropout2d": 399, "dropout3d": 400, "embed": 401, "fft": 402, "fft2": 403, "generate_einsum_equ": 404, "get_interpolate_kernel": 405, "idct": 406, "ifft": 407, "ifftn": 408, "interp": 409, "interpol": 410, "max_pool1d": 411, "max_pool2d": 412, "max_pool3d": 413, "max_unpool1d": 414, "nearest_interpol": 415, "pool": 416, "reduce_window": 417, "rfft": 418, "rfftn": 419, "rnn": 420, "sliding_window": 421, "stft": 422, "adjoint": 423, "batched_out": 424, "cond": 425, "diagflat": 426, "dot": 427, "eig": [428, 671], "eigh_tridiagon": 429, "eigval": 430, "general_inner_product": 431, "higher_order_mo": 432, "initialize_tuck": 433, "khatri_rao": 434, "kron": 435, "kroneck": 436, "lu_factor": 437, "lu_solv": 438, "make_svd_non_neg": 439, "matrix_exp": 440, "mode_dot": 441, "multi_dot": 442, "multi_mode_dot": 443, "partial_tuck": 444, "solve_triangular": 445, "svd_flip": 446, "tensor_train": 447, "truncated_svd": 448, "tt_matrix_to_tensor": 449, "hinge_embedding_loss": 451, "huber_loss": 452, "kl_div": 453, "l1_loss": 454, "log_poisson_loss": 455, "poisson_nll_loss": 456, "smooth_l1_loss": 457, "soft_margin_loss": 458, "as_strid": 459, "associative_scan": 460, "atleast_1d": 461, "atleast_2d": 462, "atleast_3d": 463, "broadcast_shap": 464, "check_scalar": 465, "choos": 466, "column_stack": 467, "concat_from_sequ": 468, "dsplit": 469, "dstack": 470, "expand": 471, "fill_diagon": 472, "flatten": 473, "fliplr": 474, "flipud": 475, "fold": 476, "heavisid": 477, "hsplit": 478, "hstack": 479, "i0": 480, "matric": 481, "moveaxi": 482, "pad": 483, "partial_fold": 484, "partial_tensor_to_vec": 485, "partial_unfold": 486, "partial_vec_to_tensor": 487, "put_along_axi": 488, "rot90": 489, "soft_threshold": 490, "take": 491, "take_along_axi": 492, "top_k": 493, "trim_zero": 494, "unflatten": 495, "unfold": 496, "unique_consecut": 497, "vsplit": 498, "vstack": 499, "batch_norm": 500, "group_norm": 501, "instance_norm": 502, "l1_normal": 503, "l2_normal": 504, "local_response_norm": 505, "lp_normal": 506, "bernoulli": 507, "beta": 508, "dirichlet": 509, "gamma": 510, "poisson": 511, "unravel_index": 512, "invert_permut": 513, "lexsort": 514, "is_ivy_sparse_arrai": 515, "is_native_sparse_arrai": 516, "native_sparse_arrai": 517, "native_sparse_array_to_indices_values_and_shap": 518, "bincount": 519, "corrcoef": 520, "cov": 521, "cummax": 522, "cummin": 523, "histogram": 524, "igamma": 525, "median": 526, "nanmean": 527, "nanmedian": 528, "nanmin": 529, "nanprod": 530, "quantil": 531, "optional_get_el": 532, "all_equ": 533, "arg_info": 534, "arg_nam": 535, "array_equ": 536, "assert_supports_inplac": 537, "cache_fn": 538, "clip_matrix_norm": 539, "clip_vector_norm": 540, "container_typ": 541, "current_backend_str": 542, "einops_rearrang": 544, "einops_reduc": 545, "einops_repeat": 546, "exist": [547, 813, 842], "fourier_encod": 548, "function_supported_devices_and_dtyp": 549, "function_unsupported_devices_and_dtyp": 550, "gather": 551, "gather_nd": 552, "get_all_arrays_in_memori": 553, "get_item": 554, "get_num_dim": 555, "get_referrers_recurs": 556, "has_nan": 557, "inplace_arrays_support": 558, "inplace_decr": 559, "inplace_incr": 560, "inplace_upd": 561, "inplace_variables_support": 562, "is_arrai": 563, "is_ivy_arrai": 564, "is_ivy_contain": 565, "is_ivy_nested_arrai": 566, "is_native_arrai": 567, "isin": 568, "isscalar": 569, "items": 570, "match_kwarg": 571, "multiprocess": [572, 779], "num_arrays_in_memori": 573, "print_all_arrays_in_memori": 574, "scatter_flat": 575, "scatter_nd": 576, "set_array_mod": 577, "set_exception_trace_mod": 578, "set_inplace_mod": 579, "set_item": 580, "set_min_bas": 581, "set_min_denomin": 582, "set_nestable_mod": 583, "set_precise_mod": 584, "set_queue_timeout": 585, "set_shape_array_mod": 586, "set_show_func_wrapper_trace_mod": 587, "set_tmp_dir": 588, "shape": [589, 644, 748, 749, 750, 751, 837, 854], "size": [590, 854], "stable_divid": 591, "stable_pow": 592, "stride": 593, "supports_inplace_upd": 594, "to_ivy_shap": 595, "to_list": 596, "to_native_shap": 597, "to_numpi": 598, "to_scalar": 599, "try_else_non": 600, "unset_array_mod": 601, "unset_exception_trace_mod": 602, "unset_inplace_mod": 603, "unset_min_bas": 604, "unset_min_denomin": 605, "unset_nestable_mod": 606, "unset_precise_mod": 607, "unset_queue_timeout": 608, "unset_shape_array_mod": 609, "unset_show_func_wrapper_trace_mod": 610, "unset_tmp_dir": 611, "value_is_nan": 612, "vmap": 613, "adam_step": 614, "adam_upd": 615, "execute_with_gradi": [616, 838], "grad": 617, "gradient_descent_upd": 618, "jac": 619, "lamb_upd": 620, "lars_upd": 621, "optimizer_upd": 622, "stop_gradi": 623, "value_and_grad": 624, "control": [627, 854], "flow": [627, 854], "op": 627, "depend": [644, 748, 749, 750, 751], "output": [644, 748, 749, 750, 751], "conv": 648, "conv1d": 649, "conv1d_transpos": 650, "conv2d": 651, "conv2d_transpos": 652, "conv3d": 653, "conv3d_transpos": 654, "conv_general_dil": 655, "conv_general_transpos": 656, "depthwise_conv2d": 657, "dropout": 658, "lstm": 660, "lstm_updat": 661, "multi_head_attent": 662, "nm": 663, "roi_align": 664, "scaled_dot_product_attent": 665, "choleski": 666, "cross": 667, "det": 668, "diag": 669, "diagon": 670, "eigh": 672, "eigvalsh": 673, "inner": 674, "inv": 675, "matmul": 676, "matrix_norm": 677, "matrix_pow": 678, "matrix_rank": 679, "matrix_transpos": 680, "outer": 681, "pinv": 682, "qr": 683, "slogdet": 684, "solv": 685, "svd": 686, "svdval": 687, "tensordot": 688, "tensorsolv": 689, "vander": 691, "vecdot": 692, "vector_norm": 693, "vector_to_skew_symmetric_matrix": 694, "binary_cross_entropi": 695, "cross_entropi": 696, "sparse_cross_entropi": 697, "clip": 698, "concat": 699, "constant_pad": 700, "expand_dim": 701, "flip": 702, "permute_dim": 703, "repeat": 704, "reshap": 705, "roll": [706, 830], "split": 707, "squeez": 708, "stack": [709, 832], "swapax": 710, "tile": 711, "unstack": 712, "zero_pad": 713, "fomaml_step": 714, "maml_step": 715, "reptile_step": 716, "all_nested_indic": 717, "copy_nest": 718, "duplicate_array_index_chain": 719, "index_nest": 720, "insert_into_nest_at_index": 721, "insert_into_nest_at_indic": 722, "map": [723, 827], "map_nest_at_index": 724, "map_nest_at_indic": 725, "multi_index_nest": 726, "nested_ani": 727, "nested_argwher": 728, "nested_map": 729, "nested_multi_map": 730, "prune_empti": 731, "prune_nest_at_index": 732, "prune_nest_at_indic": 733, "set_nest_at_index": 734, "set_nest_at_indic": 735, "layer_norm": 736, "multinomi": 737, "randint": 738, "random_norm": 739, "random_uniform": 740, "seed": 741, "shuffl": 742, "argmax": 743, "argmin": 744, "argwher": 745, "nonzero": 746, "where": [747, 817, 833], "unique_al": 748, "unique_count": 749, "unique_invers": 750, "unique_valu": 751, "argsort": 752, "msort": 753, "searchsort": 754, "cumprod": 756, "cumsum": 757, "einsum": [758, 804, 805], "max": 759, "mean": 760, "min": 761, "prod": 762, "std": 763, "sum": 764, "var": 765, "assert": [770, 797, 832], "avail": 771, "global": [773, 845], "hypothesi": [774, 818, 841, 843], "struct": 781, "flag": 782, "sequenti": 796, "ast": 799, "sub": 801, "binari": [802, 818], "parser": 804, "path": 805, "except": [806, 832, 837], "inspect": 807, "profil": 809, "verbos": 810, "statu": 811, "ai": 811, "start": [811, 855], "document": 811, "contribut": [811, 812, 817, 842], "commun": 811, "citat": 811, "doc": [813, 825], "docker": [813, 818, 819, 825, 855], "conveni": [813, 825, 836], "script": [813, 825], "hub": 813, "local": [813, 819, 834], "without": [813, 841], "contributor": [814, 820, 877], "reward": 814, "badg": 814, "tier": 814, "error": [815, 832, 833], "handl": [815, 823, 829, 832, 837, 854], "help": [816, 819, 833], "resourc": 816, "open": 817, "task": 817, "fail": [817, 833, 843], "frontend": [817, 824, 840, 841, 853], "place": 817, "checklist": 817, "format": [817, 834, 868, 875], "extend": [817, 843, 846], "an": [817, 838], "issu": [817, 819, 834, 855], "github": [817, 818], "templat": 817, "fork": [818, 819], "pre": [818, 834], "commit": [818, 819, 827, 834], "pycharm": [818, 819, 834], "virtual": 818, "environ": 818, "miniconda": 818, "venv": 818, "interpret": 818, "window": 818, "maco": 818, "ubuntu": 818, "detail": 818, "free": 818, "wsl": 818, "codespac": 818, "The": [818, 819, 825, 838, 840, 850, 854, 859], "list": 819, "manag": 819, "who": 819, "ask": [819, 833], "With": 819, "command": 819, "pull": [819, 827], "request": [819, 827], "small": 819, "often": 819, "interact": 819, "most": 819, "out": [819, 835, 837, 839], "id": [819, 822], "program": 820, "core": [820, 877], "rise": [820, 877], "deep": 821, "dive": 821, "termin": 822, "regener": 822, "failur": 822, "skip": 822, "integr": [823, 827, 834, 842, 843], "version": [824, 844, 854], "support": [824, 828, 837, 840, 854], "builder": 825, "being": 825, "option": 825, "index": 825, "rst": 825, "partial_conf": 825, "py": 825, "prebuild": 825, "sh": 825, "extens": 825, "custom_autosummari": 825, "hide": 825, "discussion_link": 825, "skippable_funct": 825, "ivy_data": 825, "instanc": [826, 840, 841, 850], "method": [826, 840, 841, 850, 851], "special": [826, 828, 840], "nestabl": [826, 835, 836, 837], "continu": [827, 834], "push": 827, "pr": 827, "trigger": 827, "A": [827, 846], "down": 827, "view": [827, 837, 839], "store": 827, "retriev": 827, "repositori": 827, "nitti": 827, "gritti": 827, "storag": 827, "space": 827, "unifyai": 827, "determin": 827, "coverag": 827, "workflow": 827, "multipl": 827, "runner": 827, "race": 827, "condit": 827, "period": 827, "manual": 827, "dispatch": 827, "ci": 827, "dashboard": 827, "promot": [828, 840], "precis": 828, "non": [828, 846], "argument": [828, 829, 835, 837, 839, 840], "other": [828, 829], "unsupport": 828, "attribut": [828, 845], "case": [828, 851], "bug": 828, "cast": [828, 840], "superset": [828, 846], "docstr": [830, 831], "configur": [832, 841, 851], "func_wrapp": 832, "prune": 832, "handle_except": 832, "consist": [832, 843], "prerequir": 833, "common": [833, 834], "lint": [834, 842], "keyword": 835, "integ": 835, "primari": 836, "composit": 836, "mix": [836, 837, 843], "partial": [836, 837, 843], "order": 837, "wrapper": [837, 875, 876], "miscellan": 837, "overview": [838, 842], "usag": [838, 842, 846, 864], "signatur": 838, "design": [838, 844, 847], "our": 838, "polici": [838, 840], "specif": [838, 873, 874, 875], "consider": 838, "inplac": 839, "updat": 839, "copi": 839, "short": 840, "unus": 840, "rule": 840, "duplic": [840, 846], "valu": 841, "alia": 841, "formatt": 842, "functionorderingformatt": 842, "work": [842, 859, 865], "own": 843, "strategi": 843, "ad": 843, "explicit": 843, "do": [843, 859], "effect": 843, "bonu": 843, "featur": 843, "self": 843, "test_array_funct": 843, "re": [843, 860], "navig": 844, "categor": 844, "submodul": 844, "unpin": 844, "properti": 845, "getter": 845, "setter": 845, "set_": 845, "unset_": 845, "behaviour": 846, "standard": [846, 859, 866, 875], "what": [846, 875], "balanc": 846, "effici": 846, "maxim": 846, "block": 848, "monkei": 850, "patch": 850, "represent": 851, "recurs": 851, "built": 851, "ins": 851, "access": 851, "compartment": 851, "role": 853, "faq": 854, "maintain": 854, "deploy": 854, "auto": 854, "differenti": 854, "replica": 854, "parallel": 854, "altern": 854, "pip": 855, "folder": 855, "kei": 855, "question": 855, "glossari": 856, "motiv": 857, "explos": 858, "skeptic": 859, "complimentari": 859, "competit": 859, "infinit": 860, "shelf": 860, "life": 860, "One": 861, "liner": 861, "trace_graph": 862, "cach": 862, "sharp": [862, 863, 864], "bit": [862, 863, 864], "relat": 865, "infrastructur": [867, 875], "llvm": 867, "mlir": 867, "oneapi": 867, "exchang": [868, 875], "onnx": 868, "nnef": 868, "coreml": 868, "matlab": 869, "scipi": 869, "scikit": 869, "theano": 869, "panda": 869, "julia": 869, "apach": [869, 872], "spark": 869, "mllib": 869, "caff": 869, "chainer": 869, "mxnet": 869, "cntk": 869, "flux": 869, "dex": 869, "languag": 869, "tf": 870, "jaxpr": 870, "jit": 870, "fx": 870, "compani": [871, 875], "quansight": 871, "modular": 871, "octoml": 871, "multi": [872, 875], "vendor": [872, 873, 874, 875], "tvm": 872, "xla": 872, "gcc": 872, "tensorrt": 873, "cuda": 873, "icc": 874, "icx": 874, "nvcc": 874, "doe": 875, "eagerpi": 876, "kera": 876, "thinc": 876, "tensorli": 876, "neuropod": 876, "leaderboard": 877}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "nbsphinx": 4, "sphinx": 60}, "alltitles": {"function_supported_dtypes": [[165, "function-supported-dtypes"]], "dtype_bits": [[163, "dtype-bits"]], "default_float_dtype": [[159, "default-float-dtype"]], "is_native_dtype": [[175, "is-native-dtype"]], "default_int_dtype": [[160, "default-int-dtype"]], "native_array": [[139, "native-array"]], "is_bool_dtype": [[170, "is-bool-dtype"]], "is_hashable_dtype": [[173, "is-hashable-dtype"]], "tril": [[144, "tril"]], "is_uint_dtype": [[176, "is-uint-dtype"]], "default_complex_dtype": [[157, "default-complex-dtype"]], "ones_like": [[142, "ones-like"]], "infer_default_dtype": [[168, "infer-default-dtype"]], "set_default_complex_dtype": [[180, "set-default-complex-dtype"]], "is_complex_dtype": [[171, "is-complex-dtype"]], "triu_indices": [[146, "triu-indices"]], "as_ivy_dtype": [[149, "as-ivy-dtype"]], "astype": [[151, "astype"]], "set_default_dtype": [[181, "set-default-dtype"]], "is_int_dtype": [[174, "is-int-dtype"]], "closest_valid_dtype": [[156, "closest-valid-dtype"]], "dtype": [[162, "dtype"]], "zeros": [[147, "zeros"]], "set_default_float_dtype": [[182, "set-default-float-dtype"]], "set_default_int_dtype": [[183, "set-default-int-dtype"]], "broadcast_arrays": [[152, "broadcast-arrays"]], "default_uint_dtype": [[161, "default-uint-dtype"]], "promote_types_of_inputs": [[178, "promote-types-of-inputs"]], "iinfo": [[167, "iinfo"]], "as_native_dtype": [[150, "as-native-dtype"]], "invalid_dtype": [[169, "invalid-dtype"]], "result_type": [[179, "result-type"]], "promote_types": [[177, "promote-types"]], "triu": [[145, "triu"]], "meshgrid": [[138, "meshgrid"]], "is_float_dtype": [[172, "is-float-dtype"]], "ones": [[141, "ones"]], "broadcast_to": [[153, "broadcast-to"]], "can_cast": [[154, "can-cast"]], "to_dlpack": [[143, "to-dlpack"]], "Note": [[143, null], [132, null], [628, null], [628, null]], "one_hot": [[140, "one-hot"]], "finfo": [[164, "finfo"]], "function_unsupported_dtypes": [[166, "function-unsupported-dtypes"]], "check_float": [[155, "check-float"]], "zeros_like": [[148, "zeros-like"]], "default_dtype": [[158, "default-dtype"]], "What does Ivy Add?": [[875, "what-does-ivy-add"]], "API Standards": [[875, "api-standards"], [866, "api-standards"]], "Wrapper Frameworks": [[875, "wrapper-frameworks"], [876, "wrapper-frameworks"]], "Frameworks": [[875, "frameworks"], [869, "frameworks"]], "Graph Tracers": [[875, "graph-tracers"], [870, "graph-tracers"]], "Exchange Formats": [[875, "exchange-formats"], [868, "exchange-formats"]], "Compiler Infrastructure": [[875, "compiler-infrastructure"], [867, "compiler-infrastructure"]], "Multi-Vendor Compiler Frameworks": [[875, "multi-vendor-compiler-frameworks"], [872, "multi-vendor-compiler-frameworks"]], "Vendor-Specific APIs": [[875, "vendor-specific-apis"], [873, "vendor-specific-apis"]], "Vendor-Specific Compilers": [[875, "vendor-specific-compilers"], [874, "vendor-specific-compilers"]], "ML-Unifying Companies": [[875, "ml-unifying-companies"], [871, "ml-unifying-companies"]], "Contributor Leaderboard": [[877, "contributor-leaderboard"]], "Top Contributors": [[877, "top-contributors"]], "Rising Contributors": [[877, "rising-contributors"]], "Core Contributors": [[877, "core-contributors"]], "Contributors": [[877, "contributors"]], "EagerPy eagerpy": [[876, "eagerpy-eagerpy"]], "Keras keras": [[876, "keras-keras"]], "Thinc thinc": [[876, "thinc-thinc"]], "TensorLy tensorly": [[876, "tensorly-tensorly"]], "NeuroPod": [[876, "id1"]], "ICC": [[874, "id1"]], "ICX": [[874, "icx"]], "NVCC": [[874, "nvcc"]], "Ivy Frontend Tests": [[841, "ivy-frontend-tests"]], "Introduction": [[841, "introduction"], [840, "introduction"], [45, "Introduction"]], "Frontend Test Examples": [[841, "frontend-test-examples"]], "ivy.tan()": [[841, "ivy-tan"]], "ivy.full()": [[841, "ivy-full"]], "Testing Without Using Tests Values": [[841, "testing-without-using-tests-values"]], "Alias functions": [[841, "alias-functions"]], "Frontend Instance Method Tests": [[841, "frontend-instance-method-tests"]], "Frontend Instance Method Test Examples": [[841, "frontend-instance-method-test-examples"]], "ivy.add()": [[841, "ivy-add"]], "Hypothesis Helpers": [[841, "hypothesis-helpers"]], "Frontend Framework Testing Configuration": [[841, "frontend-framework-testing-configuration"]], "One liners": [[861, "one-liners"]], "Building Blocks": [[848, "building-blocks"]], "Backend Functional APIs \u2705": [[848, "backend-functional-apis"]], "Ivy Functional API \u2705": [[848, "ivy-functional-api"]], "Backend Handler \u2705": [[848, "backend-handler"]], "Tracer \ud83d\udea7": [[848, "tracer"]], "ivy.unify()": [[864, "ivy-unify"]], "Unify API": [[864, "unify-api"]], "Usage": [[864, "usage"]], "Sharp bits": [[864, "sharp-bits"], [862, "sharp-bits"], [863, "sharp-bits"]], "Examples": [[864, "examples"], [862, "examples"], [835, "examples"], [863, "examples"]], "Docstrings": [[831, "docstrings"]], "Gradients": [[838, "gradients"], [634, "gradients"], [373, "gradients"], [58, "module-ivy.data_classes.array.gradients"], [81, "module-ivy.data_classes.container.gradients"]], "Overview": [[838, "overview"], [842, "overview"]], "Example Usage of the Gradient API": [[838, "example-usage-of-the-gradient-api"]], "The ivy.execute_with_gradients() function signature": [[838, "the-ivy-execute-with-gradients-function-signature"]], "An example using ivy.execute_with_gradients()": [[838, "an-example-using-ivy-execute-with-gradients"]], "Custom Gradient Functions": [[838, "custom-gradient-functions"]], "Design of the Gradient API": [[838, "design-of-the-gradient-api"]], "Our policy on gradients": [[838, "our-policy-on-gradients"]], "Gradient APIs of frameworks": [[838, "gradient-apis-of-frameworks"]], "General Structure of Backend-specific implementations": [[838, "general-structure-of-backend-specific-implementations"]], "Framework-specific Considerations": [[838, "framework-specific-considerations"]], "Fix Failing Tests:": [[833, "fix-failing-tests"]], "Prerequirement:": [[833, "prerequirement"]], "Setting Up": [[833, "setting-up"], [818, "setting-up"]], "How to run tests": [[833, "how-to-run-tests"]], "Common Errors": [[833, "common-errors"]], "Where to ask for Help": [[833, "where-to-ask-for-help"]], "Operating Modes": [[845, "operating-modes"]], "Global Parameter Properties": [[845, "global-parameter-properties"]], "Getter: ivy.<setting> attribute": [[845, "getter-ivy-setting-attribute"]], "Setter: ivy.set_<setting> and ivy.unset_<setting> functions": [[845, "setter-ivy-set-setting-and-ivy-unset-setting-functions"]], "Exception Handling": [[832, "exception-handling"], [837, "exception-handling"]], "Ivy Exception Class": [[832, "ivy-exception-class"]], "Configurable Mode for Stack Trace": [[832, "configurable-mode-for-stack-trace"]], "Ivy func_wrapper Pruning": [[832, "ivy-func-wrapper-pruning"]], "@handle_exceptions Decorator": [[832, "handle-exceptions-decorator"]], "Consistency in Errors": [[832, "consistency-in-errors"]], "Assertion Function": [[832, "assertion-function"]], "Related Work": [[865, "related-work"]], "Ivy as a Transpiler": [[853, "ivy-as-a-transpiler"], [30, "Ivy-as-a-Transpiler"], [31, "Ivy-as-a-Transpiler"]], "Frontend Functional APIs \ud83d\udea7": [[853, "frontend-functional-apis"]], "Role of the Tracer \ud83d\udea7": [[853, "role-of-the-tracer"]], "Converting Network Models \ud83d\udea7": [[853, "converting-network-models"]], "Motivation": [[857, "motivation"]], "ivy.trace_graph()": [[862, "ivy-trace-graph"]], "Tracer API": [[862, "tracer-api"]], "Using the tracer": [[862, "using-the-tracer"]], "Eager vs lazy Compilation": [[862, "eager-vs-lazy-compilation"]], "Array caching": [[862, "array-caching"]], "Generators": [[862, "generators"]], "Stateful": [[862, "stateful"]], "Data Types": [[828, "data-types"]], "Data Type Module": [[828, "data-type-module"]], "Data Type Promotion": [[828, "data-type-promotion"]], "Precise Mode": [[828, "precise-mode"]], "Precise Promotion Table": [[828, "precise-promotion-table"]], "Non-Precise Promotion Table": [[828, "non-precise-promotion-table"]], "Arguments in other Functions": [[828, "arguments-in-other-functions"], [829, "arguments-in-other-functions"]], "Supported and Unsupported Data Types": [[828, "supported-and-unsupported-data-types"]], "Supported and Unsupported Data Types Attributes": [[828, "supported-and-unsupported-data-types-attributes"]], "Special Case": [[828, "special-case"]], "Backend Data Type Bugs": [[828, "backend-data-type-bugs"]], "Data Type Casting Modes": [[828, "data-type-casting-modes"]], "Superset Data Type Support": [[828, "superset-data-type-support"]], "Inplace Updates": [[839, "inplace-updates"]], "out argument": [[839, "out-argument"]], "copy argument": [[839, "copy-argument"]], "Views": [[839, "views"]], "Apache TVM": [[872, "apache-tvm"]], "XLA": [[872, "xla"]], "GCC": [[872, "gcc"]], "Array API Standard": [[866, "id1"]], "Table:": [[866, "table"]], "Glossary": [[856, "glossary"]], "Function Wrapping": [[837, "function-wrapping"]], "Decorator order": [[837, "decorator-order"]], "Conversion Wrappers": [[837, "conversion-wrappers"]], "Inference Wrappers": [[837, "inference-wrappers"]], "Out Argument Support": [[837, "out-argument-support"]], "Nestable Support": [[837, "nestable-support"]], "Partial Mixed Function Support": [[837, "partial-mixed-function-support"]], "Shape Conversion": [[837, "shape-conversion"]], "View Handling": [[837, "view-handling"]], "Miscellaneous Wrappers": [[837, "miscellaneous-wrappers"]], "TensorRT tensorrt": [[873, "tensorrt-tensorrt"]], "CUDA cuda": [[873, "cuda-cuda"]], "Formatting": [[834, "formatting"]], "Lint Checks": [[834, "lint-checks"], [834, "id2"]], "Setup Formatting Locally": [[834, "setup-formatting-locally"]], "Pre-commit": [[834, "pre-commit"]], "VS Code": [[834, "vs-code"]], "PyCharm": [[834, "pycharm"], [818, "pycharm"]], "Common Issues with Pre-Commit": [[834, "common-issues-with-pre-commit"]], "Continuous Integration": [[834, "continuous-integration"], [827, "continuous-integration"]], "Lint Formatting": [[834, "lint-formatting"]], "Docstring Examples": [[830, "docstring-examples"]], "ivy.tan": [[830, "ivy-tan"]], "ivy.roll": [[830, "ivy-roll"]], "ivy.add": [[830, "ivy-add"]], "Ivy Container": [[851, "ivy-container"]], "Construction": [[851, "construction"]], "Representation": [[851, "representation"]], "Recursive Methods": [[851, "recursive-methods"]], "Built-ins": [[851, "built-ins"]], "Access": [[851, "access"]], "Saving and Loading": [[851, "saving-and-loading"]], "Comparisons": [[851, "comparisons"]], "Customized Representations": [[851, "customized-representations"]], "Use Cases": [[851, "use-cases"]], "Compartmentalization": [[851, "compartmentalization"]], "Configuration": [[851, "configuration"]], "Data loading": [[851, "data-loading"]], "Network weights": [[851, "network-weights"]], "Standardization": [[859, "standardization"]], "Skepticism": [[859, "skepticism"]], "Complimentary vs Competitive": [[859, "complimentary-vs-competitive"]], "Do Standards Work?": [[859, "do-standards-work"]], "The Array API Standard": [[859, "the-array-api-standard"]], "Function Types": [[836, "function-types"]], "Primary Functions": [[836, "primary-functions"]], "Compositional Functions": [[836, "compositional-functions"]], "Mixed Functions": [[836, "mixed-functions"]], "Partial Mixed Functions": [[836, "partial-mixed-functions"]], "Standalone Functions": [[836, "standalone-functions"]], "Nestable Functions": [[836, "nestable-functions"], [835, "nestable-functions"], [826, "nestable-functions"]], "Convenience Functions": [[836, "convenience-functions"]], "Design": [[847, "design"]], "LLVM": [[867, "id1"]], "MLIR": [[867, "id2"]], "OneAPI": [[867, "id3"]], "Why Unify?": [[860, "why-unify"]], "No More Re-implementations \ud83d\udea7": [[860, "no-more-re-implementations"]], "\u201cInfinite\u201d Shelf-Life \u2705": [[860, "infinite-shelf-life"]], "MATLAB matlab": [[869, "matlab-matlab"]], "SciPy scipy": [[869, "scipy-scipy"]], "Torch torch": [[869, "torch-torch"]], "NumPy numpy": [[869, "numpy-numpy"]], "SciKit Learn scikit-learn": [[869, "scikit-learn-scikit-learn"]], "Theano theano": [[869, "theano-theano"]], "Pandas pandas": [[869, "pandas-pandas"]], "Julia julia": [[869, "julia-julia"]], "Apache Spark MLlib apache-spark-mllib": [[869, "apache-spark-mllib-apache-spark-mllib"]], "Caffe caffe": [[869, "caffe-caffe"]], "Chainer chainer": [[869, "chainer-chainer"]], "TensorFlow 1 tensorflow-1": [[869, "tensorflow-1-tensorflow-1"]], "MXNet mxnet": [[869, "mxnet-mxnet"]], "CNTK cntk": [[869, "cntk-cntk"]], "PyTorch pytorch": [[869, "pytorch-pytorch"]], "Flux flux": [[869, "flux-flux"]], "JAX jax": [[869, "jax-jax"]], "TensorFlow 2 tensorflow-2": [[869, "tensorflow-2-tensorflow-2"]], "DEX Language dex-language": [[869, "dex-language-dex-language"]], "Superset Behaviour": [[846, "superset-behaviour"]], "Extending the Standard": [[846, "extending-the-standard"]], "What is the Superset?": [[846, "what-is-the-superset"]], "A Non-Duplicate Superset": [[846, "a-non-duplicate-superset"]], "What is not the Superset?": [[846, "what-is-not-the-superset"]], "Balancing Generalization with Efficiency": [[846, "balancing-generalization-with-efficiency"]], "More Examples": [[846, "more-examples"]], "Maximizing Usage of Native Functionality": [[846, "maximizing-usage-of-native-functionality"]], "Devices": [[829, "devices"]], "Device Module": [[829, "device-module"]], "Device handling": [[829, "device-handling"]], "Quansight": [[871, "id1"]], "Modular": [[871, "id2"]], "OctoML": [[871, "id3"]], "tf.Graph": [[870, "tf-graph"]], "Jaxpr": [[870, "jaxpr"]], "torch.jit": [[870, "torch-jit"]], "torch.fx": [[870, "torch-fx"]], "Ivy as a Framework": [[849, "ivy-as-a-framework"], [30, "Ivy-as-a-Framework"]], "Navigating the Code": [[844, "navigating-the-code"]], "Categorization": [[844, "categorization"]], "Submodule Design": [[844, "submodule-design"]], "Ivy API": [[844, "ivy-api"]], "Backend API": [[844, "backend-api"]], "Submodule Helper Functions": [[844, "submodule-helper-functions"]], "Version Unpinning": [[844, "version-unpinning"]], "Ivy-Lint: Ivy\u2019s Custom Code Formatters": [[842, "ivy-lint-ivy-s-custom-code-formatters"]], "Existing Formatters": [[842, "existing-formatters"]], "FunctionOrderingFormatter": [[842, "functionorderingformatter"]], "How the Formatter Works:": [[842, "how-the-formatter-works"]], "Integration and Usage": [[842, "integration-and-usage"]], "Contribution": [[842, "contribution"]], "Round Up": [[842, "round-up"], [44, "Round-Up"], [34, "Round-Up"], [33, "Round-Up"], [31, "Round-Up"], [37, "Round-Up"], [17, "Round-Up"], [32, "Round-Up"], [36, "Round-Up"], [15, "Round-Up"], [25, "Round-Up"], [22, "Round-Up"], [23, "Round-Up"], [26, "Round-Up"], [35, "Round-Up"], [24, "Round-Up"], [21, "Round-Up"], [27, "Round-Up"]], "Ivy Array": [[850, "ivy-array"], [823, "ivy-array"]], "The Array Class": [[850, "the-array-class"]], "Unifying Operators": [[850, "unifying-operators"]], "API Monkey Patching": [[850, "api-monkey-patching"]], "Instance Methods": [[850, "instance-methods"]], "ML Explosion": [[858, "ml-explosion"]], "Ivy Stateful API": [[852, "ivy-stateful-api"], [30, "Ivy-Stateful-API"], [21, "Ivy-Stateful-API"]], "Modules": [[852, "modules"]], "Initializers": [[852, "initializers"], [790, "module-ivy.stateful.initializers"]], "Optimizers": [[852, "optimizers"], [795, "module-ivy.stateful.optimizers"]], "ONNX onnx": [[868, "onnx-onnx"]], "NNEF nnef": [[868, "nnef-nnef"]], "CoreML coreml": [[868, "coreml-coreml"]], "Function Arguments": [[835, "function-arguments"]], "Positional and Keyword Arguments": [[835, "positional-and-keyword-arguments"]], "Input Arrays": [[835, "input-arrays"]], "out Argument": [[835, "out-argument"]], "dtype and device arguments": [[835, "dtype-and-device-arguments"]], "Numbers in Operator Functions": [[835, "numbers-in-operator-functions"]], "Integer Sequences": [[835, "integer-sequences"]], "FAQ": [[854, "faq"]], "Maintaining Backend Versions": [[854, "maintaining-backend-versions"]], "Dynamic Sizes": [[854, "dynamic-sizes"]], "Type and Shape Checking": [[854, "type-and-shape-checking"]], "GPU handling": [[854, "gpu-handling"]], "Model Deployment": [[854, "model-deployment"]], "Dynamic Control Flow": [[854, "dynamic-control-flow"]], "Auto-Differentiation": [[854, "auto-differentiation"]], "Replicas, and Data vs Model Parallelism": [[854, "replicas-and-data-vs-model-parallelism"]], "Support for Functions": [[854, "support-for-functions"]], "Alternative Data Structures": [[854, "alternative-data-structures"]], "Custom Operations": [[854, "custom-operations"]], "The Pipeline": [[854, "the-pipeline"]], "State": [[854, "state"]], "ivy.transpile()": [[863, "ivy-transpile"]], "Transpiler API": [[863, "transpiler-api"]], "Using the transpiler": [[863, "using-the-transpiler"]], "Transpiling functions": [[863, "transpiling-functions"]], "Transpiling Libraries": [[863, "transpiling-libraries"]], "Transpiling Modules": [[863, "transpiling-modules"]], "Ivy Tests": [[843, "ivy-tests"], [827, "ivy-tests"]], "Testing Pipeline": [[843, "testing-pipeline"]], "Hypothesis": [[843, "id2"]], "Data Generation": [[843, "id3"]], "Writing your own strategy": [[843, "writing-your-own-strategy"]], "Writing Hypothesis Tests": [[843, "writing-hypothesis-tests"]], "Ivy Test Decorators": [[843, "ivy-test-decorators"]], "Writing Ivy Tests": [[843, "writing-ivy-tests"]], "Integration of Strategies into Ivy Tests": [[843, "integration-of-strategies-into-ivy-tests"]], "Adding Explicit Examples to tests": [[843, "adding-explicit-examples-to-tests"]], "Why do we need helper functions?": [[843, "why-do-we-need-helper-functions"]], "How to write Hypothesis Tests effectively": [[843, "how-to-write-hypothesis-tests-effectively"]], "Testing Partial Mixed Functions": [[843, "testing-partial-mixed-functions"]], "Bonus: Hypothesis\u2019 Extended Features": [[843, "bonus-hypothesis-extended-features"]], "Self-Consistent and Explicit Testing": [[843, "self-consistent-and-explicit-testing"]], "test_array_function": [[843, "id5"]], "Running Ivy Tests": [[843, "running-ivy-tests"]], "Re-Running Failed Ivy Tests": [[843, "re-running-failed-ivy-tests"]], "Get Started": [[855, "get-started"]], "Installing using pip": [[855, "installing-using-pip"]], "Docker": [[855, "docker"]], "Installing from source": [[855, "installing-from-source"]], "Ivy\u2019s tracer and transpiler": [[855, "ivy-s-tracer-and-transpiler"]], "Ivy Folder": [[855, "ivy-folder"]], "Setting Up the API key": [[855, "setting-up-the-api-key"]], "Issues and Questions": [[855, "issues-and-questions"]], "Ivy Frontends": [[840, "ivy-frontends"]], "The Frontend Basics": [[840, "the-frontend-basics"]], "Writing Frontend Functions": [[840, "writing-frontend-functions"]], "Short Frontend Implementations": [[840, "short-frontend-implementations"]], "Unused Arguments": [[840, "unused-arguments"]], "Supported Data Types and Devices": [[840, "supported-data-types-and-devices"]], "Classes and Instance Methods": [[840, "classes-and-instance-methods"]], "Frontend Data Type Promotion Rules": [[840, "frontend-data-type-promotion-rules"]], "NumPy Special Argument - Casting": [[840, "numpy-special-argument-casting"]], "Frontends Duplicate Policy": [[840, "frontends-duplicate-policy"]], "Tt tensor": [[99, "module-ivy.data_classes.factorized_tensor.tt_tensor"]], "Cp tensor": [[96, "module-ivy.data_classes.factorized_tensor.cp_tensor"]], "softplus": [[117, "softplus"]], "Base": [[105, "module-ivy.data_classes.nested_array.base"], [95, "module-ivy.data_classes.factorized_tensor.base"], [73, "module-ivy.data_classes.container.base"]], "Elementwise": [[106, "module-ivy.data_classes.nested_array.elementwise"], [631, "elementwise"], [371, "elementwise"], [78, "module-ivy.data_classes.container.elementwise"], [55, "module-ivy.data_classes.array.elementwise"]], "cmp_isnot": [[120, "cmp-isnot"]], "relu": [[114, "relu"]], "array": [[126, "array"]], "Nested array": [[104, "nested-array"]], "Container": [[102, "container"]], "sigmoid": [[115, "sigmoid"]], "if_else": [[122, "if-else"]], "gelu": [[109, "gelu"]], "Array": [[101, "array"]], "Parafac2 tensor": [[97, "module-ivy.data_classes.factorized_tensor.parafac2_tensor"]], "log_softmax": [[112, "log-softmax"]], "try_except": [[123, "try-except"]], "Tr tensor": [[98, "module-ivy.data_classes.factorized_tensor.tr_tensor"]], "Tucker tensor": [[100, "module-ivy.data_classes.factorized_tensor.tucker_tensor"]], "empty_like": [[130, "empty-like"]], "from_dlpack": [[132, "from-dlpack"]], "Functions": [[108, "functions"]], "eye": [[131, "eye"]], "Factorized tensor": [[103, "factorized-tensor"]], "linspace": [[136, "linspace"]], "Utility": [[93, "module-ivy.data_classes.container.utility"], [647, "utility"], [387, "utility"], [70, "module-ivy.data_classes.array.utility"]], "full_like": [[135, "full-like"]], "softsign": [[118, "softsign"]], "cmp_is": [[119, "cmp-is"]], "hardswish": [[110, "hardswish"]], "logspace": [[137, "logspace"]], "Data classes": [[107, "data-classes"]], "while_loop": [[124, "while-loop"]], "for_loop": [[121, "for-loop"]], "mish": [[113, "mish"]], "softmax": [[116, "softmax"]], "arange": [[125, "arange"]], "copy_array": [[128, "copy-array"]], "frombuffer": [[133, "frombuffer"]], "asarray": [[127, "asarray"]], "full": [[134, "full"]], "leaky_relu": [[111, "leaky-relu"]], "empty": [[129, "empty"]], "Wrapping": [[94, "module-ivy.data_classes.container.wrapping"], [71, "module-ivy.data_classes.array.wrapping"]], "Statistical": [[92, "module-ivy.data_classes.container.statistical"], [646, "statistical"], [386, "statistical"], [69, "module-ivy.data_classes.array.statistical"]], "General helpers": [[777, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers"]], "prod": [[762, "prod"]], "Dtype helpers": [[776, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers"]], "Function testing": [[772, "module-ivy_tests.test_ivy.helpers.function_testing"]], "sort": [[755, "sort"]], "Structs": [[781, "module-ivy_tests.test_ivy.helpers.structs"]], "argsort": [[752, "argsort"]], "argmax": [[743, "argmax"]], "std": [[763, "std"]], "Multiprocessing": [[779, "module-ivy_tests.test_ivy.helpers.multiprocessing"]], "random_uniform": [[740, "random-uniform"]], "min": [[761, "min"]], "unique_counts": [[749, "unique-counts"]], "Data-dependent output shape": [[749, null], [751, null], [748, null], [750, null], [644, null], [644, null], [644, null], [644, null]], "Assertions": [[770, "module-ivy_tests.test_ivy.helpers.assertions"], [797, "module-ivy.utils.assertions"]], "Array helpers": [[775, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers"]], "random_normal": [[739, "random-normal"]], "shuffle": [[742, "shuffle"]], "cumprod": [[756, "cumprod"]], "nonzero": [[746, "nonzero"]], "einsum": [[758, "einsum"]], "var": [[765, "var"]], "unique_values": [[751, "unique-values"]], "Number helpers": [[778, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers"]], "where": [[747, "where"]], "Pipeline helper": [[780, "module-ivy_tests.test_ivy.helpers.pipeline_helper"]], "Available frameworks": [[771, "module-ivy_tests.test_ivy.helpers.available_frameworks"]], "randint": [[738, "randint"]], "searchsorted": [[754, "searchsorted"]], "multinomial": [[737, "multinomial"]], "seed": [[741, "seed"]], "any": [[767, "any"]], "cumsum": [[757, "cumsum"]], "layer_norm": [[736, "layer-norm"]], "Globals": [[773, "module-ivy_tests.test_ivy.helpers.globals"]], "argmin": [[744, "argmin"]], "Hypothesis helpers": [[774, "hypothesis-helpers"]], "save": [[769, "save"]], "msort": [[753, "msort"]], "sum": [[764, "sum"]], "all": [[766, "all"]], "mean": [[760, "mean"]], "argwhere": [[745, "argwhere"]], "unique_all": [[748, "unique-all"]], "max": [[759, "max"]], "unique_inverse": [[750, "unique-inverse"]], "load": [[768, "load"]], "Profiler": [[809, "module-ivy.utils.profiler"]], "Ast helpers": [[799, "module-ivy.utils.backend.ast_helpers"]], "Backend Setting": [[824, "backend-setting"]], "Dynamic Backend Setting": [[824, "dynamic-backend-setting"]], "Backend and Frontend Version Support": [[824, "backend-and-frontend-version-support"]], "Building the Docs": [[813, "building-the-docs"]], "Building the Docs using Docker": [[813, "building-the-docs-using-docker"]], "Using convenience script": [[813, "using-convenience-script"]], "Using existing image on Docker Hub": [[813, "using-existing-image-on-docker-hub"]], "Building the image locally": [[813, "building-the-image-locally"]], "Building the Docs without Docker": [[813, "building-the-docs-without-docker"]], "Dynamic import": [[803, "module-ivy.utils.dynamic_import"]], "Commit (Push/PR) Triggered Testing": [[827, "commit-push-pr-triggered-testing"]], "Implementation": [[827, "implementation"]], "A Top-Down View": [[827, "a-top-down-view"]], "Storing (and retrieving) the Mapping": [[827, "storing-and-retrieving-the-mapping"]], "Cloning and Pushing to the Repository": [[827, "cloning-and-pushing-to-the-repository"]], "Implementational Nitty Gritties": [[827, "implementational-nitty-gritties"]], "Storage Space (unifyai/Mapping)": [[827, "storage-space-unifyai-mapping"]], "Determine Test Coverage Workflow": [[827, "determine-test-coverage-workflow"]], "Multiple Runners": [[827, "multiple-runners"]], "Race Condition": [[827, "race-condition"]], "Array API Tests": [[827, "array-api-tests"], [822, "array-api-tests"]], "Periodic Testing": [[827, "periodic-testing"]], "Manually Dispatched Workflows": [[827, "manually-dispatched-workflows"]], "CI Pipeline \u27a1\ufe0f": [[827, "ci-pipeline"]], "Push": [[827, "push"]], "Pull Request": [[827, "pull-request"]], "Dashboard": [[827, "dashboard"]], "Testing helpers": [[783, "module-ivy_tests.test_ivy.helpers.testing_helpers"]], "Error Handling": [[815, "error-handling"]], "Sub backend handler": [[801, "module-ivy.utils.backend.sub_backend_handler"]], "Contributing": [[812, "contributing"], [811, "contributing"]], "Converters": [[788, "module-ivy.stateful.converters"]], "Deep Dive": [[821, "deep-dive"]], "Inspection": [[807, "module-ivy.utils.inspection"]], "Testing": [[786, "testing"], [44, "Testing"]], "Helpful Resources": [[816, "helpful-resources"]], "Logging": [[808, "module-ivy.utils.logging"]], "Forking and cloning the repo": [[818, "forking-and-cloning-the-repo"]], "Pre-Commit": [[818, "pre-commit"]], "Virtual environments - No Docker": [[818, "virtual-environments-no-docker"]], "Using miniconda": [[818, "using-miniconda"]], "Using venv": [[818, "using-venv"]], "Docker Interpreter with PyCharm": [[818, "docker-interpreter-with-pycharm"]], "Windows": [[818, "windows"], [818, "id6"]], "MacOS": [[818, "macos"]], "Ubuntu": [[818, "ubuntu"], [818, "id8"]], "Setting Up Testing in PyCharm": [[818, "setting-up-testing-in-pycharm"]], "More Detailed Hypothesis Logs in PyCharm": [[818, "more-detailed-hypothesis-logs-in-pycharm"]], "Setting up for Free": [[818, "setting-up-for-free"]], "WSL": [[818, "wsl"]], "GitHub Codespaces": [[818, "github-codespaces"]], "The Binaries": [[818, "the-binaries"]], "Framework classes": [[784, "framework-classes"]], "Einsum parser": [[804, "module-ivy.utils.einsum_parser"]], "Helpers": [[789, "module-ivy.stateful.helpers"]], "Verbosity": [[810, "module-ivy.utils.verbosity"]], "Building the Docs Pipeline": [[825, "building-the-docs-pipeline"]], "How the doc-builder is being run": [[825, "how-the-doc-builder-is-being-run"]], "The convenience script": [[825, "the-convenience-script"]], "Options": [[825, "options"]], "The Docker image": [[825, "the-docker-image"]], "How Ivy\u2019s docs is structured": [[825, "how-ivy-s-docs-is-structured"]], "index.rst": [[825, "index-rst"]], "partial_conf.py": [[825, "partial-conf-py"]], "prebuild.sh": [[825, "prebuild-sh"]], "Custom Extensions": [[825, "custom-extensions"]], "custom_autosummary": [[825, "custom-autosummary"]], ":hide-table:": [[825, "hide-table"]], "discussion_linker": [[825, "discussion-linker"]], "skippable_function": [[825, "skippable-function"]], "ivy_data": [[825, "ivy-data"]], "Status": [[811, "status"]], "Unified AI": [[811, "unified-ai"]], "Getting started": [[811, "getting-started"]], "Installing ivy": [[811, "installing-ivy"]], "Using Ivy": [[811, "using-ivy"]], "Documentation": [[811, "documentation"]], "Community": [[811, "community"]], "Citation": [[811, "citation"]], "Exceptions": [[806, "module-ivy.utils.exceptions"]], "Handler": [[800, "module-ivy.utils.backend.handler"]], "Norms": [[794, "module-ivy.stateful.norms"], [641, "norms"], [380, "norms"], [64, "module-ivy.data_classes.array.norms"], [87, "module-ivy.data_classes.container.norms"]], "Containers": [[826, "containers"]], "Container Instance Methods": [[826, "container-instance-methods"]], "API Instance Methods": [[826, "api-instance-methods"]], "API Special Methods": [[826, "api-special-methods"]], "Activations": [[787, "module-ivy.stateful.activations"], [625, "activations"], [366, "activations"], [72, "module-ivy.data_classes.container.activations"], [50, "module-ivy.data_classes.array.activations"]], "Parameter": [[787, "parameter"], [787, "id1"], [578, "parameter"], [583, "parameter"], [587, "parameter"], [584, "parameter"], [577, "parameter"], [586, "parameter"], [633, "parameter"], [633, "id1"], [633, "id2"], [633, "id3"], [633, "id4"], [633, "id5"], [630, "parameter"], [209, "parameter"]], "Contributor Rewards": [[814, "contributor-rewards"]], "Badges": [[814, "badges"]], "Badge Tiers": [[814, "badge-tiers"]], "Layers": [[791, "module-ivy.stateful.layers"], [635, "layers"], [374, "layers"], [83, "module-ivy.data_classes.container.layers"], [60, "module-ivy.data_classes.array.layers"]], "Test parameter flags": [[782, "module-ivy_tests.test_ivy.helpers.test_parameter_flags"]], "Running the Tests": [[822, "running-the-tests"]], "Using Terminal": [[822, "using-terminal"]], "Using the IDE": [[822, "using-the-ide"]], "Regenerating Test Failures": [[822, "regenerating-test-failures"]], "Test Skipping": [[822, "test-skipping"]], "Arrays": [[823, "arrays"]], "Native Array": [[823, "native-array"]], "Array Handling": [[823, "array-handling"]], "Integrating custom classes with Ivy": [[823, "integrating-custom-classes-with-ivy"]], "Utils": [[785, "utils"]], "The Basics": [[819, "the-basics"]], "Getting Help": [[819, "getting-help"]], "ToDo List Issues": [[819, "todo-list-issues"]], "Managing Your Fork": [[819, "managing-your-fork"]], "Who To Ask": [[819, "who-to-ask"]], "With Command Line:": [[819, "with-command-line"]], "With Browser:": [[819, "with-browser"]], "Pull Requests": [[819, "pull-requests"]], "Small Commits Often": [[819, "small-commits-often"]], "Interactive Ivy Docker Container": [[819, "interactive-ivy-docker-container"]], "Running Tests Locally": [[819, "running-tests-locally"]], "With Docker": [[819, "with-docker"]], "Getting the most out of IDE": [[819, "getting-the-most-out-of-ide"]], "with PyCharm": [[819, "with-pycharm"]], "Backend": [[798, "backend"]], "Binaries": [[802, "module-ivy.utils.binaries"]], "Open Tasks": [[817, "open-tasks"]], "Fixing Failing Tests": [[817, "fixing-failing-tests"]], "How to Contribute": [[817, "how-to-contribute"]], "Frontend APIs": [[817, "frontend-apis"]], "Where to place a frontend function": [[817, "where-to-place-a-frontend-function"]], "Frontend checklist": [[817, "frontend-checklist"]], "Function Formatting": [[817, "function-formatting"]], "Formatting checklist": [[817, "formatting-checklist"]], "Ivy Experimental API": [[817, "ivy-experimental-api"]], "Extending the Ivy API": [[817, "extending-the-ivy-api"]], "Where to place a backend function": [[817, "where-to-place-a-backend-function"]], "Creating an Issue on Ivy\u2019s GitHub using a Template": [[817, "creating-an-issue-on-ivy-s-github-using-a-template"]], "Module": [[793, "module-ivy.stateful.module"]], "Einsum path helpers": [[805, "module-ivy.utils.einsum_path_helpers"]], "Losses": [[792, "module-ivy.stateful.losses"], [637, "losses"], [376, "losses"], [85, "module-ivy.data_classes.container.losses"], [62, "module-ivy.data_classes.array.losses"]], "Sequential": [[796, "module-ivy.stateful.sequential"]], "Contributor Program": [[820, "contributor-program"]], "Contributor": [[820, "contributor"]], "Core Contributor": [[820, "core-contributor"]], "Rising Contributor": [[820, "rising-contributor"]], "Top Contributor": [[820, "top-contributor"]], "repeat": [[704, "repeat"]], "reshape": [[705, "reshape"]], "prune_nest_at_index": [[732, "prune-nest-at-index"]], "sparse_cross_entropy": [[697, "sparse-cross-entropy"]], "flip": [[702, "flip"]], "prune_nest_at_indices": [[733, "prune-nest-at-indices"]], "clip": [[698, "clip"]], "nested_any": [[727, "nested-any"]], "prune_empty": [[731, "prune-empty"]], "map_nest_at_index": [[724, "map-nest-at-index"]], "fomaml_step": [[714, "fomaml-step"]], "set_nest_at_indices": [[735, "set-nest-at-indices"]], "multi_index_nest": [[726, "multi-index-nest"]], "tile": [[711, "tile"]], "cross_entropy": [[696, "cross-entropy"]], "nested_map": [[729, "nested-map"]], "roll": [[706, "roll"]], "map": [[723, "map"]], "concat": [[699, "concat"]], "swapaxes": [[710, "swapaxes"]], "duplicate_array_index_chains": [[719, "duplicate-array-index-chains"]], "vector_norm": [[693, "vector-norm"]], "zero_pad": [[713, "zero-pad"]], "vector_to_skew_symmetric_matrix": [[694, "vector-to-skew-symmetric-matrix"]], "split": [[707, "split"]], "index_nest": [[720, "index-nest"]], "set_nest_at_index": [[734, "set-nest-at-index"]], "vecdot": [[692, "vecdot"]], "nested_multi_map": [[730, "nested-multi-map"]], "unstack": [[712, "unstack"]], "insert_into_nest_at_indices": [[722, "insert-into-nest-at-indices"]], "maml_step": [[715, "maml-step"]], "reptile_step": [[716, "reptile-step"]], "nested_argwhere": [[728, "nested-argwhere"]], "stack": [[709, "stack"]], "permute_dims": [[703, "permute-dims"]], "trace": [[690, "trace"]], "vander": [[691, "vander"]], "binary_cross_entropy": [[695, "binary-cross-entropy"]], "constant_pad": [[700, "constant-pad"]], "squeeze": [[708, "squeeze"]], "insert_into_nest_at_index": [[721, "insert-into-nest-at-index"]], "expand_dims": [[701, "expand-dims"]], "all_nested_indices": [[717, "all-nested-indices"]], "copy_nest": [[718, "copy-nest"]], "map_nest_at_indices": [[725, "map-nest-at-indices"]], "lstm_update": [[661, "lstm-update"]], "inner": [[674, "inner"]], "matrix_norm": [[677, "matrix-norm"]], "roi_align": [[664, "roi-align"]], "conv_general_dilated": [[655, "conv-general-dilated"]], "linear": [[659, "linear"]], "pinv": [[682, "pinv"]], "tensorsolve": [[689, "tensorsolve"]], "scaled_dot_product_attention": [[665, "scaled-dot-product-attention"]], "nms": [[663, "nms"]], "cross": [[667, "cross"]], "Sorting": [[645, "sorting"], [384, "sorting"], [68, "module-ivy.data_classes.array.sorting"], [91, "module-ivy.data_classes.container.sorting"]], "eigh": [[672, "eigh"]], "matmul": [[676, "matmul"]], "eigvalsh": [[673, "eigvalsh"]], "matrix_transpose": [[680, "matrix-transpose"]], "depthwise_conv2d": [[657, "depthwise-conv2d"]], "matrix_power": [[678, "matrix-power"]], "svd": [[686, "svd"]], "conv_general_transpose": [[656, "conv-general-transpose"]], "multi_head_attention": [[662, "multi-head-attention"]], "tensordot": [[688, "tensordot"]], "eig": [[671, "eig"], [428, "eig"]], "diagonal": [[670, "diagonal"]], "cholesky": [[666, "cholesky"]], "conv2d_transpose": [[652, "conv2d-transpose"]], "svdvals": [[687, "svdvals"]], "solve": [[685, "solve"]], "conv2d": [[651, "conv2d"]], "matrix_rank": [[679, "matrix-rank"]], "conv3d_transpose": [[654, "conv3d-transpose"]], "inv": [[675, "inv"]], "conv": [[648, "conv"]], "slogdet": [[684, "slogdet"]], "conv1d_transpose": [[650, "conv1d-transpose"]], "det": [[668, "det"]], "lstm": [[660, "lstm"]], "conv3d": [[653, "conv3d"]], "Set": [[644, "set"], [383, "module-ivy.functional.ivy.experimental.set"], [67, "module-ivy.data_classes.array.set"], [90, "module-ivy.data_classes.container.set"]], "outer": [[681, "outer"]], "qr": [[683, "qr"]], "diag": [[669, "diag"]], "conv1d": [[649, "conv1d"]], "dropout": [[658, "dropout"]], "shape": [[589, "shape"]], "inplace_variables_supported": [[562, "inplace-variables-supported"]], "inplace_increment": [[560, "inplace-increment"]], "scatter_flat": [[575, "scatter-flat"]], "is_array": [[563, "is-array"]], "set_min_base": [[581, "set-min-base"]], "get_item": [[554, "get-item"]], "set_exception_trace_mode": [[578, "set-exception-trace-mode"]], "to_native_shape": [[597, "to-native-shape"]], "get_all_arrays_in_memory": [[553, "get-all-arrays-in-memory"]], "is_native_array": [[567, "is-native-array"]], "get_num_dims": [[555, "get-num-dims"]], "set_inplace_mode": [[579, "set-inplace-mode"]], "set_nestable_mode": [[583, "set-nestable-mode"]], "match_kwargs": [[571, "match-kwargs"]], "set_show_func_wrapper_trace_mode": [[587, "set-show-func-wrapper-trace-mode"]], "scatter_nd": [[576, "scatter-nd"]], "isscalar": [[569, "isscalar"]], "num_arrays_in_memory": [[573, "num-arrays-in-memory"]], "strides": [[593, "strides"]], "to_list": [[596, "to-list"]], "to_ivy_shape": [[595, "to-ivy-shape"]], "is_ivy_container": [[565, "is-ivy-container"]], "set_item": [[580, "set-item"]], "inplace_update": [[561, "inplace-update"]], "isin": [[568, "isin"]], "get_referrers_recursive": [[556, "get-referrers-recursive"]], "set_precise_mode": [[584, "set-precise-mode"]], "set_queue_timeout": [[585, "set-queue-timeout"]], "is_ivy_array": [[564, "is-ivy-array"]], "size": [[590, "size"]], "set_min_denominator": [[582, "set-min-denominator"]], "stable_divide": [[591, "stable-divide"]], "inplace_arrays_supported": [[558, "inplace-arrays-supported"]], "print_all_arrays_in_memory": [[574, "print-all-arrays-in-memory"]], "gather_nd": [[552, "gather-nd"]], "set_tmp_dir": [[588, "set-tmp-dir"]], "set_array_mode": [[577, "set-array-mode"]], "set_shape_array_mode": [[586, "set-shape-array-mode"]], "stable_pow": [[592, "stable-pow"]], "multiprocessing": [[572, "multiprocessing"]], "has_nans": [[557, "has-nans"]], "is_ivy_nested_array": [[566, "is-ivy-nested-array"]], "itemsize": [[570, "itemsize"]], "supports_inplace_updates": [[594, "supports-inplace-updates"]], "inplace_decrement": [[559, "inplace-decrement"]], "nanprod": [[530, "nanprod"]], "current_backend_str": [[542, "current-backend-str"]], "lexsort": [[514, "lexsort"]], "poisson": [[511, "poisson"]], "arg_names": [[535, "arg-names"]], "unravel_index": [[512, "unravel-index"]], "native_sparse_array_to_indices_values_and_shape": [[518, "native-sparse-array-to-indices-values-and-shape"]], "cummax": [[522, "cummax"]], "einops_rearrange": [[544, "einops-rearrange"]], "clip_vector_norm": [[540, "clip-vector-norm"]], "clip_matrix_norm": [[539, "clip-matrix-norm"]], "is_ivy_sparse_array": [[515, "is-ivy-sparse-array"]], "function_supported_devices_and_dtypes": [[549, "function-supported-devices-and-dtypes"]], "assert_supports_inplace": [[537, "assert-supports-inplace"]], "nanmin": [[529, "nanmin"]], "quantile": [[531, "quantile"]], "dirichlet": [[509, "dirichlet"]], "invert_permutation": [[513, "invert-permutation"]], "nanmean": [[527, "nanmean"]], "gamma": [[510, "gamma"]], "arg_info": [[534, "arg-info"]], "einops_reduce": [[545, "einops-reduce"]], "fourier_encode": [[548, "fourier-encode"]], "einops_repeat": [[546, "einops-repeat"]], "corrcoef": [[520, "corrcoef"]], "bernoulli": [[507, "bernoulli"]], "default": [[543, "default"]], "all_equal": [[533, "all-equal"]], "gather": [[551, "gather"]], "is_native_sparse_array": [[516, "is-native-sparse-array"]], "cummin": [[523, "cummin"]], "igamma": [[525, "igamma"]], "histogram": [[524, "histogram"]], "nanmedian": [[528, "nanmedian"]], "function_unsupported_devices_and_dtypes": [[550, "function-unsupported-devices-and-dtypes"]], "median": [[526, "median"]], "array_equal": [[536, "array-equal"]], "optional_get_element": [[532, "optional-get-element"]], "container_types": [[541, "container-types"]], "exists": [[547, "exists"]], "native_sparse_array": [[517, "native-sparse-array"]], "bincount": [[519, "bincount"]], "beta": [[508, "beta"]], "cov": [[521, "cov"]], "cache_fn": [[538, "cache-fn"]], "lp_normalize": [[506, "lp-normalize"]], "dsplit": [[469, "dsplit"]], "matricize": [[481, "matricize"]], "check_scalar": [[465, "check-scalar"]], "concat_from_sequence": [[468, "concat-from-sequence"]], "fold": [[476, "fold"]], "fliplr": [[474, "fliplr"]], "pad": [[483, "pad"]], "fill_diagonal": [[472, "fill-diagonal"]], "atleast_3d": [[463, "atleast-3d"]], "moveaxis": [[482, "moveaxis"]], "i0": [[480, "i0"]], "associative_scan": [[460, "associative-scan"]], "vsplit": [[498, "vsplit"]], "column_stack": [[467, "column-stack"]], "dstack": [[470, "dstack"]], "hsplit": [[478, "hsplit"]], "l1_normalize": [[503, "l1-normalize"]], "partial_tensor_to_vec": [[485, "partial-tensor-to-vec"]], "top_k": [[493, "top-k"]], "flipud": [[475, "flipud"]], "choose": [[466, "choose"]], "put_along_axis": [[488, "put-along-axis"]], "trim_zeros": [[494, "trim-zeros"]], "instance_norm": [[502, "instance-norm"]], "l2_normalize": [[504, "l2-normalize"]], "expand": [[471, "expand"]], "rot90": [[489, "rot90"]], "unique_consecutive": [[497, "unique-consecutive"]], "vstack": [[499, "vstack"]], "heaviside": [[477, "heaviside"]], "atleast_2d": [[462, "atleast-2d"]], "unfold": [[496, "unfold"]], "batch_norm": [[500, "batch-norm"]], "group_norm": [[501, "group-norm"]], "unflatten": [[495, "unflatten"]], "flatten": [[473, "flatten"]], "take_along_axis": [[492, "take-along-axis"]], "broadcast_shapes": [[464, "broadcast-shapes"]], "hstack": [[479, "hstack"]], "soft_thresholding": [[490, "soft-thresholding"]], "atleast_1d": [[461, "atleast-1d"]], "partial_vec_to_tensor": [[487, "partial-vec-to-tensor"]], "partial_fold": [[484, "partial-fold"]], "take": [[491, "take"]], "local_response_norm": [[505, "local-response-norm"]], "partial_unfold": [[486, "partial-unfold"]], "unset_show_func_wrapper_trace_mode": [[610, "unset-show-func-wrapper-trace-mode"]], "lars_update": [[621, "lars-update"]], "jac": [[619, "jac"]], "vmap": [[613, "vmap"]], "unset_min_base": [[604, "unset-min-base"]], "Random": [[642, "random"], [381, "random"], [65, "module-ivy.data_classes.array.random"], [88, "module-ivy.data_classes.container.random"]], "Data type": [[629, "data-type"], [369, "module-ivy.functional.ivy.experimental.data_type"], [76, "module-ivy.data_classes.container.data_type"], [53, "module-ivy.data_classes.array.data_type"]], "unset_inplace_mode": [[603, "unset-inplace-mode"]], "lamb_update": [[620, "lamb-update"]], "unset_exception_trace_mode": [[602, "unset-exception-trace-mode"]], "unset_nestable_mode": [[606, "unset-nestable-mode"]], "gradient_descent_update": [[618, "gradient-descent-update"]], "stop_gradient": [[623, "stop-gradient"]], "Manipulation": [[638, "manipulation"], [377, "manipulation"], [63, "module-ivy.data_classes.array.manipulation"], [86, "module-ivy.data_classes.container.manipulation"]], "try_else_none": [[600, "try-else-none"]], "unset_min_denominator": [[605, "unset-min-denominator"]], "to_scalar": [[599, "to-scalar"]], "General": [[633, "general"], [372, "general"], [57, "module-ivy.data_classes.array.general"], [80, "module-ivy.data_classes.container.general"]], "unset_tmp_dir": [[611, "unset-tmp-dir"]], "optimizer_update": [[622, "optimizer-update"]], "unset_precise_mode": [[607, "unset-precise-mode"]], "unset_array_mode": [[601, "unset-array-mode"]], "adam_update": [[615, "adam-update"]], "Meta": [[639, "meta"], [378, "module-ivy.functional.ivy.experimental.meta"]], "Device": [[630, "device"], [370, "module-ivy.functional.ivy.experimental.device"], [54, "module-ivy.data_classes.array.device"], [77, "module-ivy.data_classes.container.device"]], "Experimental": [[632, "experimental"], [79, "module-ivy.data_classes.container.experimental"], [56, "module-ivy.data_classes.array.experimental"]], "Nest": [[640, "nest"], [379, "module-ivy.functional.ivy.experimental.nest"]], "execute_with_gradients": [[616, "execute-with-gradients"]], "unset_queue_timeout": [[608, "unset-queue-timeout"]], "adam_step": [[614, "adam-step"]], "Control flow ops": [[627, "control-flow-ops"]], "value_and_grad": [[624, "value-and-grad"]], "Searching": [[643, "searching"], [382, "searching"], [66, "module-ivy.data_classes.array.searching"], [89, "module-ivy.data_classes.container.searching"]], "to_numpy": [[598, "to-numpy"]], "unset_shape_array_mode": [[609, "unset-shape-array-mode"]], "grad": [[617, "grad"]], "Constants": [[626, "module-ivy.functional.ivy.constants"], [367, "module-ivy.functional.ivy.experimental.constants"]], "Creation": [[628, "creation"], [368, "creation"], [52, "module-ivy.data_classes.array.creation"], [75, "module-ivy.data_classes.container.creation"]], "Linear algebra": [[636, "linear-algebra"], [375, "linear-algebra"], [61, "module-ivy.data_classes.array.linear_algebra"], [84, "module-ivy.data_classes.container.linear_algebra"]], "value_is_nan": [[612, "value-is-nan"]], "make_svd_non_negative": [[439, "make-svd-non-negative"]], "multi_mode_dot": [[443, "multi-mode-dot"]], "sliding_window": [[421, "sliding-window"]], "as_strided": [[459, "as-strided"]], "higher_order_moment": [[432, "higher-order-moment"]], "multi_dot": [[442, "multi-dot"]], "solve_triangular": [[445, "solve-triangular"]], "cond": [[425, "cond"]], "general_inner_product": [[431, "general-inner-product"]], "rfftn": [[419, "rfftn"]], "tt_matrix_to_tensor": [[449, "tt-matrix-to-tensor"]], "reduce_window": [[417, "reduce-window"]], "rnn": [[420, "rnn"]], "batched_outer": [[424, "batched-outer"]], "max_unpool1d": [[414, "max-unpool1d"]], "mode_dot": [[441, "mode-dot"]], "kl_div": [[453, "kl-div"]], "soft_margin_loss": [[458, "soft-margin-loss"]], "truncated_svd": [[448, "truncated-svd"]], "eigh_tridiagonal": [[429, "eigh-tridiagonal"]], "kron": [[435, "kron"]], "lu_solve": [[438, "lu-solve"]], "matrix_exp": [[440, "matrix-exp"]], "rfft": [[418, "rfft"]], "kronecker": [[436, "kronecker"]], "hinge_embedding_loss": [[451, "hinge-embedding-loss"]], "dot": [[427, "dot"]], "poisson_nll_loss": [[456, "poisson-nll-loss"]], "partial_tucker": [[444, "partial-tucker"]], "lu_factor": [[437, "lu-factor"]], "stft": [[422, "stft"]], "initialize_tucker": [[433, "initialize-tucker"]], "nearest_interpolate": [[415, "nearest-interpolate"]], "huber_loss": [[452, "huber-loss"]], "log_poisson_loss": [[455, "log-poisson-loss"]], "smooth_l1_loss": [[457, "smooth-l1-loss"]], "pool": [[416, "pool"]], "eigvals": [[430, "eigvals"]], "tensor_train": [[447, "tensor-train"]], "svd_flip": [[446, "svd-flip"]], "l1_loss": [[454, "l1-loss"]], "khatri_rao": [[434, "khatri-rao"]], "diagflat": [[426, "diagflat"]], "adjoint": [[423, "adjoint"]], "tucker": [[450, "tucker"]], "trilu": [[328, "trilu"]], "amax": [[334, "amax"]], "unsorted_segment_min": [[330, "unsorted-segment-min"]], "random_parafac2": [[323, "random-parafac2"]], "nansum": [[355, "nansum"]], "vorbis_window": [[332, "vorbis-window"]], "random_tucker": [[326, "random-tucker"]], "float_power": [[345, "float-power"]], "nextafter": [[356, "nextafter"]], "unsorted_segment_sum": [[331, "unsorted-segment-sum"]], "unsorted_segment_mean": [[329, "unsorted-segment-mean"]], "random_cp": [[322, "random-cp"]], "sparsify_tensor": [[359, "sparsify-tensor"]], "erfc": [[342, "erfc"]], "reduce": [[362, "reduce"]], "diff": [[340, "diff"]], "lerp": [[352, "lerp"]], "ldexp": [[351, "ldexp"]], "sinc": [[358, "sinc"]], "tril_indices": [[327, "tril-indices"]], "count_nonzero": [[339, "count-nonzero"]], "modf": [[354, "modf"]], "zeta": [[361, "zeta"]], "bind_custom_gradient_function": [[363, "bind-custom-gradient-function"]], "copysign": [[338, "copysign"]], "random_tr": [[324, "random-tr"]], "erfinv": [[343, "erfinv"]], "hypot": [[349, "hypot"]], "allclose": [[333, "allclose"]], "lgamma": [[353, "lgamma"]], "signbit": [[357, "signbit"]], "gradient": [[348, "gradient"]], "isclose": [[350, "isclose"]], "vjp": [[365, "vjp"]], "fmax": [[346, "fmax"]], "jvp": [[364, "jvp"]], "xlogy": [[360, "xlogy"]], "conj": [[337, "conj"]], "amin": [[335, "amin"]], "digamma": [[341, "digamma"]], "random_tt": [[325, "random-tt"]], "fix": [[344, "fix"]], "frexp": [[347, "frexp"]], "binarizer": [[336, "binarizer"]], "dropout2d": [[399, "dropout2d"]], "generate_einsum_equation": [[404, "generate-einsum-equation"]], "fft2": [[403, "fft2"]], "max_pool1d": [[411, "max-pool1d"]], "fft": [[402, "fft"]], "dct": [[396, "dct"]], "ifft": [[407, "ifft"]], "dropout1d": [[398, "dropout1d"]], "get_interpolate_kernel": [[405, "get-interpolate-kernel"]], "Sparse array": [[385, "sparse-array"]], "idct": [[406, "idct"]], "dft": [[397, "dft"]], "adaptive_avg_pool2d": [[389, "adaptive-avg-pool2d"]], "avg_pool1d": [[393, "avg-pool1d"]], "area_interpolate": [[392, "area-interpolate"]], "adaptive_max_pool2d": [[390, "adaptive-max-pool2d"]], "avg_pool2d": [[394, "avg-pool2d"]], "avg_pool3d": [[395, "avg-pool3d"]], "interpolate": [[410, "interpolate"]], "embedding": [[401, "embedding"]], "max_pool2d": [[412, "max-pool2d"]], "dropout3d": [[400, "dropout3d"]], "adaptive_max_pool3d": [[391, "adaptive-max-pool3d"]], "ifftn": [[408, "ifftn"]], "max_pool3d": [[413, "max-pool3d"]], "interp": [[409, "interp"]], "adaptive_avg_pool1d": [[388, "adaptive-avg-pool1d"]], "reciprocal": [[280, "reciprocal"]], "trunc": [[292, "trunc"]], "logit": [[299, "logit"]], "silu": [[305, "silu"]], "threshold": [[309, "threshold"]], "tanh": [[290, "tanh"]], "selu": [[304, "selu"]], "tan": [[289, "tan"]], "sign": [[283, "sign"]], "trunc_divide": [[293, "trunc-divide"]], "mel_weight_matrix": [[318, "mel-weight-matrix"]], "pow": [[277, "pow"]], "tanhshrink": [[308, "tanhshrink"]], "polyval": [[321, "polyval"]], "trapz": [[291, "trapz"]], "eye_like": [[312, "eye-like"]], "blackman_window": [[311, "blackman-window"]], "elu": [[295, "elu"]], "sin": [[284, "sin"]], "positive": [[276, "positive"]], "hardtanh": [[298, "hardtanh"]], "indices": [[315, "indices"]], "ndenumerate": [[319, "ndenumerate"]], "rad2deg": [[278, "rad2deg"]], "subtract": [[288, "subtract"]], "scaled_tanh": [[303, "scaled-tanh"]], "hamming_window": [[313, "hamming-window"]], "remainder": [[281, "remainder"]], "sinh": [[285, "sinh"]], "thresholded_relu": [[310, "thresholded-relu"]], "softshrink": [[306, "softshrink"]], "hardshrink": [[296, "hardshrink"]], "celu": [[294, "celu"]], "round": [[282, "round"]], "hardsilu": [[297, "hardsilu"]], "kaiser_bessel_derived_window": [[316, "kaiser-bessel-derived-window"]], "ndindex": [[320, "ndindex"]], "real": [[279, "real"]], "logsigmoid": [[300, "logsigmoid"]], "prelu": [[301, "prelu"]], "square": [[287, "square"]], "stanh": [[307, "stanh"]], "sqrt": [[286, "sqrt"]], "relu6": [[302, "relu6"]], "kaiser_window": [[317, "kaiser-window"]], "hann_window": [[314, "hann-window"]], "negative": [[274, "negative"]], "fmod": [[248, "fmod"]], "logaddexp2": [[265, "logaddexp2"]], "maximum": [[270, "maximum"]], "floor_divide": [[246, "floor-divide"]], "floor": [[245, "floor"]], "cosh": [[237, "cosh"]], "bitwise_or": [[232, "bitwise-or"]], "multiply": [[272, "multiply"]], "bitwise_left_shift": [[231, "bitwise-left-shift"]], "nan_to_num": [[273, "nan-to-num"]], "log10": [[261, "log10"]], "erf": [[241, "erf"]], "cos": [[236, "cos"]], "bitwise_xor": [[234, "bitwise-xor"]], "isfinite": [[253, "isfinite"]], "exp2": [[243, "exp2"]], "isreal": [[256, "isreal"]], "isnan": [[255, "isnan"]], "logical_or": [[268, "logical-or"]], "ceil": [[235, "ceil"]], "greater_equal": [[251, "greater-equal"]], "fmin": [[247, "fmin"]], "log2": [[263, "log2"]], "equal": [[240, "equal"]], "logical_xor": [[269, "logical-xor"]], "not_equal": [[275, "not-equal"]], "log1p": [[262, "log1p"]], "deg2rad": [[238, "deg2rad"]], "bitwise_invert": [[230, "bitwise-invert"]], "isinf": [[254, "isinf"]], "logaddexp": [[264, "logaddexp"]], "gcd": [[249, "gcd"]], "logical_and": [[266, "logical-and"]], "expm1": [[244, "expm1"]], "greater": [[250, "greater"]], "less": [[258, "less"]], "bitwise_right_shift": [[233, "bitwise-right-shift"]], "imag": [[252, "imag"]], "lcm": [[257, "lcm"]], "logical_not": [[267, "logical-not"]], "exp": [[242, "exp"]], "divide": [[239, "divide"]], "less_equal": [[259, "less-equal"]], "log": [[260, "log"]], "minimum": [[271, "minimum"]], "unset_default_float_dtype": [[188, "unset-default-float-dtype"]], "unset_default_int_dtype": [[189, "unset-default-int-dtype"]], "atan": [[226, "atan"]], "atanh": [[228, "atanh"]], "default_device": [[195, "default-device"]], "function_supported_devices": [[198, "function-supported-devices"]], "unset_default_uint_dtype": [[190, "unset-default-uint-dtype"]], "gpu_is_available": [[201, "gpu-is-available"]], "atan2": [[227, "atan2"]], "unset_default_device": [[216, "unset-default-device"]], "split_factor": [[211, "split-factor"]], "angle": [[223, "angle"]], "bitwise_and": [[229, "bitwise-and"]], "as_native_dev": [[193, "as-native-dev"]], "set_soft_device_mode": [[209, "set-soft-device-mode"]], "print_all_ivy_arrays_on_dev": [[207, "print-all-ivy-arrays-on-dev"]], "abs": [[219, "abs"]], "asin": [[224, "asin"]], "acosh": [[221, "acosh"]], "set_default_uint_dtype": [[184, "set-default-uint-dtype"]], "unset_default_dtype": [[187, "unset-default-dtype"]], "unset_soft_device_mode": [[217, "unset-soft-device-mode"]], "unset_default_complex_dtype": [[186, "unset-default-complex-dtype"]], "dev": [[196, "dev"]], "clear_cached_mem_on_dev": [[194, "clear-cached-mem-on-dev"]], "percent_used_mem_on_dev": [[206, "percent-used-mem-on-dev"]], "handle_soft_device_variable": [[202, "handle-soft-device-variable"]], "total_mem_on_dev": [[214, "total-mem-on-dev"]], "valid_dtype": [[191, "valid-dtype"]], "add": [[222, "add"]], "num_gpus": [[204, "num-gpus"]], "dev_util": [[197, "dev-util"]], "set_default_device": [[208, "set-default-device"]], "asinh": [[225, "asinh"]], "split_func_call": [[212, "split-func-call"]], "set_split_factor": [[210, "set-split-factor"]], "acos": [[220, "acos"]], "num_ivy_arrays_on_dev": [[205, "num-ivy-arrays-on-dev"]], "tpu_is_available": [[215, "tpu-is-available"]], "function_unsupported_devices": [[199, "function-unsupported-devices"]], "num_cpu_cores": [[203, "num-cpu-cores"]], "used_mem_on_dev": [[218, "used-mem-on-dev"]], "get_all_ivy_arrays_on_dev": [[200, "get-all-ivy-arrays-on-dev"]], "as_ivy_dev": [[192, "as-ivy-dev"]], "type_promote_arrays": [[185, "type-promote-arrays"]], "to_device": [[213, "to-device"]], "Resnet 18": [[49, "Resnet-18"]], "Conversions": [[51, "module-ivy.data_classes.array.conversions"], [74, "module-ivy.data_classes.container.conversions"]], "HuggingFace Tensorflow DeiT": [[47, "HuggingFace-Tensorflow-DeiT"]], "Graph can be visualized and displayed as html file on browser": [[47, "Graph-can-be-visualized-and-displayed-as-html-file-on-browser"]], "Ivy as a Transpiler Introduction": [[48, "Ivy-as-a-Transpiler-Introduction"]], "To use the transpiler:": [[48, "To-use-the-transpiler:"]], "Transpiler Interface": [[48, "Transpiler-Interface"]], "Telemetry": [[48, "Telemetry"]], "1. Transpile Functions \ud83d\udd22": [[48, "1.-Transpile-Functions-\ud83d\udd22"]], "2. Transpile Libraries \ud83d\udcda": [[48, "2.-Transpile-Libraries-\ud83d\udcda"]], "3. Transpile Models \ud83c\udf10": [[48, "3.-Transpile-Models-\ud83c\udf10"]], "Image": [[59, "module-ivy.data_classes.array.image"], [82, "module-ivy.data_classes.container.image"]], "End-to-End Training Pipeline in Ivy": [[46, "End-to-End-Training-Pipeline-in-Ivy"]], "Importing libraries": [[46, "Importing-libraries"]], "Let\u2019s build the pipeline with a Tensorflow backend": [[46, "Let's-build-the-pipeline-with-a-Tensorflow-backend"]], "We are using MNIST dataset for this Tutorial": [[46, "We-are-using-MNIST-dataset-for-this-Tutorial"]], "Temporary Dataset and Dynamic loader": [[46, "Temporary-Dataset-and-Dynamic-loader"]], "Defining the Ivy Network": [[46, "Defining-the-Ivy-Network"]], "Training Loop with utility functions": [[46, "Training-Loop-with-utility-functions"]], "Plotting the training metrics": [[46, "Plotting-the-training-metrics"]], "Save the trained Model": [[46, "Save-the-trained-Model"]], "2.0: Kornia": [[39, "2.0:-Kornia"]], "Using TensorFlow Models in your PyTorch Projects": [[5, "Using-TensorFlow-Models-in-your-PyTorch-Projects"]], "Framework Incompatibility": [[5, "Framework-Incompatibility"]], "Transpiling a TensorFlow model to PyTorch": [[5, "Transpiling-a-TensorFlow-model-to-PyTorch"]], "About the transpiled model": [[5, "About-the-transpiled-model"]], "Setting-up the source model": [[5, "Setting-up-the-source-model"]], "Converting the model from TensorFlow to PyTorch": [[5, "Converting-the-model-from-TensorFlow-to-PyTorch"]], "Comparing the results": [[5, "Comparing-the-results"], [6, "Comparing-the-results"]], "Fine-tuning the transpiled model": [[5, "Fine-tuning-the-transpiled-model"], [6, "Fine-tuning-the-transpiled-model"]], "Conclusion": [[5, "Conclusion"], [6, "Conclusion"]], "Demo: Transpiling DeepMind\u2019s PerceiverIO": [[44, "Demo:-Transpiling-DeepMind's-PerceiverIO"]], "Table of Contents": [[44, "Table-of-Contents"]], "Defining the model": [[44, "Defining-the-model"]], "Model construction": [[44, "Model-construction"]], "Some helper functions": [[44, "Some-helper-functions"]], "Transpiling the model": [[44, "Transpiling-the-model"]], "PyTorch pipeline": [[44, "PyTorch-pipeline"]], "Dataset download": [[44, "Dataset-download"]], "DataLoader": [[44, "DataLoader"]], "Training": [[44, "Training"]], "0.2: Transpile": [[34, "0.2:-Transpile"]], "3.1: Stable Diffusion": [[41, "3.1:-Stable-Diffusion"]], "Accelerating PyTorch models with JAX": [[12, "Accelerating-PyTorch-models-with-JAX"]], "Examples and Demos": [[2, "examples-and-demos"], [19, "examples-and-demos"]], "ODSC Ivy Demo": [[30, "ODSC-Ivy-Demo"]], "Ivy Backend Handler": [[30, "Ivy-Backend-Handler"], [21, "Ivy-Backend-Handler"]], "Data Structures": [[30, "Data-Structures"], [21, "Data-Structures"]], "Ivy Functional API": [[30, "Ivy-Functional-API"], [21, "Ivy-Functional-API"]], "Graph Tracer": [[30, "Graph-Tracer"]], "Any function": [[30, "Any-function"], [31, "Any-function"]], "Any library": [[30, "Any-library"], [31, "Any-library"]], "Any model": [[30, "Any-model"], [31, "Any-model"]], "How To Convert Models from PyTorch to PaddlePaddle": [[6, "How-To-Convert-Models-from-PyTorch-to-PaddlePaddle"]], "About the Model": [[6, "About-the-Model"]], "Transpiling the Model": [[6, "Transpiling-the-Model"]], "Deepmind PerceiverIO on GPU": [[45, "Deepmind-PerceiverIO-on-GPU"]], "Install Python3.8 and setup the kernel": [[45, "Install-Python3.8-and-setup-the-kernel"]], "Clone the ivy and ivy-models repo": [[45, "Clone-the-ivy-and-ivy-models-repo"]], "Install ivy and ivy_models from the repos": [[45, "Install-ivy-and-ivy_models-from-the-repos"]], "Run the demo\u2026": [[45, "Run-the-demo..."]], "\u2026with torch backend": [[45, "...with-torch-backend"]], "\u2026.with tensorflow backend": [[45, "....with-tensorflow-backend"]], "\u2026with jax backend": [[45, "...with-jax-backend"]], "\u2026with numpy backend": [[45, "...with-numpy-backend"]], "1.3: Dynamic vs Static": [[38, "1.3:-Dynamic-vs-Static"]], "Dynamic": [[38, "Dynamic"]], "Static": [[38, "Static"]], "ToDo: explain via examples why dynamic mode is set to True by default when transpiling to and from numpy and torch, but set to False by default when transpiling to and from tensorflow and jax.": [[38, "ToDo:-explain-via-examples-why-dynamic-mode-is-set-to-True-by-default-when-transpiling-to-and-from-numpy-and-torch,-but-set-to-False-by-default-when-transpiling-to-and-from-tensorflow-and-jax."]], "0.1: Compile": [[33, "0.1:-Compile"]], "3.0: Perceiver": [[40, "3.0:-Perceiver"]], "Quickstart": [[31, "Quickstart"]], "Get familiar with Ivy": [[31, "Get-familiar-with-Ivy"]], "Functional API": [[31, "Functional-API"]], "Stateful API": [[31, "Stateful-API"]], "Tracing code": [[31, "Tracing-code"]], "1.2: As a Decorator": [[37, "1.2:-As-a-Decorator"]], "Unify": [[37, "Unify"], [36, "Unify"], [25, "Unify"], [26, "Unify"], [35, "Unify"]], "Compile": [[37, "Compile"], [36, "Compile"], [35, "Compile"]], "Transpile": [[37, "Transpile"], [36, "Transpile"], [25, "Transpile"], [26, "Transpile"], [35, "Transpile"]], "Accelerating XGBoost with JAX": [[13, "Accelerating-XGBoost-with-JAX"]], "Imports": [[13, "Imports"], [7, "Imports"], [11, "Imports"]], "Tests": [[13, "Tests"]], "Loading the Data": [[13, "Loading-the-Data"]], "Comparing xgb_frontend.XGBClassifier and xgb.XGBClassifier": [[13, "Comparing-xgb_frontend.XGBClassifier-and-xgb.XGBClassifier"]], "JAX backend": [[13, "JAX-backend"]], "Tensorflow backend": [[13, "Tensorflow-backend"]], "PyTorch backend": [[13, "PyTorch-backend"]], "More exhaustive example": [[13, "More-exhaustive-example"]], "Evaluating Training Time vs. Number of Boosting Rounds": [[13, "Evaluating-Training-Time-vs.-Number-of-Boosting-Rounds"]], "Training Time vs. Fractions of Data": [[13, "Training-Time-vs.-Fractions-of-Data"]], "Comparison of Metrics": [[13, "Comparison-of-Metrics"]], "Image Segmentation with Ivy UNet": [[7, "Image-Segmentation-with-Ivy-UNet"]], "Data Preparation": [[7, "Data-Preparation"], [4, "Data-Preparation"], [11, "Data-Preparation"], [3, "Data-Preparation"]], "Custom Preprocessing": [[7, "Custom-Preprocessing"]], "Load the image example \ud83d\uddbc\ufe0f": [[7, "Load-the-image-example-\ud83d\uddbc\ufe0f"], [11, "Load-the-image-example-\ud83d\uddbc\ufe0f"]], "Visualise image": [[7, "Visualise-image"], [11, "Visualise-image"]], "Model Inference": [[7, "Model-Inference"]], "Initializing Native Torch UNet": [[7, "Initializing-Native-Torch-UNet"]], "Initializing Ivy UNet with Pretrained Weights \u2b07\ufe0f": [[7, "Initializing-Ivy-UNet-with-Pretrained-Weights-\u2b07\ufe0f"]], "Custom masking function": [[7, "Custom-masking-function"]], "Use the model to segment your images \ud83d\ude80": [[7, "Use-the-model-to-segment-your-images-\ud83d\ude80"]], "TensorFlow backend": [[7, "TensorFlow-backend"]], "JAX": [[7, "JAX"]], "Appendix: the Ivy native implementation of UNet": [[7, "Appendix:-the-Ivy-native-implementation-of-UNet"]], "Write a model using Ivy": [[29, "Write-a-model-using-Ivy"]], "# Ivy Bert Demo": [[4, "#-Ivy-Bert-Demo"]], "Install the dependecies": [[4, "Install-the-dependecies"]], "Import the modules": [[4, "Import-the-modules"]], "Ivy inference with Sequence Classification": [[4, "Ivy-inference-with-Sequence-Classification"]], "Ivy model inference with tensorflow": [[4, "Ivy-model-inference-with-tensorflow"]], "Ivy model inference with Jax": [[4, "Ivy-model-inference-with-Jax"]], "Ivy model inference with torch": [[4, "Ivy-model-inference-with-torch"]], "TO REPLACE: Title": [[1, "TO-REPLACE:-Title"]], "Guides": [[14, "guides"], [19, "guides"]], "Tutorials And Examples": [[19, "tutorials-and-examples"]], "Learn the basics": [[19, "learn-the-basics"], [20, "learn-the-basics"]], "Using Ivy ResNet": [[11, "Using-Ivy-ResNet"]], "Installation": [[11, "Installation"], [3, "Installation"]], "Prepare the set of labels": [[11, "Prepare-the-set-of-labels"]], "Model Inference ResNet34": [[11, "Model-Inference-ResNet34"]], "Initializing Native Torch ResNet34": [[11, "Initializing-Native-Torch-ResNet34"]], "Initializing Ivy ResNet34 with Pretrained Weights \u2b07\ufe0f": [[11, "Initializing-Ivy-ResNet34-with-Pretrained-Weights-\u2b07\ufe0f"]], "Use the model to classify your images \ud83d\ude80": [[11, "Use-the-model-to-classify-your-images-\ud83d\ude80"], [11, "id1"]], "Model Inference ResNet50": [[11, "Model-Inference-ResNet50"]], "Initializing Native Torch ResNet50": [[11, "Initializing-Native-Torch-ResNet50"]], "Initializing Ivy ResNet50 with Pretrained Weights \u2b07\ufe0f": [[11, "Initializing-Ivy-ResNet50-with-Pretrained-Weights-\u2b07\ufe0f"]], "Ivy AlexNet demo": [[3, "Ivy-AlexNet-demo"]], "Ivy AlexNet inference in Torch": [[3, "Ivy-AlexNet-inference-in-Torch"]], "TensorFlow inference": [[3, "TensorFlow-inference"]], "JAX inference": [[3, "JAX-inference"]], "Appendix (Ivy code for AlexNet implementation)": [[3, "Appendix-(Ivy-code-for-AlexNet-implementation)"]], "Transpiling a Tensorflow model to build on top": [[17, "Transpiling-a-Tensorflow-model-to-build-on-top"]], "Transpile any model": [[28, "Transpile-any-model"]], "Round up": [[28, "Round-up"]], "Transpiling a haiku model to build on top": [[16, "Transpiling-a-haiku-model-to-build-on-top"]], "0.0: Unify": [[32, "0.0:-Unify"]], "1.1: Framework Selection": [[36, "1.1:-Framework-Selection"]], "Basic Operations with Ivy": [[42, "Basic-Operations-with-Ivy"]], "Installs \ud83d\udcbe": [[42, "Installs-\ud83d\udcbe"], [43, "Installs-\ud83d\udcbe"]], "Imports \ud83d\udec3": [[42, "Imports-\ud83d\udec3"], [43, "Imports-\ud83d\udec3"]], "Ivy as a Unified ML Framework \ud83d\udd00": [[42, "Ivy-as-a-Unified-ML-Framework-\ud83d\udd00"]], "Change frameworks by one line of code \u261d": [[42, "Change-frameworks-by-one-line-of-code-\u261d"]], "No need to worry about data types \ud83c\udfa8": [[42, "No-need-to-worry-about-data-types-\ud83c\udfa8"]], "No need to worry about framework differences \ud83d\udcb1": [[42, "No-need-to-worry-about-framework-differences-\ud83d\udcb1"]], "Unifying them all! \ud83c\udf72": [[42, "Unifying-them-all!-\ud83c\udf72"]], "Ivy as a standalone ML framework \ud83c\udf00": [[42, "Ivy-as-a-standalone-ML-framework-\ud83c\udf00"]], "Set Backend Framework": [[42, "Set-Backend-Framework"]], "Define Model": [[42, "Define-Model"], [43, "Define-Model"]], "Create Model": [[42, "Create-Model"]], "Create Optimizer": [[42, "Create-Optimizer"]], "Input and Target": [[42, "Input-and-Target"]], "Loss Function": [[42, "Loss-Function"]], "Training Loop": [[42, "Training-Loop"]], "Transpiling a PyTorch model to build on top": [[15, "Transpiling-a-PyTorch-model-to-build-on-top"]], "Lazy vs Eager": [[25, "Lazy-vs-Eager"]], "Trace": [[25, "Trace"], [26, "Trace"]], "Developing a convolutional network using Ivy": [[18, "Developing-a-convolutional-network-using-Ivy"]], "Unify code": [[22, "Unify-code"]], "Trace code": [[23, "Trace-code"]], "Accelerating MMPreTrain models with JAX": [[10, "Accelerating-MMPreTrain-models-with-JAX"]], "How to use decorators": [[26, "How-to-use-decorators"]], "Compilation of a Basic Function": [[43, "Compilation-of-a-Basic-Function"]], "Import Ivy compiler": [[43, "Import-Ivy-compiler"]], "Function compilation \ud83d\udee0": [[43, "Function-compilation-\ud83d\udee0"]], "Set backend": [[43, "Set-backend"]], "Sample input": [[43, "Sample-input"]], "Define function to compile": [[43, "Define-function-to-compile"]], "Compile the function": [[43, "Compile-the-function"]], "Check results": [[43, "Check-results"], [43, "id1"]], "Compiling simple neural network \ud83e\udde0": [[43, "Compiling-simple-neural-network-\ud83e\udde0"]], "Create model": [[43, "Create-model"]], "Define input": [[43, "Define-input"]], "Compile network": [[43, "Compile-network"]], "Demos": [[0, "demos"]], "Creating a Notebook for Demo": [[0, "creating-a-notebook-for-demo"]], "1.0: Lazy vs Eager": [[35, "1.0:-Lazy-vs-Eager"]], "Transpile code": [[24, "Transpile-code"]], "Write Ivy code": [[21, "Write-Ivy-code"]], "Contents": [[21, "Contents"]], "Installing Ivy": [[21, "Installing-Ivy"]], "Importing Ivy": [[21, "Importing-Ivy"]], "Transpile any library": [[27, "Transpile-any-library"]]}, "indexentries": {"_arraywithactivations (class in ivy.data_classes.array.activations)": [[50, "ivy.data_classes.array.activations._ArrayWithActivations"]], "_abc_impl (ivy.data_classes.array.activations._arraywithactivations attribute)": [[50, "ivy.data_classes.array.activations._ArrayWithActivations._abc_impl"]], "gelu() (ivy.data_classes.array.activations._arraywithactivations method)": [[50, "ivy.data_classes.array.activations._ArrayWithActivations.gelu"]], "hardswish() (ivy.data_classes.array.activations._arraywithactivations method)": [[50, "ivy.data_classes.array.activations._ArrayWithActivations.hardswish"]], "ivy.data_classes.array.activations": [[50, "module-ivy.data_classes.array.activations"]], "leaky_relu() (ivy.data_classes.array.activations._arraywithactivations method)": [[50, "ivy.data_classes.array.activations._ArrayWithActivations.leaky_relu"]], "log_softmax() (ivy.data_classes.array.activations._arraywithactivations method)": [[50, "ivy.data_classes.array.activations._ArrayWithActivations.log_softmax"]], "mish() (ivy.data_classes.array.activations._arraywithactivations method)": [[50, "ivy.data_classes.array.activations._ArrayWithActivations.mish"]], "module": [[50, "module-ivy.data_classes.array.activations"], [51, "module-ivy.data_classes.array.conversions"], [52, "module-ivy.data_classes.array.creation"], [53, "module-ivy.data_classes.array.data_type"], [54, "module-ivy.data_classes.array.device"], [55, "module-ivy.data_classes.array.elementwise"], [56, "module-ivy.data_classes.array.experimental"], [56, "module-ivy.data_classes.array.experimental.activations"], [56, "module-ivy.data_classes.array.experimental.conversions"], [56, "module-ivy.data_classes.array.experimental.creation"], [56, "module-ivy.data_classes.array.experimental.data_type"], [56, "module-ivy.data_classes.array.experimental.device"], [56, "module-ivy.data_classes.array.experimental.elementwise"], [56, "module-ivy.data_classes.array.experimental.general"], [56, "module-ivy.data_classes.array.experimental.gradients"], [56, "module-ivy.data_classes.array.experimental.image"], [56, "module-ivy.data_classes.array.experimental.layers"], [56, "module-ivy.data_classes.array.experimental.linear_algebra"], [56, "module-ivy.data_classes.array.experimental.losses"], [56, "module-ivy.data_classes.array.experimental.manipulation"], [56, "module-ivy.data_classes.array.experimental.norms"], [56, "module-ivy.data_classes.array.experimental.random"], [56, "module-ivy.data_classes.array.experimental.searching"], [56, "module-ivy.data_classes.array.experimental.set"], [56, "module-ivy.data_classes.array.experimental.sorting"], [56, "module-ivy.data_classes.array.experimental.statistical"], [56, "module-ivy.data_classes.array.experimental.utility"], [57, "module-ivy.data_classes.array.general"], [58, "module-ivy.data_classes.array.gradients"], [59, "module-ivy.data_classes.array.image"], [60, "module-ivy.data_classes.array.layers"], [61, "module-ivy.data_classes.array.linear_algebra"], [62, "module-ivy.data_classes.array.losses"], [63, "module-ivy.data_classes.array.manipulation"], [64, "module-ivy.data_classes.array.norms"], [65, "module-ivy.data_classes.array.random"], [66, "module-ivy.data_classes.array.searching"], [67, "module-ivy.data_classes.array.set"], [68, "module-ivy.data_classes.array.sorting"], [69, "module-ivy.data_classes.array.statistical"], [70, "module-ivy.data_classes.array.utility"], [71, "module-ivy.data_classes.array.wrapping"], [72, "module-ivy.data_classes.container.activations"], [73, "module-ivy.data_classes.container.base"], [74, "module-ivy.data_classes.container.conversions"], [75, "module-ivy.data_classes.container.creation"], [76, "module-ivy.data_classes.container.data_type"], [77, "module-ivy.data_classes.container.device"], [78, "module-ivy.data_classes.container.elementwise"], [79, "module-ivy.data_classes.container.experimental"], [79, "module-ivy.data_classes.container.experimental.activations"], [79, "module-ivy.data_classes.container.experimental.conversions"], [79, "module-ivy.data_classes.container.experimental.creation"], [79, "module-ivy.data_classes.container.experimental.data_type"], [79, "module-ivy.data_classes.container.experimental.device"], [79, "module-ivy.data_classes.container.experimental.elementwise"], [79, "module-ivy.data_classes.container.experimental.general"], [79, "module-ivy.data_classes.container.experimental.gradients"], [79, "module-ivy.data_classes.container.experimental.image"], [79, "module-ivy.data_classes.container.experimental.layers"], [79, "module-ivy.data_classes.container.experimental.linear_algebra"], [79, "module-ivy.data_classes.container.experimental.losses"], [79, "module-ivy.data_classes.container.experimental.manipulation"], [79, "module-ivy.data_classes.container.experimental.norms"], [79, "module-ivy.data_classes.container.experimental.random"], [79, "module-ivy.data_classes.container.experimental.searching"], [79, "module-ivy.data_classes.container.experimental.set"], [79, "module-ivy.data_classes.container.experimental.sorting"], [79, "module-ivy.data_classes.container.experimental.statistical"], [79, "module-ivy.data_classes.container.experimental.utility"], [80, "module-ivy.data_classes.container.general"], [81, "module-ivy.data_classes.container.gradients"], [82, "module-ivy.data_classes.container.image"], [83, "module-ivy.data_classes.container.layers"], [84, "module-ivy.data_classes.container.linear_algebra"], [85, "module-ivy.data_classes.container.losses"], [86, "module-ivy.data_classes.container.manipulation"], [87, "module-ivy.data_classes.container.norms"], [88, "module-ivy.data_classes.container.random"], [89, "module-ivy.data_classes.container.searching"], [90, "module-ivy.data_classes.container.set"], [91, "module-ivy.data_classes.container.sorting"], [92, "module-ivy.data_classes.container.statistical"], [93, "module-ivy.data_classes.container.utility"], [94, "module-ivy.data_classes.container.wrapping"], [95, "module-ivy.data_classes.factorized_tensor.base"], [96, "module-ivy.data_classes.factorized_tensor.cp_tensor"], [97, "module-ivy.data_classes.factorized_tensor.parafac2_tensor"], [98, "module-ivy.data_classes.factorized_tensor.tr_tensor"], [99, "module-ivy.data_classes.factorized_tensor.tt_tensor"], [100, "module-ivy.data_classes.factorized_tensor.tucker_tensor"], [101, "module-ivy.data_classes.array.array"], [102, "module-ivy.data_classes.container.container"], [104, "module-ivy.data_classes.nested_array.nested_array"], [105, "module-ivy.data_classes.nested_array.base"], [106, "module-ivy.data_classes.nested_array.elementwise"], [366, "module-ivy.functional.ivy.experimental.activations"], [367, "module-ivy.functional.ivy.experimental.constants"], [368, "module-ivy.functional.ivy.experimental.creation"], [369, "module-ivy.functional.ivy.experimental.data_type"], [370, "module-ivy.functional.ivy.experimental.device"], [371, "module-ivy.functional.ivy.experimental.elementwise"], [372, "module-ivy.functional.ivy.experimental.general"], [373, "module-ivy.functional.ivy.experimental.gradients"], [374, "module-ivy.functional.ivy.experimental.layers"], [375, "module-ivy.functional.ivy.experimental.linear_algebra"], [376, "module-ivy.functional.ivy.experimental.losses"], [377, "module-ivy.functional.ivy.experimental.manipulation"], [378, "module-ivy.functional.ivy.experimental.meta"], [379, "module-ivy.functional.ivy.experimental.nest"], [380, "module-ivy.functional.ivy.experimental.norms"], [381, "module-ivy.functional.ivy.experimental.random"], [382, "module-ivy.functional.ivy.experimental.searching"], [383, "module-ivy.functional.ivy.experimental.set"], [384, "module-ivy.functional.ivy.experimental.sorting"], [385, "module-ivy.functional.ivy.experimental.sparse_array"], [386, "module-ivy.functional.ivy.experimental.statistical"], [387, "module-ivy.functional.ivy.experimental.utility"], [625, "module-ivy.functional.ivy.activations"], [626, "module-ivy.functional.ivy.constants"], [627, "module-ivy.functional.ivy.control_flow_ops"], [628, "module-ivy.functional.ivy.creation"], [629, "module-ivy.functional.ivy.data_type"], [630, "module-ivy.functional.ivy.device"], [631, "module-ivy.functional.ivy.elementwise"], [632, "module-ivy.functional.ivy.experimental"], [633, "module-ivy.functional.ivy.general"], [634, "module-ivy.functional.ivy.gradients"], [635, "module-ivy.functional.ivy.layers"], [636, "module-ivy.functional.ivy.linear_algebra"], [637, "module-ivy.functional.ivy.losses"], [638, "module-ivy.functional.ivy.manipulation"], [639, "module-ivy.functional.ivy.meta"], [640, "module-ivy.functional.ivy.nest"], [641, "module-ivy.functional.ivy.norms"], [642, "module-ivy.functional.ivy.random"], [643, "module-ivy.functional.ivy.searching"], [644, "module-ivy.functional.ivy.set"], [645, "module-ivy.functional.ivy.sorting"], [646, "module-ivy.functional.ivy.statistical"], [647, "module-ivy.functional.ivy.utility"], [770, "module-ivy_tests.test_ivy.helpers.assertions"], [771, "module-ivy_tests.test_ivy.helpers.available_frameworks"], [772, "module-ivy_tests.test_ivy.helpers.function_testing"], [773, "module-ivy_tests.test_ivy.helpers.globals"], [774, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers"], [775, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers"], [776, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers"], [777, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers"], [778, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers"], [779, "module-ivy_tests.test_ivy.helpers.multiprocessing"], [780, "module-ivy_tests.test_ivy.helpers.pipeline_helper"], [781, "module-ivy_tests.test_ivy.helpers.structs"], [782, "module-ivy_tests.test_ivy.helpers.test_parameter_flags"], [783, "module-ivy_tests.test_ivy.helpers.testing_helpers"], [787, "module-ivy.stateful.activations"], [788, "module-ivy.stateful.converters"], [789, "module-ivy.stateful.helpers"], [790, "module-ivy.stateful.initializers"], [791, "module-ivy.stateful.layers"], [792, "module-ivy.stateful.losses"], [793, "module-ivy.stateful.module"], [794, "module-ivy.stateful.norms"], [795, "module-ivy.stateful.optimizers"], [796, "module-ivy.stateful.sequential"], [797, "module-ivy.utils.assertions"], [798, "module-ivy.utils.backend"], [799, "module-ivy.utils.backend.ast_helpers"], [800, "module-ivy.utils.backend.handler"], [801, "module-ivy.utils.backend.sub_backend_handler"], [802, "module-ivy.utils.binaries"], [803, "module-ivy.utils.dynamic_import"], [804, "module-ivy.utils.einsum_parser"], [805, "module-ivy.utils.einsum_path_helpers"], [806, "module-ivy.utils.exceptions"], [807, "module-ivy.utils.inspection"], [808, "module-ivy.utils.logging"], [809, "module-ivy.utils.profiler"], [810, "module-ivy.utils.verbosity"]], "relu() (ivy.data_classes.array.activations._arraywithactivations method)": [[50, "ivy.data_classes.array.activations._ArrayWithActivations.relu"]], "sigmoid() (ivy.data_classes.array.activations._arraywithactivations method)": [[50, "ivy.data_classes.array.activations._ArrayWithActivations.sigmoid"]], "softmax() (ivy.data_classes.array.activations._arraywithactivations method)": [[50, "ivy.data_classes.array.activations._ArrayWithActivations.softmax"]], "softplus() (ivy.data_classes.array.activations._arraywithactivations method)": [[50, "ivy.data_classes.array.activations._ArrayWithActivations.softplus"]], "_array_to_new_backend() (in module ivy.data_classes.array.conversions)": [[51, "ivy.data_classes.array.conversions._array_to_new_backend"]], "_to_ivy() (in module ivy.data_classes.array.conversions)": [[51, "ivy.data_classes.array.conversions._to_ivy"]], "_to_native() (in module ivy.data_classes.array.conversions)": [[51, "ivy.data_classes.array.conversions._to_native"]], "_to_new_backend() (in module ivy.data_classes.array.conversions)": [[51, "ivy.data_classes.array.conversions._to_new_backend"]], "args_to_ivy() (in module ivy.data_classes.array.conversions)": [[51, "ivy.data_classes.array.conversions.args_to_ivy"]], "args_to_native() (in module ivy.data_classes.array.conversions)": [[51, "ivy.data_classes.array.conversions.args_to_native"]], "args_to_new_backend() (in module ivy.data_classes.array.conversions)": [[51, "ivy.data_classes.array.conversions.args_to_new_backend"]], "ivy.data_classes.array.conversions": [[51, "module-ivy.data_classes.array.conversions"]], "to_ivy() (in module ivy.data_classes.array.conversions)": [[51, "ivy.data_classes.array.conversions.to_ivy"]], "to_native() (in module ivy.data_classes.array.conversions)": [[51, "ivy.data_classes.array.conversions.to_native"]], "to_new_backend() (in module ivy.data_classes.array.conversions)": [[51, "ivy.data_classes.array.conversions.to_new_backend"]], "_arraywithcreation (class in ivy.data_classes.array.creation)": [[52, "ivy.data_classes.array.creation._ArrayWithCreation"]], "_abc_impl (ivy.data_classes.array.creation._arraywithcreation attribute)": [[52, "ivy.data_classes.array.creation._ArrayWithCreation._abc_impl"]], "asarray() (ivy.data_classes.array.creation._arraywithcreation method)": [[52, "ivy.data_classes.array.creation._ArrayWithCreation.asarray"]], "copy_array() (ivy.data_classes.array.creation._arraywithcreation method)": [[52, "ivy.data_classes.array.creation._ArrayWithCreation.copy_array"]], "empty_like() (ivy.data_classes.array.creation._arraywithcreation method)": [[52, "ivy.data_classes.array.creation._ArrayWithCreation.empty_like"]], "from_dlpack() (ivy.data_classes.array.creation._arraywithcreation method)": [[52, "ivy.data_classes.array.creation._ArrayWithCreation.from_dlpack"]], "full_like() (ivy.data_classes.array.creation._arraywithcreation method)": [[52, "ivy.data_classes.array.creation._ArrayWithCreation.full_like"]], "ivy.data_classes.array.creation": [[52, "module-ivy.data_classes.array.creation"]], "linspace() (ivy.data_classes.array.creation._arraywithcreation method)": [[52, "ivy.data_classes.array.creation._ArrayWithCreation.linspace"]], "logspace() (ivy.data_classes.array.creation._arraywithcreation method)": [[52, "ivy.data_classes.array.creation._ArrayWithCreation.logspace"]], "meshgrid() (ivy.data_classes.array.creation._arraywithcreation method)": [[52, "ivy.data_classes.array.creation._ArrayWithCreation.meshgrid"]], "native_array() (ivy.data_classes.array.creation._arraywithcreation method)": [[52, "ivy.data_classes.array.creation._ArrayWithCreation.native_array"]], "one_hot() (ivy.data_classes.array.creation._arraywithcreation method)": [[52, "ivy.data_classes.array.creation._ArrayWithCreation.one_hot"]], "ones_like() (ivy.data_classes.array.creation._arraywithcreation method)": [[52, "ivy.data_classes.array.creation._ArrayWithCreation.ones_like"]], "tril() (ivy.data_classes.array.creation._arraywithcreation method)": [[52, "ivy.data_classes.array.creation._ArrayWithCreation.tril"]], "triu() (ivy.data_classes.array.creation._arraywithcreation method)": [[52, "ivy.data_classes.array.creation._ArrayWithCreation.triu"]], "zeros_like() (ivy.data_classes.array.creation._arraywithcreation method)": [[52, "ivy.data_classes.array.creation._ArrayWithCreation.zeros_like"]], "_arraywithdatatypes (class in ivy.data_classes.array.data_type)": [[53, "ivy.data_classes.array.data_type._ArrayWithDataTypes"]], "_abc_impl (ivy.data_classes.array.data_type._arraywithdatatypes attribute)": [[53, "ivy.data_classes.array.data_type._ArrayWithDataTypes._abc_impl"]], "astype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[53, "ivy.data_classes.array.data_type._ArrayWithDataTypes.astype"]], "broadcast_arrays() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[53, "ivy.data_classes.array.data_type._ArrayWithDataTypes.broadcast_arrays"]], "broadcast_to() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[53, "ivy.data_classes.array.data_type._ArrayWithDataTypes.broadcast_to"]], "can_cast() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[53, "ivy.data_classes.array.data_type._ArrayWithDataTypes.can_cast"]], "dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[53, "ivy.data_classes.array.data_type._ArrayWithDataTypes.dtype"]], "finfo() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[53, "ivy.data_classes.array.data_type._ArrayWithDataTypes.finfo"]], "iinfo() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[53, "ivy.data_classes.array.data_type._ArrayWithDataTypes.iinfo"]], "is_bool_dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[53, "ivy.data_classes.array.data_type._ArrayWithDataTypes.is_bool_dtype"]], "is_float_dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[53, "ivy.data_classes.array.data_type._ArrayWithDataTypes.is_float_dtype"]], "is_int_dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[53, "ivy.data_classes.array.data_type._ArrayWithDataTypes.is_int_dtype"]], "is_uint_dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[53, "ivy.data_classes.array.data_type._ArrayWithDataTypes.is_uint_dtype"]], "ivy.data_classes.array.data_type": [[53, "module-ivy.data_classes.array.data_type"]], "result_type() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[53, "ivy.data_classes.array.data_type._ArrayWithDataTypes.result_type"]], "_arraywithdevice (class in ivy.data_classes.array.device)": [[54, "ivy.data_classes.array.device._ArrayWithDevice"]], "_abc_impl (ivy.data_classes.array.device._arraywithdevice attribute)": [[54, "ivy.data_classes.array.device._ArrayWithDevice._abc_impl"]], "dev() (ivy.data_classes.array.device._arraywithdevice method)": [[54, "ivy.data_classes.array.device._ArrayWithDevice.dev"]], "ivy.data_classes.array.device": [[54, "module-ivy.data_classes.array.device"]], "to_device() (ivy.data_classes.array.device._arraywithdevice method)": [[54, "ivy.data_classes.array.device._ArrayWithDevice.to_device"]], "_arraywithelementwise (class in ivy.data_classes.array.elementwise)": [[55, "ivy.data_classes.array.elementwise._ArrayWithElementwise"]], "_abc_impl (ivy.data_classes.array.elementwise._arraywithelementwise attribute)": [[55, "ivy.data_classes.array.elementwise._ArrayWithElementwise._abc_impl"]], "abs() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[55, "ivy.data_classes.array.elementwise._ArrayWithElementwise.abs"]], "acos() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[55, "ivy.data_classes.array.elementwise._ArrayWithElementwise.acos"]], "acosh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[55, "ivy.data_classes.array.elementwise._ArrayWithElementwise.acosh"]], "add() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[55, "ivy.data_classes.array.elementwise._ArrayWithElementwise.add"]], "angle() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[55, "ivy.data_classes.array.elementwise._ArrayWithElementwise.angle"]], "asin() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[55, "ivy.data_classes.array.elementwise._ArrayWithElementwise.asin"]], "asinh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[55, "ivy.data_classes.array.elementwise._ArrayWithElementwise.asinh"]], "atan() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[55, "ivy.data_classes.array.elementwise._ArrayWithElementwise.atan"]], "atan2() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[55, "ivy.data_classes.array.elementwise._ArrayWithElementwise.atan2"]], "atanh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[55, "ivy.data_classes.array.elementwise._ArrayWithElementwise.atanh"]], "bitwise_and() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[55, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_and"]], "bitwise_invert() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[55, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_invert"]], "bitwise_left_shift() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[55, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_left_shift"]], "bitwise_or() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[55, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_or"]], "bitwise_right_shift() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[55, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_right_shift"]], "bitwise_xor() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[55, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_xor"]], "ceil() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[55, "ivy.data_classes.array.elementwise._ArrayWithElementwise.ceil"]], "cos() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[55, "ivy.data_classes.array.elementwise._ArrayWithElementwise.cos"]], "cosh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[55, "ivy.data_classes.array.elementwise._ArrayWithElementwise.cosh"]], "deg2rad() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[55, "ivy.data_classes.array.elementwise._ArrayWithElementwise.deg2rad"]], "divide() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[55, "ivy.data_classes.array.elementwise._ArrayWithElementwise.divide"]], "equal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[55, "ivy.data_classes.array.elementwise._ArrayWithElementwise.equal"]], "erf() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[55, "ivy.data_classes.array.elementwise._ArrayWithElementwise.erf"]], "exp() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[55, "ivy.data_classes.array.elementwise._ArrayWithElementwise.exp"]], "exp2() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[55, "ivy.data_classes.array.elementwise._ArrayWithElementwise.exp2"]], "expm1() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[55, "ivy.data_classes.array.elementwise._ArrayWithElementwise.expm1"]], "floor() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[55, "ivy.data_classes.array.elementwise._ArrayWithElementwise.floor"]], "floor_divide() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[55, "ivy.data_classes.array.elementwise._ArrayWithElementwise.floor_divide"]], "fmin() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[55, "ivy.data_classes.array.elementwise._ArrayWithElementwise.fmin"]], "gcd() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[55, "ivy.data_classes.array.elementwise._ArrayWithElementwise.gcd"]], "greater() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[55, "ivy.data_classes.array.elementwise._ArrayWithElementwise.greater"]], "greater_equal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[55, "ivy.data_classes.array.elementwise._ArrayWithElementwise.greater_equal"]], "isfinite() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[55, "ivy.data_classes.array.elementwise._ArrayWithElementwise.isfinite"]], "isinf() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[55, "ivy.data_classes.array.elementwise._ArrayWithElementwise.isinf"]], "isnan() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[55, "ivy.data_classes.array.elementwise._ArrayWithElementwise.isnan"]], "isreal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[55, "ivy.data_classes.array.elementwise._ArrayWithElementwise.isreal"]], "ivy.data_classes.array.elementwise": [[55, "module-ivy.data_classes.array.elementwise"]], "lcm() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[55, "ivy.data_classes.array.elementwise._ArrayWithElementwise.lcm"]], "less() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[55, "ivy.data_classes.array.elementwise._ArrayWithElementwise.less"]], "less_equal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[55, "ivy.data_classes.array.elementwise._ArrayWithElementwise.less_equal"]], "log() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[55, "ivy.data_classes.array.elementwise._ArrayWithElementwise.log"]], "log10() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[55, "ivy.data_classes.array.elementwise._ArrayWithElementwise.log10"]], "log1p() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[55, "ivy.data_classes.array.elementwise._ArrayWithElementwise.log1p"]], "log2() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[55, "ivy.data_classes.array.elementwise._ArrayWithElementwise.log2"]], "logaddexp() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[55, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logaddexp"]], "logaddexp2() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[55, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logaddexp2"]], "logical_and() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[55, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logical_and"]], "logical_not() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[55, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logical_not"]], "logical_or() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[55, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logical_or"]], "logical_xor() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[55, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logical_xor"]], "maximum() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[55, "ivy.data_classes.array.elementwise._ArrayWithElementwise.maximum"]], "minimum() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[55, "ivy.data_classes.array.elementwise._ArrayWithElementwise.minimum"]], "multiply() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[55, "ivy.data_classes.array.elementwise._ArrayWithElementwise.multiply"]], "nan_to_num() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[55, "ivy.data_classes.array.elementwise._ArrayWithElementwise.nan_to_num"]], "negative() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[55, "ivy.data_classes.array.elementwise._ArrayWithElementwise.negative"]], "not_equal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[55, "ivy.data_classes.array.elementwise._ArrayWithElementwise.not_equal"]], "positive() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[55, "ivy.data_classes.array.elementwise._ArrayWithElementwise.positive"]], "pow() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[55, "ivy.data_classes.array.elementwise._ArrayWithElementwise.pow"]], "rad2deg() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[55, "ivy.data_classes.array.elementwise._ArrayWithElementwise.rad2deg"]], "real() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[55, "ivy.data_classes.array.elementwise._ArrayWithElementwise.real"]], "reciprocal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[55, "ivy.data_classes.array.elementwise._ArrayWithElementwise.reciprocal"]], "remainder() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[55, "ivy.data_classes.array.elementwise._ArrayWithElementwise.remainder"]], "round() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[55, "ivy.data_classes.array.elementwise._ArrayWithElementwise.round"]], "sign() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[55, "ivy.data_classes.array.elementwise._ArrayWithElementwise.sign"]], "sin() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[55, "ivy.data_classes.array.elementwise._ArrayWithElementwise.sin"]], "sinh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[55, "ivy.data_classes.array.elementwise._ArrayWithElementwise.sinh"]], "sqrt() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[55, "ivy.data_classes.array.elementwise._ArrayWithElementwise.sqrt"]], "square() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[55, "ivy.data_classes.array.elementwise._ArrayWithElementwise.square"]], "subtract() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[55, "ivy.data_classes.array.elementwise._ArrayWithElementwise.subtract"]], "tan() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[55, "ivy.data_classes.array.elementwise._ArrayWithElementwise.tan"]], "tanh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[55, "ivy.data_classes.array.elementwise._ArrayWithElementwise.tanh"]], "trapz() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[55, "ivy.data_classes.array.elementwise._ArrayWithElementwise.trapz"]], "trunc() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[55, "ivy.data_classes.array.elementwise._ArrayWithElementwise.trunc"]], "trunc_divide() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[55, "ivy.data_classes.array.elementwise._ArrayWithElementwise.trunc_divide"]], "_arraywithactivationsexperimental (class in ivy.data_classes.array.experimental.activations)": [[56, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental"]], "_arraywithconversionsexperimental (class in ivy.data_classes.array.experimental.conversions)": [[56, "ivy.data_classes.array.experimental.conversions._ArrayWithConversionsExperimental"]], "_arraywithcreationexperimental (class in ivy.data_classes.array.experimental.creation)": [[56, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental"]], "_arraywithdata_typeexperimental (class in ivy.data_classes.array.experimental.data_type)": [[56, "ivy.data_classes.array.experimental.data_type._ArrayWithData_typeExperimental"]], "_arraywithdeviceexperimental (class in ivy.data_classes.array.experimental.device)": [[56, "ivy.data_classes.array.experimental.device._ArrayWithDeviceExperimental"]], "_arraywithelementwiseexperimental (class in ivy.data_classes.array.experimental.elementwise)": [[56, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental"]], "_arraywithgeneralexperimental (class in ivy.data_classes.array.experimental.general)": [[56, "ivy.data_classes.array.experimental.general._ArrayWithGeneralExperimental"]], "_arraywithgradientsexperimental (class in ivy.data_classes.array.experimental.gradients)": [[56, "ivy.data_classes.array.experimental.gradients._ArrayWithGradientsExperimental"]], "_arraywithimageexperimental (class in ivy.data_classes.array.experimental.image)": [[56, "ivy.data_classes.array.experimental.image._ArrayWithImageExperimental"]], "_arraywithlayersexperimental (class in ivy.data_classes.array.experimental.layers)": [[56, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental"]], "_arraywithlinearalgebraexperimental (class in ivy.data_classes.array.experimental.linear_algebra)": [[56, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental"]], "_arraywithlossesexperimental (class in ivy.data_classes.array.experimental.losses)": [[56, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental"]], "_arraywithmanipulationexperimental (class in ivy.data_classes.array.experimental.manipulation)": [[56, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental"]], "_arraywithnormsexperimental (class in ivy.data_classes.array.experimental.norms)": [[56, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental"]], "_arraywithrandomexperimental (class in ivy.data_classes.array.experimental.random)": [[56, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental"]], "_arraywithsearchingexperimental (class in ivy.data_classes.array.experimental.searching)": [[56, "ivy.data_classes.array.experimental.searching._ArrayWithSearchingExperimental"]], "_arraywithsetexperimental (class in ivy.data_classes.array.experimental.set)": [[56, "ivy.data_classes.array.experimental.set._ArrayWithSetExperimental"]], "_arraywithsortingexperimental (class in ivy.data_classes.array.experimental.sorting)": [[56, "ivy.data_classes.array.experimental.sorting._ArrayWithSortingExperimental"]], "_arraywithstatisticalexperimental (class in ivy.data_classes.array.experimental.statistical)": [[56, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental"]], "_arraywithutilityexperimental (class in ivy.data_classes.array.experimental.utility)": [[56, "ivy.data_classes.array.experimental.utility._ArrayWithUtilityExperimental"]], "_abc_impl (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental attribute)": [[56, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.conversions._arraywithconversionsexperimental attribute)": [[56, "ivy.data_classes.array.experimental.conversions._ArrayWithConversionsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental attribute)": [[56, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.data_type._arraywithdata_typeexperimental attribute)": [[56, "ivy.data_classes.array.experimental.data_type._ArrayWithData_typeExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.device._arraywithdeviceexperimental attribute)": [[56, "ivy.data_classes.array.experimental.device._ArrayWithDeviceExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental attribute)": [[56, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.general._arraywithgeneralexperimental attribute)": [[56, "ivy.data_classes.array.experimental.general._ArrayWithGeneralExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.gradients._arraywithgradientsexperimental attribute)": [[56, "ivy.data_classes.array.experimental.gradients._ArrayWithGradientsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.image._arraywithimageexperimental attribute)": [[56, "ivy.data_classes.array.experimental.image._ArrayWithImageExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental attribute)": [[56, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental attribute)": [[56, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental attribute)": [[56, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental attribute)": [[56, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental attribute)": [[56, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.random._arraywithrandomexperimental attribute)": [[56, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.searching._arraywithsearchingexperimental attribute)": [[56, "ivy.data_classes.array.experimental.searching._ArrayWithSearchingExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.set._arraywithsetexperimental attribute)": [[56, "ivy.data_classes.array.experimental.set._ArrayWithSetExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.sorting._arraywithsortingexperimental attribute)": [[56, "ivy.data_classes.array.experimental.sorting._ArrayWithSortingExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental attribute)": [[56, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.utility._arraywithutilityexperimental attribute)": [[56, "ivy.data_classes.array.experimental.utility._ArrayWithUtilityExperimental._abc_impl"]], "adaptive_avg_pool1d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[56, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.adaptive_avg_pool1d"]], "adaptive_avg_pool2d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[56, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.adaptive_avg_pool2d"]], "adaptive_max_pool2d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[56, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.adaptive_max_pool2d"]], "adaptive_max_pool3d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[56, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.adaptive_max_pool3d"]], "adjoint() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[56, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.adjoint"]], "allclose() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[56, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.allclose"]], "amax() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[56, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.amax"]], "amin() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[56, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.amin"]], "as_strided() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[56, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.as_strided"]], "associative_scan() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[56, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.associative_scan"]], "atleast_1d() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[56, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.atleast_1d"]], "atleast_2d() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[56, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.atleast_2d"]], "atleast_3d() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[56, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.atleast_3d"]], "avg_pool1d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[56, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.avg_pool1d"]], "avg_pool2d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[56, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.avg_pool2d"]], "avg_pool3d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[56, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.avg_pool3d"]], "batch_norm() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[56, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.batch_norm"]], "batched_outer() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[56, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.batched_outer"]], "bernoulli() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[56, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.bernoulli"]], "beta() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[56, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.beta"]], "binarizer() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[56, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.binarizer"]], "bincount() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[56, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.bincount"]], "blackman_window() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental method)": [[56, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.blackman_window"]], "celu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[56, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.celu"]], "column_stack() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[56, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.column_stack"]], "concat_from_sequence() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[56, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.concat_from_sequence"]], "cond() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[56, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.cond"]], "conj() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[56, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.conj"]], "copysign() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[56, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.copysign"]], "corrcoef() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[56, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.corrcoef"]], "count_nonzero() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[56, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.count_nonzero"]], "cov() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[56, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.cov"]], "cummax() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[56, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.cummax"]], "cummin() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[56, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.cummin"]], "dct() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[56, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.dct"]], "dft() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[56, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.dft"]], "diagflat() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[56, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.diagflat"]], "diff() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[56, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.diff"]], "digamma() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[56, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.digamma"]], "dirichlet() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[56, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.dirichlet"]], "dot() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[56, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.dot"]], "dsplit() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[56, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.dsplit"]], "dstack() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[56, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.dstack"]], "eig() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[56, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.eig"]], "eigh_tridiagonal() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[56, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.eigh_tridiagonal"]], "eigvals() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[56, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.eigvals"]], "elu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[56, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.elu"]], "embedding() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[56, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.embedding"]], "erfc() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[56, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.erfc"]], "erfinv() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[56, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.erfinv"]], "expand() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[56, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.expand"]], "eye_like() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental method)": [[56, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.eye_like"]], "fft() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[56, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.fft"]], "fft2() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[56, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.fft2"]], "fill_diagonal() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[56, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.fill_diagonal"]], "fix() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[56, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.fix"]], "flatten() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[56, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.flatten"]], "fliplr() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[56, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.fliplr"]], "flipud() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[56, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.flipud"]], "float_power() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[56, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.float_power"]], "fmax() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[56, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.fmax"]], "fmod() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[56, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.fmod"]], "fold() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[56, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.fold"]], "frexp() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[56, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.frexp"]], "gamma() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[56, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.gamma"]], "general_inner_product() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[56, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.general_inner_product"]], "gradient() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[56, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.gradient"]], "group_norm() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[56, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.group_norm"]], "hardshrink() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[56, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.hardshrink"]], "hardsilu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[56, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.hardsilu"]], "hardtanh() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[56, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.hardtanh"]], "heaviside() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[56, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.heaviside"]], "higher_order_moment() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[56, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.higher_order_moment"]], "hinge_embedding_loss() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[56, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.hinge_embedding_loss"]], "histogram() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[56, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.histogram"]], "hsplit() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[56, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.hsplit"]], "hstack() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[56, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.hstack"]], "huber_loss() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[56, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.huber_loss"]], "hypot() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[56, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.hypot"]], "i0() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[56, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.i0"]], "idct() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[56, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.idct"]], "ifft() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[56, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.ifft"]], "ifftn() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[56, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.ifftn"]], "igamma() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[56, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.igamma"]], "initialize_tucker() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[56, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.initialize_tucker"]], "instance_norm() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[56, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.instance_norm"]], "interpolate() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[56, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.interpolate"]], "isclose() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[56, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.isclose"]], "ivy.data_classes.array.experimental": [[56, "module-ivy.data_classes.array.experimental"]], "ivy.data_classes.array.experimental.activations": [[56, "module-ivy.data_classes.array.experimental.activations"]], "ivy.data_classes.array.experimental.conversions": [[56, "module-ivy.data_classes.array.experimental.conversions"]], "ivy.data_classes.array.experimental.creation": [[56, "module-ivy.data_classes.array.experimental.creation"]], "ivy.data_classes.array.experimental.data_type": [[56, "module-ivy.data_classes.array.experimental.data_type"]], "ivy.data_classes.array.experimental.device": [[56, "module-ivy.data_classes.array.experimental.device"]], "ivy.data_classes.array.experimental.elementwise": [[56, "module-ivy.data_classes.array.experimental.elementwise"]], "ivy.data_classes.array.experimental.general": [[56, "module-ivy.data_classes.array.experimental.general"]], "ivy.data_classes.array.experimental.gradients": [[56, "module-ivy.data_classes.array.experimental.gradients"]], "ivy.data_classes.array.experimental.image": [[56, "module-ivy.data_classes.array.experimental.image"]], "ivy.data_classes.array.experimental.layers": [[56, "module-ivy.data_classes.array.experimental.layers"]], "ivy.data_classes.array.experimental.linear_algebra": [[56, "module-ivy.data_classes.array.experimental.linear_algebra"]], "ivy.data_classes.array.experimental.losses": [[56, "module-ivy.data_classes.array.experimental.losses"]], "ivy.data_classes.array.experimental.manipulation": [[56, "module-ivy.data_classes.array.experimental.manipulation"]], "ivy.data_classes.array.experimental.norms": [[56, "module-ivy.data_classes.array.experimental.norms"]], "ivy.data_classes.array.experimental.random": [[56, "module-ivy.data_classes.array.experimental.random"]], "ivy.data_classes.array.experimental.searching": [[56, "module-ivy.data_classes.array.experimental.searching"]], "ivy.data_classes.array.experimental.set": [[56, "module-ivy.data_classes.array.experimental.set"]], "ivy.data_classes.array.experimental.sorting": [[56, "module-ivy.data_classes.array.experimental.sorting"]], "ivy.data_classes.array.experimental.statistical": [[56, "module-ivy.data_classes.array.experimental.statistical"]], "ivy.data_classes.array.experimental.utility": [[56, "module-ivy.data_classes.array.experimental.utility"]], "kl_div() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[56, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.kl_div"]], "kron() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[56, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.kron"]], "l1_loss() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[56, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.l1_loss"]], "l1_normalize() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[56, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.l1_normalize"]], "l2_normalize() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[56, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.l2_normalize"]], "ldexp() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[56, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.ldexp"]], "lerp() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[56, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.lerp"]], "lexsort() (ivy.data_classes.array.experimental.sorting._arraywithsortingexperimental method)": [[56, "ivy.data_classes.array.experimental.sorting._ArrayWithSortingExperimental.lexsort"]], "lgamma() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[56, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.lgamma"]], "log_poisson_loss() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[56, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.log_poisson_loss"]], "logit() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[56, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.logit"]], "logsigmoid() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[56, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.logsigmoid"]], "lp_normalize() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[56, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.lp_normalize"]], "make_svd_non_negative() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[56, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.make_svd_non_negative"]], "matricize() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[56, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.matricize"]], "matrix_exp() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[56, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.matrix_exp"]], "max_pool1d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[56, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.max_pool1d"]], "max_pool2d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[56, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.max_pool2d"]], "max_pool3d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[56, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.max_pool3d"]], "max_unpool1d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[56, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.max_unpool1d"]], "median() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[56, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.median"]], "mel_weight_matrix() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental static method)": [[56, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.mel_weight_matrix"]], "mode_dot() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[56, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.mode_dot"]], "modf() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[56, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.modf"]], "moveaxis() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[56, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.moveaxis"]], "multi_dot() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[56, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.multi_dot"]], "multi_mode_dot() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[56, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.multi_mode_dot"]], "nanmean() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[56, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.nanmean"]], "nanmedian() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[56, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.nanmedian"]], "nanmin() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[56, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.nanmin"]], "nanprod() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[56, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.nanprod"]], "nansum() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[56, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.nansum"]], "nextafter() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[56, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.nextafter"]], "optional_get_element() (ivy.data_classes.array.experimental.utility._arraywithutilityexperimental method)": [[56, "ivy.data_classes.array.experimental.utility._ArrayWithUtilityExperimental.optional_get_element"]], "pad() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[56, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.pad"]], "partial_fold() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[56, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.partial_fold"]], "partial_tensor_to_vec() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[56, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.partial_tensor_to_vec"]], "partial_tucker() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[56, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.partial_tucker"]], "partial_unfold() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[56, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.partial_unfold"]], "partial_vec_to_tensor() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[56, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.partial_vec_to_tensor"]], "poisson() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[56, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.poisson"]], "poisson_nll_loss() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[56, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.poisson_nll_loss"]], "polyval() (in module ivy.data_classes.array.experimental.creation)": [[56, "ivy.data_classes.array.experimental.creation.polyval"]], "prelu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[56, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.prelu"]], "put_along_axis() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[56, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.put_along_axis"]], "quantile() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[56, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.quantile"]], "reduce() (ivy.data_classes.array.experimental.general._arraywithgeneralexperimental method)": [[56, "ivy.data_classes.array.experimental.general._ArrayWithGeneralExperimental.reduce"]], "reduce_window() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[56, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.reduce_window"]], "relu6() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[56, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.relu6"]], "rfft() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[56, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.rfft"]], "rfftn() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[56, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.rfftn"]], "rot90() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[56, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.rot90"]], "scaled_tanh() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[56, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.scaled_tanh"]], "selu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[56, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.selu"]], "signbit() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[56, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.signbit"]], "silu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[56, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.silu"]], "sinc() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[56, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.sinc"]], "sliding_window() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[56, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.sliding_window"]], "smooth_l1_loss() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[56, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.smooth_l1_loss"]], "soft_margin_loss() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[56, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.soft_margin_loss"]], "soft_thresholding() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[56, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.soft_thresholding"]], "softshrink() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[56, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.softshrink"]], "sparsify_tensor() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[56, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.sparsify_tensor"]], "stft() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[56, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.stft"]], "svd_flip() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[56, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.svd_flip"]], "take() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[56, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.take"]], "take_along_axis() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[56, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.take_along_axis"]], "tanhshrink() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[56, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.tanhshrink"]], "tensor_train() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[56, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.tensor_train"]], "threshold() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[56, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.threshold"]], "thresholded_relu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[56, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.thresholded_relu"]], "top_k() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[56, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.top_k"]], "trilu() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental method)": [[56, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.trilu"]], "trim_zeros() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[56, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.trim_zeros"]], "truncated_svd() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[56, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.truncated_svd"]], "tt_matrix_to_tensor() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[56, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.tt_matrix_to_tensor"]], "tucker() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[56, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.tucker"]], "unflatten() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[56, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.unflatten"]], "unfold() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[56, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.unfold"]], "unique_consecutive() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[56, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.unique_consecutive"]], "unravel_index() (ivy.data_classes.array.experimental.searching._arraywithsearchingexperimental method)": [[56, "ivy.data_classes.array.experimental.searching._ArrayWithSearchingExperimental.unravel_index"]], "unsorted_segment_mean() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental method)": [[56, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.unsorted_segment_mean"]], "unsorted_segment_min() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental method)": [[56, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.unsorted_segment_min"]], "unsorted_segment_sum() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental method)": [[56, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.unsorted_segment_sum"]], "vsplit() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[56, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.vsplit"]], "vstack() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[56, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.vstack"]], "xlogy() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[56, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.xlogy"]], "zeta() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[56, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.zeta"]], "_arraywithgeneral (class in ivy.data_classes.array.general)": [[57, "ivy.data_classes.array.general._ArrayWithGeneral"]], "_abc_impl (ivy.data_classes.array.general._arraywithgeneral attribute)": [[57, "ivy.data_classes.array.general._ArrayWithGeneral._abc_impl"]], "all_equal() (ivy.data_classes.array.general._arraywithgeneral method)": [[57, "ivy.data_classes.array.general._ArrayWithGeneral.all_equal"]], "array_equal() (ivy.data_classes.array.general._arraywithgeneral method)": [[57, "ivy.data_classes.array.general._ArrayWithGeneral.array_equal"]], "assert_supports_inplace() (ivy.data_classes.array.general._arraywithgeneral method)": [[57, "ivy.data_classes.array.general._ArrayWithGeneral.assert_supports_inplace"]], "clip_matrix_norm() (ivy.data_classes.array.general._arraywithgeneral method)": [[57, "ivy.data_classes.array.general._ArrayWithGeneral.clip_matrix_norm"]], "clip_vector_norm() (ivy.data_classes.array.general._arraywithgeneral method)": [[57, "ivy.data_classes.array.general._ArrayWithGeneral.clip_vector_norm"]], "default() (ivy.data_classes.array.general._arraywithgeneral method)": [[57, "ivy.data_classes.array.general._ArrayWithGeneral.default"]], "einops_rearrange() (ivy.data_classes.array.general._arraywithgeneral method)": [[57, "ivy.data_classes.array.general._ArrayWithGeneral.einops_rearrange"]], "einops_reduce() (ivy.data_classes.array.general._arraywithgeneral method)": [[57, "ivy.data_classes.array.general._ArrayWithGeneral.einops_reduce"]], "einops_repeat() (ivy.data_classes.array.general._arraywithgeneral method)": [[57, "ivy.data_classes.array.general._ArrayWithGeneral.einops_repeat"]], "exists() (ivy.data_classes.array.general._arraywithgeneral method)": [[57, "ivy.data_classes.array.general._ArrayWithGeneral.exists"]], "fourier_encode() (ivy.data_classes.array.general._arraywithgeneral method)": [[57, "ivy.data_classes.array.general._ArrayWithGeneral.fourier_encode"]], "gather() (ivy.data_classes.array.general._arraywithgeneral method)": [[57, "ivy.data_classes.array.general._ArrayWithGeneral.gather"]], "gather_nd() (ivy.data_classes.array.general._arraywithgeneral method)": [[57, "ivy.data_classes.array.general._ArrayWithGeneral.gather_nd"]], "get_num_dims() (ivy.data_classes.array.general._arraywithgeneral method)": [[57, "ivy.data_classes.array.general._ArrayWithGeneral.get_num_dims"]], "has_nans() (ivy.data_classes.array.general._arraywithgeneral method)": [[57, "ivy.data_classes.array.general._ArrayWithGeneral.has_nans"]], "inplace_decrement() (ivy.data_classes.array.general._arraywithgeneral method)": [[57, "ivy.data_classes.array.general._ArrayWithGeneral.inplace_decrement"]], "inplace_increment() (ivy.data_classes.array.general._arraywithgeneral method)": [[57, "ivy.data_classes.array.general._ArrayWithGeneral.inplace_increment"]], "inplace_update() (ivy.data_classes.array.general._arraywithgeneral method)": [[57, "ivy.data_classes.array.general._ArrayWithGeneral.inplace_update"]], "is_array() (ivy.data_classes.array.general._arraywithgeneral method)": [[57, "ivy.data_classes.array.general._ArrayWithGeneral.is_array"]], "is_ivy_array() (ivy.data_classes.array.general._arraywithgeneral method)": [[57, "ivy.data_classes.array.general._ArrayWithGeneral.is_ivy_array"]], "is_ivy_container() (ivy.data_classes.array.general._arraywithgeneral method)": [[57, "ivy.data_classes.array.general._ArrayWithGeneral.is_ivy_container"]], "is_native_array() (ivy.data_classes.array.general._arraywithgeneral method)": [[57, "ivy.data_classes.array.general._ArrayWithGeneral.is_native_array"]], "isin() (ivy.data_classes.array.general._arraywithgeneral method)": [[57, "ivy.data_classes.array.general._ArrayWithGeneral.isin"]], "ivy.data_classes.array.general": [[57, "module-ivy.data_classes.array.general"]], "scatter_flat() (ivy.data_classes.array.general._arraywithgeneral method)": [[57, "ivy.data_classes.array.general._ArrayWithGeneral.scatter_flat"]], "scatter_nd() (ivy.data_classes.array.general._arraywithgeneral method)": [[57, "ivy.data_classes.array.general._ArrayWithGeneral.scatter_nd"]], "stable_divide() (ivy.data_classes.array.general._arraywithgeneral method)": [[57, "ivy.data_classes.array.general._ArrayWithGeneral.stable_divide"]], "stable_pow() (ivy.data_classes.array.general._arraywithgeneral method)": [[57, "ivy.data_classes.array.general._ArrayWithGeneral.stable_pow"]], "supports_inplace_updates() (ivy.data_classes.array.general._arraywithgeneral method)": [[57, "ivy.data_classes.array.general._ArrayWithGeneral.supports_inplace_updates"]], "to_file() (ivy.data_classes.array.general._arraywithgeneral method)": [[57, "ivy.data_classes.array.general._ArrayWithGeneral.to_file"]], "to_list() (ivy.data_classes.array.general._arraywithgeneral method)": [[57, "ivy.data_classes.array.general._ArrayWithGeneral.to_list"]], "to_numpy() (ivy.data_classes.array.general._arraywithgeneral method)": [[57, "ivy.data_classes.array.general._ArrayWithGeneral.to_numpy"]], "to_scalar() (ivy.data_classes.array.general._arraywithgeneral method)": [[57, "ivy.data_classes.array.general._ArrayWithGeneral.to_scalar"]], "value_is_nan() (ivy.data_classes.array.general._arraywithgeneral method)": [[57, "ivy.data_classes.array.general._ArrayWithGeneral.value_is_nan"]], "_arraywithgradients (class in ivy.data_classes.array.gradients)": [[58, "ivy.data_classes.array.gradients._ArrayWithGradients"]], "_abc_impl (ivy.data_classes.array.gradients._arraywithgradients attribute)": [[58, "ivy.data_classes.array.gradients._ArrayWithGradients._abc_impl"]], "adam_step() (ivy.data_classes.array.gradients._arraywithgradients method)": [[58, "ivy.data_classes.array.gradients._ArrayWithGradients.adam_step"]], "adam_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[58, "ivy.data_classes.array.gradients._ArrayWithGradients.adam_update"]], "gradient_descent_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[58, "ivy.data_classes.array.gradients._ArrayWithGradients.gradient_descent_update"]], "ivy.data_classes.array.gradients": [[58, "module-ivy.data_classes.array.gradients"]], "lamb_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[58, "ivy.data_classes.array.gradients._ArrayWithGradients.lamb_update"]], "lars_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[58, "ivy.data_classes.array.gradients._ArrayWithGradients.lars_update"]], "optimizer_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[58, "ivy.data_classes.array.gradients._ArrayWithGradients.optimizer_update"]], "stop_gradient() (ivy.data_classes.array.gradients._arraywithgradients method)": [[58, "ivy.data_classes.array.gradients._ArrayWithGradients.stop_gradient"]], "_arraywithimage (class in ivy.data_classes.array.image)": [[59, "ivy.data_classes.array.image._ArrayWithImage"]], "_abc_impl (ivy.data_classes.array.image._arraywithimage attribute)": [[59, "ivy.data_classes.array.image._ArrayWithImage._abc_impl"]], "ivy.data_classes.array.image": [[59, "module-ivy.data_classes.array.image"]], "_arraywithlayers (class in ivy.data_classes.array.layers)": [[60, "ivy.data_classes.array.layers._ArrayWithLayers"]], "_abc_impl (ivy.data_classes.array.layers._arraywithlayers attribute)": [[60, "ivy.data_classes.array.layers._ArrayWithLayers._abc_impl"]], "conv1d() (ivy.data_classes.array.layers._arraywithlayers method)": [[60, "ivy.data_classes.array.layers._ArrayWithLayers.conv1d"]], "conv1d_transpose() (ivy.data_classes.array.layers._arraywithlayers method)": [[60, "ivy.data_classes.array.layers._ArrayWithLayers.conv1d_transpose"]], "conv2d() (ivy.data_classes.array.layers._arraywithlayers method)": [[60, "ivy.data_classes.array.layers._ArrayWithLayers.conv2d"]], "conv2d_transpose() (ivy.data_classes.array.layers._arraywithlayers method)": [[60, "ivy.data_classes.array.layers._ArrayWithLayers.conv2d_transpose"]], "conv3d() (ivy.data_classes.array.layers._arraywithlayers method)": [[60, "ivy.data_classes.array.layers._ArrayWithLayers.conv3d"]], "conv3d_transpose() (ivy.data_classes.array.layers._arraywithlayers method)": [[60, "ivy.data_classes.array.layers._ArrayWithLayers.conv3d_transpose"]], "depthwise_conv2d() (ivy.data_classes.array.layers._arraywithlayers method)": [[60, "ivy.data_classes.array.layers._ArrayWithLayers.depthwise_conv2d"]], "dropout() (ivy.data_classes.array.layers._arraywithlayers method)": [[60, "ivy.data_classes.array.layers._ArrayWithLayers.dropout"]], "dropout1d() (ivy.data_classes.array.layers._arraywithlayers method)": [[60, "ivy.data_classes.array.layers._ArrayWithLayers.dropout1d"]], "dropout2d() (ivy.data_classes.array.layers._arraywithlayers method)": [[60, "ivy.data_classes.array.layers._ArrayWithLayers.dropout2d"]], "dropout3d() (ivy.data_classes.array.layers._arraywithlayers method)": [[60, "ivy.data_classes.array.layers._ArrayWithLayers.dropout3d"]], "ivy.data_classes.array.layers": [[60, "module-ivy.data_classes.array.layers"]], "linear() (ivy.data_classes.array.layers._arraywithlayers method)": [[60, "ivy.data_classes.array.layers._ArrayWithLayers.linear"]], "lstm_update() (ivy.data_classes.array.layers._arraywithlayers method)": [[60, "ivy.data_classes.array.layers._ArrayWithLayers.lstm_update"]], "multi_head_attention() (ivy.data_classes.array.layers._arraywithlayers method)": [[60, "ivy.data_classes.array.layers._ArrayWithLayers.multi_head_attention"]], "scaled_dot_product_attention() (ivy.data_classes.array.layers._arraywithlayers method)": [[60, "ivy.data_classes.array.layers._ArrayWithLayers.scaled_dot_product_attention"]], "_arraywithlinearalgebra (class in ivy.data_classes.array.linear_algebra)": [[61, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra"]], "_abc_impl (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra attribute)": [[61, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra._abc_impl"]], "cholesky() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[61, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.cholesky"]], "cross() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[61, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.cross"]], "det() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[61, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.det"]], "diag() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[61, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.diag"]], "diagonal() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[61, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.diagonal"]], "eig() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[61, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.eig"]], "eigh() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[61, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.eigh"]], "eigvalsh() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[61, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.eigvalsh"]], "inner() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[61, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.inner"]], "inv() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[61, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.inv"]], "ivy.data_classes.array.linear_algebra": [[61, "module-ivy.data_classes.array.linear_algebra"]], "matmul() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[61, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matmul"]], "matrix_norm() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[61, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matrix_norm"]], "matrix_power() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[61, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matrix_power"]], "matrix_rank() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[61, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matrix_rank"]], "matrix_transpose() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[61, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matrix_transpose"]], "outer() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[61, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.outer"]], "pinv() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[61, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.pinv"]], "qr() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[61, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.qr"]], "slogdet() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[61, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.slogdet"]], "solve() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[61, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.solve"]], "svd() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[61, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.svd"]], "svdvals() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[61, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.svdvals"]], "tensordot() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[61, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.tensordot"]], "tensorsolve() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[61, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.tensorsolve"]], "trace() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[61, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.trace"]], "vander() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[61, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.vander"]], "vecdot() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[61, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.vecdot"]], "vector_norm() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[61, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.vector_norm"]], "vector_to_skew_symmetric_matrix() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[61, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.vector_to_skew_symmetric_matrix"]], "_arraywithlosses (class in ivy.data_classes.array.losses)": [[62, "ivy.data_classes.array.losses._ArrayWithLosses"]], "_abc_impl (ivy.data_classes.array.losses._arraywithlosses attribute)": [[62, "ivy.data_classes.array.losses._ArrayWithLosses._abc_impl"]], "binary_cross_entropy() (ivy.data_classes.array.losses._arraywithlosses method)": [[62, "ivy.data_classes.array.losses._ArrayWithLosses.binary_cross_entropy"]], "cross_entropy() (ivy.data_classes.array.losses._arraywithlosses method)": [[62, "ivy.data_classes.array.losses._ArrayWithLosses.cross_entropy"]], "ivy.data_classes.array.losses": [[62, "module-ivy.data_classes.array.losses"]], "sparse_cross_entropy() (ivy.data_classes.array.losses._arraywithlosses method)": [[62, "ivy.data_classes.array.losses._ArrayWithLosses.sparse_cross_entropy"]], "_arraywithmanipulation (class in ivy.data_classes.array.manipulation)": [[63, "ivy.data_classes.array.manipulation._ArrayWithManipulation"]], "_abc_impl (ivy.data_classes.array.manipulation._arraywithmanipulation attribute)": [[63, "ivy.data_classes.array.manipulation._ArrayWithManipulation._abc_impl"]], "clip() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[63, "ivy.data_classes.array.manipulation._ArrayWithManipulation.clip"]], "concat() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[63, "ivy.data_classes.array.manipulation._ArrayWithManipulation.concat"]], "constant_pad() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[63, "ivy.data_classes.array.manipulation._ArrayWithManipulation.constant_pad"]], "expand_dims() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[63, "ivy.data_classes.array.manipulation._ArrayWithManipulation.expand_dims"]], "flip() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[63, "ivy.data_classes.array.manipulation._ArrayWithManipulation.flip"]], "ivy.data_classes.array.manipulation": [[63, "module-ivy.data_classes.array.manipulation"]], "permute_dims() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[63, "ivy.data_classes.array.manipulation._ArrayWithManipulation.permute_dims"]], "repeat() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[63, "ivy.data_classes.array.manipulation._ArrayWithManipulation.repeat"]], "reshape() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[63, "ivy.data_classes.array.manipulation._ArrayWithManipulation.reshape"]], "roll() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[63, "ivy.data_classes.array.manipulation._ArrayWithManipulation.roll"]], "split() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[63, "ivy.data_classes.array.manipulation._ArrayWithManipulation.split"]], "squeeze() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[63, "ivy.data_classes.array.manipulation._ArrayWithManipulation.squeeze"]], "stack() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[63, "ivy.data_classes.array.manipulation._ArrayWithManipulation.stack"]], "swapaxes() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[63, "ivy.data_classes.array.manipulation._ArrayWithManipulation.swapaxes"]], "tile() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[63, "ivy.data_classes.array.manipulation._ArrayWithManipulation.tile"]], "unstack() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[63, "ivy.data_classes.array.manipulation._ArrayWithManipulation.unstack"]], "view() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[63, "ivy.data_classes.array.manipulation._ArrayWithManipulation.view"]], "zero_pad() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[63, "ivy.data_classes.array.manipulation._ArrayWithManipulation.zero_pad"]], "_arraywithnorms (class in ivy.data_classes.array.norms)": [[64, "ivy.data_classes.array.norms._ArrayWithNorms"]], "_abc_impl (ivy.data_classes.array.norms._arraywithnorms attribute)": [[64, "ivy.data_classes.array.norms._ArrayWithNorms._abc_impl"]], "ivy.data_classes.array.norms": [[64, "module-ivy.data_classes.array.norms"]], "layer_norm() (ivy.data_classes.array.norms._arraywithnorms method)": [[64, "ivy.data_classes.array.norms._ArrayWithNorms.layer_norm"]], "_arraywithrandom (class in ivy.data_classes.array.random)": [[65, "ivy.data_classes.array.random._ArrayWithRandom"]], "_abc_impl (ivy.data_classes.array.random._arraywithrandom attribute)": [[65, "ivy.data_classes.array.random._ArrayWithRandom._abc_impl"]], "ivy.data_classes.array.random": [[65, "module-ivy.data_classes.array.random"]], "multinomial() (ivy.data_classes.array.random._arraywithrandom method)": [[65, "ivy.data_classes.array.random._ArrayWithRandom.multinomial"]], "randint() (ivy.data_classes.array.random._arraywithrandom method)": [[65, "ivy.data_classes.array.random._ArrayWithRandom.randint"]], "random_normal() (ivy.data_classes.array.random._arraywithrandom method)": [[65, "ivy.data_classes.array.random._ArrayWithRandom.random_normal"]], "random_uniform() (ivy.data_classes.array.random._arraywithrandom method)": [[65, "ivy.data_classes.array.random._ArrayWithRandom.random_uniform"]], "shuffle() (ivy.data_classes.array.random._arraywithrandom method)": [[65, "ivy.data_classes.array.random._ArrayWithRandom.shuffle"]], "_arraywithsearching (class in ivy.data_classes.array.searching)": [[66, "ivy.data_classes.array.searching._ArrayWithSearching"]], "_abc_impl (ivy.data_classes.array.searching._arraywithsearching attribute)": [[66, "ivy.data_classes.array.searching._ArrayWithSearching._abc_impl"]], "argmax() (ivy.data_classes.array.searching._arraywithsearching method)": [[66, "ivy.data_classes.array.searching._ArrayWithSearching.argmax"]], "argmin() (ivy.data_classes.array.searching._arraywithsearching method)": [[66, "ivy.data_classes.array.searching._ArrayWithSearching.argmin"]], "argwhere() (ivy.data_classes.array.searching._arraywithsearching method)": [[66, "ivy.data_classes.array.searching._ArrayWithSearching.argwhere"]], "ivy.data_classes.array.searching": [[66, "module-ivy.data_classes.array.searching"]], "nonzero() (ivy.data_classes.array.searching._arraywithsearching method)": [[66, "ivy.data_classes.array.searching._ArrayWithSearching.nonzero"]], "where() (ivy.data_classes.array.searching._arraywithsearching method)": [[66, "ivy.data_classes.array.searching._ArrayWithSearching.where"]], "_arraywithset (class in ivy.data_classes.array.set)": [[67, "ivy.data_classes.array.set._ArrayWithSet"]], "_abc_impl (ivy.data_classes.array.set._arraywithset attribute)": [[67, "ivy.data_classes.array.set._ArrayWithSet._abc_impl"]], "ivy.data_classes.array.set": [[67, "module-ivy.data_classes.array.set"]], "unique_all() (ivy.data_classes.array.set._arraywithset method)": [[67, "ivy.data_classes.array.set._ArrayWithSet.unique_all"]], "unique_counts() (ivy.data_classes.array.set._arraywithset method)": [[67, "ivy.data_classes.array.set._ArrayWithSet.unique_counts"]], "unique_inverse() (ivy.data_classes.array.set._arraywithset method)": [[67, "ivy.data_classes.array.set._ArrayWithSet.unique_inverse"]], "unique_values() (ivy.data_classes.array.set._arraywithset method)": [[67, "ivy.data_classes.array.set._ArrayWithSet.unique_values"]], "_arraywithsorting (class in ivy.data_classes.array.sorting)": [[68, "ivy.data_classes.array.sorting._ArrayWithSorting"]], "_abc_impl (ivy.data_classes.array.sorting._arraywithsorting attribute)": [[68, "ivy.data_classes.array.sorting._ArrayWithSorting._abc_impl"]], "argsort() (ivy.data_classes.array.sorting._arraywithsorting method)": [[68, "ivy.data_classes.array.sorting._ArrayWithSorting.argsort"]], "ivy.data_classes.array.sorting": [[68, "module-ivy.data_classes.array.sorting"]], "msort() (ivy.data_classes.array.sorting._arraywithsorting method)": [[68, "ivy.data_classes.array.sorting._ArrayWithSorting.msort"]], "searchsorted() (ivy.data_classes.array.sorting._arraywithsorting method)": [[68, "ivy.data_classes.array.sorting._ArrayWithSorting.searchsorted"]], "sort() (ivy.data_classes.array.sorting._arraywithsorting method)": [[68, "ivy.data_classes.array.sorting._ArrayWithSorting.sort"]], "_arraywithstatistical (class in ivy.data_classes.array.statistical)": [[69, "ivy.data_classes.array.statistical._ArrayWithStatistical"]], "_abc_impl (ivy.data_classes.array.statistical._arraywithstatistical attribute)": [[69, "ivy.data_classes.array.statistical._ArrayWithStatistical._abc_impl"]], "cumprod() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[69, "ivy.data_classes.array.statistical._ArrayWithStatistical.cumprod"]], "cumsum() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[69, "ivy.data_classes.array.statistical._ArrayWithStatistical.cumsum"]], "einsum() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[69, "ivy.data_classes.array.statistical._ArrayWithStatistical.einsum"]], "ivy.data_classes.array.statistical": [[69, "module-ivy.data_classes.array.statistical"]], "max() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[69, "ivy.data_classes.array.statistical._ArrayWithStatistical.max"]], "mean() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[69, "ivy.data_classes.array.statistical._ArrayWithStatistical.mean"]], "min() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[69, "ivy.data_classes.array.statistical._ArrayWithStatistical.min"]], "prod() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[69, "ivy.data_classes.array.statistical._ArrayWithStatistical.prod"]], "std() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[69, "ivy.data_classes.array.statistical._ArrayWithStatistical.std"]], "sum() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[69, "ivy.data_classes.array.statistical._ArrayWithStatistical.sum"]], "var() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[69, "ivy.data_classes.array.statistical._ArrayWithStatistical.var"]], "_arraywithutility (class in ivy.data_classes.array.utility)": [[70, "ivy.data_classes.array.utility._ArrayWithUtility"]], "_abc_impl (ivy.data_classes.array.utility._arraywithutility attribute)": [[70, "ivy.data_classes.array.utility._ArrayWithUtility._abc_impl"]], "all() (ivy.data_classes.array.utility._arraywithutility method)": [[70, "ivy.data_classes.array.utility._ArrayWithUtility.all"]], "any() (ivy.data_classes.array.utility._arraywithutility method)": [[70, "ivy.data_classes.array.utility._ArrayWithUtility.any"]], "ivy.data_classes.array.utility": [[70, "module-ivy.data_classes.array.utility"]], "_wrap_function() (in module ivy.data_classes.array.wrapping)": [[71, "ivy.data_classes.array.wrapping._wrap_function"]], "add_ivy_array_instance_methods() (in module ivy.data_classes.array.wrapping)": [[71, "ivy.data_classes.array.wrapping.add_ivy_array_instance_methods"]], "ivy.data_classes.array.wrapping": [[71, "module-ivy.data_classes.array.wrapping"]], "_containerwithactivations (class in ivy.data_classes.container.activations)": [[72, "ivy.data_classes.container.activations._ContainerWithActivations"]], "_abc_impl (ivy.data_classes.container.activations._containerwithactivations attribute)": [[72, "ivy.data_classes.container.activations._ContainerWithActivations._abc_impl"]], "_static_gelu() (ivy.data_classes.container.activations._containerwithactivations static method)": [[72, "ivy.data_classes.container.activations._ContainerWithActivations._static_gelu"]], "_static_hardswish() (ivy.data_classes.container.activations._containerwithactivations static method)": [[72, "ivy.data_classes.container.activations._ContainerWithActivations._static_hardswish"]], "_static_leaky_relu() (ivy.data_classes.container.activations._containerwithactivations static method)": [[72, "ivy.data_classes.container.activations._ContainerWithActivations._static_leaky_relu"]], "_static_log_softmax() (ivy.data_classes.container.activations._containerwithactivations static method)": [[72, "ivy.data_classes.container.activations._ContainerWithActivations._static_log_softmax"]], "_static_mish() (ivy.data_classes.container.activations._containerwithactivations static method)": [[72, "ivy.data_classes.container.activations._ContainerWithActivations._static_mish"]], "_static_relu() (ivy.data_classes.container.activations._containerwithactivations static method)": [[72, "ivy.data_classes.container.activations._ContainerWithActivations._static_relu"]], "_static_sigmoid() (ivy.data_classes.container.activations._containerwithactivations static method)": [[72, "ivy.data_classes.container.activations._ContainerWithActivations._static_sigmoid"]], "_static_softmax() (ivy.data_classes.container.activations._containerwithactivations static method)": [[72, "ivy.data_classes.container.activations._ContainerWithActivations._static_softmax"]], "_static_softplus() (ivy.data_classes.container.activations._containerwithactivations static method)": [[72, "ivy.data_classes.container.activations._ContainerWithActivations._static_softplus"]], "gelu() (ivy.data_classes.container.activations._containerwithactivations method)": [[72, "ivy.data_classes.container.activations._ContainerWithActivations.gelu"]], "hardswish() (ivy.data_classes.container.activations._containerwithactivations method)": [[72, "ivy.data_classes.container.activations._ContainerWithActivations.hardswish"]], "ivy.data_classes.container.activations": [[72, "module-ivy.data_classes.container.activations"]], "leaky_relu() (ivy.data_classes.container.activations._containerwithactivations method)": [[72, "ivy.data_classes.container.activations._ContainerWithActivations.leaky_relu"]], "log_softmax() (ivy.data_classes.container.activations._containerwithactivations method)": [[72, "ivy.data_classes.container.activations._ContainerWithActivations.log_softmax"]], "mish() (ivy.data_classes.container.activations._containerwithactivations method)": [[72, "ivy.data_classes.container.activations._ContainerWithActivations.mish"]], "relu() (ivy.data_classes.container.activations._containerwithactivations method)": [[72, "ivy.data_classes.container.activations._ContainerWithActivations.relu"]], "sigmoid() (ivy.data_classes.container.activations._containerwithactivations method)": [[72, "ivy.data_classes.container.activations._ContainerWithActivations.sigmoid"]], "softmax() (ivy.data_classes.container.activations._containerwithactivations method)": [[72, "ivy.data_classes.container.activations._ContainerWithActivations.softmax"]], "softplus() (ivy.data_classes.container.activations._containerwithactivations method)": [[72, "ivy.data_classes.container.activations._ContainerWithActivations.softplus"]], "containerbase (class in ivy.data_classes.container.base)": [[73, "ivy.data_classes.container.base.ContainerBase"]], "__getitem__() (ivy.data_classes.container.base.containerbase method)": [[73, "ivy.data_classes.container.base.ContainerBase.__getitem__"]], "__init__() (ivy.data_classes.container.base.containerbase method)": [[73, "ivy.data_classes.container.base.ContainerBase.__init__"]], "__setitem__() (ivy.data_classes.container.base.containerbase method)": [[73, "ivy.data_classes.container.base.ContainerBase.__setitem__"]], "_abc_impl (ivy.data_classes.container.base.containerbase attribute)": [[73, "ivy.data_classes.container.base.ContainerBase._abc_impl"]], "_cont_at_key_chains_input_as_dict() (ivy.data_classes.container.base.containerbase method)": [[73, "ivy.data_classes.container.base.ContainerBase._cont_at_key_chains_input_as_dict"]], "_cont_at_key_chains_input_as_seq() (ivy.data_classes.container.base.containerbase method)": [[73, "ivy.data_classes.container.base.ContainerBase._cont_at_key_chains_input_as_seq"]], "_cont_call_static_method_with_flexible_args() (ivy.data_classes.container.base.containerbase method)": [[73, "ivy.data_classes.container.base.ContainerBase._cont_call_static_method_with_flexible_args"]], "_cont_concat_unify() (ivy.data_classes.container.base.containerbase static method)": [[73, "ivy.data_classes.container.base.ContainerBase._cont_concat_unify"]], "_cont_get_dev() (ivy.data_classes.container.base.containerbase method)": [[73, "ivy.data_classes.container.base.ContainerBase._cont_get_dev"]], "_cont_get_dtype() (ivy.data_classes.container.base.containerbase method)": [[73, "ivy.data_classes.container.base.ContainerBase._cont_get_dtype"]], "_cont_get_shape() (ivy.data_classes.container.base.containerbase method)": [[73, "ivy.data_classes.container.base.ContainerBase._cont_get_shape"]], "_cont_get_shapes() (ivy.data_classes.container.base.containerbase method)": [[73, "ivy.data_classes.container.base.ContainerBase._cont_get_shapes"]], "_cont_ivy (ivy.data_classes.container.base.containerbase property)": [[73, "ivy.data_classes.container.base.ContainerBase._cont_ivy"]], "_cont_mean_unify() (ivy.data_classes.container.base.containerbase static method)": [[73, "ivy.data_classes.container.base.ContainerBase._cont_mean_unify"]], "_cont_prune_key_chains_input_as_dict() (ivy.data_classes.container.base.containerbase method)": [[73, "ivy.data_classes.container.base.ContainerBase._cont_prune_key_chains_input_as_dict"]], "_cont_prune_key_chains_input_as_seq() (ivy.data_classes.container.base.containerbase method)": [[73, "ivy.data_classes.container.base.ContainerBase._cont_prune_key_chains_input_as_seq"]], "_cont_slice_keys() (ivy.data_classes.container.base.containerbase method)": [[73, "ivy.data_classes.container.base.ContainerBase._cont_slice_keys"]], "_cont_sum_unify() (ivy.data_classes.container.base.containerbase static method)": [[73, "ivy.data_classes.container.base.ContainerBase._cont_sum_unify"]], "_get_queue_item() (ivy.data_classes.container.base.containerbase method)": [[73, "ivy.data_classes.container.base.ContainerBase._get_queue_item"]], "_is_jsonable() (in module ivy.data_classes.container.base)": [[73, "ivy.data_classes.container.base._is_jsonable"]], "_repr() (in module ivy.data_classes.container.base)": [[73, "ivy.data_classes.container.base._repr"]], "cont_all_false() (ivy.data_classes.container.base.containerbase method)": [[73, "ivy.data_classes.container.base.ContainerBase.cont_all_false"]], "cont_all_key_chains() (ivy.data_classes.container.base.containerbase method)": [[73, "ivy.data_classes.container.base.ContainerBase.cont_all_key_chains"]], "cont_all_true() (ivy.data_classes.container.base.containerbase method)": [[73, "ivy.data_classes.container.base.ContainerBase.cont_all_true"]], "cont_as_bools() (ivy.data_classes.container.base.containerbase method)": [[73, "ivy.data_classes.container.base.ContainerBase.cont_as_bools"]], "cont_assert_contains_sub_container() (ivy.data_classes.container.base.containerbase method)": [[73, "ivy.data_classes.container.base.ContainerBase.cont_assert_contains_sub_container"]], "cont_assert_contains_sub_structure() (ivy.data_classes.container.base.containerbase method)": [[73, "ivy.data_classes.container.base.ContainerBase.cont_assert_contains_sub_structure"]], "cont_assert_identical() (ivy.data_classes.container.base.containerbase static method)": [[73, "ivy.data_classes.container.base.ContainerBase.cont_assert_identical"]], "cont_assert_identical_structure() (ivy.data_classes.container.base.containerbase static method)": [[73, "ivy.data_classes.container.base.ContainerBase.cont_assert_identical_structure"]], "cont_at_key_chain() (ivy.data_classes.container.base.containerbase method)": [[73, "ivy.data_classes.container.base.ContainerBase.cont_at_key_chain"]], "cont_at_key_chains() (ivy.data_classes.container.base.containerbase method)": [[73, "ivy.data_classes.container.base.ContainerBase.cont_at_key_chains"]], "cont_at_keys() (ivy.data_classes.container.base.containerbase method)": [[73, "ivy.data_classes.container.base.ContainerBase.cont_at_keys"]], "cont_combine() (ivy.data_classes.container.base.containerbase static method)": [[73, "ivy.data_classes.container.base.ContainerBase.cont_combine"]], "cont_common_key_chains() (ivy.data_classes.container.base.containerbase static method)": [[73, "ivy.data_classes.container.base.ContainerBase.cont_common_key_chains"]], "cont_config (ivy.data_classes.container.base.containerbase property)": [[73, "ivy.data_classes.container.base.ContainerBase.cont_config"]], "cont_contains_sub_container() (ivy.data_classes.container.base.containerbase method)": [[73, "ivy.data_classes.container.base.ContainerBase.cont_contains_sub_container"]], "cont_contains_sub_structure() (ivy.data_classes.container.base.containerbase method)": [[73, "ivy.data_classes.container.base.ContainerBase.cont_contains_sub_structure"]], "cont_copy() (ivy.data_classes.container.base.containerbase method)": [[73, "ivy.data_classes.container.base.ContainerBase.cont_copy"]], "cont_create_if_absent() (ivy.data_classes.container.base.containerbase method)": [[73, "ivy.data_classes.container.base.ContainerBase.cont_create_if_absent"]], "cont_cutoff_at_depth() (ivy.data_classes.container.base.containerbase method)": [[73, "ivy.data_classes.container.base.ContainerBase.cont_cutoff_at_depth"]], "cont_cutoff_at_height() (ivy.data_classes.container.base.containerbase method)": [[73, "ivy.data_classes.container.base.ContainerBase.cont_cutoff_at_height"]], "cont_deep_copy() (ivy.data_classes.container.base.containerbase method)": [[73, "ivy.data_classes.container.base.ContainerBase.cont_deep_copy"]], "cont_dev (ivy.data_classes.container.base.containerbase property)": [[73, "ivy.data_classes.container.base.ContainerBase.cont_dev"]], "cont_dev_str (ivy.data_classes.container.base.containerbase property)": [[73, "ivy.data_classes.container.base.ContainerBase.cont_dev_str"]], "cont_diff() (ivy.data_classes.container.base.containerbase static method)": [[73, "ivy.data_classes.container.base.ContainerBase.cont_diff"]], "cont_dtype (ivy.data_classes.container.base.containerbase property)": [[73, "ivy.data_classes.container.base.ContainerBase.cont_dtype"]], "cont_duplicate_array_keychains() (ivy.data_classes.container.base.containerbase method)": [[73, "ivy.data_classes.container.base.ContainerBase.cont_duplicate_array_keychains"]], "cont_find_sub_container() (ivy.data_classes.container.base.containerbase method)": [[73, "ivy.data_classes.container.base.ContainerBase.cont_find_sub_container"]], "cont_find_sub_structure() (ivy.data_classes.container.base.containerbase method)": [[73, "ivy.data_classes.container.base.ContainerBase.cont_find_sub_structure"]], "cont_flatten_key_chain() (ivy.data_classes.container.base.containerbase static method)": [[73, "ivy.data_classes.container.base.ContainerBase.cont_flatten_key_chain"]], "cont_flatten_key_chains() (ivy.data_classes.container.base.containerbase method)": [[73, "ivy.data_classes.container.base.ContainerBase.cont_flatten_key_chains"]], "cont_format_key_chains() (ivy.data_classes.container.base.containerbase method)": [[73, "ivy.data_classes.container.base.ContainerBase.cont_format_key_chains"]], "cont_from_disk_as_hdf5() (ivy.data_classes.container.base.containerbase static method)": [[73, "ivy.data_classes.container.base.ContainerBase.cont_from_disk_as_hdf5"]], "cont_from_disk_as_json() (ivy.data_classes.container.base.containerbase static method)": [[73, "ivy.data_classes.container.base.ContainerBase.cont_from_disk_as_json"]], "cont_from_disk_as_pickled() (ivy.data_classes.container.base.containerbase static method)": [[73, "ivy.data_classes.container.base.ContainerBase.cont_from_disk_as_pickled"]], "cont_from_flat_list() (ivy.data_classes.container.base.containerbase method)": [[73, "ivy.data_classes.container.base.ContainerBase.cont_from_flat_list"]], "cont_handle_inplace() (ivy.data_classes.container.base.containerbase static method)": [[73, "ivy.data_classes.container.base.ContainerBase.cont_handle_inplace"]], "cont_has_key() (ivy.data_classes.container.base.containerbase method)": [[73, "ivy.data_classes.container.base.ContainerBase.cont_has_key"]], "cont_has_key_chain() (ivy.data_classes.container.base.containerbase method)": [[73, "ivy.data_classes.container.base.ContainerBase.cont_has_key_chain"]], "cont_identical() (ivy.data_classes.container.base.containerbase static method)": [[73, "ivy.data_classes.container.base.ContainerBase.cont_identical"]], "cont_identical_array_shapes() (ivy.data_classes.container.base.containerbase static method)": [[73, "ivy.data_classes.container.base.ContainerBase.cont_identical_array_shapes"]], "cont_identical_configs() (ivy.data_classes.container.base.containerbase static method)": [[73, "ivy.data_classes.container.base.ContainerBase.cont_identical_configs"]], "cont_identical_structure() (ivy.data_classes.container.base.containerbase static method)": [[73, "ivy.data_classes.container.base.ContainerBase.cont_identical_structure"]], "cont_if_exists() (ivy.data_classes.container.base.containerbase method)": [[73, "ivy.data_classes.container.base.ContainerBase.cont_if_exists"]], "cont_inplace_update() (ivy.data_classes.container.base.containerbase method)": [[73, "ivy.data_classes.container.base.ContainerBase.cont_inplace_update"]], "cont_ivy (ivy.data_classes.container.base.containerbase property)": [[73, "ivy.data_classes.container.base.ContainerBase.cont_ivy"]], "cont_key_chains_containing() (ivy.data_classes.container.base.containerbase method)": [[73, "ivy.data_classes.container.base.ContainerBase.cont_key_chains_containing"]], "cont_list_join() (ivy.data_classes.container.base.containerbase static method)": [[73, "ivy.data_classes.container.base.ContainerBase.cont_list_join"]], "cont_list_stack() (ivy.data_classes.container.base.containerbase static method)": [[73, "ivy.data_classes.container.base.ContainerBase.cont_list_stack"]], "cont_load() (ivy.data_classes.container.base.containerbase static method)": [[73, "ivy.data_classes.container.base.ContainerBase.cont_load"]], "cont_map() (ivy.data_classes.container.base.containerbase method)": [[73, "ivy.data_classes.container.base.ContainerBase.cont_map"]], "cont_map_sub_conts() (ivy.data_classes.container.base.containerbase method)": [[73, "ivy.data_classes.container.base.ContainerBase.cont_map_sub_conts"]], "cont_max_depth (ivy.data_classes.container.base.containerbase property)": [[73, "ivy.data_classes.container.base.ContainerBase.cont_max_depth"]], "cont_multi_map() (ivy.data_classes.container.base.containerbase static method)": [[73, "ivy.data_classes.container.base.ContainerBase.cont_multi_map"]], "cont_multi_map_in_function() (ivy.data_classes.container.base.containerbase static method)": [[73, "ivy.data_classes.container.base.ContainerBase.cont_multi_map_in_function"]], "cont_num_arrays() (ivy.data_classes.container.base.containerbase method)": [[73, "ivy.data_classes.container.base.ContainerBase.cont_num_arrays"]], "cont_overwrite_at_key_chain() (ivy.data_classes.container.base.containerbase method)": [[73, "ivy.data_classes.container.base.ContainerBase.cont_overwrite_at_key_chain"]], "cont_overwrite_at_key_chains() (ivy.data_classes.container.base.containerbase method)": [[73, "ivy.data_classes.container.base.ContainerBase.cont_overwrite_at_key_chains"]], "cont_prune_empty() (ivy.data_classes.container.base.containerbase method)": [[73, "ivy.data_classes.container.base.ContainerBase.cont_prune_empty"]], "cont_prune_key_chain() (ivy.data_classes.container.base.containerbase method)": [[73, "ivy.data_classes.container.base.ContainerBase.cont_prune_key_chain"]], "cont_prune_key_chains() (ivy.data_classes.container.base.containerbase method)": [[73, "ivy.data_classes.container.base.ContainerBase.cont_prune_key_chains"]], "cont_prune_key_from_key_chains() (ivy.data_classes.container.base.containerbase method)": [[73, "ivy.data_classes.container.base.ContainerBase.cont_prune_key_from_key_chains"]], "cont_prune_keys() (ivy.data_classes.container.base.containerbase method)": [[73, "ivy.data_classes.container.base.ContainerBase.cont_prune_keys"]], "cont_prune_keys_from_key_chains() (ivy.data_classes.container.base.containerbase method)": [[73, "ivy.data_classes.container.base.ContainerBase.cont_prune_keys_from_key_chains"]], "cont_reduce() (ivy.data_classes.container.base.containerbase static method)": [[73, "ivy.data_classes.container.base.ContainerBase.cont_reduce"]], "cont_remove_key_length_limit() (ivy.data_classes.container.base.containerbase method)": [[73, "ivy.data_classes.container.base.ContainerBase.cont_remove_key_length_limit"]], "cont_remove_print_limit() (ivy.data_classes.container.base.containerbase method)": [[73, "ivy.data_classes.container.base.ContainerBase.cont_remove_print_limit"]], "cont_reshape_like() (ivy.data_classes.container.base.containerbase method)": [[73, "ivy.data_classes.container.base.ContainerBase.cont_reshape_like"]], "cont_restructure() (ivy.data_classes.container.base.containerbase method)": [[73, "ivy.data_classes.container.base.ContainerBase.cont_restructure"]], "cont_restructure_key_chains() (ivy.data_classes.container.base.containerbase method)": [[73, "ivy.data_classes.container.base.ContainerBase.cont_restructure_key_chains"]], "cont_save() (ivy.data_classes.container.base.containerbase method)": [[73, "ivy.data_classes.container.base.ContainerBase.cont_save"]], "cont_set_at_key_chain() (ivy.data_classes.container.base.containerbase method)": [[73, "ivy.data_classes.container.base.ContainerBase.cont_set_at_key_chain"]], "cont_set_at_key_chains() (ivy.data_classes.container.base.containerbase method)": [[73, "ivy.data_classes.container.base.ContainerBase.cont_set_at_key_chains"]], "cont_set_at_keys() (ivy.data_classes.container.base.containerbase method)": [[73, "ivy.data_classes.container.base.ContainerBase.cont_set_at_keys"]], "cont_shape (ivy.data_classes.container.base.containerbase property)": [[73, "ivy.data_classes.container.base.ContainerBase.cont_shape"]], "cont_shapes (ivy.data_classes.container.base.containerbase property)": [[73, "ivy.data_classes.container.base.ContainerBase.cont_shapes"]], "cont_show() (ivy.data_classes.container.base.containerbase method)": [[73, "ivy.data_classes.container.base.ContainerBase.cont_show"]], "cont_show_sub_container() (ivy.data_classes.container.base.containerbase method)": [[73, "ivy.data_classes.container.base.ContainerBase.cont_show_sub_container"]], "cont_size_ordered_arrays() (ivy.data_classes.container.base.containerbase method)": [[73, "ivy.data_classes.container.base.ContainerBase.cont_size_ordered_arrays"]], "cont_slice_keys() (ivy.data_classes.container.base.containerbase method)": [[73, "ivy.data_classes.container.base.ContainerBase.cont_slice_keys"]], "cont_slice_via_key() (ivy.data_classes.container.base.containerbase method)": [[73, "ivy.data_classes.container.base.ContainerBase.cont_slice_via_key"]], "cont_sort_by_key() (ivy.data_classes.container.base.containerbase method)": [[73, "ivy.data_classes.container.base.ContainerBase.cont_sort_by_key"]], "cont_structural_diff() (ivy.data_classes.container.base.containerbase static method)": [[73, "ivy.data_classes.container.base.ContainerBase.cont_structural_diff"]], "cont_to_dict() (ivy.data_classes.container.base.containerbase method)": [[73, "ivy.data_classes.container.base.ContainerBase.cont_to_dict"]], "cont_to_disk_as_hdf5() (ivy.data_classes.container.base.containerbase method)": [[73, "ivy.data_classes.container.base.ContainerBase.cont_to_disk_as_hdf5"]], "cont_to_disk_as_json() (ivy.data_classes.container.base.containerbase method)": [[73, "ivy.data_classes.container.base.ContainerBase.cont_to_disk_as_json"]], "cont_to_disk_as_pickled() (ivy.data_classes.container.base.containerbase method)": [[73, "ivy.data_classes.container.base.ContainerBase.cont_to_disk_as_pickled"]], "cont_to_flat_list() (ivy.data_classes.container.base.containerbase method)": [[73, "ivy.data_classes.container.base.ContainerBase.cont_to_flat_list"]], "cont_to_iterator() (ivy.data_classes.container.base.containerbase method)": [[73, "ivy.data_classes.container.base.ContainerBase.cont_to_iterator"]], "cont_to_iterator_keys() (ivy.data_classes.container.base.containerbase method)": [[73, "ivy.data_classes.container.base.ContainerBase.cont_to_iterator_keys"]], "cont_to_iterator_values() (ivy.data_classes.container.base.containerbase method)": [[73, "ivy.data_classes.container.base.ContainerBase.cont_to_iterator_values"]], "cont_to_jsonable() (ivy.data_classes.container.base.containerbase method)": [[73, "ivy.data_classes.container.base.ContainerBase.cont_to_jsonable"]], "cont_to_nested_list() (ivy.data_classes.container.base.containerbase method)": [[73, "ivy.data_classes.container.base.ContainerBase.cont_to_nested_list"]], "cont_to_raw() (ivy.data_classes.container.base.containerbase method)": [[73, "ivy.data_classes.container.base.ContainerBase.cont_to_raw"]], "cont_trim_key() (ivy.data_classes.container.base.containerbase static method)": [[73, "ivy.data_classes.container.base.ContainerBase.cont_trim_key"]], "cont_try_kc() (ivy.data_classes.container.base.containerbase method)": [[73, "ivy.data_classes.container.base.ContainerBase.cont_try_kc"]], "cont_unify() (ivy.data_classes.container.base.containerbase static method)": [[73, "ivy.data_classes.container.base.ContainerBase.cont_unify"]], "cont_unstack_conts() (ivy.data_classes.container.base.containerbase method)": [[73, "ivy.data_classes.container.base.ContainerBase.cont_unstack_conts"]], "cont_update_config() (ivy.data_classes.container.base.containerbase method)": [[73, "ivy.data_classes.container.base.ContainerBase.cont_update_config"]], "cont_with_default_key_color() (ivy.data_classes.container.base.containerbase method)": [[73, "ivy.data_classes.container.base.ContainerBase.cont_with_default_key_color"]], "cont_with_entries_as_lists() (ivy.data_classes.container.base.containerbase method)": [[73, "ivy.data_classes.container.base.ContainerBase.cont_with_entries_as_lists"]], "cont_with_ivy_backend() (ivy.data_classes.container.base.containerbase method)": [[73, "ivy.data_classes.container.base.ContainerBase.cont_with_ivy_backend"]], "cont_with_key_length_limit() (ivy.data_classes.container.base.containerbase method)": [[73, "ivy.data_classes.container.base.ContainerBase.cont_with_key_length_limit"]], "cont_with_print_indent() (ivy.data_classes.container.base.containerbase method)": [[73, "ivy.data_classes.container.base.ContainerBase.cont_with_print_indent"]], "cont_with_print_limit() (ivy.data_classes.container.base.containerbase method)": [[73, "ivy.data_classes.container.base.ContainerBase.cont_with_print_limit"]], "cont_with_print_line_spacing() (ivy.data_classes.container.base.containerbase method)": [[73, "ivy.data_classes.container.base.ContainerBase.cont_with_print_line_spacing"]], "dynamic_backend (ivy.data_classes.container.base.containerbase property)": [[73, "ivy.data_classes.container.base.ContainerBase.dynamic_backend"]], "h5_file_size() (ivy.data_classes.container.base.containerbase static method)": [[73, "ivy.data_classes.container.base.ContainerBase.h5_file_size"]], "ivy.data_classes.container.base": [[73, "module-ivy.data_classes.container.base"]], "shuffle_h5_file() (ivy.data_classes.container.base.containerbase static method)": [[73, "ivy.data_classes.container.base.ContainerBase.shuffle_h5_file"]], "split_conts() (ivy.data_classes.container.base.containerbase method)": [[73, "ivy.data_classes.container.base.ContainerBase.split_conts"]], "_containerwithconversions (class in ivy.data_classes.container.conversions)": [[74, "ivy.data_classes.container.conversions._ContainerWithConversions"]], "_abc_impl (ivy.data_classes.container.conversions._containerwithconversions attribute)": [[74, "ivy.data_classes.container.conversions._ContainerWithConversions._abc_impl"]], "_static_to_ivy() (ivy.data_classes.container.conversions._containerwithconversions static method)": [[74, "ivy.data_classes.container.conversions._ContainerWithConversions._static_to_ivy"]], "_static_to_native() (ivy.data_classes.container.conversions._containerwithconversions static method)": [[74, "ivy.data_classes.container.conversions._ContainerWithConversions._static_to_native"]], "ivy.data_classes.container.conversions": [[74, "module-ivy.data_classes.container.conversions"]], "to_ivy() (ivy.data_classes.container.conversions._containerwithconversions method)": [[74, "ivy.data_classes.container.conversions._ContainerWithConversions.to_ivy"]], "to_native() (ivy.data_classes.container.conversions._containerwithconversions method)": [[74, "ivy.data_classes.container.conversions._ContainerWithConversions.to_native"]], "_containerwithcreation (class in ivy.data_classes.container.creation)": [[75, "ivy.data_classes.container.creation._ContainerWithCreation"]], "_abc_impl (ivy.data_classes.container.creation._containerwithcreation attribute)": [[75, "ivy.data_classes.container.creation._ContainerWithCreation._abc_impl"]], "_static_arange() (ivy.data_classes.container.creation._containerwithcreation static method)": [[75, "ivy.data_classes.container.creation._ContainerWithCreation._static_arange"]], "_static_asarray() (ivy.data_classes.container.creation._containerwithcreation static method)": [[75, "ivy.data_classes.container.creation._ContainerWithCreation._static_asarray"]], "_static_copy_array() (ivy.data_classes.container.creation._containerwithcreation static method)": [[75, "ivy.data_classes.container.creation._ContainerWithCreation._static_copy_array"]], "_static_empty() (ivy.data_classes.container.creation._containerwithcreation static method)": [[75, "ivy.data_classes.container.creation._ContainerWithCreation._static_empty"]], "_static_empty_like() (ivy.data_classes.container.creation._containerwithcreation static method)": [[75, "ivy.data_classes.container.creation._ContainerWithCreation._static_empty_like"]], "_static_eye() (ivy.data_classes.container.creation._containerwithcreation static method)": [[75, "ivy.data_classes.container.creation._ContainerWithCreation._static_eye"]], "_static_from_dlpack() (ivy.data_classes.container.creation._containerwithcreation static method)": [[75, "ivy.data_classes.container.creation._ContainerWithCreation._static_from_dlpack"]], "_static_full() (ivy.data_classes.container.creation._containerwithcreation static method)": [[75, "ivy.data_classes.container.creation._ContainerWithCreation._static_full"]], "_static_full_like() (ivy.data_classes.container.creation._containerwithcreation static method)": [[75, "ivy.data_classes.container.creation._ContainerWithCreation._static_full_like"]], "_static_linspace() (ivy.data_classes.container.creation._containerwithcreation static method)": [[75, "ivy.data_classes.container.creation._ContainerWithCreation._static_linspace"]], "_static_logspace() (ivy.data_classes.container.creation._containerwithcreation static method)": [[75, "ivy.data_classes.container.creation._ContainerWithCreation._static_logspace"]], "_static_meshgrid() (ivy.data_classes.container.creation._containerwithcreation static method)": [[75, "ivy.data_classes.container.creation._ContainerWithCreation._static_meshgrid"]], "_static_native_array() (ivy.data_classes.container.creation._containerwithcreation static method)": [[75, "ivy.data_classes.container.creation._ContainerWithCreation._static_native_array"]], "_static_one_hot() (ivy.data_classes.container.creation._containerwithcreation static method)": [[75, "ivy.data_classes.container.creation._ContainerWithCreation._static_one_hot"]], "_static_ones() (ivy.data_classes.container.creation._containerwithcreation static method)": [[75, "ivy.data_classes.container.creation._ContainerWithCreation._static_ones"]], "_static_ones_like() (ivy.data_classes.container.creation._containerwithcreation static method)": [[75, "ivy.data_classes.container.creation._ContainerWithCreation._static_ones_like"]], "_static_tril() (ivy.data_classes.container.creation._containerwithcreation static method)": [[75, "ivy.data_classes.container.creation._ContainerWithCreation._static_tril"]], "_static_triu() (ivy.data_classes.container.creation._containerwithcreation static method)": [[75, "ivy.data_classes.container.creation._ContainerWithCreation._static_triu"]], "_static_zeros() (ivy.data_classes.container.creation._containerwithcreation static method)": [[75, "ivy.data_classes.container.creation._ContainerWithCreation._static_zeros"]], "_static_zeros_like() (ivy.data_classes.container.creation._containerwithcreation static method)": [[75, "ivy.data_classes.container.creation._ContainerWithCreation._static_zeros_like"]], "asarray() (ivy.data_classes.container.creation._containerwithcreation method)": [[75, "ivy.data_classes.container.creation._ContainerWithCreation.asarray"]], "copy_array() (ivy.data_classes.container.creation._containerwithcreation method)": [[75, "ivy.data_classes.container.creation._ContainerWithCreation.copy_array"]], "empty_like() (ivy.data_classes.container.creation._containerwithcreation method)": [[75, "ivy.data_classes.container.creation._ContainerWithCreation.empty_like"]], "from_dlpack() (ivy.data_classes.container.creation._containerwithcreation method)": [[75, "ivy.data_classes.container.creation._ContainerWithCreation.from_dlpack"]], "frombuffer() (ivy.data_classes.container.creation._containerwithcreation method)": [[75, "ivy.data_classes.container.creation._ContainerWithCreation.frombuffer"]], "full_like() (ivy.data_classes.container.creation._containerwithcreation method)": [[75, "ivy.data_classes.container.creation._ContainerWithCreation.full_like"]], "ivy.data_classes.container.creation": [[75, "module-ivy.data_classes.container.creation"]], "linspace() (ivy.data_classes.container.creation._containerwithcreation method)": [[75, "ivy.data_classes.container.creation._ContainerWithCreation.linspace"]], "logspace() (ivy.data_classes.container.creation._containerwithcreation method)": [[75, "ivy.data_classes.container.creation._ContainerWithCreation.logspace"]], "meshgrid() (ivy.data_classes.container.creation._containerwithcreation method)": [[75, "ivy.data_classes.container.creation._ContainerWithCreation.meshgrid"]], "native_array() (ivy.data_classes.container.creation._containerwithcreation method)": [[75, "ivy.data_classes.container.creation._ContainerWithCreation.native_array"]], "one_hot() (ivy.data_classes.container.creation._containerwithcreation method)": [[75, "ivy.data_classes.container.creation._ContainerWithCreation.one_hot"]], "ones_like() (ivy.data_classes.container.creation._containerwithcreation method)": [[75, "ivy.data_classes.container.creation._ContainerWithCreation.ones_like"]], "static_frombuffer() (ivy.data_classes.container.creation._containerwithcreation static method)": [[75, "ivy.data_classes.container.creation._ContainerWithCreation.static_frombuffer"]], "static_triu_indices() (ivy.data_classes.container.creation._containerwithcreation static method)": [[75, "ivy.data_classes.container.creation._ContainerWithCreation.static_triu_indices"]], "tril() (ivy.data_classes.container.creation._containerwithcreation method)": [[75, "ivy.data_classes.container.creation._ContainerWithCreation.tril"]], "triu() (ivy.data_classes.container.creation._containerwithcreation method)": [[75, "ivy.data_classes.container.creation._ContainerWithCreation.triu"]], "triu_indices() (ivy.data_classes.container.creation._containerwithcreation method)": [[75, "ivy.data_classes.container.creation._ContainerWithCreation.triu_indices"]], "zeros_like() (ivy.data_classes.container.creation._containerwithcreation method)": [[75, "ivy.data_classes.container.creation._ContainerWithCreation.zeros_like"]], "_containerwithdatatypes (class in ivy.data_classes.container.data_type)": [[76, "ivy.data_classes.container.data_type._ContainerWithDataTypes"]], "_abc_impl (ivy.data_classes.container.data_type._containerwithdatatypes attribute)": [[76, "ivy.data_classes.container.data_type._ContainerWithDataTypes._abc_impl"]], "_static_astype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[76, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_astype"]], "_static_broadcast_arrays() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[76, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_broadcast_arrays"]], "_static_broadcast_to() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[76, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_broadcast_to"]], "_static_can_cast() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[76, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_can_cast"]], "_static_default_complex_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[76, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_default_complex_dtype"]], "_static_default_float_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[76, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_default_float_dtype"]], "_static_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[76, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_dtype"]], "_static_finfo() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[76, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_finfo"]], "_static_function_supported_dtypes() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[76, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_function_supported_dtypes"]], "_static_function_unsupported_dtypes() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[76, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_function_unsupported_dtypes"]], "_static_iinfo() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[76, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_iinfo"]], "_static_is_bool_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[76, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_bool_dtype"]], "_static_is_complex_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[76, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_complex_dtype"]], "_static_is_float_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[76, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_float_dtype"]], "_static_is_int_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[76, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_int_dtype"]], "_static_is_uint_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[76, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_uint_dtype"]], "_static_result_type() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[76, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_result_type"]], "astype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[76, "ivy.data_classes.container.data_type._ContainerWithDataTypes.astype"]], "broadcast_arrays() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[76, "ivy.data_classes.container.data_type._ContainerWithDataTypes.broadcast_arrays"]], "broadcast_to() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[76, "ivy.data_classes.container.data_type._ContainerWithDataTypes.broadcast_to"]], "can_cast() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[76, "ivy.data_classes.container.data_type._ContainerWithDataTypes.can_cast"]], "dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[76, "ivy.data_classes.container.data_type._ContainerWithDataTypes.dtype"]], "finfo() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[76, "ivy.data_classes.container.data_type._ContainerWithDataTypes.finfo"]], "iinfo() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[76, "ivy.data_classes.container.data_type._ContainerWithDataTypes.iinfo"]], "is_bool_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[76, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_bool_dtype"]], "is_complex_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[76, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_complex_dtype"]], "is_float_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[76, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_float_dtype"]], "is_int_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[76, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_int_dtype"]], "is_uint_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[76, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_uint_dtype"]], "ivy.data_classes.container.data_type": [[76, "module-ivy.data_classes.container.data_type"]], "result_type() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[76, "ivy.data_classes.container.data_type._ContainerWithDataTypes.result_type"]], "_containerwithdevice (class in ivy.data_classes.container.device)": [[77, "ivy.data_classes.container.device._ContainerWithDevice"]], "_abc_impl (ivy.data_classes.container.device._containerwithdevice attribute)": [[77, "ivy.data_classes.container.device._ContainerWithDevice._abc_impl"]], "_static_dev() (ivy.data_classes.container.device._containerwithdevice static method)": [[77, "ivy.data_classes.container.device._ContainerWithDevice._static_dev"]], "_static_to_device() (ivy.data_classes.container.device._containerwithdevice static method)": [[77, "ivy.data_classes.container.device._ContainerWithDevice._static_to_device"]], "dev() (ivy.data_classes.container.device._containerwithdevice method)": [[77, "ivy.data_classes.container.device._ContainerWithDevice.dev"]], "ivy.data_classes.container.device": [[77, "module-ivy.data_classes.container.device"]], "to_device() (ivy.data_classes.container.device._containerwithdevice method)": [[77, "ivy.data_classes.container.device._ContainerWithDevice.to_device"]], "_containerwithelementwise (class in ivy.data_classes.container.elementwise)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise"]], "_abc_impl (ivy.data_classes.container.elementwise._containerwithelementwise attribute)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise._abc_impl"]], "_static_abs() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_abs"]], "_static_acos() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_acos"]], "_static_acosh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_acosh"]], "_static_add() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_add"]], "_static_asin() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_asin"]], "_static_asinh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_asinh"]], "_static_atan() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_atan"]], "_static_atan2() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_atan2"]], "_static_atanh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_atanh"]], "_static_bitwise_and() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_and"]], "_static_bitwise_invert() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_invert"]], "_static_bitwise_left_shift() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_left_shift"]], "_static_bitwise_or() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_or"]], "_static_bitwise_right_shift() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_right_shift"]], "_static_bitwise_xor() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_xor"]], "_static_ceil() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_ceil"]], "_static_cos() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_cos"]], "_static_cosh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_cosh"]], "_static_deg2rad() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_deg2rad"]], "_static_divide() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_divide"]], "_static_equal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_equal"]], "_static_erf() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_erf"]], "_static_exp() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_exp"]], "_static_expm1() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_expm1"]], "_static_floor() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_floor"]], "_static_floor_divide() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_floor_divide"]], "_static_greater() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_greater"]], "_static_greater_equal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_greater_equal"]], "_static_isfinite() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_isfinite"]], "_static_isinf() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_isinf"]], "_static_isnan() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_isnan"]], "_static_isreal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_isreal"]], "_static_lcm() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_lcm"]], "_static_less() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_less"]], "_static_less_equal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_less_equal"]], "_static_log() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_log"]], "_static_log10() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_log10"]], "_static_log1p() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_log1p"]], "_static_log2() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_log2"]], "_static_logaddexp() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logaddexp"]], "_static_logical_and() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logical_and"]], "_static_logical_not() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logical_not"]], "_static_logical_or() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logical_or"]], "_static_logical_xor() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logical_xor"]], "_static_maximum() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_maximum"]], "_static_minimum() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_minimum"]], "_static_multiply() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_multiply"]], "_static_negative() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_negative"]], "_static_not_equal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_not_equal"]], "_static_positive() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_positive"]], "_static_pow() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_pow"]], "_static_rad2deg() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_rad2deg"]], "_static_reciprocal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_reciprocal"]], "_static_remainder() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_remainder"]], "_static_round() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_round"]], "_static_sign() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_sign"]], "_static_sin() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_sin"]], "_static_sinh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_sinh"]], "_static_sqrt() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_sqrt"]], "_static_square() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_square"]], "_static_subtract() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_subtract"]], "_static_tan() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_tan"]], "_static_tanh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_tanh"]], "_static_trapz() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_trapz"]], "_static_trunc() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_trunc"]], "_static_trunc_divide() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_trunc_divide"]], "abs() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise.abs"]], "acos() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise.acos"]], "acosh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise.acosh"]], "add() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise.add"]], "angle() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise.angle"]], "asin() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise.asin"]], "asinh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise.asinh"]], "atan() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise.atan"]], "atan2() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise.atan2"]], "atanh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise.atanh"]], "bitwise_and() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_and"]], "bitwise_invert() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_invert"]], "bitwise_left_shift() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_left_shift"]], "bitwise_or() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_or"]], "bitwise_right_shift() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_right_shift"]], "bitwise_xor() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_xor"]], "ceil() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise.ceil"]], "cos() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise.cos"]], "cosh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise.cosh"]], "deg2rad() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise.deg2rad"]], "divide() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise.divide"]], "equal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise.equal"]], "erf() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise.erf"]], "exp() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise.exp"]], "exp2() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise.exp2"]], "expm1() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise.expm1"]], "floor() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise.floor"]], "floor_divide() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise.floor_divide"]], "fmin() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise.fmin"]], "gcd() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise.gcd"]], "greater() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise.greater"]], "greater_equal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise.greater_equal"]], "imag() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise.imag"]], "isfinite() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise.isfinite"]], "isinf() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise.isinf"]], "isnan() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise.isnan"]], "isreal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise.isreal"]], "ivy.data_classes.container.elementwise": [[78, "module-ivy.data_classes.container.elementwise"]], "lcm() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise.lcm"]], "less() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise.less"]], "less_equal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise.less_equal"]], "log() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise.log"]], "log10() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise.log10"]], "log1p() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise.log1p"]], "log2() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise.log2"]], "logaddexp() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logaddexp"]], "logaddexp2() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logaddexp2"]], "logical_and() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logical_and"]], "logical_not() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logical_not"]], "logical_or() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logical_or"]], "logical_xor() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logical_xor"]], "maximum() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise.maximum"]], "minimum() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise.minimum"]], "multiply() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise.multiply"]], "nan_to_num() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise.nan_to_num"]], "negative() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise.negative"]], "not_equal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise.not_equal"]], "positive() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise.positive"]], "pow() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise.pow"]], "rad2deg() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise.rad2deg"]], "real() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise.real"]], "reciprocal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise.reciprocal"]], "remainder() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise.remainder"]], "round() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise.round"]], "sign() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise.sign"]], "sin() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise.sin"]], "sinh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise.sinh"]], "sqrt() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise.sqrt"]], "square() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise.square"]], "static_angle() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_angle"]], "static_exp2() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_exp2"]], "static_fmin() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_fmin"]], "static_gcd() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_gcd"]], "static_imag() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_imag"]], "static_logaddexp2() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_logaddexp2"]], "static_nan_to_num() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_nan_to_num"]], "static_real() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_real"]], "subtract() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise.subtract"]], "tan() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise.tan"]], "tanh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise.tanh"]], "trapz() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise.trapz"]], "trunc() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise.trunc"]], "trunc_divide() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[78, "ivy.data_classes.container.elementwise._ContainerWithElementwise.trunc_divide"]], "_containerwithactivationexperimental (class in ivy.data_classes.container.experimental.activations)": [[79, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental"]], "_containerwithconversionexperimental (class in ivy.data_classes.container.experimental.conversions)": [[79, "ivy.data_classes.container.experimental.conversions._ContainerWithConversionExperimental"]], "_containerwithcreationexperimental (class in ivy.data_classes.container.experimental.creation)": [[79, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental"]], "_containerwithdata_typeexperimental (class in ivy.data_classes.container.experimental.data_type)": [[79, "ivy.data_classes.container.experimental.data_type._ContainerWithData_typeExperimental"]], "_containerwithdeviceexperimental (class in ivy.data_classes.container.experimental.device)": [[79, "ivy.data_classes.container.experimental.device._ContainerWithDeviceExperimental"]], "_containerwithelementwiseexperimental (class in ivy.data_classes.container.experimental.elementwise)": [[79, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental"]], "_containerwithgeneralexperimental (class in ivy.data_classes.container.experimental.general)": [[79, "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental"]], "_containerwithgradientsexperimental (class in ivy.data_classes.container.experimental.gradients)": [[79, "ivy.data_classes.container.experimental.gradients._ContainerWithGradientsExperimental"]], "_containerwithimageexperimental (class in ivy.data_classes.container.experimental.image)": [[79, "ivy.data_classes.container.experimental.image._ContainerWithImageExperimental"]], "_containerwithlayersexperimental (class in ivy.data_classes.container.experimental.layers)": [[79, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental"]], "_containerwithlinearalgebraexperimental (class in ivy.data_classes.container.experimental.linear_algebra)": [[79, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental"]], "_containerwithlossesexperimental (class in ivy.data_classes.container.experimental.losses)": [[79, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental"]], "_containerwithmanipulationexperimental (class in ivy.data_classes.container.experimental.manipulation)": [[79, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental"]], "_containerwithnormsexperimental (class in ivy.data_classes.container.experimental.norms)": [[79, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental"]], "_containerwithrandomexperimental (class in ivy.data_classes.container.experimental.random)": [[79, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental"]], "_containerwithsearchingexperimental (class in ivy.data_classes.container.experimental.searching)": [[79, "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental"]], "_containerwithsetexperimental (class in ivy.data_classes.container.experimental.set)": [[79, "ivy.data_classes.container.experimental.set._ContainerWithSetExperimental"]], "_containerwithsortingexperimental (class in ivy.data_classes.container.experimental.sorting)": [[79, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental"]], "_containerwithstatisticalexperimental (class in ivy.data_classes.container.experimental.statistical)": [[79, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental"]], "_containerwithutilityexperimental (class in ivy.data_classes.container.experimental.utility)": [[79, "ivy.data_classes.container.experimental.utility._ContainerWithUtilityExperimental"]], "_abc_impl (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental attribute)": [[79, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.conversions._containerwithconversionexperimental attribute)": [[79, "ivy.data_classes.container.experimental.conversions._ContainerWithConversionExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental attribute)": [[79, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.data_type._containerwithdata_typeexperimental attribute)": [[79, "ivy.data_classes.container.experimental.data_type._ContainerWithData_typeExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.device._containerwithdeviceexperimental attribute)": [[79, "ivy.data_classes.container.experimental.device._ContainerWithDeviceExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental attribute)": [[79, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.general._containerwithgeneralexperimental attribute)": [[79, "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.gradients._containerwithgradientsexperimental attribute)": [[79, "ivy.data_classes.container.experimental.gradients._ContainerWithGradientsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.image._containerwithimageexperimental attribute)": [[79, "ivy.data_classes.container.experimental.image._ContainerWithImageExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental attribute)": [[79, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental attribute)": [[79, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental attribute)": [[79, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental attribute)": [[79, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental attribute)": [[79, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.random._containerwithrandomexperimental attribute)": [[79, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.searching._containerwithsearchingexperimental attribute)": [[79, "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.set._containerwithsetexperimental attribute)": [[79, "ivy.data_classes.container.experimental.set._ContainerWithSetExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental attribute)": [[79, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental attribute)": [[79, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.utility._containerwithutilityexperimental attribute)": [[79, "ivy.data_classes.container.experimental.utility._ContainerWithUtilityExperimental._abc_impl"]], "_static_celu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[79, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_celu"]], "_static_cummax() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[79, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental._static_cummax"]], "_static_cummin() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[79, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental._static_cummin"]], "_static_elu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[79, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_elu"]], "_static_fft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[79, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental._static_fft"]], "_static_fill_diagonal() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[79, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental._static_fill_diagonal"]], "_static_hardshrink() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[79, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_hardshrink"]], "_static_hardsilu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[79, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_hardsilu"]], "_static_hardtanh() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[79, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_hardtanh"]], "_static_hinge_embedding_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[79, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_hinge_embedding_loss"]], "_static_huber_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[79, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_huber_loss"]], "_static_kl_div() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[79, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_kl_div"]], "_static_l1_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[79, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_l1_loss"]], "_static_log_poisson_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[79, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_log_poisson_loss"]], "_static_nanmin() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[79, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental._static_nanmin"]], "_static_poisson_nll_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[79, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_poisson_nll_loss"]], "_static_put_along_axis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[79, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental._static_put_along_axis"]], "_static_reduce() (ivy.data_classes.container.experimental.general._containerwithgeneralexperimental static method)": [[79, "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental._static_reduce"]], "_static_scaled_tanh() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[79, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_scaled_tanh"]], "_static_silu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[79, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_silu"]], "_static_sliding_window() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[79, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental._static_sliding_window"]], "_static_smooth_l1_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[79, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_smooth_l1_loss"]], "_static_soft_margin_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[79, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_soft_margin_loss"]], "_static_softshrink() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[79, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_softshrink"]], "_static_take() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[79, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental._static_take"]], "_static_tanhshrink() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[79, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_tanhshrink"]], "_static_threshold() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[79, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_threshold"]], "_static_trilu() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[79, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental._static_trilu"]], "_static_trim_zeros() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[79, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental._static_trim_zeros"]], "_static_unflatten() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[79, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental._static_unflatten"]], "_static_unique_consecutive() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[79, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental._static_unique_consecutive"]], "adaptive_avg_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[79, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.adaptive_avg_pool1d"]], "adaptive_avg_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[79, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.adaptive_avg_pool2d"]], "adaptive_max_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[79, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.adaptive_max_pool2d"]], "adaptive_max_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[79, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.adaptive_max_pool3d"]], "adjoint() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[79, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.adjoint"]], "allclose() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[79, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.allclose"]], "amax() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[79, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.amax"]], "amin() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[79, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.amin"]], "as_strided() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[79, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.as_strided"]], "associative_scan() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[79, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.associative_scan"]], "atleast_1d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[79, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.atleast_1d"]], "atleast_2d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[79, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.atleast_2d"]], "atleast_3d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[79, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.atleast_3d"]], "avg_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[79, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.avg_pool1d"]], "avg_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[79, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.avg_pool2d"]], "avg_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[79, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.avg_pool3d"]], "batch_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[79, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.batch_norm"]], "batched_outer() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[79, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.batched_outer"]], "bernoulli() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[79, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.bernoulli"]], "beta() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[79, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.beta"]], "binarizer() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[79, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.binarizer"]], "bincount() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[79, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.bincount"]], "blackman_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[79, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.blackman_window"]], "broadcast_shapes() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[79, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.broadcast_shapes"]], "celu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[79, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.celu"]], "column_stack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[79, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.column_stack"]], "concat_from_sequence() (in module ivy.data_classes.container.experimental.manipulation)": [[79, "ivy.data_classes.container.experimental.manipulation.concat_from_sequence"]], "concat_from_sequence() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[79, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.concat_from_sequence"]], "cond() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[79, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.cond"]], "conj() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[79, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.conj"]], "copysign() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[79, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.copysign"]], "corrcoef() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[79, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.corrcoef"]], "count_nonzero() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[79, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.count_nonzero"]], "cov() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[79, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.cov"]], "cummax() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[79, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.cummax"]], "cummin() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[79, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.cummin"]], "dct() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[79, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.dct"]], "dft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[79, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.dft"]], "diagflat() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[79, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.diagflat"]], "diff() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[79, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.diff"]], "digamma() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[79, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.digamma"]], "dirichlet() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[79, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.dirichlet"]], "dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[79, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.dot"]], "dsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[79, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.dsplit"]], "dstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[79, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.dstack"]], "eig() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[79, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.eig"]], "eigh_tridiagonal() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[79, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.eigh_tridiagonal"]], "eigvals() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[79, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.eigvals"]], "elu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[79, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.elu"]], "embedding() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[79, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.embedding"]], "erfc() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[79, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.erfc"]], "erfinv() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[79, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.erfinv"]], "expand() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[79, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.expand"]], "eye_like() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[79, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.eye_like"]], "fft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[79, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.fft"]], "fill_diagonal() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[79, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.fill_diagonal"]], "fix() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[79, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.fix"]], "flatten() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[79, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.flatten"]], "fliplr() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[79, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.fliplr"]], "flipud() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[79, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.flipud"]], "float_power() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[79, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.float_power"]], "fmax() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[79, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.fmax"]], "fmod() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[79, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.fmod"]], "fold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[79, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.fold"]], "frexp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[79, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.frexp"]], "gamma() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[79, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.gamma"]], "gradient() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[79, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.gradient"]], "group_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[79, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.group_norm"]], "hamming_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[79, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.hamming_window"]], "hann_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[79, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.hann_window"]], "hardshrink() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[79, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.hardshrink"]], "hardsilu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[79, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.hardsilu"]], "hardtanh() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[79, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.hardtanh"]], "heaviside() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[79, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.heaviside"]], "higher_order_moment() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[79, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.higher_order_moment"]], "hinge_embedding_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[79, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.hinge_embedding_loss"]], "histogram() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[79, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.histogram"]], "hsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[79, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.hsplit"]], "hstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[79, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.hstack"]], "huber_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[79, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.huber_loss"]], "hypot() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[79, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.hypot"]], "i0() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[79, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.i0"]], "idct() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[79, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.idct"]], "ifft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[79, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.ifft"]], "ifftn() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[79, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.ifftn"]], "igamma() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[79, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.igamma"]], "initialize_tucker() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[79, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.initialize_tucker"]], "instance_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[79, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.instance_norm"]], "interpolate() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[79, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.interpolate"]], "invert_permutation() (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental method)": [[79, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental.invert_permutation"]], "isclose() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[79, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.isclose"]], "ivy.data_classes.container.experimental": [[79, "module-ivy.data_classes.container.experimental"]], "ivy.data_classes.container.experimental.activations": [[79, "module-ivy.data_classes.container.experimental.activations"]], "ivy.data_classes.container.experimental.conversions": [[79, "module-ivy.data_classes.container.experimental.conversions"]], "ivy.data_classes.container.experimental.creation": [[79, "module-ivy.data_classes.container.experimental.creation"]], "ivy.data_classes.container.experimental.data_type": [[79, "module-ivy.data_classes.container.experimental.data_type"]], "ivy.data_classes.container.experimental.device": [[79, "module-ivy.data_classes.container.experimental.device"]], "ivy.data_classes.container.experimental.elementwise": [[79, "module-ivy.data_classes.container.experimental.elementwise"]], "ivy.data_classes.container.experimental.general": [[79, "module-ivy.data_classes.container.experimental.general"]], "ivy.data_classes.container.experimental.gradients": [[79, "module-ivy.data_classes.container.experimental.gradients"]], "ivy.data_classes.container.experimental.image": [[79, "module-ivy.data_classes.container.experimental.image"]], "ivy.data_classes.container.experimental.layers": [[79, "module-ivy.data_classes.container.experimental.layers"]], "ivy.data_classes.container.experimental.linear_algebra": [[79, "module-ivy.data_classes.container.experimental.linear_algebra"]], "ivy.data_classes.container.experimental.losses": [[79, "module-ivy.data_classes.container.experimental.losses"]], "ivy.data_classes.container.experimental.manipulation": [[79, "module-ivy.data_classes.container.experimental.manipulation"]], "ivy.data_classes.container.experimental.norms": [[79, "module-ivy.data_classes.container.experimental.norms"]], "ivy.data_classes.container.experimental.random": [[79, "module-ivy.data_classes.container.experimental.random"]], "ivy.data_classes.container.experimental.searching": [[79, "module-ivy.data_classes.container.experimental.searching"]], "ivy.data_classes.container.experimental.set": [[79, "module-ivy.data_classes.container.experimental.set"]], "ivy.data_classes.container.experimental.sorting": [[79, "module-ivy.data_classes.container.experimental.sorting"]], "ivy.data_classes.container.experimental.statistical": [[79, "module-ivy.data_classes.container.experimental.statistical"]], "ivy.data_classes.container.experimental.utility": [[79, "module-ivy.data_classes.container.experimental.utility"]], "kaiser_bessel_derived_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[79, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.kaiser_bessel_derived_window"]], "kaiser_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[79, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.kaiser_window"]], "kl_div() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[79, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.kl_div"]], "kron() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[79, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.kron"]], "l1_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[79, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.l1_loss"]], "l1_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[79, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.l1_normalize"]], "l2_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[79, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.l2_normalize"]], "ldexp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[79, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.ldexp"]], "lerp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[79, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.lerp"]], "lexsort() (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental method)": [[79, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental.lexsort"]], "lgamma() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[79, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.lgamma"]], "log_poisson_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[79, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.log_poisson_loss"]], "logit() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[79, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.logit"]], "logsigmoid() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[79, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.logsigmoid"]], "lp_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[79, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.lp_normalize"]], "make_svd_non_negative() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[79, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.make_svd_non_negative"]], "matricize() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[79, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.matricize"]], "matrix_exp() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[79, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.matrix_exp"]], "max_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[79, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.max_pool1d"]], "max_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[79, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.max_pool2d"]], "max_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[79, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.max_pool3d"]], "max_unpool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[79, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.max_unpool1d"]], "median() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[79, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.median"]], "mel_weight_matrix() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[79, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.mel_weight_matrix"]], "mode_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[79, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.mode_dot"]], "modf() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[79, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.modf"]], "moveaxis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[79, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.moveaxis"]], "multi_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[79, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.multi_dot"]], "multi_mode_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[79, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.multi_mode_dot"]], "nanmean() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[79, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.nanmean"]], "nanmedian() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[79, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.nanmedian"]], "nanmin() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[79, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.nanmin"]], "nanprod() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[79, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.nanprod"]], "nansum() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[79, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.nansum"]], "nextafter() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[79, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.nextafter"]], "optional_get_element() (ivy.data_classes.container.experimental.utility._containerwithutilityexperimental method)": [[79, "ivy.data_classes.container.experimental.utility._ContainerWithUtilityExperimental.optional_get_element"]], "pad() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[79, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.pad"]], "partial_fold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[79, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.partial_fold"]], "partial_tensor_to_vec() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[79, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.partial_tensor_to_vec"]], "partial_tucker() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[79, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.partial_tucker"]], "partial_unfold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[79, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.partial_unfold"]], "partial_vec_to_tensor() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[79, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.partial_vec_to_tensor"]], "poisson() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[79, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.poisson"]], "poisson_nll_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[79, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.poisson_nll_loss"]], "polyval() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[79, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.polyval"]], "prelu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[79, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.prelu"]], "put_along_axis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[79, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.put_along_axis"]], "quantile() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[79, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.quantile"]], "reduce() (ivy.data_classes.container.experimental.general._containerwithgeneralexperimental method)": [[79, "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental.reduce"]], "relu6() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[79, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.relu6"]], "rfft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[79, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.rfft"]], "rfftn() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[79, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.rfftn"]], "rot90() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[79, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.rot90"]], "scaled_tanh() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[79, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.scaled_tanh"]], "selu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[79, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.selu"]], "signbit() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[79, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.signbit"]], "silu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[79, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.silu"]], "sinc() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[79, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.sinc"]], "sliding_window() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[79, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.sliding_window"]], "smooth_l1_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[79, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.smooth_l1_loss"]], "soft_margin_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[79, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.soft_margin_loss"]], "soft_thresholding() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[79, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.soft_thresholding"]], "softshrink() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[79, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.softshrink"]], "sparsify_tensor() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[79, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.sparsify_tensor"]], "static_adaptive_avg_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[79, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_adaptive_avg_pool1d"]], "static_adaptive_avg_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[79, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_adaptive_avg_pool2d"]], "static_adaptive_max_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[79, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_adaptive_max_pool2d"]], "static_adaptive_max_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[79, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_adaptive_max_pool3d"]], "static_adjoint() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[79, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_adjoint"]], "static_allclose() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[79, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_allclose"]], "static_amax() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[79, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_amax"]], "static_amin() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[79, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_amin"]], "static_as_strided() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[79, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_as_strided"]], "static_atleast_1d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[79, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_atleast_1d"]], "static_atleast_2d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[79, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_atleast_2d"]], "static_atleast_3d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[79, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_atleast_3d"]], "static_avg_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[79, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_avg_pool1d"]], "static_avg_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[79, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_avg_pool2d"]], "static_avg_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[79, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_avg_pool3d"]], "static_batch_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[79, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_batch_norm"]], "static_batched_outer() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[79, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_batched_outer"]], "static_bernoulli() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[79, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_bernoulli"]], "static_beta() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[79, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_beta"]], "static_binarizer() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[79, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_binarizer"]], "static_bincount() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[79, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_bincount"]], "static_blackman_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[79, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_blackman_window"]], "static_broadcast_shapes() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[79, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_broadcast_shapes"]], "static_column_stack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[79, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_column_stack"]], "static_concat_from_sequence() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[79, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_concat_from_sequence"]], "static_cond() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[79, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_cond"]], "static_conj() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[79, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_conj"]], "static_copysign() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[79, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_copysign"]], "static_corrcoef() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[79, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_corrcoef"]], "static_count_nonzero() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[79, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_count_nonzero"]], "static_cov() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[79, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_cov"]], "static_dct() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[79, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_dct"]], "static_dft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[79, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_dft"]], "static_diagflat() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[79, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_diagflat"]], "static_diff() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[79, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_diff"]], "static_digamma() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[79, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_digamma"]], "static_dirichlet() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[79, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_dirichlet"]], "static_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[79, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_dot"]], "static_dsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[79, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_dsplit"]], "static_dstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[79, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_dstack"]], "static_eig() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[79, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_eig"]], "static_eigh_tridiagonal() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[79, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_eigh_tridiagonal"]], "static_eigvals() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[79, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_eigvals"]], "static_embedding() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[79, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_embedding"]], "static_erfc() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[79, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_erfc"]], "static_erfinv() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[79, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_erfinv"]], "static_expand() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[79, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_expand"]], "static_eye_like() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[79, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_eye_like"]], "static_fix() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[79, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_fix"]], "static_flatten() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[79, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_flatten"]], "static_fliplr() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[79, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_fliplr"]], "static_flipud() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[79, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_flipud"]], "static_float_power() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[79, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_float_power"]], "static_fmax() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[79, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_fmax"]], "static_fmod() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[79, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_fmod"]], "static_fold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[79, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_fold"]], "static_frexp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[79, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_frexp"]], "static_gamma() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[79, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_gamma"]], "static_gradient() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[79, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_gradient"]], "static_group_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[79, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_group_norm"]], "static_hamming_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[79, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_hamming_window"]], "static_hann_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[79, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_hann_window"]], "static_heaviside() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[79, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_heaviside"]], "static_higher_order_moment() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[79, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_higher_order_moment"]], "static_histogram() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[79, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_histogram"]], "static_hsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[79, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_hsplit"]], "static_hstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[79, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_hstack"]], "static_hypot() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[79, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_hypot"]], "static_i0() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[79, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_i0"]], "static_idct() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[79, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_idct"]], "static_ifft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[79, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_ifft"]], "static_ifftn() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[79, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_ifftn"]], "static_igamma() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[79, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_igamma"]], "static_initialize_tucker() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[79, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_initialize_tucker"]], "static_instance_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[79, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_instance_norm"]], "static_interpolate() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[79, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_interpolate"]], "static_invert_permutation() (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental static method)": [[79, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental.static_invert_permutation"]], "static_isclose() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[79, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_isclose"]], "static_kaiser_bessel_derived_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[79, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_kaiser_bessel_derived_window"]], "static_kaiser_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[79, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_kaiser_window"]], "static_kron() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[79, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_kron"]], "static_l1_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[79, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_l1_normalize"]], "static_l2_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[79, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_l2_normalize"]], "static_ldexp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[79, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_ldexp"]], "static_lerp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[79, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_lerp"]], "static_lexsort() (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental static method)": [[79, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental.static_lexsort"]], "static_lgamma() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[79, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_lgamma"]], "static_logit() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[79, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_logit"]], "static_logsigmoid() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[79, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_logsigmoid"]], "static_lp_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[79, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_lp_normalize"]], "static_make_svd_non_negative() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[79, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_make_svd_non_negative"]], "static_matricize() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[79, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_matricize"]], "static_matrix_exp() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[79, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_matrix_exp"]], "static_max_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[79, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_max_pool1d"]], "static_max_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[79, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_max_pool2d"]], "static_max_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[79, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_max_pool3d"]], "static_max_unpool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[79, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_max_unpool1d"]], "static_median() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[79, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_median"]], "static_mel_weight_matrix() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[79, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_mel_weight_matrix"]], "static_mode_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[79, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_mode_dot"]], "static_modf() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[79, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_modf"]], "static_moveaxis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[79, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_moveaxis"]], "static_multi_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[79, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_multi_dot"]], "static_multi_mode_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[79, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_multi_mode_dot"]], "static_nanmean() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[79, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_nanmean"]], "static_nanmedian() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[79, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_nanmedian"]], "static_nanprod() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[79, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_nanprod"]], "static_nansum() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[79, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_nansum"]], "static_nextafter() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[79, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_nextafter"]], "static_optional_get_element() (ivy.data_classes.container.experimental.utility._containerwithutilityexperimental static method)": [[79, "ivy.data_classes.container.experimental.utility._ContainerWithUtilityExperimental.static_optional_get_element"]], "static_pad() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[79, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_pad"]], "static_partial_fold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[79, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_partial_fold"]], "static_partial_tensor_to_vec() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[79, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_partial_tensor_to_vec"]], "static_partial_tucker() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[79, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_partial_tucker"]], "static_partial_unfold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[79, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_partial_unfold"]], "static_partial_vec_to_tensor() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[79, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_partial_vec_to_tensor"]], "static_poisson() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[79, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_poisson"]], "static_polyval() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[79, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_polyval"]], "static_prelu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[79, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_prelu"]], "static_quantile() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[79, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_quantile"]], "static_relu6() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[79, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_relu6"]], "static_rfft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[79, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_rfft"]], "static_rfftn() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[79, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_rfftn"]], "static_rnn() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[79, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_rnn"]], "static_rot90() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[79, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_rot90"]], "static_selu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[79, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_selu"]], "static_signbit() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[79, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_signbit"]], "static_sinc() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[79, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_sinc"]], "static_soft_thresholding() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[79, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_soft_thresholding"]], "static_sparsify_tensor() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[79, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_sparsify_tensor"]], "static_stft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[79, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_stft"]], "static_svd_flip() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[79, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_svd_flip"]], "static_take_along_axis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[79, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_take_along_axis"]], "static_tensor_train() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[79, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_tensor_train"]], "static_thresholded_relu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[79, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_thresholded_relu"]], "static_top_k() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[79, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_top_k"]], "static_tril_indices() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[79, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_tril_indices"]], "static_truncated_svd() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[79, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_truncated_svd"]], "static_tt_matrix_to_tensor() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[79, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_tt_matrix_to_tensor"]], "static_tucker() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[79, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_tucker"]], "static_unfold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[79, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_unfold"]], "static_unravel_index() (ivy.data_classes.container.experimental.searching._containerwithsearchingexperimental static method)": [[79, "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental.static_unravel_index"]], "static_unsorted_segment_mean() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[79, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_unsorted_segment_mean"]], "static_unsorted_segment_min() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[79, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_unsorted_segment_min"]], "static_unsorted_segment_sum() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[79, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_unsorted_segment_sum"]], "static_vorbis_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[79, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_vorbis_window"]], "static_vsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[79, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_vsplit"]], "static_vstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[79, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_vstack"]], "static_xlogy() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[79, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_xlogy"]], "static_zeta() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[79, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_zeta"]], "stft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[79, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.stft"]], "svd_flip() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[79, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.svd_flip"]], "take() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[79, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.take"]], "take_along_axis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[79, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.take_along_axis"]], "tanhshrink() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[79, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.tanhshrink"]], "tensor_train() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[79, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.tensor_train"]], "threshold() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[79, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.threshold"]], "thresholded_relu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[79, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.thresholded_relu"]], "top_k() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[79, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.top_k"]], "tril_indices() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[79, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.tril_indices"]], "trilu() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[79, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.trilu"]], "trim_zeros() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[79, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.trim_zeros"]], "truncated_svd() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[79, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.truncated_svd"]], "tt_matrix_to_tensor() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[79, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.tt_matrix_to_tensor"]], "tucker() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[79, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.tucker"]], "unflatten() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[79, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.unflatten"]], "unfold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[79, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.unfold"]], "unique_consecutive() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[79, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.unique_consecutive"]], "unravel_index() (ivy.data_classes.container.experimental.searching._containerwithsearchingexperimental method)": [[79, "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental.unravel_index"]], "unsorted_segment_mean() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[79, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.unsorted_segment_mean"]], "unsorted_segment_min() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[79, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.unsorted_segment_min"]], "unsorted_segment_sum() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[79, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.unsorted_segment_sum"]], "vorbis_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[79, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.vorbis_window"]], "vsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[79, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.vsplit"]], "vstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[79, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.vstack"]], "xlogy() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[79, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.xlogy"]], "zeta() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[79, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.zeta"]], "_containerwithgeneral (class in ivy.data_classes.container.general)": [[80, "ivy.data_classes.container.general._ContainerWithGeneral"]], "_abc_impl (ivy.data_classes.container.general._containerwithgeneral attribute)": [[80, "ivy.data_classes.container.general._ContainerWithGeneral._abc_impl"]], "_static_all_equal() (ivy.data_classes.container.general._containerwithgeneral static method)": [[80, "ivy.data_classes.container.general._ContainerWithGeneral._static_all_equal"]], "_static_array_equal() (ivy.data_classes.container.general._containerwithgeneral static method)": [[80, "ivy.data_classes.container.general._ContainerWithGeneral._static_array_equal"]], "_static_assert_supports_inplace() (ivy.data_classes.container.general._containerwithgeneral static method)": [[80, "ivy.data_classes.container.general._ContainerWithGeneral._static_assert_supports_inplace"]], "_static_clip_matrix_norm() (ivy.data_classes.container.general._containerwithgeneral static method)": [[80, "ivy.data_classes.container.general._ContainerWithGeneral._static_clip_matrix_norm"]], "_static_clip_vector_norm() (ivy.data_classes.container.general._containerwithgeneral static method)": [[80, "ivy.data_classes.container.general._ContainerWithGeneral._static_clip_vector_norm"]], "_static_einops_rearrange() (ivy.data_classes.container.general._containerwithgeneral static method)": [[80, "ivy.data_classes.container.general._ContainerWithGeneral._static_einops_rearrange"]], "_static_einops_reduce() (ivy.data_classes.container.general._containerwithgeneral static method)": [[80, "ivy.data_classes.container.general._ContainerWithGeneral._static_einops_reduce"]], "_static_einops_repeat() (ivy.data_classes.container.general._containerwithgeneral static method)": [[80, "ivy.data_classes.container.general._ContainerWithGeneral._static_einops_repeat"]], "_static_exists() (ivy.data_classes.container.general._containerwithgeneral static method)": [[80, "ivy.data_classes.container.general._ContainerWithGeneral._static_exists"]], "_static_fourier_encode() (ivy.data_classes.container.general._containerwithgeneral static method)": [[80, "ivy.data_classes.container.general._ContainerWithGeneral._static_fourier_encode"]], "_static_gather() (ivy.data_classes.container.general._containerwithgeneral static method)": [[80, "ivy.data_classes.container.general._ContainerWithGeneral._static_gather"]], "_static_gather_nd() (ivy.data_classes.container.general._containerwithgeneral static method)": [[80, "ivy.data_classes.container.general._ContainerWithGeneral._static_gather_nd"]], "_static_get_num_dims() (ivy.data_classes.container.general._containerwithgeneral static method)": [[80, "ivy.data_classes.container.general._ContainerWithGeneral._static_get_num_dims"]], "_static_has_nans() (ivy.data_classes.container.general._containerwithgeneral static method)": [[80, "ivy.data_classes.container.general._ContainerWithGeneral._static_has_nans"]], "_static_inplace_decrement() (ivy.data_classes.container.general._containerwithgeneral static method)": [[80, "ivy.data_classes.container.general._ContainerWithGeneral._static_inplace_decrement"]], "_static_inplace_increment() (ivy.data_classes.container.general._containerwithgeneral static method)": [[80, "ivy.data_classes.container.general._ContainerWithGeneral._static_inplace_increment"]], "_static_inplace_update() (ivy.data_classes.container.general._containerwithgeneral static method)": [[80, "ivy.data_classes.container.general._ContainerWithGeneral._static_inplace_update"]], "_static_is_array() (ivy.data_classes.container.general._containerwithgeneral static method)": [[80, "ivy.data_classes.container.general._ContainerWithGeneral._static_is_array"]], "_static_is_ivy_array() (ivy.data_classes.container.general._containerwithgeneral static method)": [[80, "ivy.data_classes.container.general._ContainerWithGeneral._static_is_ivy_array"]], "_static_is_native_array() (ivy.data_classes.container.general._containerwithgeneral static method)": [[80, "ivy.data_classes.container.general._ContainerWithGeneral._static_is_native_array"]], "_static_scatter_flat() (ivy.data_classes.container.general._containerwithgeneral static method)": [[80, "ivy.data_classes.container.general._ContainerWithGeneral._static_scatter_flat"]], "_static_scatter_nd() (ivy.data_classes.container.general._containerwithgeneral static method)": [[80, "ivy.data_classes.container.general._ContainerWithGeneral._static_scatter_nd"]], "_static_size() (ivy.data_classes.container.general._containerwithgeneral static method)": [[80, "ivy.data_classes.container.general._ContainerWithGeneral._static_size"]], "_static_stable_divide() (ivy.data_classes.container.general._containerwithgeneral static method)": [[80, "ivy.data_classes.container.general._ContainerWithGeneral._static_stable_divide"]], "_static_stable_pow() (ivy.data_classes.container.general._containerwithgeneral static method)": [[80, "ivy.data_classes.container.general._ContainerWithGeneral._static_stable_pow"]], "_static_supports_inplace_updates() (ivy.data_classes.container.general._containerwithgeneral static method)": [[80, "ivy.data_classes.container.general._ContainerWithGeneral._static_supports_inplace_updates"]], "_static_to_list() (ivy.data_classes.container.general._containerwithgeneral static method)": [[80, "ivy.data_classes.container.general._ContainerWithGeneral._static_to_list"]], "_static_to_numpy() (ivy.data_classes.container.general._containerwithgeneral static method)": [[80, "ivy.data_classes.container.general._ContainerWithGeneral._static_to_numpy"]], "_static_to_scalar() (ivy.data_classes.container.general._containerwithgeneral static method)": [[80, "ivy.data_classes.container.general._ContainerWithGeneral._static_to_scalar"]], "_static_value_is_nan() (ivy.data_classes.container.general._containerwithgeneral static method)": [[80, "ivy.data_classes.container.general._ContainerWithGeneral._static_value_is_nan"]], "all_equal() (ivy.data_classes.container.general._containerwithgeneral method)": [[80, "ivy.data_classes.container.general._ContainerWithGeneral.all_equal"]], "array_equal() (ivy.data_classes.container.general._containerwithgeneral method)": [[80, "ivy.data_classes.container.general._ContainerWithGeneral.array_equal"]], "assert_supports_inplace() (ivy.data_classes.container.general._containerwithgeneral method)": [[80, "ivy.data_classes.container.general._ContainerWithGeneral.assert_supports_inplace"]], "clip_matrix_norm() (ivy.data_classes.container.general._containerwithgeneral method)": [[80, "ivy.data_classes.container.general._ContainerWithGeneral.clip_matrix_norm"]], "clip_vector_norm() (ivy.data_classes.container.general._containerwithgeneral method)": [[80, "ivy.data_classes.container.general._ContainerWithGeneral.clip_vector_norm"]], "einops_rearrange() (ivy.data_classes.container.general._containerwithgeneral method)": [[80, "ivy.data_classes.container.general._ContainerWithGeneral.einops_rearrange"]], "einops_reduce() (ivy.data_classes.container.general._containerwithgeneral method)": [[80, "ivy.data_classes.container.general._ContainerWithGeneral.einops_reduce"]], "einops_repeat() (ivy.data_classes.container.general._containerwithgeneral method)": [[80, "ivy.data_classes.container.general._ContainerWithGeneral.einops_repeat"]], "exists() (ivy.data_classes.container.general._containerwithgeneral method)": [[80, "ivy.data_classes.container.general._ContainerWithGeneral.exists"]], "fourier_encode() (ivy.data_classes.container.general._containerwithgeneral method)": [[80, "ivy.data_classes.container.general._ContainerWithGeneral.fourier_encode"]], "gather() (ivy.data_classes.container.general._containerwithgeneral method)": [[80, "ivy.data_classes.container.general._ContainerWithGeneral.gather"]], "gather_nd() (ivy.data_classes.container.general._containerwithgeneral method)": [[80, "ivy.data_classes.container.general._ContainerWithGeneral.gather_nd"]], "get_num_dims() (ivy.data_classes.container.general._containerwithgeneral method)": [[80, "ivy.data_classes.container.general._ContainerWithGeneral.get_num_dims"]], "has_nans() (ivy.data_classes.container.general._containerwithgeneral method)": [[80, "ivy.data_classes.container.general._ContainerWithGeneral.has_nans"]], "inplace_decrement() (ivy.data_classes.container.general._containerwithgeneral method)": [[80, "ivy.data_classes.container.general._ContainerWithGeneral.inplace_decrement"]], "inplace_increment() (ivy.data_classes.container.general._containerwithgeneral method)": [[80, "ivy.data_classes.container.general._ContainerWithGeneral.inplace_increment"]], "inplace_update() (ivy.data_classes.container.general._containerwithgeneral method)": [[80, "ivy.data_classes.container.general._ContainerWithGeneral.inplace_update"]], "is_array() (ivy.data_classes.container.general._containerwithgeneral method)": [[80, "ivy.data_classes.container.general._ContainerWithGeneral.is_array"]], "is_ivy_array() (ivy.data_classes.container.general._containerwithgeneral method)": [[80, "ivy.data_classes.container.general._ContainerWithGeneral.is_ivy_array"]], "is_native_array() (ivy.data_classes.container.general._containerwithgeneral method)": [[80, "ivy.data_classes.container.general._ContainerWithGeneral.is_native_array"]], "isin() (ivy.data_classes.container.general._containerwithgeneral method)": [[80, "ivy.data_classes.container.general._ContainerWithGeneral.isin"]], "itemsize() (ivy.data_classes.container.general._containerwithgeneral method)": [[80, "ivy.data_classes.container.general._ContainerWithGeneral.itemsize"]], "ivy.data_classes.container.general": [[80, "module-ivy.data_classes.container.general"]], "scatter_flat() (ivy.data_classes.container.general._containerwithgeneral method)": [[80, "ivy.data_classes.container.general._ContainerWithGeneral.scatter_flat"]], "scatter_nd() (ivy.data_classes.container.general._containerwithgeneral method)": [[80, "ivy.data_classes.container.general._ContainerWithGeneral.scatter_nd"]], "size() (ivy.data_classes.container.general._containerwithgeneral method)": [[80, "ivy.data_classes.container.general._ContainerWithGeneral.size"]], "stable_divide() (ivy.data_classes.container.general._containerwithgeneral method)": [[80, "ivy.data_classes.container.general._ContainerWithGeneral.stable_divide"]], "stable_pow() (ivy.data_classes.container.general._containerwithgeneral method)": [[80, "ivy.data_classes.container.general._ContainerWithGeneral.stable_pow"]], "static_isin() (ivy.data_classes.container.general._containerwithgeneral static method)": [[80, "ivy.data_classes.container.general._ContainerWithGeneral.static_isin"]], "static_itemsize() (ivy.data_classes.container.general._containerwithgeneral static method)": [[80, "ivy.data_classes.container.general._ContainerWithGeneral.static_itemsize"]], "static_strides() (ivy.data_classes.container.general._containerwithgeneral static method)": [[80, "ivy.data_classes.container.general._ContainerWithGeneral.static_strides"]], "strides() (ivy.data_classes.container.general._containerwithgeneral method)": [[80, "ivy.data_classes.container.general._ContainerWithGeneral.strides"]], "supports_inplace_updates() (ivy.data_classes.container.general._containerwithgeneral method)": [[80, "ivy.data_classes.container.general._ContainerWithGeneral.supports_inplace_updates"]], "to_list() (ivy.data_classes.container.general._containerwithgeneral method)": [[80, "ivy.data_classes.container.general._ContainerWithGeneral.to_list"]], "to_numpy() (ivy.data_classes.container.general._containerwithgeneral method)": [[80, "ivy.data_classes.container.general._ContainerWithGeneral.to_numpy"]], "to_scalar() (ivy.data_classes.container.general._containerwithgeneral method)": [[80, "ivy.data_classes.container.general._ContainerWithGeneral.to_scalar"]], "value_is_nan() (ivy.data_classes.container.general._containerwithgeneral method)": [[80, "ivy.data_classes.container.general._ContainerWithGeneral.value_is_nan"]], "_containerwithgradients (class in ivy.data_classes.container.gradients)": [[81, "ivy.data_classes.container.gradients._ContainerWithGradients"]], "_abc_impl (ivy.data_classes.container.gradients._containerwithgradients attribute)": [[81, "ivy.data_classes.container.gradients._ContainerWithGradients._abc_impl"]], "_static_stop_gradient() (ivy.data_classes.container.gradients._containerwithgradients static method)": [[81, "ivy.data_classes.container.gradients._ContainerWithGradients._static_stop_gradient"]], "adam_step() (ivy.data_classes.container.gradients._containerwithgradients method)": [[81, "ivy.data_classes.container.gradients._ContainerWithGradients.adam_step"]], "adam_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[81, "ivy.data_classes.container.gradients._ContainerWithGradients.adam_update"]], "gradient_descent_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[81, "ivy.data_classes.container.gradients._ContainerWithGradients.gradient_descent_update"]], "ivy.data_classes.container.gradients": [[81, "module-ivy.data_classes.container.gradients"]], "lamb_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[81, "ivy.data_classes.container.gradients._ContainerWithGradients.lamb_update"]], "lars_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[81, "ivy.data_classes.container.gradients._ContainerWithGradients.lars_update"]], "optimizer_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[81, "ivy.data_classes.container.gradients._ContainerWithGradients.optimizer_update"]], "stop_gradient() (ivy.data_classes.container.gradients._containerwithgradients method)": [[81, "ivy.data_classes.container.gradients._ContainerWithGradients.stop_gradient"]], "_containerwithimage (class in ivy.data_classes.container.image)": [[82, "ivy.data_classes.container.image._ContainerWithImage"]], "_abc_impl (ivy.data_classes.container.image._containerwithimage attribute)": [[82, "ivy.data_classes.container.image._ContainerWithImage._abc_impl"]], "ivy.data_classes.container.image": [[82, "module-ivy.data_classes.container.image"]], "_containerwithlayers (class in ivy.data_classes.container.layers)": [[83, "ivy.data_classes.container.layers._ContainerWithLayers"]], "_abc_impl (ivy.data_classes.container.layers._containerwithlayers attribute)": [[83, "ivy.data_classes.container.layers._ContainerWithLayers._abc_impl"]], "_static_conv1d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[83, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv1d"]], "_static_conv1d_transpose() (ivy.data_classes.container.layers._containerwithlayers static method)": [[83, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv1d_transpose"]], "_static_conv2d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[83, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv2d"]], "_static_conv2d_transpose() (ivy.data_classes.container.layers._containerwithlayers static method)": [[83, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv2d_transpose"]], "_static_conv3d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[83, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv3d"]], "_static_conv3d_transpose() (ivy.data_classes.container.layers._containerwithlayers static method)": [[83, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv3d_transpose"]], "_static_depthwise_conv2d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[83, "ivy.data_classes.container.layers._ContainerWithLayers._static_depthwise_conv2d"]], "_static_dropout() (ivy.data_classes.container.layers._containerwithlayers static method)": [[83, "ivy.data_classes.container.layers._ContainerWithLayers._static_dropout"]], "_static_dropout1d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[83, "ivy.data_classes.container.layers._ContainerWithLayers._static_dropout1d"]], "_static_dropout2d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[83, "ivy.data_classes.container.layers._ContainerWithLayers._static_dropout2d"]], "_static_dropout3d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[83, "ivy.data_classes.container.layers._ContainerWithLayers._static_dropout3d"]], "_static_linear() (ivy.data_classes.container.layers._containerwithlayers static method)": [[83, "ivy.data_classes.container.layers._ContainerWithLayers._static_linear"]], "_static_lstm_update() (ivy.data_classes.container.layers._containerwithlayers static method)": [[83, "ivy.data_classes.container.layers._ContainerWithLayers._static_lstm_update"]], "_static_multi_head_attention() (ivy.data_classes.container.layers._containerwithlayers static method)": [[83, "ivy.data_classes.container.layers._ContainerWithLayers._static_multi_head_attention"]], "_static_reduce_window() (ivy.data_classes.container.layers._containerwithlayers static method)": [[83, "ivy.data_classes.container.layers._ContainerWithLayers._static_reduce_window"]], "_static_scaled_dot_product_attention() (ivy.data_classes.container.layers._containerwithlayers static method)": [[83, "ivy.data_classes.container.layers._ContainerWithLayers._static_scaled_dot_product_attention"]], "conv1d() (ivy.data_classes.container.layers._containerwithlayers method)": [[83, "ivy.data_classes.container.layers._ContainerWithLayers.conv1d"]], "conv1d_transpose() (ivy.data_classes.container.layers._containerwithlayers method)": [[83, "ivy.data_classes.container.layers._ContainerWithLayers.conv1d_transpose"]], "conv2d() (ivy.data_classes.container.layers._containerwithlayers method)": [[83, "ivy.data_classes.container.layers._ContainerWithLayers.conv2d"]], "conv2d_transpose() (ivy.data_classes.container.layers._containerwithlayers method)": [[83, "ivy.data_classes.container.layers._ContainerWithLayers.conv2d_transpose"]], "conv3d() (ivy.data_classes.container.layers._containerwithlayers method)": [[83, "ivy.data_classes.container.layers._ContainerWithLayers.conv3d"]], "conv3d_transpose() (ivy.data_classes.container.layers._containerwithlayers method)": [[83, "ivy.data_classes.container.layers._ContainerWithLayers.conv3d_transpose"]], "depthwise_conv2d() (ivy.data_classes.container.layers._containerwithlayers method)": [[83, "ivy.data_classes.container.layers._ContainerWithLayers.depthwise_conv2d"]], "dropout() (ivy.data_classes.container.layers._containerwithlayers method)": [[83, "ivy.data_classes.container.layers._ContainerWithLayers.dropout"]], "dropout1d() (ivy.data_classes.container.layers._containerwithlayers method)": [[83, "ivy.data_classes.container.layers._ContainerWithLayers.dropout1d"]], "dropout2d() (ivy.data_classes.container.layers._containerwithlayers method)": [[83, "ivy.data_classes.container.layers._ContainerWithLayers.dropout2d"]], "dropout3d() (ivy.data_classes.container.layers._containerwithlayers method)": [[83, "ivy.data_classes.container.layers._ContainerWithLayers.dropout3d"]], "ivy.data_classes.container.layers": [[83, "module-ivy.data_classes.container.layers"]], "linear() (ivy.data_classes.container.layers._containerwithlayers method)": [[83, "ivy.data_classes.container.layers._ContainerWithLayers.linear"]], "lstm_update() (ivy.data_classes.container.layers._containerwithlayers method)": [[83, "ivy.data_classes.container.layers._ContainerWithLayers.lstm_update"]], "multi_head_attention() (ivy.data_classes.container.layers._containerwithlayers method)": [[83, "ivy.data_classes.container.layers._ContainerWithLayers.multi_head_attention"]], "reduce_window() (ivy.data_classes.container.layers._containerwithlayers method)": [[83, "ivy.data_classes.container.layers._ContainerWithLayers.reduce_window"]], "scaled_dot_product_attention() (ivy.data_classes.container.layers._containerwithlayers method)": [[83, "ivy.data_classes.container.layers._ContainerWithLayers.scaled_dot_product_attention"]], "_containerwithlinearalgebra (class in ivy.data_classes.container.linear_algebra)": [[84, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra"]], "_abc_impl (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra attribute)": [[84, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._abc_impl"]], "_static_cholesky() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[84, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_cholesky"]], "_static_cross() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[84, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_cross"]], "_static_det() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[84, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_det"]], "_static_diag() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[84, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_diag"]], "_static_diagonal() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[84, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_diagonal"]], "_static_eigh() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[84, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_eigh"]], "_static_eigvalsh() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[84, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_eigvalsh"]], "_static_inner() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[84, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_inner"]], "_static_inv() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[84, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_inv"]], "_static_matmul() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[84, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matmul"]], "_static_matrix_norm() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[84, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matrix_norm"]], "_static_matrix_power() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[84, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matrix_power"]], "_static_matrix_rank() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[84, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matrix_rank"]], "_static_matrix_transpose() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[84, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matrix_transpose"]], "_static_outer() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[84, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_outer"]], "_static_pinv() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[84, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_pinv"]], "_static_qr() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[84, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_qr"]], "_static_slogdet() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[84, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_slogdet"]], "_static_solve() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[84, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_solve"]], "_static_svd() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[84, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_svd"]], "_static_svdvals() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[84, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_svdvals"]], "_static_tensordot() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[84, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_tensordot"]], "_static_tensorsolve() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[84, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_tensorsolve"]], "_static_trace() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[84, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_trace"]], "_static_vander() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[84, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_vander"]], "_static_vecdot() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[84, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_vecdot"]], "_static_vector_norm() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[84, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_vector_norm"]], "_static_vector_to_skew_symmetric_matrix() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[84, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_vector_to_skew_symmetric_matrix"]], "cholesky() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[84, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.cholesky"]], "cross() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[84, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.cross"]], "det() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[84, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.det"]], "diag() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[84, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.diag"]], "diagonal() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[84, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.diagonal"]], "eigh() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[84, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.eigh"]], "eigvalsh() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[84, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.eigvalsh"]], "general_inner_product() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[84, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.general_inner_product"]], "inner() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[84, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.inner"]], "inv() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[84, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.inv"]], "ivy.data_classes.container.linear_algebra": [[84, "module-ivy.data_classes.container.linear_algebra"]], "matmul() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[84, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matmul"]], "matrix_norm() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[84, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matrix_norm"]], "matrix_power() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[84, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matrix_power"]], "matrix_rank() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[84, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matrix_rank"]], "matrix_transpose() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[84, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matrix_transpose"]], "outer() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[84, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.outer"]], "pinv() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[84, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.pinv"]], "qr() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[84, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.qr"]], "slogdet() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[84, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.slogdet"]], "solve() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[84, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.solve"]], "static_general_inner_product() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[84, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.static_general_inner_product"]], "svd() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[84, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.svd"]], "svdvals() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[84, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.svdvals"]], "tensordot() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[84, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.tensordot"]], "tensorsolve() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[84, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.tensorsolve"]], "trace() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[84, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.trace"]], "vander() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[84, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.vander"]], "vecdot() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[84, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.vecdot"]], "vector_norm() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[84, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.vector_norm"]], "vector_to_skew_symmetric_matrix() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[84, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.vector_to_skew_symmetric_matrix"]], "_containerwithlosses (class in ivy.data_classes.container.losses)": [[85, "ivy.data_classes.container.losses._ContainerWithLosses"]], "_abc_impl (ivy.data_classes.container.losses._containerwithlosses attribute)": [[85, "ivy.data_classes.container.losses._ContainerWithLosses._abc_impl"]], "_static_binary_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses static method)": [[85, "ivy.data_classes.container.losses._ContainerWithLosses._static_binary_cross_entropy"]], "_static_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses static method)": [[85, "ivy.data_classes.container.losses._ContainerWithLosses._static_cross_entropy"]], "_static_sparse_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses static method)": [[85, "ivy.data_classes.container.losses._ContainerWithLosses._static_sparse_cross_entropy"]], "binary_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses method)": [[85, "ivy.data_classes.container.losses._ContainerWithLosses.binary_cross_entropy"]], "cross_entropy() (ivy.data_classes.container.losses._containerwithlosses method)": [[85, "ivy.data_classes.container.losses._ContainerWithLosses.cross_entropy"]], "ivy.data_classes.container.losses": [[85, "module-ivy.data_classes.container.losses"]], "sparse_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses method)": [[85, "ivy.data_classes.container.losses._ContainerWithLosses.sparse_cross_entropy"]], "_containerwithmanipulation (class in ivy.data_classes.container.manipulation)": [[86, "ivy.data_classes.container.manipulation._ContainerWithManipulation"]], "_abc_impl (ivy.data_classes.container.manipulation._containerwithmanipulation attribute)": [[86, "ivy.data_classes.container.manipulation._ContainerWithManipulation._abc_impl"]], "_static_clip() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[86, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_clip"]], "_static_concat() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[86, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_concat"]], "_static_constant_pad() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[86, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_constant_pad"]], "_static_expand_dims() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[86, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_expand_dims"]], "_static_flip() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[86, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_flip"]], "_static_permute_dims() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[86, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_permute_dims"]], "_static_repeat() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[86, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_repeat"]], "_static_reshape() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[86, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_reshape"]], "_static_roll() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[86, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_roll"]], "_static_split() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[86, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_split"]], "_static_squeeze() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[86, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_squeeze"]], "_static_stack() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[86, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_stack"]], "_static_swapaxes() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[86, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_swapaxes"]], "_static_tile() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[86, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_tile"]], "_static_unstack() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[86, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_unstack"]], "_static_zero_pad() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[86, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_zero_pad"]], "clip() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[86, "ivy.data_classes.container.manipulation._ContainerWithManipulation.clip"]], "concat() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[86, "ivy.data_classes.container.manipulation._ContainerWithManipulation.concat"]], "constant_pad() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[86, "ivy.data_classes.container.manipulation._ContainerWithManipulation.constant_pad"]], "expand_dims() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[86, "ivy.data_classes.container.manipulation._ContainerWithManipulation.expand_dims"]], "flip() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[86, "ivy.data_classes.container.manipulation._ContainerWithManipulation.flip"]], "ivy.data_classes.container.manipulation": [[86, "module-ivy.data_classes.container.manipulation"]], "permute_dims() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[86, "ivy.data_classes.container.manipulation._ContainerWithManipulation.permute_dims"]], "repeat() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[86, "ivy.data_classes.container.manipulation._ContainerWithManipulation.repeat"]], "reshape() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[86, "ivy.data_classes.container.manipulation._ContainerWithManipulation.reshape"]], "roll() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[86, "ivy.data_classes.container.manipulation._ContainerWithManipulation.roll"]], "split() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[86, "ivy.data_classes.container.manipulation._ContainerWithManipulation.split"]], "squeeze() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[86, "ivy.data_classes.container.manipulation._ContainerWithManipulation.squeeze"]], "stack() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[86, "ivy.data_classes.container.manipulation._ContainerWithManipulation.stack"]], "swapaxes() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[86, "ivy.data_classes.container.manipulation._ContainerWithManipulation.swapaxes"]], "tile() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[86, "ivy.data_classes.container.manipulation._ContainerWithManipulation.tile"]], "unstack() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[86, "ivy.data_classes.container.manipulation._ContainerWithManipulation.unstack"]], "zero_pad() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[86, "ivy.data_classes.container.manipulation._ContainerWithManipulation.zero_pad"]], "_containerwithnorms (class in ivy.data_classes.container.norms)": [[87, "ivy.data_classes.container.norms._ContainerWithNorms"]], "_abc_impl (ivy.data_classes.container.norms._containerwithnorms attribute)": [[87, "ivy.data_classes.container.norms._ContainerWithNorms._abc_impl"]], "ivy.data_classes.container.norms": [[87, "module-ivy.data_classes.container.norms"]], "layer_norm() (ivy.data_classes.container.norms._containerwithnorms method)": [[87, "ivy.data_classes.container.norms._ContainerWithNorms.layer_norm"]], "_containerwithrandom (class in ivy.data_classes.container.random)": [[88, "ivy.data_classes.container.random._ContainerWithRandom"]], "_abc_impl (ivy.data_classes.container.random._containerwithrandom attribute)": [[88, "ivy.data_classes.container.random._ContainerWithRandom._abc_impl"]], "_static_multinomial() (ivy.data_classes.container.random._containerwithrandom static method)": [[88, "ivy.data_classes.container.random._ContainerWithRandom._static_multinomial"]], "_static_randint() (ivy.data_classes.container.random._containerwithrandom static method)": [[88, "ivy.data_classes.container.random._ContainerWithRandom._static_randint"]], "_static_random_normal() (ivy.data_classes.container.random._containerwithrandom static method)": [[88, "ivy.data_classes.container.random._ContainerWithRandom._static_random_normal"]], "_static_random_uniform() (ivy.data_classes.container.random._containerwithrandom static method)": [[88, "ivy.data_classes.container.random._ContainerWithRandom._static_random_uniform"]], "_static_shuffle() (ivy.data_classes.container.random._containerwithrandom static method)": [[88, "ivy.data_classes.container.random._ContainerWithRandom._static_shuffle"]], "ivy.data_classes.container.random": [[88, "module-ivy.data_classes.container.random"]], "multinomial() (ivy.data_classes.container.random._containerwithrandom method)": [[88, "ivy.data_classes.container.random._ContainerWithRandom.multinomial"]], "randint() (ivy.data_classes.container.random._containerwithrandom method)": [[88, "ivy.data_classes.container.random._ContainerWithRandom.randint"]], "random_normal() (ivy.data_classes.container.random._containerwithrandom method)": [[88, "ivy.data_classes.container.random._ContainerWithRandom.random_normal"]], "random_uniform() (ivy.data_classes.container.random._containerwithrandom method)": [[88, "ivy.data_classes.container.random._ContainerWithRandom.random_uniform"]], "shuffle() (ivy.data_classes.container.random._containerwithrandom method)": [[88, "ivy.data_classes.container.random._ContainerWithRandom.shuffle"]], "_containerwithsearching (class in ivy.data_classes.container.searching)": [[89, "ivy.data_classes.container.searching._ContainerWithSearching"]], "_abc_impl (ivy.data_classes.container.searching._containerwithsearching attribute)": [[89, "ivy.data_classes.container.searching._ContainerWithSearching._abc_impl"]], "_static_argmax() (ivy.data_classes.container.searching._containerwithsearching static method)": [[89, "ivy.data_classes.container.searching._ContainerWithSearching._static_argmax"]], "_static_argmin() (ivy.data_classes.container.searching._containerwithsearching static method)": [[89, "ivy.data_classes.container.searching._ContainerWithSearching._static_argmin"]], "_static_argwhere() (ivy.data_classes.container.searching._containerwithsearching static method)": [[89, "ivy.data_classes.container.searching._ContainerWithSearching._static_argwhere"]], "_static_nonzero() (ivy.data_classes.container.searching._containerwithsearching static method)": [[89, "ivy.data_classes.container.searching._ContainerWithSearching._static_nonzero"]], "_static_where() (ivy.data_classes.container.searching._containerwithsearching static method)": [[89, "ivy.data_classes.container.searching._ContainerWithSearching._static_where"]], "argmax() (ivy.data_classes.container.searching._containerwithsearching method)": [[89, "ivy.data_classes.container.searching._ContainerWithSearching.argmax"]], "argmin() (ivy.data_classes.container.searching._containerwithsearching method)": [[89, "ivy.data_classes.container.searching._ContainerWithSearching.argmin"]], "argwhere() (ivy.data_classes.container.searching._containerwithsearching method)": [[89, "ivy.data_classes.container.searching._ContainerWithSearching.argwhere"]], "ivy.data_classes.container.searching": [[89, "module-ivy.data_classes.container.searching"]], "nonzero() (ivy.data_classes.container.searching._containerwithsearching method)": [[89, "ivy.data_classes.container.searching._ContainerWithSearching.nonzero"]], "where() (ivy.data_classes.container.searching._containerwithsearching method)": [[89, "ivy.data_classes.container.searching._ContainerWithSearching.where"]], "_containerwithset (class in ivy.data_classes.container.set)": [[90, "ivy.data_classes.container.set._ContainerWithSet"]], "_abc_impl (ivy.data_classes.container.set._containerwithset attribute)": [[90, "ivy.data_classes.container.set._ContainerWithSet._abc_impl"]], "_static_unique_all() (ivy.data_classes.container.set._containerwithset static method)": [[90, "ivy.data_classes.container.set._ContainerWithSet._static_unique_all"]], "_static_unique_counts() (ivy.data_classes.container.set._containerwithset static method)": [[90, "ivy.data_classes.container.set._ContainerWithSet._static_unique_counts"]], "_static_unique_inverse() (ivy.data_classes.container.set._containerwithset static method)": [[90, "ivy.data_classes.container.set._ContainerWithSet._static_unique_inverse"]], "_static_unique_values() (ivy.data_classes.container.set._containerwithset static method)": [[90, "ivy.data_classes.container.set._ContainerWithSet._static_unique_values"]], "ivy.data_classes.container.set": [[90, "module-ivy.data_classes.container.set"]], "unique_all() (ivy.data_classes.container.set._containerwithset method)": [[90, "ivy.data_classes.container.set._ContainerWithSet.unique_all"]], "unique_counts() (ivy.data_classes.container.set._containerwithset method)": [[90, "ivy.data_classes.container.set._ContainerWithSet.unique_counts"]], "unique_inverse() (ivy.data_classes.container.set._containerwithset method)": [[90, "ivy.data_classes.container.set._ContainerWithSet.unique_inverse"]], "unique_values() (ivy.data_classes.container.set._containerwithset method)": [[90, "ivy.data_classes.container.set._ContainerWithSet.unique_values"]], "_containerwithsorting (class in ivy.data_classes.container.sorting)": [[91, "ivy.data_classes.container.sorting._ContainerWithSorting"]], "_abc_impl (ivy.data_classes.container.sorting._containerwithsorting attribute)": [[91, "ivy.data_classes.container.sorting._ContainerWithSorting._abc_impl"]], "_static_argsort() (ivy.data_classes.container.sorting._containerwithsorting static method)": [[91, "ivy.data_classes.container.sorting._ContainerWithSorting._static_argsort"]], "_static_searchsorted() (ivy.data_classes.container.sorting._containerwithsorting static method)": [[91, "ivy.data_classes.container.sorting._ContainerWithSorting._static_searchsorted"]], "_static_sort() (ivy.data_classes.container.sorting._containerwithsorting static method)": [[91, "ivy.data_classes.container.sorting._ContainerWithSorting._static_sort"]], "argsort() (ivy.data_classes.container.sorting._containerwithsorting method)": [[91, "ivy.data_classes.container.sorting._ContainerWithSorting.argsort"]], "ivy.data_classes.container.sorting": [[91, "module-ivy.data_classes.container.sorting"]], "msort() (ivy.data_classes.container.sorting._containerwithsorting method)": [[91, "ivy.data_classes.container.sorting._ContainerWithSorting.msort"]], "searchsorted() (ivy.data_classes.container.sorting._containerwithsorting method)": [[91, "ivy.data_classes.container.sorting._ContainerWithSorting.searchsorted"]], "sort() (ivy.data_classes.container.sorting._containerwithsorting method)": [[91, "ivy.data_classes.container.sorting._ContainerWithSorting.sort"]], "static_msort() (ivy.data_classes.container.sorting._containerwithsorting static method)": [[91, "ivy.data_classes.container.sorting._ContainerWithSorting.static_msort"]], "_containerwithstatistical (class in ivy.data_classes.container.statistical)": [[92, "ivy.data_classes.container.statistical._ContainerWithStatistical"]], "_abc_impl (ivy.data_classes.container.statistical._containerwithstatistical attribute)": [[92, "ivy.data_classes.container.statistical._ContainerWithStatistical._abc_impl"]], "_static_cumprod() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[92, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_cumprod"]], "_static_cumsum() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[92, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_cumsum"]], "_static_min() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[92, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_min"]], "_static_prod() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[92, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_prod"]], "_static_sum() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[92, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_sum"]], "_static_var() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[92, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_var"]], "cumprod() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[92, "ivy.data_classes.container.statistical._ContainerWithStatistical.cumprod"]], "cumsum() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[92, "ivy.data_classes.container.statistical._ContainerWithStatistical.cumsum"]], "einsum() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[92, "ivy.data_classes.container.statistical._ContainerWithStatistical.einsum"]], "ivy.data_classes.container.statistical": [[92, "module-ivy.data_classes.container.statistical"]], "max() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[92, "ivy.data_classes.container.statistical._ContainerWithStatistical.max"]], "mean() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[92, "ivy.data_classes.container.statistical._ContainerWithStatistical.mean"]], "min() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[92, "ivy.data_classes.container.statistical._ContainerWithStatistical.min"]], "prod() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[92, "ivy.data_classes.container.statistical._ContainerWithStatistical.prod"]], "std() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[92, "ivy.data_classes.container.statistical._ContainerWithStatistical.std"]], "sum() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[92, "ivy.data_classes.container.statistical._ContainerWithStatistical.sum"]], "var() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[92, "ivy.data_classes.container.statistical._ContainerWithStatistical.var"]], "_containerwithutility (class in ivy.data_classes.container.utility)": [[93, "ivy.data_classes.container.utility._ContainerWithUtility"]], "_abc_impl (ivy.data_classes.container.utility._containerwithutility attribute)": [[93, "ivy.data_classes.container.utility._ContainerWithUtility._abc_impl"]], "_static_all() (ivy.data_classes.container.utility._containerwithutility static method)": [[93, "ivy.data_classes.container.utility._ContainerWithUtility._static_all"]], "_static_any() (ivy.data_classes.container.utility._containerwithutility static method)": [[93, "ivy.data_classes.container.utility._ContainerWithUtility._static_any"]], "all() (ivy.data_classes.container.utility._containerwithutility method)": [[93, "ivy.data_classes.container.utility._ContainerWithUtility.all"]], "any() (ivy.data_classes.container.utility._containerwithutility method)": [[93, "ivy.data_classes.container.utility._ContainerWithUtility.any"]], "ivy.data_classes.container.utility": [[93, "module-ivy.data_classes.container.utility"]], "_wrap_function() (in module ivy.data_classes.container.wrapping)": [[94, "ivy.data_classes.container.wrapping._wrap_function"]], "add_ivy_container_instance_methods() (in module ivy.data_classes.container.wrapping)": [[94, "ivy.data_classes.container.wrapping.add_ivy_container_instance_methods"]], "ivy.data_classes.container.wrapping": [[94, "module-ivy.data_classes.container.wrapping"]], "factorizedtensor (class in ivy.data_classes.factorized_tensor.base)": [[95, "ivy.data_classes.factorized_tensor.base.FactorizedTensor"]], "__init__() (ivy.data_classes.factorized_tensor.base.factorizedtensor method)": [[95, "ivy.data_classes.factorized_tensor.base.FactorizedTensor.__init__"]], "_abc_impl (ivy.data_classes.factorized_tensor.base.factorizedtensor attribute)": [[95, "ivy.data_classes.factorized_tensor.base.FactorizedTensor._abc_impl"]], "ivy.data_classes.factorized_tensor.base": [[95, "module-ivy.data_classes.factorized_tensor.base"]], "mode_dot() (ivy.data_classes.factorized_tensor.base.factorizedtensor method)": [[95, "ivy.data_classes.factorized_tensor.base.FactorizedTensor.mode_dot"]], "norm() (ivy.data_classes.factorized_tensor.base.factorizedtensor method)": [[95, "ivy.data_classes.factorized_tensor.base.FactorizedTensor.norm"]], "to_tensor() (ivy.data_classes.factorized_tensor.base.factorizedtensor method)": [[95, "ivy.data_classes.factorized_tensor.base.FactorizedTensor.to_tensor"]], "to_unfolded() (ivy.data_classes.factorized_tensor.base.factorizedtensor method)": [[95, "ivy.data_classes.factorized_tensor.base.FactorizedTensor.to_unfolded"]], "to_vec() (ivy.data_classes.factorized_tensor.base.factorizedtensor method)": [[95, "ivy.data_classes.factorized_tensor.base.FactorizedTensor.to_vec"]], "cptensor (class in ivy.data_classes.factorized_tensor.cp_tensor)": [[96, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor"]], "__init__() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[96, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.__init__"]], "_abc_impl (ivy.data_classes.factorized_tensor.cp_tensor.cptensor attribute)": [[96, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor._abc_impl"]], "cp_copy() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[96, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_copy"]], "cp_flip_sign() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[96, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_flip_sign"]], "cp_lstsq_grad() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[96, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_lstsq_grad"]], "cp_mode_dot() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[96, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_mode_dot"]], "cp_n_param() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[96, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_n_param"]], "cp_norm() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[96, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_norm"]], "cp_normalize() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[96, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_normalize"]], "cp_to_tensor() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[96, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_to_tensor"]], "cp_to_unfolded() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[96, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_to_unfolded"]], "cp_to_vec() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[96, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_to_vec"]], "ivy.data_classes.factorized_tensor.cp_tensor": [[96, "module-ivy.data_classes.factorized_tensor.cp_tensor"]], "mode_dot() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[96, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.mode_dot"]], "n_param (ivy.data_classes.factorized_tensor.cp_tensor.cptensor property)": [[96, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.n_param"]], "norm() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[96, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.norm"]], "normalize() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[96, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.normalize"]], "to_tensor() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[96, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.to_tensor"]], "to_unfolded() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[96, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.to_unfolded"]], "to_vec() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[96, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.to_vec"]], "unfolding_dot_khatri_rao() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[96, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.unfolding_dot_khatri_rao"]], "validate_cp_rank() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[96, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.validate_cp_rank"]], "validate_cp_tensor() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[96, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.validate_cp_tensor"]], "parafac2tensor (class in ivy.data_classes.factorized_tensor.parafac2_tensor)": [[97, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor"]], "__init__() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor method)": [[97, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.__init__"]], "_abc_impl (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor attribute)": [[97, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor._abc_impl"]], "apply_parafac2_projections() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor static method)": [[97, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.apply_parafac2_projections"]], "from_cptensor() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor class method)": [[97, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.from_CPTensor"]], "ivy.data_classes.factorized_tensor.parafac2_tensor": [[97, "module-ivy.data_classes.factorized_tensor.parafac2_tensor"]], "n_param (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor property)": [[97, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.n_param"]], "parafac2_normalise() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor static method)": [[97, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.parafac2_normalise"]], "parafac2_to_slice() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor static method)": [[97, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.parafac2_to_slice"]], "parafac2_to_slices() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor static method)": [[97, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.parafac2_to_slices"]], "parafac2_to_tensor() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor static method)": [[97, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.parafac2_to_tensor"]], "parafac2_to_unfolded() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor static method)": [[97, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.parafac2_to_unfolded"]], "parafac2_to_vec() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor static method)": [[97, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.parafac2_to_vec"]], "to_tensor() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor method)": [[97, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.to_tensor"]], "to_unfolded() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor method)": [[97, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.to_unfolded"]], "to_vec() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor method)": [[97, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.to_vec"]], "validate_parafac2_tensor() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor static method)": [[97, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.validate_parafac2_tensor"]], "trtensor (class in ivy.data_classes.factorized_tensor.tr_tensor)": [[98, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor"]], "__init__() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor method)": [[98, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.__init__"]], "_abc_impl (ivy.data_classes.factorized_tensor.tr_tensor.trtensor attribute)": [[98, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor._abc_impl"]], "ivy.data_classes.factorized_tensor.tr_tensor": [[98, "module-ivy.data_classes.factorized_tensor.tr_tensor"]], "n_param (ivy.data_classes.factorized_tensor.tr_tensor.trtensor property)": [[98, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.n_param"]], "to_tensor() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor method)": [[98, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.to_tensor"]], "to_unfolded() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor method)": [[98, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.to_unfolded"]], "to_vec() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor method)": [[98, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.to_vec"]], "tr_n_param() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor static method)": [[98, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.tr_n_param"]], "tr_to_tensor() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor static method)": [[98, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.tr_to_tensor"]], "tr_to_unfolded() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor static method)": [[98, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.tr_to_unfolded"]], "tr_to_vec() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor static method)": [[98, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.tr_to_vec"]], "validate_tr_rank() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor static method)": [[98, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.validate_tr_rank"]], "validate_tr_tensor() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor static method)": [[98, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.validate_tr_tensor"]], "tttensor (class in ivy.data_classes.factorized_tensor.tt_tensor)": [[99, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor"]], "__init__() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor method)": [[99, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.__init__"]], "_abc_impl (ivy.data_classes.factorized_tensor.tt_tensor.tttensor attribute)": [[99, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor._abc_impl"]], "_tt_n_param() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor static method)": [[99, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor._tt_n_param"]], "index_update() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor static method)": [[99, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.index_update"]], "ivy.data_classes.factorized_tensor.tt_tensor": [[99, "module-ivy.data_classes.factorized_tensor.tt_tensor"]], "n_param (ivy.data_classes.factorized_tensor.tt_tensor.tttensor property)": [[99, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.n_param"]], "pad_tt_rank() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor static method)": [[99, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.pad_tt_rank"]], "to_tensor() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor method)": [[99, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.to_tensor"]], "to_unfolding() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor method)": [[99, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.to_unfolding"]], "to_vec() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor method)": [[99, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.to_vec"]], "tt_to_tensor() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor static method)": [[99, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.tt_to_tensor"]], "tt_to_unfolded() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor static method)": [[99, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.tt_to_unfolded"]], "tt_to_vec() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor static method)": [[99, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.tt_to_vec"]], "validate_tt_rank() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor static method)": [[99, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.validate_tt_rank"]], "validate_tt_tensor() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor static method)": [[99, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.validate_tt_tensor"]], "tuckertensor (class in ivy.data_classes.factorized_tensor.tucker_tensor)": [[100, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor"]], "__init__() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor method)": [[100, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.__init__"]], "_abc_impl (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor attribute)": [[100, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor._abc_impl"]], "_bisection_root_finder() (in module ivy.data_classes.factorized_tensor.tucker_tensor)": [[100, "ivy.data_classes.factorized_tensor.tucker_tensor._bisection_root_finder"]], "ivy.data_classes.factorized_tensor.tucker_tensor": [[100, "module-ivy.data_classes.factorized_tensor.tucker_tensor"]], "mode_dot() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor method)": [[100, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.mode_dot"]], "n_param (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor property)": [[100, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.n_param"]], "to_tensor() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor method)": [[100, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.to_tensor"]], "to_unfolded() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor method)": [[100, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.to_unfolded"]], "to_vec() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor method)": [[100, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.to_vec"]], "tucker_copy() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor method)": [[100, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_copy"]], "tucker_mode_dot() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[100, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_mode_dot"]], "tucker_n_param() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[100, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_n_param"]], "tucker_normalize() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[100, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_normalize"]], "tucker_to_tensor() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[100, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_to_tensor"]], "tucker_to_unfolded() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[100, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_to_unfolded"]], "tucker_to_vec() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[100, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_to_vec"]], "validate_tucker_rank() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[100, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.validate_tucker_rank"]], "validate_tucker_tensor() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[100, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.validate_tucker_tensor"]], "array (class in ivy.data_classes.array.array)": [[101, "ivy.data_classes.array.array.Array"]], "t (ivy.data_classes.array.array.array property)": [[101, "ivy.data_classes.array.array.Array.T"]], "__abs__() (ivy.data_classes.array.array.array method)": [[101, "ivy.data_classes.array.array.Array.__abs__"]], "__add__() (ivy.data_classes.array.array.array method)": [[101, "ivy.data_classes.array.array.Array.__add__"]], "__eq__() (ivy.data_classes.array.array.array method)": [[101, "ivy.data_classes.array.array.Array.__eq__"]], "__ge__() (ivy.data_classes.array.array.array method)": [[101, "ivy.data_classes.array.array.Array.__ge__"]], "__gt__() (ivy.data_classes.array.array.array method)": [[101, "ivy.data_classes.array.array.Array.__gt__"]], "__init__() (ivy.data_classes.array.array.array method)": [[101, "ivy.data_classes.array.array.Array.__init__"]], "__le__() (ivy.data_classes.array.array.array method)": [[101, "ivy.data_classes.array.array.Array.__le__"]], "__lt__() (ivy.data_classes.array.array.array method)": [[101, "ivy.data_classes.array.array.Array.__lt__"]], "__ne__() (ivy.data_classes.array.array.array method)": [[101, "ivy.data_classes.array.array.Array.__ne__"]], "__pow__() (ivy.data_classes.array.array.array method)": [[101, "ivy.data_classes.array.array.Array.__pow__"]], "__radd__() (ivy.data_classes.array.array.array method)": [[101, "ivy.data_classes.array.array.Array.__radd__"]], "__rrshift__() (ivy.data_classes.array.array.array method)": [[101, "ivy.data_classes.array.array.Array.__rrshift__"]], "__rshift__() (ivy.data_classes.array.array.array method)": [[101, "ivy.data_classes.array.array.Array.__rshift__"]], "__rsub__() (ivy.data_classes.array.array.array method)": [[101, "ivy.data_classes.array.array.Array.__rsub__"]], "__sub__() (ivy.data_classes.array.array.array method)": [[101, "ivy.data_classes.array.array.Array.__sub__"]], "__truediv__() (ivy.data_classes.array.array.array method)": [[101, "ivy.data_classes.array.array.Array.__truediv__"]], "__xor__() (ivy.data_classes.array.array.array method)": [[101, "ivy.data_classes.array.array.Array.__xor__"]], "backend (ivy.data_classes.array.array.array property)": [[101, "ivy.data_classes.array.array.Array.backend"]], "base (ivy.data_classes.array.array.array property)": [[101, "ivy.data_classes.array.array.Array.base"]], "data (ivy.data_classes.array.array.array property)": [[101, "ivy.data_classes.array.array.Array.data"]], "device (ivy.data_classes.array.array.array property)": [[101, "ivy.data_classes.array.array.Array.device"]], "dtype (ivy.data_classes.array.array.array property)": [[101, "ivy.data_classes.array.array.Array.dtype"]], "dynamic_backend (ivy.data_classes.array.array.array property)": [[101, "ivy.data_classes.array.array.Array.dynamic_backend"]], "imag (ivy.data_classes.array.array.array property)": [[101, "ivy.data_classes.array.array.Array.imag"]], "itemsize (ivy.data_classes.array.array.array property)": [[101, "ivy.data_classes.array.array.Array.itemsize"]], "ivy.data_classes.array.array": [[101, "module-ivy.data_classes.array.array"]], "mt (ivy.data_classes.array.array.array property)": [[101, "ivy.data_classes.array.array.Array.mT"]], "ndim (ivy.data_classes.array.array.array property)": [[101, "ivy.data_classes.array.array.Array.ndim"]], "real (ivy.data_classes.array.array.array property)": [[101, "ivy.data_classes.array.array.Array.real"]], "shape (ivy.data_classes.array.array.array property)": [[101, "ivy.data_classes.array.array.Array.shape"]], "size (ivy.data_classes.array.array.array property)": [[101, "ivy.data_classes.array.array.Array.size"]], "strides (ivy.data_classes.array.array.array property)": [[101, "ivy.data_classes.array.array.Array.strides"]], "container (class in ivy.data_classes.container.container)": [[102, "ivy.data_classes.container.container.Container"]], "__abs__() (ivy.data_classes.container.container.container method)": [[102, "ivy.data_classes.container.container.Container.__abs__"]], "__add__() (ivy.data_classes.container.container.container method)": [[102, "ivy.data_classes.container.container.Container.__add__"]], "__eq__() (ivy.data_classes.container.container.container method)": [[102, "ivy.data_classes.container.container.Container.__eq__"]], "__ge__() (ivy.data_classes.container.container.container method)": [[102, "ivy.data_classes.container.container.Container.__ge__"]], "__gt__() (ivy.data_classes.container.container.container method)": [[102, "ivy.data_classes.container.container.Container.__gt__"]], "__init__() (ivy.data_classes.container.container.container method)": [[102, "ivy.data_classes.container.container.Container.__init__"]], "__le__() (ivy.data_classes.container.container.container method)": [[102, "ivy.data_classes.container.container.Container.__le__"]], "__lt__() (ivy.data_classes.container.container.container method)": [[102, "ivy.data_classes.container.container.Container.__lt__"]], "__ne__() (ivy.data_classes.container.container.container method)": [[102, "ivy.data_classes.container.container.Container.__ne__"]], "__pow__() (ivy.data_classes.container.container.container method)": [[102, "ivy.data_classes.container.container.Container.__pow__"]], "__radd__() (ivy.data_classes.container.container.container method)": [[102, "ivy.data_classes.container.container.Container.__radd__"]], "__rrshift__() (ivy.data_classes.container.container.container method)": [[102, "ivy.data_classes.container.container.Container.__rrshift__"]], "__rshift__() (ivy.data_classes.container.container.container method)": [[102, "ivy.data_classes.container.container.Container.__rshift__"]], "__rsub__() (ivy.data_classes.container.container.container method)": [[102, "ivy.data_classes.container.container.Container.__rsub__"]], "__sub__() (ivy.data_classes.container.container.container method)": [[102, "ivy.data_classes.container.container.Container.__sub__"]], "__truediv__() (ivy.data_classes.container.container.container method)": [[102, "ivy.data_classes.container.container.Container.__truediv__"]], "__xor__() (ivy.data_classes.container.container.container method)": [[102, "ivy.data_classes.container.container.Container.__xor__"]], "ivy.data_classes.container.container": [[102, "module-ivy.data_classes.container.container"]], "nestedarray (class in ivy.data_classes.nested_array.nested_array)": [[104, "ivy.data_classes.nested_array.nested_array.NestedArray"]], "__init__() (ivy.data_classes.nested_array.nested_array.nestedarray method)": [[104, "ivy.data_classes.nested_array.nested_array.NestedArray.__init__"]], "from_row_lengths() (ivy.data_classes.nested_array.nested_array.nestedarray class method)": [[104, "ivy.data_classes.nested_array.nested_array.NestedArray.from_row_lengths"]], "from_row_splits() (ivy.data_classes.nested_array.nested_array.nestedarray class method)": [[104, "ivy.data_classes.nested_array.nested_array.NestedArray.from_row_splits"]], "ivy.data_classes.nested_array.nested_array": [[104, "module-ivy.data_classes.nested_array.nested_array"]], "nestedarraybase (class in ivy.data_classes.nested_array.base)": [[105, "ivy.data_classes.nested_array.base.NestedArrayBase"]], "__init__() (ivy.data_classes.nested_array.base.nestedarraybase method)": [[105, "ivy.data_classes.nested_array.base.NestedArrayBase.__init__"]], "_abc_impl (ivy.data_classes.nested_array.base.nestedarraybase attribute)": [[105, "ivy.data_classes.nested_array.base.NestedArrayBase._abc_impl"]], "broadcast_shapes() (ivy.data_classes.nested_array.base.nestedarraybase static method)": [[105, "ivy.data_classes.nested_array.base.NestedArrayBase.broadcast_shapes"]], "data (ivy.data_classes.nested_array.base.nestedarraybase property)": [[105, "ivy.data_classes.nested_array.base.NestedArrayBase.data"]], "device (ivy.data_classes.nested_array.base.nestedarraybase property)": [[105, "ivy.data_classes.nested_array.base.NestedArrayBase.device"]], "dtype (ivy.data_classes.nested_array.base.nestedarraybase property)": [[105, "ivy.data_classes.nested_array.base.NestedArrayBase.dtype"]], "inner_shape (ivy.data_classes.nested_array.base.nestedarraybase property)": [[105, "ivy.data_classes.nested_array.base.NestedArrayBase.inner_shape"]], "ivy.data_classes.nested_array.base": [[105, "module-ivy.data_classes.nested_array.base"]], "ndim (ivy.data_classes.nested_array.base.nestedarraybase property)": [[105, "ivy.data_classes.nested_array.base.NestedArrayBase.ndim"]], "nested_array() (ivy.data_classes.nested_array.base.nestedarraybase class method)": [[105, "ivy.data_classes.nested_array.base.NestedArrayBase.nested_array"]], "nested_rank (ivy.data_classes.nested_array.base.nestedarraybase property)": [[105, "ivy.data_classes.nested_array.base.NestedArrayBase.nested_rank"]], "ragged_map() (ivy.data_classes.nested_array.base.nestedarraybase method)": [[105, "ivy.data_classes.nested_array.base.NestedArrayBase.ragged_map"]], "ragged_multi_map() (ivy.data_classes.nested_array.base.nestedarraybase static method)": [[105, "ivy.data_classes.nested_array.base.NestedArrayBase.ragged_multi_map"]], "ragged_multi_map_in_function() (ivy.data_classes.nested_array.base.nestedarraybase static method)": [[105, "ivy.data_classes.nested_array.base.NestedArrayBase.ragged_multi_map_in_function"]], "replace_ivy_arrays() (ivy.data_classes.nested_array.base.nestedarraybase static method)": [[105, "ivy.data_classes.nested_array.base.NestedArrayBase.replace_ivy_arrays"]], "shape (ivy.data_classes.nested_array.base.nestedarraybase property)": [[105, "ivy.data_classes.nested_array.base.NestedArrayBase.shape"]], "unbind() (ivy.data_classes.nested_array.base.nestedarraybase method)": [[105, "ivy.data_classes.nested_array.base.NestedArrayBase.unbind"]], "nestedarrayelementwise (class in ivy.data_classes.nested_array.elementwise)": [[106, "ivy.data_classes.nested_array.elementwise.NestedArrayElementwise"]], "_abc_impl (ivy.data_classes.nested_array.elementwise.nestedarrayelementwise attribute)": [[106, "ivy.data_classes.nested_array.elementwise.NestedArrayElementwise._abc_impl"]], "ivy.data_classes.nested_array.elementwise": [[106, "module-ivy.data_classes.nested_array.elementwise"]], "static_add() (ivy.data_classes.nested_array.elementwise.nestedarrayelementwise static method)": [[106, "ivy.data_classes.nested_array.elementwise.NestedArrayElementwise.static_add"]], "gelu() (in module ivy)": [[109, "ivy.gelu"], [625, "ivy.gelu"]], "gelu() (ivy.array method)": [[109, "ivy.Array.gelu"]], "gelu() (ivy.container method)": [[109, "ivy.Container.gelu"]], "hardswish() (in module ivy)": [[110, "ivy.hardswish"], [625, "ivy.hardswish"]], "hardswish() (ivy.array method)": [[110, "ivy.Array.hardswish"]], "hardswish() (ivy.container method)": [[110, "ivy.Container.hardswish"]], "leaky_relu() (in module ivy)": [[111, "ivy.leaky_relu"], [625, "ivy.leaky_relu"]], "leaky_relu() (ivy.array method)": [[111, "ivy.Array.leaky_relu"]], "leaky_relu() (ivy.container method)": [[111, "ivy.Container.leaky_relu"]], "log_softmax() (in module ivy)": [[112, "ivy.log_softmax"], [625, "ivy.log_softmax"]], "log_softmax() (ivy.array method)": [[112, "ivy.Array.log_softmax"]], "log_softmax() (ivy.container method)": [[112, "ivy.Container.log_softmax"]], "mish() (in module ivy)": [[113, "ivy.mish"], [625, "ivy.mish"]], "mish() (ivy.array method)": [[113, "ivy.Array.mish"]], "mish() (ivy.container method)": [[113, "ivy.Container.mish"]], "relu() (in module ivy)": [[114, "ivy.relu"], [625, "ivy.relu"]], "relu() (ivy.array method)": [[114, "ivy.Array.relu"]], "relu() (ivy.container method)": [[114, "ivy.Container.relu"]], "sigmoid() (in module ivy)": [[115, "ivy.sigmoid"], [625, "ivy.sigmoid"]], "sigmoid() (ivy.array method)": [[115, "ivy.Array.sigmoid"]], "sigmoid() (ivy.container method)": [[115, "ivy.Container.sigmoid"]], "softmax() (in module ivy)": [[116, "ivy.softmax"], [625, "ivy.softmax"]], "softmax() (ivy.array method)": [[116, "ivy.Array.softmax"]], "softmax() (ivy.container method)": [[116, "ivy.Container.softmax"]], "softplus() (in module ivy)": [[117, "ivy.softplus"], [625, "ivy.softplus"]], "softplus() (ivy.array method)": [[117, "ivy.Array.softplus"]], "softplus() (ivy.container method)": [[117, "ivy.Container.softplus"]], "softsign() (in module ivy)": [[118, "ivy.softsign"], [625, "ivy.softsign"]], "cmp_is() (in module ivy)": [[119, "ivy.cmp_is"], [627, "ivy.cmp_is"]], "cmp_isnot() (in module ivy)": [[120, "ivy.cmp_isnot"], [627, "ivy.cmp_isnot"]], "for_loop() (in module ivy)": [[121, "ivy.for_loop"], [627, "ivy.for_loop"]], "if_else() (in module ivy)": [[122, "ivy.if_else"], [627, "ivy.if_else"]], "try_except() (in module ivy)": [[123, "ivy.try_except"], [627, "ivy.try_except"]], "while_loop() (in module ivy)": [[124, "ivy.while_loop"], [627, "ivy.while_loop"]], "arange() (in module ivy)": [[125, "ivy.arange"], [628, "ivy.arange"]], "array() (in module ivy)": [[126, "ivy.array"], [628, "ivy.array"]], "asarray() (in module ivy)": [[127, "ivy.asarray"], [628, "ivy.asarray"]], "asarray() (ivy.array method)": [[127, "ivy.Array.asarray"]], "asarray() (ivy.container method)": [[127, "ivy.Container.asarray"]], "copy_array() (in module ivy)": [[128, "ivy.copy_array"], [628, "ivy.copy_array"]], "copy_array() (ivy.array method)": [[128, "ivy.Array.copy_array"]], "copy_array() (ivy.container method)": [[128, "ivy.Container.copy_array"]], "empty() (in module ivy)": [[129, "ivy.empty"], [628, "ivy.empty"]], "empty_like() (in module ivy)": [[130, "ivy.empty_like"], [628, "ivy.empty_like"]], "empty_like() (ivy.array method)": [[130, "ivy.Array.empty_like"]], "empty_like() (ivy.container method)": [[130, "ivy.Container.empty_like"]], "eye() (in module ivy)": [[131, "ivy.eye"], [628, "ivy.eye"]], "from_dlpack() (in module ivy)": [[132, "ivy.from_dlpack"], [628, "ivy.from_dlpack"]], "from_dlpack() (ivy.array method)": [[132, "ivy.Array.from_dlpack"]], "from_dlpack() (ivy.container method)": [[132, "ivy.Container.from_dlpack"]], "frombuffer() (in module ivy)": [[133, "ivy.frombuffer"], [628, "ivy.frombuffer"]], "frombuffer() (ivy.container method)": [[133, "ivy.Container.frombuffer"]], "full() (in module ivy)": [[134, "ivy.full"], [628, "ivy.full"]], "full_like() (in module ivy)": [[135, "ivy.full_like"], [628, "ivy.full_like"]], "full_like() (ivy.array method)": [[135, "ivy.Array.full_like"]], "full_like() (ivy.container method)": [[135, "ivy.Container.full_like"]], "linspace() (in module ivy)": [[136, "ivy.linspace"], [628, "ivy.linspace"]], "linspace() (ivy.array method)": [[136, "ivy.Array.linspace"]], "linspace() (ivy.container method)": [[136, "ivy.Container.linspace"]], "logspace() (in module ivy)": [[137, "ivy.logspace"], [628, "ivy.logspace"]], "logspace() (ivy.array method)": [[137, "ivy.Array.logspace"]], "logspace() (ivy.container method)": [[137, "ivy.Container.logspace"]], "meshgrid() (in module ivy)": [[138, "ivy.meshgrid"], [628, "ivy.meshgrid"]], "meshgrid() (ivy.array method)": [[138, "ivy.Array.meshgrid"]], "meshgrid() (ivy.container method)": [[138, "ivy.Container.meshgrid"]], "native_array() (in module ivy)": [[139, "ivy.native_array"], [628, "ivy.native_array"]], "native_array() (ivy.array method)": [[139, "ivy.Array.native_array"]], "native_array() (ivy.container method)": [[139, "ivy.Container.native_array"]], "one_hot() (in module ivy)": [[140, "ivy.one_hot"], [628, "ivy.one_hot"]], "one_hot() (ivy.array method)": [[140, "ivy.Array.one_hot"]], "one_hot() (ivy.container method)": [[140, "ivy.Container.one_hot"]], "ones() (in module ivy)": [[141, "ivy.ones"], [628, "ivy.ones"]], "ones_like() (in module ivy)": [[142, "ivy.ones_like"], [628, "ivy.ones_like"]], "ones_like() (ivy.array method)": [[142, "ivy.Array.ones_like"]], "ones_like() (ivy.container method)": [[142, "ivy.Container.ones_like"]], "to_dlpack() (in module ivy)": [[143, "ivy.to_dlpack"], [628, "ivy.to_dlpack"]], "tril() (in module ivy)": [[144, "ivy.tril"], [628, "ivy.tril"]], "tril() (ivy.array method)": [[144, "ivy.Array.tril"]], "tril() (ivy.container method)": [[144, "ivy.Container.tril"]], "triu() (in module ivy)": [[145, "ivy.triu"], [628, "ivy.triu"]], "triu() (ivy.array method)": [[145, "ivy.Array.triu"]], "triu() (ivy.container method)": [[145, "ivy.Container.triu"]], "triu_indices() (in module ivy)": [[146, "ivy.triu_indices"], [628, "ivy.triu_indices"]], "triu_indices() (ivy.container method)": [[146, "ivy.Container.triu_indices"]], "zeros() (in module ivy)": [[147, "ivy.zeros"], [628, "ivy.zeros"]], "zeros_like() (in module ivy)": [[148, "ivy.zeros_like"], [628, "ivy.zeros_like"]], "zeros_like() (ivy.array method)": [[148, "ivy.Array.zeros_like"]], "zeros_like() (ivy.container method)": [[148, "ivy.Container.zeros_like"]], "as_ivy_dtype() (in module ivy)": [[149, "ivy.as_ivy_dtype"], [629, "ivy.as_ivy_dtype"]], "as_native_dtype() (in module ivy)": [[150, "ivy.as_native_dtype"], [629, "ivy.as_native_dtype"]], "astype() (in module ivy)": [[151, "ivy.astype"], [629, "ivy.astype"]], "astype() (ivy.array method)": [[151, "ivy.Array.astype"]], "astype() (ivy.container method)": [[151, "ivy.Container.astype"]], "broadcast_arrays() (in module ivy)": [[152, "ivy.broadcast_arrays"], [629, "ivy.broadcast_arrays"]], "broadcast_arrays() (ivy.array method)": [[152, "ivy.Array.broadcast_arrays"]], "broadcast_arrays() (ivy.container method)": [[152, "ivy.Container.broadcast_arrays"]], "broadcast_to() (in module ivy)": [[153, "ivy.broadcast_to"], [629, "ivy.broadcast_to"]], "broadcast_to() (ivy.array method)": [[153, "ivy.Array.broadcast_to"]], "broadcast_to() (ivy.container method)": [[153, "ivy.Container.broadcast_to"]], "can_cast() (in module ivy)": [[154, "ivy.can_cast"], [629, "ivy.can_cast"]], "can_cast() (ivy.array method)": [[154, "ivy.Array.can_cast"]], "can_cast() (ivy.container method)": [[154, "ivy.Container.can_cast"]], "check_float() (in module ivy)": [[155, "ivy.check_float"], [629, "ivy.check_float"]], "closest_valid_dtype() (in module ivy)": [[156, "ivy.closest_valid_dtype"], [629, "ivy.closest_valid_dtype"]], "default_complex_dtype() (in module ivy)": [[157, "ivy.default_complex_dtype"], [629, "ivy.default_complex_dtype"]], "default_dtype() (in module ivy)": [[158, "ivy.default_dtype"], [629, "ivy.default_dtype"]], "default_float_dtype() (in module ivy)": [[159, "ivy.default_float_dtype"], [629, "ivy.default_float_dtype"]], "default_int_dtype() (in module ivy)": [[160, "ivy.default_int_dtype"], [629, "ivy.default_int_dtype"]], "default_uint_dtype() (in module ivy)": [[161, "ivy.default_uint_dtype"], [629, "ivy.default_uint_dtype"]], "dtype() (in module ivy)": [[162, "ivy.dtype"], [629, "ivy.dtype"]], "dtype() (ivy.array method)": [[162, "ivy.Array.dtype"]], "dtype() (ivy.container method)": [[162, "ivy.Container.dtype"]], "dtype_bits() (in module ivy)": [[163, "ivy.dtype_bits"], [629, "ivy.dtype_bits"]], "finfo() (in module ivy)": [[164, "ivy.finfo"], [629, "ivy.finfo"]], "finfo() (ivy.array method)": [[164, "ivy.Array.finfo"]], "finfo() (ivy.container method)": [[164, "ivy.Container.finfo"]], "function_supported_dtypes() (in module ivy)": [[165, "ivy.function_supported_dtypes"], [629, "ivy.function_supported_dtypes"]], "function_unsupported_dtypes() (in module ivy)": [[166, "ivy.function_unsupported_dtypes"], [629, "ivy.function_unsupported_dtypes"]], "iinfo() (in module ivy)": [[167, "ivy.iinfo"], [629, "ivy.iinfo"]], "iinfo() (ivy.array method)": [[167, "ivy.Array.iinfo"]], "iinfo() (ivy.container method)": [[167, "ivy.Container.iinfo"]], "infer_default_dtype() (in module ivy)": [[168, "ivy.infer_default_dtype"], [629, "ivy.infer_default_dtype"]], "invalid_dtype() (in module ivy)": [[169, "ivy.invalid_dtype"], [629, "ivy.invalid_dtype"]], "is_bool_dtype() (in module ivy)": [[170, "ivy.is_bool_dtype"], [629, "ivy.is_bool_dtype"]], "is_bool_dtype() (ivy.array method)": [[170, "ivy.Array.is_bool_dtype"]], "is_bool_dtype() (ivy.container method)": [[170, "ivy.Container.is_bool_dtype"]], "is_complex_dtype() (in module ivy)": [[171, "ivy.is_complex_dtype"], [629, "ivy.is_complex_dtype"]], "is_complex_dtype() (ivy.container method)": [[171, "ivy.Container.is_complex_dtype"]], "is_float_dtype() (in module ivy)": [[172, "ivy.is_float_dtype"], [629, "ivy.is_float_dtype"]], "is_float_dtype() (ivy.array method)": [[172, "ivy.Array.is_float_dtype"]], "is_float_dtype() (ivy.container method)": [[172, "ivy.Container.is_float_dtype"]], "is_hashable_dtype() (in module ivy)": [[173, "ivy.is_hashable_dtype"], [629, "ivy.is_hashable_dtype"]], "is_int_dtype() (in module ivy)": [[174, "ivy.is_int_dtype"], [629, "ivy.is_int_dtype"]], "is_int_dtype() (ivy.array method)": [[174, "ivy.Array.is_int_dtype"]], "is_int_dtype() (ivy.container method)": [[174, "ivy.Container.is_int_dtype"]], "is_native_dtype() (in module ivy)": [[175, "ivy.is_native_dtype"], [629, "ivy.is_native_dtype"]], "is_uint_dtype() (in module ivy)": [[176, "ivy.is_uint_dtype"], [629, "ivy.is_uint_dtype"]], "is_uint_dtype() (ivy.array method)": [[176, "ivy.Array.is_uint_dtype"]], "is_uint_dtype() (ivy.container method)": [[176, "ivy.Container.is_uint_dtype"]], "promote_types() (in module ivy)": [[177, "ivy.promote_types"], [629, "ivy.promote_types"]], "promote_types_of_inputs() (in module ivy)": [[178, "ivy.promote_types_of_inputs"], [629, "ivy.promote_types_of_inputs"]], "result_type() (in module ivy)": [[179, "ivy.result_type"], [629, "ivy.result_type"]], "result_type() (ivy.array method)": [[179, "ivy.Array.result_type"]], "result_type() (ivy.container method)": [[179, "ivy.Container.result_type"]], "set_default_complex_dtype() (in module ivy)": [[180, "ivy.set_default_complex_dtype"], [629, "ivy.set_default_complex_dtype"]], "set_default_dtype() (in module ivy)": [[181, "ivy.set_default_dtype"], [629, "ivy.set_default_dtype"]], "set_default_float_dtype() (in module ivy)": [[182, "ivy.set_default_float_dtype"], [629, "ivy.set_default_float_dtype"]], "set_default_int_dtype() (in module ivy)": [[183, "ivy.set_default_int_dtype"], [629, "ivy.set_default_int_dtype"]], "set_default_uint_dtype() (in module ivy)": [[184, "ivy.set_default_uint_dtype"], [629, "ivy.set_default_uint_dtype"]], "type_promote_arrays() (in module ivy)": [[185, "ivy.type_promote_arrays"], [629, "ivy.type_promote_arrays"]], "unset_default_complex_dtype() (in module ivy)": [[186, "ivy.unset_default_complex_dtype"], [629, "ivy.unset_default_complex_dtype"]], "unset_default_dtype() (in module ivy)": [[187, "ivy.unset_default_dtype"], [629, "ivy.unset_default_dtype"]], "unset_default_float_dtype() (in module ivy)": [[188, "ivy.unset_default_float_dtype"], [629, "ivy.unset_default_float_dtype"]], "unset_default_int_dtype() (in module ivy)": [[189, "ivy.unset_default_int_dtype"], [629, "ivy.unset_default_int_dtype"]], "unset_default_uint_dtype() (in module ivy)": [[190, "ivy.unset_default_uint_dtype"], [629, "ivy.unset_default_uint_dtype"]], "valid_dtype() (in module ivy)": [[191, "ivy.valid_dtype"], [629, "ivy.valid_dtype"]], "as_ivy_dev() (in module ivy)": [[192, "ivy.as_ivy_dev"], [630, "ivy.as_ivy_dev"]], "as_native_dev() (in module ivy)": [[193, "ivy.as_native_dev"], [630, "ivy.as_native_dev"]], "clear_cached_mem_on_dev() (in module ivy)": [[194, "ivy.clear_cached_mem_on_dev"], [630, "ivy.clear_cached_mem_on_dev"]], "default_device() (in module ivy)": [[195, "ivy.default_device"], [630, "ivy.default_device"]], "dev() (in module ivy)": [[196, "ivy.dev"], [630, "ivy.dev"]], "dev() (ivy.array method)": [[196, "ivy.Array.dev"]], "dev() (ivy.container method)": [[196, "ivy.Container.dev"]], "dev_util() (in module ivy)": [[197, "ivy.dev_util"], [630, "ivy.dev_util"]], "function_supported_devices() (in module ivy)": [[198, "ivy.function_supported_devices"], [630, "ivy.function_supported_devices"]], "function_unsupported_devices() (in module ivy)": [[199, "ivy.function_unsupported_devices"], [630, "ivy.function_unsupported_devices"]], "get_all_ivy_arrays_on_dev() (in module ivy)": [[200, "ivy.get_all_ivy_arrays_on_dev"], [630, "ivy.get_all_ivy_arrays_on_dev"]], "gpu_is_available() (in module ivy)": [[201, "ivy.gpu_is_available"], [630, "ivy.gpu_is_available"]], "handle_soft_device_variable() (in module ivy)": [[202, "ivy.handle_soft_device_variable"], [630, "ivy.handle_soft_device_variable"]], "num_cpu_cores() (in module ivy)": [[203, "ivy.num_cpu_cores"], [630, "ivy.num_cpu_cores"]], "num_gpus() (in module ivy)": [[204, "ivy.num_gpus"], [630, "ivy.num_gpus"]], "num_ivy_arrays_on_dev() (in module ivy)": [[205, "ivy.num_ivy_arrays_on_dev"], [630, "ivy.num_ivy_arrays_on_dev"]], "percent_used_mem_on_dev() (in module ivy)": [[206, "ivy.percent_used_mem_on_dev"], [630, "ivy.percent_used_mem_on_dev"]], "print_all_ivy_arrays_on_dev() (in module ivy)": [[207, "ivy.print_all_ivy_arrays_on_dev"], [630, "ivy.print_all_ivy_arrays_on_dev"]], "set_default_device() (in module ivy)": [[208, "ivy.set_default_device"], [630, "ivy.set_default_device"]], "set_soft_device_mode() (in module ivy)": [[209, "ivy.set_soft_device_mode"], [630, "ivy.set_soft_device_mode"]], "set_split_factor() (in module ivy)": [[210, "ivy.set_split_factor"], [630, "ivy.set_split_factor"]], "split_factor() (in module ivy)": [[211, "ivy.split_factor"], [630, "ivy.split_factor"]], "split_func_call() (in module ivy)": [[212, "ivy.split_func_call"], [630, "ivy.split_func_call"]], "to_device() (in module ivy)": [[213, "ivy.to_device"], [630, "ivy.to_device"]], "to_device() (ivy.array method)": [[213, "ivy.Array.to_device"]], "to_device() (ivy.container method)": [[213, "ivy.Container.to_device"]], "total_mem_on_dev() (in module ivy)": [[214, "ivy.total_mem_on_dev"], [630, "ivy.total_mem_on_dev"]], "tpu_is_available() (in module ivy)": [[215, "ivy.tpu_is_available"], [630, "ivy.tpu_is_available"]], "unset_default_device() (in module ivy)": [[216, "ivy.unset_default_device"], [630, "ivy.unset_default_device"]], "unset_soft_device_mode() (in module ivy)": [[217, "ivy.unset_soft_device_mode"], [630, "ivy.unset_soft_device_mode"]], "used_mem_on_dev() (in module ivy)": [[218, "ivy.used_mem_on_dev"], [630, "ivy.used_mem_on_dev"]], "abs() (in module ivy)": [[219, "ivy.abs"], [631, "ivy.abs"]], "abs() (ivy.array method)": [[219, "ivy.Array.abs"]], "abs() (ivy.container method)": [[219, "ivy.Container.abs"]], "acos() (in module ivy)": [[220, "ivy.acos"], [631, "ivy.acos"]], "acos() (ivy.array method)": [[220, "ivy.Array.acos"]], "acos() (ivy.container method)": [[220, "ivy.Container.acos"]], "acosh() (in module ivy)": [[221, "ivy.acosh"], [631, "ivy.acosh"]], "acosh() (ivy.array method)": [[221, "ivy.Array.acosh"]], "acosh() (ivy.container method)": [[221, "ivy.Container.acosh"]], "add() (in module ivy)": [[222, "ivy.add"], [631, "ivy.add"]], "add() (ivy.array method)": [[222, "ivy.Array.add"]], "add() (ivy.container method)": [[222, "ivy.Container.add"]], "angle() (in module ivy)": [[223, "ivy.angle"], [631, "ivy.angle"]], "angle() (ivy.array method)": [[223, "ivy.Array.angle"]], "angle() (ivy.container method)": [[223, "ivy.Container.angle"]], "asin() (in module ivy)": [[224, "ivy.asin"], [631, "ivy.asin"]], "asin() (ivy.array method)": [[224, "ivy.Array.asin"]], "asin() (ivy.container method)": [[224, "ivy.Container.asin"]], "asinh() (in module ivy)": [[225, "ivy.asinh"], [631, "ivy.asinh"]], "asinh() (ivy.array method)": [[225, "ivy.Array.asinh"]], "asinh() (ivy.container method)": [[225, "ivy.Container.asinh"]], "atan() (in module ivy)": [[226, "ivy.atan"], [631, "ivy.atan"]], "atan() (ivy.array method)": [[226, "ivy.Array.atan"]], "atan() (ivy.container method)": [[226, "ivy.Container.atan"]], "atan2() (in module ivy)": [[227, "ivy.atan2"], [631, "ivy.atan2"]], "atan2() (ivy.array method)": [[227, "ivy.Array.atan2"]], "atan2() (ivy.container method)": [[227, "ivy.Container.atan2"]], "atanh() (in module ivy)": [[228, "ivy.atanh"], [631, "ivy.atanh"]], "atanh() (ivy.array method)": [[228, "ivy.Array.atanh"]], "atanh() (ivy.container method)": [[228, "ivy.Container.atanh"]], "bitwise_and() (in module ivy)": [[229, "ivy.bitwise_and"], [631, "ivy.bitwise_and"]], "bitwise_and() (ivy.array method)": [[229, "ivy.Array.bitwise_and"]], "bitwise_and() (ivy.container method)": [[229, "ivy.Container.bitwise_and"]], "bitwise_invert() (in module ivy)": [[230, "ivy.bitwise_invert"], [631, "ivy.bitwise_invert"]], "bitwise_invert() (ivy.array method)": [[230, "ivy.Array.bitwise_invert"]], "bitwise_invert() (ivy.container method)": [[230, "ivy.Container.bitwise_invert"]], "bitwise_left_shift() (in module ivy)": [[231, "ivy.bitwise_left_shift"], [631, "ivy.bitwise_left_shift"]], "bitwise_left_shift() (ivy.array method)": [[231, "ivy.Array.bitwise_left_shift"]], "bitwise_left_shift() (ivy.container method)": [[231, "ivy.Container.bitwise_left_shift"]], "bitwise_or() (in module ivy)": [[232, "ivy.bitwise_or"], [631, "ivy.bitwise_or"]], "bitwise_or() (ivy.array method)": [[232, "ivy.Array.bitwise_or"]], "bitwise_or() (ivy.container method)": [[232, "ivy.Container.bitwise_or"]], "bitwise_right_shift() (in module ivy)": [[233, "ivy.bitwise_right_shift"], [631, "ivy.bitwise_right_shift"]], "bitwise_right_shift() (ivy.array method)": [[233, "ivy.Array.bitwise_right_shift"]], "bitwise_right_shift() (ivy.container method)": [[233, "ivy.Container.bitwise_right_shift"]], "bitwise_xor() (in module ivy)": [[234, "ivy.bitwise_xor"], [631, "ivy.bitwise_xor"]], "bitwise_xor() (ivy.array method)": [[234, "ivy.Array.bitwise_xor"]], "bitwise_xor() (ivy.container method)": [[234, "ivy.Container.bitwise_xor"]], "ceil() (in module ivy)": [[235, "ivy.ceil"], [631, "ivy.ceil"]], "ceil() (ivy.array method)": [[235, "ivy.Array.ceil"]], "ceil() (ivy.container method)": [[235, "ivy.Container.ceil"]], "cos() (in module ivy)": [[236, "ivy.cos"], [631, "ivy.cos"]], "cos() (ivy.array method)": [[236, "ivy.Array.cos"]], "cos() (ivy.container method)": [[236, "ivy.Container.cos"]], "cosh() (in module ivy)": [[237, "ivy.cosh"], [631, "ivy.cosh"]], "cosh() (ivy.array method)": [[237, "ivy.Array.cosh"]], "cosh() (ivy.container method)": [[237, "ivy.Container.cosh"]], "deg2rad() (in module ivy)": [[238, "ivy.deg2rad"], [631, "ivy.deg2rad"]], "deg2rad() (ivy.array method)": [[238, "ivy.Array.deg2rad"]], "deg2rad() (ivy.container method)": [[238, "ivy.Container.deg2rad"]], "divide() (in module ivy)": [[239, "ivy.divide"], [631, "ivy.divide"]], "divide() (ivy.array method)": [[239, "ivy.Array.divide"]], "divide() (ivy.container method)": [[239, "ivy.Container.divide"]], "equal() (in module ivy)": [[240, "ivy.equal"], [631, "ivy.equal"]], "equal() (ivy.array method)": [[240, "ivy.Array.equal"]], "equal() (ivy.container method)": [[240, "ivy.Container.equal"]], "erf() (in module ivy)": [[241, "ivy.erf"], [631, "ivy.erf"]], "erf() (ivy.array method)": [[241, "ivy.Array.erf"]], "erf() (ivy.container method)": [[241, "ivy.Container.erf"]], "exp() (in module ivy)": [[242, "ivy.exp"], [631, "ivy.exp"]], "exp() (ivy.array method)": [[242, "ivy.Array.exp"]], "exp() (ivy.container method)": [[242, "ivy.Container.exp"]], "exp2() (in module ivy)": [[243, "ivy.exp2"], [631, "ivy.exp2"]], "exp2() (ivy.array method)": [[243, "ivy.Array.exp2"]], "exp2() (ivy.container method)": [[243, "ivy.Container.exp2"]], "expm1() (in module ivy)": [[244, "ivy.expm1"], [631, "ivy.expm1"]], "expm1() (ivy.array method)": [[244, "ivy.Array.expm1"]], "expm1() (ivy.container method)": [[244, "ivy.Container.expm1"]], "floor() (in module ivy)": [[245, "ivy.floor"], [631, "ivy.floor"]], "floor() (ivy.array method)": [[245, "ivy.Array.floor"]], "floor() (ivy.container method)": [[245, "ivy.Container.floor"]], "floor_divide() (in module ivy)": [[246, "ivy.floor_divide"], [631, "ivy.floor_divide"]], "floor_divide() (ivy.array method)": [[246, "ivy.Array.floor_divide"]], "floor_divide() (ivy.container method)": [[246, "ivy.Container.floor_divide"]], "fmin() (in module ivy)": [[247, "ivy.fmin"], [631, "ivy.fmin"]], "fmin() (ivy.array method)": [[247, "ivy.Array.fmin"]], "fmin() (ivy.container method)": [[247, "ivy.Container.fmin"]], "fmod() (in module ivy)": [[248, "ivy.fmod"], [631, "ivy.fmod"]], "fmod() (ivy.array method)": [[248, "ivy.Array.fmod"]], "fmod() (ivy.container method)": [[248, "ivy.Container.fmod"]], "gcd() (in module ivy)": [[249, "ivy.gcd"], [631, "ivy.gcd"]], "gcd() (ivy.array method)": [[249, "ivy.Array.gcd"]], "gcd() (ivy.container method)": [[249, "ivy.Container.gcd"]], "greater() (in module ivy)": [[250, "ivy.greater"], [631, "ivy.greater"]], "greater() (ivy.array method)": [[250, "ivy.Array.greater"]], "greater() (ivy.container method)": [[250, "ivy.Container.greater"]], "greater_equal() (in module ivy)": [[251, "ivy.greater_equal"], [631, "ivy.greater_equal"]], "greater_equal() (ivy.array method)": [[251, "ivy.Array.greater_equal"]], "greater_equal() (ivy.container method)": [[251, "ivy.Container.greater_equal"]], "imag() (in module ivy)": [[252, "ivy.imag"], [631, "ivy.imag"]], "imag() (ivy.array method)": [[252, "ivy.Array.imag"]], "imag() (ivy.container method)": [[252, "ivy.Container.imag"]], "isfinite() (in module ivy)": [[253, "ivy.isfinite"], [631, "ivy.isfinite"]], "isfinite() (ivy.array method)": [[253, "ivy.Array.isfinite"]], "isfinite() (ivy.container method)": [[253, "ivy.Container.isfinite"]], "isinf() (in module ivy)": [[254, "ivy.isinf"], [631, "ivy.isinf"]], "isinf() (ivy.array method)": [[254, "ivy.Array.isinf"]], "isinf() (ivy.container method)": [[254, "ivy.Container.isinf"]], "isnan() (in module ivy)": [[255, "ivy.isnan"], [631, "ivy.isnan"]], "isnan() (ivy.array method)": [[255, "ivy.Array.isnan"]], "isnan() (ivy.container method)": [[255, "ivy.Container.isnan"]], "isreal() (in module ivy)": [[256, "ivy.isreal"], [631, "ivy.isreal"]], "isreal() (ivy.array method)": [[256, "ivy.Array.isreal"]], "isreal() (ivy.container method)": [[256, "ivy.Container.isreal"]], "lcm() (in module ivy)": [[257, "ivy.lcm"], [631, "ivy.lcm"]], "lcm() (ivy.array method)": [[257, "ivy.Array.lcm"]], "lcm() (ivy.container method)": [[257, "ivy.Container.lcm"]], "less() (in module ivy)": [[258, "ivy.less"], [631, "ivy.less"]], "less() (ivy.array method)": [[258, "ivy.Array.less"]], "less() (ivy.container method)": [[258, "ivy.Container.less"]], "less_equal() (in module ivy)": [[259, "ivy.less_equal"], [631, "ivy.less_equal"]], "less_equal() (ivy.array method)": [[259, "ivy.Array.less_equal"]], "less_equal() (ivy.container method)": [[259, "ivy.Container.less_equal"]], "log() (in module ivy)": [[260, "ivy.log"], [631, "ivy.log"]], "log() (ivy.array method)": [[260, "ivy.Array.log"]], "log() (ivy.container method)": [[260, "ivy.Container.log"]], "log10() (in module ivy)": [[261, "ivy.log10"], [631, "ivy.log10"]], "log10() (ivy.array method)": [[261, "ivy.Array.log10"]], "log10() (ivy.container method)": [[261, "ivy.Container.log10"]], "log1p() (in module ivy)": [[262, "ivy.log1p"], [631, "ivy.log1p"]], "log1p() (ivy.array method)": [[262, "ivy.Array.log1p"]], "log1p() (ivy.container method)": [[262, "ivy.Container.log1p"]], "log2() (in module ivy)": [[263, "ivy.log2"], [631, "ivy.log2"]], "log2() (ivy.array method)": [[263, "ivy.Array.log2"]], "log2() (ivy.container method)": [[263, "ivy.Container.log2"]], "logaddexp() (in module ivy)": [[264, "ivy.logaddexp"], [631, "ivy.logaddexp"]], "logaddexp() (ivy.array method)": [[264, "ivy.Array.logaddexp"]], "logaddexp() (ivy.container method)": [[264, "ivy.Container.logaddexp"]], "logaddexp2() (in module ivy)": [[265, "ivy.logaddexp2"], [631, "ivy.logaddexp2"]], "logaddexp2() (ivy.array method)": [[265, "ivy.Array.logaddexp2"]], "logaddexp2() (ivy.container method)": [[265, "ivy.Container.logaddexp2"]], "logical_and() (in module ivy)": [[266, "ivy.logical_and"], [631, "ivy.logical_and"]], "logical_and() (ivy.array method)": [[266, "ivy.Array.logical_and"]], "logical_and() (ivy.container method)": [[266, "ivy.Container.logical_and"]], "logical_not() (in module ivy)": [[267, "ivy.logical_not"], [631, "ivy.logical_not"]], "logical_not() (ivy.array method)": [[267, "ivy.Array.logical_not"]], "logical_not() (ivy.container method)": [[267, "ivy.Container.logical_not"]], "logical_or() (in module ivy)": [[268, "ivy.logical_or"], [631, "ivy.logical_or"]], "logical_or() (ivy.array method)": [[268, "ivy.Array.logical_or"]], "logical_or() (ivy.container method)": [[268, "ivy.Container.logical_or"]], "logical_xor() (in module ivy)": [[269, "ivy.logical_xor"], [631, "ivy.logical_xor"]], "logical_xor() (ivy.array method)": [[269, "ivy.Array.logical_xor"]], "logical_xor() (ivy.container method)": [[269, "ivy.Container.logical_xor"]], "maximum() (in module ivy)": [[270, "ivy.maximum"], [631, "ivy.maximum"]], "maximum() (ivy.array method)": [[270, "ivy.Array.maximum"]], "maximum() (ivy.container method)": [[270, "ivy.Container.maximum"]], "minimum() (in module ivy)": [[271, "ivy.minimum"], [631, "ivy.minimum"]], "minimum() (ivy.array method)": [[271, "ivy.Array.minimum"]], "minimum() (ivy.container method)": [[271, "ivy.Container.minimum"]], "multiply() (in module ivy)": [[272, "ivy.multiply"], [631, "ivy.multiply"]], "multiply() (ivy.array method)": [[272, "ivy.Array.multiply"]], "multiply() (ivy.container method)": [[272, "ivy.Container.multiply"]], "nan_to_num() (in module ivy)": [[273, "ivy.nan_to_num"], [631, "ivy.nan_to_num"]], "nan_to_num() (ivy.array method)": [[273, "ivy.Array.nan_to_num"]], "nan_to_num() (ivy.container method)": [[273, "ivy.Container.nan_to_num"]], "negative() (in module ivy)": [[274, "ivy.negative"], [631, "ivy.negative"]], "negative() (ivy.array method)": [[274, "ivy.Array.negative"]], "negative() (ivy.container method)": [[274, "ivy.Container.negative"]], "not_equal() (in module ivy)": [[275, "ivy.not_equal"], [631, "ivy.not_equal"]], "not_equal() (ivy.array method)": [[275, "ivy.Array.not_equal"]], "not_equal() (ivy.container method)": [[275, "ivy.Container.not_equal"]], "positive() (in module ivy)": [[276, "ivy.positive"], [631, "ivy.positive"]], "positive() (ivy.array method)": [[276, "ivy.Array.positive"]], "positive() (ivy.container method)": [[276, "ivy.Container.positive"]], "pow() (in module ivy)": [[277, "ivy.pow"], [631, "ivy.pow"]], "pow() (ivy.array method)": [[277, "ivy.Array.pow"]], "pow() (ivy.container method)": [[277, "ivy.Container.pow"]], "rad2deg() (in module ivy)": [[278, "ivy.rad2deg"], [631, "ivy.rad2deg"]], "rad2deg() (ivy.array method)": [[278, "ivy.Array.rad2deg"]], "rad2deg() (ivy.container method)": [[278, "ivy.Container.rad2deg"]], "real() (in module ivy)": [[279, "ivy.real"], [631, "ivy.real"]], "real() (ivy.array method)": [[279, "ivy.Array.real"]], "real() (ivy.container method)": [[279, "ivy.Container.real"]], "reciprocal() (in module ivy)": [[280, "ivy.reciprocal"], [631, "ivy.reciprocal"]], "reciprocal() (ivy.array method)": [[280, "ivy.Array.reciprocal"]], "reciprocal() (ivy.container method)": [[280, "ivy.Container.reciprocal"]], "remainder() (in module ivy)": [[281, "ivy.remainder"], [631, "ivy.remainder"]], "remainder() (ivy.array method)": [[281, "ivy.Array.remainder"]], "remainder() (ivy.container method)": [[281, "ivy.Container.remainder"]], "round() (in module ivy)": [[282, "ivy.round"], [631, "ivy.round"]], "round() (ivy.array method)": [[282, "ivy.Array.round"]], "round() (ivy.container method)": [[282, "ivy.Container.round"]], "sign() (in module ivy)": [[283, "ivy.sign"], [631, "ivy.sign"]], "sign() (ivy.array method)": [[283, "ivy.Array.sign"]], "sign() (ivy.container method)": [[283, "ivy.Container.sign"]], "sin() (in module ivy)": [[284, "ivy.sin"], [631, "ivy.sin"]], "sin() (ivy.array method)": [[284, "ivy.Array.sin"]], "sin() (ivy.container method)": [[284, "ivy.Container.sin"]], "sinh() (in module ivy)": [[285, "ivy.sinh"], [631, "ivy.sinh"]], "sinh() (ivy.array method)": [[285, "ivy.Array.sinh"]], "sinh() (ivy.container method)": [[285, "ivy.Container.sinh"]], "sqrt() (in module ivy)": [[286, "ivy.sqrt"], [631, "ivy.sqrt"]], "sqrt() (ivy.array method)": [[286, "ivy.Array.sqrt"]], "sqrt() (ivy.container method)": [[286, "ivy.Container.sqrt"]], "square() (in module ivy)": [[287, "ivy.square"], [631, "ivy.square"]], "square() (ivy.array method)": [[287, "ivy.Array.square"]], "square() (ivy.container method)": [[287, "ivy.Container.square"]], "subtract() (in module ivy)": [[288, "ivy.subtract"], [631, "ivy.subtract"]], "subtract() (ivy.array method)": [[288, "ivy.Array.subtract"]], "subtract() (ivy.container method)": [[288, "ivy.Container.subtract"]], "tan() (in module ivy)": [[289, "ivy.tan"], [631, "ivy.tan"]], "tan() (ivy.array method)": [[289, "ivy.Array.tan"]], "tan() (ivy.container method)": [[289, "ivy.Container.tan"]], "tanh() (in module ivy)": [[290, "ivy.tanh"], [631, "ivy.tanh"]], "tanh() (ivy.array method)": [[290, "ivy.Array.tanh"]], "tanh() (ivy.container method)": [[290, "ivy.Container.tanh"]], "trapz() (in module ivy)": [[291, "ivy.trapz"], [631, "ivy.trapz"]], "trapz() (ivy.array method)": [[291, "ivy.Array.trapz"]], "trapz() (ivy.container method)": [[291, "ivy.Container.trapz"]], "trunc() (in module ivy)": [[292, "ivy.trunc"], [631, "ivy.trunc"]], "trunc() (ivy.array method)": [[292, "ivy.Array.trunc"]], "trunc() (ivy.container method)": [[292, "ivy.Container.trunc"]], "trunc_divide() (in module ivy)": [[293, "ivy.trunc_divide"], [631, "ivy.trunc_divide"]], "trunc_divide() (ivy.array method)": [[293, "ivy.Array.trunc_divide"]], "trunc_divide() (ivy.container method)": [[293, "ivy.Container.trunc_divide"]], "celu() (in module ivy)": [[294, "ivy.celu"], [366, "ivy.celu"]], "celu() (ivy.array method)": [[294, "ivy.Array.celu"]], "celu() (ivy.container method)": [[294, "ivy.Container.celu"]], "elu() (in module ivy)": [[295, "ivy.elu"], [366, "ivy.elu"]], "elu() (ivy.array method)": [[295, "ivy.Array.elu"]], "elu() (ivy.container method)": [[295, "ivy.Container.elu"]], "hardshrink() (in module ivy)": [[296, "ivy.hardshrink"], [366, "ivy.hardshrink"]], "hardshrink() (ivy.array method)": [[296, "ivy.Array.hardshrink"]], "hardshrink() (ivy.container method)": [[296, "ivy.Container.hardshrink"]], "hardsilu() (in module ivy)": [[297, "ivy.hardsilu"], [366, "ivy.hardsilu"]], "hardsilu() (ivy.array method)": [[297, "ivy.Array.hardsilu"]], "hardsilu() (ivy.container method)": [[297, "ivy.Container.hardsilu"]], "hardtanh() (in module ivy)": [[298, "ivy.hardtanh"], [366, "ivy.hardtanh"]], "hardtanh() (ivy.array method)": [[298, "ivy.Array.hardtanh"]], "hardtanh() (ivy.container method)": [[298, "ivy.Container.hardtanh"]], "logit() (in module ivy)": [[299, "ivy.logit"], [366, "ivy.logit"]], "logit() (ivy.array method)": [[299, "ivy.Array.logit"]], "logit() (ivy.container method)": [[299, "ivy.Container.logit"]], "logsigmoid() (in module ivy)": [[300, "ivy.logsigmoid"], [366, "ivy.logsigmoid"]], "logsigmoid() (ivy.array method)": [[300, "ivy.Array.logsigmoid"]], "logsigmoid() (ivy.container method)": [[300, "ivy.Container.logsigmoid"]], "prelu() (in module ivy)": [[301, "ivy.prelu"], [366, "ivy.prelu"]], "prelu() (ivy.array method)": [[301, "ivy.Array.prelu"]], "prelu() (ivy.container method)": [[301, "ivy.Container.prelu"]], "relu6() (in module ivy)": [[302, "ivy.relu6"], [366, "ivy.relu6"]], "relu6() (ivy.array method)": [[302, "ivy.Array.relu6"]], "relu6() (ivy.container method)": [[302, "ivy.Container.relu6"]], "scaled_tanh() (in module ivy)": [[303, "ivy.scaled_tanh"], [366, "ivy.scaled_tanh"]], "scaled_tanh() (ivy.array method)": [[303, "ivy.Array.scaled_tanh"]], "scaled_tanh() (ivy.container method)": [[303, "ivy.Container.scaled_tanh"]], "selu() (in module ivy)": [[304, "ivy.selu"], [366, "ivy.selu"]], "selu() (ivy.array method)": [[304, "ivy.Array.selu"]], "selu() (ivy.container method)": [[304, "ivy.Container.selu"]], "silu() (in module ivy)": [[305, "ivy.silu"], [366, "ivy.silu"]], "silu() (ivy.array method)": [[305, "ivy.Array.silu"]], "silu() (ivy.container method)": [[305, "ivy.Container.silu"]], "softshrink() (in module ivy)": [[306, "ivy.softshrink"], [366, "ivy.softshrink"]], "softshrink() (ivy.array method)": [[306, "ivy.Array.softshrink"]], "softshrink() (ivy.container method)": [[306, "ivy.Container.softshrink"]], "stanh() (in module ivy)": [[307, "ivy.stanh"], [366, "ivy.stanh"]], "tanhshrink() (in module ivy)": [[308, "ivy.tanhshrink"], [366, "ivy.tanhshrink"]], "tanhshrink() (ivy.array method)": [[308, "ivy.Array.tanhshrink"]], "tanhshrink() (ivy.container method)": [[308, "ivy.Container.tanhshrink"]], "threshold() (in module ivy)": [[309, "ivy.threshold"], [366, "ivy.threshold"]], "threshold() (ivy.array method)": [[309, "ivy.Array.threshold"]], "threshold() (ivy.container method)": [[309, "ivy.Container.threshold"]], "thresholded_relu() (in module ivy)": [[310, "ivy.thresholded_relu"], [366, "ivy.thresholded_relu"]], "thresholded_relu() (ivy.array method)": [[310, "ivy.Array.thresholded_relu"]], "thresholded_relu() (ivy.container method)": [[310, "ivy.Container.thresholded_relu"]], "blackman_window() (in module ivy)": [[311, "ivy.blackman_window"], [368, "ivy.blackman_window"]], "blackman_window() (ivy.array method)": [[311, "ivy.Array.blackman_window"]], "blackman_window() (ivy.container method)": [[311, "ivy.Container.blackman_window"]], "eye_like() (in module ivy)": [[312, "ivy.eye_like"], [368, "ivy.eye_like"]], "eye_like() (ivy.array method)": [[312, "ivy.Array.eye_like"]], "eye_like() (ivy.container method)": [[312, "ivy.Container.eye_like"]], "hamming_window() (in module ivy)": [[313, "ivy.hamming_window"], [368, "ivy.hamming_window"]], "hamming_window() (ivy.container method)": [[313, "ivy.Container.hamming_window"]], "hann_window() (in module ivy)": [[314, "ivy.hann_window"], [368, "ivy.hann_window"]], "hann_window() (ivy.container method)": [[314, "ivy.Container.hann_window"]], "indices() (in module ivy)": [[315, "ivy.indices"], [368, "ivy.indices"]], "kaiser_bessel_derived_window() (in module ivy)": [[316, "ivy.kaiser_bessel_derived_window"], [368, "ivy.kaiser_bessel_derived_window"]], "kaiser_bessel_derived_window() (ivy.container method)": [[316, "ivy.Container.kaiser_bessel_derived_window"]], "kaiser_window() (in module ivy)": [[317, "ivy.kaiser_window"], [368, "ivy.kaiser_window"]], "kaiser_window() (ivy.container method)": [[317, "ivy.Container.kaiser_window"]], "mel_weight_matrix() (in module ivy)": [[318, "ivy.mel_weight_matrix"], [368, "ivy.mel_weight_matrix"]], "mel_weight_matrix() (ivy.array static method)": [[318, "ivy.Array.mel_weight_matrix"]], "mel_weight_matrix() (ivy.container method)": [[318, "ivy.Container.mel_weight_matrix"]], "ndenumerate() (in module ivy)": [[319, "ivy.ndenumerate"], [368, "ivy.ndenumerate"]], "ndindex() (in module ivy)": [[320, "ivy.ndindex"], [368, "ivy.ndindex"]], "polyval() (in module ivy)": [[321, "ivy.polyval"], [368, "ivy.polyval"]], "polyval() (ivy.container method)": [[321, "ivy.Container.polyval"]], "random_cp() (in module ivy)": [[322, "ivy.random_cp"], [368, "ivy.random_cp"]], "random_parafac2() (in module ivy)": [[323, "ivy.random_parafac2"], [368, "ivy.random_parafac2"]], "random_tr() (in module ivy)": [[324, "ivy.random_tr"], [368, "ivy.random_tr"]], "random_tt() (in module ivy)": [[325, "ivy.random_tt"], [368, "ivy.random_tt"]], "random_tucker() (in module ivy)": [[326, "ivy.random_tucker"], [368, "ivy.random_tucker"]], "tril_indices() (in module ivy)": [[327, "ivy.tril_indices"], [368, "ivy.tril_indices"]], "tril_indices() (ivy.container method)": [[327, "ivy.Container.tril_indices"]], "trilu() (in module ivy)": [[328, "ivy.trilu"], [368, "ivy.trilu"]], "trilu() (ivy.array method)": [[328, "ivy.Array.trilu"]], "trilu() (ivy.container method)": [[328, "ivy.Container.trilu"]], "unsorted_segment_mean() (in module ivy)": [[329, "ivy.unsorted_segment_mean"], [368, "ivy.unsorted_segment_mean"]], "unsorted_segment_mean() (ivy.array method)": [[329, "ivy.Array.unsorted_segment_mean"]], "unsorted_segment_mean() (ivy.container method)": [[329, "ivy.Container.unsorted_segment_mean"]], "unsorted_segment_min() (in module ivy)": [[330, "ivy.unsorted_segment_min"], [368, "ivy.unsorted_segment_min"]], "unsorted_segment_min() (ivy.array method)": [[330, "ivy.Array.unsorted_segment_min"]], "unsorted_segment_min() (ivy.container method)": [[330, "ivy.Container.unsorted_segment_min"]], "unsorted_segment_sum() (in module ivy)": [[331, "ivy.unsorted_segment_sum"], [368, "ivy.unsorted_segment_sum"]], "unsorted_segment_sum() (ivy.array method)": [[331, "ivy.Array.unsorted_segment_sum"]], "unsorted_segment_sum() (ivy.container method)": [[331, "ivy.Container.unsorted_segment_sum"]], "vorbis_window() (in module ivy)": [[332, "ivy.vorbis_window"], [368, "ivy.vorbis_window"]], "vorbis_window() (ivy.container method)": [[332, "ivy.Container.vorbis_window"]], "allclose() (in module ivy)": [[333, "ivy.allclose"], [371, "ivy.allclose"]], "allclose() (ivy.array method)": [[333, "ivy.Array.allclose"]], "allclose() (ivy.container method)": [[333, "ivy.Container.allclose"]], "amax() (in module ivy)": [[334, "ivy.amax"], [371, "ivy.amax"]], "amax() (ivy.array method)": [[334, "ivy.Array.amax"]], "amax() (ivy.container method)": [[334, "ivy.Container.amax"]], "amin() (in module ivy)": [[335, "ivy.amin"], [371, "ivy.amin"]], "amin() (ivy.array method)": [[335, "ivy.Array.amin"]], "amin() (ivy.container method)": [[335, "ivy.Container.amin"]], "binarizer() (in module ivy)": [[336, "ivy.binarizer"], [371, "ivy.binarizer"]], "binarizer() (ivy.array method)": [[336, "ivy.Array.binarizer"]], "binarizer() (ivy.container method)": [[336, "ivy.Container.binarizer"]], "conj() (in module ivy)": [[337, "ivy.conj"], [371, "ivy.conj"]], "conj() (ivy.array method)": [[337, "ivy.Array.conj"]], "conj() (ivy.container method)": [[337, "ivy.Container.conj"]], "copysign() (in module ivy)": [[338, "ivy.copysign"], [371, "ivy.copysign"]], "copysign() (ivy.array method)": [[338, "ivy.Array.copysign"]], "copysign() (ivy.container method)": [[338, "ivy.Container.copysign"]], "count_nonzero() (in module ivy)": [[339, "ivy.count_nonzero"], [371, "ivy.count_nonzero"]], "count_nonzero() (ivy.array method)": [[339, "ivy.Array.count_nonzero"]], "count_nonzero() (ivy.container method)": [[339, "ivy.Container.count_nonzero"]], "diff() (in module ivy)": [[340, "ivy.diff"], [371, "ivy.diff"]], "diff() (ivy.array method)": [[340, "ivy.Array.diff"]], "diff() (ivy.container method)": [[340, "ivy.Container.diff"]], "digamma() (in module ivy)": [[341, "ivy.digamma"], [371, "ivy.digamma"]], "digamma() (ivy.array method)": [[341, "ivy.Array.digamma"]], "digamma() (ivy.container method)": [[341, "ivy.Container.digamma"]], "erfc() (in module ivy)": [[342, "ivy.erfc"], [371, "ivy.erfc"]], "erfc() (ivy.array method)": [[342, "ivy.Array.erfc"]], "erfc() (ivy.container method)": [[342, "ivy.Container.erfc"]], "erfinv() (in module ivy)": [[343, "ivy.erfinv"], [371, "ivy.erfinv"]], "erfinv() (ivy.array method)": [[343, "ivy.Array.erfinv"]], "erfinv() (ivy.container method)": [[343, "ivy.Container.erfinv"]], "fix() (in module ivy)": [[344, "ivy.fix"], [371, "ivy.fix"]], "fix() (ivy.array method)": [[344, "ivy.Array.fix"]], "fix() (ivy.container method)": [[344, "ivy.Container.fix"]], "float_power() (in module ivy)": [[345, "ivy.float_power"], [371, "ivy.float_power"]], "float_power() (ivy.array method)": [[345, "ivy.Array.float_power"]], "float_power() (ivy.container method)": [[345, "ivy.Container.float_power"]], "fmax() (in module ivy)": [[346, "ivy.fmax"], [371, "ivy.fmax"]], "fmax() (ivy.array method)": [[346, "ivy.Array.fmax"]], "fmax() (ivy.container method)": [[346, "ivy.Container.fmax"]], "frexp() (in module ivy)": [[347, "ivy.frexp"], [371, "ivy.frexp"]], "frexp() (ivy.array method)": [[347, "ivy.Array.frexp"]], "frexp() (ivy.container method)": [[347, "ivy.Container.frexp"]], "gradient() (in module ivy)": [[348, "ivy.gradient"], [371, "ivy.gradient"]], "gradient() (ivy.array method)": [[348, "ivy.Array.gradient"]], "gradient() (ivy.container method)": [[348, "ivy.Container.gradient"]], "hypot() (in module ivy)": [[349, "ivy.hypot"], [371, "ivy.hypot"]], "hypot() (ivy.array method)": [[349, "ivy.Array.hypot"]], "hypot() (ivy.container method)": [[349, "ivy.Container.hypot"]], "isclose() (in module ivy)": [[350, "ivy.isclose"], [371, "ivy.isclose"]], "isclose() (ivy.array method)": [[350, "ivy.Array.isclose"]], "isclose() (ivy.container method)": [[350, "ivy.Container.isclose"]], "ldexp() (in module ivy)": [[351, "ivy.ldexp"], [371, "ivy.ldexp"]], "ldexp() (ivy.array method)": [[351, "ivy.Array.ldexp"]], "ldexp() (ivy.container method)": [[351, "ivy.Container.ldexp"]], "lerp() (in module ivy)": [[352, "ivy.lerp"], [371, "ivy.lerp"]], "lerp() (ivy.array method)": [[352, "ivy.Array.lerp"]], "lerp() (ivy.container method)": [[352, "ivy.Container.lerp"]], "lgamma() (in module ivy)": [[353, "ivy.lgamma"], [371, "ivy.lgamma"]], "lgamma() (ivy.array method)": [[353, "ivy.Array.lgamma"]], "lgamma() (ivy.container method)": [[353, "ivy.Container.lgamma"]], "modf() (in module ivy)": [[354, "ivy.modf"], [371, "ivy.modf"]], "modf() (ivy.array method)": [[354, "ivy.Array.modf"]], "modf() (ivy.container method)": [[354, "ivy.Container.modf"]], "nansum() (in module ivy)": [[355, "ivy.nansum"], [371, "ivy.nansum"]], "nansum() (ivy.array method)": [[355, "ivy.Array.nansum"]], "nansum() (ivy.container method)": [[355, "ivy.Container.nansum"]], "nextafter() (in module ivy)": [[356, "ivy.nextafter"], [371, "ivy.nextafter"]], "nextafter() (ivy.array method)": [[356, "ivy.Array.nextafter"]], "nextafter() (ivy.container method)": [[356, "ivy.Container.nextafter"]], "signbit() (in module ivy)": [[357, "ivy.signbit"], [371, "ivy.signbit"]], "signbit() (ivy.array method)": [[357, "ivy.Array.signbit"]], "signbit() (ivy.container method)": [[357, "ivy.Container.signbit"]], "sinc() (in module ivy)": [[358, "ivy.sinc"], [371, "ivy.sinc"]], "sinc() (ivy.array method)": [[358, "ivy.Array.sinc"]], "sinc() (ivy.container method)": [[358, "ivy.Container.sinc"]], "sparsify_tensor() (in module ivy)": [[359, "ivy.sparsify_tensor"], [371, "ivy.sparsify_tensor"]], "sparsify_tensor() (ivy.array method)": [[359, "ivy.Array.sparsify_tensor"]], "sparsify_tensor() (ivy.container method)": [[359, "ivy.Container.sparsify_tensor"]], "xlogy() (in module ivy)": [[360, "ivy.xlogy"], [371, "ivy.xlogy"]], "xlogy() (ivy.array method)": [[360, "ivy.Array.xlogy"]], "xlogy() (ivy.container method)": [[360, "ivy.Container.xlogy"]], "zeta() (in module ivy)": [[361, "ivy.zeta"], [371, "ivy.zeta"]], "zeta() (ivy.array method)": [[361, "ivy.Array.zeta"]], "zeta() (ivy.container method)": [[361, "ivy.Container.zeta"]], "reduce() (in module ivy)": [[362, "ivy.reduce"], [372, "ivy.reduce"]], "reduce() (ivy.array method)": [[362, "ivy.Array.reduce"]], "reduce() (ivy.container method)": [[362, "ivy.Container.reduce"]], "bind_custom_gradient_function() (in module ivy)": [[363, "ivy.bind_custom_gradient_function"], [373, "ivy.bind_custom_gradient_function"]], "jvp() (in module ivy)": [[364, "ivy.jvp"], [373, "ivy.jvp"]], "vjp() (in module ivy)": [[365, "ivy.vjp"], [373, "ivy.vjp"]], "ivy.functional.ivy.experimental.activations": [[366, "module-ivy.functional.ivy.experimental.activations"]], "ivy.functional.ivy.experimental.constants": [[367, "module-ivy.functional.ivy.experimental.constants"]], "ivy.functional.ivy.experimental.creation": [[368, "module-ivy.functional.ivy.experimental.creation"]], "ivy.functional.ivy.experimental.data_type": [[369, "module-ivy.functional.ivy.experimental.data_type"]], "ivy.functional.ivy.experimental.device": [[370, "module-ivy.functional.ivy.experimental.device"]], "ivy.functional.ivy.experimental.elementwise": [[371, "module-ivy.functional.ivy.experimental.elementwise"]], "ivy.functional.ivy.experimental.general": [[372, "module-ivy.functional.ivy.experimental.general"]], "ivy.functional.ivy.experimental.gradients": [[373, "module-ivy.functional.ivy.experimental.gradients"]], "adaptive_avg_pool1d() (in module ivy)": [[374, "ivy.adaptive_avg_pool1d"], [388, "ivy.adaptive_avg_pool1d"]], "adaptive_avg_pool2d() (in module ivy)": [[374, "ivy.adaptive_avg_pool2d"], [389, "ivy.adaptive_avg_pool2d"]], "adaptive_max_pool2d() (in module ivy)": [[374, "ivy.adaptive_max_pool2d"], [390, "ivy.adaptive_max_pool2d"]], "adaptive_max_pool3d() (in module ivy)": [[374, "ivy.adaptive_max_pool3d"], [391, "ivy.adaptive_max_pool3d"]], "area_interpolate() (in module ivy)": [[374, "ivy.area_interpolate"], [392, "ivy.area_interpolate"]], "avg_pool1d() (in module ivy)": [[374, "ivy.avg_pool1d"], [393, "ivy.avg_pool1d"]], "avg_pool2d() (in module ivy)": [[374, "ivy.avg_pool2d"], [394, "ivy.avg_pool2d"]], "avg_pool3d() (in module ivy)": [[374, "ivy.avg_pool3d"], [395, "ivy.avg_pool3d"]], "dct() (in module ivy)": [[374, "ivy.dct"], [396, "ivy.dct"]], "dft() (in module ivy)": [[374, "ivy.dft"], [397, "ivy.dft"]], "dropout1d() (in module ivy)": [[374, "ivy.dropout1d"], [398, "ivy.dropout1d"]], "dropout2d() (in module ivy)": [[374, "ivy.dropout2d"], [399, "ivy.dropout2d"]], "dropout3d() (in module ivy)": [[374, "ivy.dropout3d"], [400, "ivy.dropout3d"]], "embedding() (in module ivy)": [[374, "ivy.embedding"], [401, "ivy.embedding"]], "fft() (in module ivy)": [[374, "ivy.fft"], [402, "ivy.fft"]], "fft2() (in module ivy)": [[374, "ivy.fft2"], [403, "ivy.fft2"]], "generate_einsum_equation() (in module ivy)": [[374, "ivy.generate_einsum_equation"], [404, "ivy.generate_einsum_equation"]], "get_interpolate_kernel() (in module ivy)": [[374, "ivy.get_interpolate_kernel"], [405, "ivy.get_interpolate_kernel"]], "idct() (in module ivy)": [[374, "ivy.idct"], [406, "ivy.idct"]], "ifft() (in module ivy)": [[374, "ivy.ifft"], [407, "ivy.ifft"]], "ifftn() (in module ivy)": [[374, "ivy.ifftn"], [408, "ivy.ifftn"]], "interp() (in module ivy)": [[374, "ivy.interp"], [409, "ivy.interp"]], "interpolate() (in module ivy)": [[374, "ivy.interpolate"], [410, "ivy.interpolate"]], "ivy.functional.ivy.experimental.layers": [[374, "module-ivy.functional.ivy.experimental.layers"]], "max_pool1d() (in module ivy)": [[374, "ivy.max_pool1d"], [411, "ivy.max_pool1d"]], "max_pool2d() (in module ivy)": [[374, "ivy.max_pool2d"], [412, "ivy.max_pool2d"]], "max_pool3d() (in module ivy)": [[374, "ivy.max_pool3d"], [413, "ivy.max_pool3d"]], "max_unpool1d() (in module ivy)": [[374, "ivy.max_unpool1d"], [414, "ivy.max_unpool1d"]], "nearest_interpolate() (in module ivy)": [[374, "ivy.nearest_interpolate"], [415, "ivy.nearest_interpolate"]], "pool() (in module ivy)": [[374, "ivy.pool"], [416, "ivy.pool"]], "reduce_window() (in module ivy)": [[374, "ivy.reduce_window"], [417, "ivy.reduce_window"]], "rfft() (in module ivy)": [[374, "ivy.rfft"], [418, "ivy.rfft"]], "rfftn() (in module ivy)": [[374, "ivy.rfftn"], [419, "ivy.rfftn"]], "rnn() (in module ivy)": [[374, "ivy.rnn"], [420, "ivy.rnn"]], "sliding_window() (in module ivy)": [[374, "ivy.sliding_window"], [421, "ivy.sliding_window"]], "stft() (in module ivy)": [[374, "ivy.stft"], [422, "ivy.stft"]], "adjoint() (in module ivy)": [[375, "ivy.adjoint"], [423, "ivy.adjoint"]], "batched_outer() (in module ivy)": [[375, "ivy.batched_outer"], [424, "ivy.batched_outer"]], "cond() (in module ivy)": [[375, "ivy.cond"], [425, "ivy.cond"]], "diagflat() (in module ivy)": [[375, "ivy.diagflat"], [426, "ivy.diagflat"]], "dot() (in module ivy)": [[375, "ivy.dot"], [427, "ivy.dot"]], "eig() (in module ivy)": [[375, "ivy.eig"], [428, "ivy.eig"], [636, "ivy.eig"], [671, "ivy.eig"]], "eigh_tridiagonal() (in module ivy)": [[375, "ivy.eigh_tridiagonal"], [429, "ivy.eigh_tridiagonal"]], "eigvals() (in module ivy)": [[375, "ivy.eigvals"], [430, "ivy.eigvals"]], "general_inner_product() (in module ivy)": [[375, "ivy.general_inner_product"], [431, "ivy.general_inner_product"]], "higher_order_moment() (in module ivy)": [[375, "ivy.higher_order_moment"], [432, "ivy.higher_order_moment"]], "initialize_tucker() (in module ivy)": [[375, "ivy.initialize_tucker"], [433, "ivy.initialize_tucker"]], "ivy.functional.ivy.experimental.linear_algebra": [[375, "module-ivy.functional.ivy.experimental.linear_algebra"]], "khatri_rao() (in module ivy)": [[375, "ivy.khatri_rao"], [434, "ivy.khatri_rao"]], "kron() (in module ivy)": [[375, "ivy.kron"], [435, "ivy.kron"]], "kronecker() (in module ivy)": [[375, "ivy.kronecker"], [436, "ivy.kronecker"]], "lu_factor() (in module ivy)": [[375, "ivy.lu_factor"], [437, "ivy.lu_factor"]], "lu_solve() (in module ivy)": [[375, "ivy.lu_solve"], [438, "ivy.lu_solve"]], "make_svd_non_negative() (in module ivy)": [[375, "ivy.make_svd_non_negative"], [439, "ivy.make_svd_non_negative"]], "matrix_exp() (in module ivy)": [[375, "ivy.matrix_exp"], [440, "ivy.matrix_exp"]], "mode_dot() (in module ivy)": [[375, "ivy.mode_dot"], [441, "ivy.mode_dot"]], "multi_dot() (in module ivy)": [[375, "ivy.multi_dot"], [442, "ivy.multi_dot"]], "multi_mode_dot() (in module ivy)": [[375, "ivy.multi_mode_dot"], [443, "ivy.multi_mode_dot"]], "partial_tucker() (in module ivy)": [[375, "ivy.partial_tucker"], [444, "ivy.partial_tucker"]], "solve_triangular() (in module ivy)": [[375, "ivy.solve_triangular"], [445, "ivy.solve_triangular"]], "svd_flip() (in module ivy)": [[375, "ivy.svd_flip"], [446, "ivy.svd_flip"]], "tensor_train() (in module ivy)": [[375, "ivy.tensor_train"], [447, "ivy.tensor_train"]], "truncated_svd() (in module ivy)": [[375, "ivy.truncated_svd"], [448, "ivy.truncated_svd"]], "tt_matrix_to_tensor() (in module ivy)": [[375, "ivy.tt_matrix_to_tensor"], [449, "ivy.tt_matrix_to_tensor"]], "tucker() (in module ivy)": [[375, "ivy.tucker"], [450, "ivy.tucker"]], "hinge_embedding_loss() (in module ivy)": [[376, "ivy.hinge_embedding_loss"], [451, "ivy.hinge_embedding_loss"]], "huber_loss() (in module ivy)": [[376, "ivy.huber_loss"], [452, "ivy.huber_loss"]], "ivy.functional.ivy.experimental.losses": [[376, "module-ivy.functional.ivy.experimental.losses"]], "kl_div() (in module ivy)": [[376, "ivy.kl_div"], [453, "ivy.kl_div"]], "l1_loss() (in module ivy)": [[376, "ivy.l1_loss"], [454, "ivy.l1_loss"]], "log_poisson_loss() (in module ivy)": [[376, "ivy.log_poisson_loss"], [455, "ivy.log_poisson_loss"]], "poisson_nll_loss() (in module ivy)": [[376, "ivy.poisson_nll_loss"], [456, "ivy.poisson_nll_loss"]], "smooth_l1_loss() (in module ivy)": [[376, "ivy.smooth_l1_loss"], [457, "ivy.smooth_l1_loss"]], "soft_margin_loss() (in module ivy)": [[376, "ivy.soft_margin_loss"], [458, "ivy.soft_margin_loss"]], "as_strided() (in module ivy)": [[377, "ivy.as_strided"], [459, "ivy.as_strided"]], "associative_scan() (in module ivy)": [[377, "ivy.associative_scan"], [460, "ivy.associative_scan"]], "atleast_1d() (in module ivy)": [[377, "ivy.atleast_1d"], [461, "ivy.atleast_1d"]], "atleast_2d() (in module ivy)": [[377, "ivy.atleast_2d"], [462, "ivy.atleast_2d"]], "atleast_3d() (in module ivy)": [[377, "ivy.atleast_3d"], [463, "ivy.atleast_3d"]], "broadcast_shapes() (in module ivy)": [[377, "ivy.broadcast_shapes"], [464, "ivy.broadcast_shapes"]], "check_scalar() (in module ivy)": [[377, "ivy.check_scalar"], [465, "ivy.check_scalar"]], "choose() (in module ivy)": [[377, "ivy.choose"], [466, "ivy.choose"]], "column_stack() (in module ivy)": [[377, "ivy.column_stack"], [467, "ivy.column_stack"]], "concat_from_sequence() (in module ivy)": [[377, "ivy.concat_from_sequence"], [468, "ivy.concat_from_sequence"]], "dsplit() (in module ivy)": [[377, "ivy.dsplit"], [469, "ivy.dsplit"]], "dstack() (in module ivy)": [[377, "ivy.dstack"], [470, "ivy.dstack"]], "expand() (in module ivy)": [[377, "ivy.expand"], [471, "ivy.expand"]], "fill_diagonal() (in module ivy)": [[377, "ivy.fill_diagonal"], [472, "ivy.fill_diagonal"]], "flatten() (in module ivy)": [[377, "ivy.flatten"], [473, "ivy.flatten"]], "fliplr() (in module ivy)": [[377, "ivy.fliplr"], [474, "ivy.fliplr"]], "flipud() (in module ivy)": [[377, "ivy.flipud"], [475, "ivy.flipud"]], "fold() (in module ivy)": [[377, "ivy.fold"], [476, "ivy.fold"]], "heaviside() (in module ivy)": [[377, "ivy.heaviside"], [477, "ivy.heaviside"]], "hsplit() (in module ivy)": [[377, "ivy.hsplit"], [478, "ivy.hsplit"]], "hstack() (in module ivy)": [[377, "ivy.hstack"], [479, "ivy.hstack"]], "i0() (in module ivy)": [[377, "ivy.i0"], [480, "ivy.i0"]], "ivy.functional.ivy.experimental.manipulation": [[377, "module-ivy.functional.ivy.experimental.manipulation"]], "matricize() (in module ivy)": [[377, "ivy.matricize"], [481, "ivy.matricize"]], "moveaxis() (in module ivy)": [[377, "ivy.moveaxis"], [482, "ivy.moveaxis"]], "pad() (in module ivy)": [[377, "ivy.pad"], [483, "ivy.pad"]], "partial_fold() (in module ivy)": [[377, "ivy.partial_fold"], [484, "ivy.partial_fold"]], "partial_tensor_to_vec() (in module ivy)": [[377, "ivy.partial_tensor_to_vec"], [485, "ivy.partial_tensor_to_vec"]], "partial_unfold() (in module ivy)": [[377, "ivy.partial_unfold"], [486, "ivy.partial_unfold"]], "partial_vec_to_tensor() (in module ivy)": [[377, "ivy.partial_vec_to_tensor"], [487, "ivy.partial_vec_to_tensor"]], "put_along_axis() (in module ivy)": [[377, "ivy.put_along_axis"], [488, "ivy.put_along_axis"]], "rot90() (in module ivy)": [[377, "ivy.rot90"], [489, "ivy.rot90"]], "soft_thresholding() (in module ivy)": [[377, "ivy.soft_thresholding"], [490, "ivy.soft_thresholding"]], "take() (in module ivy)": [[377, "ivy.take"], [491, "ivy.take"]], "take_along_axis() (in module ivy)": [[377, "ivy.take_along_axis"], [492, "ivy.take_along_axis"]], "top_k() (in module ivy)": [[377, "ivy.top_k"], [493, "ivy.top_k"]], "trim_zeros() (in module ivy)": [[377, "ivy.trim_zeros"], [494, "ivy.trim_zeros"]], "unflatten() (in module ivy)": [[377, "ivy.unflatten"], [495, "ivy.unflatten"]], "unfold() (in module ivy)": [[377, "ivy.unfold"], [496, "ivy.unfold"]], "unique_consecutive() (in module ivy)": [[377, "ivy.unique_consecutive"], [497, "ivy.unique_consecutive"]], "vsplit() (in module ivy)": [[377, "ivy.vsplit"], [498, "ivy.vsplit"]], "vstack() (in module ivy)": [[377, "ivy.vstack"], [499, "ivy.vstack"]], "ivy.functional.ivy.experimental.meta": [[378, "module-ivy.functional.ivy.experimental.meta"]], "ivy.functional.ivy.experimental.nest": [[379, "module-ivy.functional.ivy.experimental.nest"]], "batch_norm() (in module ivy)": [[380, "ivy.batch_norm"], [500, "ivy.batch_norm"]], "group_norm() (in module ivy)": [[380, "ivy.group_norm"], [501, "ivy.group_norm"]], "instance_norm() (in module ivy)": [[380, "ivy.instance_norm"], [502, "ivy.instance_norm"]], "ivy.functional.ivy.experimental.norms": [[380, "module-ivy.functional.ivy.experimental.norms"]], "l1_normalize() (in module ivy)": [[380, "ivy.l1_normalize"], [503, "ivy.l1_normalize"]], "l2_normalize() (in module ivy)": [[380, "ivy.l2_normalize"], [504, "ivy.l2_normalize"]], "local_response_norm() (in module ivy)": [[380, "ivy.local_response_norm"], [505, "ivy.local_response_norm"]], "lp_normalize() (in module ivy)": [[380, "ivy.lp_normalize"], [506, "ivy.lp_normalize"]], "bernoulli() (in module ivy)": [[381, "ivy.bernoulli"], [507, "ivy.bernoulli"]], "beta() (in module ivy)": [[381, "ivy.beta"], [508, "ivy.beta"]], "dirichlet() (in module ivy)": [[381, "ivy.dirichlet"], [509, "ivy.dirichlet"]], "gamma() (in module ivy)": [[381, "ivy.gamma"], [510, "ivy.gamma"]], "ivy.functional.ivy.experimental.random": [[381, "module-ivy.functional.ivy.experimental.random"]], "poisson() (in module ivy)": [[381, "ivy.poisson"], [511, "ivy.poisson"]], "ivy.functional.ivy.experimental.searching": [[382, "module-ivy.functional.ivy.experimental.searching"]], "unravel_index() (in module ivy)": [[382, "ivy.unravel_index"], [512, "ivy.unravel_index"]], "ivy.functional.ivy.experimental.set": [[383, "module-ivy.functional.ivy.experimental.set"]], "invert_permutation() (in module ivy)": [[384, "ivy.invert_permutation"], [513, "ivy.invert_permutation"]], "ivy.functional.ivy.experimental.sorting": [[384, "module-ivy.functional.ivy.experimental.sorting"]], "lexsort() (in module ivy)": [[384, "ivy.lexsort"], [514, "ivy.lexsort"]], "nativesparsearray (class in ivy)": [[385, "ivy.NativeSparseArray"]], "sparsearray (class in ivy)": [[385, "ivy.SparseArray"]], "is_ivy_sparse_array() (in module ivy)": [[385, "ivy.is_ivy_sparse_array"], [515, "ivy.is_ivy_sparse_array"]], "is_native_sparse_array() (in module ivy)": [[385, "ivy.is_native_sparse_array"], [516, "ivy.is_native_sparse_array"]], "ivy.functional.ivy.experimental.sparse_array": [[385, "module-ivy.functional.ivy.experimental.sparse_array"]], "native_sparse_array() (in module ivy)": [[385, "ivy.native_sparse_array"], [517, "ivy.native_sparse_array"]], "native_sparse_array_to_indices_values_and_shape() (in module ivy)": [[385, "ivy.native_sparse_array_to_indices_values_and_shape"], [518, "ivy.native_sparse_array_to_indices_values_and_shape"]], "bincount() (in module ivy)": [[386, "ivy.bincount"], [519, "ivy.bincount"]], "corrcoef() (in module ivy)": [[386, "ivy.corrcoef"], [520, "ivy.corrcoef"]], "cov() (in module ivy)": [[386, "ivy.cov"], [521, "ivy.cov"]], "cummax() (in module ivy)": [[386, "ivy.cummax"], [522, "ivy.cummax"]], "cummin() (in module ivy)": [[386, "ivy.cummin"], [523, "ivy.cummin"]], "histogram() (in module ivy)": [[386, "ivy.histogram"], [524, "ivy.histogram"]], "igamma() (in module ivy)": [[386, "ivy.igamma"], [525, "ivy.igamma"]], "ivy.functional.ivy.experimental.statistical": [[386, "module-ivy.functional.ivy.experimental.statistical"]], "median() (in module ivy)": [[386, "ivy.median"], [526, "ivy.median"]], "nanmean() (in module ivy)": [[386, "ivy.nanmean"], [527, "ivy.nanmean"]], "nanmedian() (in module ivy)": [[386, "ivy.nanmedian"], [528, "ivy.nanmedian"]], "nanmin() (in module ivy)": [[386, "ivy.nanmin"], [529, "ivy.nanmin"]], "nanprod() (in module ivy)": [[386, "ivy.nanprod"], [530, "ivy.nanprod"]], "quantile() (in module ivy)": [[386, "ivy.quantile"], [531, "ivy.quantile"]], "ivy.functional.ivy.experimental.utility": [[387, "module-ivy.functional.ivy.experimental.utility"]], "optional_get_element() (in module ivy)": [[387, "ivy.optional_get_element"], [532, "ivy.optional_get_element"]], "adaptive_avg_pool1d() (ivy.array method)": [[388, "ivy.Array.adaptive_avg_pool1d"]], "adaptive_avg_pool1d() (ivy.container method)": [[388, "ivy.Container.adaptive_avg_pool1d"]], "adaptive_avg_pool2d() (ivy.array method)": [[389, "ivy.Array.adaptive_avg_pool2d"]], "adaptive_avg_pool2d() (ivy.container method)": [[389, "ivy.Container.adaptive_avg_pool2d"]], "adaptive_max_pool2d() (ivy.array method)": [[390, "ivy.Array.adaptive_max_pool2d"]], "adaptive_max_pool2d() (ivy.container method)": [[390, "ivy.Container.adaptive_max_pool2d"]], "adaptive_max_pool3d() (ivy.array method)": [[391, "ivy.Array.adaptive_max_pool3d"]], "adaptive_max_pool3d() (ivy.container method)": [[391, "ivy.Container.adaptive_max_pool3d"]], "avg_pool1d() (ivy.array method)": [[393, "ivy.Array.avg_pool1d"]], "avg_pool1d() (ivy.container method)": [[393, "ivy.Container.avg_pool1d"]], "avg_pool2d() (ivy.array method)": [[394, "ivy.Array.avg_pool2d"]], "avg_pool2d() (ivy.container method)": [[394, "ivy.Container.avg_pool2d"]], "avg_pool3d() (ivy.array method)": [[395, "ivy.Array.avg_pool3d"]], "avg_pool3d() (ivy.container method)": [[395, "ivy.Container.avg_pool3d"]], "dct() (ivy.array method)": [[396, "ivy.Array.dct"]], "dct() (ivy.container method)": [[396, "ivy.Container.dct"]], "dft() (ivy.array method)": [[397, "ivy.Array.dft"]], "dft() (ivy.container method)": [[397, "ivy.Container.dft"]], "dropout1d() (ivy.array method)": [[398, "ivy.Array.dropout1d"]], "dropout1d() (ivy.container method)": [[398, "ivy.Container.dropout1d"]], "dropout2d() (ivy.array method)": [[399, "ivy.Array.dropout2d"]], "dropout2d() (ivy.container method)": [[399, "ivy.Container.dropout2d"]], "dropout3d() (ivy.array method)": [[400, "ivy.Array.dropout3d"]], "dropout3d() (ivy.container method)": [[400, "ivy.Container.dropout3d"]], "embedding() (ivy.array method)": [[401, "ivy.Array.embedding"]], "embedding() (ivy.container method)": [[401, "ivy.Container.embedding"]], "fft() (ivy.array method)": [[402, "ivy.Array.fft"]], "fft() (ivy.container method)": [[402, "ivy.Container.fft"]], "fft2() (ivy.array method)": [[403, "ivy.Array.fft2"]], "idct() (ivy.array method)": [[406, "ivy.Array.idct"]], "idct() (ivy.container method)": [[406, "ivy.Container.idct"]], "ifft() (ivy.array method)": [[407, "ivy.Array.ifft"]], "ifft() (ivy.container method)": [[407, "ivy.Container.ifft"]], "ifftn() (ivy.array method)": [[408, "ivy.Array.ifftn"]], "ifftn() (ivy.container method)": [[408, "ivy.Container.ifftn"]], "interpolate() (ivy.array method)": [[410, "ivy.Array.interpolate"]], "interpolate() (ivy.container method)": [[410, "ivy.Container.interpolate"]], "max_pool1d() (ivy.array method)": [[411, "ivy.Array.max_pool1d"]], "max_pool1d() (ivy.container method)": [[411, "ivy.Container.max_pool1d"]], "max_pool2d() (ivy.array method)": [[412, "ivy.Array.max_pool2d"]], "max_pool2d() (ivy.container method)": [[412, "ivy.Container.max_pool2d"]], "max_pool3d() (ivy.array method)": [[413, "ivy.Array.max_pool3d"]], "max_pool3d() (ivy.container method)": [[413, "ivy.Container.max_pool3d"]], "max_unpool1d() (ivy.array method)": [[414, "ivy.Array.max_unpool1d"]], "max_unpool1d() (ivy.container method)": [[414, "ivy.Container.max_unpool1d"]], "reduce_window() (ivy.array method)": [[417, "ivy.Array.reduce_window"]], "reduce_window() (ivy.container method)": [[417, "ivy.Container.reduce_window"]], "rfft() (ivy.array method)": [[418, "ivy.Array.rfft"]], "rfft() (ivy.container method)": [[418, "ivy.Container.rfft"]], "rfftn() (ivy.array method)": [[419, "ivy.Array.rfftn"]], "rfftn() (ivy.container method)": [[419, "ivy.Container.rfftn"]], "sliding_window() (ivy.array method)": [[421, "ivy.Array.sliding_window"]], "sliding_window() (ivy.container method)": [[421, "ivy.Container.sliding_window"]], "stft() (ivy.array method)": [[422, "ivy.Array.stft"]], "stft() (ivy.container method)": [[422, "ivy.Container.stft"]], "adjoint() (ivy.array method)": [[423, "ivy.Array.adjoint"]], "adjoint() (ivy.container method)": [[423, "ivy.Container.adjoint"]], "batched_outer() (ivy.array method)": [[424, "ivy.Array.batched_outer"]], "batched_outer() (ivy.container method)": [[424, "ivy.Container.batched_outer"]], "cond() (ivy.array method)": [[425, "ivy.Array.cond"]], "cond() (ivy.container method)": [[425, "ivy.Container.cond"]], "diagflat() (ivy.array method)": [[426, "ivy.Array.diagflat"]], "diagflat() (ivy.container method)": [[426, "ivy.Container.diagflat"]], "dot() (ivy.array method)": [[427, "ivy.Array.dot"]], "dot() (ivy.container method)": [[427, "ivy.Container.dot"]], "eig() (ivy.array method)": [[428, "ivy.Array.eig"], [671, "ivy.Array.eig"]], "eig() (ivy.container method)": [[428, "ivy.Container.eig"], [671, "ivy.Container.eig"]], "eigh_tridiagonal() (ivy.array method)": [[429, "ivy.Array.eigh_tridiagonal"]], "eigh_tridiagonal() (ivy.container method)": [[429, "ivy.Container.eigh_tridiagonal"]], "eigvals() (ivy.array method)": [[430, "ivy.Array.eigvals"]], "eigvals() (ivy.container method)": [[430, "ivy.Container.eigvals"]], "general_inner_product() (ivy.array method)": [[431, "ivy.Array.general_inner_product"]], "general_inner_product() (ivy.container method)": [[431, "ivy.Container.general_inner_product"]], "higher_order_moment() (ivy.array method)": [[432, "ivy.Array.higher_order_moment"]], "higher_order_moment() (ivy.container method)": [[432, "ivy.Container.higher_order_moment"]], "initialize_tucker() (ivy.array method)": [[433, "ivy.Array.initialize_tucker"]], "initialize_tucker() (ivy.container method)": [[433, "ivy.Container.initialize_tucker"]], "kron() (ivy.array method)": [[435, "ivy.Array.kron"]], "kron() (ivy.container method)": [[435, "ivy.Container.kron"]], "make_svd_non_negative() (ivy.array method)": [[439, "ivy.Array.make_svd_non_negative"]], "make_svd_non_negative() (ivy.container method)": [[439, "ivy.Container.make_svd_non_negative"]], "matrix_exp() (ivy.array method)": [[440, "ivy.Array.matrix_exp"]], "matrix_exp() (ivy.container method)": [[440, "ivy.Container.matrix_exp"]], "mode_dot() (ivy.array method)": [[441, "ivy.Array.mode_dot"]], "mode_dot() (ivy.container method)": [[441, "ivy.Container.mode_dot"]], "multi_dot() (ivy.array method)": [[442, "ivy.Array.multi_dot"]], "multi_dot() (ivy.container method)": [[442, "ivy.Container.multi_dot"]], "multi_mode_dot() (ivy.array method)": [[443, "ivy.Array.multi_mode_dot"]], "multi_mode_dot() (ivy.container method)": [[443, "ivy.Container.multi_mode_dot"]], "partial_tucker() (ivy.array method)": [[444, "ivy.Array.partial_tucker"]], "partial_tucker() (ivy.container method)": [[444, "ivy.Container.partial_tucker"]], "svd_flip() (ivy.array method)": [[446, "ivy.Array.svd_flip"]], "svd_flip() (ivy.container method)": [[446, "ivy.Container.svd_flip"]], "tensor_train() (ivy.array method)": [[447, "ivy.Array.tensor_train"]], "tensor_train() (ivy.container method)": [[447, "ivy.Container.tensor_train"]], "truncated_svd() (ivy.array method)": [[448, "ivy.Array.truncated_svd"]], "truncated_svd() (ivy.container method)": [[448, "ivy.Container.truncated_svd"]], "tt_matrix_to_tensor() (ivy.array method)": [[449, "ivy.Array.tt_matrix_to_tensor"]], "tt_matrix_to_tensor() (ivy.container method)": [[449, "ivy.Container.tt_matrix_to_tensor"]], "tucker() (ivy.array method)": [[450, "ivy.Array.tucker"]], "tucker() (ivy.container method)": [[450, "ivy.Container.tucker"]], "hinge_embedding_loss() (ivy.array method)": [[451, "ivy.Array.hinge_embedding_loss"]], "hinge_embedding_loss() (ivy.container method)": [[451, "ivy.Container.hinge_embedding_loss"]], "huber_loss() (ivy.array method)": [[452, "ivy.Array.huber_loss"]], "huber_loss() (ivy.container method)": [[452, "ivy.Container.huber_loss"]], "kl_div() (ivy.array method)": [[453, "ivy.Array.kl_div"]], "kl_div() (ivy.container method)": [[453, "ivy.Container.kl_div"]], "l1_loss() (ivy.array method)": [[454, "ivy.Array.l1_loss"]], "l1_loss() (ivy.container method)": [[454, "ivy.Container.l1_loss"]], "log_poisson_loss() (ivy.array method)": [[455, "ivy.Array.log_poisson_loss"]], "log_poisson_loss() (ivy.container method)": [[455, "ivy.Container.log_poisson_loss"]], "poisson_nll_loss() (ivy.array method)": [[456, "ivy.Array.poisson_nll_loss"]], "poisson_nll_loss() (ivy.container method)": [[456, "ivy.Container.poisson_nll_loss"]], "smooth_l1_loss() (ivy.array method)": [[457, "ivy.Array.smooth_l1_loss"]], "smooth_l1_loss() (ivy.container method)": [[457, "ivy.Container.smooth_l1_loss"]], "soft_margin_loss() (ivy.array method)": [[458, "ivy.Array.soft_margin_loss"]], "soft_margin_loss() (ivy.container method)": [[458, "ivy.Container.soft_margin_loss"]], "as_strided() (ivy.array method)": [[459, "ivy.Array.as_strided"]], "as_strided() (ivy.container method)": [[459, "ivy.Container.as_strided"]], "associative_scan() (ivy.array method)": [[460, "ivy.Array.associative_scan"]], "associative_scan() (ivy.container method)": [[460, "ivy.Container.associative_scan"]], "atleast_1d() (ivy.array method)": [[461, "ivy.Array.atleast_1d"]], "atleast_1d() (ivy.container method)": [[461, "ivy.Container.atleast_1d"]], "atleast_2d() (ivy.array method)": [[462, "ivy.Array.atleast_2d"]], "atleast_2d() (ivy.container method)": [[462, "ivy.Container.atleast_2d"]], "atleast_3d() (ivy.array method)": [[463, "ivy.Array.atleast_3d"]], "atleast_3d() (ivy.container method)": [[463, "ivy.Container.atleast_3d"]], "broadcast_shapes() (ivy.container method)": [[464, "ivy.Container.broadcast_shapes"]], "column_stack() (ivy.array method)": [[467, "ivy.Array.column_stack"]], "column_stack() (ivy.container method)": [[467, "ivy.Container.column_stack"]], "concat_from_sequence() (ivy.array method)": [[468, "ivy.Array.concat_from_sequence"]], "concat_from_sequence() (ivy.container method)": [[468, "ivy.Container.concat_from_sequence"]], "dsplit() (ivy.array method)": [[469, "ivy.Array.dsplit"]], "dsplit() (ivy.container method)": [[469, "ivy.Container.dsplit"]], "dstack() (ivy.array method)": [[470, "ivy.Array.dstack"]], "dstack() (ivy.container method)": [[470, "ivy.Container.dstack"]], "expand() (ivy.array method)": [[471, "ivy.Array.expand"]], "expand() (ivy.container method)": [[471, "ivy.Container.expand"]], "fill_diagonal() (ivy.array method)": [[472, "ivy.Array.fill_diagonal"]], "fill_diagonal() (ivy.container method)": [[472, "ivy.Container.fill_diagonal"]], "flatten() (ivy.array method)": [[473, "ivy.Array.flatten"]], "flatten() (ivy.container method)": [[473, "ivy.Container.flatten"]], "fliplr() (ivy.array method)": [[474, "ivy.Array.fliplr"]], "fliplr() (ivy.container method)": [[474, "ivy.Container.fliplr"]], "flipud() (ivy.array method)": [[475, "ivy.Array.flipud"]], "flipud() (ivy.container method)": [[475, "ivy.Container.flipud"]], "fold() (ivy.array method)": [[476, "ivy.Array.fold"]], "fold() (ivy.container method)": [[476, "ivy.Container.fold"]], "heaviside() (ivy.array method)": [[477, "ivy.Array.heaviside"]], "heaviside() (ivy.container method)": [[477, "ivy.Container.heaviside"]], "hsplit() (ivy.array method)": [[478, "ivy.Array.hsplit"]], "hsplit() (ivy.container method)": [[478, "ivy.Container.hsplit"]], "hstack() (ivy.array method)": [[479, "ivy.Array.hstack"]], "hstack() (ivy.container method)": [[479, "ivy.Container.hstack"]], "i0() (ivy.array method)": [[480, "ivy.Array.i0"]], "i0() (ivy.container method)": [[480, "ivy.Container.i0"]], "matricize() (ivy.array method)": [[481, "ivy.Array.matricize"]], "matricize() (ivy.container method)": [[481, "ivy.Container.matricize"]], "moveaxis() (ivy.array method)": [[482, "ivy.Array.moveaxis"]], "moveaxis() (ivy.container method)": [[482, "ivy.Container.moveaxis"]], "pad() (ivy.array method)": [[483, "ivy.Array.pad"]], "pad() (ivy.container method)": [[483, "ivy.Container.pad"]], "partial_fold() (ivy.array method)": [[484, "ivy.Array.partial_fold"]], "partial_fold() (ivy.container method)": [[484, "ivy.Container.partial_fold"]], "partial_tensor_to_vec() (ivy.array method)": [[485, "ivy.Array.partial_tensor_to_vec"]], "partial_tensor_to_vec() (ivy.container method)": [[485, "ivy.Container.partial_tensor_to_vec"]], "partial_unfold() (ivy.array method)": [[486, "ivy.Array.partial_unfold"]], "partial_unfold() (ivy.container method)": [[486, "ivy.Container.partial_unfold"]], "partial_vec_to_tensor() (ivy.array method)": [[487, "ivy.Array.partial_vec_to_tensor"]], "partial_vec_to_tensor() (ivy.container method)": [[487, "ivy.Container.partial_vec_to_tensor"]], "put_along_axis() (ivy.array method)": [[488, "ivy.Array.put_along_axis"]], "put_along_axis() (ivy.container method)": [[488, "ivy.Container.put_along_axis"]], "rot90() (ivy.array method)": [[489, "ivy.Array.rot90"]], "rot90() (ivy.container method)": [[489, "ivy.Container.rot90"]], "soft_thresholding() (ivy.array method)": [[490, "ivy.Array.soft_thresholding"]], "soft_thresholding() (ivy.container method)": [[490, "ivy.Container.soft_thresholding"]], "take() (ivy.array method)": [[491, "ivy.Array.take"]], "take() (ivy.container method)": [[491, "ivy.Container.take"]], "take_along_axis() (ivy.array method)": [[492, "ivy.Array.take_along_axis"]], "take_along_axis() (ivy.container method)": [[492, "ivy.Container.take_along_axis"]], "top_k() (ivy.array method)": [[493, "ivy.Array.top_k"]], "top_k() (ivy.container method)": [[493, "ivy.Container.top_k"]], "trim_zeros() (ivy.array method)": [[494, "ivy.Array.trim_zeros"]], "trim_zeros() (ivy.container method)": [[494, "ivy.Container.trim_zeros"]], "unflatten() (ivy.array method)": [[495, "ivy.Array.unflatten"]], "unflatten() (ivy.container method)": [[495, "ivy.Container.unflatten"]], "unfold() (ivy.array method)": [[496, "ivy.Array.unfold"]], "unfold() (ivy.container method)": [[496, "ivy.Container.unfold"]], "unique_consecutive() (ivy.array method)": [[497, "ivy.Array.unique_consecutive"]], "unique_consecutive() (ivy.container method)": [[497, "ivy.Container.unique_consecutive"]], "vsplit() (ivy.array method)": [[498, "ivy.Array.vsplit"]], "vsplit() (ivy.container method)": [[498, "ivy.Container.vsplit"]], "vstack() (ivy.array method)": [[499, "ivy.Array.vstack"]], "vstack() (ivy.container method)": [[499, "ivy.Container.vstack"]], "batch_norm() (ivy.array method)": [[500, "ivy.Array.batch_norm"]], "batch_norm() (ivy.container method)": [[500, "ivy.Container.batch_norm"]], "group_norm() (ivy.array method)": [[501, "ivy.Array.group_norm"]], "group_norm() (ivy.container method)": [[501, "ivy.Container.group_norm"]], "instance_norm() (ivy.array method)": [[502, "ivy.Array.instance_norm"]], "instance_norm() (ivy.container method)": [[502, "ivy.Container.instance_norm"]], "l1_normalize() (ivy.array method)": [[503, "ivy.Array.l1_normalize"]], "l1_normalize() (ivy.container method)": [[503, "ivy.Container.l1_normalize"]], "l2_normalize() (ivy.array method)": [[504, "ivy.Array.l2_normalize"]], "l2_normalize() (ivy.container method)": [[504, "ivy.Container.l2_normalize"]], "lp_normalize() (ivy.array method)": [[506, "ivy.Array.lp_normalize"]], "lp_normalize() (ivy.container method)": [[506, "ivy.Container.lp_normalize"]], "bernoulli() (ivy.array method)": [[507, "ivy.Array.bernoulli"]], "bernoulli() (ivy.container method)": [[507, "ivy.Container.bernoulli"]], "beta() (ivy.array method)": [[508, "ivy.Array.beta"]], "beta() (ivy.container method)": [[508, "ivy.Container.beta"]], "dirichlet() (ivy.array method)": [[509, "ivy.Array.dirichlet"]], "dirichlet() (ivy.container method)": [[509, "ivy.Container.dirichlet"]], "gamma() (ivy.array method)": [[510, "ivy.Array.gamma"]], "gamma() (ivy.container method)": [[510, "ivy.Container.gamma"]], "poisson() (ivy.array method)": [[511, "ivy.Array.poisson"]], "poisson() (ivy.container method)": [[511, "ivy.Container.poisson"]], "unravel_index() (ivy.array method)": [[512, "ivy.Array.unravel_index"]], "unravel_index() (ivy.container method)": [[512, "ivy.Container.unravel_index"]], "invert_permutation() (ivy.container method)": [[513, "ivy.Container.invert_permutation"]], "lexsort() (ivy.array method)": [[514, "ivy.Array.lexsort"]], "lexsort() (ivy.container method)": [[514, "ivy.Container.lexsort"]], "bincount() (ivy.array method)": [[519, "ivy.Array.bincount"]], "bincount() (ivy.container method)": [[519, "ivy.Container.bincount"]], "corrcoef() (ivy.array method)": [[520, "ivy.Array.corrcoef"]], "corrcoef() (ivy.container method)": [[520, "ivy.Container.corrcoef"]], "cov() (ivy.array method)": [[521, "ivy.Array.cov"]], "cov() (ivy.container method)": [[521, "ivy.Container.cov"]], "cummax() (ivy.array method)": [[522, "ivy.Array.cummax"]], "cummax() (ivy.container method)": [[522, "ivy.Container.cummax"]], "cummin() (ivy.array method)": [[523, "ivy.Array.cummin"]], "cummin() (ivy.container method)": [[523, "ivy.Container.cummin"]], "histogram() (ivy.array method)": [[524, "ivy.Array.histogram"]], "histogram() (ivy.container method)": [[524, "ivy.Container.histogram"]], "igamma() (ivy.array method)": [[525, "ivy.Array.igamma"]], "igamma() (ivy.container method)": [[525, "ivy.Container.igamma"]], "median() (ivy.array method)": [[526, "ivy.Array.median"]], "median() (ivy.container method)": [[526, "ivy.Container.median"]], "nanmean() (ivy.array method)": [[527, "ivy.Array.nanmean"]], "nanmean() (ivy.container method)": [[527, "ivy.Container.nanmean"]], "nanmedian() (ivy.array method)": [[528, "ivy.Array.nanmedian"]], "nanmedian() (ivy.container method)": [[528, "ivy.Container.nanmedian"]], "nanmin() (ivy.array method)": [[529, "ivy.Array.nanmin"]], "nanmin() (ivy.container method)": [[529, "ivy.Container.nanmin"]], "nanprod() (ivy.array method)": [[530, "ivy.Array.nanprod"]], "nanprod() (ivy.container method)": [[530, "ivy.Container.nanprod"]], "quantile() (ivy.array method)": [[531, "ivy.Array.quantile"]], "quantile() (ivy.container method)": [[531, "ivy.Container.quantile"]], "optional_get_element() (ivy.array method)": [[532, "ivy.Array.optional_get_element"]], "optional_get_element() (ivy.container method)": [[532, "ivy.Container.optional_get_element"]], "all_equal() (in module ivy)": [[533, "ivy.all_equal"], [633, "ivy.all_equal"]], "all_equal() (ivy.array method)": [[533, "ivy.Array.all_equal"]], "all_equal() (ivy.container method)": [[533, "ivy.Container.all_equal"]], "arg_info() (in module ivy)": [[534, "ivy.arg_info"], [633, "ivy.arg_info"]], "arg_names() (in module ivy)": [[535, "ivy.arg_names"], [633, "ivy.arg_names"]], "array_equal() (in module ivy)": [[536, "ivy.array_equal"], [633, "ivy.array_equal"]], "array_equal() (ivy.array method)": [[536, "ivy.Array.array_equal"]], "array_equal() (ivy.container method)": [[536, "ivy.Container.array_equal"]], "assert_supports_inplace() (in module ivy)": [[537, "ivy.assert_supports_inplace"], [633, "ivy.assert_supports_inplace"]], "assert_supports_inplace() (ivy.array method)": [[537, "ivy.Array.assert_supports_inplace"]], "assert_supports_inplace() (ivy.container method)": [[537, "ivy.Container.assert_supports_inplace"]], "cache_fn() (in module ivy)": [[538, "ivy.cache_fn"], [633, "ivy.cache_fn"]], "clip_matrix_norm() (in module ivy)": [[539, "ivy.clip_matrix_norm"], [633, "ivy.clip_matrix_norm"]], "clip_matrix_norm() (ivy.array method)": [[539, "ivy.Array.clip_matrix_norm"]], "clip_matrix_norm() (ivy.container method)": [[539, "ivy.Container.clip_matrix_norm"]], "clip_vector_norm() (in module ivy)": [[540, "ivy.clip_vector_norm"], [633, "ivy.clip_vector_norm"]], "clip_vector_norm() (ivy.array method)": [[540, "ivy.Array.clip_vector_norm"]], "clip_vector_norm() (ivy.container method)": [[540, "ivy.Container.clip_vector_norm"]], "container_types() (in module ivy)": [[541, "ivy.container_types"], [633, "ivy.container_types"]], "current_backend_str() (in module ivy)": [[542, "ivy.current_backend_str"], [633, "ivy.current_backend_str"]], "default() (in module ivy)": [[543, "ivy.default"], [633, "ivy.default"]], "default() (ivy.array method)": [[543, "ivy.Array.default"]], "einops_rearrange() (in module ivy)": [[544, "ivy.einops_rearrange"], [633, "ivy.einops_rearrange"]], "einops_rearrange() (ivy.array method)": [[544, "ivy.Array.einops_rearrange"]], "einops_rearrange() (ivy.container method)": [[544, "ivy.Container.einops_rearrange"]], "einops_reduce() (in module ivy)": [[545, "ivy.einops_reduce"], [633, "ivy.einops_reduce"]], "einops_reduce() (ivy.array method)": [[545, "ivy.Array.einops_reduce"]], "einops_reduce() (ivy.container method)": [[545, "ivy.Container.einops_reduce"]], "einops_repeat() (in module ivy)": [[546, "ivy.einops_repeat"], [633, "ivy.einops_repeat"]], "einops_repeat() (ivy.array method)": [[546, "ivy.Array.einops_repeat"]], "einops_repeat() (ivy.container method)": [[546, "ivy.Container.einops_repeat"]], "exists() (in module ivy)": [[547, "ivy.exists"], [633, "ivy.exists"]], "exists() (ivy.array method)": [[547, "ivy.Array.exists"]], "exists() (ivy.container method)": [[547, "ivy.Container.exists"]], "fourier_encode() (in module ivy)": [[548, "ivy.fourier_encode"], [633, "ivy.fourier_encode"]], "fourier_encode() (ivy.array method)": [[548, "ivy.Array.fourier_encode"]], "fourier_encode() (ivy.container method)": [[548, "ivy.Container.fourier_encode"]], "function_supported_devices_and_dtypes() (in module ivy)": [[549, "ivy.function_supported_devices_and_dtypes"], [633, "ivy.function_supported_devices_and_dtypes"]], "function_unsupported_devices_and_dtypes() (in module ivy)": [[550, "ivy.function_unsupported_devices_and_dtypes"], [633, "ivy.function_unsupported_devices_and_dtypes"]], "gather() (in module ivy)": [[551, "ivy.gather"], [633, "ivy.gather"]], "gather() (ivy.array method)": [[551, "ivy.Array.gather"]], "gather() (ivy.container method)": [[551, "ivy.Container.gather"]], "gather_nd() (in module ivy)": [[552, "ivy.gather_nd"], [633, "ivy.gather_nd"]], "gather_nd() (ivy.array method)": [[552, "ivy.Array.gather_nd"]], "gather_nd() (ivy.container method)": [[552, "ivy.Container.gather_nd"]], "get_all_arrays_in_memory() (in module ivy)": [[553, "ivy.get_all_arrays_in_memory"], [633, "ivy.get_all_arrays_in_memory"]], "get_item() (in module ivy)": [[554, "ivy.get_item"], [633, "ivy.get_item"]], "get_num_dims() (in module ivy)": [[555, "ivy.get_num_dims"], [633, "ivy.get_num_dims"]], "get_num_dims() (ivy.array method)": [[555, "ivy.Array.get_num_dims"]], "get_num_dims() (ivy.container method)": [[555, "ivy.Container.get_num_dims"]], "get_referrers_recursive() (in module ivy)": [[556, "ivy.get_referrers_recursive"], [633, "ivy.get_referrers_recursive"]], "has_nans() (in module ivy)": [[557, "ivy.has_nans"], [633, "ivy.has_nans"]], "has_nans() (ivy.array method)": [[557, "ivy.Array.has_nans"]], "has_nans() (ivy.container method)": [[557, "ivy.Container.has_nans"]], "inplace_arrays_supported() (in module ivy)": [[558, "ivy.inplace_arrays_supported"], [633, "ivy.inplace_arrays_supported"]], "inplace_decrement() (in module ivy)": [[559, "ivy.inplace_decrement"], [633, "ivy.inplace_decrement"]], "inplace_decrement() (ivy.array method)": [[559, "ivy.Array.inplace_decrement"]], "inplace_decrement() (ivy.container method)": [[559, "ivy.Container.inplace_decrement"]], "inplace_increment() (in module ivy)": [[560, "ivy.inplace_increment"], [633, "ivy.inplace_increment"]], "inplace_increment() (ivy.array method)": [[560, "ivy.Array.inplace_increment"]], "inplace_increment() (ivy.container method)": [[560, "ivy.Container.inplace_increment"]], "inplace_update() (in module ivy)": [[561, "ivy.inplace_update"], [633, "ivy.inplace_update"]], "inplace_update() (ivy.array method)": [[561, "ivy.Array.inplace_update"]], "inplace_update() (ivy.container method)": [[561, "ivy.Container.inplace_update"]], "inplace_variables_supported() (in module ivy)": [[562, "ivy.inplace_variables_supported"], [633, "ivy.inplace_variables_supported"]], "is_array() (in module ivy)": [[563, "ivy.is_array"], [633, "ivy.is_array"]], "is_array() (ivy.array method)": [[563, "ivy.Array.is_array"]], "is_array() (ivy.container method)": [[563, "ivy.Container.is_array"]], "is_ivy_array() (in module ivy)": [[564, "ivy.is_ivy_array"], [633, "ivy.is_ivy_array"]], "is_ivy_array() (ivy.array method)": [[564, "ivy.Array.is_ivy_array"]], "is_ivy_array() (ivy.container method)": [[564, "ivy.Container.is_ivy_array"]], "is_ivy_container() (in module ivy)": [[565, "ivy.is_ivy_container"], [633, "ivy.is_ivy_container"]], "is_ivy_container() (ivy.array method)": [[565, "ivy.Array.is_ivy_container"]], "is_ivy_nested_array() (in module ivy)": [[566, "ivy.is_ivy_nested_array"], [633, "ivy.is_ivy_nested_array"]], "is_native_array() (in module ivy)": [[567, "ivy.is_native_array"], [633, "ivy.is_native_array"]], "is_native_array() (ivy.array method)": [[567, "ivy.Array.is_native_array"]], "is_native_array() (ivy.container method)": [[567, "ivy.Container.is_native_array"]], "isin() (in module ivy)": [[568, "ivy.isin"], [633, "ivy.isin"]], "isin() (ivy.array method)": [[568, "ivy.Array.isin"]], "isin() (ivy.container method)": [[568, "ivy.Container.isin"]], "isscalar() (in module ivy)": [[569, "ivy.isscalar"], [633, "ivy.isscalar"]], "itemsize() (in module ivy)": [[570, "ivy.itemsize"], [633, "ivy.itemsize"]], "itemsize() (ivy.array method)": [[570, "ivy.Array.itemsize"]], "itemsize() (ivy.container method)": [[570, "ivy.Container.itemsize"]], "match_kwargs() (in module ivy)": [[571, "ivy.match_kwargs"], [633, "ivy.match_kwargs"]], "multiprocessing() (in module ivy)": [[572, "ivy.multiprocessing"], [633, "ivy.multiprocessing"]], "num_arrays_in_memory() (in module ivy)": [[573, "ivy.num_arrays_in_memory"], [633, "ivy.num_arrays_in_memory"]], "print_all_arrays_in_memory() (in module ivy)": [[574, "ivy.print_all_arrays_in_memory"], [633, "ivy.print_all_arrays_in_memory"]], "scatter_flat() (in module ivy)": [[575, "ivy.scatter_flat"], [633, "ivy.scatter_flat"]], "scatter_flat() (ivy.array method)": [[575, "ivy.Array.scatter_flat"]], "scatter_flat() (ivy.container method)": [[575, "ivy.Container.scatter_flat"]], "scatter_nd() (in module ivy)": [[576, "ivy.scatter_nd"], [633, "ivy.scatter_nd"]], "scatter_nd() (ivy.array method)": [[576, "ivy.Array.scatter_nd"]], "scatter_nd() (ivy.container method)": [[576, "ivy.Container.scatter_nd"]], "set_array_mode() (in module ivy)": [[577, "ivy.set_array_mode"], [633, "ivy.set_array_mode"]], "set_exception_trace_mode() (in module ivy)": [[578, "ivy.set_exception_trace_mode"], [633, "ivy.set_exception_trace_mode"]], "set_inplace_mode() (in module ivy)": [[579, "ivy.set_inplace_mode"], [633, "ivy.set_inplace_mode"]], "set_item() (in module ivy)": [[580, "ivy.set_item"], [633, "ivy.set_item"]], "set_min_base() (in module ivy)": [[581, "ivy.set_min_base"], [633, "ivy.set_min_base"]], "set_min_denominator() (in module ivy)": [[582, "ivy.set_min_denominator"], [633, "ivy.set_min_denominator"]], "set_nestable_mode() (in module ivy)": [[583, "ivy.set_nestable_mode"], [633, "ivy.set_nestable_mode"]], "set_precise_mode() (in module ivy)": [[584, "ivy.set_precise_mode"], [633, "ivy.set_precise_mode"]], "set_queue_timeout() (in module ivy)": [[585, "ivy.set_queue_timeout"], [633, "ivy.set_queue_timeout"]], "set_shape_array_mode() (in module ivy)": [[586, "ivy.set_shape_array_mode"], [633, "ivy.set_shape_array_mode"]], "set_show_func_wrapper_trace_mode() (in module ivy)": [[587, "ivy.set_show_func_wrapper_trace_mode"], [633, "ivy.set_show_func_wrapper_trace_mode"]], "set_tmp_dir() (in module ivy)": [[588, "ivy.set_tmp_dir"], [633, "ivy.set_tmp_dir"]], "shape() (in module ivy)": [[589, "ivy.shape"], [633, "ivy.shape"]], "shape() (ivy.array method)": [[589, "ivy.Array.shape"]], "size() (in module ivy)": [[590, "ivy.size"], [633, "ivy.size"]], "size() (ivy.array method)": [[590, "ivy.Array.size"]], "size() (ivy.container method)": [[590, "ivy.Container.size"]], "stable_divide() (in module ivy)": [[591, "ivy.stable_divide"], [633, "ivy.stable_divide"]], "stable_divide() (ivy.array method)": [[591, "ivy.Array.stable_divide"]], "stable_divide() (ivy.container method)": [[591, "ivy.Container.stable_divide"]], "stable_pow() (in module ivy)": [[592, "ivy.stable_pow"], [633, "ivy.stable_pow"]], "stable_pow() (ivy.array method)": [[592, "ivy.Array.stable_pow"]], "stable_pow() (ivy.container method)": [[592, "ivy.Container.stable_pow"]], "strides() (in module ivy)": [[593, "ivy.strides"], [633, "ivy.strides"]], "strides() (ivy.array method)": [[593, "ivy.Array.strides"]], "strides() (ivy.container method)": [[593, "ivy.Container.strides"]], "supports_inplace_updates() (in module ivy)": [[594, "ivy.supports_inplace_updates"], [633, "ivy.supports_inplace_updates"]], "supports_inplace_updates() (ivy.array method)": [[594, "ivy.Array.supports_inplace_updates"]], "supports_inplace_updates() (ivy.container method)": [[594, "ivy.Container.supports_inplace_updates"]], "to_ivy_shape() (in module ivy)": [[595, "ivy.to_ivy_shape"], [633, "ivy.to_ivy_shape"]], "to_list() (in module ivy)": [[596, "ivy.to_list"], [633, "ivy.to_list"]], "to_list() (ivy.array method)": [[596, "ivy.Array.to_list"]], "to_list() (ivy.container method)": [[596, "ivy.Container.to_list"]], "to_native_shape() (in module ivy)": [[597, "ivy.to_native_shape"], [633, "ivy.to_native_shape"]], "to_numpy() (in module ivy)": [[598, "ivy.to_numpy"], [633, "ivy.to_numpy"]], "to_numpy() (ivy.array method)": [[598, "ivy.Array.to_numpy"]], "to_numpy() (ivy.container method)": [[598, "ivy.Container.to_numpy"]], "to_scalar() (in module ivy)": [[599, "ivy.to_scalar"], [633, "ivy.to_scalar"]], "to_scalar() (ivy.array method)": [[599, "ivy.Array.to_scalar"]], "to_scalar() (ivy.container method)": [[599, "ivy.Container.to_scalar"]], "try_else_none() (in module ivy)": [[600, "ivy.try_else_none"], [633, "ivy.try_else_none"]], "unset_array_mode() (in module ivy)": [[601, "ivy.unset_array_mode"], [633, "ivy.unset_array_mode"]], "unset_exception_trace_mode() (in module ivy)": [[602, "ivy.unset_exception_trace_mode"], [633, "ivy.unset_exception_trace_mode"]], "unset_inplace_mode() (in module ivy)": [[603, "ivy.unset_inplace_mode"], [633, "ivy.unset_inplace_mode"]], "unset_min_base() (in module ivy)": [[604, "ivy.unset_min_base"], [633, "ivy.unset_min_base"]], "unset_min_denominator() (in module ivy)": [[605, "ivy.unset_min_denominator"], [633, "ivy.unset_min_denominator"]], "unset_nestable_mode() (in module ivy)": [[606, "ivy.unset_nestable_mode"], [633, "ivy.unset_nestable_mode"]], "unset_precise_mode() (in module ivy)": [[607, "ivy.unset_precise_mode"], [633, "ivy.unset_precise_mode"]], "unset_queue_timeout() (in module ivy)": [[608, "ivy.unset_queue_timeout"], [633, "ivy.unset_queue_timeout"]], "unset_shape_array_mode() (in module ivy)": [[609, "ivy.unset_shape_array_mode"], [633, "ivy.unset_shape_array_mode"]], "unset_show_func_wrapper_trace_mode() (in module ivy)": [[610, "ivy.unset_show_func_wrapper_trace_mode"], [633, "ivy.unset_show_func_wrapper_trace_mode"]], "unset_tmp_dir() (in module ivy)": [[611, "ivy.unset_tmp_dir"], [633, "ivy.unset_tmp_dir"]], "value_is_nan() (in module ivy)": [[612, "ivy.value_is_nan"], [633, "ivy.value_is_nan"]], "value_is_nan() (ivy.array method)": [[612, "ivy.Array.value_is_nan"]], "value_is_nan() (ivy.container method)": [[612, "ivy.Container.value_is_nan"]], "vmap() (in module ivy)": [[613, "ivy.vmap"], [633, "ivy.vmap"]], "adam_step() (in module ivy)": [[614, "ivy.adam_step"], [634, "ivy.adam_step"]], "adam_step() (ivy.array method)": [[614, "ivy.Array.adam_step"]], "adam_step() (ivy.container method)": [[614, "ivy.Container.adam_step"]], "adam_update() (in module ivy)": [[615, "ivy.adam_update"], [634, "ivy.adam_update"]], "adam_update() (ivy.array method)": [[615, "ivy.Array.adam_update"]], "adam_update() (ivy.container method)": [[615, "ivy.Container.adam_update"]], "execute_with_gradients() (in module ivy)": [[616, "ivy.execute_with_gradients"], [634, "ivy.execute_with_gradients"]], "grad() (in module ivy)": [[617, "ivy.grad"], [634, "ivy.grad"]], "gradient_descent_update() (in module ivy)": [[618, "ivy.gradient_descent_update"], [634, "ivy.gradient_descent_update"]], "gradient_descent_update() (ivy.array method)": [[618, "ivy.Array.gradient_descent_update"]], "gradient_descent_update() (ivy.container method)": [[618, "ivy.Container.gradient_descent_update"]], "jac() (in module ivy)": [[619, "ivy.jac"], [634, "ivy.jac"]], "lamb_update() (in module ivy)": [[620, "ivy.lamb_update"], [634, "ivy.lamb_update"]], "lamb_update() (ivy.array method)": [[620, "ivy.Array.lamb_update"]], "lamb_update() (ivy.container method)": [[620, "ivy.Container.lamb_update"]], "lars_update() (in module ivy)": [[621, "ivy.lars_update"], [634, "ivy.lars_update"]], "lars_update() (ivy.array method)": [[621, "ivy.Array.lars_update"]], "lars_update() (ivy.container method)": [[621, "ivy.Container.lars_update"]], "optimizer_update() (in module ivy)": [[622, "ivy.optimizer_update"], [634, "ivy.optimizer_update"]], "optimizer_update() (ivy.array method)": [[622, "ivy.Array.optimizer_update"]], "optimizer_update() (ivy.container method)": [[622, "ivy.Container.optimizer_update"]], "stop_gradient() (in module ivy)": [[623, "ivy.stop_gradient"], [634, "ivy.stop_gradient"]], "stop_gradient() (ivy.array method)": [[623, "ivy.Array.stop_gradient"]], "stop_gradient() (ivy.container method)": [[623, "ivy.Container.stop_gradient"]], "value_and_grad() (in module ivy)": [[624, "ivy.value_and_grad"], [634, "ivy.value_and_grad"]], "ivy.functional.ivy.activations": [[625, "module-ivy.functional.ivy.activations"]], "e (in module ivy)": [[626, "ivy.e"]], "inf (in module ivy)": [[626, "ivy.inf"]], "ivy.functional.ivy.constants": [[626, "module-ivy.functional.ivy.constants"]], "nan (in module ivy)": [[626, "ivy.nan"]], "newaxis (in module ivy)": [[626, "ivy.newaxis"]], "pi (in module ivy)": [[626, "ivy.pi"]], "ivy.functional.ivy.control_flow_ops": [[627, "module-ivy.functional.ivy.control_flow_ops"]], "nestedsequence (class in ivy)": [[628, "ivy.NestedSequence"]], "ivy.functional.ivy.creation": [[628, "module-ivy.functional.ivy.creation"]], "defaultcomplexdtype (class in ivy)": [[629, "ivy.DefaultComplexDtype"]], "defaultdtype (class in ivy)": [[629, "ivy.DefaultDtype"]], "defaultfloatdtype (class in ivy)": [[629, "ivy.DefaultFloatDtype"]], "defaultintdtype (class in ivy)": [[629, "ivy.DefaultIntDtype"]], "defaultuintdtype (class in ivy)": [[629, "ivy.DefaultUintDtype"]], "ivy.functional.ivy.data_type": [[629, "module-ivy.functional.ivy.data_type"]], "defaultdevice (class in ivy)": [[630, "ivy.DefaultDevice"]], "profiler (class in ivy)": [[630, "ivy.Profiler"]], "ivy.functional.ivy.device": [[630, "module-ivy.functional.ivy.device"]], "ivy.functional.ivy.elementwise": [[631, "module-ivy.functional.ivy.elementwise"]], "ivy.functional.ivy.experimental": [[632, "module-ivy.functional.ivy.experimental"]], "arraymode (class in ivy)": [[633, "ivy.ArrayMode"]], "precisemode (class in ivy)": [[633, "ivy.PreciseMode"]], "ivy.functional.ivy.general": [[633, "module-ivy.functional.ivy.general"]], "ivy.functional.ivy.gradients": [[634, "module-ivy.functional.ivy.gradients"]], "conv() (in module ivy)": [[635, "ivy.conv"], [648, "ivy.conv"]], "conv1d() (in module ivy)": [[635, "ivy.conv1d"], [649, "ivy.conv1d"]], "conv1d_transpose() (in module ivy)": [[635, "ivy.conv1d_transpose"], [650, "ivy.conv1d_transpose"]], "conv2d() (in module ivy)": [[635, "ivy.conv2d"], [651, "ivy.conv2d"]], "conv2d_transpose() (in module ivy)": [[635, "ivy.conv2d_transpose"], [652, "ivy.conv2d_transpose"]], "conv3d() (in module ivy)": [[635, "ivy.conv3d"], [653, "ivy.conv3d"]], "conv3d_transpose() (in module ivy)": [[635, "ivy.conv3d_transpose"], [654, "ivy.conv3d_transpose"]], "conv_general_dilated() (in module ivy)": [[635, "ivy.conv_general_dilated"], [655, "ivy.conv_general_dilated"]], "conv_general_transpose() (in module ivy)": [[635, "ivy.conv_general_transpose"], [656, "ivy.conv_general_transpose"]], "depthwise_conv2d() (in module ivy)": [[635, "ivy.depthwise_conv2d"], [657, "ivy.depthwise_conv2d"]], "dropout() (in module ivy)": [[635, "ivy.dropout"], [658, "ivy.dropout"]], "ivy.functional.ivy.layers": [[635, "module-ivy.functional.ivy.layers"]], "linear() (in module ivy)": [[635, "ivy.linear"], [659, "ivy.linear"]], "lstm() (in module ivy)": [[635, "ivy.lstm"], [660, "ivy.lstm"]], "lstm_update() (in module ivy)": [[635, "ivy.lstm_update"], [661, "ivy.lstm_update"]], "multi_head_attention() (in module ivy)": [[635, "ivy.multi_head_attention"], [662, "ivy.multi_head_attention"]], "nms() (in module ivy)": [[635, "ivy.nms"], [663, "ivy.nms"]], "roi_align() (in module ivy)": [[635, "ivy.roi_align"], [664, "ivy.roi_align"]], "scaled_dot_product_attention() (in module ivy)": [[635, "ivy.scaled_dot_product_attention"], [665, "ivy.scaled_dot_product_attention"]], "cholesky() (in module ivy)": [[636, "ivy.cholesky"], [666, "ivy.cholesky"]], "cross() (in module ivy)": [[636, "ivy.cross"], [667, "ivy.cross"]], "det() (in module ivy)": [[636, "ivy.det"], [668, "ivy.det"]], "diag() (in module ivy)": [[636, "ivy.diag"], [669, "ivy.diag"]], "diagonal() (in module ivy)": [[636, "ivy.diagonal"], [670, "ivy.diagonal"]], "eigh() (in module ivy)": [[636, "ivy.eigh"], [672, "ivy.eigh"]], "eigvalsh() (in module ivy)": [[636, "ivy.eigvalsh"], [673, "ivy.eigvalsh"]], "inner() (in module ivy)": [[636, "ivy.inner"], [674, "ivy.inner"]], "inv() (in module ivy)": [[636, "ivy.inv"], [675, "ivy.inv"]], "ivy.functional.ivy.linear_algebra": [[636, "module-ivy.functional.ivy.linear_algebra"]], "matmul() (in module ivy)": [[636, "ivy.matmul"], [676, "ivy.matmul"]], "matrix_norm() (in module ivy)": [[636, "ivy.matrix_norm"], [677, "ivy.matrix_norm"]], "matrix_power() (in module ivy)": [[636, "ivy.matrix_power"], [678, "ivy.matrix_power"]], "matrix_rank() (in module ivy)": [[636, "ivy.matrix_rank"], [679, "ivy.matrix_rank"]], "matrix_transpose() (in module ivy)": [[636, "ivy.matrix_transpose"], [680, "ivy.matrix_transpose"]], "outer() (in module ivy)": [[636, "ivy.outer"], [681, "ivy.outer"]], "pinv() (in module ivy)": [[636, "ivy.pinv"], [682, "ivy.pinv"]], "qr() (in module ivy)": [[636, "ivy.qr"], [683, "ivy.qr"]], "slogdet() (in module ivy)": [[636, "ivy.slogdet"], [684, "ivy.slogdet"]], "solve() (in module ivy)": [[636, "ivy.solve"], [685, "ivy.solve"]], "svd() (in module ivy)": [[636, "ivy.svd"], [686, "ivy.svd"]], "svdvals() (in module ivy)": [[636, "ivy.svdvals"], [687, "ivy.svdvals"]], "tensordot() (in module ivy)": [[636, "ivy.tensordot"], [688, "ivy.tensordot"]], "tensorsolve() (in module ivy)": [[636, "ivy.tensorsolve"], [689, "ivy.tensorsolve"]], "trace() (in module ivy)": [[636, "ivy.trace"], [690, "ivy.trace"]], "vander() (in module ivy)": [[636, "ivy.vander"], [691, "ivy.vander"]], "vecdot() (in module ivy)": [[636, "ivy.vecdot"], [692, "ivy.vecdot"]], "vector_norm() (in module ivy)": [[636, "ivy.vector_norm"], [693, "ivy.vector_norm"]], "vector_to_skew_symmetric_matrix() (in module ivy)": [[636, "ivy.vector_to_skew_symmetric_matrix"], [694, "ivy.vector_to_skew_symmetric_matrix"]], "binary_cross_entropy() (in module ivy)": [[637, "ivy.binary_cross_entropy"], [695, "ivy.binary_cross_entropy"]], "cross_entropy() (in module ivy)": [[637, "ivy.cross_entropy"], [696, "ivy.cross_entropy"]], "ivy.functional.ivy.losses": [[637, "module-ivy.functional.ivy.losses"]], "sparse_cross_entropy() (in module ivy)": [[637, "ivy.sparse_cross_entropy"], [697, "ivy.sparse_cross_entropy"]], "clip() (in module ivy)": [[638, "ivy.clip"], [698, "ivy.clip"]], "concat() (in module ivy)": [[638, "ivy.concat"], [699, "ivy.concat"]], "constant_pad() (in module ivy)": [[638, "ivy.constant_pad"], [700, "ivy.constant_pad"]], "expand_dims() (in module ivy)": [[638, "ivy.expand_dims"], [701, "ivy.expand_dims"]], "flip() (in module ivy)": [[638, "ivy.flip"], [702, "ivy.flip"]], "ivy.functional.ivy.manipulation": [[638, "module-ivy.functional.ivy.manipulation"]], "permute_dims() (in module ivy)": [[638, "ivy.permute_dims"], [703, "ivy.permute_dims"]], "repeat() (in module ivy)": [[638, "ivy.repeat"], [704, "ivy.repeat"]], "reshape() (in module ivy)": [[638, "ivy.reshape"], [705, "ivy.reshape"]], "roll() (in module ivy)": [[638, "ivy.roll"], [706, "ivy.roll"]], "split() (in module ivy)": [[638, "ivy.split"], [707, "ivy.split"]], "squeeze() (in module ivy)": [[638, "ivy.squeeze"], [708, "ivy.squeeze"]], "stack() (in module ivy)": [[638, "ivy.stack"], [709, "ivy.stack"]], "swapaxes() (in module ivy)": [[638, "ivy.swapaxes"], [710, "ivy.swapaxes"]], "tile() (in module ivy)": [[638, "ivy.tile"], [711, "ivy.tile"]], "unstack() (in module ivy)": [[638, "ivy.unstack"], [712, "ivy.unstack"]], "zero_pad() (in module ivy)": [[638, "ivy.zero_pad"], [713, "ivy.zero_pad"]], "fomaml_step() (in module ivy)": [[639, "ivy.fomaml_step"], [714, "ivy.fomaml_step"]], "ivy.functional.ivy.meta": [[639, "module-ivy.functional.ivy.meta"]], "maml_step() (in module ivy)": [[639, "ivy.maml_step"], [715, "ivy.maml_step"]], "reptile_step() (in module ivy)": [[639, "ivy.reptile_step"], [716, "ivy.reptile_step"]], "all_nested_indices() (in module ivy)": [[640, "ivy.all_nested_indices"], [717, "ivy.all_nested_indices"]], "copy_nest() (in module ivy)": [[640, "ivy.copy_nest"], [718, "ivy.copy_nest"]], "duplicate_array_index_chains() (in module ivy)": [[640, "ivy.duplicate_array_index_chains"], [719, "ivy.duplicate_array_index_chains"]], "index_nest() (in module ivy)": [[640, "ivy.index_nest"], [720, "ivy.index_nest"]], "insert_into_nest_at_index() (in module ivy)": [[640, "ivy.insert_into_nest_at_index"], [721, "ivy.insert_into_nest_at_index"]], "insert_into_nest_at_indices() (in module ivy)": [[640, "ivy.insert_into_nest_at_indices"], [722, "ivy.insert_into_nest_at_indices"]], "ivy.functional.ivy.nest": [[640, "module-ivy.functional.ivy.nest"]], "map() (in module ivy)": [[640, "ivy.map"], [723, "ivy.map"]], "map_nest_at_index() (in module ivy)": [[640, "ivy.map_nest_at_index"], [724, "ivy.map_nest_at_index"]], "map_nest_at_indices() (in module ivy)": [[640, "ivy.map_nest_at_indices"], [725, "ivy.map_nest_at_indices"]], "multi_index_nest() (in module ivy)": [[640, "ivy.multi_index_nest"], [726, "ivy.multi_index_nest"]], "nested_any() (in module ivy)": [[640, "ivy.nested_any"], [727, "ivy.nested_any"]], "nested_argwhere() (in module ivy)": [[640, "ivy.nested_argwhere"], [728, "ivy.nested_argwhere"]], "nested_map() (in module ivy)": [[640, "ivy.nested_map"], [729, "ivy.nested_map"]], "nested_multi_map() (in module ivy)": [[640, "ivy.nested_multi_map"], [730, "ivy.nested_multi_map"]], "prune_empty() (in module ivy)": [[640, "ivy.prune_empty"], [731, "ivy.prune_empty"]], "prune_nest_at_index() (in module ivy)": [[640, "ivy.prune_nest_at_index"], [732, "ivy.prune_nest_at_index"]], "prune_nest_at_indices() (in module ivy)": [[640, "ivy.prune_nest_at_indices"], [733, "ivy.prune_nest_at_indices"]], "set_nest_at_index() (in module ivy)": [[640, "ivy.set_nest_at_index"], [734, "ivy.set_nest_at_index"]], "set_nest_at_indices() (in module ivy)": [[640, "ivy.set_nest_at_indices"], [735, "ivy.set_nest_at_indices"]], "ivy.functional.ivy.norms": [[641, "module-ivy.functional.ivy.norms"]], "layer_norm() (in module ivy)": [[641, "ivy.layer_norm"], [736, "ivy.layer_norm"]], "ivy.functional.ivy.random": [[642, "module-ivy.functional.ivy.random"]], "multinomial() (in module ivy)": [[642, "ivy.multinomial"], [737, "ivy.multinomial"]], "randint() (in module ivy)": [[642, "ivy.randint"], [738, "ivy.randint"]], "random_normal() (in module ivy)": [[642, "ivy.random_normal"], [739, "ivy.random_normal"]], "random_uniform() (in module ivy)": [[642, "ivy.random_uniform"], [740, "ivy.random_uniform"]], "seed() (in module ivy)": [[642, "ivy.seed"], [741, "ivy.seed"]], "shuffle() (in module ivy)": [[642, "ivy.shuffle"], [742, "ivy.shuffle"]], "argmax() (in module ivy)": [[643, "ivy.argmax"], [743, "ivy.argmax"]], "argmin() (in module ivy)": [[643, "ivy.argmin"], [744, "ivy.argmin"]], "argwhere() (in module ivy)": [[643, "ivy.argwhere"], [745, "ivy.argwhere"]], "ivy.functional.ivy.searching": [[643, "module-ivy.functional.ivy.searching"]], "nonzero() (in module ivy)": [[643, "ivy.nonzero"], [746, "ivy.nonzero"]], "where() (in module ivy)": [[643, "ivy.where"], [747, "ivy.where"]], "ivy.functional.ivy.set": [[644, "module-ivy.functional.ivy.set"]], "unique_all() (in module ivy)": [[644, "ivy.unique_all"], [748, "ivy.unique_all"]], "unique_counts() (in module ivy)": [[644, "ivy.unique_counts"], [749, "ivy.unique_counts"]], "unique_inverse() (in module ivy)": [[644, "ivy.unique_inverse"], [750, "ivy.unique_inverse"]], "unique_values() (in module ivy)": [[644, "ivy.unique_values"], [751, "ivy.unique_values"]], "argsort() (in module ivy)": [[645, "ivy.argsort"], [752, "ivy.argsort"]], "ivy.functional.ivy.sorting": [[645, "module-ivy.functional.ivy.sorting"]], "msort() (in module ivy)": [[645, "ivy.msort"], [753, "ivy.msort"]], "searchsorted() (in module ivy)": [[645, "ivy.searchsorted"], [754, "ivy.searchsorted"]], "sort() (in module ivy)": [[645, "ivy.sort"], [755, "ivy.sort"]], "cumprod() (in module ivy)": [[646, "ivy.cumprod"], [756, "ivy.cumprod"]], "cumsum() (in module ivy)": [[646, "ivy.cumsum"], [757, "ivy.cumsum"]], "einsum() (in module ivy)": [[646, "ivy.einsum"], [758, "ivy.einsum"]], "ivy.functional.ivy.statistical": [[646, "module-ivy.functional.ivy.statistical"]], "max() (in module ivy)": [[646, "ivy.max"], [759, "ivy.max"]], "mean() (in module ivy)": [[646, "ivy.mean"], [760, "ivy.mean"]], "min() (in module ivy)": [[646, "ivy.min"], [761, "ivy.min"]], "prod() (in module ivy)": [[646, "ivy.prod"], [762, "ivy.prod"]], "std() (in module ivy)": [[646, "ivy.std"], [763, "ivy.std"]], "sum() (in module ivy)": [[646, "ivy.sum"], [764, "ivy.sum"]], "var() (in module ivy)": [[646, "ivy.var"], [765, "ivy.var"]], "all() (in module ivy)": [[647, "ivy.all"], [766, "ivy.all"]], "any() (in module ivy)": [[647, "ivy.any"], [767, "ivy.any"]], "ivy.functional.ivy.utility": [[647, "module-ivy.functional.ivy.utility"]], "load() (in module ivy)": [[647, "ivy.load"], [768, "ivy.load"]], "save() (in module ivy)": [[647, "ivy.save"], [769, "ivy.save"]], "conv1d() (ivy.array method)": [[649, "ivy.Array.conv1d"]], "conv1d() (ivy.container method)": [[649, "ivy.Container.conv1d"]], "conv1d_transpose() (ivy.array method)": [[650, "ivy.Array.conv1d_transpose"]], "conv1d_transpose() (ivy.container method)": [[650, "ivy.Container.conv1d_transpose"]], "conv2d() (ivy.array method)": [[651, "ivy.Array.conv2d"]], "conv2d() (ivy.container method)": [[651, "ivy.Container.conv2d"]], "conv2d_transpose() (ivy.array method)": [[652, "ivy.Array.conv2d_transpose"]], "conv2d_transpose() (ivy.container method)": [[652, "ivy.Container.conv2d_transpose"]], "conv3d() (ivy.array method)": [[653, "ivy.Array.conv3d"]], "conv3d() (ivy.container method)": [[653, "ivy.Container.conv3d"]], "conv3d_transpose() (ivy.array method)": [[654, "ivy.Array.conv3d_transpose"]], "conv3d_transpose() (ivy.container method)": [[654, "ivy.Container.conv3d_transpose"]], "depthwise_conv2d() (ivy.array method)": [[657, "ivy.Array.depthwise_conv2d"]], "depthwise_conv2d() (ivy.container method)": [[657, "ivy.Container.depthwise_conv2d"]], "dropout() (ivy.array method)": [[658, "ivy.Array.dropout"]], "dropout() (ivy.container method)": [[658, "ivy.Container.dropout"]], "linear() (ivy.array method)": [[659, "ivy.Array.linear"]], "linear() (ivy.container method)": [[659, "ivy.Container.linear"]], "lstm_update() (ivy.array method)": [[661, "ivy.Array.lstm_update"]], "lstm_update() (ivy.container method)": [[661, "ivy.Container.lstm_update"]], "multi_head_attention() (ivy.array method)": [[662, "ivy.Array.multi_head_attention"]], "multi_head_attention() (ivy.container method)": [[662, "ivy.Container.multi_head_attention"]], "scaled_dot_product_attention() (ivy.array method)": [[665, "ivy.Array.scaled_dot_product_attention"]], "scaled_dot_product_attention() (ivy.container method)": [[665, "ivy.Container.scaled_dot_product_attention"]], "cholesky() (ivy.array method)": [[666, "ivy.Array.cholesky"]], "cholesky() (ivy.container method)": [[666, "ivy.Container.cholesky"]], "cross() (ivy.array method)": [[667, "ivy.Array.cross"]], "cross() (ivy.container method)": [[667, "ivy.Container.cross"]], "det() (ivy.array method)": [[668, "ivy.Array.det"]], "det() (ivy.container method)": [[668, "ivy.Container.det"]], "diag() (ivy.array method)": [[669, "ivy.Array.diag"]], "diag() (ivy.container method)": [[669, "ivy.Container.diag"]], "diagonal() (ivy.array method)": [[670, "ivy.Array.diagonal"]], "diagonal() (ivy.container method)": [[670, "ivy.Container.diagonal"]], "eigh() (ivy.array method)": [[672, "ivy.Array.eigh"]], "eigh() (ivy.container method)": [[672, "ivy.Container.eigh"]], "eigvalsh() (ivy.array method)": [[673, "ivy.Array.eigvalsh"]], "eigvalsh() (ivy.container method)": [[673, "ivy.Container.eigvalsh"]], "inner() (ivy.array method)": [[674, "ivy.Array.inner"]], "inner() (ivy.container method)": [[674, "ivy.Container.inner"]], "inv() (ivy.array method)": [[675, "ivy.Array.inv"]], "inv() (ivy.container method)": [[675, "ivy.Container.inv"]], "matmul() (ivy.array method)": [[676, "ivy.Array.matmul"]], "matmul() (ivy.container method)": [[676, "ivy.Container.matmul"]], "matrix_norm() (ivy.array method)": [[677, "ivy.Array.matrix_norm"]], "matrix_norm() (ivy.container method)": [[677, "ivy.Container.matrix_norm"]], "matrix_power() (ivy.array method)": [[678, "ivy.Array.matrix_power"]], "matrix_power() (ivy.container method)": [[678, "ivy.Container.matrix_power"]], "matrix_rank() (ivy.array method)": [[679, "ivy.Array.matrix_rank"]], "matrix_rank() (ivy.container method)": [[679, "ivy.Container.matrix_rank"]], "matrix_transpose() (ivy.array method)": [[680, "ivy.Array.matrix_transpose"]], "matrix_transpose() (ivy.container method)": [[680, "ivy.Container.matrix_transpose"]], "outer() (ivy.array method)": [[681, "ivy.Array.outer"]], "outer() (ivy.container method)": [[681, "ivy.Container.outer"]], "pinv() (ivy.array method)": [[682, "ivy.Array.pinv"]], "pinv() (ivy.container method)": [[682, "ivy.Container.pinv"]], "qr() (ivy.array method)": [[683, "ivy.Array.qr"]], "qr() (ivy.container method)": [[683, "ivy.Container.qr"]], "slogdet() (ivy.array method)": [[684, "ivy.Array.slogdet"]], "slogdet() (ivy.container method)": [[684, "ivy.Container.slogdet"]], "solve() (ivy.array method)": [[685, "ivy.Array.solve"]], "solve() (ivy.container method)": [[685, "ivy.Container.solve"]], "svd() (ivy.array method)": [[686, "ivy.Array.svd"]], "svd() (ivy.container method)": [[686, "ivy.Container.svd"]], "svdvals() (ivy.array method)": [[687, "ivy.Array.svdvals"]], "svdvals() (ivy.container method)": [[687, "ivy.Container.svdvals"]], "tensordot() (ivy.array method)": [[688, "ivy.Array.tensordot"]], "tensordot() (ivy.container method)": [[688, "ivy.Container.tensordot"]], "tensorsolve() (ivy.array method)": [[689, "ivy.Array.tensorsolve"]], "tensorsolve() (ivy.container method)": [[689, "ivy.Container.tensorsolve"]], "trace() (ivy.array method)": [[690, "ivy.Array.trace"]], "trace() (ivy.container method)": [[690, "ivy.Container.trace"]], "vander() (ivy.array method)": [[691, "ivy.Array.vander"]], "vander() (ivy.container method)": [[691, "ivy.Container.vander"]], "vecdot() (ivy.array method)": [[692, "ivy.Array.vecdot"]], "vecdot() (ivy.container method)": [[692, "ivy.Container.vecdot"]], "vector_norm() (ivy.array method)": [[693, "ivy.Array.vector_norm"]], "vector_norm() (ivy.container method)": [[693, "ivy.Container.vector_norm"]], "vector_to_skew_symmetric_matrix() (ivy.array method)": [[694, "ivy.Array.vector_to_skew_symmetric_matrix"]], "vector_to_skew_symmetric_matrix() (ivy.container method)": [[694, "ivy.Container.vector_to_skew_symmetric_matrix"]], "binary_cross_entropy() (ivy.array method)": [[695, "ivy.Array.binary_cross_entropy"]], "binary_cross_entropy() (ivy.container method)": [[695, "ivy.Container.binary_cross_entropy"]], "cross_entropy() (ivy.array method)": [[696, "ivy.Array.cross_entropy"]], "cross_entropy() (ivy.container method)": [[696, "ivy.Container.cross_entropy"]], "sparse_cross_entropy() (ivy.array method)": [[697, "ivy.Array.sparse_cross_entropy"]], "sparse_cross_entropy() (ivy.container method)": [[697, "ivy.Container.sparse_cross_entropy"]], "clip() (ivy.array method)": [[698, "ivy.Array.clip"]], "clip() (ivy.container method)": [[698, "ivy.Container.clip"]], "concat() (ivy.array method)": [[699, "ivy.Array.concat"]], "concat() (ivy.container method)": [[699, "ivy.Container.concat"]], "constant_pad() (ivy.array method)": [[700, "ivy.Array.constant_pad"]], "constant_pad() (ivy.container method)": [[700, "ivy.Container.constant_pad"]], "expand_dims() (ivy.array method)": [[701, "ivy.Array.expand_dims"]], "expand_dims() (ivy.container method)": [[701, "ivy.Container.expand_dims"]], "flip() (ivy.array method)": [[702, "ivy.Array.flip"]], "flip() (ivy.container method)": [[702, "ivy.Container.flip"]], "permute_dims() (ivy.array method)": [[703, "ivy.Array.permute_dims"]], "permute_dims() (ivy.container method)": [[703, "ivy.Container.permute_dims"]], "repeat() (ivy.array method)": [[704, "ivy.Array.repeat"]], "repeat() (ivy.container method)": [[704, "ivy.Container.repeat"]], "reshape() (ivy.array method)": [[705, "ivy.Array.reshape"]], "reshape() (ivy.container method)": [[705, "ivy.Container.reshape"]], "roll() (ivy.array method)": [[706, "ivy.Array.roll"]], "roll() (ivy.container method)": [[706, "ivy.Container.roll"]], "split() (ivy.array method)": [[707, "ivy.Array.split"]], "split() (ivy.container method)": [[707, "ivy.Container.split"]], "squeeze() (ivy.array method)": [[708, "ivy.Array.squeeze"]], "squeeze() (ivy.container method)": [[708, "ivy.Container.squeeze"]], "stack() (ivy.array method)": [[709, "ivy.Array.stack"]], "stack() (ivy.container method)": [[709, "ivy.Container.stack"]], "swapaxes() (ivy.array method)": [[710, "ivy.Array.swapaxes"]], "swapaxes() (ivy.container method)": [[710, "ivy.Container.swapaxes"]], "tile() (ivy.array method)": [[711, "ivy.Array.tile"]], "tile() (ivy.container method)": [[711, "ivy.Container.tile"]], "unstack() (ivy.array method)": [[712, "ivy.Array.unstack"]], "unstack() (ivy.container method)": [[712, "ivy.Container.unstack"]], "zero_pad() (ivy.array method)": [[713, "ivy.Array.zero_pad"]], "zero_pad() (ivy.container method)": [[713, "ivy.Container.zero_pad"]], "layer_norm() (ivy.array method)": [[736, "ivy.Array.layer_norm"]], "layer_norm() (ivy.container method)": [[736, "ivy.Container.layer_norm"]], "multinomial() (ivy.array method)": [[737, "ivy.Array.multinomial"]], "multinomial() (ivy.container method)": [[737, "ivy.Container.multinomial"]], "randint() (ivy.array method)": [[738, "ivy.Array.randint"]], "randint() (ivy.container method)": [[738, "ivy.Container.randint"]], "random_normal() (ivy.array method)": [[739, "ivy.Array.random_normal"]], "random_normal() (ivy.container method)": [[739, "ivy.Container.random_normal"]], "random_uniform() (ivy.array method)": [[740, "ivy.Array.random_uniform"]], "random_uniform() (ivy.container method)": [[740, "ivy.Container.random_uniform"]], "shuffle() (ivy.array method)": [[742, "ivy.Array.shuffle"]], "shuffle() (ivy.container method)": [[742, "ivy.Container.shuffle"]], "argmax() (ivy.array method)": [[743, "ivy.Array.argmax"]], "argmax() (ivy.container method)": [[743, "ivy.Container.argmax"]], "argmin() (ivy.array method)": [[744, "ivy.Array.argmin"]], "argmin() (ivy.container method)": [[744, "ivy.Container.argmin"]], "argwhere() (ivy.array method)": [[745, "ivy.Array.argwhere"]], "argwhere() (ivy.container method)": [[745, "ivy.Container.argwhere"]], "nonzero() (ivy.array method)": [[746, "ivy.Array.nonzero"]], "nonzero() (ivy.container method)": [[746, "ivy.Container.nonzero"]], "where() (ivy.array method)": [[747, "ivy.Array.where"]], "where() (ivy.container method)": [[747, "ivy.Container.where"]], "unique_all() (ivy.array method)": [[748, "ivy.Array.unique_all"]], "unique_all() (ivy.container method)": [[748, "ivy.Container.unique_all"]], "unique_counts() (ivy.array method)": [[749, "ivy.Array.unique_counts"]], "unique_counts() (ivy.container method)": [[749, "ivy.Container.unique_counts"]], "unique_inverse() (ivy.array method)": [[750, "ivy.Array.unique_inverse"]], "unique_inverse() (ivy.container method)": [[750, "ivy.Container.unique_inverse"]], "unique_values() (ivy.array method)": [[751, "ivy.Array.unique_values"]], "unique_values() (ivy.container method)": [[751, "ivy.Container.unique_values"]], "argsort() (ivy.array method)": [[752, "ivy.Array.argsort"]], "argsort() (ivy.container method)": [[752, "ivy.Container.argsort"]], "msort() (ivy.array method)": [[753, "ivy.Array.msort"]], "msort() (ivy.container method)": [[753, "ivy.Container.msort"]], "searchsorted() (ivy.array method)": [[754, "ivy.Array.searchsorted"]], "searchsorted() (ivy.container method)": [[754, "ivy.Container.searchsorted"]], "sort() (ivy.array method)": [[755, "ivy.Array.sort"]], "sort() (ivy.container method)": [[755, "ivy.Container.sort"]], "cumprod() (ivy.array method)": [[756, "ivy.Array.cumprod"]], "cumprod() (ivy.container method)": [[756, "ivy.Container.cumprod"]], "cumsum() (ivy.array method)": [[757, "ivy.Array.cumsum"]], "cumsum() (ivy.container method)": [[757, "ivy.Container.cumsum"]], "einsum() (ivy.array method)": [[758, "ivy.Array.einsum"]], "einsum() (ivy.container method)": [[758, "ivy.Container.einsum"]], "max() (ivy.array method)": [[759, "ivy.Array.max"]], "max() (ivy.container method)": [[759, "ivy.Container.max"]], "mean() (ivy.array method)": [[760, "ivy.Array.mean"]], "mean() (ivy.container method)": [[760, "ivy.Container.mean"]], "min() (ivy.array method)": [[761, "ivy.Array.min"]], "min() (ivy.container method)": [[761, "ivy.Container.min"]], "prod() (ivy.array method)": [[762, "ivy.Array.prod"]], "prod() (ivy.container method)": [[762, "ivy.Container.prod"]], "std() (ivy.array method)": [[763, "ivy.Array.std"]], "std() (ivy.container method)": [[763, "ivy.Container.std"]], "sum() (ivy.array method)": [[764, "ivy.Array.sum"]], "sum() (ivy.container method)": [[764, "ivy.Container.sum"]], "var() (ivy.array method)": [[765, "ivy.Array.var"]], "var() (ivy.container method)": [[765, "ivy.Container.var"]], "all() (ivy.array method)": [[766, "ivy.Array.all"]], "all() (ivy.container method)": [[766, "ivy.Container.all"]], "any() (ivy.array method)": [[767, "ivy.Array.any"]], "any() (ivy.container method)": [[767, "ivy.Container.any"]], "assert_all_close() (in module ivy_tests.test_ivy.helpers.assertions)": [[770, "ivy_tests.test_ivy.helpers.assertions.assert_all_close"]], "assert_same_type() (in module ivy_tests.test_ivy.helpers.assertions)": [[770, "ivy_tests.test_ivy.helpers.assertions.assert_same_type"]], "assert_same_type_and_shape() (in module ivy_tests.test_ivy.helpers.assertions)": [[770, "ivy_tests.test_ivy.helpers.assertions.assert_same_type_and_shape"]], "check_unsupported_device() (in module ivy_tests.test_ivy.helpers.assertions)": [[770, "ivy_tests.test_ivy.helpers.assertions.check_unsupported_device"]], "check_unsupported_device_and_dtype() (in module ivy_tests.test_ivy.helpers.assertions)": [[770, "ivy_tests.test_ivy.helpers.assertions.check_unsupported_device_and_dtype"]], "check_unsupported_dtype() (in module ivy_tests.test_ivy.helpers.assertions)": [[770, "ivy_tests.test_ivy.helpers.assertions.check_unsupported_dtype"]], "ivy_tests.test_ivy.helpers.assertions": [[770, "module-ivy_tests.test_ivy.helpers.assertions"]], "test_unsupported_function() (in module ivy_tests.test_ivy.helpers.assertions)": [[770, "ivy_tests.test_ivy.helpers.assertions.test_unsupported_function"]], "value_test() (in module ivy_tests.test_ivy.helpers.assertions)": [[770, "ivy_tests.test_ivy.helpers.assertions.value_test"]], "ivy_tests.test_ivy.helpers.available_frameworks": [[771, "module-ivy_tests.test_ivy.helpers.available_frameworks"]], "args_to_container() (in module ivy_tests.test_ivy.helpers.function_testing)": [[772, "ivy_tests.test_ivy.helpers.function_testing.args_to_container"]], "args_to_frontend() (in module ivy_tests.test_ivy.helpers.function_testing)": [[772, "ivy_tests.test_ivy.helpers.function_testing.args_to_frontend"]], "arrays_to_frontend() (in module ivy_tests.test_ivy.helpers.function_testing)": [[772, "ivy_tests.test_ivy.helpers.function_testing.arrays_to_frontend"]], "as_lists() (in module ivy_tests.test_ivy.helpers.function_testing)": [[772, "ivy_tests.test_ivy.helpers.function_testing.as_lists"]], "convtrue() (in module ivy_tests.test_ivy.helpers.function_testing)": [[772, "ivy_tests.test_ivy.helpers.function_testing.convtrue"]], "create_args_kwargs() (in module ivy_tests.test_ivy.helpers.function_testing)": [[772, "ivy_tests.test_ivy.helpers.function_testing.create_args_kwargs"]], "flatten() (in module ivy_tests.test_ivy.helpers.function_testing)": [[772, "ivy_tests.test_ivy.helpers.function_testing.flatten"]], "flatten_and_to_np() (in module ivy_tests.test_ivy.helpers.function_testing)": [[772, "ivy_tests.test_ivy.helpers.function_testing.flatten_and_to_np"]], "flatten_frontend() (in module ivy_tests.test_ivy.helpers.function_testing)": [[772, "ivy_tests.test_ivy.helpers.function_testing.flatten_frontend"]], "flatten_frontend_fw_to_np() (in module ivy_tests.test_ivy.helpers.function_testing)": [[772, "ivy_tests.test_ivy.helpers.function_testing.flatten_frontend_fw_to_np"]], "flatten_frontend_to_np() (in module ivy_tests.test_ivy.helpers.function_testing)": [[772, "ivy_tests.test_ivy.helpers.function_testing.flatten_frontend_to_np"]], "get_frontend_ret() (in module ivy_tests.test_ivy.helpers.function_testing)": [[772, "ivy_tests.test_ivy.helpers.function_testing.get_frontend_ret"]], "get_ret_and_flattened_np_array() (in module ivy_tests.test_ivy.helpers.function_testing)": [[772, "ivy_tests.test_ivy.helpers.function_testing.get_ret_and_flattened_np_array"]], "gradient_incompatible_function() (in module ivy_tests.test_ivy.helpers.function_testing)": [[772, "ivy_tests.test_ivy.helpers.function_testing.gradient_incompatible_function"]], "gradient_test() (in module ivy_tests.test_ivy.helpers.function_testing)": [[772, "ivy_tests.test_ivy.helpers.function_testing.gradient_test"]], "gradient_unsupported_dtypes() (in module ivy_tests.test_ivy.helpers.function_testing)": [[772, "ivy_tests.test_ivy.helpers.function_testing.gradient_unsupported_dtypes"]], "ivy_tests.test_ivy.helpers.function_testing": [[772, "module-ivy_tests.test_ivy.helpers.function_testing"]], "kwargs_to_args_n_kwargs() (in module ivy_tests.test_ivy.helpers.function_testing)": [[772, "ivy_tests.test_ivy.helpers.function_testing.kwargs_to_args_n_kwargs"]], "test_frontend_function() (in module ivy_tests.test_ivy.helpers.function_testing)": [[772, "ivy_tests.test_ivy.helpers.function_testing.test_frontend_function"]], "test_frontend_method() (in module ivy_tests.test_ivy.helpers.function_testing)": [[772, "ivy_tests.test_ivy.helpers.function_testing.test_frontend_method"]], "test_function() (in module ivy_tests.test_ivy.helpers.function_testing)": [[772, "ivy_tests.test_ivy.helpers.function_testing.test_function"]], "test_function_backend_computation() (in module ivy_tests.test_ivy.helpers.function_testing)": [[772, "ivy_tests.test_ivy.helpers.function_testing.test_function_backend_computation"]], "test_function_ground_truth_computation() (in module ivy_tests.test_ivy.helpers.function_testing)": [[772, "ivy_tests.test_ivy.helpers.function_testing.test_function_ground_truth_computation"]], "test_gradient_backend_computation() (in module ivy_tests.test_ivy.helpers.function_testing)": [[772, "ivy_tests.test_ivy.helpers.function_testing.test_gradient_backend_computation"]], "test_gradient_ground_truth_computation() (in module ivy_tests.test_ivy.helpers.function_testing)": [[772, "ivy_tests.test_ivy.helpers.function_testing.test_gradient_ground_truth_computation"]], "test_method() (in module ivy_tests.test_ivy.helpers.function_testing)": [[772, "ivy_tests.test_ivy.helpers.function_testing.test_method"]], "test_method_backend_computation() (in module ivy_tests.test_ivy.helpers.function_testing)": [[772, "ivy_tests.test_ivy.helpers.function_testing.test_method_backend_computation"]], "test_method_ground_truth_computation() (in module ivy_tests.test_ivy.helpers.function_testing)": [[772, "ivy_tests.test_ivy.helpers.function_testing.test_method_ground_truth_computation"]], "traced_if_required() (in module ivy_tests.test_ivy.helpers.function_testing)": [[772, "ivy_tests.test_ivy.helpers.function_testing.traced_if_required"]], "wrap_frontend_function_args() (in module ivy_tests.test_ivy.helpers.function_testing)": [[772, "ivy_tests.test_ivy.helpers.function_testing.wrap_frontend_function_args"]], "current_frontend_config (in module ivy_tests.test_ivy.helpers.globals)": [[773, "ivy_tests.test_ivy.helpers.globals.CURRENT_FRONTEND_CONFIG"]], "interruptedtest": [[773, "ivy_tests.test_ivy.helpers.globals.InterruptedTest"]], "testdata (class in ivy_tests.test_ivy.helpers.globals)": [[773, "ivy_tests.test_ivy.helpers.globals.TestData"]], "__init__() (ivy_tests.test_ivy.helpers.globals.interruptedtest method)": [[773, "ivy_tests.test_ivy.helpers.globals.InterruptedTest.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.globals.testdata method)": [[773, "ivy_tests.test_ivy.helpers.globals.TestData.__init__"]], "fn_name (ivy_tests.test_ivy.helpers.globals.testdata attribute)": [[773, "ivy_tests.test_ivy.helpers.globals.TestData.fn_name"]], "fn_tree (ivy_tests.test_ivy.helpers.globals.testdata attribute)": [[773, "ivy_tests.test_ivy.helpers.globals.TestData.fn_tree"]], "is_method (ivy_tests.test_ivy.helpers.globals.testdata attribute)": [[773, "ivy_tests.test_ivy.helpers.globals.TestData.is_method"]], "ivy_tests.test_ivy.helpers.globals": [[773, "module-ivy_tests.test_ivy.helpers.globals"]], "setup_api_test() (in module ivy_tests.test_ivy.helpers.globals)": [[773, "ivy_tests.test_ivy.helpers.globals.setup_api_test"]], "setup_frontend_test() (in module ivy_tests.test_ivy.helpers.globals)": [[773, "ivy_tests.test_ivy.helpers.globals.setup_frontend_test"]], "supported_device_dtypes (ivy_tests.test_ivy.helpers.globals.testdata attribute)": [[773, "ivy_tests.test_ivy.helpers.globals.TestData.supported_device_dtypes"]], "teardown_api_test() (in module ivy_tests.test_ivy.helpers.globals)": [[773, "ivy_tests.test_ivy.helpers.globals.teardown_api_test"]], "teardown_frontend_test() (in module ivy_tests.test_ivy.helpers.globals)": [[773, "ivy_tests.test_ivy.helpers.globals.teardown_frontend_test"]], "test_fn (ivy_tests.test_ivy.helpers.globals.testdata attribute)": [[773, "ivy_tests.test_ivy.helpers.globals.TestData.test_fn"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers": [[774, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers"]], "array_and_broadcastable_shape() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[775, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.array_and_broadcastable_shape"]], "array_bools() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[775, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.array_bools"]], "array_helpers_dtype_info_helper() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[775, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.array_helpers_dtype_info_helper"]], "array_indices_axis() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[775, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.array_indices_axis"]], "array_indices_put_along_axis() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[775, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.array_indices_put_along_axis"]], "array_values() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[775, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.array_values"]], "arrays_and_axes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[775, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.arrays_and_axes"]], "arrays_for_pooling() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[775, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.arrays_for_pooling"]], "broadcast_shapes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[775, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.broadcast_shapes"]], "cond_data_gen_helper() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[775, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.cond_data_gen_helper"]], "create_concatenable_arrays_dtypes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[775, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.create_concatenable_arrays_dtypes"]], "create_nested_input() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[775, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.create_nested_input"]], "dtype_and_values() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[775, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.dtype_and_values"]], "dtype_array_query() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[775, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.dtype_array_query"]], "dtype_array_query_val() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[775, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.dtype_array_query_val"]], "dtype_values_axis() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[775, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.dtype_values_axis"]], "einsum_helper() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[775, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.einsum_helper"]], "get_first_solve_batch_matrix() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[775, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.get_first_solve_batch_matrix"]], "get_first_solve_matrix() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[775, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.get_first_solve_matrix"]], "get_second_solve_batch_matrix() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[775, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.get_second_solve_batch_matrix"]], "get_second_solve_matrix() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[775, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.get_second_solve_matrix"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers": [[775, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers"]], "list_of_size() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[775, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.list_of_size"]], "lists() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[775, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.lists"]], "mutually_broadcastable_shapes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[775, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.mutually_broadcastable_shapes"]], "prod() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[775, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.prod"]], "array_dtypes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers)": [[776, "ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers.array_dtypes"]], "cast_filter() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers)": [[776, "ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers.cast_filter"]], "cast_filter_helper() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers)": [[776, "ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers.cast_filter_helper"]], "get_castable_dtype() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers)": [[776, "ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers.get_castable_dtype"]], "get_dtypes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers)": [[776, "ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers.get_dtypes"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers": [[776, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers"]], "broadcasterror": [[777, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.BroadcastError"]], "apply_safety_factor() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[777, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.apply_safety_factor"]], "broadcast_shapes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[777, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.broadcast_shapes"]], "dims_and_offset() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[777, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.dims_and_offset"]], "embedding_helper() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[777, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.embedding_helper"]], "general_helpers_dtype_info_helper() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[777, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.general_helpers_dtype_info_helper"]], "get_axis() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[777, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.get_axis"]], "get_bounds() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[777, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.get_bounds"]], "get_mean_std() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[777, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.get_mean_std"]], "get_shape() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[777, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.get_shape"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers": [[777, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers"]], "matrix_is_stable() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[777, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.matrix_is_stable"]], "reshape_shapes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[777, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.reshape_shapes"]], "sizes_() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[777, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.sizes_"]], "subsets() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[777, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.subsets"]], "two_broadcastable_shapes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[777, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.two_broadcastable_shapes"]], "x_and_filters() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[777, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.x_and_filters"]], "floats() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers)": [[778, "ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers.floats"]], "ints() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers)": [[778, "ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers.ints"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers": [[778, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers"]], "number() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers)": [[778, "ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers.number"]], "backend_proc() (in module ivy_tests.test_ivy.helpers.multiprocessing)": [[779, "ivy_tests.test_ivy.helpers.multiprocessing.backend_proc"]], "frontend_proc() (in module ivy_tests.test_ivy.helpers.multiprocessing)": [[779, "ivy_tests.test_ivy.helpers.multiprocessing.frontend_proc"]], "ivy_tests.test_ivy.helpers.multiprocessing": [[779, "module-ivy_tests.test_ivy.helpers.multiprocessing"]], "backendhandler (class in ivy_tests.test_ivy.helpers.pipeline_helper)": [[780, "ivy_tests.test_ivy.helpers.pipeline_helper.BackendHandler"]], "backendhandlermode (class in ivy_tests.test_ivy.helpers.pipeline_helper)": [[780, "ivy_tests.test_ivy.helpers.pipeline_helper.BackendHandlerMode"]], "setbackend (ivy_tests.test_ivy.helpers.pipeline_helper.backendhandlermode attribute)": [[780, "ivy_tests.test_ivy.helpers.pipeline_helper.BackendHandlerMode.SetBackend"]], "withbackend (ivy_tests.test_ivy.helpers.pipeline_helper.backendhandlermode attribute)": [[780, "ivy_tests.test_ivy.helpers.pipeline_helper.BackendHandlerMode.WithBackend"]], "withbackendcontext (class in ivy_tests.test_ivy.helpers.pipeline_helper)": [[780, "ivy_tests.test_ivy.helpers.pipeline_helper.WithBackendContext"]], "__init__() (ivy_tests.test_ivy.helpers.pipeline_helper.withbackendcontext method)": [[780, "ivy_tests.test_ivy.helpers.pipeline_helper.WithBackendContext.__init__"]], "get_frontend_config() (in module ivy_tests.test_ivy.helpers.pipeline_helper)": [[780, "ivy_tests.test_ivy.helpers.pipeline_helper.get_frontend_config"]], "ivy_tests.test_ivy.helpers.pipeline_helper": [[780, "module-ivy_tests.test_ivy.helpers.pipeline_helper"]], "update_backend() (ivy_tests.test_ivy.helpers.pipeline_helper.backendhandler class method)": [[780, "ivy_tests.test_ivy.helpers.pipeline_helper.BackendHandler.update_backend"]], "frontendmethoddata (class in ivy_tests.test_ivy.helpers.structs)": [[781, "ivy_tests.test_ivy.helpers.structs.FrontendMethodData"]], "__init__() (ivy_tests.test_ivy.helpers.structs.frontendmethoddata method)": [[781, "ivy_tests.test_ivy.helpers.structs.FrontendMethodData.__init__"]], "framework_init_module (ivy_tests.test_ivy.helpers.structs.frontendmethoddata attribute)": [[781, "ivy_tests.test_ivy.helpers.structs.FrontendMethodData.framework_init_module"]], "init_name (ivy_tests.test_ivy.helpers.structs.frontendmethoddata attribute)": [[781, "ivy_tests.test_ivy.helpers.structs.FrontendMethodData.init_name"]], "ivy_init_module (ivy_tests.test_ivy.helpers.structs.frontendmethoddata attribute)": [[781, "ivy_tests.test_ivy.helpers.structs.FrontendMethodData.ivy_init_module"]], "ivy_tests.test_ivy.helpers.structs": [[781, "module-ivy_tests.test_ivy.helpers.structs"]], "method_name (ivy_tests.test_ivy.helpers.structs.frontendmethoddata attribute)": [[781, "ivy_tests.test_ivy.helpers.structs.FrontendMethodData.method_name"]], "dynamicflag (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[782, "ivy_tests.test_ivy.helpers.test_parameter_flags.DynamicFlag"]], "frontendfunctiontestflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[782, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendFunctionTestFlags"]], "frontendinittestflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[782, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendInitTestFlags"]], "frontendmethodtestflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[782, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendMethodTestFlags"]], "functiontestflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[782, "ivy_tests.test_ivy.helpers.test_parameter_flags.FunctionTestFlags"]], "initmethodtestflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[782, "ivy_tests.test_ivy.helpers.test_parameter_flags.InitMethodTestFlags"]], "methodtestflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[782, "ivy_tests.test_ivy.helpers.test_parameter_flags.MethodTestFlags"]], "testflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[782, "ivy_tests.test_ivy.helpers.test_parameter_flags.TestFlags"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.dynamicflag method)": [[782, "ivy_tests.test_ivy.helpers.test_parameter_flags.DynamicFlag.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.frontendfunctiontestflags method)": [[782, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendFunctionTestFlags.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.frontendinittestflags method)": [[782, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendInitTestFlags.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.frontendmethodtestflags method)": [[782, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendMethodTestFlags.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.functiontestflags method)": [[782, "ivy_tests.test_ivy.helpers.test_parameter_flags.FunctionTestFlags.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.initmethodtestflags method)": [[782, "ivy_tests.test_ivy.helpers.test_parameter_flags.InitMethodTestFlags.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.methodtestflags method)": [[782, "ivy_tests.test_ivy.helpers.test_parameter_flags.MethodTestFlags.__init__"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.frontendfunctiontestflags method)": [[782, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendFunctionTestFlags.apply_flags"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.frontendinittestflags method)": [[782, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendInitTestFlags.apply_flags"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.frontendmethodtestflags method)": [[782, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendMethodTestFlags.apply_flags"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.functiontestflags method)": [[782, "ivy_tests.test_ivy.helpers.test_parameter_flags.FunctionTestFlags.apply_flags"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.initmethodtestflags method)": [[782, "ivy_tests.test_ivy.helpers.test_parameter_flags.InitMethodTestFlags.apply_flags"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.methodtestflags method)": [[782, "ivy_tests.test_ivy.helpers.test_parameter_flags.MethodTestFlags.apply_flags"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.testflags method)": [[782, "ivy_tests.test_ivy.helpers.test_parameter_flags.TestFlags.apply_flags"]], "build_flag() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[782, "ivy_tests.test_ivy.helpers.test_parameter_flags.build_flag"]], "frontend_function_flags() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[782, "ivy_tests.test_ivy.helpers.test_parameter_flags.frontend_function_flags"]], "frontend_init_flags() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[782, "ivy_tests.test_ivy.helpers.test_parameter_flags.frontend_init_flags"]], "frontend_method_flags() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[782, "ivy_tests.test_ivy.helpers.test_parameter_flags.frontend_method_flags"]], "function_flags() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[782, "ivy_tests.test_ivy.helpers.test_parameter_flags.function_flags"]], "init_method_flags() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[782, "ivy_tests.test_ivy.helpers.test_parameter_flags.init_method_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags": [[782, "module-ivy_tests.test_ivy.helpers.test_parameter_flags"]], "method_flags() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[782, "ivy_tests.test_ivy.helpers.test_parameter_flags.method_flags"]], "strategy (ivy_tests.test_ivy.helpers.test_parameter_flags.dynamicflag attribute)": [[782, "ivy_tests.test_ivy.helpers.test_parameter_flags.DynamicFlag.strategy"]], "handle_example() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[783, "ivy_tests.test_ivy.helpers.testing_helpers.handle_example"]], "handle_frontend_method() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[783, "ivy_tests.test_ivy.helpers.testing_helpers.handle_frontend_method"]], "handle_frontend_test() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[783, "ivy_tests.test_ivy.helpers.testing_helpers.handle_frontend_test"]], "handle_method() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[783, "ivy_tests.test_ivy.helpers.testing_helpers.handle_method"]], "handle_test() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[783, "ivy_tests.test_ivy.helpers.testing_helpers.handle_test"]], "ivy_tests.test_ivy.helpers.testing_helpers": [[783, "module-ivy_tests.test_ivy.helpers.testing_helpers"]], "num_positional_args() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[783, "ivy_tests.test_ivy.helpers.testing_helpers.num_positional_args"]], "num_positional_args_helper() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[783, "ivy_tests.test_ivy.helpers.testing_helpers.num_positional_args_helper"]], "num_positional_args_method() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[783, "ivy_tests.test_ivy.helpers.testing_helpers.num_positional_args_method"]], "seed() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[783, "ivy_tests.test_ivy.helpers.testing_helpers.seed"]], "elu (class in ivy.stateful.activations)": [[787, "ivy.stateful.activations.ELU"]], "geglu (class in ivy.stateful.activations)": [[787, "ivy.stateful.activations.GEGLU"]], "gelu (class in ivy.stateful.activations)": [[787, "ivy.stateful.activations.GELU"]], "hardswish (class in ivy.stateful.activations)": [[787, "ivy.stateful.activations.Hardswish"]], "leakyrelu (class in ivy.stateful.activations)": [[787, "ivy.stateful.activations.LeakyReLU"]], "logsigmoid (class in ivy.stateful.activations)": [[787, "ivy.stateful.activations.LogSigmoid"]], "logsoftmax (class in ivy.stateful.activations)": [[787, "ivy.stateful.activations.LogSoftmax"]], "logit (class in ivy.stateful.activations)": [[787, "ivy.stateful.activations.Logit"]], "mish (class in ivy.stateful.activations)": [[787, "ivy.stateful.activations.Mish"]], "prelu (class in ivy.stateful.activations)": [[787, "ivy.stateful.activations.PReLU"]], "relu (class in ivy.stateful.activations)": [[787, "ivy.stateful.activations.ReLU"]], "relu6 (class in ivy.stateful.activations)": [[787, "ivy.stateful.activations.ReLU6"]], "selu (class in ivy.stateful.activations)": [[787, "ivy.stateful.activations.SeLU"]], "silu (class in ivy.stateful.activations)": [[787, "ivy.stateful.activations.SiLU"]], "sigmoid (class in ivy.stateful.activations)": [[787, "ivy.stateful.activations.Sigmoid"]], "softmax (class in ivy.stateful.activations)": [[787, "ivy.stateful.activations.Softmax"]], "softplus (class in ivy.stateful.activations)": [[787, "ivy.stateful.activations.Softplus"]], "tanh (class in ivy.stateful.activations)": [[787, "ivy.stateful.activations.Tanh"]], "__init__() (ivy.stateful.activations.elu method)": [[787, "ivy.stateful.activations.ELU.__init__"]], "__init__() (ivy.stateful.activations.geglu method)": [[787, "ivy.stateful.activations.GEGLU.__init__"]], "__init__() (ivy.stateful.activations.gelu method)": [[787, "ivy.stateful.activations.GELU.__init__"]], "__init__() (ivy.stateful.activations.hardswish method)": [[787, "ivy.stateful.activations.Hardswish.__init__"]], "__init__() (ivy.stateful.activations.leakyrelu method)": [[787, "ivy.stateful.activations.LeakyReLU.__init__"]], "__init__() (ivy.stateful.activations.logsigmoid method)": [[787, "ivy.stateful.activations.LogSigmoid.__init__"]], "__init__() (ivy.stateful.activations.logsoftmax method)": [[787, "ivy.stateful.activations.LogSoftmax.__init__"]], "__init__() (ivy.stateful.activations.logit method)": [[787, "ivy.stateful.activations.Logit.__init__"]], "__init__() (ivy.stateful.activations.mish method)": [[787, "ivy.stateful.activations.Mish.__init__"]], "__init__() (ivy.stateful.activations.prelu method)": [[787, "ivy.stateful.activations.PReLU.__init__"]], "__init__() (ivy.stateful.activations.relu method)": [[787, "ivy.stateful.activations.ReLU.__init__"]], "__init__() (ivy.stateful.activations.relu6 method)": [[787, "ivy.stateful.activations.ReLU6.__init__"]], "__init__() (ivy.stateful.activations.selu method)": [[787, "ivy.stateful.activations.SeLU.__init__"]], "__init__() (ivy.stateful.activations.silu method)": [[787, "ivy.stateful.activations.SiLU.__init__"]], "__init__() (ivy.stateful.activations.sigmoid method)": [[787, "ivy.stateful.activations.Sigmoid.__init__"]], "__init__() (ivy.stateful.activations.softmax method)": [[787, "ivy.stateful.activations.Softmax.__init__"]], "__init__() (ivy.stateful.activations.softplus method)": [[787, "ivy.stateful.activations.Softplus.__init__"]], "__init__() (ivy.stateful.activations.tanh method)": [[787, "ivy.stateful.activations.Tanh.__init__"]], "ivy.stateful.activations": [[787, "module-ivy.stateful.activations"]], "moduleconverters (class in ivy.stateful.converters)": [[788, "ivy.stateful.converters.ModuleConverters"]], "from_flax_module() (ivy.stateful.converters.moduleconverters static method)": [[788, "ivy.stateful.converters.ModuleConverters.from_flax_module"]], "from_haiku_module() (ivy.stateful.converters.moduleconverters static method)": [[788, "ivy.stateful.converters.ModuleConverters.from_haiku_module"]], "from_keras_module() (ivy.stateful.converters.moduleconverters static method)": [[788, "ivy.stateful.converters.ModuleConverters.from_keras_module"]], "from_paddle_module() (ivy.stateful.converters.moduleconverters static method)": [[788, "ivy.stateful.converters.ModuleConverters.from_paddle_module"]], "from_torch_module() (ivy.stateful.converters.moduleconverters static method)": [[788, "ivy.stateful.converters.ModuleConverters.from_torch_module"]], "ivy.stateful.converters": [[788, "module-ivy.stateful.converters"]], "to_ivy_module() (in module ivy.stateful.converters)": [[788, "ivy.stateful.converters.to_ivy_module"]], "to_keras_module() (ivy.stateful.converters.moduleconverters method)": [[788, "ivy.stateful.converters.ModuleConverters.to_keras_module"]], "modulehelpers (class in ivy.stateful.helpers)": [[789, "ivy.stateful.helpers.ModuleHelpers"]], "ivy.stateful.helpers": [[789, "module-ivy.stateful.helpers"]], "constant (class in ivy.stateful.initializers)": [[790, "ivy.stateful.initializers.Constant"]], "firstlayersiren (class in ivy.stateful.initializers)": [[790, "ivy.stateful.initializers.FirstLayerSiren"]], "glorotuniform (class in ivy.stateful.initializers)": [[790, "ivy.stateful.initializers.GlorotUniform"]], "initializer (class in ivy.stateful.initializers)": [[790, "ivy.stateful.initializers.Initializer"]], "kaimingnormal (class in ivy.stateful.initializers)": [[790, "ivy.stateful.initializers.KaimingNormal"]], "ones (class in ivy.stateful.initializers)": [[790, "ivy.stateful.initializers.Ones"]], "randomnormal (class in ivy.stateful.initializers)": [[790, "ivy.stateful.initializers.RandomNormal"]], "siren (class in ivy.stateful.initializers)": [[790, "ivy.stateful.initializers.Siren"]], "uniform (class in ivy.stateful.initializers)": [[790, "ivy.stateful.initializers.Uniform"]], "zeros (class in ivy.stateful.initializers)": [[790, "ivy.stateful.initializers.Zeros"]], "__init__() (ivy.stateful.initializers.constant method)": [[790, "ivy.stateful.initializers.Constant.__init__"]], "__init__() (ivy.stateful.initializers.firstlayersiren method)": [[790, "ivy.stateful.initializers.FirstLayerSiren.__init__"]], "__init__() (ivy.stateful.initializers.glorotuniform method)": [[790, "ivy.stateful.initializers.GlorotUniform.__init__"]], "__init__() (ivy.stateful.initializers.kaimingnormal method)": [[790, "ivy.stateful.initializers.KaimingNormal.__init__"]], "__init__() (ivy.stateful.initializers.ones method)": [[790, "ivy.stateful.initializers.Ones.__init__"]], "__init__() (ivy.stateful.initializers.randomnormal method)": [[790, "ivy.stateful.initializers.RandomNormal.__init__"]], "__init__() (ivy.stateful.initializers.siren method)": [[790, "ivy.stateful.initializers.Siren.__init__"]], "__init__() (ivy.stateful.initializers.uniform method)": [[790, "ivy.stateful.initializers.Uniform.__init__"]], "__init__() (ivy.stateful.initializers.zeros method)": [[790, "ivy.stateful.initializers.Zeros.__init__"]], "create_variables() (ivy.stateful.initializers.constant method)": [[790, "ivy.stateful.initializers.Constant.create_variables"]], "create_variables() (ivy.stateful.initializers.initializer method)": [[790, "ivy.stateful.initializers.Initializer.create_variables"]], "create_variables() (ivy.stateful.initializers.kaimingnormal method)": [[790, "ivy.stateful.initializers.KaimingNormal.create_variables"]], "create_variables() (ivy.stateful.initializers.randomnormal method)": [[790, "ivy.stateful.initializers.RandomNormal.create_variables"]], "create_variables() (ivy.stateful.initializers.uniform method)": [[790, "ivy.stateful.initializers.Uniform.create_variables"]], "ivy.stateful.initializers": [[790, "module-ivy.stateful.initializers"]], "adaptiveavgpool1d (class in ivy.stateful.layers)": [[791, "ivy.stateful.layers.AdaptiveAvgPool1d"]], "adaptiveavgpool2d (class in ivy.stateful.layers)": [[791, "ivy.stateful.layers.AdaptiveAvgPool2d"]], "avgpool1d (class in ivy.stateful.layers)": [[791, "ivy.stateful.layers.AvgPool1D"]], "avgpool2d (class in ivy.stateful.layers)": [[791, "ivy.stateful.layers.AvgPool2D"]], "avgpool3d (class in ivy.stateful.layers)": [[791, "ivy.stateful.layers.AvgPool3D"]], "conv1d (class in ivy.stateful.layers)": [[791, "ivy.stateful.layers.Conv1D"]], "conv1dtranspose (class in ivy.stateful.layers)": [[791, "ivy.stateful.layers.Conv1DTranspose"]], "conv2d (class in ivy.stateful.layers)": [[791, "ivy.stateful.layers.Conv2D"]], "conv2dtranspose (class in ivy.stateful.layers)": [[791, "ivy.stateful.layers.Conv2DTranspose"]], "conv3d (class in ivy.stateful.layers)": [[791, "ivy.stateful.layers.Conv3D"]], "conv3dtranspose (class in ivy.stateful.layers)": [[791, "ivy.stateful.layers.Conv3DTranspose"]], "dct (class in ivy.stateful.layers)": [[791, "ivy.stateful.layers.Dct"]], "depthwiseconv2d (class in ivy.stateful.layers)": [[791, "ivy.stateful.layers.DepthwiseConv2D"]], "dropout (class in ivy.stateful.layers)": [[791, "ivy.stateful.layers.Dropout"]], "embedding (class in ivy.stateful.layers)": [[791, "ivy.stateful.layers.Embedding"]], "fft (class in ivy.stateful.layers)": [[791, "ivy.stateful.layers.FFT"]], "ifft (class in ivy.stateful.layers)": [[791, "ivy.stateful.layers.IFFT"]], "identity (class in ivy.stateful.layers)": [[791, "ivy.stateful.layers.Identity"]], "lstm (class in ivy.stateful.layers)": [[791, "ivy.stateful.layers.LSTM"]], "linear (class in ivy.stateful.layers)": [[791, "ivy.stateful.layers.Linear"]], "maxpool1d (class in ivy.stateful.layers)": [[791, "ivy.stateful.layers.MaxPool1D"]], "maxpool2d (class in ivy.stateful.layers)": [[791, "ivy.stateful.layers.MaxPool2D"]], "maxpool3d (class in ivy.stateful.layers)": [[791, "ivy.stateful.layers.MaxPool3D"]], "multiheadattention (class in ivy.stateful.layers)": [[791, "ivy.stateful.layers.MultiHeadAttention"]], "__init__() (ivy.stateful.layers.adaptiveavgpool1d method)": [[791, "ivy.stateful.layers.AdaptiveAvgPool1d.__init__"]], "__init__() (ivy.stateful.layers.adaptiveavgpool2d method)": [[791, "ivy.stateful.layers.AdaptiveAvgPool2d.__init__"]], "__init__() (ivy.stateful.layers.avgpool1d method)": [[791, "ivy.stateful.layers.AvgPool1D.__init__"]], "__init__() (ivy.stateful.layers.avgpool2d method)": [[791, "ivy.stateful.layers.AvgPool2D.__init__"]], "__init__() (ivy.stateful.layers.avgpool3d method)": [[791, "ivy.stateful.layers.AvgPool3D.__init__"]], "__init__() (ivy.stateful.layers.conv1d method)": [[791, "ivy.stateful.layers.Conv1D.__init__"]], "__init__() (ivy.stateful.layers.conv1dtranspose method)": [[791, "ivy.stateful.layers.Conv1DTranspose.__init__"]], "__init__() (ivy.stateful.layers.conv2d method)": [[791, "ivy.stateful.layers.Conv2D.__init__"]], "__init__() (ivy.stateful.layers.conv2dtranspose method)": [[791, "ivy.stateful.layers.Conv2DTranspose.__init__"]], "__init__() (ivy.stateful.layers.conv3d method)": [[791, "ivy.stateful.layers.Conv3D.__init__"]], "__init__() (ivy.stateful.layers.conv3dtranspose method)": [[791, "ivy.stateful.layers.Conv3DTranspose.__init__"]], "__init__() (ivy.stateful.layers.dct method)": [[791, "ivy.stateful.layers.Dct.__init__"]], "__init__() (ivy.stateful.layers.depthwiseconv2d method)": [[791, "ivy.stateful.layers.DepthwiseConv2D.__init__"]], "__init__() (ivy.stateful.layers.dropout method)": [[791, "ivy.stateful.layers.Dropout.__init__"]], "__init__() (ivy.stateful.layers.embedding method)": [[791, "ivy.stateful.layers.Embedding.__init__"]], "__init__() (ivy.stateful.layers.fft method)": [[791, "ivy.stateful.layers.FFT.__init__"]], "__init__() (ivy.stateful.layers.ifft method)": [[791, "ivy.stateful.layers.IFFT.__init__"]], "__init__() (ivy.stateful.layers.identity method)": [[791, "ivy.stateful.layers.Identity.__init__"]], "__init__() (ivy.stateful.layers.lstm method)": [[791, "ivy.stateful.layers.LSTM.__init__"]], "__init__() (ivy.stateful.layers.linear method)": [[791, "ivy.stateful.layers.Linear.__init__"]], "__init__() (ivy.stateful.layers.maxpool1d method)": [[791, "ivy.stateful.layers.MaxPool1D.__init__"]], "__init__() (ivy.stateful.layers.maxpool2d method)": [[791, "ivy.stateful.layers.MaxPool2D.__init__"]], "__init__() (ivy.stateful.layers.maxpool3d method)": [[791, "ivy.stateful.layers.MaxPool3D.__init__"]], "__init__() (ivy.stateful.layers.multiheadattention method)": [[791, "ivy.stateful.layers.MultiHeadAttention.__init__"]], "get_initial_state() (ivy.stateful.layers.lstm method)": [[791, "ivy.stateful.layers.LSTM.get_initial_state"]], "ivy.stateful.layers": [[791, "module-ivy.stateful.layers"]], "binarycrossentropyloss (class in ivy.stateful.losses)": [[792, "ivy.stateful.losses.BinaryCrossEntropyLoss"]], "crossentropyloss (class in ivy.stateful.losses)": [[792, "ivy.stateful.losses.CrossEntropyLoss"]], "logpoissonloss (class in ivy.stateful.losses)": [[792, "ivy.stateful.losses.LogPoissonLoss"]], "__init__() (ivy.stateful.losses.binarycrossentropyloss method)": [[792, "ivy.stateful.losses.BinaryCrossEntropyLoss.__init__"]], "__init__() (ivy.stateful.losses.crossentropyloss method)": [[792, "ivy.stateful.losses.CrossEntropyLoss.__init__"]], "__init__() (ivy.stateful.losses.logpoissonloss method)": [[792, "ivy.stateful.losses.LogPoissonLoss.__init__"]], "ivy.stateful.losses": [[792, "module-ivy.stateful.losses"]], "module (class in ivy.stateful.module)": [[793, "ivy.stateful.module.Module"]], "modulemeta (class in ivy.stateful.module)": [[793, "ivy.stateful.module.ModuleMeta"]], "__call__() (ivy.stateful.module.module method)": [[793, "ivy.stateful.module.Module.__call__"]], "__init__() (ivy.stateful.module.module method)": [[793, "ivy.stateful.module.Module.__init__"]], "buffers (ivy.stateful.module.module property)": [[793, "ivy.stateful.module.Module.buffers"]], "build() (ivy.stateful.module.module method)": [[793, "ivy.stateful.module.Module.build"]], "build_mode (ivy.stateful.module.module property)": [[793, "ivy.stateful.module.Module.build_mode"]], "built (ivy.stateful.module.module property)": [[793, "ivy.stateful.module.Module.built"]], "device (ivy.stateful.module.module property)": [[793, "ivy.stateful.module.Module.device"]], "dtype (ivy.stateful.module.module property)": [[793, "ivy.stateful.module.Module.dtype"]], "eval() (ivy.stateful.module.module method)": [[793, "ivy.stateful.module.Module.eval"]], "ivy.stateful.module": [[793, "module-ivy.stateful.module"]], "load() (ivy.stateful.module.module static method)": [[793, "ivy.stateful.module.Module.load"]], "module_dict (ivy.stateful.module.module property)": [[793, "ivy.stateful.module.Module.module_dict"]], "register_buffer() (ivy.stateful.module.module method)": [[793, "ivy.stateful.module.Module.register_buffer"]], "register_parameter() (ivy.stateful.module.module method)": [[793, "ivy.stateful.module.Module.register_parameter"]], "save() (ivy.stateful.module.module method)": [[793, "ivy.stateful.module.Module.save"]], "save_weights() (ivy.stateful.module.module method)": [[793, "ivy.stateful.module.Module.save_weights"]], "show_graph() (ivy.stateful.module.module method)": [[793, "ivy.stateful.module.Module.show_graph"]], "state_dict (ivy.stateful.module.module property)": [[793, "ivy.stateful.module.Module.state_dict"]], "to_device() (ivy.stateful.module.module method)": [[793, "ivy.stateful.module.Module.to_device"]], "trace_graph() (ivy.stateful.module.module method)": [[793, "ivy.stateful.module.Module.trace_graph"]], "train() (ivy.stateful.module.module method)": [[793, "ivy.stateful.module.Module.train"]], "training (ivy.stateful.module.module property)": [[793, "ivy.stateful.module.Module.training"]], "v (ivy.stateful.module.module property)": [[793, "ivy.stateful.module.Module.v"]], "batchnorm2d (class in ivy.stateful.norms)": [[794, "ivy.stateful.norms.BatchNorm2D"]], "layernorm (class in ivy.stateful.norms)": [[794, "ivy.stateful.norms.LayerNorm"]], "__init__() (ivy.stateful.norms.batchnorm2d method)": [[794, "ivy.stateful.norms.BatchNorm2D.__init__"]], "__init__() (ivy.stateful.norms.layernorm method)": [[794, "ivy.stateful.norms.LayerNorm.__init__"]], "ivy.stateful.norms": [[794, "module-ivy.stateful.norms"]], "adam (class in ivy.stateful.optimizers)": [[795, "ivy.stateful.optimizers.Adam"]], "adamw (class in ivy.stateful.optimizers)": [[795, "ivy.stateful.optimizers.AdamW"]], "lamb (class in ivy.stateful.optimizers)": [[795, "ivy.stateful.optimizers.LAMB"]], "lars (class in ivy.stateful.optimizers)": [[795, "ivy.stateful.optimizers.LARS"]], "optimizer (class in ivy.stateful.optimizers)": [[795, "ivy.stateful.optimizers.Optimizer"]], "sgd (class in ivy.stateful.optimizers)": [[795, "ivy.stateful.optimizers.SGD"]], "__init__() (ivy.stateful.optimizers.adam method)": [[795, "ivy.stateful.optimizers.Adam.__init__"]], "__init__() (ivy.stateful.optimizers.adamw method)": [[795, "ivy.stateful.optimizers.AdamW.__init__"]], "__init__() (ivy.stateful.optimizers.lamb method)": [[795, "ivy.stateful.optimizers.LAMB.__init__"]], "__init__() (ivy.stateful.optimizers.lars method)": [[795, "ivy.stateful.optimizers.LARS.__init__"]], "__init__() (ivy.stateful.optimizers.optimizer method)": [[795, "ivy.stateful.optimizers.Optimizer.__init__"]], "__init__() (ivy.stateful.optimizers.sgd method)": [[795, "ivy.stateful.optimizers.SGD.__init__"]], "ivy.stateful.optimizers": [[795, "module-ivy.stateful.optimizers"]], "set_state() (ivy.stateful.optimizers.adam method)": [[795, "ivy.stateful.optimizers.Adam.set_state"]], "set_state() (ivy.stateful.optimizers.lamb method)": [[795, "ivy.stateful.optimizers.LAMB.set_state"]], "set_state() (ivy.stateful.optimizers.lars method)": [[795, "ivy.stateful.optimizers.LARS.set_state"]], "set_state() (ivy.stateful.optimizers.optimizer method)": [[795, "ivy.stateful.optimizers.Optimizer.set_state"]], "set_state() (ivy.stateful.optimizers.sgd method)": [[795, "ivy.stateful.optimizers.SGD.set_state"]], "state (ivy.stateful.optimizers.adam property)": [[795, "ivy.stateful.optimizers.Adam.state"]], "state (ivy.stateful.optimizers.lamb property)": [[795, "ivy.stateful.optimizers.LAMB.state"]], "state (ivy.stateful.optimizers.lars property)": [[795, "ivy.stateful.optimizers.LARS.state"]], "state (ivy.stateful.optimizers.sgd property)": [[795, "ivy.stateful.optimizers.SGD.state"]], "step() (ivy.stateful.optimizers.optimizer method)": [[795, "ivy.stateful.optimizers.Optimizer.step"]], "sequential (class in ivy.stateful.sequential)": [[796, "ivy.stateful.sequential.Sequential"]], "__init__() (ivy.stateful.sequential.sequential method)": [[796, "ivy.stateful.sequential.Sequential.__init__"]], "ivy.stateful.sequential": [[796, "module-ivy.stateful.sequential"]], "check_all() (in module ivy.utils.assertions)": [[797, "ivy.utils.assertions.check_all"]], "check_all_or_any_fn() (in module ivy.utils.assertions)": [[797, "ivy.utils.assertions.check_all_or_any_fn"]], "check_any() (in module ivy.utils.assertions)": [[797, "ivy.utils.assertions.check_any"]], "check_dev_correct_formatting() (in module ivy.utils.assertions)": [[797, "ivy.utils.assertions.check_dev_correct_formatting"]], "check_dimensions() (in module ivy.utils.assertions)": [[797, "ivy.utils.assertions.check_dimensions"]], "check_elem_in_list() (in module ivy.utils.assertions)": [[797, "ivy.utils.assertions.check_elem_in_list"]], "check_equal() (in module ivy.utils.assertions)": [[797, "ivy.utils.assertions.check_equal"]], "check_exists() (in module ivy.utils.assertions)": [[797, "ivy.utils.assertions.check_exists"]], "check_false() (in module ivy.utils.assertions)": [[797, "ivy.utils.assertions.check_false"]], "check_gather_input_valid() (in module ivy.utils.assertions)": [[797, "ivy.utils.assertions.check_gather_input_valid"]], "check_gather_nd_input_valid() (in module ivy.utils.assertions)": [[797, "ivy.utils.assertions.check_gather_nd_input_valid"]], "check_greater() (in module ivy.utils.assertions)": [[797, "ivy.utils.assertions.check_greater"]], "check_inplace_sizes_valid() (in module ivy.utils.assertions)": [[797, "ivy.utils.assertions.check_inplace_sizes_valid"]], "check_isinstance() (in module ivy.utils.assertions)": [[797, "ivy.utils.assertions.check_isinstance"]], "check_kernel_padding_size() (in module ivy.utils.assertions)": [[797, "ivy.utils.assertions.check_kernel_padding_size"]], "check_less() (in module ivy.utils.assertions)": [[797, "ivy.utils.assertions.check_less"]], "check_one_way_broadcastable() (in module ivy.utils.assertions)": [[797, "ivy.utils.assertions.check_one_way_broadcastable"]], "check_same_dtype() (in module ivy.utils.assertions)": [[797, "ivy.utils.assertions.check_same_dtype"]], "check_shape() (in module ivy.utils.assertions)": [[797, "ivy.utils.assertions.check_shape"]], "check_shapes_broadcastable() (in module ivy.utils.assertions)": [[797, "ivy.utils.assertions.check_shapes_broadcastable"]], "check_true() (in module ivy.utils.assertions)": [[797, "ivy.utils.assertions.check_true"]], "check_unsorted_segment_valid_params() (in module ivy.utils.assertions)": [[797, "ivy.utils.assertions.check_unsorted_segment_valid_params"]], "ivy.utils.assertions": [[797, "module-ivy.utils.assertions"]], "ivy.utils.backend": [[798, "module-ivy.utils.backend"]], "importtransformer (class in ivy.utils.backend.ast_helpers)": [[799, "ivy.utils.backend.ast_helpers.ImportTransformer"]], "ivyloader (class in ivy.utils.backend.ast_helpers)": [[799, "ivy.utils.backend.ast_helpers.IvyLoader"]], "ivypathfinder (class in ivy.utils.backend.ast_helpers)": [[799, "ivy.utils.backend.ast_helpers.IvyPathFinder"]], "__init__() (ivy.utils.backend.ast_helpers.importtransformer method)": [[799, "ivy.utils.backend.ast_helpers.ImportTransformer.__init__"]], "__init__() (ivy.utils.backend.ast_helpers.ivyloader method)": [[799, "ivy.utils.backend.ast_helpers.IvyLoader.__init__"]], "exec_module() (ivy.utils.backend.ast_helpers.ivyloader method)": [[799, "ivy.utils.backend.ast_helpers.IvyLoader.exec_module"]], "find_spec() (ivy.utils.backend.ast_helpers.ivypathfinder method)": [[799, "ivy.utils.backend.ast_helpers.IvyPathFinder.find_spec"]], "impersonate_import() (ivy.utils.backend.ast_helpers.importtransformer method)": [[799, "ivy.utils.backend.ast_helpers.ImportTransformer.impersonate_import"]], "ivy.utils.backend.ast_helpers": [[799, "module-ivy.utils.backend.ast_helpers"]], "visit_import() (ivy.utils.backend.ast_helpers.importtransformer method)": [[799, "ivy.utils.backend.ast_helpers.ImportTransformer.visit_Import"]], "visit_importfrom() (ivy.utils.backend.ast_helpers.importtransformer method)": [[799, "ivy.utils.backend.ast_helpers.ImportTransformer.visit_ImportFrom"]], "contextmanager (class in ivy.utils.backend.handler)": [[800, "ivy.utils.backend.handler.ContextManager"]], "__init__() (ivy.utils.backend.handler.contextmanager method)": [[800, "ivy.utils.backend.handler.ContextManager.__init__"]], "choose_random_backend() (in module ivy.utils.backend.handler)": [[800, "ivy.utils.backend.handler.choose_random_backend"]], "current_backend() (in module ivy.utils.backend.handler)": [[800, "ivy.utils.backend.handler.current_backend"]], "dynamic_backend_converter() (in module ivy.utils.backend.handler)": [[800, "ivy.utils.backend.handler.dynamic_backend_converter"]], "ivy.utils.backend.handler": [[800, "module-ivy.utils.backend.handler"]], "prevent_access_locally() (in module ivy.utils.backend.handler)": [[800, "ivy.utils.backend.handler.prevent_access_locally"]], "previous_backend() (in module ivy.utils.backend.handler)": [[800, "ivy.utils.backend.handler.previous_backend"]], "set_backend() (in module ivy.utils.backend.handler)": [[800, "ivy.utils.backend.handler.set_backend"]], "set_backend_to_specific_version() (in module ivy.utils.backend.handler)": [[800, "ivy.utils.backend.handler.set_backend_to_specific_version"]], "set_jax_backend() (in module ivy.utils.backend.handler)": [[800, "ivy.utils.backend.handler.set_jax_backend"]], "set_mxnet_backend() (in module ivy.utils.backend.handler)": [[800, "ivy.utils.backend.handler.set_mxnet_backend"]], "set_numpy_backend() (in module ivy.utils.backend.handler)": [[800, "ivy.utils.backend.handler.set_numpy_backend"]], "set_paddle_backend() (in module ivy.utils.backend.handler)": [[800, "ivy.utils.backend.handler.set_paddle_backend"]], "set_tensorflow_backend() (in module ivy.utils.backend.handler)": [[800, "ivy.utils.backend.handler.set_tensorflow_backend"]], "set_torch_backend() (in module ivy.utils.backend.handler)": [[800, "ivy.utils.backend.handler.set_torch_backend"]], "unset_backend() (in module ivy.utils.backend.handler)": [[800, "ivy.utils.backend.handler.unset_backend"]], "with_backend() (in module ivy.utils.backend.handler)": [[800, "ivy.utils.backend.handler.with_backend"]], "clear_sub_backends() (in module ivy.utils.backend.sub_backend_handler)": [[801, "ivy.utils.backend.sub_backend_handler.clear_sub_backends"]], "find_available_sub_backends() (in module ivy.utils.backend.sub_backend_handler)": [[801, "ivy.utils.backend.sub_backend_handler.find_available_sub_backends"]], "fn_name_from_version_specific_fn_name() (in module ivy.utils.backend.sub_backend_handler)": [[801, "ivy.utils.backend.sub_backend_handler.fn_name_from_version_specific_fn_name"]], "fn_name_from_version_specific_fn_name_sub_backend() (in module ivy.utils.backend.sub_backend_handler)": [[801, "ivy.utils.backend.sub_backend_handler.fn_name_from_version_specific_fn_name_sub_backend"]], "ivy.utils.backend.sub_backend_handler": [[801, "module-ivy.utils.backend.sub_backend_handler"]], "set_sub_backend() (in module ivy.utils.backend.sub_backend_handler)": [[801, "ivy.utils.backend.sub_backend_handler.set_sub_backend"]], "set_sub_backend_to_specific_version() (in module ivy.utils.backend.sub_backend_handler)": [[801, "ivy.utils.backend.sub_backend_handler.set_sub_backend_to_specific_version"]], "unset_sub_backend() (in module ivy.utils.backend.sub_backend_handler)": [[801, "ivy.utils.backend.sub_backend_handler.unset_sub_backend"]], "check_for_binaries() (in module ivy.utils.binaries)": [[802, "ivy.utils.binaries.check_for_binaries"]], "cleanup_and_fetch_binaries() (in module ivy.utils.binaries)": [[802, "ivy.utils.binaries.cleanup_and_fetch_binaries"]], "ivy.utils.binaries": [[802, "module-ivy.utils.binaries"]], "import_module() (in module ivy.utils.dynamic_import)": [[803, "ivy.utils.dynamic_import.import_module"]], "ivy.utils.dynamic_import": [[803, "module-ivy.utils.dynamic_import"]], "convert_interleaved_input() (in module ivy.utils.einsum_parser)": [[804, "ivy.utils.einsum_parser.convert_interleaved_input"]], "convert_subscripts() (in module ivy.utils.einsum_parser)": [[804, "ivy.utils.einsum_parser.convert_subscripts"]], "find_output_shape() (in module ivy.utils.einsum_parser)": [[804, "ivy.utils.einsum_parser.find_output_shape"]], "find_output_str() (in module ivy.utils.einsum_parser)": [[804, "ivy.utils.einsum_parser.find_output_str"]], "gen_unused_symbols() (in module ivy.utils.einsum_parser)": [[804, "ivy.utils.einsum_parser.gen_unused_symbols"]], "get_symbol() (in module ivy.utils.einsum_parser)": [[804, "ivy.utils.einsum_parser.get_symbol"]], "has_valid_einsum_chars_only() (in module ivy.utils.einsum_parser)": [[804, "ivy.utils.einsum_parser.has_valid_einsum_chars_only"]], "is_valid_einsum_char() (in module ivy.utils.einsum_parser)": [[804, "ivy.utils.einsum_parser.is_valid_einsum_char"]], "ivy.utils.einsum_parser": [[804, "module-ivy.utils.einsum_parser"]], "legalise_einsum_expr() (in module ivy.utils.einsum_parser)": [[804, "ivy.utils.einsum_parser.legalise_einsum_expr"]], "possibly_convert_to_numpy() (in module ivy.utils.einsum_parser)": [[804, "ivy.utils.einsum_parser.possibly_convert_to_numpy"]], "can_dot() (in module ivy.utils.einsum_path_helpers)": [[805, "ivy.utils.einsum_path_helpers.can_dot"]], "compute_size_by_dict() (in module ivy.utils.einsum_path_helpers)": [[805, "ivy.utils.einsum_path_helpers.compute_size_by_dict"]], "find_contraction() (in module ivy.utils.einsum_path_helpers)": [[805, "ivy.utils.einsum_path_helpers.find_contraction"]], "flop_count() (in module ivy.utils.einsum_path_helpers)": [[805, "ivy.utils.einsum_path_helpers.flop_count"]], "greedy_path() (in module ivy.utils.einsum_path_helpers)": [[805, "ivy.utils.einsum_path_helpers.greedy_path"]], "ivy.utils.einsum_path_helpers": [[805, "module-ivy.utils.einsum_path_helpers"]], "optimal_path() (in module ivy.utils.einsum_path_helpers)": [[805, "ivy.utils.einsum_path_helpers.optimal_path"]], "parse_einsum_input() (in module ivy.utils.einsum_path_helpers)": [[805, "ivy.utils.einsum_path_helpers.parse_einsum_input"]], "parse_possible_contraction() (in module ivy.utils.einsum_path_helpers)": [[805, "ivy.utils.einsum_path_helpers.parse_possible_contraction"]], "update_other_results() (in module ivy.utils.einsum_path_helpers)": [[805, "ivy.utils.einsum_path_helpers.update_other_results"]], "inplaceupdateexception": [[806, "ivy.utils.exceptions.InplaceUpdateException"]], "ivyattributeerror": [[806, "ivy.utils.exceptions.IvyAttributeError"]], "ivybackendexception": [[806, "ivy.utils.exceptions.IvyBackendException"]], "ivybroadcastshapeerror": [[806, "ivy.utils.exceptions.IvyBroadcastShapeError"]], "ivydeviceerror": [[806, "ivy.utils.exceptions.IvyDeviceError"]], "ivydtypepromotionerror": [[806, "ivy.utils.exceptions.IvyDtypePromotionError"]], "ivyerror": [[806, "ivy.utils.exceptions.IvyError"]], "ivyexception": [[806, "ivy.utils.exceptions.IvyException"]], "ivyindexerror": [[806, "ivy.utils.exceptions.IvyIndexError"]], "ivyinvalidbackendexception": [[806, "ivy.utils.exceptions.IvyInvalidBackendException"]], "ivynotimplementedexception": [[806, "ivy.utils.exceptions.IvyNotImplementedException"]], "ivyvalueerror": [[806, "ivy.utils.exceptions.IvyValueError"]], "__init__() (ivy.utils.exceptions.inplaceupdateexception method)": [[806, "ivy.utils.exceptions.InplaceUpdateException.__init__"]], "__init__() (ivy.utils.exceptions.ivyattributeerror method)": [[806, "ivy.utils.exceptions.IvyAttributeError.__init__"]], "__init__() (ivy.utils.exceptions.ivybackendexception method)": [[806, "ivy.utils.exceptions.IvyBackendException.__init__"]], "__init__() (ivy.utils.exceptions.ivybroadcastshapeerror method)": [[806, "ivy.utils.exceptions.IvyBroadcastShapeError.__init__"]], "__init__() (ivy.utils.exceptions.ivydeviceerror method)": [[806, "ivy.utils.exceptions.IvyDeviceError.__init__"]], "__init__() (ivy.utils.exceptions.ivydtypepromotionerror method)": [[806, "ivy.utils.exceptions.IvyDtypePromotionError.__init__"]], "__init__() (ivy.utils.exceptions.ivyerror method)": [[806, "ivy.utils.exceptions.IvyError.__init__"]], "__init__() (ivy.utils.exceptions.ivyexception method)": [[806, "ivy.utils.exceptions.IvyException.__init__"]], "__init__() (ivy.utils.exceptions.ivyindexerror method)": [[806, "ivy.utils.exceptions.IvyIndexError.__init__"]], "__init__() (ivy.utils.exceptions.ivyinvalidbackendexception method)": [[806, "ivy.utils.exceptions.IvyInvalidBackendException.__init__"]], "__init__() (ivy.utils.exceptions.ivynotimplementedexception method)": [[806, "ivy.utils.exceptions.IvyNotImplementedException.__init__"]], "__init__() (ivy.utils.exceptions.ivyvalueerror method)": [[806, "ivy.utils.exceptions.IvyValueError.__init__"]], "handle_exceptions() (in module ivy.utils.exceptions)": [[806, "ivy.utils.exceptions.handle_exceptions"]], "ivy.utils.exceptions": [[806, "module-ivy.utils.exceptions"]], "add_array_specs() (in module ivy.utils.inspection)": [[807, "ivy.utils.inspection.add_array_specs"]], "fn_array_spec() (in module ivy.utils.inspection)": [[807, "ivy.utils.inspection.fn_array_spec"]], "ivy.utils.inspection": [[807, "module-ivy.utils.inspection"]], "ivy.utils.logging": [[808, "module-ivy.utils.logging"]], "set_logging_mode() (in module ivy.utils.logging)": [[808, "ivy.utils.logging.set_logging_mode"]], "unset_logging_mode() (in module ivy.utils.logging)": [[808, "ivy.utils.logging.unset_logging_mode"]], "profiler (class in ivy.utils.profiler)": [[809, "ivy.utils.profiler.Profiler"]], "__init__() (ivy.utils.profiler.profiler method)": [[809, "ivy.utils.profiler.Profiler.__init__"]], "ivy.utils.profiler": [[809, "module-ivy.utils.profiler"]], "print_stats (ivy.utils.profiler.profiler attribute)": [[809, "ivy.utils.profiler.Profiler.print_stats"]], "tensorflow_profile_start() (in module ivy.utils.profiler)": [[809, "ivy.utils.profiler.tensorflow_profile_start"]], "tensorflow_profile_stop() (in module ivy.utils.profiler)": [[809, "ivy.utils.profiler.tensorflow_profile_stop"]], "torch_profiler_init() (in module ivy.utils.profiler)": [[809, "ivy.utils.profiler.torch_profiler_init"]], "torch_profiler_start() (in module ivy.utils.profiler)": [[809, "ivy.utils.profiler.torch_profiler_start"]], "torch_profiler_stop() (in module ivy.utils.profiler)": [[809, "ivy.utils.profiler.torch_profiler_stop"]], "viz (ivy.utils.profiler.profiler attribute)": [[809, "ivy.utils.profiler.Profiler.viz"]], "cprint() (in module ivy.utils.verbosity)": [[810, "ivy.utils.verbosity.cprint"]], "ivy.utils.verbosity": [[810, "module-ivy.utils.verbosity"]], "automatic code conversions": [[856, "term-Automatic-Code-Conversions"]], "backend handler": [[856, "term-Backend-Handler"]], "compositional functions": [[856, "term-Compositional-Functions"]], "convenience functions": [[856, "term-Convenience-Functions"]], "framework": [[856, "term-Framework"]], "framework handler": [[856, "term-Framework-Handler"]], "graph compiler": [[856, "term-Graph-Compiler"]], "ivy array": [[856, "term-Ivy-Array"]], "ivy backends": [[856, "term-Ivy-Backends"]], "ivy compiler": [[856, "term-Ivy-Compiler"]], "ivy container": [[856, "term-Ivy-Container"]], "ivy frontends": [[856, "term-Ivy-Frontends"]], "ivy functional api": [[856, "term-Ivy-Functional-API"]], "ivy tracer": [[856, "term-Ivy-Tracer"]], "ivy transpiler": [[856, "term-Ivy-Transpiler"]], "mixed functions": [[856, "term-Mixed-Functions"]], "native array": [[856, "term-Native-Array"]], "nestable functions": [[856, "term-Nestable-Functions"]], "pipeline": [[856, "term-Pipeline"]], "primary functions": [[856, "term-Primary-Functions"]], "standalone functions": [[856, "term-Standalone-Functions"]], "submodule helper functions": [[856, "term-Submodule-Helper-Functions"]], "built-in function": [[862, "ivy.trace_graph"], [863, "ivy.transpile"], [864, "ivy.unify"]], "ivy.trace_graph()": [[862, "ivy.trace_graph"]], "ivy.transpile()": [[863, "ivy.transpile"]], "ivy.unify()": [[864, "ivy.unify"]]}})