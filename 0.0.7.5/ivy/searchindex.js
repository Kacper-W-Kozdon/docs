Search.setIndex({"docnames": ["demos/README", "demos/assets/01_template", "demos/examples_and_demos", "demos/examples_and_demos/alexnet_demo", "demos/examples_and_demos/bert_demo", "demos/examples_and_demos/image_segmentation_with_ivy_unet", "demos/examples_and_demos/lstm_demo", "demos/examples_and_demos/mmpretrain_to_jax", "demos/examples_and_demos/resnet_demo", "demos/examples_and_demos/torch_to_jax", "demos/examples_and_demos/xgboost_demo", "demos/guides", "demos/guides/01_transpiling_a_torch_model", "demos/guides/02_transpiling_a_haiku_model", "demos/guides/03_transpiling_a_tf_model", "demos/guides/04_developing_a_convnet_with_ivy", "demos/index", "demos/learn_the_basics", "demos/learn_the_basics/01_write_ivy_code", "demos/learn_the_basics/02_unify_code", "demos/learn_the_basics/03_trace_code", "demos/learn_the_basics/04_transpile_code", "demos/learn_the_basics/05_lazy_vs_eager", "demos/learn_the_basics/06_how_to_use_decorators", "demos/learn_the_basics/07_transpile_any_library", "demos/learn_the_basics/08_transpile_any_model", "demos/learn_the_basics/09_write_a_model_using_ivy", "demos/misc/odsc", "demos/quickstart", "demos/wip/0_building_blocks/0_0_unify", "demos/wip/0_building_blocks/0_1_compile", "demos/wip/0_building_blocks/0_2_transpile", "demos/wip/1_the_basics/1_0_lazy_vs_eager", "demos/wip/1_the_basics/1_1_framework_selection", "demos/wip/1_the_basics/1_2_as_a_decorator", "demos/wip/1_the_basics/1_3_dynamic_vs_static", "demos/wip/2_libraries/2_0_kornia", "demos/wip/3_models/3_0_perceiver", "demos/wip/3_models/3_1_stable_diffusion", "demos/wip/basic_operations_with_ivy", "demos/wip/compilation_of_a_basic_function", "demos/wip/deepmind_perceiver_io", "demos/wip/deepmind_perceiverio", "demos/wip/end_to_end_training_pipeline_in_ivy", "demos/wip/hf_tensorflow_deit", "demos/wip/ivy_as_a_transpiler_intro", "demos/wip/resnet_18", "docs/data_classes/data_classes/array/ivy.data_classes.array.activations", "docs/data_classes/data_classes/array/ivy.data_classes.array.conversions", "docs/data_classes/data_classes/array/ivy.data_classes.array.creation", "docs/data_classes/data_classes/array/ivy.data_classes.array.data_type", "docs/data_classes/data_classes/array/ivy.data_classes.array.device", "docs/data_classes/data_classes/array/ivy.data_classes.array.elementwise", "docs/data_classes/data_classes/array/ivy.data_classes.array.experimental", "docs/data_classes/data_classes/array/ivy.data_classes.array.general", "docs/data_classes/data_classes/array/ivy.data_classes.array.gradients", "docs/data_classes/data_classes/array/ivy.data_classes.array.image", "docs/data_classes/data_classes/array/ivy.data_classes.array.layers", "docs/data_classes/data_classes/array/ivy.data_classes.array.linear_algebra", "docs/data_classes/data_classes/array/ivy.data_classes.array.losses", "docs/data_classes/data_classes/array/ivy.data_classes.array.manipulation", "docs/data_classes/data_classes/array/ivy.data_classes.array.norms", "docs/data_classes/data_classes/array/ivy.data_classes.array.random", "docs/data_classes/data_classes/array/ivy.data_classes.array.searching", "docs/data_classes/data_classes/array/ivy.data_classes.array.set", "docs/data_classes/data_classes/array/ivy.data_classes.array.sorting", "docs/data_classes/data_classes/array/ivy.data_classes.array.statistical", "docs/data_classes/data_classes/array/ivy.data_classes.array.utility", "docs/data_classes/data_classes/array/ivy.data_classes.array.wrapping", "docs/data_classes/data_classes/container/ivy.data_classes.container.activations", "docs/data_classes/data_classes/container/ivy.data_classes.container.base", "docs/data_classes/data_classes/container/ivy.data_classes.container.conversions", "docs/data_classes/data_classes/container/ivy.data_classes.container.creation", "docs/data_classes/data_classes/container/ivy.data_classes.container.data_type", "docs/data_classes/data_classes/container/ivy.data_classes.container.device", "docs/data_classes/data_classes/container/ivy.data_classes.container.elementwise", "docs/data_classes/data_classes/container/ivy.data_classes.container.experimental", "docs/data_classes/data_classes/container/ivy.data_classes.container.general", "docs/data_classes/data_classes/container/ivy.data_classes.container.gradients", "docs/data_classes/data_classes/container/ivy.data_classes.container.image", "docs/data_classes/data_classes/container/ivy.data_classes.container.layers", "docs/data_classes/data_classes/container/ivy.data_classes.container.linear_algebra", "docs/data_classes/data_classes/container/ivy.data_classes.container.losses", "docs/data_classes/data_classes/container/ivy.data_classes.container.manipulation", "docs/data_classes/data_classes/container/ivy.data_classes.container.norms", "docs/data_classes/data_classes/container/ivy.data_classes.container.random", "docs/data_classes/data_classes/container/ivy.data_classes.container.searching", "docs/data_classes/data_classes/container/ivy.data_classes.container.set", "docs/data_classes/data_classes/container/ivy.data_classes.container.sorting", "docs/data_classes/data_classes/container/ivy.data_classes.container.statistical", "docs/data_classes/data_classes/container/ivy.data_classes.container.utility", "docs/data_classes/data_classes/container/ivy.data_classes.container.wrapping", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.base", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.cp_tensor", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.parafac2_tensor", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.tr_tensor", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.tt_tensor", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.tucker_tensor", "docs/data_classes/data_classes/ivy.data_classes.array", "docs/data_classes/data_classes/ivy.data_classes.container", "docs/data_classes/data_classes/ivy.data_classes.factorized_tensor", "docs/data_classes/data_classes/ivy.data_classes.nested_array", "docs/data_classes/data_classes/nested_array/ivy.data_classes.nested_array.base", "docs/data_classes/data_classes/nested_array/ivy.data_classes.nested_array.elementwise", "docs/data_classes/ivy.data_classes", "docs/functional/ivy.functional.ivy", "docs/functional/ivy/activations/ivy.functional.ivy.activations.gelu", "docs/functional/ivy/activations/ivy.functional.ivy.activations.hardswish", "docs/functional/ivy/activations/ivy.functional.ivy.activations.leaky_relu", "docs/functional/ivy/activations/ivy.functional.ivy.activations.log_softmax", "docs/functional/ivy/activations/ivy.functional.ivy.activations.mish", "docs/functional/ivy/activations/ivy.functional.ivy.activations.relu", "docs/functional/ivy/activations/ivy.functional.ivy.activations.sigmoid", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softmax", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softplus", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softsign", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.cmp_is", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.cmp_isnot", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.for_loop", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.if_else", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.try_except", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.while_loop", "docs/functional/ivy/creation/ivy.functional.ivy.creation.arange", "docs/functional/ivy/creation/ivy.functional.ivy.creation.array", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray", "docs/functional/ivy/creation/ivy.functional.ivy.creation.copy_array", "docs/functional/ivy/creation/ivy.functional.ivy.creation.empty", "docs/functional/ivy/creation/ivy.functional.ivy.creation.empty_like", "docs/functional/ivy/creation/ivy.functional.ivy.creation.eye", "docs/functional/ivy/creation/ivy.functional.ivy.creation.from_dlpack", "docs/functional/ivy/creation/ivy.functional.ivy.creation.frombuffer", "docs/functional/ivy/creation/ivy.functional.ivy.creation.full", "docs/functional/ivy/creation/ivy.functional.ivy.creation.full_like", "docs/functional/ivy/creation/ivy.functional.ivy.creation.linspace", "docs/functional/ivy/creation/ivy.functional.ivy.creation.logspace", "docs/functional/ivy/creation/ivy.functional.ivy.creation.meshgrid", "docs/functional/ivy/creation/ivy.functional.ivy.creation.native_array", "docs/functional/ivy/creation/ivy.functional.ivy.creation.one_hot", "docs/functional/ivy/creation/ivy.functional.ivy.creation.ones", "docs/functional/ivy/creation/ivy.functional.ivy.creation.ones_like", "docs/functional/ivy/creation/ivy.functional.ivy.creation.to_dlpack", "docs/functional/ivy/creation/ivy.functional.ivy.creation.tril", "docs/functional/ivy/creation/ivy.functional.ivy.creation.triu", "docs/functional/ivy/creation/ivy.functional.ivy.creation.triu_indices", "docs/functional/ivy/creation/ivy.functional.ivy.creation.zeros", "docs/functional/ivy/creation/ivy.functional.ivy.creation.zeros_like", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.as_ivy_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.as_native_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.astype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.broadcast_arrays", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.broadcast_to", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.can_cast", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.check_float", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.closest_valid_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_complex_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_float_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_int_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_uint_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.dtype_bits", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.finfo", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.function_supported_dtypes", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.function_unsupported_dtypes", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.iinfo", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.infer_default_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.invalid_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_bool_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_complex_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_float_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_hashable_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_int_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_native_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_uint_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.promote_types", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.promote_types_of_inputs", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.result_type", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_complex_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_float_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_int_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_uint_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.type_promote_arrays", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_complex_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_float_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_int_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_uint_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.valid_dtype", "docs/functional/ivy/device/ivy.functional.ivy.device.as_ivy_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.as_native_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.clear_cached_mem_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.default_device", "docs/functional/ivy/device/ivy.functional.ivy.device.dev", "docs/functional/ivy/device/ivy.functional.ivy.device.dev_util", "docs/functional/ivy/device/ivy.functional.ivy.device.function_supported_devices", "docs/functional/ivy/device/ivy.functional.ivy.device.function_unsupported_devices", "docs/functional/ivy/device/ivy.functional.ivy.device.get_all_ivy_arrays_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.gpu_is_available", "docs/functional/ivy/device/ivy.functional.ivy.device.handle_soft_device_variable", "docs/functional/ivy/device/ivy.functional.ivy.device.num_cpu_cores", "docs/functional/ivy/device/ivy.functional.ivy.device.num_gpus", "docs/functional/ivy/device/ivy.functional.ivy.device.num_ivy_arrays_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.percent_used_mem_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.print_all_ivy_arrays_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.set_default_device", "docs/functional/ivy/device/ivy.functional.ivy.device.set_soft_device_mode", "docs/functional/ivy/device/ivy.functional.ivy.device.set_split_factor", "docs/functional/ivy/device/ivy.functional.ivy.device.split_factor", "docs/functional/ivy/device/ivy.functional.ivy.device.split_func_call", "docs/functional/ivy/device/ivy.functional.ivy.device.to_device", "docs/functional/ivy/device/ivy.functional.ivy.device.total_mem_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.tpu_is_available", "docs/functional/ivy/device/ivy.functional.ivy.device.unset_default_device", "docs/functional/ivy/device/ivy.functional.ivy.device.unset_soft_device_mode", "docs/functional/ivy/device/ivy.functional.ivy.device.used_mem_on_dev", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.abs", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.acos", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.acosh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.add", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.angle", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.asin", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.asinh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atan", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atan2", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atanh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_and", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_invert", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_left_shift", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_or", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_right_shift", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_xor", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.ceil", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.cos", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.cosh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.deg2rad", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.divide", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.equal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.erf", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.exp", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.exp2", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.expm1", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.floor", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.floor_divide", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.fmin", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.fmod", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.gcd", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.greater", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.greater_equal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.imag", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isfinite", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isinf", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isnan", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isreal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.lcm", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.less", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.less_equal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log10", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log1p", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log2", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logaddexp", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logaddexp2", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_and", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_not", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_or", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_xor", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.maximum", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.minimum", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.multiply", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.nan_to_num", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.negative", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.not_equal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.positive", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.pow", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.rad2deg", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.real", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.reciprocal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.remainder", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.round", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sign", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sin", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sinh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sqrt", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.square", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.subtract", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.tan", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.tanh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trapz", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trunc", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trunc_divide", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.celu", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.elu", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.hardshrink", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.hardsilu", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.hardtanh", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.logit", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.logsigmoid", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.prelu", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.relu6", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.scaled_tanh", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.selu", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.silu", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.softshrink", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.stanh", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.tanhshrink", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.threshold", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.thresholded_relu", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.blackman_window", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.eye_like", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.hamming_window", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.hann_window", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.indices", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.kaiser_bessel_derived_window", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.kaiser_window", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.mel_weight_matrix", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.ndenumerate", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.ndindex", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.polyval", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_cp", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_parafac2", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_tr", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_tt", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_tucker", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.tril_indices", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.trilu", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.unsorted_segment_mean", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.unsorted_segment_min", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.unsorted_segment_sum", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.vorbis_window", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.allclose", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.amax", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.amin", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.binarizer", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.conj", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.copysign", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.count_nonzero", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.diff", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.digamma", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.erfc", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.erfinv", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.fix", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.float_power", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.fmax", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.frexp", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.gradient", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.hypot", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.isclose", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.ldexp", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.lerp", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.lgamma", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.modf", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.nansum", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.nextafter", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.signbit", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.sinc", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.sparsify_tensor", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.xlogy", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.zeta", "docs/functional/ivy/experimental/general/ivy.functional.ivy.experimental.general.reduce", "docs/functional/ivy/experimental/gradients/ivy.functional.ivy.experimental.gradients.bind_custom_gradient_function", "docs/functional/ivy/experimental/gradients/ivy.functional.ivy.experimental.gradients.jvp", "docs/functional/ivy/experimental/gradients/ivy.functional.ivy.experimental.gradients.vjp", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.activations", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.constants", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.creation", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.data_type", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.device", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.elementwise", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.general", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.gradients", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.layers", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.linear_algebra", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.losses", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.manipulation", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.meta", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.nest", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.norms", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.random", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.searching", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.set", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.sorting", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.sparse_array", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.statistical", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.utility", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_avg_pool1d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_avg_pool2d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_max_pool2d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_max_pool3d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.area_interpolate", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool1d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool2d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool3d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dct", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dft", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout1d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout2d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout3d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.embedding", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.fft", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.fft2", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.generate_einsum_equation", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.get_interpolate_kernel", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.idct", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.ifft", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.ifftn", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.interp", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.interpolate", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool1d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool2d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool3d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_unpool1d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.nearest_interpolate", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.pool", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.reduce_window", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.rfft", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.rfftn", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.rnn", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.sliding_window", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.stft", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.adjoint", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.batched_outer", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.cond", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.diagflat", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.dot", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eig", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eigh_tridiagonal", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eigvals", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.general_inner_product", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.higher_order_moment", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.initialize_tucker", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.khatri_rao", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.kron", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.kronecker", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.lu_factor", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.lu_solve", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.make_svd_non_negative", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.matrix_exp", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.mode_dot", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.multi_dot", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.multi_mode_dot", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.partial_tucker", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.solve_triangular", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.svd_flip", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.tensor_train", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.truncated_svd", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.tt_matrix_to_tensor", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.tucker", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.hinge_embedding_loss", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.huber_loss", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.kl_div", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.l1_loss", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.log_poisson_loss", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.poisson_nll_loss", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.smooth_l1_loss", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.soft_margin_loss", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.as_strided", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.associative_scan", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_1d", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_2d", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_3d", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.broadcast_shapes", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.check_scalar", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.choose", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.column_stack", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.concat_from_sequence", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.dsplit", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.dstack", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.expand", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fill_diagonal", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.flatten", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fliplr", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.flipud", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fold", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.heaviside", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.hsplit", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.hstack", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.i0", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.matricize", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.moveaxis", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.pad", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_fold", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_tensor_to_vec", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_unfold", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_vec_to_tensor", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.put_along_axis", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.rot90", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.soft_thresholding", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.take", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.take_along_axis", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.top_k", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.trim_zeros", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.unflatten", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.unfold", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.unique_consecutive", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.vsplit", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.vstack", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.batch_norm", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.group_norm", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.instance_norm", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.l1_normalize", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.l2_normalize", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.local_response_norm", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.lp_normalize", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.bernoulli", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.beta", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.dirichlet", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.gamma", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.poisson", "docs/functional/ivy/experimental/searching/ivy.functional.ivy.experimental.searching.unravel_index", "docs/functional/ivy/experimental/sorting/ivy.functional.ivy.experimental.sorting.invert_permutation", "docs/functional/ivy/experimental/sorting/ivy.functional.ivy.experimental.sorting.lexsort", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.is_ivy_sparse_array", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.is_native_sparse_array", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.native_sparse_array", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.native_sparse_array_to_indices_values_and_shape", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.bincount", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.corrcoef", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cov", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cummax", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cummin", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.histogram", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.igamma", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.median", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanmean", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanmedian", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanmin", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanprod", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.quantile", "docs/functional/ivy/experimental/utility/ivy.functional.ivy.experimental.utility.optional_get_element", "docs/functional/ivy/general/ivy.functional.ivy.general.all_equal", "docs/functional/ivy/general/ivy.functional.ivy.general.arg_info", "docs/functional/ivy/general/ivy.functional.ivy.general.arg_names", "docs/functional/ivy/general/ivy.functional.ivy.general.array_equal", "docs/functional/ivy/general/ivy.functional.ivy.general.assert_supports_inplace", "docs/functional/ivy/general/ivy.functional.ivy.general.cache_fn", "docs/functional/ivy/general/ivy.functional.ivy.general.clip_matrix_norm", "docs/functional/ivy/general/ivy.functional.ivy.general.clip_vector_norm", "docs/functional/ivy/general/ivy.functional.ivy.general.container_types", "docs/functional/ivy/general/ivy.functional.ivy.general.current_backend_str", "docs/functional/ivy/general/ivy.functional.ivy.general.default", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_rearrange", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_reduce", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_repeat", "docs/functional/ivy/general/ivy.functional.ivy.general.exists", "docs/functional/ivy/general/ivy.functional.ivy.general.fourier_encode", "docs/functional/ivy/general/ivy.functional.ivy.general.function_supported_devices_and_dtypes", "docs/functional/ivy/general/ivy.functional.ivy.general.function_unsupported_devices_and_dtypes", "docs/functional/ivy/general/ivy.functional.ivy.general.gather", "docs/functional/ivy/general/ivy.functional.ivy.general.gather_nd", "docs/functional/ivy/general/ivy.functional.ivy.general.get_all_arrays_in_memory", "docs/functional/ivy/general/ivy.functional.ivy.general.get_item", "docs/functional/ivy/general/ivy.functional.ivy.general.get_num_dims", "docs/functional/ivy/general/ivy.functional.ivy.general.get_referrers_recursive", "docs/functional/ivy/general/ivy.functional.ivy.general.has_nans", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_arrays_supported", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_decrement", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_increment", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_update", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_variables_supported", "docs/functional/ivy/general/ivy.functional.ivy.general.is_array", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_array", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_container", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_nested_array", "docs/functional/ivy/general/ivy.functional.ivy.general.is_native_array", "docs/functional/ivy/general/ivy.functional.ivy.general.isin", "docs/functional/ivy/general/ivy.functional.ivy.general.isscalar", "docs/functional/ivy/general/ivy.functional.ivy.general.itemsize", "docs/functional/ivy/general/ivy.functional.ivy.general.match_kwargs", "docs/functional/ivy/general/ivy.functional.ivy.general.multiprocessing", "docs/functional/ivy/general/ivy.functional.ivy.general.num_arrays_in_memory", "docs/functional/ivy/general/ivy.functional.ivy.general.print_all_arrays_in_memory", "docs/functional/ivy/general/ivy.functional.ivy.general.scatter_flat", "docs/functional/ivy/general/ivy.functional.ivy.general.scatter_nd", "docs/functional/ivy/general/ivy.functional.ivy.general.set_array_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_exception_trace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_inplace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_item", "docs/functional/ivy/general/ivy.functional.ivy.general.set_min_base", "docs/functional/ivy/general/ivy.functional.ivy.general.set_min_denominator", "docs/functional/ivy/general/ivy.functional.ivy.general.set_nestable_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_precise_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_queue_timeout", "docs/functional/ivy/general/ivy.functional.ivy.general.set_shape_array_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_show_func_wrapper_trace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_tmp_dir", "docs/functional/ivy/general/ivy.functional.ivy.general.shape", "docs/functional/ivy/general/ivy.functional.ivy.general.size", "docs/functional/ivy/general/ivy.functional.ivy.general.stable_divide", "docs/functional/ivy/general/ivy.functional.ivy.general.stable_pow", "docs/functional/ivy/general/ivy.functional.ivy.general.strides", "docs/functional/ivy/general/ivy.functional.ivy.general.supports_inplace_updates", "docs/functional/ivy/general/ivy.functional.ivy.general.to_ivy_shape", "docs/functional/ivy/general/ivy.functional.ivy.general.to_list", "docs/functional/ivy/general/ivy.functional.ivy.general.to_native_shape", "docs/functional/ivy/general/ivy.functional.ivy.general.to_numpy", "docs/functional/ivy/general/ivy.functional.ivy.general.to_scalar", "docs/functional/ivy/general/ivy.functional.ivy.general.try_else_none", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_array_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_exception_trace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_inplace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_min_base", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_min_denominator", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_nestable_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_precise_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_queue_timeout", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_shape_array_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_show_func_wrapper_trace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_tmp_dir", "docs/functional/ivy/general/ivy.functional.ivy.general.value_is_nan", "docs/functional/ivy/general/ivy.functional.ivy.general.vmap", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.adam_step", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.adam_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.execute_with_gradients", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.grad", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.gradient_descent_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.jac", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.lamb_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.lars_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.optimizer_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.stop_gradient", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.value_and_grad", "docs/functional/ivy/ivy.functional.ivy.activations", "docs/functional/ivy/ivy.functional.ivy.constants", "docs/functional/ivy/ivy.functional.ivy.control_flow_ops", "docs/functional/ivy/ivy.functional.ivy.creation", "docs/functional/ivy/ivy.functional.ivy.data_type", "docs/functional/ivy/ivy.functional.ivy.device", "docs/functional/ivy/ivy.functional.ivy.elementwise", "docs/functional/ivy/ivy.functional.ivy.experimental", "docs/functional/ivy/ivy.functional.ivy.general", "docs/functional/ivy/ivy.functional.ivy.gradients", "docs/functional/ivy/ivy.functional.ivy.layers", "docs/functional/ivy/ivy.functional.ivy.linear_algebra", "docs/functional/ivy/ivy.functional.ivy.losses", "docs/functional/ivy/ivy.functional.ivy.manipulation", "docs/functional/ivy/ivy.functional.ivy.meta", "docs/functional/ivy/ivy.functional.ivy.nest", "docs/functional/ivy/ivy.functional.ivy.norms", "docs/functional/ivy/ivy.functional.ivy.random", "docs/functional/ivy/ivy.functional.ivy.searching", "docs/functional/ivy/ivy.functional.ivy.set", "docs/functional/ivy/ivy.functional.ivy.sorting", "docs/functional/ivy/ivy.functional.ivy.statistical", "docs/functional/ivy/ivy.functional.ivy.utility", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv1d", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv1d_transpose", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv2d", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv2d_transpose", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv3d", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv3d_transpose", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv_general_dilated", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv_general_transpose", "docs/functional/ivy/layers/ivy.functional.ivy.layers.depthwise_conv2d", "docs/functional/ivy/layers/ivy.functional.ivy.layers.dropout", "docs/functional/ivy/layers/ivy.functional.ivy.layers.linear", "docs/functional/ivy/layers/ivy.functional.ivy.layers.lstm", "docs/functional/ivy/layers/ivy.functional.ivy.layers.lstm_update", "docs/functional/ivy/layers/ivy.functional.ivy.layers.multi_head_attention", "docs/functional/ivy/layers/ivy.functional.ivy.layers.nms", "docs/functional/ivy/layers/ivy.functional.ivy.layers.roi_align", "docs/functional/ivy/layers/ivy.functional.ivy.layers.scaled_dot_product_attention", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.cholesky", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.cross", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.det", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.diag", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.diagonal", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eig", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eigh", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eigvalsh", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.inner", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.inv", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matmul", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_norm", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_power", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_rank", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_transpose", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.outer", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.pinv", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.qr", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.slogdet", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.solve", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.svd", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.svdvals", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.tensordot", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.tensorsolve", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.trace", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vander", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vecdot", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vector_norm", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vector_to_skew_symmetric_matrix", "docs/functional/ivy/losses/ivy.functional.ivy.losses.binary_cross_entropy", "docs/functional/ivy/losses/ivy.functional.ivy.losses.cross_entropy", "docs/functional/ivy/losses/ivy.functional.ivy.losses.sparse_cross_entropy", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.clip", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.concat", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.constant_pad", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.expand_dims", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.flip", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.permute_dims", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.repeat", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.reshape", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.roll", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.split", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.squeeze", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.stack", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.swapaxes", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.tile", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.unstack", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.zero_pad", "docs/functional/ivy/meta/ivy.functional.ivy.meta.fomaml_step", "docs/functional/ivy/meta/ivy.functional.ivy.meta.maml_step", "docs/functional/ivy/meta/ivy.functional.ivy.meta.reptile_step", "docs/functional/ivy/nest/ivy.functional.ivy.nest.all_nested_indices", "docs/functional/ivy/nest/ivy.functional.ivy.nest.copy_nest", "docs/functional/ivy/nest/ivy.functional.ivy.nest.duplicate_array_index_chains", "docs/functional/ivy/nest/ivy.functional.ivy.nest.index_nest", "docs/functional/ivy/nest/ivy.functional.ivy.nest.insert_into_nest_at_index", "docs/functional/ivy/nest/ivy.functional.ivy.nest.insert_into_nest_at_indices", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map_nest_at_index", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map_nest_at_indices", "docs/functional/ivy/nest/ivy.functional.ivy.nest.multi_index_nest", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_any", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_argwhere", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_map", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_multi_map", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_empty", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_nest_at_index", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_nest_at_indices", "docs/functional/ivy/nest/ivy.functional.ivy.nest.set_nest_at_index", "docs/functional/ivy/nest/ivy.functional.ivy.nest.set_nest_at_indices", "docs/functional/ivy/norms/ivy.functional.ivy.norms.layer_norm", "docs/functional/ivy/random/ivy.functional.ivy.random.multinomial", "docs/functional/ivy/random/ivy.functional.ivy.random.randint", "docs/functional/ivy/random/ivy.functional.ivy.random.random_normal", "docs/functional/ivy/random/ivy.functional.ivy.random.random_uniform", "docs/functional/ivy/random/ivy.functional.ivy.random.seed", "docs/functional/ivy/random/ivy.functional.ivy.random.shuffle", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argmax", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argmin", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argwhere", "docs/functional/ivy/searching/ivy.functional.ivy.searching.nonzero", "docs/functional/ivy/searching/ivy.functional.ivy.searching.where", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_all", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_counts", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_inverse", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_values", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.argsort", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.msort", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.searchsorted", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.sort", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.cumprod", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.cumsum", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.einsum", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.max", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.mean", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.min", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.prod", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.std", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.sum", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.var", "docs/functional/ivy/utility/ivy.functional.ivy.utility.all", "docs/functional/ivy/utility/ivy.functional.ivy.utility.any", "docs/functional/ivy/utility/ivy.functional.ivy.utility.load", "docs/functional/ivy/utility/ivy.functional.ivy.utility.save", "docs/helpers/ivy_tests.test_ivy.helpers.assertions", "docs/helpers/ivy_tests.test_ivy.helpers.available_frameworks", "docs/helpers/ivy_tests.test_ivy.helpers.function_testing", "docs/helpers/ivy_tests.test_ivy.helpers.globals", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers", "docs/helpers/ivy_tests.test_ivy.helpers.multiprocessing", "docs/helpers/ivy_tests.test_ivy.helpers.pipeline_helper", "docs/helpers/ivy_tests.test_ivy.helpers.structs", "docs/helpers/ivy_tests.test_ivy.helpers.test_parameter_flags", "docs/helpers/ivy_tests.test_ivy.helpers.testing_helpers", "docs/ivy.stateful", "docs/ivy.utils", "docs/ivy_tests.test_ivy.helpers", "docs/stateful/ivy.stateful.activations", "docs/stateful/ivy.stateful.converters", "docs/stateful/ivy.stateful.helpers", "docs/stateful/ivy.stateful.initializers", "docs/stateful/ivy.stateful.layers", "docs/stateful/ivy.stateful.losses", "docs/stateful/ivy.stateful.module", "docs/stateful/ivy.stateful.norms", "docs/stateful/ivy.stateful.optimizers", "docs/stateful/ivy.stateful.sequential", "docs/utils/ivy.utils.assertions", "docs/utils/ivy.utils.backend", "docs/utils/ivy.utils.backend/ivy.utils.backend.ast_helpers", "docs/utils/ivy.utils.backend/ivy.utils.backend.handler", "docs/utils/ivy.utils.backend/ivy.utils.backend.sub_backend_handler", "docs/utils/ivy.utils.binaries", "docs/utils/ivy.utils.dynamic_import", "docs/utils/ivy.utils.einsum_parser", "docs/utils/ivy.utils.einsum_path_helpers", "docs/utils/ivy.utils.exceptions", "docs/utils/ivy.utils.inspection", "docs/utils/ivy.utils.logging", "docs/utils/ivy.utils.profiler", "docs/utils/ivy.utils.verbosity", "index", "overview/contributing", "overview/contributing/building_the_docs", "overview/contributing/contributor_rewards", "overview/contributing/error_handling", "overview/contributing/helpful_resources", "overview/contributing/open_tasks", "overview/contributing/setting_up", "overview/contributing/the_basics", "overview/contributing/volunteer_program", "overview/deep_dive", "overview/deep_dive/array_api_tests", "overview/deep_dive/arrays", "overview/deep_dive/backend_setting", "overview/deep_dive/building_the_docs_pipeline", "overview/deep_dive/containers", "overview/deep_dive/continuous_integration", "overview/deep_dive/data_types", "overview/deep_dive/devices", "overview/deep_dive/docstring_examples", "overview/deep_dive/docstrings", "overview/deep_dive/exception_handling", "overview/deep_dive/fix_failing_tests", "overview/deep_dive/formatting", "overview/deep_dive/function_arguments", "overview/deep_dive/function_types", "overview/deep_dive/function_wrapping", "overview/deep_dive/gradients", "overview/deep_dive/inplace_updates", "overview/deep_dive/ivy_frontends", "overview/deep_dive/ivy_frontends_tests", "overview/deep_dive/ivy_lint", "overview/deep_dive/ivy_tests", "overview/deep_dive/navigating_the_code", "overview/deep_dive/operating_modes", "overview/deep_dive/superset_behaviour", "overview/design", "overview/design/building_blocks", "overview/design/ivy_as_a_framework", "overview/design/ivy_as_a_framework/ivy_array", "overview/design/ivy_as_a_framework/ivy_container", "overview/design/ivy_as_a_framework/ivy_stateful_api", "overview/design/ivy_as_a_transpiler", "overview/faq", "overview/get_started", "overview/glossary", "overview/motivation", "overview/motivation/ml_explosion", "overview/motivation/standardization", "overview/motivation/why_unify", "overview/one_liners", "overview/one_liners/trace", "overview/one_liners/transpile", "overview/one_liners/unify", "overview/related_work", "overview/related_work/api_standards", "overview/related_work/compiler_infrastructure", "overview/related_work/exchange_formats", "overview/related_work/frameworks", "overview/related_work/graph_tracers", "overview/related_work/ml_unifying_companies", "overview/related_work/multi_vendor_compiler_frameworks", "overview/related_work/vendor_specific_apis", "overview/related_work/vendor_specific_compilers", "overview/related_work/what_does_ivy_add", "overview/related_work/wrapper_frameworks", "overview/volunteer_ranks"], "filenames": ["demos/README.md", "demos/assets/01_template.ipynb", "demos/examples_and_demos.rst", "demos/examples_and_demos/alexnet_demo.ipynb", "demos/examples_and_demos/bert_demo.ipynb", "demos/examples_and_demos/image_segmentation_with_ivy_unet.ipynb", "demos/examples_and_demos/lstm_demo.ipynb", "demos/examples_and_demos/mmpretrain_to_jax.ipynb", "demos/examples_and_demos/resnet_demo.ipynb", "demos/examples_and_demos/torch_to_jax.ipynb", "demos/examples_and_demos/xgboost_demo.ipynb", "demos/guides.rst", "demos/guides/01_transpiling_a_torch_model.ipynb", "demos/guides/02_transpiling_a_haiku_model.ipynb", "demos/guides/03_transpiling_a_tf_model.ipynb", "demos/guides/04_developing_a_convnet_with_ivy.ipynb", "demos/index.rst", "demos/learn_the_basics.rst", "demos/learn_the_basics/01_write_ivy_code.ipynb", "demos/learn_the_basics/02_unify_code.ipynb", "demos/learn_the_basics/03_trace_code.ipynb", "demos/learn_the_basics/04_transpile_code.ipynb", "demos/learn_the_basics/05_lazy_vs_eager.ipynb", "demos/learn_the_basics/06_how_to_use_decorators.ipynb", "demos/learn_the_basics/07_transpile_any_library.ipynb", "demos/learn_the_basics/08_transpile_any_model.ipynb", "demos/learn_the_basics/09_write_a_model_using_ivy.ipynb", "demos/misc/odsc.ipynb", "demos/quickstart.ipynb", "demos/wip/0_building_blocks/0_0_unify.ipynb", "demos/wip/0_building_blocks/0_1_compile.ipynb", "demos/wip/0_building_blocks/0_2_transpile.ipynb", "demos/wip/1_the_basics/1_0_lazy_vs_eager.ipynb", "demos/wip/1_the_basics/1_1_framework_selection.ipynb", "demos/wip/1_the_basics/1_2_as_a_decorator.ipynb", "demos/wip/1_the_basics/1_3_dynamic_vs_static.ipynb", "demos/wip/2_libraries/2_0_kornia.ipynb", "demos/wip/3_models/3_0_perceiver.ipynb", "demos/wip/3_models/3_1_stable_diffusion.ipynb", "demos/wip/basic_operations_with_ivy.ipynb", "demos/wip/compilation_of_a_basic_function.ipynb", "demos/wip/deepmind_perceiver_io.ipynb", "demos/wip/deepmind_perceiverio.ipynb", "demos/wip/end_to_end_training_pipeline_in_ivy.ipynb", "demos/wip/hf_tensorflow_deit.ipynb", "demos/wip/ivy_as_a_transpiler_intro.ipynb", "demos/wip/resnet_18.ipynb", "docs/data_classes/data_classes/array/ivy.data_classes.array.activations.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.conversions.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.creation.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.data_type.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.device.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.elementwise.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.experimental.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.general.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.gradients.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.image.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.layers.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.linear_algebra.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.losses.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.manipulation.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.norms.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.random.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.searching.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.set.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.sorting.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.statistical.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.utility.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.wrapping.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.activations.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.base.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.conversions.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.creation.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.data_type.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.device.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.elementwise.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.experimental.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.general.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.gradients.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.image.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.layers.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.linear_algebra.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.losses.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.manipulation.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.norms.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.random.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.searching.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.set.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.sorting.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.statistical.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.utility.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.wrapping.rst", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.base.rst", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.cp_tensor.rst", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.parafac2_tensor.rst", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.tr_tensor.rst", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.tt_tensor.rst", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.tucker_tensor.rst", "docs/data_classes/data_classes/ivy.data_classes.array.rst", "docs/data_classes/data_classes/ivy.data_classes.container.rst", "docs/data_classes/data_classes/ivy.data_classes.factorized_tensor.rst", "docs/data_classes/data_classes/ivy.data_classes.nested_array.rst", "docs/data_classes/data_classes/nested_array/ivy.data_classes.nested_array.base.rst", "docs/data_classes/data_classes/nested_array/ivy.data_classes.nested_array.elementwise.rst", "docs/data_classes/ivy.data_classes.rst", "docs/functional/ivy.functional.ivy.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.gelu.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.hardswish.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.leaky_relu.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.log_softmax.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.mish.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.relu.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.sigmoid.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softmax.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softplus.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softsign.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.cmp_is.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.cmp_isnot.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.for_loop.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.if_else.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.try_except.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.while_loop.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.arange.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.array.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.copy_array.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.empty.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.empty_like.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.eye.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.from_dlpack.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.frombuffer.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.full.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.full_like.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.linspace.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.logspace.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.meshgrid.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.native_array.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.one_hot.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.ones.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.ones_like.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.to_dlpack.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.tril.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.triu.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.triu_indices.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.zeros.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.zeros_like.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.as_ivy_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.as_native_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.astype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.broadcast_arrays.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.broadcast_to.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.can_cast.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.check_float.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.closest_valid_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_complex_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_float_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_int_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_uint_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.dtype_bits.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.finfo.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.function_supported_dtypes.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.function_unsupported_dtypes.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.iinfo.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.infer_default_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.invalid_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_bool_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_complex_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_float_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_hashable_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_int_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_native_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_uint_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.promote_types.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.promote_types_of_inputs.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.result_type.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_complex_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_float_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_int_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_uint_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.type_promote_arrays.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_complex_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_float_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_int_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_uint_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.valid_dtype.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.as_ivy_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.as_native_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.clear_cached_mem_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.default_device.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.dev_util.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.function_supported_devices.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.function_unsupported_devices.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.get_all_ivy_arrays_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.gpu_is_available.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.handle_soft_device_variable.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.num_cpu_cores.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.num_gpus.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.num_ivy_arrays_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.percent_used_mem_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.print_all_ivy_arrays_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.set_default_device.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.set_soft_device_mode.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.set_split_factor.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.split_factor.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.split_func_call.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.to_device.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.total_mem_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.tpu_is_available.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.unset_default_device.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.unset_soft_device_mode.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.used_mem_on_dev.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.abs.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.acos.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.acosh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.add.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.angle.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.asin.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.asinh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atan.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atan2.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atanh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_and.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_invert.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_left_shift.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_or.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_right_shift.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_xor.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.ceil.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.cos.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.cosh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.deg2rad.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.divide.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.equal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.erf.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.exp.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.exp2.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.expm1.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.floor.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.floor_divide.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.fmin.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.fmod.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.gcd.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.greater.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.greater_equal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.imag.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isfinite.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isinf.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isnan.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isreal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.lcm.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.less.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.less_equal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log10.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log1p.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log2.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logaddexp.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logaddexp2.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_and.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_not.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_or.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_xor.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.maximum.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.minimum.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.multiply.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.nan_to_num.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.negative.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.not_equal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.positive.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.pow.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.rad2deg.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.real.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.reciprocal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.remainder.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.round.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sign.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sin.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sinh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sqrt.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.square.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.subtract.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.tan.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.tanh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trapz.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trunc.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trunc_divide.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.celu.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.elu.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.hardshrink.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.hardsilu.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.hardtanh.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.logit.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.logsigmoid.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.prelu.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.relu6.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.scaled_tanh.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.selu.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.silu.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.softshrink.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.stanh.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.tanhshrink.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.threshold.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.thresholded_relu.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.blackman_window.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.eye_like.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.hamming_window.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.hann_window.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.indices.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.kaiser_bessel_derived_window.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.kaiser_window.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.mel_weight_matrix.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.ndenumerate.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.ndindex.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.polyval.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_cp.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_parafac2.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_tr.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_tt.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_tucker.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.tril_indices.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.trilu.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.unsorted_segment_mean.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.unsorted_segment_min.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.unsorted_segment_sum.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.vorbis_window.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.allclose.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.amax.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.amin.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.binarizer.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.conj.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.copysign.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.count_nonzero.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.diff.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.digamma.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.erfc.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.erfinv.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.fix.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.float_power.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.fmax.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.frexp.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.gradient.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.hypot.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.isclose.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.ldexp.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.lerp.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.lgamma.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.modf.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.nansum.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.nextafter.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.signbit.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.sinc.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.sparsify_tensor.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.xlogy.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.zeta.rst", "docs/functional/ivy/experimental/general/ivy.functional.ivy.experimental.general.reduce.rst", "docs/functional/ivy/experimental/gradients/ivy.functional.ivy.experimental.gradients.bind_custom_gradient_function.rst", "docs/functional/ivy/experimental/gradients/ivy.functional.ivy.experimental.gradients.jvp.rst", "docs/functional/ivy/experimental/gradients/ivy.functional.ivy.experimental.gradients.vjp.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.activations.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.constants.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.creation.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.data_type.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.device.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.elementwise.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.general.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.gradients.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.layers.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.linear_algebra.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.losses.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.manipulation.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.meta.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.nest.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.norms.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.random.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.searching.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.set.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.sorting.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.sparse_array.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.statistical.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.utility.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_avg_pool1d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_avg_pool2d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_max_pool2d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_max_pool3d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.area_interpolate.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool1d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool2d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool3d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dct.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dft.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout1d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout2d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout3d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.embedding.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.fft.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.fft2.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.generate_einsum_equation.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.get_interpolate_kernel.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.idct.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.ifft.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.ifftn.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.interp.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.interpolate.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool1d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool2d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool3d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_unpool1d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.nearest_interpolate.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.pool.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.reduce_window.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.rfft.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.rfftn.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.rnn.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.sliding_window.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.stft.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.adjoint.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.batched_outer.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.cond.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.diagflat.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.dot.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eig.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eigh_tridiagonal.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eigvals.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.general_inner_product.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.higher_order_moment.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.initialize_tucker.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.khatri_rao.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.kron.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.kronecker.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.lu_factor.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.lu_solve.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.make_svd_non_negative.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.matrix_exp.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.mode_dot.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.multi_dot.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.multi_mode_dot.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.partial_tucker.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.solve_triangular.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.svd_flip.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.tensor_train.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.truncated_svd.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.tt_matrix_to_tensor.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.tucker.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.hinge_embedding_loss.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.huber_loss.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.kl_div.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.l1_loss.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.log_poisson_loss.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.poisson_nll_loss.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.smooth_l1_loss.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.soft_margin_loss.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.as_strided.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.associative_scan.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_1d.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_2d.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_3d.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.broadcast_shapes.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.check_scalar.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.choose.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.column_stack.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.concat_from_sequence.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.dsplit.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.dstack.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.expand.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fill_diagonal.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.flatten.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fliplr.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.flipud.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fold.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.heaviside.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.hsplit.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.hstack.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.i0.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.matricize.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.moveaxis.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.pad.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_fold.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_tensor_to_vec.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_unfold.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_vec_to_tensor.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.put_along_axis.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.rot90.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.soft_thresholding.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.take.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.take_along_axis.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.top_k.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.trim_zeros.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.unflatten.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.unfold.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.unique_consecutive.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.vsplit.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.vstack.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.batch_norm.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.group_norm.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.instance_norm.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.l1_normalize.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.l2_normalize.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.local_response_norm.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.lp_normalize.rst", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.bernoulli.rst", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.beta.rst", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.dirichlet.rst", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.gamma.rst", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.poisson.rst", "docs/functional/ivy/experimental/searching/ivy.functional.ivy.experimental.searching.unravel_index.rst", "docs/functional/ivy/experimental/sorting/ivy.functional.ivy.experimental.sorting.invert_permutation.rst", "docs/functional/ivy/experimental/sorting/ivy.functional.ivy.experimental.sorting.lexsort.rst", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.is_ivy_sparse_array.rst", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.is_native_sparse_array.rst", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.native_sparse_array.rst", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.native_sparse_array_to_indices_values_and_shape.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.bincount.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.corrcoef.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cov.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cummax.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cummin.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.histogram.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.igamma.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.median.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanmean.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanmedian.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanmin.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanprod.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.quantile.rst", "docs/functional/ivy/experimental/utility/ivy.functional.ivy.experimental.utility.optional_get_element.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.all_equal.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.arg_info.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.arg_names.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.array_equal.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.assert_supports_inplace.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.cache_fn.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.clip_matrix_norm.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.clip_vector_norm.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.container_types.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.current_backend_str.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.default.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_rearrange.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_reduce.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_repeat.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.exists.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.fourier_encode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.function_supported_devices_and_dtypes.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.function_unsupported_devices_and_dtypes.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.gather.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.gather_nd.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_all_arrays_in_memory.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_item.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_num_dims.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_referrers_recursive.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.has_nans.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_arrays_supported.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_decrement.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_increment.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_update.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_variables_supported.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_array.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_array.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_container.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_nested_array.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_native_array.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.isin.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.isscalar.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.itemsize.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.match_kwargs.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.multiprocessing.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.num_arrays_in_memory.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.print_all_arrays_in_memory.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.scatter_flat.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.scatter_nd.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_array_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_exception_trace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_inplace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_item.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_min_base.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_min_denominator.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_nestable_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_precise_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_queue_timeout.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_shape_array_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_show_func_wrapper_trace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_tmp_dir.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.shape.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.size.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.stable_divide.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.stable_pow.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.strides.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.supports_inplace_updates.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_ivy_shape.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_list.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_native_shape.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_numpy.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_scalar.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.try_else_none.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_array_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_exception_trace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_inplace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_min_base.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_min_denominator.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_nestable_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_precise_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_queue_timeout.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_shape_array_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_show_func_wrapper_trace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_tmp_dir.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.value_is_nan.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.vmap.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.adam_step.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.adam_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.execute_with_gradients.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.grad.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.gradient_descent_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.jac.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.lamb_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.lars_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.optimizer_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.stop_gradient.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.value_and_grad.rst", "docs/functional/ivy/ivy.functional.ivy.activations.rst", "docs/functional/ivy/ivy.functional.ivy.constants.rst", "docs/functional/ivy/ivy.functional.ivy.control_flow_ops.rst", "docs/functional/ivy/ivy.functional.ivy.creation.rst", "docs/functional/ivy/ivy.functional.ivy.data_type.rst", "docs/functional/ivy/ivy.functional.ivy.device.rst", "docs/functional/ivy/ivy.functional.ivy.elementwise.rst", "docs/functional/ivy/ivy.functional.ivy.experimental.rst", "docs/functional/ivy/ivy.functional.ivy.general.rst", "docs/functional/ivy/ivy.functional.ivy.gradients.rst", "docs/functional/ivy/ivy.functional.ivy.layers.rst", "docs/functional/ivy/ivy.functional.ivy.linear_algebra.rst", "docs/functional/ivy/ivy.functional.ivy.losses.rst", "docs/functional/ivy/ivy.functional.ivy.manipulation.rst", "docs/functional/ivy/ivy.functional.ivy.meta.rst", "docs/functional/ivy/ivy.functional.ivy.nest.rst", "docs/functional/ivy/ivy.functional.ivy.norms.rst", "docs/functional/ivy/ivy.functional.ivy.random.rst", "docs/functional/ivy/ivy.functional.ivy.searching.rst", "docs/functional/ivy/ivy.functional.ivy.set.rst", "docs/functional/ivy/ivy.functional.ivy.sorting.rst", "docs/functional/ivy/ivy.functional.ivy.statistical.rst", "docs/functional/ivy/ivy.functional.ivy.utility.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv1d.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv1d_transpose.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv2d.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv2d_transpose.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv3d.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv3d_transpose.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv_general_dilated.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv_general_transpose.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.depthwise_conv2d.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.dropout.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.linear.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.lstm.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.lstm_update.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.multi_head_attention.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.nms.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.roi_align.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.scaled_dot_product_attention.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.cholesky.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.cross.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.det.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.diag.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.diagonal.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eig.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eigh.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eigvalsh.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.inner.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.inv.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matmul.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_norm.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_power.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_rank.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_transpose.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.outer.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.pinv.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.qr.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.slogdet.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.solve.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.svd.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.svdvals.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.tensordot.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.tensorsolve.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.trace.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vander.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vecdot.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vector_norm.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vector_to_skew_symmetric_matrix.rst", "docs/functional/ivy/losses/ivy.functional.ivy.losses.binary_cross_entropy.rst", "docs/functional/ivy/losses/ivy.functional.ivy.losses.cross_entropy.rst", "docs/functional/ivy/losses/ivy.functional.ivy.losses.sparse_cross_entropy.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.clip.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.concat.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.constant_pad.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.expand_dims.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.flip.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.permute_dims.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.repeat.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.reshape.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.roll.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.split.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.squeeze.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.stack.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.swapaxes.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.tile.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.unstack.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.zero_pad.rst", "docs/functional/ivy/meta/ivy.functional.ivy.meta.fomaml_step.rst", "docs/functional/ivy/meta/ivy.functional.ivy.meta.maml_step.rst", "docs/functional/ivy/meta/ivy.functional.ivy.meta.reptile_step.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.all_nested_indices.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.copy_nest.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.duplicate_array_index_chains.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.index_nest.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.insert_into_nest_at_index.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.insert_into_nest_at_indices.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map_nest_at_index.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map_nest_at_indices.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.multi_index_nest.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_any.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_argwhere.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_map.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_multi_map.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_empty.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_nest_at_index.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_nest_at_indices.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.set_nest_at_index.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.set_nest_at_indices.rst", "docs/functional/ivy/norms/ivy.functional.ivy.norms.layer_norm.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.multinomial.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.randint.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.random_normal.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.random_uniform.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.seed.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.shuffle.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argmax.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argmin.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argwhere.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.nonzero.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.where.rst", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_all.rst", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_counts.rst", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_inverse.rst", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_values.rst", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.argsort.rst", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.msort.rst", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.searchsorted.rst", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.sort.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.cumprod.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.cumsum.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.einsum.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.max.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.mean.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.min.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.prod.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.std.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.sum.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.var.rst", "docs/functional/ivy/utility/ivy.functional.ivy.utility.all.rst", "docs/functional/ivy/utility/ivy.functional.ivy.utility.any.rst", "docs/functional/ivy/utility/ivy.functional.ivy.utility.load.rst", "docs/functional/ivy/utility/ivy.functional.ivy.utility.save.rst", "docs/helpers/ivy_tests.test_ivy.helpers.assertions.rst", "docs/helpers/ivy_tests.test_ivy.helpers.available_frameworks.rst", "docs/helpers/ivy_tests.test_ivy.helpers.function_testing.rst", "docs/helpers/ivy_tests.test_ivy.helpers.globals.rst", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.rst", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.rst", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers.rst", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.rst", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers.rst", "docs/helpers/ivy_tests.test_ivy.helpers.multiprocessing.rst", "docs/helpers/ivy_tests.test_ivy.helpers.pipeline_helper.rst", "docs/helpers/ivy_tests.test_ivy.helpers.structs.rst", "docs/helpers/ivy_tests.test_ivy.helpers.test_parameter_flags.rst", "docs/helpers/ivy_tests.test_ivy.helpers.testing_helpers.rst", "docs/ivy.stateful.rst", "docs/ivy.utils.rst", "docs/ivy_tests.test_ivy.helpers.rst", "docs/stateful/ivy.stateful.activations.rst", "docs/stateful/ivy.stateful.converters.rst", "docs/stateful/ivy.stateful.helpers.rst", "docs/stateful/ivy.stateful.initializers.rst", "docs/stateful/ivy.stateful.layers.rst", "docs/stateful/ivy.stateful.losses.rst", "docs/stateful/ivy.stateful.module.rst", "docs/stateful/ivy.stateful.norms.rst", "docs/stateful/ivy.stateful.optimizers.rst", "docs/stateful/ivy.stateful.sequential.rst", "docs/utils/ivy.utils.assertions.rst", "docs/utils/ivy.utils.backend.rst", "docs/utils/ivy.utils.backend/ivy.utils.backend.ast_helpers.rst", "docs/utils/ivy.utils.backend/ivy.utils.backend.handler.rst", "docs/utils/ivy.utils.backend/ivy.utils.backend.sub_backend_handler.rst", "docs/utils/ivy.utils.binaries.rst", "docs/utils/ivy.utils.dynamic_import.rst", "docs/utils/ivy.utils.einsum_parser.rst", "docs/utils/ivy.utils.einsum_path_helpers.rst", "docs/utils/ivy.utils.exceptions.rst", "docs/utils/ivy.utils.inspection.rst", "docs/utils/ivy.utils.logging.rst", "docs/utils/ivy.utils.profiler.rst", "docs/utils/ivy.utils.verbosity.rst", "index.rst", "overview/contributing.rst", "overview/contributing/building_the_docs.rst", "overview/contributing/contributor_rewards.rst", "overview/contributing/error_handling.rst", "overview/contributing/helpful_resources.rst", "overview/contributing/open_tasks.rst", "overview/contributing/setting_up.rst", "overview/contributing/the_basics.rst", "overview/contributing/volunteer_program.rst", "overview/deep_dive.rst", "overview/deep_dive/array_api_tests.rst", "overview/deep_dive/arrays.rst", "overview/deep_dive/backend_setting.rst", "overview/deep_dive/building_the_docs_pipeline.rst", "overview/deep_dive/containers.rst", "overview/deep_dive/continuous_integration.rst", "overview/deep_dive/data_types.rst", "overview/deep_dive/devices.rst", "overview/deep_dive/docstring_examples.rst", "overview/deep_dive/docstrings.rst", "overview/deep_dive/exception_handling.rst", "overview/deep_dive/fix_failing_tests.rst", "overview/deep_dive/formatting.rst", "overview/deep_dive/function_arguments.rst", "overview/deep_dive/function_types.rst", "overview/deep_dive/function_wrapping.rst", "overview/deep_dive/gradients.rst", "overview/deep_dive/inplace_updates.rst", "overview/deep_dive/ivy_frontends.rst", "overview/deep_dive/ivy_frontends_tests.rst", "overview/deep_dive/ivy_lint.rst", "overview/deep_dive/ivy_tests.rst", "overview/deep_dive/navigating_the_code.rst", "overview/deep_dive/operating_modes.rst", "overview/deep_dive/superset_behaviour.rst", "overview/design.rst", "overview/design/building_blocks.rst", "overview/design/ivy_as_a_framework.rst", "overview/design/ivy_as_a_framework/ivy_array.rst", "overview/design/ivy_as_a_framework/ivy_container.rst", "overview/design/ivy_as_a_framework/ivy_stateful_api.rst", "overview/design/ivy_as_a_transpiler.rst", "overview/faq.rst", "overview/get_started.rst", "overview/glossary.rst", "overview/motivation.rst", "overview/motivation/ml_explosion.rst", "overview/motivation/standardization.rst", "overview/motivation/why_unify.rst", "overview/one_liners.rst", "overview/one_liners/trace.rst", "overview/one_liners/transpile.rst", "overview/one_liners/unify.rst", "overview/related_work.rst", "overview/related_work/api_standards.rst", "overview/related_work/compiler_infrastructure.rst", "overview/related_work/exchange_formats.rst", "overview/related_work/frameworks.rst", "overview/related_work/graph_tracers.rst", "overview/related_work/ml_unifying_companies.rst", "overview/related_work/multi_vendor_compiler_frameworks.rst", "overview/related_work/vendor_specific_apis.rst", "overview/related_work/vendor_specific_compilers.rst", "overview/related_work/what_does_ivy_add.rst", "overview/related_work/wrapper_frameworks.rst", "overview/volunteer_ranks.rst"], "titles": ["Demos", "TO REPLACE: Title", "Examples and Demos", "Ivy AlexNet demo", "# Ivy Bert Demo", "Image Segmentation with Ivy UNet", "&lt;no title&gt;", "Accelerating MMPreTrain models with JAX", "Using Ivy ResNet", "Accelerating PyTorch models with JAX", "Accelerating XGBoost with JAX", "Guides", "Transpiling a PyTorch model to build on top", "Transpiling a haiku model to build on top", "Transpiling a Tensorflow model to build on top", "Developing a convolutional network using Ivy", "Tutorials And Examples", "Learn the basics", "Write Ivy code", "Unify code", "Trace code", "Transpile code", "Lazy vs Eager", "How to use decorators", "Transpile any library", "Transpile any model", "Write a model using Ivy", "ODSC Ivy Demo", "Quickstart", "0.0: Unify", "0.1: Compile", "0.2: Transpile", "1.0: Lazy vs Eager", "1.1: Framework Selection", "1.2: As a Decorator", "1.3: Dynamic vs Static", "2.0: Kornia", "3.0: Perceiver", "3.1: Stable Diffusion", "Basic Operations with Ivy", "Compilation of a Basic Function", "Demo: Transpiling DeepMind\u2019s PerceiverIO", "Deepmind PerceiverIO on GPU", "End-to-End Training Pipeline in Ivy", "HuggingFace Tensorflow DeiT", "Ivy as a Transpiler Introduction", "Resnet 18", "Activations", "Conversions", "Creation", "Data type", "Device", "Elementwise", "Experimental", "General", "Gradients", "Image", "Layers", "Linear algebra", "Losses", "Manipulation", "Norms", "Random", "Searching", "Set", "Sorting", "Statistical", "Utility", "Wrapping", "Activations", "Base", "Conversions", "Creation", "Data type", "Device", "Elementwise", "Experimental", "General", "Gradients", "Image", "Layers", "Linear algebra", "Losses", "Manipulation", "Norms", "Random", "Searching", "Set", "Sorting", "Statistical", "Utility", "Wrapping", "Base", "Cp tensor", "Parafac2 tensor", "Tr tensor", "Tt tensor", "Tucker tensor", "Array", "Container", "Factorized tensor", "Nested array", "Base", "Elementwise", "Data classes", "Functions", "gelu", "hardswish", "leaky_relu", "log_softmax", "mish", "relu", "sigmoid", "softmax", "softplus", "softsign", "cmp_is", "cmp_isnot", "for_loop", "if_else", "try_except", "while_loop", "arange", "array", "asarray", "copy_array", "empty", "empty_like", "eye", "from_dlpack", "frombuffer", "full", "full_like", "linspace", "logspace", "meshgrid", "native_array", "one_hot", "ones", "ones_like", "to_dlpack", "tril", "triu", "triu_indices", "zeros", "zeros_like", "as_ivy_dtype", "as_native_dtype", "astype", "broadcast_arrays", "broadcast_to", "can_cast", "check_float", "closest_valid_dtype", "default_complex_dtype", "default_dtype", "default_float_dtype", "default_int_dtype", "default_uint_dtype", "dtype", "dtype_bits", "finfo", "function_supported_dtypes", "function_unsupported_dtypes", "iinfo", "infer_default_dtype", "invalid_dtype", "is_bool_dtype", "is_complex_dtype", "is_float_dtype", "is_hashable_dtype", "is_int_dtype", "is_native_dtype", "is_uint_dtype", "promote_types", "promote_types_of_inputs", "result_type", "set_default_complex_dtype", "set_default_dtype", "set_default_float_dtype", "set_default_int_dtype", "set_default_uint_dtype", "type_promote_arrays", "unset_default_complex_dtype", "unset_default_dtype", "unset_default_float_dtype", "unset_default_int_dtype", "unset_default_uint_dtype", "valid_dtype", "as_ivy_dev", "as_native_dev", "clear_cached_mem_on_dev", "default_device", "dev", "dev_util", "function_supported_devices", "function_unsupported_devices", "get_all_ivy_arrays_on_dev", "gpu_is_available", "handle_soft_device_variable", "num_cpu_cores", "num_gpus", "num_ivy_arrays_on_dev", "percent_used_mem_on_dev", "print_all_ivy_arrays_on_dev", "set_default_device", "set_soft_device_mode", "set_split_factor", "split_factor", "split_func_call", "to_device", "total_mem_on_dev", "tpu_is_available", "unset_default_device", "unset_soft_device_mode", "used_mem_on_dev", "abs", "acos", "acosh", "add", "angle", "asin", "asinh", "atan", "atan2", "atanh", "bitwise_and", "bitwise_invert", "bitwise_left_shift", "bitwise_or", "bitwise_right_shift", "bitwise_xor", "ceil", "cos", "cosh", "deg2rad", "divide", "equal", "erf", "exp", "exp2", "expm1", "floor", "floor_divide", "fmin", "fmod", "gcd", "greater", "greater_equal", "imag", "isfinite", "isinf", "isnan", "isreal", "lcm", "less", "less_equal", "log", "log10", "log1p", "log2", "logaddexp", "logaddexp2", "logical_and", "logical_not", "logical_or", "logical_xor", "maximum", "minimum", "multiply", "nan_to_num", "negative", "not_equal", "positive", "pow", "rad2deg", "real", "reciprocal", "remainder", "round", "sign", "sin", "sinh", "sqrt", "square", "subtract", "tan", "tanh", "trapz", "trunc", "trunc_divide", "celu", "elu", "hardshrink", "hardsilu", "hardtanh", "logit", "logsigmoid", "prelu", "relu6", "scaled_tanh", "selu", "silu", "softshrink", "stanh", "tanhshrink", "threshold", "thresholded_relu", "blackman_window", "eye_like", "hamming_window", "hann_window", "indices", "kaiser_bessel_derived_window", "kaiser_window", "mel_weight_matrix", "ndenumerate", "ndindex", "polyval", "random_cp", "random_parafac2", "random_tr", "random_tt", "random_tucker", "tril_indices", "trilu", "unsorted_segment_mean", "unsorted_segment_min", "unsorted_segment_sum", "vorbis_window", "allclose", "amax", "amin", "binarizer", "conj", "copysign", "count_nonzero", "diff", "digamma", "erfc", "erfinv", "fix", "float_power", "fmax", "frexp", "gradient", "hypot", "isclose", "ldexp", "lerp", "lgamma", "modf", "nansum", "nextafter", "signbit", "sinc", "sparsify_tensor", "xlogy", "zeta", "reduce", "bind_custom_gradient_function", "jvp", "vjp", "Activations", "Constants", "Creation", "Data type", "Device", "Elementwise", "General", "Gradients", "Layers", "Linear algebra", "Losses", "Manipulation", "Meta", "Nest", "Norms", "Random", "Searching", "Set", "Sorting", "Sparse array", "Statistical", "Utility", "adaptive_avg_pool1d", "adaptive_avg_pool2d", "adaptive_max_pool2d", "adaptive_max_pool3d", "area_interpolate", "avg_pool1d", "avg_pool2d", "avg_pool3d", "dct", "dft", "dropout1d", "dropout2d", "dropout3d", "embedding", "fft", "fft2", "generate_einsum_equation", "get_interpolate_kernel", "idct", "ifft", "ifftn", "interp", "interpolate", "max_pool1d", "max_pool2d", "max_pool3d", "max_unpool1d", "nearest_interpolate", "pool", "reduce_window", "rfft", "rfftn", "rnn", "sliding_window", "stft", "adjoint", "batched_outer", "cond", "diagflat", "dot", "eig", "eigh_tridiagonal", "eigvals", "general_inner_product", "higher_order_moment", "initialize_tucker", "khatri_rao", "kron", "kronecker", "lu_factor", "lu_solve", "make_svd_non_negative", "matrix_exp", "mode_dot", "multi_dot", "multi_mode_dot", "partial_tucker", "solve_triangular", "svd_flip", "tensor_train", "truncated_svd", "tt_matrix_to_tensor", "tucker", "hinge_embedding_loss", "huber_loss", "kl_div", "l1_loss", "log_poisson_loss", "poisson_nll_loss", "smooth_l1_loss", "soft_margin_loss", "as_strided", "associative_scan", "atleast_1d", "atleast_2d", "atleast_3d", "broadcast_shapes", "check_scalar", "choose", "column_stack", "concat_from_sequence", "dsplit", "dstack", "expand", "fill_diagonal", "flatten", "fliplr", "flipud", "fold", "heaviside", "hsplit", "hstack", "i0", "matricize", "moveaxis", "pad", "partial_fold", "partial_tensor_to_vec", "partial_unfold", "partial_vec_to_tensor", "put_along_axis", "rot90", "soft_thresholding", "take", "take_along_axis", "top_k", "trim_zeros", "unflatten", "unfold", "unique_consecutive", "vsplit", "vstack", "batch_norm", "group_norm", "instance_norm", "l1_normalize", "l2_normalize", "local_response_norm", "lp_normalize", "bernoulli", "beta", "dirichlet", "gamma", "poisson", "unravel_index", "invert_permutation", "lexsort", "is_ivy_sparse_array", "is_native_sparse_array", "native_sparse_array", "native_sparse_array_to_indices_values_and_shape", "bincount", "corrcoef", "cov", "cummax", "cummin", "histogram", "igamma", "median", "nanmean", "nanmedian", "nanmin", "nanprod", "quantile", "optional_get_element", "all_equal", "arg_info", "arg_names", "array_equal", "assert_supports_inplace", "cache_fn", "clip_matrix_norm", "clip_vector_norm", "container_types", "current_backend_str", "default", "einops_rearrange", "einops_reduce", "einops_repeat", "exists", "fourier_encode", "function_supported_devices_and_dtypes", "function_unsupported_devices_and_dtypes", "gather", "gather_nd", "get_all_arrays_in_memory", "get_item", "get_num_dims", "get_referrers_recursive", "has_nans", "inplace_arrays_supported", "inplace_decrement", "inplace_increment", "inplace_update", "inplace_variables_supported", "is_array", "is_ivy_array", "is_ivy_container", "is_ivy_nested_array", "is_native_array", "isin", "isscalar", "itemsize", "match_kwargs", "multiprocessing", "num_arrays_in_memory", "print_all_arrays_in_memory", "scatter_flat", "scatter_nd", "set_array_mode", "set_exception_trace_mode", "set_inplace_mode", "set_item", "set_min_base", "set_min_denominator", "set_nestable_mode", "set_precise_mode", "set_queue_timeout", "set_shape_array_mode", "set_show_func_wrapper_trace_mode", "set_tmp_dir", "shape", "size", "stable_divide", "stable_pow", "strides", "supports_inplace_updates", "to_ivy_shape", "to_list", "to_native_shape", "to_numpy", "to_scalar", "try_else_none", "unset_array_mode", "unset_exception_trace_mode", "unset_inplace_mode", "unset_min_base", "unset_min_denominator", "unset_nestable_mode", "unset_precise_mode", "unset_queue_timeout", "unset_shape_array_mode", "unset_show_func_wrapper_trace_mode", "unset_tmp_dir", "value_is_nan", "vmap", "adam_step", "adam_update", "execute_with_gradients", "grad", "gradient_descent_update", "jac", "lamb_update", "lars_update", "optimizer_update", "stop_gradient", "value_and_grad", "Activations", "Constants", "Control flow ops", "Creation", "Data type", "Device", "Elementwise", "Experimental", "General", "Gradients", "Layers", "Linear algebra", "Losses", "Manipulation", "Meta", "Nest", "Norms", "Random", "Searching", "Set", "Sorting", "Statistical", "Utility", "conv", "conv1d", "conv1d_transpose", "conv2d", "conv2d_transpose", "conv3d", "conv3d_transpose", "conv_general_dilated", "conv_general_transpose", "depthwise_conv2d", "dropout", "linear", "lstm", "lstm_update", "multi_head_attention", "nms", "roi_align", "scaled_dot_product_attention", "cholesky", "cross", "det", "diag", "diagonal", "eig", "eigh", "eigvalsh", "inner", "inv", "matmul", "matrix_norm", "matrix_power", "matrix_rank", "matrix_transpose", "outer", "pinv", "qr", "slogdet", "solve", "svd", "svdvals", "tensordot", "tensorsolve", "trace", "vander", "vecdot", "vector_norm", "vector_to_skew_symmetric_matrix", "binary_cross_entropy", "cross_entropy", "sparse_cross_entropy", "clip", "concat", "constant_pad", "expand_dims", "flip", "permute_dims", "repeat", "reshape", "roll", "split", "squeeze", "stack", "swapaxes", "tile", "unstack", "zero_pad", "fomaml_step", "maml_step", "reptile_step", "all_nested_indices", "copy_nest", "duplicate_array_index_chains", "index_nest", "insert_into_nest_at_index", "insert_into_nest_at_indices", "map", "map_nest_at_index", "map_nest_at_indices", "multi_index_nest", "nested_any", "nested_argwhere", "nested_map", "nested_multi_map", "prune_empty", "prune_nest_at_index", "prune_nest_at_indices", "set_nest_at_index", "set_nest_at_indices", "layer_norm", "multinomial", "randint", "random_normal", "random_uniform", "seed", "shuffle", "argmax", "argmin", "argwhere", "nonzero", "where", "unique_all", "unique_counts", "unique_inverse", "unique_values", "argsort", "msort", "searchsorted", "sort", "cumprod", "cumsum", "einsum", "max", "mean", "min", "prod", "std", "sum", "var", "all", "any", "load", "save", "Assertions", "Available frameworks", "Function testing", "Globals", "Hypothesis helpers", "Array helpers", "Dtype helpers", "General helpers", "Number helpers", "Multiprocessing", "Pipeline helper", "Structs", "Test parameter flags", "Testing helpers", "Framework classes", "Utils", "Testing", "Activations", "Converters", "Helpers", "Initializers", "Layers", "Losses", "Module", "Norms", "Optimizers", "Sequential", "Assertions", "Backend", "Ast helpers", "Handler", "Sub backend handler", "Binaries", "Dynamic import", "Einsum parser", "Einsum path helpers", "Exceptions", "Inspection", "Logging", "Profiler", "Verbosity", "Home", "Contributing", "Building the Docs", "Contributor Rewards", "Error Handling", "Helpful Resources", "Open Tasks", "Setting Up", "The Basics", "Contributor Program", "Deep Dive", "Array API Tests", "Arrays", "Backend Setting", "Building the Docs Pipeline", "Containers", "Continuous Integration", "Data Types", "Devices", "Docstring Examples", "Docstrings", "Exception Handling", "Fix Failing Tests:", "Formatting", "Function Arguments", "Function Types", "Function Wrapping", "Gradients", "Inplace Updates", "Ivy Frontends", "Ivy Frontend Tests", "Ivy-Lint: Ivy\u2019s Custom Code Formatters", "Ivy Tests", "Navigating the Code", "Operating Modes", "Superset Behaviour", "Design", "Building Blocks", "Ivy as a Framework", "Ivy Array", "Ivy Container", "Ivy Stateful API", "Ivy as a Transpiler", "FAQ", "Get Started", "Glossary", "Motivation", "ML Explosion", "Standardization", "Why Unify?", "One liners", "<code class=\"docutils literal notranslate\"><span class=\"pre\">ivy.trace_graph()</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">ivy.transpile()</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">ivy.unify()</span></code>", "Related Work", "API Standards", "Compiler Infrastructure", "Exchange Formats", "Frameworks", "Graph Tracers", "ML-Unifying Companies", "Multi-Vendor Compiler Frameworks", "Vendor-Specific APIs", "Vendor-Specific Compilers", "What does Ivy Add?", "Wrapper Frameworks", "Contributor Leaderboard"], "terms": {"thi": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 14, 16, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 39, 41, 42, 44, 47, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 93, 94, 96, 98, 99, 106, 107, 108, 109, 110, 111, 112, 113, 114, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 149, 150, 151, 161, 164, 167, 168, 169, 171, 175, 176, 190, 193, 203, 209, 210, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 318, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 363, 364, 365, 366, 367, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 380, 383, 384, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 403, 404, 405, 408, 409, 410, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 430, 431, 432, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 503, 505, 506, 507, 508, 509, 510, 511, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 533, 534, 536, 537, 540, 541, 542, 543, 544, 545, 548, 549, 552, 553, 554, 556, 557, 558, 560, 561, 562, 564, 565, 567, 572, 573, 576, 582, 587, 588, 589, 590, 591, 593, 595, 596, 609, 610, 611, 612, 613, 615, 617, 618, 619, 620, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 654, 655, 656, 658, 659, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 716, 718, 720, 721, 726, 727, 731, 733, 734, 735, 736, 737, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 769, 770, 772, 773, 775, 784, 785, 787, 788, 790, 791, 792, 793, 802, 806, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 855, 856, 857, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874], "repo": [0, 12, 41, 813, 816, 819, 822, 824, 825, 830, 838, 840, 855], "hold": [0, 53, 54, 58, 66, 76, 81, 89, 93, 94, 330, 347, 352, 368, 383, 466, 495, 519, 520, 525, 572, 573, 630, 633, 643, 674, 754, 770, 817, 848, 867], "all": [0, 1, 3, 4, 5, 8, 9, 12, 13, 14, 15, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 40, 41, 43, 44, 46, 48, 49, 53, 54, 57, 58, 60, 62, 67, 68, 70, 71, 72, 75, 76, 77, 80, 81, 83, 85, 90, 91, 93, 94, 122, 130, 137, 141, 142, 143, 197, 204, 236, 240, 268, 269, 324, 325, 337, 356, 365, 368, 371, 372, 373, 374, 383, 405, 414, 416, 417, 418, 426, 431, 441, 442, 444, 447, 448, 469, 480, 488, 494, 524, 530, 533, 550, 570, 571, 588, 595, 596, 610, 613, 625, 627, 628, 630, 631, 632, 633, 635, 636, 637, 639, 640, 644, 655, 658, 659, 664, 676, 681, 682, 685, 690, 699, 703, 705, 711, 712, 713, 714, 715, 716, 725, 726, 727, 728, 734, 737, 742, 767, 769, 772, 773, 774, 775, 787, 788, 794, 797, 802, 804, 806, 808, 809, 812, 814, 815, 816, 817, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 843, 844, 845, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 859, 860, 862, 863, 864, 865, 866, 867, 869, 872, 873, 874], "jupyt": [0, 856, 868], "exampl": [0, 7, 9, 18, 20, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 39, 41, 42, 43, 44, 47, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 98, 99, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 118, 119, 121, 122, 123, 124, 125, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 143, 144, 145, 148, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 171, 172, 173, 176, 177, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 324, 326, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 363, 365, 368, 369, 371, 372, 373, 374, 377, 378, 379, 381, 383, 390, 391, 392, 393, 395, 396, 398, 399, 400, 403, 404, 405, 408, 409, 410, 413, 414, 415, 416, 418, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 432, 437, 439, 442, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 463, 464, 465, 466, 467, 470, 471, 472, 474, 475, 476, 477, 479, 480, 485, 486, 487, 488, 489, 490, 491, 492, 494, 495, 496, 500, 501, 503, 506, 508, 509, 510, 511, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 530, 532, 533, 534, 535, 536, 537, 540, 541, 542, 543, 544, 545, 548, 549, 550, 551, 552, 553, 554, 556, 557, 558, 560, 561, 562, 564, 565, 567, 568, 569, 570, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 658, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 687, 688, 689, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 712, 713, 714, 715, 717, 718, 720, 721, 722, 723, 725, 726, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 769, 772, 773, 780, 797, 801, 802, 806, 812, 814, 815, 816, 818, 819, 820, 821, 822, 823, 824, 825, 826, 828, 829, 830, 831, 833, 834, 836, 837, 841, 845, 847, 848, 849, 850, 851, 857, 863, 864, 867, 869, 872, 873], "tab": [0, 814, 815, 824, 830, 848], "ivi": [0, 1, 2, 6, 7, 9, 10, 12, 14, 16, 17, 19, 20, 21, 22, 23, 24, 25, 29, 30, 31, 32, 33, 34, 35, 41, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 365, 368, 369, 370, 371, 372, 373, 374, 377, 378, 379, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 769, 780, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 809, 810, 811, 812, 813, 815, 818, 819, 821, 823, 825, 826, 828, 830, 831, 832, 833, 834, 836, 843, 844, 851, 853, 856, 857, 858, 862, 873, 874], "": [0, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 39, 42, 44, 45, 46, 49, 53, 54, 55, 58, 66, 76, 78, 81, 89, 118, 135, 141, 142, 162, 163, 192, 195, 196, 208, 243, 278, 325, 330, 331, 332, 334, 345, 347, 353, 357, 359, 365, 368, 369, 371, 372, 373, 374, 377, 378, 383, 386, 387, 394, 400, 405, 416, 424, 428, 436, 445, 450, 452, 453, 469, 471, 472, 480, 497, 498, 499, 508, 518, 528, 546, 547, 553, 567, 590, 591, 612, 614, 615, 616, 617, 619, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 637, 643, 647, 649, 651, 653, 659, 666, 674, 676, 683, 684, 690, 726, 760, 762, 773, 787, 788, 789, 790, 791, 792, 793, 797, 806, 808, 809, 810, 811, 812, 815, 816, 817, 818, 819, 820, 821, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 840, 841, 842, 843, 845, 847, 848, 849, 850, 851, 853, 856, 857, 858, 859, 860, 861, 862, 865, 866, 867, 869, 870, 871, 872], "web": 0, "relev": [0, 49, 72, 134, 625, 792, 808, 814, 815, 816, 820, 823, 824, 825, 827, 830, 834, 835, 838, 839, 840, 848, 852, 856, 864, 871, 872], "link": [0, 18, 27, 28, 42, 808, 814, 815, 816, 822, 824, 825, 831, 837, 860, 862, 864], "list": [0, 4, 5, 7, 8, 10, 43, 48, 49, 50, 52, 53, 54, 57, 60, 61, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 96, 102, 106, 107, 108, 109, 110, 111, 112, 113, 114, 122, 123, 124, 130, 132, 135, 136, 137, 139, 145, 149, 151, 164, 168, 169, 176, 192, 209, 210, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 246, 247, 248, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 305, 306, 307, 309, 330, 331, 332, 333, 334, 336, 337, 338, 341, 342, 345, 346, 347, 353, 354, 355, 357, 358, 359, 368, 371, 372, 374, 381, 390, 391, 392, 394, 395, 396, 397, 408, 409, 410, 411, 415, 417, 421, 426, 430, 433, 440, 441, 444, 447, 448, 449, 450, 451, 452, 453, 454, 455, 458, 459, 460, 461, 464, 465, 466, 475, 486, 488, 489, 490, 492, 495, 497, 499, 500, 501, 503, 505, 510, 518, 519, 520, 521, 530, 532, 533, 534, 536, 537, 541, 542, 543, 544, 545, 548, 549, 550, 552, 554, 556, 557, 558, 560, 561, 564, 568, 572, 573, 587, 588, 589, 591, 593, 594, 595, 596, 597, 609, 610, 615, 620, 625, 626, 627, 628, 630, 632, 633, 635, 637, 638, 641, 642, 646, 647, 648, 649, 650, 651, 654, 655, 656, 659, 662, 663, 664, 669, 670, 671, 672, 673, 674, 676, 678, 680, 681, 685, 687, 692, 693, 694, 695, 696, 699, 702, 703, 704, 705, 706, 709, 710, 714, 715, 716, 717, 720, 721, 722, 723, 725, 726, 731, 732, 733, 734, 735, 736, 737, 739, 742, 745, 746, 747, 748, 749, 750, 751, 753, 754, 757, 759, 760, 762, 763, 764, 767, 769, 772, 773, 774, 775, 780, 785, 788, 794, 801, 802, 806, 811, 813, 814, 815, 817, 819, 820, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 836, 837, 838, 840, 841, 845, 848, 849, 850, 851, 859, 866, 867, 872, 874], "open": [0, 3, 5, 7, 8, 9, 24, 27, 28, 41, 42, 43, 44, 54, 62, 85, 122, 625, 639, 735, 737, 808, 809, 810, 811, 815, 816, 817, 822, 825, 828, 830, 837, 838, 843, 852, 855, 856, 857, 859, 860, 864, 865, 866, 868, 869], "task": [0, 6, 44, 636, 711, 712, 713, 808, 809, 811, 815, 816, 817, 837, 838, 866, 872, 873], "avil": 0, "discuss": [0, 814, 816, 822, 825, 826, 836, 837, 839, 840, 843, 846, 847, 848, 851, 857, 862, 867], "suggest": [0, 814, 815, 816, 822, 825, 831, 835, 837, 840, 841, 842, 852], "new": [0, 6, 7, 9, 11, 12, 14, 16, 19, 22, 23, 24, 25, 27, 28, 29, 43, 45, 48, 53, 54, 55, 60, 61, 70, 72, 76, 77, 78, 81, 83, 84, 126, 129, 131, 132, 137, 138, 139, 144, 145, 182, 205, 225, 271, 273, 277, 330, 335, 347, 352, 368, 371, 374, 383, 407, 456, 464, 465, 479, 485, 492, 525, 541, 542, 543, 545, 548, 549, 551, 572, 573, 576, 578, 585, 588, 589, 595, 612, 615, 617, 618, 619, 625, 626, 627, 628, 630, 631, 632, 635, 637, 638, 659, 671, 678, 698, 702, 706, 719, 731, 732, 733, 785, 788, 791, 792, 797, 802, 808, 809, 811, 814, 815, 816, 817, 818, 820, 821, 823, 824, 825, 827, 828, 830, 831, 834, 836, 837, 838, 839, 840, 841, 843, 844, 847, 850, 852, 853, 855, 856, 857, 859, 864, 868, 872, 873], "should": [0, 4, 6, 9, 10, 19, 22, 23, 24, 25, 44, 47, 49, 52, 53, 54, 55, 57, 58, 60, 62, 63, 64, 66, 69, 70, 72, 75, 76, 77, 78, 80, 81, 83, 85, 86, 88, 89, 91, 93, 96, 98, 99, 109, 113, 121, 135, 137, 141, 142, 150, 175, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 239, 241, 242, 243, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 269, 271, 272, 273, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 298, 309, 325, 331, 332, 344, 348, 349, 350, 351, 355, 360, 361, 362, 363, 365, 368, 370, 371, 372, 373, 374, 378, 383, 386, 395, 396, 397, 399, 404, 415, 430, 441, 447, 454, 479, 480, 504, 505, 518, 519, 520, 535, 553, 558, 610, 612, 615, 617, 618, 619, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 652, 653, 662, 663, 664, 665, 667, 669, 670, 671, 672, 673, 674, 675, 676, 678, 679, 680, 681, 682, 683, 685, 687, 689, 690, 702, 718, 739, 740, 741, 743, 744, 745, 746, 747, 748, 749, 753, 754, 755, 756, 757, 758, 759, 761, 762, 769, 770, 772, 774, 784, 785, 787, 788, 790, 791, 792, 793, 801, 802, 810, 812, 814, 815, 816, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 840, 841, 842, 843, 845, 847, 848, 849, 854, 856, 860, 862, 863, 866, 868, 873], "comprehens": [0, 16, 816, 819, 839], "possibl": [0, 3, 33, 49, 53, 72, 76, 83, 93, 124, 243, 286, 308, 331, 332, 365, 368, 371, 373, 374, 394, 449, 458, 459, 460, 466, 468, 470, 471, 472, 479, 495, 568, 628, 630, 632, 643, 655, 698, 699, 700, 702, 704, 705, 707, 709, 756, 758, 772, 788, 802, 805, 808, 809, 812, 814, 815, 816, 819, 822, 823, 825, 827, 828, 830, 831, 833, 835, 836, 837, 838, 840, 843, 845, 848, 851, 856, 864, 866, 872], "us": [0, 1, 2, 3, 4, 6, 7, 9, 10, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 39, 41, 42, 44, 46, 47, 49, 50, 51, 52, 53, 54, 55, 57, 58, 60, 62, 63, 66, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 80, 81, 83, 85, 86, 91, 93, 94, 96, 99, 106, 134, 137, 148, 160, 162, 163, 174, 175, 195, 196, 198, 203, 207, 208, 209, 210, 212, 215, 221, 229, 257, 258, 260, 261, 263, 264, 265, 267, 268, 270, 279, 283, 288, 308, 310, 311, 313, 314, 315, 323, 345, 348, 349, 352, 365, 368, 371, 372, 373, 374, 377, 378, 379, 381, 383, 390, 391, 392, 394, 395, 396, 397, 398, 400, 405, 407, 408, 409, 410, 413, 415, 416, 417, 419, 424, 426, 430, 436, 438, 440, 441, 443, 444, 445, 447, 448, 453, 470, 474, 478, 480, 488, 492, 497, 499, 503, 504, 505, 506, 507, 508, 509, 510, 511, 518, 525, 528, 546, 547, 556, 557, 568, 569, 576, 578, 579, 581, 588, 589, 601, 602, 604, 611, 612, 617, 618, 622, 623, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 639, 641, 643, 656, 657, 659, 662, 667, 669, 676, 680, 684, 687, 690, 692, 701, 702, 703, 707, 711, 712, 713, 714, 716, 717, 723, 724, 725, 727, 734, 735, 736, 737, 739, 740, 741, 742, 745, 747, 755, 770, 772, 773, 774, 775, 780, 784, 785, 787, 788, 789, 790, 791, 792, 797, 801, 802, 806, 809, 811, 813, 816, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 836, 837, 840, 841, 842, 843, 844, 845, 846, 847, 849, 850, 851, 853, 857, 861, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873], "easi": [0, 27, 28, 41, 815, 816, 820, 821, 823, 833, 835, 838, 840, 843, 856, 864, 866, 872, 873], "follow": [0, 6, 10, 21, 22, 23, 25, 27, 28, 31, 32, 33, 39, 42, 43, 53, 54, 55, 57, 58, 64, 70, 76, 77, 78, 80, 81, 130, 161, 164, 209, 219, 236, 243, 269, 271, 278, 279, 315, 365, 371, 373, 374, 377, 394, 407, 415, 453, 468, 480, 497, 499, 556, 557, 558, 588, 589, 612, 615, 617, 618, 619, 625, 626, 627, 628, 630, 631, 632, 633, 637, 641, 659, 662, 674, 680, 690, 720, 726, 745, 746, 747, 748, 788, 792, 808, 810, 814, 815, 816, 817, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 855, 856, 859, 863, 866, 869], "attract": 0, "visual": [0, 10, 45, 806, 808, 815, 830, 837, 840, 851, 866, 868, 871], "graph": [0, 3, 5, 8, 10, 16, 17, 20, 22, 24, 25, 28, 34, 35, 40, 45, 46, 64, 641, 745, 746, 747, 748, 780, 808, 823, 833, 837, 839, 843, 845, 850, 851, 853, 857, 858, 859, 860, 861, 862, 866, 869], "nice": [0, 840, 857, 866], "format": [0, 24, 25, 27, 28, 39, 41, 42, 43, 51, 54, 57, 66, 69, 70, 71, 74, 80, 96, 114, 159, 193, 371, 372, 382, 413, 446, 514, 541, 622, 626, 627, 630, 632, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 657, 755, 765, 766, 767, 784, 808, 815, 816, 818, 824, 825, 826, 827, 828, 829, 837, 839, 848, 860, 862, 864, 866, 867], "result": [0, 3, 5, 6, 7, 8, 9, 10, 12, 14, 22, 23, 24, 25, 27, 28, 39, 47, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 98, 99, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 137, 138, 139, 140, 141, 142, 144, 145, 148, 150, 175, 176, 210, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 318, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 363, 365, 368, 369, 371, 372, 373, 374, 377, 378, 379, 381, 383, 384, 385, 386, 387, 388, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 403, 404, 405, 407, 408, 409, 410, 411, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 428, 429, 431, 432, 436, 437, 438, 439, 440, 442, 446, 449, 450, 451, 452, 454, 455, 457, 464, 465, 468, 470, 471, 472, 473, 474, 477, 478, 479, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 511, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 536, 537, 541, 542, 543, 548, 549, 553, 558, 565, 572, 573, 611, 612, 613, 615, 617, 618, 619, 620, 622, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 658, 659, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 705, 706, 707, 708, 710, 717, 720, 721, 723, 727, 731, 733, 734, 735, 736, 737, 739, 740, 741, 742, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 769, 774, 780, 794, 802, 806, 808, 812, 814, 816, 819, 820, 822, 823, 824, 825, 827, 828, 830, 832, 833, 835, 836, 837, 838, 840, 841, 845, 848, 851, 859, 860, 861, 867, 869], "etc": [0, 30, 35, 42, 49, 53, 62, 64, 68, 72, 76, 85, 91, 125, 133, 134, 137, 371, 378, 400, 405, 416, 504, 505, 507, 508, 625, 639, 641, 734, 735, 736, 737, 745, 746, 747, 748, 772, 775, 787, 788, 789, 790, 791, 792, 793, 814, 815, 816, 817, 819, 820, 821, 822, 823, 825, 827, 829, 832, 837, 838, 840, 841, 845, 847, 848, 851, 853, 857, 859, 864, 866, 872], "gener": [0, 5, 16, 20, 25, 27, 28, 30, 33, 41, 43, 45, 46, 49, 52, 53, 57, 62, 68, 72, 75, 76, 80, 85, 91, 94, 122, 133, 134, 143, 151, 236, 239, 249, 250, 265, 269, 278, 308, 311, 315, 316, 317, 319, 320, 321, 322, 323, 324, 331, 332, 365, 368, 371, 372, 374, 378, 383, 415, 421, 443, 488, 506, 518, 625, 626, 628, 632, 633, 635, 639, 643, 655, 681, 682, 685, 688, 710, 734, 735, 737, 738, 760, 772, 775, 780, 792, 801, 814, 815, 816, 818, 819, 820, 822, 825, 826, 827, 828, 829, 832, 833, 836, 837, 838, 841, 844, 845, 847, 849, 850, 851, 853, 864, 865, 866, 867, 868, 869, 870, 871, 872], "tone": [0, 4], "feel": [0, 42, 98, 99, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 784, 785, 787, 788, 790, 791, 792, 793, 808, 810, 812, 814, 815, 816, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 840, 841, 843, 844, 852, 859], "free": [0, 5, 41, 42, 98, 99, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 784, 785, 787, 788, 790, 791, 792, 793, 808, 810, 812, 813, 814, 816, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 840, 841, 843, 844, 852, 859, 867, 869], "includ": [0, 10, 16, 20, 30, 35, 49, 52, 53, 54, 58, 63, 66, 67, 70, 72, 75, 76, 77, 81, 86, 89, 90, 122, 123, 124, 133, 134, 136, 143, 216, 240, 244, 245, 246, 249, 251, 254, 262, 270, 283, 288, 310, 313, 314, 315, 318, 324, 327, 329, 331, 332, 336, 337, 338, 341, 342, 343, 344, 346, 348, 349, 351, 352, 353, 354, 357, 358, 365, 368, 371, 374, 383, 390, 391, 392, 422, 425, 427, 471, 472, 474, 477, 479, 481, 484, 506, 508, 509, 517, 521, 523, 524, 526, 527, 528, 554, 609, 625, 628, 630, 632, 633, 637, 639, 640, 643, 644, 657, 668, 688, 690, 714, 737, 741, 756, 757, 758, 759, 760, 761, 762, 763, 764, 769, 772, 773, 775, 787, 788, 791, 804, 806, 808, 814, 816, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 832, 833, 836, 837, 838, 839, 840, 841, 843, 845, 856, 859, 860, 863, 864, 866, 868, 871, 872, 873], "emoji": [0, 814], "don": [0, 9, 10, 12, 14, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 41, 43, 68, 91, 808, 814, 815, 816, 824, 825, 826, 831, 835, 840, 843, 849, 851, 852, 857, 859], "t": [0, 4, 9, 10, 12, 14, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 33, 39, 41, 42, 43, 53, 57, 68, 76, 80, 91, 93, 94, 98, 345, 360, 368, 370, 372, 426, 558, 576, 591, 613, 630, 631, 632, 637, 656, 658, 722, 767, 788, 808, 810, 811, 814, 815, 816, 818, 820, 821, 823, 824, 825, 826, 827, 830, 831, 833, 834, 835, 836, 840, 841, 843, 845, 847, 848, 849, 850, 851, 852, 856, 857, 859, 860, 861, 864, 866, 868], "keep": [0, 1, 12, 14, 18, 24, 25, 27, 53, 60, 70, 76, 83, 93, 96, 356, 372, 447, 635, 709, 813, 814, 815, 816, 819, 822, 823, 824, 829, 836, 837, 840, 841, 843, 848, 850, 852, 860], "thing": [0, 25, 39, 41, 801, 813, 814, 815, 816, 821, 837, 840, 843, 847, 848, 855, 856, 857, 866], "super": [0, 3, 5, 12, 14, 27, 28, 41, 53, 76, 372, 426, 808, 829, 845, 848, 849, 850, 860], "seriou": 0, "given": [0, 3, 18, 27, 40, 53, 54, 59, 60, 62, 70, 76, 77, 78, 82, 83, 85, 93, 94, 96, 98, 99, 122, 126, 133, 134, 154, 155, 156, 157, 158, 170, 175, 194, 203, 207, 208, 209, 211, 215, 288, 318, 327, 330, 336, 337, 345, 346, 347, 349, 352, 365, 368, 371, 372, 373, 374, 377, 378, 383, 390, 391, 392, 393, 398, 399, 400, 403, 404, 405, 407, 408, 409, 410, 411, 416, 426, 431, 446, 450, 451, 452, 454, 455, 456, 457, 467, 468, 469, 476, 478, 490, 496, 500, 501, 502, 503, 504, 505, 506, 507, 508, 518, 519, 520, 521, 527, 549, 553, 572, 573, 583, 611, 612, 615, 617, 618, 619, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 691, 692, 693, 694, 695, 698, 699, 700, 701, 703, 704, 708, 709, 721, 722, 731, 732, 735, 736, 737, 739, 751, 752, 753, 754, 767, 772, 773, 774, 775, 780, 784, 785, 787, 788, 790, 791, 792, 793, 794, 801, 802, 811, 812, 814, 815, 816, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 840, 841, 843, 846, 847, 849, 856, 857, 863, 868, 869, 872, 873], "an": [0, 2, 3, 6, 9, 10, 16, 17, 18, 19, 20, 22, 23, 24, 25, 27, 28, 33, 39, 41, 42, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 70, 72, 73, 74, 75, 76, 77, 81, 82, 83, 85, 86, 87, 89, 90, 91, 93, 94, 98, 99, 106, 107, 108, 109, 110, 111, 112, 113, 114, 118, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 148, 149, 150, 151, 161, 164, 167, 171, 175, 176, 206, 210, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 299, 300, 301, 302, 303, 305, 306, 307, 309, 310, 312, 313, 314, 316, 317, 324, 325, 326, 327, 328, 329, 331, 332, 334, 337, 341, 346, 350, 355, 363, 365, 368, 371, 372, 373, 374, 377, 378, 381, 383, 384, 385, 386, 387, 388, 390, 391, 392, 393, 394, 395, 396, 397, 403, 405, 407, 408, 409, 410, 413, 414, 415, 416, 417, 418, 419, 420, 422, 425, 426, 427, 452, 453, 457, 458, 459, 460, 464, 465, 466, 468, 475, 479, 480, 486, 488, 492, 494, 495, 497, 498, 499, 502, 504, 505, 507, 510, 511, 516, 517, 518, 519, 520, 521, 522, 525, 526, 529, 534, 536, 537, 545, 548, 552, 553, 554, 556, 557, 558, 560, 561, 562, 563, 564, 567, 573, 576, 577, 586, 587, 591, 595, 596, 597, 610, 613, 620, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 654, 655, 656, 657, 659, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 687, 688, 689, 690, 691, 692, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 720, 733, 735, 739, 740, 741, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 767, 769, 772, 774, 775, 777, 780, 784, 785, 787, 788, 790, 791, 792, 793, 802, 806, 808, 810, 811, 812, 815, 816, 817, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 836, 837, 838, 840, 841, 842, 843, 845, 847, 848, 849, 850, 851, 852, 853, 856, 857, 858, 859, 860, 861, 862, 864, 865, 866, 867, 869, 870, 872, 873], "intern": [0, 10, 70, 101, 102, 103, 637, 714, 724, 725, 787, 788, 789, 790, 791, 793, 817, 820, 823, 826, 828, 836, 838, 840, 842], "releas": [0, 42, 814, 815, 825, 841, 843, 851, 857, 866, 872], "tracer": [0, 3, 5, 6, 8, 9, 19, 22, 23, 24, 25, 28, 44, 46, 808, 837, 844, 846, 851, 853, 860, 861, 862], "i": [0, 3, 4, 5, 6, 7, 8, 9, 10, 12, 14, 16, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 93, 94, 96, 98, 99, 106, 107, 108, 109, 110, 111, 112, 113, 114, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 148, 149, 150, 151, 152, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 176, 188, 190, 192, 193, 195, 196, 198, 200, 203, 208, 209, 210, 211, 212, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 311, 312, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 357, 358, 359, 363, 365, 368, 369, 371, 372, 373, 374, 377, 378, 381, 383, 384, 385, 387, 388, 390, 391, 392, 393, 394, 395, 396, 397, 400, 403, 405, 407, 408, 409, 410, 411, 414, 415, 416, 417, 418, 419, 423, 424, 425, 426, 428, 429, 430, 431, 433, 434, 438, 439, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 458, 459, 460, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 478, 479, 480, 481, 483, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, 511, 516, 517, 518, 519, 520, 521, 523, 524, 525, 526, 527, 528, 529, 530, 533, 534, 536, 537, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 551, 552, 553, 554, 556, 557, 558, 560, 561, 562, 563, 564, 565, 568, 569, 572, 573, 574, 576, 582, 586, 587, 588, 589, 591, 593, 595, 596, 597, 609, 610, 612, 613, 614, 615, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 720, 721, 722, 723, 724, 725, 726, 727, 731, 732, 733, 734, 735, 736, 737, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 769, 770, 772, 773, 774, 775, 780, 784, 785, 787, 788, 789, 790, 791, 792, 794, 797, 798, 801, 802, 806, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873], "around": [0, 11, 12, 14, 16, 53, 70, 76, 99, 374, 480, 488, 814, 816, 819, 820, 822, 826, 832, 833, 837, 840, 841, 847, 851, 853, 859, 863, 864, 866, 873], "corner": [0, 53, 76, 371, 407, 815, 816, 830, 837], "anybodi": 0, "abl": [0, 3, 5, 29, 33, 44, 46, 70, 93, 815, 816, 817, 819, 825, 830, 833, 836, 837, 841, 845, 850, 859, 869, 872], "start": [0, 1, 6, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 42, 43, 49, 53, 70, 72, 76, 80, 122, 130, 133, 134, 349, 359, 368, 369, 371, 374, 383, 414, 470, 473, 481, 483, 493, 527, 625, 774, 801, 806, 809, 814, 815, 816, 817, 818, 824, 825, 827, 828, 830, 831, 832, 837, 840, 843, 844, 845, 847, 848, 849, 851, 859, 860, 866, 872], "work": [0, 25, 27, 28, 39, 40, 42, 46, 48, 53, 76, 93, 383, 528, 633, 637, 684, 721, 722, 726, 731, 732, 808, 810, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 829, 830, 836, 837, 838, 840, 841, 844, 845, 847, 849, 850, 852, 857, 859, 860, 861, 864, 866, 868, 870, 873], "shortli": 0, "so": [0, 1, 5, 7, 9, 10, 12, 14, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 39, 41, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 93, 96, 98, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 125, 127, 129, 130, 132, 134, 135, 136, 137, 139, 141, 142, 145, 149, 150, 151, 164, 168, 169, 176, 193, 210, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 318, 325, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 363, 368, 371, 374, 381, 383, 390, 391, 392, 393, 395, 396, 397, 399, 403, 404, 405, 408, 409, 410, 414, 415, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 430, 432, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 503, 505, 506, 507, 508, 509, 510, 511, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 533, 534, 536, 537, 540, 541, 542, 543, 544, 545, 548, 549, 552, 554, 556, 557, 558, 560, 561, 562, 564, 565, 567, 572, 573, 587, 588, 589, 590, 591, 593, 595, 596, 609, 611, 612, 615, 617, 618, 619, 620, 632, 637, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 658, 662, 663, 664, 666, 667, 668, 669, 670, 671, 672, 673, 674, 679, 680, 681, 683, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 714, 725, 733, 734, 735, 736, 737, 739, 740, 741, 742, 743, 744, 745, 746, 747, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 762, 763, 764, 802, 808, 812, 814, 815, 816, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 840, 841, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 856, 859, 860, 861, 866, 867, 868, 870], "worri": [0, 27, 28, 814, 815, 831], "about": [0, 16, 17, 18, 21, 23, 25, 27, 28, 31, 42, 43, 50, 73, 161, 164, 626, 806, 808, 810, 813, 814, 815, 816, 817, 818, 819, 822, 824, 825, 826, 831, 832, 836, 838, 839, 840, 841, 842, 843, 844, 845, 847, 848, 849, 850, 851, 857, 861, 867, 868, 871], "have": [0, 1, 3, 4, 5, 7, 9, 10, 12, 14, 16, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 31, 39, 41, 43, 47, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 93, 94, 98, 99, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 144, 145, 148, 149, 150, 161, 210, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 325, 331, 332, 333, 334, 339, 340, 344, 346, 348, 349, 350, 351, 355, 358, 363, 365, 368, 371, 372, 373, 374, 377, 378, 379, 381, 383, 384, 385, 386, 387, 388, 390, 391, 392, 394, 395, 396, 397, 398, 399, 400, 404, 405, 407, 408, 409, 410, 413, 415, 416, 420, 422, 423, 425, 426, 431, 432, 437, 438, 439, 440, 445, 449, 450, 451, 452, 453, 454, 455, 459, 460, 465, 466, 468, 473, 481, 482, 483, 484, 486, 488, 490, 492, 493, 500, 501, 503, 504, 505, 507, 508, 509, 511, 518, 519, 520, 521, 525, 529, 536, 537, 541, 542, 543, 548, 549, 558, 572, 573, 576, 611, 612, 615, 617, 618, 619, 620, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 687, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 705, 706, 707, 708, 710, 733, 734, 735, 736, 737, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 752, 753, 754, 756, 757, 758, 759, 760, 761, 762, 763, 764, 772, 784, 785, 787, 788, 790, 791, 792, 793, 801, 802, 808, 810, 811, 812, 814, 815, 816, 817, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 840, 841, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 859, 861, 862, 863, 864, 865, 866, 868, 872, 873, 874], "access": [0, 24, 27, 28, 70, 808, 814, 815, 816, 824, 825, 831, 836, 837, 852, 860, 866, 868, 870], "transpil": [0, 6, 7, 8, 9, 11, 16, 17, 19, 20, 30, 779, 780, 814, 815, 829, 830, 837, 844, 845, 846, 853, 858, 859, 861, 866, 872, 873], "code": [0, 4, 7, 8, 9, 16, 17, 24, 25, 27, 29, 30, 31, 32, 33, 34, 41, 42, 51, 52, 70, 74, 75, 99, 210, 256, 383, 525, 534, 542, 543, 558, 572, 576, 591, 627, 630, 632, 633, 635, 654, 675, 676, 677, 706, 806, 808, 811, 813, 814, 815, 816, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 829, 830, 832, 833, 834, 836, 837, 838, 840, 843, 844, 845, 846, 847, 848, 849, 850, 851, 853, 855, 856, 857, 858, 859, 860, 861, 862, 864, 865, 866, 867, 869, 870, 871, 872, 873], "now": [0, 4, 7, 9, 10, 12, 14, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 39, 41, 43, 788, 789, 790, 808, 815, 819, 820, 821, 822, 823, 824, 825, 826, 830, 832, 834, 837, 838, 840, 841, 843, 847, 848, 850, 851, 857, 859, 860, 861, 866], "you": [0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 12, 14, 16, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 39, 40, 41, 42, 43, 44, 45, 46, 53, 54, 76, 77, 93, 98, 99, 374, 383, 468, 525, 548, 549, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 659, 784, 785, 787, 788, 790, 791, 792, 793, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 859, 860, 861, 866, 874], "can": [0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 12, 14, 16, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 39, 40, 41, 42, 43, 46, 49, 50, 53, 54, 58, 60, 62, 64, 72, 73, 76, 77, 81, 83, 85, 87, 93, 94, 108, 111, 123, 124, 134, 136, 151, 190, 207, 208, 209, 298, 315, 363, 365, 371, 372, 373, 374, 377, 378, 381, 383, 394, 407, 431, 438, 440, 445, 453, 465, 492, 497, 505, 506, 511, 518, 565, 576, 610, 613, 622, 625, 626, 627, 630, 631, 632, 633, 635, 639, 659, 667, 673, 683, 687, 702, 706, 735, 736, 737, 745, 769, 772, 773, 774, 775, 780, 802, 808, 809, 810, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 859, 860, 861, 863, 864, 865, 866, 867, 869, 870, 872, 873], "style": [0, 10, 41, 43, 374, 480, 640, 743, 816, 831, 866], "stori": 0, "If": [0, 1, 3, 4, 6, 9, 10, 12, 14, 16, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 33, 42, 45, 46, 48, 49, 50, 52, 53, 54, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 94, 106, 107, 108, 109, 110, 111, 112, 113, 114, 119, 122, 123, 124, 126, 127, 128, 130, 131, 132, 133, 134, 135, 137, 138, 139, 141, 142, 143, 144, 145, 148, 149, 150, 151, 176, 192, 208, 210, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 247, 248, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 299, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 324, 325, 327, 330, 331, 332, 333, 334, 336, 337, 338, 342, 346, 347, 352, 353, 355, 357, 358, 359, 365, 368, 369, 371, 372, 373, 374, 377, 378, 383, 384, 390, 391, 392, 393, 394, 395, 396, 397, 400, 403, 405, 407, 408, 409, 410, 415, 416, 417, 419, 424, 426, 428, 430, 431, 438, 440, 442, 443, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 458, 459, 460, 464, 465, 466, 468, 469, 470, 471, 472, 475, 479, 485, 486, 487, 488, 489, 490, 492, 494, 495, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 517, 518, 519, 520, 521, 523, 524, 525, 526, 527, 528, 529, 530, 533, 534, 536, 537, 541, 542, 543, 544, 545, 548, 549, 551, 552, 553, 554, 556, 557, 558, 560, 561, 564, 565, 572, 573, 577, 587, 588, 589, 591, 593, 595, 596, 609, 610, 613, 615, 620, 622, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 655, 656, 659, 662, 663, 664, 666, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 685, 687, 688, 689, 690, 692, 693, 694, 695, 696, 698, 699, 700, 702, 703, 704, 705, 706, 707, 709, 710, 711, 712, 713, 726, 727, 734, 735, 736, 737, 739, 740, 741, 742, 743, 745, 746, 747, 748, 749, 751, 752, 753, 754, 756, 757, 758, 759, 760, 761, 762, 763, 764, 769, 772, 773, 774, 787, 788, 790, 791, 797, 802, 806, 808, 809, 810, 811, 812, 814, 815, 816, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 843, 844, 845, 847, 848, 850, 851, 852, 855, 859, 860, 861], "anyon": [0, 808, 809, 816, 824, 851, 856, 872], "ha": [0, 3, 5, 6, 8, 9, 10, 12, 14, 18, 20, 24, 27, 28, 30, 33, 35, 39, 46, 49, 53, 58, 60, 64, 66, 70, 73, 76, 77, 81, 83, 87, 89, 93, 135, 192, 216, 236, 239, 241, 243, 253, 269, 271, 276, 279, 281, 282, 286, 326, 327, 328, 365, 372, 373, 374, 383, 407, 442, 452, 463, 487, 489, 494, 517, 519, 520, 522, 554, 625, 627, 628, 632, 633, 635, 640, 641, 643, 658, 659, 673, 674, 682, 683, 685, 687, 690, 698, 705, 743, 746, 747, 748, 753, 754, 757, 759, 760, 761, 762, 772, 775, 797, 814, 816, 819, 821, 822, 823, 824, 825, 826, 827, 828, 833, 834, 835, 836, 837, 838, 840, 841, 843, 845, 846, 847, 849, 850, 851, 852, 855, 856, 857, 859, 861, 862, 865, 866, 868, 869, 872], "ani": [0, 5, 8, 12, 14, 16, 17, 18, 19, 20, 29, 30, 33, 39, 40, 41, 42, 43, 45, 46, 48, 49, 51, 52, 53, 54, 58, 67, 68, 72, 74, 75, 76, 77, 90, 91, 93, 98, 99, 118, 119, 121, 122, 123, 124, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 151, 152, 167, 171, 175, 210, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 236, 237, 239, 241, 242, 243, 247, 248, 249, 250, 251, 252, 256, 258, 259, 260, 261, 263, 264, 265, 266, 269, 271, 272, 273, 274, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 309, 324, 325, 331, 332, 334, 337, 365, 368, 371, 372, 373, 374, 377, 383, 390, 391, 392, 393, 395, 396, 397, 403, 408, 409, 410, 415, 416, 417, 426, 431, 448, 469, 480, 488, 492, 497, 498, 499, 518, 521, 524, 525, 526, 530, 540, 541, 542, 543, 544, 548, 552, 554, 556, 560, 562, 563, 581, 587, 589, 596, 597, 604, 610, 620, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 654, 655, 656, 659, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 689, 690, 691, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 717, 720, 721, 723, 724, 731, 733, 737, 740, 741, 743, 744, 745, 746, 747, 748, 749, 752, 756, 757, 758, 759, 760, 761, 762, 763, 767, 770, 774, 784, 785, 787, 788, 790, 791, 792, 793, 797, 801, 802, 808, 809, 810, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 840, 841, 842, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 859, 860, 861, 863, 864, 865, 866, 867, 869, 872, 873], "question": [0, 98, 99, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 784, 785, 787, 788, 790, 791, 792, 793, 808, 812, 814, 815, 816, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 840, 841, 843, 845, 846, 847, 848, 849, 850, 851, 855, 856, 857], "ping": 0, "me": [0, 816], "guillermo": 0, "commun": [0, 42, 809, 814, 815, 816, 817, 851, 856, 865, 866, 868], "ux": 0, "team": [0, 808, 809, 811, 814, 815, 816, 817, 837, 852, 868], "discord": [0, 42, 98, 99, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 784, 785, 787, 788, 790, 791, 792, 793, 808, 812, 814, 815, 816, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 843, 845, 846, 847, 848, 849, 850, 852, 855, 856, 857], "channel": [0, 25, 43, 53, 54, 57, 76, 77, 80, 98, 99, 371, 377, 395, 396, 397, 407, 497, 498, 499, 502, 541, 545, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 654, 784, 785, 787, 788, 790, 791, 792, 793, 816, 822, 830, 839], "To": [0, 6, 8, 9, 10, 12, 14, 18, 22, 23, 24, 25, 27, 28, 39, 42, 43, 44, 94, 243, 373, 452, 582, 628, 630, 787, 814, 815, 819, 820, 821, 822, 825, 827, 829, 830, 831, 833, 834, 837, 838, 839, 840, 841, 848, 849, 850, 852, 859, 860], "ensur": [0, 8, 9, 12, 14, 22, 23, 24, 25, 53, 54, 76, 77, 371, 372, 408, 409, 410, 443, 558, 630, 767, 808, 811, 814, 815, 816, 820, 825, 826, 827, 829, 831, 832, 834, 836, 837, 838, 839, 840, 841, 852, 866], "similar": [0, 18, 27, 28, 53, 278, 373, 448, 628, 632, 659, 788, 812, 814, 815, 823, 824, 825, 826, 829, 830, 831, 833, 834, 835, 837, 838, 840, 841, 848, 851, 855, 860, 862, 863, 864, 865, 872], "ar": [0, 1, 3, 4, 6, 7, 8, 9, 10, 12, 14, 16, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 39, 41, 42, 44, 45, 48, 49, 52, 53, 54, 57, 58, 60, 62, 63, 64, 70, 72, 75, 76, 77, 80, 81, 83, 85, 86, 87, 93, 94, 98, 99, 122, 132, 134, 137, 143, 197, 202, 204, 209, 233, 235, 236, 239, 243, 264, 265, 269, 274, 275, 279, 281, 286, 287, 288, 324, 326, 327, 328, 330, 333, 335, 336, 337, 341, 342, 347, 352, 355, 359, 364, 365, 366, 367, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 380, 383, 387, 388, 394, 395, 396, 397, 400, 405, 407, 415, 416, 425, 426, 430, 440, 441, 443, 447, 448, 449, 453, 454, 458, 459, 460, 470, 471, 472, 474, 480, 483, 487, 488, 497, 499, 504, 505, 506, 507, 508, 518, 523, 524, 525, 526, 527, 528, 530, 533, 534, 535, 544, 550, 555, 559, 570, 571, 580, 591, 603, 613, 625, 627, 628, 630, 631, 632, 633, 635, 637, 639, 640, 641, 655, 656, 657, 659, 662, 664, 668, 669, 670, 673, 674, 676, 679, 680, 683, 684, 688, 689, 690, 695, 696, 699, 703, 705, 715, 720, 725, 726, 727, 735, 736, 737, 740, 741, 742, 743, 745, 747, 767, 769, 772, 773, 774, 775, 780, 787, 790, 793, 794, 801, 802, 805, 806, 808, 809, 810, 811, 812, 813, 814, 815, 816, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 859, 860, 861, 862, 863, 866, 867, 868, 869, 870, 871, 872, 873, 874], "across": [0, 8, 9, 10, 22, 23, 24, 25, 39, 53, 63, 70, 76, 77, 86, 98, 207, 208, 236, 243, 269, 287, 373, 377, 448, 499, 502, 533, 554, 590, 627, 628, 630, 632, 637, 640, 655, 659, 720, 740, 741, 788, 814, 819, 825, 827, 829, 832, 833, 835, 840, 843, 864, 866, 871], "templat": [0, 808, 822, 828, 840], "help": [0, 16, 43, 45, 50, 531, 576, 630, 643, 761, 787, 808, 809, 810, 814, 815, 817, 820, 821, 822, 823, 824, 825, 827, 831, 833, 834, 836, 837, 840, 841, 847, 848, 849, 852, 853, 862, 866, 868, 872], "get": [0, 3, 4, 6, 7, 8, 9, 10, 12, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 41, 42, 44, 50, 51, 58, 70, 74, 81, 98, 159, 160, 161, 164, 192, 193, 194, 197, 203, 208, 211, 215, 374, 485, 532, 550, 571, 590, 626, 627, 630, 633, 637, 690, 716, 772, 787, 788, 801, 809, 811, 813, 814, 815, 817, 818, 819, 824, 825, 826, 830, 833, 834, 835, 836, 837, 838, 839, 840, 845, 846, 847, 848, 849, 853, 857, 860, 861, 866, 872], "It": [0, 3, 6, 9, 10, 19, 22, 23, 24, 25, 27, 28, 29, 30, 39, 40, 41, 46, 47, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 69, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 93, 98, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 137, 138, 139, 140, 141, 142, 144, 145, 148, 150, 210, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 247, 248, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 325, 331, 332, 333, 334, 339, 340, 344, 346, 348, 349, 350, 351, 355, 363, 365, 368, 371, 372, 373, 374, 377, 378, 383, 384, 390, 391, 392, 394, 395, 396, 397, 398, 399, 400, 404, 405, 407, 408, 409, 410, 413, 415, 420, 422, 423, 431, 432, 437, 438, 439, 440, 448, 449, 450, 451, 452, 454, 455, 465, 468, 473, 481, 482, 483, 484, 486, 488, 492, 493, 497, 500, 501, 503, 504, 505, 507, 508, 518, 519, 520, 521, 529, 536, 537, 541, 542, 543, 548, 549, 558, 572, 573, 574, 611, 612, 615, 617, 618, 619, 620, 622, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 659, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 673, 674, 676, 677, 678, 679, 682, 684, 685, 687, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 705, 706, 707, 708, 710, 713, 733, 734, 735, 736, 737, 739, 740, 741, 742, 744, 748, 749, 752, 753, 754, 757, 759, 760, 762, 763, 764, 787, 788, 808, 811, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 827, 828, 834, 836, 837, 838, 839, 840, 841, 842, 843, 845, 847, 848, 849, 858, 861, 864, 866, 867, 869, 870, 871, 872, 873], "locat": [0, 43, 137, 383, 519, 625, 637, 639, 642, 718, 734, 751, 802, 814, 816, 821, 822, 826, 837, 838, 840, 841, 852, 864], "asset": [0, 853], "01_templat": 0, "ipynb": 0, "pleas": [0, 33, 42, 46, 98, 99, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 784, 785, 787, 788, 790, 791, 792, 793, 808, 812, 814, 815, 816, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 843, 845, 846, 847, 848, 849, 850, 852, 855, 856, 857], "make": [0, 3, 5, 7, 8, 9, 10, 19, 27, 28, 29, 41, 45, 53, 76, 371, 415, 797, 808, 811, 814, 815, 816, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 840, 841, 843, 845, 847, 848, 850, 852, 856, 857, 860, 864, 866, 867, 868, 869, 872, 873], "copi": [0, 43, 46, 49, 50, 51, 52, 53, 54, 60, 70, 72, 73, 74, 75, 76, 77, 83, 93, 97, 123, 124, 125, 129, 140, 148, 210, 270, 374, 456, 458, 459, 460, 466, 468, 470, 471, 472, 475, 479, 486, 495, 551, 577, 588, 595, 596, 625, 626, 627, 628, 630, 635, 637, 642, 698, 699, 700, 702, 704, 705, 707, 709, 715, 750, 752, 780, 802, 815, 816, 819, 821, 824, 825, 828, 837, 838, 845, 851, 859, 860, 861], "firstli": [0, 19, 20, 23, 29, 30, 34, 39, 820, 825, 827, 828, 829, 833, 834, 836, 843, 848, 862, 872], "updat": [0, 4, 5, 6, 7, 9, 10, 19, 21, 22, 23, 24, 25, 27, 28, 41, 43, 48, 54, 55, 70, 77, 78, 93, 374, 485, 558, 572, 573, 576, 577, 600, 611, 612, 615, 617, 618, 619, 630, 631, 632, 636, 637, 655, 658, 711, 712, 713, 721, 722, 726, 731, 732, 780, 785, 791, 792, 797, 802, 808, 814, 815, 816, 818, 819, 820, 823, 824, 825, 827, 832, 834, 835, 837, 838, 840, 843, 845, 847, 848, 850, 851], "file": [0, 6, 41, 42, 43, 54, 70, 585, 608, 630, 790, 806, 810, 814, 815, 816, 819, 820, 821, 822, 823, 824, 826, 828, 829, 830, 831, 833, 837, 838, 839, 840, 841, 845, 848, 852, 862, 865, 866, 867], "name": [0, 6, 7, 27, 28, 39, 41, 42, 43, 53, 58, 64, 68, 76, 81, 87, 91, 243, 371, 372, 374, 419, 425, 434, 490, 494, 531, 532, 628, 630, 633, 641, 668, 669, 680, 681, 683, 684, 688, 745, 746, 747, 769, 773, 780, 790, 797, 798, 800, 806, 814, 815, 816, 821, 822, 823, 824, 827, 828, 829, 832, 837, 838, 840, 841, 842, 843, 845, 848, 850, 866, 874], "match": [0, 50, 53, 70, 73, 76, 148, 243, 278, 335, 337, 368, 371, 373, 374, 416, 448, 463, 485, 489, 568, 626, 628, 630, 633, 669, 670, 674, 690, 767, 812, 814, 820, 822, 823, 827, 830, 838, 867, 872], "topic": [0, 16, 19, 20, 21, 29, 30, 31, 32, 33, 34, 834, 847, 866], "your": [0, 2, 3, 4, 6, 7, 9, 10, 12, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 31, 39, 41, 43, 45, 808, 809, 811, 812, 813, 814, 815, 817, 819, 821, 822, 824, 828, 830, 831, 835, 837, 839, 841, 843, 848, 849, 851, 852, 856, 857, 859, 860, 866, 874], "Then": [0, 46, 632, 659, 810, 814, 815, 816, 821, 822, 824, 830, 831, 834, 836, 840, 841, 851], "place": [0, 8, 9, 22, 23, 24, 25, 41, 48, 49, 52, 53, 54, 58, 60, 70, 72, 74, 75, 76, 77, 81, 83, 122, 123, 124, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 151, 167, 171, 210, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 236, 237, 239, 241, 242, 243, 247, 248, 249, 250, 251, 252, 253, 256, 258, 259, 260, 261, 263, 264, 265, 266, 269, 270, 271, 272, 273, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 308, 309, 312, 324, 325, 330, 331, 332, 334, 337, 338, 339, 340, 344, 346, 347, 348, 349, 351, 352, 353, 357, 358, 365, 368, 371, 372, 374, 383, 390, 391, 392, 393, 395, 396, 397, 403, 408, 409, 410, 415, 417, 426, 470, 480, 485, 488, 492, 505, 518, 521, 525, 534, 542, 543, 548, 552, 554, 556, 557, 558, 572, 576, 587, 591, 596, 600, 620, 625, 626, 627, 628, 630, 631, 632, 633, 635, 638, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 654, 655, 656, 659, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 689, 690, 691, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 733, 740, 741, 743, 744, 745, 746, 747, 748, 749, 752, 756, 757, 758, 759, 760, 761, 762, 763, 764, 792, 808, 812, 813, 816, 818, 819, 822, 823, 824, 826, 827, 828, 830, 832, 833, 837, 838, 840, 841, 843, 850, 853, 868], "its": [0, 9, 18, 20, 27, 28, 30, 33, 40, 41, 43, 48, 50, 53, 60, 70, 73, 76, 77, 83, 96, 108, 111, 114, 119, 149, 154, 155, 156, 157, 158, 209, 236, 269, 288, 298, 363, 371, 374, 383, 411, 419, 492, 494, 521, 545, 594, 622, 624, 626, 627, 628, 630, 633, 635, 637, 673, 698, 702, 703, 707, 720, 769, 802, 808, 814, 815, 820, 823, 824, 825, 826, 828, 829, 830, 834, 835, 836, 837, 838, 840, 841, 842, 843, 845, 850, 851, 853, 859, 865, 866, 872], "folder": [0, 8, 9, 22, 23, 24, 25, 43, 808, 815, 816, 819, 822, 824, 830, 833, 837, 840, 841, 842], "next": [0, 5, 19, 20, 21, 22, 23, 24, 25, 29, 30, 31, 32, 33, 34, 41, 43, 53, 76, 161, 344, 348, 353, 357, 368, 626, 787, 792, 808, 814, 815, 816, 821, 825, 827, 828, 830, 831, 834, 846, 847, 848, 857, 866, 868], "edit": [0, 814, 815, 816, 831], "titl": [0, 10, 13, 15, 26, 42, 45, 808, 814, 816, 822], "descript": [0, 1, 36, 37, 38, 43, 46, 49, 52, 53, 58, 75, 76, 81, 122, 123, 124, 126, 127, 128, 129, 131, 132, 133, 134, 135, 138, 139, 140, 141, 142, 144, 145, 151, 167, 171, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 236, 237, 239, 241, 242, 243, 247, 248, 249, 250, 251, 252, 253, 256, 258, 259, 260, 261, 263, 264, 265, 266, 269, 271, 272, 273, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 309, 325, 331, 332, 334, 337, 365, 368, 371, 372, 374, 383, 390, 391, 392, 393, 395, 396, 397, 403, 408, 409, 410, 415, 417, 426, 480, 488, 492, 518, 521, 548, 552, 554, 556, 587, 596, 620, 625, 626, 628, 630, 631, 632, 633, 635, 638, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 654, 655, 656, 659, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 689, 690, 691, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 733, 740, 741, 743, 744, 745, 746, 747, 748, 749, 752, 756, 757, 758, 759, 760, 761, 762, 763, 764, 814, 816, 828, 835, 836], "accordingli": [0, 53, 58, 63, 64, 66, 67, 76, 81, 86, 89, 90, 135, 236, 241, 243, 259, 269, 283, 331, 332, 368, 625, 628, 633, 640, 641, 643, 644, 690, 741, 745, 746, 747, 748, 756, 757, 758, 759, 760, 761, 762, 763, 764, 837, 845, 852], "thei": [0, 10, 34, 39, 44, 53, 58, 62, 64, 70, 81, 85, 87, 174, 288, 342, 368, 626, 628, 632, 633, 636, 639, 641, 657, 688, 711, 712, 734, 745, 767, 793, 808, 813, 814, 815, 818, 819, 821, 822, 823, 824, 825, 826, 827, 829, 831, 833, 834, 836, 837, 840, 841, 843, 845, 847, 848, 849, 850, 851, 859, 863, 866, 868, 869, 872, 873], "render": [0, 822, 828], "correctli": [0, 24, 27, 28, 41, 53, 58, 63, 76, 81, 86, 336, 368, 383, 524, 525, 526, 527, 528, 633, 640, 674, 740, 814, 815, 816, 820, 823, 825, 827, 829, 831, 832, 838, 840, 843, 849, 851, 859, 860], "webpag": [0, 16], "content": [0, 1, 13, 15, 26, 27, 42, 43, 53, 70, 76, 383, 525, 814, 816, 822, 826, 836, 839, 845, 848, 852], "behind": [0, 18, 27, 808, 818, 832, 840, 844, 846], "exist": [0, 18, 27, 28, 41, 42, 43, 46, 49, 53, 54, 70, 72, 76, 77, 83, 124, 374, 458, 459, 465, 466, 468, 470, 471, 472, 479, 495, 540, 576, 630, 635, 696, 698, 699, 700, 702, 704, 705, 707, 709, 792, 794, 806, 808, 814, 815, 819, 821, 826, 827, 828, 833, 834, 836, 837, 840, 843, 845, 851, 853, 855, 856, 864, 866, 869, 872], "cell": [0, 1, 3, 4, 5, 8, 9, 10, 12, 14, 18, 19, 20, 21, 22, 23, 24, 25, 28, 42, 57, 80, 632, 657, 658, 788, 824, 845], "where": [0, 7, 20, 24, 30, 31, 35, 43, 49, 52, 53, 54, 58, 60, 62, 63, 66, 67, 70, 72, 75, 76, 77, 81, 83, 85, 86, 89, 90, 93, 94, 131, 132, 135, 137, 143, 224, 234, 236, 239, 241, 243, 244, 253, 258, 259, 260, 267, 268, 269, 274, 276, 280, 282, 286, 296, 298, 324, 326, 327, 328, 343, 347, 354, 363, 365, 368, 371, 372, 373, 374, 377, 378, 383, 385, 386, 387, 388, 394, 399, 400, 404, 419, 425, 426, 430, 431, 433, 434, 441, 447, 448, 449, 458, 459, 460, 474, 480, 497, 498, 499, 502, 504, 505, 507, 508, 518, 526, 527, 528, 558, 572, 610, 625, 628, 630, 632, 633, 635, 637, 639, 640, 643, 644, 657, 659, 664, 668, 669, 674, 676, 678, 679, 680, 683, 684, 687, 689, 695, 697, 698, 700, 706, 710, 718, 725, 734, 735, 736, 737, 742, 743, 758, 760, 762, 763, 764, 772, 787, 791, 802, 806, 808, 809, 812, 815, 816, 817, 819, 820, 821, 822, 823, 825, 826, 828, 829, 833, 834, 835, 836, 837, 838, 840, 841, 843, 845, 848, 849, 850, 851, 852, 855, 856, 857, 859, 864, 873], "The": [0, 3, 5, 6, 7, 8, 9, 10, 16, 18, 19, 20, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 40, 41, 43, 44, 45, 48, 49, 50, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 93, 94, 96, 98, 99, 102, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 118, 119, 121, 122, 129, 130, 132, 134, 137, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 151, 153, 154, 155, 156, 157, 158, 160, 162, 163, 164, 166, 168, 169, 170, 173, 174, 176, 177, 179, 180, 181, 182, 188, 189, 190, 191, 192, 194, 195, 196, 197, 202, 203, 204, 205, 207, 208, 209, 210, 211, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 344, 346, 347, 348, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 362, 363, 365, 368, 369, 370, 371, 372, 373, 374, 377, 378, 379, 383, 385, 386, 387, 388, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 403, 404, 405, 407, 408, 409, 410, 411, 413, 414, 415, 416, 418, 419, 422, 423, 424, 425, 426, 428, 430, 442, 443, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 467, 469, 470, 471, 472, 476, 479, 480, 485, 486, 488, 489, 490, 491, 492, 496, 497, 498, 499, 500, 501, 502, 503, 505, 506, 507, 509, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 530, 531, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 552, 553, 554, 556, 557, 558, 560, 561, 562, 563, 564, 567, 569, 572, 573, 576, 578, 579, 582, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 609, 611, 612, 615, 617, 618, 619, 620, 622, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 659, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 687, 688, 689, 690, 692, 693, 694, 695, 696, 697, 699, 700, 701, 702, 703, 704, 705, 706, 708, 709, 710, 711, 712, 713, 714, 715, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 729, 730, 731, 732, 733, 734, 735, 736, 737, 739, 740, 741, 742, 743, 745, 746, 747, 748, 749, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 767, 769, 772, 774, 775, 780, 784, 785, 787, 788, 790, 791, 792, 797, 801, 802, 808, 809, 810, 812, 814, 817, 819, 820, 821, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 836, 838, 840, 841, 843, 844, 845, 848, 849, 850, 852, 853, 854, 855, 857, 859, 860, 861, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874], "h2": [0, 1, 13, 15, 26], "tag": [0, 1, 13, 15, 26, 815, 816], "section": [0, 1, 9, 10, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 32, 33, 34, 47, 53, 64, 76, 108, 371, 374, 405, 416, 466, 475, 495, 641, 745, 746, 747, 748, 808, 809, 812, 813, 814, 815, 816, 818, 819, 820, 821, 822, 823, 824, 825, 826, 828, 829, 830, 831, 832, 833, 834, 836, 837, 838, 839, 840, 841, 843, 844, 848, 849, 861, 862, 869, 872], "h3": [0, 1, 13, 15, 26], "subsect": [0, 1, 13, 15, 26, 814, 815, 816, 819, 824], "step": [0, 1, 13, 14, 15, 26, 27, 28, 39, 41, 42, 43, 53, 55, 72, 76, 78, 122, 133, 371, 374, 417, 419, 474, 611, 612, 615, 617, 618, 619, 625, 631, 636, 711, 712, 713, 792, 806, 808, 814, 815, 816, 817, 820, 821, 823, 824, 825, 826, 827, 830, 835, 837, 840, 845, 848, 849, 850, 857, 866], "explan": [0, 1, 13, 15, 26, 814, 815, 816, 823, 828, 832, 837, 841, 847], "go": [0, 4, 12, 14, 18, 25, 28, 33, 48, 53, 76, 80, 371, 414, 418, 637, 725, 726, 808, 809, 812, 814, 815, 816, 818, 821, 822, 825, 827, 830, 831, 837, 838, 840, 841, 844, 848, 851, 862, 866, 867, 871, 873], "default": [0, 3, 5, 6, 27, 28, 41, 42, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 96, 99, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 148, 149, 150, 151, 154, 155, 156, 157, 158, 159, 162, 163, 164, 165, 168, 169, 174, 176, 177, 178, 179, 180, 181, 183, 184, 185, 186, 187, 192, 193, 195, 196, 200, 203, 204, 205, 207, 208, 209, 210, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 319, 320, 321, 322, 323, 324, 325, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 363, 365, 368, 369, 371, 372, 373, 374, 377, 378, 379, 381, 383, 384, 386, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 403, 404, 405, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 426, 428, 430, 431, 432, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 458, 459, 460, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 480, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 511, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 533, 534, 536, 537, 541, 542, 543, 544, 545, 546, 547, 548, 549, 551, 552, 553, 554, 556, 557, 558, 560, 561, 564, 565, 568, 569, 572, 573, 576, 577, 582, 586, 587, 588, 589, 591, 593, 595, 596, 609, 610, 611, 612, 613, 614, 615, 617, 618, 619, 620, 622, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 673, 674, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 720, 721, 722, 724, 725, 726, 727, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 767, 769, 772, 773, 774, 775, 780, 784, 785, 787, 788, 789, 790, 791, 792, 793, 801, 802, 806, 814, 815, 816, 821, 822, 825, 826, 827, 828, 829, 832, 833, 837, 840, 843, 845, 849, 853, 859, 866], "which": [0, 3, 6, 9, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 40, 41, 42, 43, 44, 45, 47, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 93, 96, 99, 106, 107, 108, 109, 110, 111, 112, 113, 114, 122, 123, 124, 126, 127, 128, 130, 131, 132, 133, 134, 136, 137, 138, 139, 141, 142, 143, 144, 145, 149, 151, 153, 159, 161, 164, 166, 169, 176, 188, 193, 197, 202, 204, 207, 208, 209, 210, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 247, 248, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 299, 300, 301, 302, 303, 305, 306, 307, 308, 309, 318, 321, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 342, 344, 346, 347, 348, 349, 351, 352, 353, 355, 357, 358, 359, 360, 361, 362, 363, 365, 368, 369, 370, 371, 372, 373, 374, 377, 378, 381, 383, 394, 395, 396, 397, 399, 400, 404, 405, 414, 415, 416, 418, 423, 426, 438, 441, 442, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 458, 459, 460, 464, 465, 485, 486, 487, 488, 489, 490, 492, 497, 499, 500, 501, 503, 504, 505, 506, 507, 508, 510, 511, 518, 519, 520, 521, 523, 524, 525, 526, 527, 528, 530, 531, 533, 534, 536, 537, 540, 541, 542, 543, 544, 545, 548, 549, 550, 551, 552, 553, 554, 556, 557, 558, 560, 561, 564, 565, 570, 571, 572, 573, 587, 588, 589, 591, 593, 595, 596, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 623, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 637, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 655, 656, 657, 659, 662, 663, 664, 666, 667, 669, 670, 671, 672, 673, 674, 676, 677, 678, 680, 681, 682, 683, 687, 689, 690, 692, 693, 694, 695, 696, 698, 699, 701, 702, 703, 704, 705, 706, 709, 710, 719, 720, 721, 722, 727, 729, 730, 731, 732, 734, 735, 736, 737, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 752, 753, 754, 756, 757, 758, 759, 760, 761, 762, 763, 764, 769, 772, 773, 774, 784, 785, 787, 788, 789, 790, 791, 792, 793, 797, 798, 804, 806, 808, 810, 812, 814, 815, 816, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 840, 841, 842, 843, 844, 845, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 859, 860, 862, 863, 864, 865, 866, 867, 869, 871, 872, 873], "text": [0, 4, 8, 10, 41, 53, 54, 372, 373, 440, 448, 814, 816, 822, 827, 828], "paragraph": [0, 1, 13, 15, 26, 822], "p": [0, 1, 13, 15, 26, 39, 53, 54, 58, 76, 77, 81, 94, 135, 240, 372, 377, 422, 435, 503, 536, 537, 625, 628, 630, 633, 637, 674, 690, 722, 788, 808, 815, 816, 818], "without": [0, 3, 10, 30, 39, 43, 46, 64, 70, 96, 582, 597, 630, 635, 637, 641, 702, 715, 745, 746, 747, 748, 772, 775, 801, 815, 816, 820, 821, 823, 824, 825, 826, 827, 829, 832, 833, 837, 840, 841, 843, 847, 848, 849, 851, 859, 863, 866, 867, 868, 872], "path": [0, 8, 9, 10, 22, 23, 24, 25, 42, 43, 769, 780, 796, 815, 822, 836, 837, 838, 852, 866], "correspond": [0, 3, 7, 9, 14, 27, 28, 42, 50, 52, 53, 54, 57, 60, 63, 64, 66, 70, 73, 75, 76, 80, 83, 89, 93, 96, 99, 149, 161, 164, 224, 274, 288, 327, 341, 342, 365, 368, 371, 372, 374, 377, 383, 394, 400, 411, 416, 422, 425, 426, 427, 446, 471, 472, 492, 497, 498, 499, 502, 519, 520, 588, 610, 626, 628, 630, 632, 633, 635, 639, 640, 641, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 659, 664, 668, 669, 674, 681, 682, 702, 703, 734, 740, 741, 745, 746, 747, 748, 753, 754, 759, 760, 761, 762, 769, 772, 774, 801, 806, 808, 814, 816, 820, 821, 823, 824, 825, 827, 828, 829, 832, 833, 835, 837, 840, 843, 845, 859, 860, 861, 866], "toctre": [0, 822], "index": [0, 41, 42, 43, 46, 49, 53, 54, 60, 63, 64, 65, 70, 72, 76, 77, 83, 86, 87, 88, 128, 135, 309, 316, 317, 326, 327, 328, 365, 371, 372, 374, 379, 381, 383, 394, 400, 431, 433, 440, 463, 470, 473, 481, 483, 485, 488, 489, 492, 493, 509, 510, 519, 528, 531, 549, 551, 572, 573, 577, 623, 625, 630, 635, 637, 640, 641, 642, 702, 706, 716, 717, 718, 721, 722, 723, 729, 731, 740, 741, 743, 745, 746, 747, 749, 751, 773, 788, 802, 804, 823, 824, 829, 833, 834, 835, 836, 838, 840, 847, 866], "rst": [0, 833], "left": [0, 20, 30, 41, 42, 53, 58, 63, 65, 76, 81, 86, 88, 116, 117, 228, 243, 336, 352, 359, 368, 369, 371, 372, 374, 383, 406, 425, 430, 436, 443, 445, 471, 481, 523, 524, 525, 526, 527, 528, 541, 624, 628, 630, 633, 640, 642, 668, 669, 674, 683, 688, 740, 751, 772, 815, 816, 819, 822, 824, 825, 827, 830], "mai": [0, 51, 52, 53, 58, 64, 65, 74, 75, 81, 88, 98, 99, 122, 129, 140, 210, 236, 237, 243, 248, 256, 264, 265, 269, 270, 272, 287, 331, 332, 368, 400, 540, 576, 625, 627, 628, 630, 633, 641, 642, 643, 681, 690, 745, 746, 747, 748, 749, 752, 756, 757, 758, 760, 772, 802, 813, 814, 815, 816, 819, 823, 824, 825, 829, 830, 833, 834, 835, 837, 838, 840, 843, 846, 847, 849, 857, 873], "need": [0, 3, 7, 9, 16, 18, 24, 25, 27, 28, 41, 42, 43, 53, 54, 60, 76, 77, 83, 371, 372, 383, 394, 399, 400, 404, 425, 525, 536, 537, 558, 630, 632, 633, 635, 637, 659, 668, 695, 698, 725, 773, 808, 810, 814, 815, 816, 819, 820, 821, 822, 823, 824, 825, 827, 828, 829, 830, 831, 833, 834, 835, 836, 837, 838, 839, 841, 843, 845, 847, 848, 851, 852, 857, 859, 860, 862, 866, 867, 868, 872], "add": [0, 20, 30, 43, 45, 52, 53, 61, 68, 70, 75, 76, 84, 91, 98, 99, 359, 369, 371, 373, 414, 453, 568, 597, 628, 630, 632, 633, 638, 643, 659, 687, 733, 761, 769, 780, 788, 791, 806, 808, 814, 815, 816, 818, 819, 820, 821, 822, 823, 824, 825, 826, 828, 830, 831, 832, 833, 834, 836, 837, 840, 841, 843, 845, 847, 851, 852, 862, 863, 864, 866], "grid": [0, 43, 49, 135, 312, 365, 625, 827, 840], "item": [0, 4, 27, 28, 39, 41, 43, 48, 54, 68, 70, 72, 75, 76, 77, 130, 155, 192, 246, 262, 270, 337, 341, 354, 538, 548, 549, 553, 588, 589, 625, 626, 627, 630, 637, 644, 719, 720, 721, 722, 726, 731, 732, 766, 808, 814, 823, 825, 845, 847, 848, 850, 859], "card": [0, 53, 76, 356, 368, 871], "refer": [0, 5, 53, 60, 66, 67, 76, 78, 83, 89, 90, 128, 143, 241, 259, 309, 324, 354, 365, 368, 371, 372, 374, 400, 405, 416, 423, 447, 470, 611, 612, 625, 628, 631, 633, 635, 643, 644, 664, 666, 689, 702, 760, 762, 763, 764, 788, 808, 813, 814, 815, 816, 819, 820, 822, 824, 825, 832, 833, 834, 835, 836, 837, 838, 839, 840, 851, 852, 853, 866], "also": [0, 3, 4, 6, 7, 9, 10, 12, 14, 18, 20, 22, 23, 25, 27, 28, 30, 32, 33, 34, 41, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 94, 96, 98, 106, 107, 108, 109, 110, 111, 112, 113, 114, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 149, 150, 151, 164, 167, 168, 169, 171, 176, 193, 210, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 318, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 365, 368, 371, 372, 374, 381, 383, 390, 391, 392, 393, 395, 396, 397, 399, 403, 404, 405, 408, 409, 410, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 430, 432, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 503, 505, 506, 507, 508, 509, 510, 511, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 533, 534, 536, 537, 540, 541, 542, 543, 544, 545, 548, 549, 552, 554, 556, 557, 558, 560, 561, 562, 564, 565, 567, 572, 573, 587, 588, 589, 590, 591, 593, 595, 596, 609, 611, 612, 615, 617, 618, 619, 620, 625, 626, 628, 630, 631, 632, 633, 635, 636, 637, 638, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 654, 655, 656, 658, 659, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 687, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 724, 725, 726, 733, 734, 735, 736, 737, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 772, 787, 788, 797, 808, 809, 810, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 836, 837, 838, 840, 841, 843, 845, 848, 849, 850, 851, 852, 855, 856, 859, 860, 862, 863, 864, 865, 866, 867, 869, 871, 872, 873], "look": [0, 5, 18, 27, 28, 41, 43, 46, 808, 812, 814, 815, 816, 821, 822, 823, 825, 826, 827, 829, 830, 831, 832, 833, 837, 838, 840, 841, 842, 843, 845, 847, 849, 850, 852, 855, 859, 862, 866], "document": [0, 18, 27, 60, 243, 331, 332, 368, 610, 628, 630, 706, 809, 810, 813, 816, 822, 824, 825, 827, 836, 837, 838, 840, 848, 850], "sphinx": [0, 810, 822], "design": [0, 10, 18, 27, 76, 243, 308, 313, 314, 365, 628, 808, 811, 818, 822, 824, 825, 836, 837, 838, 839, 843, 845, 847, 851, 855, 856, 862, 864, 866, 869, 870, 871], "websit": [0, 45, 815, 819, 856], "alreadi": [1, 6, 9, 19, 22, 23, 24, 25, 27, 28, 33, 41, 43, 46, 53, 58, 70, 76, 81, 232, 242, 269, 279, 289, 374, 383, 459, 460, 480, 516, 525, 628, 633, 671, 678, 801, 802, 808, 814, 815, 816, 821, 823, 825, 826, 832, 836, 837, 843, 851, 852, 866, 868, 873], "instal": [1, 5, 6, 7, 9, 10, 12, 14, 19, 20, 21, 22, 23, 24, 25, 27, 28, 41, 43, 44, 45, 46, 810, 815, 816, 821, 822, 830, 831], "skip": [1, 4, 43, 53, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 106, 107, 108, 109, 110, 111, 112, 113, 114, 130, 132, 137, 139, 145, 149, 151, 176, 210, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 247, 248, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 299, 300, 301, 302, 303, 305, 306, 307, 309, 330, 331, 332, 333, 334, 336, 338, 346, 347, 353, 355, 357, 358, 359, 372, 374, 395, 396, 397, 415, 431, 433, 440, 448, 449, 450, 451, 452, 453, 454, 455, 458, 459, 460, 464, 465, 481, 484, 486, 488, 489, 490, 492, 497, 499, 500, 501, 503, 505, 518, 519, 520, 521, 530, 533, 534, 536, 537, 541, 542, 543, 544, 545, 548, 549, 552, 554, 556, 557, 558, 560, 561, 564, 572, 573, 587, 588, 589, 591, 593, 595, 596, 609, 615, 620, 637, 646, 647, 648, 649, 655, 656, 662, 663, 664, 669, 670, 671, 672, 673, 674, 676, 678, 680, 681, 687, 692, 693, 694, 695, 699, 702, 703, 704, 705, 706, 709, 710, 727, 734, 735, 736, 737, 739, 742, 745, 746, 747, 748, 749, 753, 754, 757, 759, 760, 762, 763, 764, 773, 801, 822, 833, 840], "colab": [1, 4, 9, 10, 12, 14, 18, 19, 20, 21, 22, 23, 24, 25, 28, 41, 43, 45, 46], "manual": [1, 9, 10, 12, 14, 18, 19, 20, 21, 22, 23, 24, 25, 28, 637, 714, 724, 725, 814, 815, 816, 825, 831, 840, 849, 852], "do": [1, 3, 5, 6, 7, 8, 9, 10, 12, 14, 18, 19, 20, 21, 22, 23, 24, 25, 28, 39, 41, 43, 53, 54, 70, 76, 77, 236, 269, 278, 371, 373, 374, 383, 417, 453, 465, 525, 528, 558, 628, 630, 637, 714, 721, 724, 725, 726, 731, 774, 802, 808, 812, 814, 815, 816, 819, 820, 821, 823, 824, 825, 826, 827, 828, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 843, 845, 847, 848, 849, 850, 851, 853, 857, 867, 872, 873], "run": [1, 3, 4, 5, 6, 7, 8, 9, 10, 12, 14, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 41, 43, 44, 45, 53, 55, 76, 78, 377, 497, 499, 611, 612, 617, 631, 632, 636, 657, 711, 712, 713, 769, 770, 788, 789, 790, 791, 801, 808, 810, 814, 815, 818, 820, 821, 824, 826, 827, 829, 831, 832, 834, 837, 838, 845, 846, 847, 848, 849, 850, 851, 852, 859, 860, 861, 864, 866, 867, 868, 869, 871, 872, 873], "below": [1, 8, 9, 10, 12, 14, 18, 19, 20, 21, 22, 23, 24, 25, 28, 32, 33, 34, 39, 42, 43, 44, 49, 53, 58, 76, 81, 89, 141, 142, 143, 243, 253, 276, 324, 325, 334, 365, 368, 374, 488, 625, 628, 633, 667, 687, 762, 809, 812, 814, 815, 818, 819, 823, 824, 825, 826, 827, 829, 830, 833, 836, 837, 838, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 859, 860, 861, 862, 864, 869, 871], "mind": [1, 12, 14, 18, 24, 27, 31, 814, 815, 820, 823, 840, 852, 860], "packag": [1, 3, 5, 6, 8, 9, 12, 22, 23, 24, 25, 28, 41, 42, 43, 46, 800, 808, 812, 815, 824, 837, 851, 852, 866, 868], "avail": [1, 3, 5, 6, 8, 22, 23, 25, 27, 28, 43, 54, 77, 192, 198, 200, 201, 212, 542, 627, 630, 633, 684, 773, 806, 808, 815, 816, 823, 824, 825, 826, 828, 829, 837, 840, 843, 851, 852, 855, 859, 860, 861, 871, 872], "click": [1, 3, 43, 814, 815, 816, 824, 828, 830, 831, 846], "runtim": [1, 3, 4, 5, 7, 8, 9, 20, 27, 30, 41, 42, 818, 833, 840, 843, 866], "restart": [1, 3, 4, 5, 8, 41, 42, 815, 830], "pip": [1, 3, 4, 5, 6, 7, 8, 9, 10, 12, 14, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 39, 40, 41, 42, 43, 44, 45, 46, 812, 815, 822, 831], "q": [1, 3, 4, 5, 6, 7, 8, 9, 10, 41, 42, 43, 53, 57, 58, 76, 80, 81, 358, 368, 372, 383, 425, 528, 632, 633, 637, 659, 662, 668, 669, 680, 722, 815, 816, 818, 838, 851], "git": [1, 3, 4, 5, 8, 27, 41, 42, 43, 44, 808, 810, 813, 815, 816, 819, 822, 824, 830, 831, 840, 852], "clone": [1, 3, 5, 8, 27, 41, 43, 44, 808, 810, 816, 830, 852], "http": [1, 3, 4, 5, 6, 7, 8, 9, 14, 22, 23, 24, 25, 27, 28, 41, 42, 43, 44, 45, 46, 52, 53, 75, 76, 78, 143, 151, 239, 249, 250, 265, 324, 331, 332, 365, 368, 371, 374, 383, 415, 488, 518, 611, 612, 625, 626, 628, 631, 633, 635, 643, 681, 682, 710, 760, 808, 810, 815, 816, 819, 822, 824, 825, 828, 830, 852, 860], "github": [1, 3, 4, 5, 7, 8, 9, 27, 41, 42, 43, 44, 45, 808, 810, 811, 813, 816, 817, 819, 822, 824, 825, 827, 828, 830, 831, 839, 840, 852, 855, 874], "com": [1, 3, 4, 5, 7, 8, 9, 14, 27, 41, 42, 43, 44, 45, 808, 810, 815, 816, 819, 822, 824, 825, 830, 852], "unifyai": [1, 3, 5, 8, 27, 41, 42, 43, 44, 45, 808, 810, 815, 816, 822, 830, 852], "model": [1, 2, 3, 10, 11, 16, 17, 18, 44, 46, 236, 269, 373, 449, 628, 785, 789, 790, 806, 808, 848, 849, 853, 859, 860, 864, 865, 866, 867, 868, 869, 870, 872, 873], "depth": [1, 3, 5, 8, 42, 49, 53, 57, 72, 76, 80, 137, 371, 374, 407, 467, 541, 553, 625, 630, 632, 650, 651, 816, 824, 848, 849, 850, 852], "1": [1, 3, 4, 5, 6, 7, 8, 9, 10, 12, 14, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 39, 40, 41, 42, 43, 44, 46, 47, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 93, 94, 96, 98, 99, 106, 108, 109, 110, 111, 112, 113, 114, 115, 118, 119, 121, 122, 123, 124, 125, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 143, 145, 148, 149, 150, 151, 155, 159, 160, 161, 164, 169, 171, 176, 192, 193, 197, 201, 202, 204, 205, 210, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 314, 315, 316, 317, 318, 321, 322, 324, 326, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 363, 365, 368, 369, 371, 372, 373, 374, 377, 378, 379, 381, 383, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 403, 404, 405, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 436, 437, 438, 441, 442, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 463, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 530, 533, 534, 536, 537, 540, 541, 542, 543, 544, 545, 548, 549, 550, 551, 552, 553, 554, 556, 557, 558, 560, 561, 562, 564, 565, 567, 568, 570, 572, 573, 577, 586, 587, 588, 589, 590, 591, 593, 595, 596, 597, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 687, 688, 689, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 712, 713, 714, 715, 717, 718, 720, 721, 722, 723, 725, 726, 731, 732, 733, 734, 735, 736, 737, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 769, 772, 773, 774, 775, 777, 780, 784, 787, 788, 789, 790, 791, 792, 793, 797, 801, 802, 806, 808, 811, 812, 815, 816, 819, 821, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 835, 836, 837, 838, 840, 843, 844, 845, 847, 848, 849, 850, 851, 856, 857, 859, 860, 861, 874], "from": [1, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 39, 40, 41, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 55, 57, 58, 60, 62, 63, 66, 67, 68, 70, 71, 72, 73, 75, 76, 77, 78, 80, 81, 83, 85, 86, 89, 90, 91, 93, 94, 96, 99, 122, 124, 127, 129, 130, 131, 132, 135, 136, 139, 143, 145, 151, 169, 175, 176, 192, 197, 202, 208, 209, 235, 243, 244, 271, 275, 276, 283, 287, 308, 309, 315, 318, 324, 326, 327, 328, 335, 338, 342, 343, 345, 346, 358, 362, 365, 368, 370, 371, 372, 373, 374, 378, 383, 395, 396, 397, 411, 416, 417, 436, 443, 448, 449, 453, 463, 466, 475, 480, 486, 488, 489, 491, 492, 494, 495, 504, 505, 506, 507, 508, 519, 520, 540, 548, 549, 551, 571, 582, 593, 610, 612, 613, 617, 625, 626, 627, 628, 630, 631, 632, 633, 635, 636, 637, 639, 640, 641, 643, 644, 646, 654, 655, 664, 667, 683, 687, 688, 689, 696, 699, 702, 705, 711, 712, 713, 715, 726, 727, 728, 734, 735, 736, 737, 741, 744, 745, 747, 753, 754, 759, 760, 761, 762, 763, 764, 767, 769, 772, 773, 774, 775, 780, 785, 787, 788, 789, 790, 792, 797, 802, 806, 808, 809, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 836, 837, 838, 840, 841, 843, 845, 846, 847, 848, 849, 850, 851, 853, 855, 856, 857, 858, 859, 860, 861, 862, 864, 865, 866, 867, 868, 870, 871, 872, 873], "repositori": [1, 3, 5, 8, 810, 814, 815, 816, 818, 819, 822, 830, 839, 857], "cd": [1, 3, 5, 8, 27, 44, 808, 810, 815, 816, 830, 852], "here": [1, 3, 10, 13, 15, 18, 23, 26, 27, 28, 39, 41, 42, 43, 44, 46, 76, 279, 455, 628, 808, 812, 813, 814, 815, 816, 819, 821, 822, 823, 824, 825, 827, 830, 831, 832, 834, 835, 836, 837, 838, 840, 841, 845, 846, 847, 848, 849, 850, 851, 859, 860, 861, 866, 867, 874], "normal": [1, 3, 8, 12, 13, 14, 15, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 41, 42, 53, 61, 62, 76, 84, 85, 93, 94, 355, 368, 371, 377, 383, 393, 394, 399, 400, 403, 404, 405, 415, 416, 497, 498, 499, 500, 501, 502, 503, 518, 521, 635, 638, 639, 696, 706, 733, 734, 736, 787, 788, 791, 808, 814, 836, 837, 843, 848, 859, 861, 864], "resnet": [2, 9, 16, 27, 859, 860], "imag": [2, 3, 7, 9, 12, 16, 24, 27, 28, 41, 42, 43, 44, 45, 46, 53, 57, 75, 76, 80, 98, 216, 217, 218, 219, 222, 225, 234, 237, 239, 241, 250, 251, 252, 257, 259, 272, 279, 280, 282, 283, 287, 371, 390, 391, 407, 408, 409, 411, 541, 628, 630, 632, 645, 646, 647, 648, 649, 652, 653, 654, 788, 808, 815, 830, 843, 845, 846, 848, 850, 852, 859, 860, 866], "classif": [2, 3, 8, 10, 16, 41, 808, 866], "acceler": [2, 16, 808, 825, 837, 864, 868, 869, 870, 871], "pytorch": [2, 3, 4, 5, 7, 8, 11, 13, 14, 16, 17, 25, 27, 28, 39, 46, 279, 331, 332, 368, 628, 792, 808, 813, 814, 820, 825, 826, 829, 832, 833, 836, 837, 838, 843, 845, 850, 851, 853, 856, 857, 859, 860, 863, 867, 869, 870, 872, 873], "jax": [2, 8, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 39, 41, 45, 47, 52, 53, 54, 64, 69, 75, 76, 77, 106, 107, 108, 109, 110, 111, 112, 113, 114, 205, 287, 291, 296, 297, 299, 345, 363, 368, 383, 528, 558, 591, 610, 622, 627, 628, 630, 641, 745, 746, 747, 748, 780, 784, 797, 808, 812, 813, 814, 815, 816, 819, 821, 825, 826, 829, 830, 832, 835, 836, 837, 838, 840, 841, 843, 845, 847, 850, 851, 856, 857, 859, 860, 861, 867, 869, 872, 873], "convert": [2, 5, 7, 9, 10, 12, 14, 16, 17, 19, 21, 24, 25, 27, 28, 29, 31, 33, 41, 44, 46, 48, 49, 52, 70, 71, 72, 75, 93, 123, 124, 136, 146, 147, 189, 190, 191, 192, 203, 211, 215, 235, 275, 374, 379, 458, 459, 460, 509, 574, 592, 594, 595, 596, 598, 625, 626, 627, 628, 630, 633, 637, 691, 715, 726, 727, 769, 797, 801, 808, 814, 820, 821, 834, 835, 837, 840, 842, 845, 851, 853, 857, 860, 864, 865, 872], "them": [2, 3, 7, 9, 12, 14, 16, 27, 28, 33, 372, 442, 535, 571, 630, 772, 788, 808, 810, 814, 816, 817, 819, 820, 821, 822, 823, 824, 825, 829, 831, 834, 836, 837, 838, 840, 842, 845, 847, 848, 849, 851, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 866, 868, 872], "faster": [2, 3, 7, 9, 10, 16, 27, 28, 44, 46, 53, 58, 76, 81, 372, 445, 633, 683, 810, 813, 822, 853, 868, 871], "infer": [2, 7, 9, 10, 16, 20, 30, 32, 33, 42, 44, 46, 49, 53, 54, 57, 60, 72, 76, 77, 80, 83, 122, 124, 127, 131, 132, 136, 139, 145, 154, 155, 156, 157, 158, 308, 309, 371, 374, 378, 407, 492, 506, 552, 586, 587, 625, 626, 630, 632, 635, 655, 702, 797, 798, 818, 821, 825, 826, 840, 845, 850, 860, 864, 865, 868, 870], "mmpretrain": [2, 16], "segment": [2, 16, 53, 76, 326, 327, 328, 365, 822, 827], "unet": [2, 16], "alexnet": [2, 16], "In": [2, 3, 4, 12, 14, 16, 18, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 39, 41, 46, 51, 53, 54, 60, 74, 76, 77, 83, 93, 94, 203, 210, 211, 215, 219, 236, 237, 243, 251, 252, 269, 272, 278, 280, 371, 374, 377, 395, 396, 397, 417, 458, 459, 460, 466, 468, 470, 471, 472, 473, 475, 479, 485, 486, 495, 497, 499, 531, 551, 558, 576, 627, 628, 630, 633, 635, 639, 681, 698, 699, 700, 702, 704, 705, 707, 709, 737, 808, 814, 815, 816, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 836, 837, 838, 840, 841, 842, 843, 847, 848, 849, 850, 851, 855, 857, 859, 860, 861, 862, 864, 866, 867, 869, 872], "we": [2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 14, 16, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 39, 40, 41, 44, 45, 46, 53, 58, 59, 60, 68, 76, 81, 82, 91, 93, 94, 114, 360, 370, 374, 458, 459, 460, 466, 468, 470, 471, 472, 475, 479, 486, 490, 495, 541, 551, 591, 613, 614, 616, 621, 622, 630, 631, 633, 634, 635, 676, 692, 698, 699, 700, 702, 704, 705, 707, 709, 784, 790, 797, 802, 808, 809, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 841, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 859, 860, 861, 862, 866, 867, 871, 872, 874], "show": [2, 3, 4, 8, 16, 22, 27, 28, 29, 30, 32, 39, 41, 43, 44, 575, 584, 607, 630, 808, 814, 815, 816, 822, 824, 827, 831, 836, 837, 840, 842, 851, 859, 866], "how": [2, 3, 4, 5, 7, 9, 12, 14, 16, 17, 18, 19, 20, 22, 24, 25, 27, 28, 29, 30, 32, 33, 34, 35, 39, 42, 45, 46, 47, 52, 53, 69, 75, 76, 96, 106, 107, 108, 109, 110, 111, 112, 113, 114, 236, 269, 287, 291, 296, 297, 299, 363, 373, 374, 448, 463, 488, 489, 622, 628, 784, 787, 788, 789, 790, 808, 809, 810, 812, 813, 815, 816, 818, 819, 820, 821, 823, 824, 825, 826, 827, 828, 829, 831, 832, 834, 835, 836, 837, 838, 841, 842, 843, 844, 846, 847, 848, 849, 850, 851, 855, 857, 862, 866], "written": [2, 3, 4, 16, 18, 27, 28, 41, 54, 374, 469, 815, 819, 820, 828, 831, 832, 836, 837, 841, 845, 847, 850, 851, 855, 860, 864, 866, 870, 872, 873], "xgboost": [2, 16], "video": [3, 5, 7, 8, 9, 12, 14, 18, 19, 20, 21, 22, 23, 24, 25, 28, 808, 809, 814, 815, 816, 819, 820, 821, 823, 824, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 840, 841, 843, 852, 864], "tutori": [3, 5, 7, 8, 9, 12, 14, 18, 19, 20, 21, 22, 23, 24, 25, 28, 808, 816, 837, 852], "nativ": [3, 4, 6, 9, 18, 19, 22, 23, 24, 25, 27, 28, 48, 49, 50, 51, 54, 71, 74, 77, 98, 102, 136, 146, 147, 153, 154, 155, 156, 157, 158, 172, 175, 190, 191, 192, 193, 203, 211, 215, 558, 560, 564, 571, 576, 594, 625, 626, 627, 630, 769, 780, 785, 797, 808, 812, 814, 825, 826, 829, 830, 833, 834, 836, 837, 838, 840, 845, 847, 848, 853, 859, 860, 861, 864, 873], "integr": [3, 4, 12, 14, 21, 28, 31, 50, 52, 53, 73, 75, 76, 148, 288, 351, 368, 383, 521, 626, 628, 808, 813, 815, 817, 818, 834, 860, 864, 866, 868, 869, 870], "three": [3, 4, 16, 22, 32, 33, 43, 53, 135, 308, 365, 374, 460, 625, 815, 816, 823, 824, 825, 827, 837, 840, 843, 844, 845, 867, 872], "major": [3, 4, 640, 743, 825, 826, 838, 840, 851, 856, 863, 866], "ml": [3, 4, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 41, 43, 46, 808, 809, 813, 837, 844, 845, 846, 848, 849, 850, 854, 856, 857, 860, 862, 863, 864, 865, 866, 869, 871, 873], "framework": [3, 4, 12, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 34, 41, 43, 45, 48, 54, 166, 188, 198, 201, 212, 539, 555, 559, 591, 594, 626, 627, 630, 637, 716, 767, 769, 773, 780, 785, 792, 797, 798, 808, 811, 812, 814, 815, 818, 819, 820, 821, 822, 824, 825, 826, 827, 829, 830, 832, 833, 834, 836, 837, 840, 841, 843, 844, 845, 847, 850, 851, 852, 853, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 867, 870], "sinc": [3, 5, 8, 24, 25, 27, 28, 41, 43, 53, 76, 94, 368, 808, 810, 815, 816, 819, 820, 821, 822, 823, 824, 825, 826, 829, 836, 837, 851, 856, 866, 872], "want": [3, 5, 6, 8, 9, 10, 12, 14, 16, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 40, 41, 43, 53, 68, 76, 91, 236, 269, 374, 468, 628, 790, 808, 809, 810, 814, 815, 816, 822, 824, 826, 829, 831, 833, 834, 835, 836, 840, 843, 848, 849, 850, 851, 852, 856, 860], "after": [3, 4, 5, 7, 8, 9, 27, 28, 42, 53, 54, 55, 57, 61, 70, 76, 77, 78, 80, 84, 182, 283, 300, 304, 353, 363, 368, 371, 372, 374, 394, 395, 396, 397, 414, 418, 439, 469, 480, 558, 612, 615, 617, 618, 619, 626, 628, 630, 631, 632, 637, 638, 645, 646, 647, 648, 650, 652, 654, 655, 725, 733, 792, 797, 808, 814, 815, 816, 819, 821, 822, 824, 825, 827, 829, 832, 835, 838, 840, 844, 852, 859, 860, 866], "first": [3, 4, 5, 8, 12, 18, 20, 21, 22, 24, 27, 28, 30, 31, 32, 41, 44, 45, 46, 49, 52, 53, 58, 60, 62, 63, 64, 66, 72, 75, 76, 77, 81, 83, 85, 87, 89, 93, 94, 98, 99, 118, 119, 133, 134, 143, 174, 182, 192, 219, 224, 226, 228, 229, 230, 231, 237, 243, 244, 245, 246, 247, 248, 254, 255, 256, 261, 262, 263, 265, 266, 269, 272, 274, 285, 286, 298, 308, 309, 324, 326, 327, 328, 330, 343, 345, 346, 347, 353, 357, 358, 363, 365, 368, 371, 372, 373, 374, 381, 383, 394, 424, 425, 426, 428, 432, 454, 464, 466, 470, 477, 480, 482, 483, 486, 494, 505, 507, 511, 519, 520, 521, 528, 533, 624, 625, 626, 627, 628, 630, 632, 633, 635, 636, 637, 640, 641, 642, 643, 659, 664, 667, 668, 669, 671, 673, 678, 680, 681, 683, 685, 687, 689, 702, 703, 706, 707, 711, 712, 713, 714, 715, 724, 725, 727, 739, 740, 741, 745, 746, 747, 750, 751, 753, 754, 769, 787, 788, 789, 790, 792, 797, 808, 810, 813, 814, 815, 816, 817, 819, 820, 821, 822, 823, 826, 827, 831, 832, 833, 834, 836, 837, 840, 843, 845, 847, 848, 850, 852, 855, 856, 859, 860, 864, 866, 867, 871], "notebook": [3, 4, 5, 8, 9, 10, 12, 14, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 30, 31, 33, 42, 790, 808], "automat": [3, 5, 8, 25, 27, 28, 33, 808, 814, 815, 816, 818, 821, 822, 824, 825, 831, 833, 836, 840, 843, 844, 846, 849, 850, 852, 853, 857, 866, 869, 873], "sure": [3, 5, 7, 8, 9, 10, 27, 41, 811, 814, 815, 816, 819, 824, 829, 830, 837, 838, 840, 843, 852], "gpu": [3, 4, 5, 6, 7, 8, 9, 10, 41, 43, 45, 46, 192, 194, 195, 198, 201, 203, 205, 207, 208, 211, 213, 215, 627, 806, 808, 815, 816, 824, 826, 847, 852, 864, 866, 869, 870, 871], "enabl": [3, 4, 5, 6, 7, 8, 9, 10, 22, 23, 25, 42, 53, 58, 70, 81, 99, 371, 373, 394, 452, 576, 630, 633, 676, 790, 806, 808, 815, 816, 817, 820, 823, 825, 833, 834, 835, 836, 837, 840, 841, 844, 846, 848, 850, 851, 853, 856, 859, 864, 865, 866, 867, 868, 869, 872, 873], "dm": [3, 4, 5, 7, 9, 27, 28, 39, 41], "haiku": [3, 4, 5, 7, 9, 25, 27, 28, 39, 41, 45, 785, 808, 850, 857, 860, 866], "exit": [3, 5, 8, 27, 28, 826], "download": [3, 8, 12, 14, 27, 28, 42, 43, 46, 810, 815, 822, 840, 859, 860], "imagenet": [3, 14, 42, 44, 808], "class": [3, 5, 8, 10, 12, 14, 18, 27, 28, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 130, 139, 145, 161, 164, 177, 179, 180, 239, 276, 334, 356, 368, 382, 383, 391, 392, 425, 524, 525, 532, 541, 545, 558, 568, 591, 625, 626, 627, 628, 630, 632, 633, 634, 637, 638, 653, 658, 662, 668, 678, 682, 683, 685, 692, 708, 715, 726, 733, 748, 755, 759, 760, 769, 770, 777, 778, 779, 780, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 796, 797, 801, 806, 808, 814, 821, 822, 823, 825, 826, 827, 828, 832, 834, 835, 838, 839, 840, 843, 845, 846, 848, 849, 850, 853, 859, 860, 864, 866, 867, 873], "preprocess": [3, 8, 10, 27, 28, 41, 44, 859], "wget": [3, 5, 8, 41, 42, 45, 815], "raw": [3, 5, 7, 8, 9, 24, 27, 28, 41, 44, 45, 70, 808, 828, 860, 867], "githubusercont": [3, 5, 8, 41, 45], "hub": [3, 5, 8, 41, 44, 46], "master": [3, 5, 8, 19, 20, 21, 29, 30, 31, 32, 33, 34, 41, 43, 44, 45, 811, 824, 866, 874], "imagenet_class": [3, 8], "txt": [3, 8, 42, 54, 815, 819, 822], "r": [3, 8, 41, 42, 53, 58, 70, 76, 81, 93, 94, 345, 360, 368, 370, 613, 631, 633, 635, 680, 709, 815, 816, 818, 835, 838, 874], "f": [3, 4, 6, 7, 8, 27, 28, 40, 41, 43, 53, 60, 76, 83, 298, 315, 363, 365, 374, 470, 491, 635, 637, 702, 717, 721, 722, 723, 726, 731, 732, 808, 809, 816, 818, 823, 824, 829, 841, 845, 847, 848, 857, 862], "categori": [3, 8, 814, 819, 820, 823, 825, 829, 837, 841, 844], "strip": [3, 8, 20, 30, 856], "readlin": [3, 8, 42], "cat": [3, 8, 42, 838, 843, 845, 850, 859, 860], "jpg": [3, 5, 7, 8, 9, 24, 27, 28, 43, 44, 808, 860], "filenam": [3, 5, 8, 27, 28, 41, 43, 46, 54, 790, 796, 848], "3": [3, 5, 6, 7, 8, 9, 10, 12, 14, 18, 19, 21, 22, 23, 24, 25, 27, 28, 39, 40, 41, 42, 43, 44, 46, 47, 49, 50, 51, 52, 53, 54, 55, 57, 58, 60, 62, 63, 64, 66, 67, 69, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 98, 99, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 119, 121, 122, 123, 124, 128, 130, 132, 133, 135, 136, 137, 138, 139, 143, 144, 145, 148, 149, 150, 151, 155, 159, 161, 169, 171, 176, 190, 192, 193, 204, 207, 210, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 299, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 324, 326, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 363, 365, 368, 369, 371, 372, 373, 374, 377, 378, 379, 381, 383, 388, 390, 391, 392, 393, 395, 398, 399, 400, 403, 404, 408, 409, 410, 413, 414, 415, 416, 418, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 432, 439, 442, 444, 447, 448, 449, 450, 451, 452, 453, 454, 456, 458, 459, 460, 461, 463, 464, 465, 466, 467, 470, 471, 472, 474, 475, 476, 477, 479, 480, 485, 486, 487, 488, 489, 490, 491, 492, 494, 495, 496, 500, 501, 502, 503, 506, 508, 509, 510, 511, 516, 517, 518, 519, 520, 521, 523, 524, 525, 526, 527, 528, 530, 533, 534, 535, 536, 537, 540, 541, 542, 543, 544, 545, 548, 549, 552, 553, 554, 556, 557, 558, 560, 561, 562, 564, 565, 567, 568, 572, 573, 586, 587, 588, 589, 593, 596, 597, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 658, 659, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 715, 717, 718, 720, 721, 722, 723, 725, 726, 731, 732, 733, 734, 735, 736, 737, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 769, 772, 775, 788, 801, 802, 806, 808, 812, 814, 815, 819, 820, 821, 823, 824, 825, 827, 829, 830, 833, 835, 838, 840, 845, 847, 848, 849, 850, 859, 860, 873], "import": [3, 6, 7, 9, 12, 14, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 41, 42, 44, 45, 46, 53, 64, 68, 72, 76, 91, 190, 191, 195, 207, 303, 383, 518, 553, 569, 627, 630, 636, 641, 712, 713, 748, 780, 797, 798, 808, 813, 814, 815, 816, 817, 819, 820, 821, 822, 823, 825, 826, 827, 828, 831, 834, 835, 836, 837, 838, 839, 840, 841, 845, 847, 848, 850, 851, 852, 856, 859, 860, 861, 862, 864, 866, 869, 870, 872], "devic": [3, 5, 6, 7, 8, 9, 42, 43, 46, 49, 53, 62, 70, 72, 76, 85, 98, 101, 102, 103, 122, 123, 124, 126, 127, 128, 131, 132, 133, 134, 136, 137, 138, 139, 141, 142, 143, 144, 145, 189, 190, 191, 192, 193, 194, 195, 196, 197, 202, 203, 204, 205, 207, 208, 209, 210, 211, 213, 215, 308, 309, 324, 325, 365, 378, 468, 504, 505, 507, 508, 532, 546, 547, 625, 630, 639, 734, 735, 736, 737, 767, 769, 770, 785, 787, 788, 789, 790, 791, 792, 793, 794, 806, 808, 816, 818, 821, 825, 829, 833, 834, 838, 840, 841, 843, 845, 850, 851, 852, 853, 856, 865, 866, 868, 869, 870, 871], "torchvis": [3, 7, 8, 41, 857], "transform": [3, 4, 7, 8, 9, 24, 27, 28, 41, 42, 44, 53, 57, 76, 80, 371, 372, 393, 394, 399, 400, 403, 404, 405, 415, 416, 419, 436, 632, 656, 772, 775, 788, 808, 834, 840, 850, 853, 859, 860, 864, 866, 867, 868], "pil": [3, 5, 7, 8, 9, 24, 27, 28, 42, 43, 44, 808, 860], "numpi": [3, 4, 5, 6, 7, 9, 12, 14, 19, 22, 23, 24, 25, 27, 28, 29, 30, 32, 33, 34, 39, 40, 41, 43, 44, 45, 46, 52, 53, 54, 66, 75, 76, 77, 143, 172, 190, 195, 220, 280, 303, 324, 365, 383, 518, 525, 534, 558, 588, 591, 595, 625, 626, 627, 628, 630, 633, 643, 681, 755, 767, 769, 780, 797, 801, 802, 808, 813, 814, 815, 816, 819, 820, 821, 824, 825, 826, 829, 830, 832, 836, 838, 840, 841, 843, 845, 847, 850, 852, 853, 855, 856, 859, 860, 861, 863, 868, 873], "np": [3, 4, 5, 6, 7, 9, 12, 14, 19, 22, 23, 24, 25, 27, 28, 29, 32, 33, 34, 39, 40, 41, 42, 43, 44, 46, 49, 53, 75, 76, 77, 123, 124, 125, 136, 172, 249, 253, 303, 371, 372, 399, 404, 420, 588, 625, 626, 628, 630, 637, 720, 769, 797, 801, 802, 808, 814, 820, 825, 826, 829, 832, 836, 837, 838, 840, 841, 843, 845, 847, 848, 850, 853, 861], "warn": [3, 4, 5, 6, 8, 9, 10, 19, 22, 23, 24, 25, 41, 42, 43, 46, 805, 815, 816, 842, 859, 860, 861], "time": [3, 4, 6, 7, 9, 25, 27, 28, 33, 41, 43, 44, 45, 53, 55, 58, 64, 76, 78, 87, 93, 94, 130, 337, 368, 371, 372, 374, 383, 400, 405, 417, 419, 440, 447, 480, 486, 518, 612, 617, 625, 631, 632, 633, 635, 636, 640, 641, 655, 658, 673, 708, 711, 712, 713, 740, 741, 745, 746, 788, 789, 790, 806, 814, 815, 816, 819, 821, 823, 824, 825, 827, 830, 832, 833, 834, 836, 837, 840, 841, 845, 848, 850, 851, 852, 855, 856, 857, 859, 860, 864, 866, 867, 870, 871, 872], "filterwarn": [3, 4], "ignor": [3, 4, 40, 48, 49, 53, 70, 76, 135, 371, 372, 374, 383, 395, 396, 397, 426, 434, 442, 482, 483, 487, 526, 625, 632, 637, 659, 725, 726, 792, 815, 822, 824, 827, 840, 851, 872], "compos": [3, 7, 8, 27, 28, 41, 53, 76, 371, 385, 386, 387, 388, 815, 823, 837, 840, 859, 861, 866, 873], "resiz": [3, 5, 7, 8, 41, 42, 53, 76, 371, 407, 843], "256": [3, 5, 8, 52, 77, 279, 280, 589, 632, 647, 649, 772], "centercrop": [3, 8], "224": [3, 8, 12, 14, 27, 28, 41, 42, 44, 808, 860], "totensor": [3, 7, 8, 41], "mean": [3, 7, 8, 9, 10, 18, 19, 20, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 39, 41, 42, 43, 53, 54, 57, 59, 60, 62, 66, 68, 70, 72, 76, 77, 80, 82, 83, 85, 89, 91, 93, 130, 209, 326, 336, 365, 368, 371, 372, 373, 374, 377, 378, 383, 400, 405, 423, 436, 448, 449, 450, 451, 452, 453, 454, 455, 465, 470, 480, 497, 499, 505, 524, 525, 542, 613, 614, 616, 621, 625, 627, 630, 631, 632, 633, 634, 635, 636, 637, 639, 643, 647, 649, 650, 651, 653, 654, 655, 666, 692, 693, 694, 702, 711, 712, 713, 720, 735, 736, 772, 774, 775, 787, 788, 791, 808, 815, 816, 818, 819, 821, 823, 825, 826, 827, 833, 835, 836, 837, 840, 841, 843, 845, 847, 848, 849, 850, 851, 853, 860, 861, 863, 866], "0": [3, 4, 5, 6, 7, 8, 9, 10, 12, 14, 19, 20, 21, 22, 23, 24, 25, 27, 28, 39, 41, 42, 43, 44, 45, 46, 47, 49, 50, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 93, 96, 97, 98, 99, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 119, 121, 122, 125, 128, 130, 131, 132, 133, 134, 137, 139, 141, 142, 143, 144, 145, 148, 149, 150, 151, 159, 161, 164, 165, 169, 171, 176, 189, 192, 194, 197, 202, 203, 204, 205, 207, 208, 209, 211, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 228, 230, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 247, 248, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 321, 322, 324, 325, 326, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 363, 365, 368, 369, 371, 372, 373, 374, 377, 378, 381, 383, 390, 393, 394, 395, 396, 397, 398, 399, 400, 403, 404, 405, 408, 409, 410, 411, 414, 415, 416, 418, 421, 422, 423, 425, 426, 427, 430, 431, 433, 436, 437, 440, 441, 442, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 463, 465, 466, 467, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 530, 533, 535, 536, 537, 540, 541, 542, 544, 545, 548, 549, 550, 551, 552, 553, 554, 556, 557, 558, 560, 561, 562, 564, 565, 568, 570, 572, 573, 577, 582, 586, 587, 588, 589, 591, 593, 595, 596, 605, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 677, 679, 680, 681, 682, 683, 684, 685, 687, 688, 689, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 712, 713, 714, 715, 717, 720, 721, 722, 723, 725, 726, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 769, 772, 773, 774, 775, 777, 784, 785, 787, 788, 789, 790, 791, 792, 793, 794, 797, 801, 802, 806, 808, 812, 815, 816, 819, 821, 823, 824, 825, 826, 827, 828, 829, 830, 835, 836, 837, 838, 840, 841, 845, 847, 848, 849, 850, 851, 859, 860], "485": [3, 8, 41], "456": [3, 8, 41, 840], "406": [3, 8, 41, 53, 76, 393, 536, 630], "std": [3, 7, 8, 9, 10, 19, 20, 21, 22, 23, 27, 28, 29, 30, 31, 32, 33, 34, 42, 57, 62, 66, 80, 85, 89, 378, 505, 632, 639, 643, 647, 649, 650, 651, 653, 654, 735, 736, 808, 827, 861, 863], "229": [3, 8, 41, 275, 628], "225": [3, 8, 41, 43, 230, 628], "torch_img": [3, 5, 8], "unsqueez": [3, 5, 7, 8], "img": [3, 5, 8, 24, 27, 28, 41, 42, 43, 45, 808, 848, 860], "4": [3, 4, 5, 6, 7, 8, 9, 10, 12, 18, 19, 20, 21, 22, 23, 24, 25, 27, 39, 40, 41, 42, 43, 46, 47, 49, 50, 51, 52, 53, 54, 55, 57, 58, 60, 62, 63, 64, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 98, 99, 106, 107, 108, 109, 110, 111, 113, 114, 122, 123, 124, 125, 128, 130, 132, 133, 134, 135, 136, 137, 139, 143, 145, 149, 150, 151, 159, 161, 164, 169, 171, 176, 193, 194, 202, 207, 210, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 316, 317, 324, 326, 331, 332, 334, 336, 337, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 355, 359, 363, 365, 368, 369, 371, 372, 373, 374, 377, 378, 379, 381, 383, 390, 391, 392, 393, 395, 396, 398, 399, 400, 403, 404, 408, 409, 410, 413, 414, 415, 416, 418, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 432, 436, 442, 448, 449, 450, 451, 452, 453, 454, 456, 458, 459, 460, 463, 464, 465, 466, 467, 470, 471, 472, 475, 476, 477, 479, 480, 485, 486, 487, 488, 489, 490, 492, 494, 495, 496, 500, 501, 502, 503, 506, 508, 509, 511, 516, 517, 518, 519, 520, 521, 523, 524, 525, 526, 527, 528, 536, 537, 540, 541, 542, 543, 544, 545, 548, 549, 551, 554, 556, 557, 558, 565, 572, 573, 588, 589, 590, 591, 593, 597, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 662, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 687, 688, 689, 690, 692, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 713, 715, 717, 718, 720, 721, 722, 723, 725, 726, 731, 732, 733, 734, 735, 736, 737, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 769, 772, 773, 775, 787, 788, 792, 801, 802, 808, 812, 814, 815, 821, 822, 823, 824, 825, 827, 830, 835, 838, 840, 843, 845, 847, 848, 849, 850, 857, 859, 866, 872, 873], "ipython": [3, 5, 8, 22, 23, 24, 25, 27, 28, 46], "displai": [3, 5, 8, 24, 27, 28, 41, 42, 43, 45, 46, 815, 822, 824, 829, 840, 848], "end": [3, 5, 41, 42, 53, 76, 122, 224, 280, 349, 368, 371, 373, 374, 419, 448, 470, 480, 482, 483, 625, 628, 802, 808, 815, 816, 821, 824, 830, 836, 841, 843, 844, 851, 864, 869], "see": [3, 4, 6, 7, 9, 10, 19, 20, 25, 27, 28, 29, 30, 34, 39, 40, 46, 47, 50, 52, 53, 58, 63, 64, 66, 67, 69, 75, 76, 81, 86, 89, 90, 93, 94, 98, 99, 106, 107, 108, 109, 110, 111, 112, 113, 114, 122, 129, 133, 140, 143, 150, 169, 176, 219, 224, 226, 228, 229, 230, 231, 236, 237, 241, 243, 247, 248, 255, 256, 259, 261, 263, 265, 266, 269, 272, 274, 278, 285, 287, 290, 291, 296, 297, 299, 324, 331, 332, 363, 365, 368, 372, 373, 374, 422, 450, 488, 622, 625, 626, 628, 633, 640, 641, 643, 644, 664, 676, 679, 682, 689, 690, 741, 745, 746, 747, 748, 756, 757, 758, 759, 760, 761, 762, 763, 764, 784, 808, 809, 812, 814, 815, 816, 819, 820, 822, 823, 824, 825, 826, 827, 830, 831, 832, 833, 837, 838, 840, 843, 845, 847, 848, 851, 855, 862, 874], "5": [3, 4, 5, 6, 7, 8, 9, 10, 12, 19, 20, 22, 23, 24, 25, 27, 28, 39, 41, 42, 43, 46, 47, 49, 50, 51, 52, 53, 54, 55, 57, 58, 60, 61, 62, 63, 64, 65, 66, 69, 72, 73, 74, 75, 76, 77, 78, 80, 81, 83, 84, 85, 86, 87, 88, 89, 93, 98, 99, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 118, 119, 122, 123, 124, 130, 132, 133, 134, 135, 136, 137, 138, 139, 144, 145, 149, 150, 151, 155, 159, 161, 169, 171, 176, 193, 202, 207, 210, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 297, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 318, 326, 329, 331, 332, 334, 336, 338, 340, 342, 343, 344, 345, 346, 348, 349, 350, 351, 352, 353, 354, 355, 358, 359, 363, 365, 368, 369, 371, 372, 373, 374, 377, 379, 381, 383, 390, 391, 392, 393, 395, 396, 398, 399, 400, 403, 404, 408, 409, 410, 413, 414, 415, 416, 418, 421, 424, 425, 427, 428, 430, 441, 444, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 464, 465, 466, 467, 470, 471, 474, 475, 476, 479, 480, 485, 486, 487, 488, 489, 490, 492, 495, 496, 501, 502, 503, 506, 508, 509, 511, 516, 518, 519, 520, 521, 522, 523, 525, 528, 534, 535, 536, 537, 540, 541, 542, 543, 545, 548, 549, 551, 554, 556, 557, 558, 572, 573, 577, 588, 589, 590, 591, 593, 597, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 648, 650, 651, 652, 653, 654, 655, 656, 658, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 677, 678, 679, 680, 681, 683, 684, 685, 687, 688, 689, 692, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 712, 713, 715, 717, 720, 721, 722, 723, 725, 726, 731, 732, 733, 734, 735, 736, 737, 739, 740, 741, 743, 744, 745, 746, 747, 748, 749, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 772, 773, 774, 775, 788, 801, 802, 808, 811, 814, 815, 816, 819, 821, 823, 824, 825, 827, 829, 830, 832, 835, 838, 840, 847, 848, 849, 860, 874], "set_default_devic": [3, 4, 5, 7, 8, 9, 213, 627, 826], "set_soft_device_mod": [3, 10, 14, 214, 627, 826], "true": [3, 4, 5, 6, 7, 8, 9, 10, 12, 14, 18, 21, 22, 24, 25, 27, 28, 32, 33, 34, 41, 42, 43, 44, 46, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 96, 98, 99, 106, 107, 108, 109, 110, 111, 112, 113, 114, 119, 121, 124, 125, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 141, 142, 143, 145, 148, 149, 150, 151, 152, 159, 161, 162, 163, 164, 167, 168, 169, 170, 171, 172, 173, 176, 188, 192, 193, 195, 196, 200, 203, 204, 206, 210, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 319, 320, 321, 322, 323, 324, 325, 329, 330, 331, 332, 333, 334, 336, 338, 346, 347, 352, 353, 354, 355, 356, 357, 358, 359, 365, 368, 369, 371, 372, 373, 374, 377, 383, 385, 386, 387, 388, 390, 391, 392, 394, 395, 396, 397, 398, 399, 407, 408, 409, 410, 414, 415, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 458, 459, 460, 464, 465, 466, 467, 468, 470, 471, 472, 475, 476, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 492, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 505, 510, 511, 517, 518, 519, 520, 521, 523, 524, 525, 526, 527, 528, 530, 533, 534, 536, 537, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 551, 552, 554, 556, 557, 558, 560, 561, 562, 564, 565, 572, 573, 574, 577, 580, 581, 583, 584, 586, 587, 588, 589, 591, 593, 595, 596, 598, 603, 604, 606, 607, 609, 612, 613, 615, 617, 618, 619, 620, 622, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 654, 655, 656, 657, 658, 659, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 720, 721, 722, 724, 725, 726, 727, 731, 732, 734, 735, 736, 737, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 767, 769, 772, 773, 774, 775, 777, 788, 789, 790, 791, 792, 794, 797, 799, 801, 802, 806, 808, 812, 815, 821, 823, 824, 825, 826, 827, 829, 830, 832, 833, 834, 836, 837, 838, 840, 842, 843, 845, 848, 849, 850, 859, 860], "set_backend": [3, 4, 5, 8, 10, 18, 19, 20, 21, 22, 23, 27, 28, 30, 31, 32, 33, 34, 40, 42, 43, 44, 52, 54, 68, 75, 77, 163, 172, 190, 191, 195, 205, 207, 212, 220, 534, 558, 626, 627, 630, 633, 636, 681, 712, 713, 797, 808, 819, 821, 825, 826, 833, 834, 835, 845, 847, 850, 859, 860, 861], "ivy_model": [3, 4, 5, 8, 44], "ivy_alexnet": 3, "order": [3, 21, 31, 33, 41, 44, 46, 49, 53, 54, 57, 58, 60, 64, 65, 70, 76, 80, 81, 83, 87, 88, 93, 98, 99, 123, 124, 135, 143, 224, 243, 286, 324, 345, 365, 368, 371, 372, 374, 377, 381, 417, 422, 425, 426, 427, 428, 429, 433, 439, 441, 444, 447, 470, 471, 472, 477, 478, 490, 497, 498, 499, 502, 511, 625, 628, 632, 633, 635, 636, 640, 641, 642, 646, 647, 648, 649, 650, 651, 654, 668, 669, 674, 683, 684, 688, 690, 699, 702, 711, 712, 743, 745, 746, 747, 748, 749, 751, 752, 769, 791, 793, 802, 808, 814, 815, 816, 820, 821, 823, 824, 825, 826, 827, 828, 829, 831, 832, 833, 837, 838, 839, 840, 841, 842, 843, 848, 850, 851, 855, 862, 865, 866, 867, 869, 872], "quick": [3, 16, 28, 816, 818, 838, 849], "call": [3, 7, 12, 14, 18, 20, 21, 22, 23, 24, 27, 28, 30, 31, 32, 33, 34, 41, 45, 53, 68, 73, 76, 91, 93, 99, 118, 168, 169, 209, 372, 383, 439, 525, 576, 582, 597, 613, 614, 616, 624, 627, 630, 631, 633, 637, 681, 714, 720, 724, 725, 769, 780, 788, 789, 790, 792, 797, 802, 806, 808, 814, 815, 816, 820, 821, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 836, 837, 838, 840, 841, 843, 845, 847, 848, 849, 850, 851, 856, 859, 860, 861, 866, 867, 870], "trace_graph": [3, 4, 5, 8, 20, 21, 22, 23, 27, 28, 30, 31, 32, 33, 34, 35, 44, 790, 808, 845, 850, 858], "take": [3, 8, 18, 25, 27, 28, 33, 39, 41, 44, 53, 58, 60, 66, 76, 83, 93, 118, 119, 121, 137, 276, 283, 298, 363, 371, 372, 374, 391, 399, 404, 409, 419, 428, 442, 463, 470, 489, 519, 520, 624, 625, 628, 632, 633, 635, 636, 659, 673, 677, 702, 713, 753, 772, 780, 787, 788, 801, 806, 808, 809, 814, 815, 816, 819, 820, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 833, 836, 837, 838, 840, 843, 845, 847, 849, 850, 851, 852, 857, 859, 860, 863, 864, 872], "moment": [3, 53, 55, 76, 78, 372, 429, 611, 612, 617, 631, 792, 806, 814, 821, 851, 859, 860], "one": [3, 6, 7, 9, 12, 14, 16, 17, 20, 21, 24, 25, 27, 28, 30, 31, 43, 44, 45, 49, 53, 54, 57, 58, 60, 63, 64, 66, 70, 72, 75, 76, 77, 78, 80, 81, 83, 84, 86, 87, 88, 89, 93, 122, 125, 135, 137, 138, 139, 149, 151, 209, 230, 236, 243, 244, 261, 267, 268, 269, 288, 298, 308, 311, 312, 330, 336, 339, 340, 343, 344, 347, 348, 349, 351, 352, 359, 363, 365, 368, 369, 371, 372, 373, 374, 377, 378, 383, 393, 395, 399, 400, 403, 404, 407, 415, 420, 422, 431, 440, 454, 458, 459, 460, 464, 470, 471, 472, 477, 479, 484, 487, 497, 498, 499, 504, 509, 519, 520, 523, 524, 525, 526, 527, 528, 530, 568, 572, 573, 575, 593, 595, 596, 609, 611, 612, 615, 617, 618, 619, 620, 625, 626, 627, 628, 630, 631, 632, 633, 635, 638, 640, 641, 643, 646, 647, 648, 649, 650, 651, 654, 671, 673, 674, 678, 680, 689, 690, 698, 699, 700, 703, 705, 709, 733, 740, 743, 745, 746, 747, 748, 753, 755, 772, 774, 791, 794, 797, 802, 805, 808, 814, 815, 816, 817, 819, 820, 821, 822, 823, 825, 826, 827, 830, 831, 832, 833, 834, 835, 836, 837, 838, 840, 842, 843, 844, 847, 848, 850, 851, 852, 853, 856, 857, 860, 866, 867, 869, 872], "cost": [3, 55, 78, 611, 612, 615, 617, 618, 619, 631, 636, 711, 712, 713, 802, 825, 843, 864], "arg": [3, 5, 6, 7, 8, 12, 14, 22, 23, 25, 27, 28, 32, 33, 34, 45, 48, 70, 92, 102, 118, 199, 209, 597, 624, 625, 627, 630, 767, 769, 784, 785, 788, 789, 790, 794, 797, 801, 806, 808, 820, 825, 826, 829, 835, 836, 837, 843, 845, 849, 859, 860, 861], "asarrai": [3, 4, 5, 7, 8, 42, 49, 53, 54, 65, 72, 76, 77, 88, 123, 381, 510, 511, 541, 552, 556, 557, 587, 588, 589, 625, 630, 632, 641, 642, 646, 746, 750, 829, 834, 837, 838], "cuda": [3, 4, 5, 6, 7, 8, 9, 10, 18, 27, 42, 43, 46, 49, 53, 62, 72, 76, 85, 133, 134, 137, 189, 190, 191, 207, 378, 504, 505, 507, 508, 625, 627, 633, 639, 684, 734, 735, 736, 737, 787, 788, 789, 790, 791, 792, 793, 806, 808, 845, 851, 853, 871], "7": [3, 5, 6, 7, 8, 9, 10, 12, 14, 20, 22, 23, 24, 25, 39, 41, 42, 43, 45, 46, 47, 49, 50, 52, 53, 54, 55, 57, 58, 59, 60, 62, 63, 64, 65, 66, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 98, 99, 108, 109, 110, 111, 122, 123, 124, 133, 136, 137, 155, 161, 164, 194, 216, 219, 222, 226, 227, 229, 230, 231, 232, 234, 236, 237, 238, 239, 240, 242, 243, 246, 247, 248, 253, 254, 255, 256, 257, 258, 259, 260, 261, 264, 266, 267, 268, 269, 271, 272, 273, 275, 276, 279, 280, 281, 283, 286, 287, 289, 290, 292, 293, 295, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 314, 315, 326, 330, 334, 336, 337, 345, 346, 347, 349, 351, 352, 359, 363, 365, 368, 369, 371, 372, 373, 374, 379, 383, 390, 391, 392, 393, 398, 399, 403, 404, 408, 413, 414, 415, 416, 418, 421, 424, 437, 449, 450, 451, 452, 454, 455, 458, 459, 460, 464, 466, 470, 475, 476, 479, 480, 485, 486, 488, 489, 491, 492, 495, 496, 506, 508, 509, 516, 519, 520, 522, 523, 528, 534, 536, 537, 541, 542, 545, 556, 557, 558, 565, 572, 573, 588, 591, 611, 612, 614, 615, 616, 617, 618, 619, 622, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 646, 647, 649, 651, 653, 654, 655, 656, 662, 664, 665, 666, 667, 669, 670, 671, 673, 675, 678, 680, 681, 683, 684, 685, 687, 688, 689, 692, 693, 694, 695, 698, 699, 704, 706, 707, 709, 714, 715, 722, 726, 733, 734, 735, 736, 737, 739, 744, 745, 747, 749, 750, 752, 753, 754, 755, 757, 759, 761, 762, 772, 815, 816, 821, 823, 824, 827, 833, 836, 840], "output": [3, 4, 5, 6, 8, 18, 24, 25, 27, 28, 40, 41, 42, 44, 47, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 98, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 144, 145, 148, 150, 175, 209, 210, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 318, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 363, 365, 368, 370, 371, 372, 373, 374, 377, 378, 379, 381, 383, 384, 385, 386, 387, 388, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 403, 404, 405, 407, 408, 409, 410, 413, 415, 416, 417, 419, 420, 422, 423, 424, 426, 428, 431, 432, 434, 437, 438, 439, 440, 442, 443, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 463, 464, 465, 468, 470, 471, 472, 473, 474, 477, 478, 479, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 492, 493, 494, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 511, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 535, 536, 537, 541, 542, 543, 545, 549, 558, 565, 572, 573, 574, 598, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 637, 638, 639, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 673, 674, 676, 677, 678, 679, 680, 681, 682, 684, 685, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 705, 706, 707, 708, 710, 727, 733, 734, 735, 736, 737, 739, 740, 741, 742, 743, 744, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 767, 772, 787, 788, 801, 802, 808, 810, 815, 816, 818, 819, 820, 822, 823, 825, 826, 827, 828, 831, 832, 833, 834, 835, 836, 837, 838, 840, 841, 842, 845, 847, 849, 850, 851, 853, 859, 860, 867], "softmax": [3, 8, 12, 25, 27, 28, 43, 47, 57, 68, 69, 80, 373, 450, 622, 632, 659, 662, 784, 808], "pass": [3, 5, 7, 8, 9, 10, 12, 14, 18, 25, 27, 28, 34, 40, 41, 43, 45, 46, 52, 53, 68, 70, 75, 76, 91, 99, 118, 119, 121, 153, 175, 190, 209, 224, 270, 371, 373, 374, 377, 378, 383, 417, 450, 470, 497, 499, 504, 524, 525, 558, 624, 626, 627, 628, 630, 636, 711, 712, 767, 769, 773, 780, 785, 789, 790, 792, 793, 797, 801, 806, 808, 812, 814, 816, 819, 820, 821, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 840, 843, 851, 859, 860, 861, 864], "argsort": [3, 8, 65, 88, 642, 751, 837], "descend": [3, 8, 65, 88, 633, 642, 683, 684, 749, 752], "top": [3, 8, 11, 16, 25, 27, 28, 41, 42, 53, 60, 76, 315, 365, 373, 374, 448, 490, 541, 630, 696, 808, 815, 816, 825, 830, 837, 839, 840, 843, 848, 849, 866, 870], "logit": [3, 4, 5, 8, 41, 42, 43, 44, 53, 59, 76, 82, 363, 378, 504, 507, 634, 692, 694, 784, 808, 859], "gather": [3, 8, 41, 53, 54, 76, 77, 326, 327, 328, 365, 549, 551, 630, 873], "print": [3, 4, 6, 7, 8, 10, 12, 14, 18, 19, 21, 25, 27, 28, 29, 39, 40, 41, 42, 43, 44, 46, 47, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 98, 99, 106, 108, 109, 110, 111, 112, 113, 114, 115, 118, 119, 121, 122, 125, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 143, 144, 145, 148, 149, 150, 151, 153, 159, 160, 161, 162, 163, 166, 168, 169, 171, 176, 188, 189, 193, 195, 196, 197, 198, 200, 201, 202, 203, 204, 207, 208, 210, 211, 212, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 247, 248, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 301, 302, 303, 305, 306, 307, 309, 316, 317, 324, 326, 330, 331, 332, 334, 349, 350, 355, 359, 363, 365, 368, 371, 372, 373, 374, 377, 383, 390, 391, 392, 393, 395, 396, 398, 400, 403, 405, 408, 409, 410, 413, 415, 416, 421, 424, 426, 428, 429, 439, 446, 449, 450, 451, 452, 453, 454, 455, 461, 463, 465, 476, 480, 485, 486, 488, 489, 490, 492, 496, 500, 501, 503, 518, 519, 520, 521, 528, 530, 532, 533, 534, 535, 536, 537, 540, 541, 542, 543, 544, 545, 548, 549, 551, 552, 553, 554, 556, 557, 558, 560, 561, 562, 564, 568, 569, 571, 572, 573, 577, 578, 579, 582, 585, 586, 587, 588, 589, 591, 593, 595, 596, 597, 601, 602, 605, 608, 609, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 662, 663, 664, 665, 667, 669, 670, 671, 672, 673, 674, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 687, 689, 690, 692, 693, 694, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 712, 713, 714, 715, 717, 718, 720, 721, 722, 723, 725, 726, 731, 732, 733, 734, 735, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 797, 801, 802, 806, 808, 815, 816, 823, 825, 827, 838, 840, 842, 845, 847, 848, 849, 859, 861], "indic": [3, 8, 49, 53, 54, 57, 58, 60, 61, 63, 64, 65, 70, 72, 73, 76, 77, 80, 81, 83, 84, 86, 87, 88, 93, 96, 123, 124, 137, 141, 143, 164, 168, 169, 280, 324, 325, 326, 345, 365, 368, 371, 372, 373, 374, 379, 381, 390, 391, 392, 394, 398, 399, 400, 404, 405, 408, 409, 410, 411, 415, 416, 426, 447, 450, 458, 459, 460, 463, 466, 468, 470, 471, 472, 475, 479, 485, 486, 488, 489, 490, 492, 494, 495, 509, 510, 511, 533, 548, 549, 551, 572, 573, 577, 610, 613, 614, 625, 628, 630, 631, 632, 633, 635, 637, 638, 639, 640, 641, 642, 646, 648, 649, 650, 651, 654, 659, 676, 690, 698, 699, 700, 702, 703, 704, 705, 707, 709, 714, 717, 719, 721, 722, 723, 725, 729, 730, 731, 732, 733, 734, 740, 741, 742, 743, 745, 747, 749, 751, 752, 769, 770, 772, 774, 788, 794, 801, 802, 804, 815, 824, 832, 835, 837, 850, 859], "to_list": [3, 8, 54, 77, 630], "arrai": [3, 4, 6, 8, 9, 10, 18, 19, 20, 22, 23, 24, 25, 27, 28, 29, 30, 32, 33, 34, 39, 40, 41, 42, 43, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 93, 94, 96, 99, 102, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 118, 119, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 148, 149, 150, 151, 154, 155, 156, 157, 158, 159, 161, 164, 165, 167, 168, 169, 171, 173, 174, 175, 176, 182, 192, 193, 197, 202, 204, 206, 209, 210, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 363, 365, 368, 369, 371, 372, 373, 374, 377, 378, 379, 381, 383, 384, 385, 386, 387, 388, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 403, 404, 405, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 533, 534, 536, 537, 540, 541, 542, 543, 544, 545, 548, 549, 550, 551, 552, 554, 555, 556, 557, 558, 560, 561, 562, 563, 564, 565, 567, 568, 570, 571, 572, 573, 574, 576, 577, 583, 584, 586, 587, 588, 589, 590, 591, 593, 594, 595, 596, 597, 598, 606, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 720, 721, 722, 723, 726, 727, 731, 732, 733, 734, 735, 736, 737, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 767, 769, 774, 780, 787, 788, 789, 790, 793, 797, 801, 802, 804, 808, 812, 814, 815, 816, 818, 821, 822, 823, 825, 826, 827, 828, 829, 830, 833, 834, 835, 836, 837, 838, 840, 841, 842, 843, 844, 845, 846, 848, 849, 850, 851, 853, 860, 861, 864, 865, 866, 868, 872, 873], "282": [3, 8], "281": [3, 8, 41, 43], "285": [3, 8, 76], "dev": [3, 7, 8, 9, 10, 20, 41, 43, 46, 51, 70, 74, 197, 204, 627, 815, 826, 830, 833, 847, 849], "64773697": 3, "29496649": 3, "04526037": 3, "39": [3, 4, 6, 7, 8, 9, 10, 12, 14, 18, 19, 22, 23, 24, 25, 39, 41, 42, 43, 44, 46, 47, 52, 53, 58, 62, 69, 75, 76, 78, 81, 85, 108, 222, 257, 259, 261, 291, 292, 295, 363, 371, 383, 391, 393, 410, 413, 519, 611, 622, 628, 631, 633, 643, 671, 678, 736, 755], "tiger": [3, 8], "tabbi": [3, 8], "egyptian": [3, 8], "check": [3, 4, 7, 9, 10, 12, 14, 16, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 39, 44, 46, 48, 50, 54, 58, 70, 73, 77, 81, 114, 152, 153, 162, 163, 166, 168, 169, 170, 173, 188, 195, 196, 203, 215, 534, 544, 546, 547, 554, 560, 561, 562, 563, 564, 580, 591, 603, 609, 622, 626, 627, 630, 633, 637, 669, 670, 676, 714, 724, 725, 726, 767, 774, 801, 802, 808, 809, 810, 813, 814, 815, 816, 817, 819, 823, 824, 826, 827, 829, 834, 836, 837, 838, 839, 840, 841, 842, 844, 845, 847, 848, 849, 852, 859], "confirm": [3, 42, 811, 814], "same": [3, 4, 5, 6, 7, 8, 9, 14, 19, 20, 22, 23, 24, 25, 27, 30, 32, 34, 39, 40, 43, 44, 46, 47, 48, 49, 50, 52, 53, 54, 55, 57, 58, 60, 62, 64, 65, 66, 70, 72, 73, 75, 76, 77, 78, 80, 81, 83, 85, 87, 89, 93, 94, 95, 96, 97, 98, 112, 122, 127, 132, 134, 135, 137, 139, 141, 142, 143, 145, 148, 149, 150, 161, 164, 209, 216, 217, 218, 219, 221, 223, 227, 229, 232, 236, 242, 243, 249, 269, 271, 273, 276, 278, 279, 280, 289, 297, 309, 323, 324, 325, 326, 327, 328, 331, 332, 334, 342, 358, 363, 365, 368, 371, 372, 373, 374, 377, 379, 381, 383, 390, 391, 392, 408, 409, 410, 411, 413, 414, 415, 416, 418, 425, 430, 431, 441, 442, 443, 444, 445, 447, 448, 450, 453, 463, 465, 480, 488, 489, 492, 497, 499, 509, 511, 516, 517, 518, 519, 520, 521, 522, 528, 565, 620, 625, 626, 627, 628, 630, 631, 632, 633, 635, 636, 637, 639, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 659, 662, 663, 664, 665, 667, 668, 669, 670, 672, 673, 675, 677, 678, 679, 680, 681, 682, 683, 684, 687, 689, 696, 699, 700, 702, 703, 705, 706, 711, 712, 727, 737, 745, 746, 747, 748, 749, 750, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 767, 772, 773, 774, 780, 788, 801, 808, 815, 816, 820, 821, 823, 824, 825, 826, 827, 829, 831, 832, 833, 834, 835, 836, 837, 838, 840, 841, 843, 845, 847, 849, 850, 851, 855, 857, 859, 861, 863, 865, 872, 873], "8": [3, 7, 8, 9, 10, 20, 22, 23, 24, 25, 39, 41, 43, 46, 50, 52, 53, 54, 55, 57, 58, 59, 60, 62, 63, 64, 65, 66, 73, 75, 76, 77, 78, 80, 81, 82, 83, 85, 86, 87, 88, 89, 98, 99, 106, 121, 131, 132, 136, 139, 145, 154, 156, 157, 158, 161, 169, 194, 211, 219, 221, 222, 226, 227, 230, 231, 232, 234, 240, 243, 247, 248, 254, 255, 256, 260, 261, 264, 265, 267, 268, 269, 274, 275, 278, 279, 280, 283, 284, 287, 288, 289, 293, 299, 301, 302, 303, 305, 306, 308, 309, 326, 330, 342, 345, 347, 348, 349, 352, 359, 363, 365, 368, 371, 372, 373, 374, 383, 390, 391, 392, 393, 398, 399, 403, 404, 408, 409, 413, 414, 418, 421, 424, 432, 449, 450, 451, 453, 454, 455, 456, 458, 459, 460, 464, 466, 470, 475, 476, 485, 486, 489, 490, 491, 492, 495, 496, 506, 508, 520, 523, 524, 528, 534, 535, 537, 541, 542, 545, 548, 552, 556, 557, 558, 560, 561, 564, 567, 572, 573, 577, 587, 588, 589, 590, 591, 611, 614, 616, 618, 619, 621, 622, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 637, 639, 640, 641, 642, 643, 646, 650, 651, 653, 654, 655, 656, 659, 665, 666, 667, 669, 670, 671, 673, 674, 675, 678, 680, 681, 683, 684, 685, 687, 688, 689, 690, 692, 693, 694, 695, 699, 706, 707, 709, 715, 722, 726, 734, 735, 736, 737, 739, 744, 745, 747, 749, 750, 752, 754, 755, 757, 759, 761, 762, 772, 775, 788, 815, 823, 824, 827, 840, 844, 848], "torch_alexnet": 3, "alexnet_weight": 3, "weight": [3, 10, 12, 14, 27, 28, 41, 42, 53, 55, 57, 59, 76, 78, 80, 82, 93, 94, 311, 315, 349, 365, 368, 371, 372, 383, 398, 431, 516, 518, 521, 611, 612, 615, 617, 618, 619, 631, 632, 634, 636, 656, 657, 658, 659, 662, 692, 713, 774, 787, 788, 790, 792, 806, 808, 823, 833, 840, 845, 849, 850, 865], "imagenet1k_v1": [3, 8], "dropout": [3, 57, 80, 371, 395, 396, 397, 632, 657, 659, 662, 788, 848], "9": [3, 4, 5, 7, 8, 9, 10, 20, 22, 23, 24, 25, 39, 41, 43, 46, 49, 50, 52, 53, 54, 55, 57, 58, 60, 62, 64, 65, 66, 69, 73, 75, 76, 77, 78, 80, 81, 83, 85, 87, 88, 89, 98, 99, 106, 122, 123, 124, 136, 154, 155, 156, 157, 158, 161, 164, 217, 219, 221, 222, 225, 226, 227, 230, 231, 236, 237, 238, 243, 250, 256, 257, 258, 260, 264, 265, 267, 268, 269, 272, 274, 275, 279, 280, 283, 284, 285, 290, 296, 299, 300, 301, 338, 341, 345, 351, 352, 359, 363, 368, 369, 371, 373, 374, 381, 383, 390, 391, 392, 393, 398, 399, 403, 404, 408, 409, 413, 414, 418, 432, 449, 451, 453, 454, 458, 459, 460, 466, 470, 475, 485, 486, 487, 488, 490, 492, 495, 506, 508, 511, 520, 537, 541, 542, 543, 545, 548, 556, 557, 560, 561, 564, 572, 573, 587, 588, 590, 611, 612, 613, 617, 618, 622, 625, 626, 628, 630, 631, 632, 633, 635, 637, 639, 640, 641, 642, 643, 646, 647, 648, 654, 655, 656, 664, 665, 667, 669, 670, 671, 673, 674, 675, 678, 680, 681, 683, 684, 685, 687, 688, 689, 695, 699, 703, 704, 706, 707, 709, 714, 715, 720, 722, 725, 726, 734, 735, 736, 737, 739, 744, 745, 747, 749, 750, 752, 754, 755, 757, 759, 761, 762, 772, 792, 823, 825, 827, 835, 840, 848, 849, 862], "torch_output": [3, 5, 8], "dim": [3, 8, 43, 53, 70, 72, 76, 137, 309, 365, 371, 374, 389, 399, 400, 401, 404, 412, 470, 492, 625, 632, 645, 652, 653, 658, 774, 788, 808, 825, 837, 838, 843], "torch_class": [3, 8], "torch_logit": [3, 8], "tensor": [3, 4, 7, 8, 9, 12, 14, 18, 19, 22, 23, 25, 27, 28, 29, 33, 39, 41, 49, 52, 53, 54, 57, 59, 60, 62, 70, 72, 75, 76, 77, 80, 81, 82, 83, 85, 92, 125, 133, 134, 137, 143, 159, 175, 267, 268, 298, 315, 319, 320, 321, 322, 323, 324, 333, 356, 363, 365, 368, 371, 372, 373, 374, 383, 384, 390, 391, 394, 398, 407, 408, 409, 410, 417, 419, 421, 428, 429, 430, 431, 434, 436, 438, 440, 441, 444, 446, 447, 448, 450, 453, 454, 470, 473, 478, 481, 482, 483, 484, 487, 492, 493, 524, 529, 572, 573, 625, 626, 628, 630, 632, 633, 634, 635, 639, 655, 658, 659, 674, 685, 692, 702, 704, 734, 788, 797, 802, 806, 808, 820, 821, 825, 826, 830, 832, 833, 836, 837, 838, 840, 841, 843, 845, 847, 848, 850, 851, 853, 855, 859, 860, 861, 863, 864, 867, 869, 870, 873], "6477": 3, "2950": 3, "0453": 3, "grad_fn": [3, 8, 25, 39, 614, 621, 631, 848], "lt": [3, 8, 12, 14, 18, 22, 23, 24, 25, 39, 41, 43, 99], "takebackward0": [3, 8], "gt": [3, 6, 8, 12, 14, 18, 22, 23, 24, 25, 39, 41, 43, 46, 99, 838, 845], "great": [3, 5, 808, 816, 840, 845, 847, 856, 857, 872], "With": [3, 20, 30, 39, 47, 49, 50, 52, 53, 54, 55, 57, 58, 60, 63, 66, 72, 73, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 98, 99, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 123, 124, 125, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 144, 145, 148, 149, 150, 151, 153, 159, 160, 161, 164, 171, 176, 177, 178, 179, 180, 190, 193, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 331, 332, 334, 336, 339, 340, 344, 347, 348, 349, 351, 352, 355, 363, 365, 368, 371, 372, 373, 374, 383, 393, 395, 396, 403, 415, 422, 423, 424, 426, 427, 428, 439, 442, 454, 470, 471, 472, 474, 477, 479, 480, 486, 488, 490, 492, 494, 509, 518, 519, 520, 521, 523, 524, 525, 526, 527, 528, 530, 534, 535, 536, 537, 540, 541, 542, 543, 544, 548, 549, 552, 554, 556, 557, 558, 572, 573, 587, 588, 589, 591, 593, 595, 596, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 662, 663, 664, 665, 666, 667, 669, 670, 672, 673, 674, 675, 676, 677, 680, 681, 682, 683, 684, 685, 687, 688, 689, 692, 694, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 712, 713, 714, 715, 717, 720, 721, 722, 723, 725, 726, 731, 732, 733, 734, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 815, 825, 827, 837, 840, 843, 845, 856, 857, 859, 866, 869], "simpl": [3, 12, 16, 17, 19, 22, 24, 25, 26, 27, 28, 29, 30, 32, 33, 39, 41, 43, 46, 53, 76, 383, 518, 774, 788, 802, 808, 814, 815, 816, 820, 822, 823, 825, 826, 827, 828, 833, 836, 837, 840, 841, 843, 847, 849, 850, 851, 853, 855, 859, 860, 865, 866, 867, 868], "chang": [3, 4, 10, 18, 28, 41, 42, 43, 47, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 96, 98, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 125, 127, 129, 130, 132, 134, 135, 136, 137, 139, 141, 142, 145, 149, 150, 151, 164, 168, 169, 176, 193, 210, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 296, 297, 299, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 318, 325, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 368, 371, 374, 383, 390, 391, 392, 393, 395, 396, 397, 399, 403, 404, 405, 408, 409, 410, 414, 415, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 430, 432, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 503, 505, 506, 507, 508, 509, 510, 511, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 533, 534, 536, 537, 540, 541, 542, 543, 544, 545, 548, 549, 552, 554, 556, 557, 558, 560, 561, 562, 564, 565, 567, 572, 573, 587, 588, 589, 590, 591, 593, 595, 596, 609, 611, 612, 615, 617, 618, 619, 620, 622, 628, 635, 637, 646, 647, 648, 649, 650, 651, 654, 655, 656, 658, 662, 663, 664, 666, 667, 668, 669, 670, 671, 672, 673, 674, 679, 680, 681, 683, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 715, 726, 731, 733, 734, 735, 736, 737, 739, 740, 741, 742, 743, 744, 745, 746, 747, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 762, 763, 764, 769, 808, 814, 815, 816, 817, 819, 821, 822, 823, 824, 825, 827, 828, 830, 831, 837, 838, 839, 840, 841, 842, 843, 845, 849, 851, 852, 857, 859, 869, 872], "backend": [3, 6, 9, 19, 20, 21, 22, 23, 24, 25, 28, 30, 31, 33, 48, 49, 53, 54, 58, 70, 76, 77, 81, 98, 125, 162, 163, 166, 188, 195, 196, 198, 201, 212, 331, 332, 368, 372, 424, 426, 525, 534, 546, 547, 555, 558, 559, 569, 576, 591, 594, 625, 626, 627, 630, 633, 681, 683, 767, 769, 770, 772, 773, 774, 777, 779, 780, 785, 789, 790, 792, 796, 797, 808, 812, 813, 815, 816, 818, 819, 820, 824, 826, 827, 828, 829, 830, 832, 833, 834, 836, 837, 838, 840, 842, 843, 844, 846, 847, 850, 853, 855, 859, 860, 861, 866, 869, 872, 873], "let": [3, 4, 5, 7, 9, 10, 12, 14, 18, 19, 20, 22, 23, 24, 25, 27, 28, 29, 30, 32, 33, 34, 39, 41, 42, 44, 46, 54, 66, 77, 216, 217, 218, 219, 222, 225, 234, 237, 239, 241, 250, 251, 252, 257, 259, 272, 280, 282, 283, 287, 548, 549, 628, 630, 633, 643, 687, 757, 759, 760, 761, 762, 808, 814, 817, 820, 822, 823, 824, 825, 826, 827, 828, 829, 830, 837, 838, 840, 841, 842, 843, 845, 847, 848, 849, 850, 857, 859, 860, 873], "u": [3, 7, 41, 43, 45, 46, 53, 58, 72, 76, 81, 93, 94, 134, 372, 436, 443, 445, 633, 637, 663, 669, 670, 683, 722, 808, 809, 815, 816, 818, 823, 824, 831, 834, 836, 837, 838, 839, 840, 841, 843, 849, 851, 856], "differ": [3, 4, 7, 9, 10, 12, 16, 17, 21, 22, 23, 27, 28, 31, 32, 33, 34, 52, 53, 54, 58, 66, 70, 76, 77, 89, 98, 99, 108, 111, 161, 219, 236, 243, 244, 269, 285, 330, 337, 342, 343, 347, 368, 371, 372, 374, 383, 405, 416, 441, 447, 464, 471, 472, 486, 519, 520, 528, 548, 549, 622, 626, 628, 630, 632, 633, 635, 643, 655, 656, 671, 681, 696, 706, 753, 754, 759, 761, 762, 767, 772, 780, 789, 790, 808, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 835, 836, 837, 838, 840, 841, 843, 845, 846, 847, 848, 849, 850, 851, 852, 855, 856, 857, 859, 860, 861, 863, 864, 865, 866, 869, 872, 873], "ll": [3, 5, 7, 9, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 42, 808, 809, 811, 812, 814, 815, 816, 817, 822, 827, 830, 831, 835, 836, 848, 852, 857, 859, 860], "try": [3, 19, 29, 39, 42, 46, 70, 597, 630, 787, 797, 808, 814, 815, 816, 819, 820, 823, 824, 825, 829, 831, 836, 838, 845, 847, 851, 854, 856, 857, 861], "10": [3, 5, 8, 9, 10, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 32, 33, 34, 39, 41, 43, 45, 46, 49, 52, 53, 54, 55, 57, 58, 62, 64, 66, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 99, 122, 132, 133, 134, 218, 226, 227, 230, 231, 234, 241, 246, 248, 254, 256, 258, 269, 275, 282, 283, 288, 297, 330, 331, 332, 335, 339, 340, 342, 344, 345, 347, 348, 349, 351, 352, 356, 359, 368, 371, 374, 383, 390, 391, 392, 393, 403, 408, 409, 413, 414, 415, 416, 418, 448, 460, 463, 466, 470, 475, 485, 486, 495, 516, 519, 520, 523, 525, 528, 541, 542, 543, 545, 548, 549, 551, 556, 557, 565, 573, 577, 582, 588, 590, 602, 605, 617, 625, 628, 630, 631, 632, 633, 635, 637, 638, 639, 640, 641, 642, 643, 646, 647, 649, 655, 665, 667, 671, 672, 673, 674, 675, 678, 683, 684, 685, 687, 689, 699, 704, 705, 706, 707, 709, 720, 722, 725, 733, 734, 735, 736, 737, 743, 745, 751, 753, 754, 755, 756, 758, 759, 761, 762, 772, 774, 792, 808, 812, 815, 819, 823, 824, 825, 827, 830, 835, 838, 840, 845, 847, 848, 856, 861, 871], "tf": [3, 5, 6, 9, 12, 14, 19, 22, 23, 25, 27, 28, 29, 30, 32, 34, 39, 44, 45, 785, 808, 820, 825, 826, 832, 836, 837, 840, 841, 843, 845, 850, 851, 853, 859, 860, 861, 866], "onc": [3, 5, 27, 28, 39, 41, 58, 62, 81, 85, 209, 372, 425, 627, 633, 639, 668, 669, 670, 683, 734, 808, 814, 815, 816, 823, 824, 825, 826, 827, 830, 831, 836, 837, 840, 843, 845, 848, 851, 852, 857, 859], "set": [3, 12, 14, 20, 27, 28, 30, 33, 41, 42, 43, 44, 45, 48, 53, 54, 57, 58, 63, 65, 66, 70, 76, 77, 80, 81, 86, 88, 89, 111, 114, 121, 141, 143, 177, 178, 179, 180, 181, 192, 205, 206, 207, 208, 209, 224, 324, 336, 352, 354, 359, 365, 368, 369, 371, 372, 373, 374, 383, 394, 415, 419, 423, 427, 430, 448, 453, 454, 470, 480, 483, 490, 518, 523, 524, 525, 526, 527, 528, 530, 534, 541, 553, 558, 574, 575, 576, 578, 579, 580, 581, 582, 583, 584, 585, 591, 599, 622, 624, 625, 626, 627, 628, 630, 632, 633, 637, 639, 640, 642, 643, 655, 662, 664, 674, 676, 679, 682, 683, 714, 721, 724, 725, 726, 731, 732, 738, 740, 741, 745, 747, 748, 749, 752, 760, 762, 769, 772, 773, 774, 775, 780, 787, 788, 790, 792, 797, 802, 805, 806, 808, 809, 816, 818, 819, 820, 822, 823, 824, 825, 826, 827, 829, 831, 833, 834, 836, 837, 838, 840, 841, 843, 845, 847, 848, 855, 858, 859, 860, 864, 865, 866, 867, 868, 870, 873], "our": [3, 7, 9, 10, 12, 14, 16, 19, 20, 22, 23, 24, 27, 28, 29, 30, 32, 33, 34, 39, 41, 42, 45, 68, 91, 98, 99, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 774, 784, 785, 787, 788, 790, 791, 792, 793, 808, 809, 810, 811, 813, 814, 815, 816, 817, 818, 819, 820, 822, 823, 824, 825, 827, 829, 830, 831, 834, 837, 838, 839, 840, 841, 843, 844, 845, 847, 848, 849, 850, 851, 855, 856, 859, 871, 872, 874], "post": [3, 5, 41, 61, 84, 638, 733, 815, 830, 835, 850, 852], "process": [3, 5, 6, 22, 27, 28, 32, 41, 203, 215, 627, 809, 815, 816, 822, 823, 824, 830, 831, 833, 835, 837, 838, 839, 840, 843, 845, 850, 856, 857, 859, 864, 865, 866, 869, 870, 872, 873], "11": [3, 5, 6, 8, 9, 18, 20, 22, 23, 24, 25, 39, 41, 42, 43, 46, 52, 53, 54, 57, 58, 62, 66, 75, 76, 77, 80, 81, 83, 85, 89, 99, 219, 223, 226, 231, 241, 278, 279, 285, 349, 368, 371, 372, 374, 390, 391, 403, 408, 409, 413, 414, 418, 427, 463, 464, 466, 470, 475, 477, 495, 519, 520, 535, 541, 542, 548, 557, 573, 628, 630, 632, 633, 634, 635, 637, 639, 640, 641, 643, 646, 647, 655, 656, 667, 670, 671, 672, 673, 674, 678, 682, 683, 684, 685, 687, 689, 692, 699, 704, 705, 707, 709, 720, 722, 732, 735, 736, 737, 744, 745, 753, 754, 755, 762, 823, 824, 825, 827, 835], "st": [3, 4, 7, 772, 819, 838, 840], "perf_count": [3, 6, 7], "raw_logit": 3, "latenc": [3, 7], "nn": [3, 5, 6, 14, 25, 27, 28, 41, 45, 135, 625, 808, 833, 838, 843, 850, 860, 867], "axi": [3, 5, 10, 42, 43, 44, 47, 49, 52, 53, 54, 58, 59, 60, 62, 63, 64, 65, 66, 67, 69, 70, 72, 75, 76, 77, 81, 82, 83, 85, 86, 87, 88, 89, 90, 93, 109, 113, 133, 134, 137, 209, 283, 288, 331, 332, 336, 337, 345, 352, 368, 371, 373, 374, 377, 381, 383, 393, 394, 400, 403, 405, 415, 416, 452, 457, 465, 466, 467, 470, 471, 472, 475, 480, 485, 486, 488, 489, 490, 492, 494, 495, 500, 501, 503, 511, 516, 519, 520, 521, 523, 524, 525, 526, 527, 528, 541, 548, 610, 622, 625, 627, 628, 630, 632, 633, 634, 635, 636, 639, 640, 641, 642, 643, 644, 654, 664, 667, 674, 687, 689, 690, 692, 693, 694, 696, 697, 698, 699, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 712, 713, 739, 740, 741, 745, 747, 749, 750, 752, 753, 754, 756, 757, 758, 759, 760, 761, 762, 763, 764, 772, 774, 784, 788, 789, 794, 823, 825, 827, 829, 832, 833, 836, 837, 840, 843, 845, 847, 850], "direct": [3, 53, 76, 337, 344, 348, 353, 357, 368, 371, 374, 405, 416, 471, 472, 486, 642, 752, 814, 820, 822, 837, 843, 849, 850, 862, 866, 867, 870], "tolist": 3, "652289830999962": 3, "shape": [3, 4, 5, 10, 12, 14, 20, 21, 22, 23, 27, 28, 33, 39, 41, 42, 43, 46, 47, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 93, 94, 96, 97, 98, 102, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 148, 149, 150, 204, 210, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 312, 313, 314, 315, 317, 319, 320, 321, 322, 323, 324, 325, 331, 332, 333, 334, 335, 337, 339, 340, 342, 344, 346, 348, 349, 350, 351, 355, 356, 358, 363, 365, 368, 371, 372, 373, 374, 377, 378, 379, 381, 383, 385, 386, 387, 388, 390, 391, 392, 394, 395, 396, 397, 398, 399, 400, 404, 405, 407, 408, 409, 410, 413, 415, 416, 417, 420, 421, 422, 423, 425, 426, 427, 430, 431, 432, 433, 434, 437, 438, 439, 440, 441, 442, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 460, 461, 463, 465, 468, 473, 478, 479, 480, 481, 482, 483, 484, 486, 487, 488, 489, 490, 492, 493, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 511, 516, 517, 518, 519, 520, 521, 536, 537, 541, 542, 543, 545, 548, 549, 552, 558, 565, 572, 573, 583, 592, 594, 606, 610, 611, 612, 615, 617, 618, 619, 620, 622, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 638, 639, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 687, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 705, 706, 707, 708, 710, 733, 734, 735, 736, 737, 739, 740, 741, 742, 743, 744, 749, 750, 752, 753, 754, 755, 757, 759, 760, 762, 763, 764, 769, 772, 774, 787, 788, 791, 801, 806, 808, 816, 817, 823, 825, 826, 827, 828, 829, 830, 832, 836, 837, 838, 840, 841, 842, 845, 847, 848, 849, 850, 859, 860], "dtype": [3, 5, 8, 10, 14, 20, 22, 23, 24, 25, 39, 42, 49, 50, 53, 54, 57, 58, 62, 63, 66, 70, 72, 73, 75, 76, 77, 80, 81, 85, 86, 89, 98, 101, 102, 103, 122, 123, 124, 126, 127, 128, 130, 131, 132, 133, 134, 136, 137, 138, 139, 144, 145, 146, 147, 148, 149, 151, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 204, 231, 235, 267, 268, 270, 308, 309, 310, 311, 312, 313, 314, 319, 320, 321, 322, 323, 329, 334, 336, 352, 365, 368, 371, 372, 373, 374, 378, 383, 393, 403, 415, 416, 419, 442, 448, 453, 464, 488, 504, 505, 506, 507, 508, 518, 519, 520, 521, 524, 527, 528, 545, 546, 547, 549, 558, 567, 595, 625, 626, 627, 628, 630, 632, 633, 636, 639, 640, 642, 643, 644, 648, 655, 674, 690, 712, 713, 735, 736, 737, 740, 741, 742, 751, 752, 753, 754, 759, 761, 763, 764, 767, 769, 772, 774, 775, 787, 788, 789, 790, 791, 793, 808, 812, 819, 821, 825, 826, 827, 829, 830, 833, 834, 836, 837, 838, 840, 841, 845, 847, 860], "int32": [3, 39, 41, 50, 53, 54, 62, 63, 66, 73, 76, 77, 85, 86, 128, 133, 137, 139, 145, 148, 151, 153, 155, 157, 159, 162, 164, 165, 169, 172, 176, 180, 184, 186, 204, 231, 267, 268, 379, 383, 509, 519, 520, 521, 549, 558, 595, 625, 626, 627, 628, 630, 639, 640, 643, 735, 736, 737, 741, 753, 754, 759, 761, 772, 773, 825, 837, 840, 845], "6477362": 3, "29496726": 3, "04526032": 3, "float32": [3, 5, 8, 10, 12, 14, 19, 20, 39, 41, 42, 43, 49, 50, 53, 54, 57, 72, 73, 76, 77, 80, 89, 134, 137, 139, 145, 146, 147, 151, 155, 156, 159, 160, 161, 162, 165, 168, 169, 171, 176, 179, 185, 235, 249, 276, 329, 342, 365, 368, 371, 372, 373, 383, 393, 403, 416, 442, 448, 453, 521, 558, 595, 625, 626, 628, 630, 632, 633, 636, 648, 650, 651, 654, 681, 683, 684, 690, 712, 713, 769, 772, 773, 808, 825, 827, 838, 840, 841, 860, 861], "As": [3, 5, 7, 9, 10, 12, 14, 20, 24, 25, 27, 28, 30, 33, 39, 40, 64, 68, 91, 633, 641, 681, 745, 746, 747, 748, 808, 812, 814, 815, 816, 817, 820, 822, 823, 824, 825, 826, 829, 830, 831, 832, 833, 836, 837, 838, 839, 840, 843, 847, 848, 849, 851, 855, 859, 860, 861, 866, 871], "expect": [3, 5, 7, 9, 20, 24, 27, 28, 30, 43, 44, 46, 53, 58, 59, 76, 82, 175, 243, 287, 371, 373, 394, 416, 453, 532, 626, 628, 630, 632, 634, 657, 678, 692, 787, 788, 808, 815, 816, 819, 825, 826, 829, 831, 834, 836, 838, 840, 843, 851, 852, 857, 859, 860, 861], "ident": [3, 10, 25, 42, 44, 58, 70, 128, 197, 551, 577, 625, 627, 630, 633, 637, 671, 675, 727, 788, 823, 833, 834, 837, 838, 841, 843, 847, 848, 851, 853, 855, 857], "had": [3, 823, 824, 836, 841, 845, 866, 867], "anoth": [3, 18, 20, 21, 24, 25, 27, 28, 30, 31, 43, 44, 129, 149, 151, 625, 626, 808, 814, 815, 816, 821, 823, 825, 826, 829, 831, 833, 836, 837, 840, 845, 847, 850, 853, 856, 858, 859, 860, 866, 872], "postprocess": 3, "routin": [3, 824, 836, 837, 843, 851, 866], "feed": [3, 209, 627, 859, 866, 867], "other": [3, 6, 7, 9, 12, 14, 19, 20, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 34, 41, 43, 50, 52, 53, 54, 60, 66, 70, 73, 75, 76, 77, 83, 89, 93, 98, 99, 122, 137, 149, 175, 236, 241, 243, 259, 268, 269, 333, 337, 368, 374, 464, 465, 473, 530, 531, 625, 626, 628, 630, 639, 643, 696, 706, 737, 760, 762, 774, 808, 812, 814, 815, 816, 817, 819, 820, 823, 824, 827, 828, 829, 830, 831, 833, 834, 835, 836, 837, 838, 840, 841, 843, 845, 847, 849, 850, 851, 852, 853, 856, 859, 860, 862, 864, 865, 866, 872, 873], "carefulli": [3, 274, 628, 787, 837, 864, 869], "rewrit": 3, "easili": [3, 24, 27, 28, 39, 808, 815, 820, 824, 830, 837, 840, 843, 848, 849, 850, 851, 856, 866, 872, 873], "out": [3, 5, 9, 10, 12, 14, 16, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 39, 42, 45, 47, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 98, 99, 103, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 148, 150, 159, 210, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 325, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 363, 365, 368, 371, 372, 373, 374, 377, 378, 379, 381, 383, 384, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 403, 404, 405, 407, 408, 409, 410, 413, 415, 416, 419, 420, 421, 422, 423, 424, 425, 428, 429, 431, 432, 433, 434, 435, 437, 438, 439, 440, 442, 446, 449, 450, 451, 452, 454, 455, 461, 463, 464, 465, 467, 468, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 492, 493, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 511, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 532, 536, 537, 541, 542, 543, 545, 548, 549, 558, 568, 572, 573, 611, 612, 615, 617, 618, 619, 620, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 658, 659, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 705, 706, 707, 708, 710, 733, 734, 735, 736, 737, 739, 740, 741, 742, 744, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 772, 780, 784, 785, 787, 788, 790, 791, 792, 793, 808, 809, 812, 813, 814, 815, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 831, 833, 835, 837, 838, 839, 840, 841, 843, 844, 845, 846, 847, 848, 849, 850, 852, 855, 856, 857, 859, 860, 866, 873], "quickest": 3, "particular": [3, 27, 28, 264, 628, 773, 815, 816, 819, 821, 824, 825, 827, 834, 836, 837, 840, 841, 862, 866, 872], "hardwar": [3, 41, 98, 102, 808, 815, 843, 856, 862, 864, 865, 866, 867, 868, 869, 870, 871, 872], "again": [3, 5, 21, 22, 30, 31, 32, 33, 633, 681, 816, 820, 821, 822, 823, 827, 829, 831, 836, 837, 840, 841, 843, 848, 850, 851, 856, 857, 871, 872], "speed": [3, 7, 9, 10, 27, 28, 41, 46, 54, 77, 565, 630, 840, 855, 869], "up": [3, 5, 7, 9, 10, 27, 53, 54, 76, 77, 371, 374, 394, 407, 464, 472, 553, 565, 630, 632, 655, 657, 808, 809, 812, 814, 816, 817, 819, 820, 821, 823, 824, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 840, 841, 843, 845, 846, 847, 848, 849, 850, 851, 855, 856, 857, 859, 867, 872, 873], "12": [3, 5, 7, 8, 10, 18, 20, 22, 23, 24, 25, 39, 41, 42, 43, 50, 52, 53, 54, 57, 58, 62, 66, 73, 75, 76, 77, 80, 81, 83, 84, 85, 89, 98, 99, 164, 219, 221, 226, 230, 231, 234, 236, 237, 238, 256, 269, 272, 279, 282, 289, 290, 313, 314, 345, 348, 349, 365, 368, 371, 374, 383, 390, 391, 392, 393, 395, 399, 400, 408, 409, 413, 414, 415, 416, 418, 463, 464, 466, 470, 475, 492, 495, 508, 519, 525, 526, 527, 537, 541, 542, 573, 579, 588, 602, 628, 630, 632, 633, 635, 637, 638, 639, 640, 641, 643, 646, 650, 655, 656, 667, 669, 671, 674, 678, 682, 684, 685, 687, 689, 699, 703, 705, 707, 709, 726, 733, 735, 736, 737, 744, 745, 753, 754, 755, 759, 761, 772, 815, 821, 823, 825, 827, 835], "repeat": [3, 4, 21, 31, 53, 54, 60, 76, 77, 83, 371, 374, 383, 400, 405, 469, 518, 543, 630, 635, 636, 708, 712, 713, 801, 816, 820, 821, 827, 828, 836, 840], "previou": [3, 10, 20, 21, 22, 24, 30, 31, 32, 34, 55, 76, 78, 183, 184, 185, 186, 187, 360, 370, 371, 417, 598, 600, 601, 602, 603, 605, 606, 608, 612, 617, 626, 630, 631, 787, 805, 815, 816, 819, 821, 824, 826, 832, 837, 840, 843, 850, 851, 869], "trace": [3, 4, 5, 7, 8, 9, 16, 17, 21, 24, 27, 30, 32, 33, 45, 54, 58, 70, 77, 81, 560, 561, 564, 575, 584, 599, 607, 630, 633, 769, 780, 790, 792, 806, 808, 819, 823, 825, 837, 842, 843, 845, 850, 851, 858, 859, 860, 867, 872], "befor": [3, 4, 5, 19, 20, 21, 22, 23, 29, 30, 31, 32, 33, 34, 41, 53, 57, 58, 60, 64, 66, 70, 76, 80, 81, 206, 209, 214, 371, 374, 383, 399, 404, 414, 418, 464, 471, 472, 473, 480, 519, 520, 627, 632, 633, 635, 636, 637, 641, 643, 645, 646, 647, 648, 650, 652, 654, 658, 659, 662, 673, 674, 690, 696, 711, 712, 726, 745, 746, 747, 748, 753, 754, 759, 761, 788, 797, 801, 814, 815, 816, 819, 820, 822, 825, 826, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 840, 845, 848, 851, 859, 860, 866], "13": [3, 5, 7, 8, 18, 22, 23, 24, 25, 39, 41, 43, 47, 52, 53, 57, 58, 62, 66, 75, 76, 77, 78, 80, 83, 85, 89, 98, 114, 164, 194, 219, 234, 243, 254, 274, 283, 345, 352, 359, 368, 371, 374, 392, 393, 403, 414, 418, 463, 464, 466, 470, 475, 495, 508, 519, 520, 536, 537, 541, 542, 557, 579, 588, 611, 622, 626, 627, 628, 630, 631, 632, 633, 635, 636, 637, 640, 641, 643, 646, 647, 655, 656, 667, 671, 678, 682, 684, 687, 709, 713, 726, 735, 736, 737, 744, 745, 753, 754, 755, 823, 825, 827, 837], "026875037000081647": 3, "14": [3, 5, 7, 8, 23, 39, 41, 42, 43, 50, 52, 53, 57, 58, 62, 66, 73, 75, 76, 77, 80, 81, 83, 85, 148, 161, 164, 217, 222, 224, 231, 235, 261, 265, 269, 275, 282, 290, 341, 371, 372, 374, 383, 390, 391, 392, 393, 403, 408, 410, 413, 414, 415, 418, 422, 428, 429, 464, 466, 470, 475, 495, 519, 588, 611, 626, 628, 630, 631, 632, 633, 635, 637, 641, 643, 646, 647, 649, 651, 653, 655, 667, 669, 671, 678, 685, 687, 689, 709, 726, 735, 736, 737, 745, 754, 755, 823, 827, 840], "overrid": [3, 5, 33, 42, 49, 53, 72, 76, 137, 383, 518, 625, 820, 822], "behavior": [3, 5, 53, 64, 236, 243, 269, 278, 384, 529, 576, 600, 628, 630, 641, 745, 746, 747, 748, 814, 822, 823, 824, 825, 836, 837, 838, 840, 843, 845, 851, 863], "prealloc": [3, 5], "75": [3, 5, 39, 52, 53, 75, 76, 77, 80, 85, 115, 133, 222, 224, 236, 238, 249, 311, 344, 345, 365, 368, 414, 528, 543, 556, 588, 622, 625, 628, 630, 633, 637, 639, 646, 672, 678, 722, 737], "memori": [3, 5, 6, 9, 19, 22, 23, 24, 25, 49, 53, 60, 72, 76, 83, 124, 135, 191, 203, 209, 211, 215, 374, 383, 458, 459, 466, 468, 470, 471, 472, 479, 495, 525, 571, 576, 600, 625, 627, 630, 632, 635, 657, 658, 698, 699, 700, 702, 704, 705, 707, 709, 802, 806, 824, 825, 826, 836, 837, 843, 845, 851, 859, 866, 868, 869, 870], "temporari": [3, 5, 585, 608, 630, 802, 825, 842], "fix": [3, 5, 43, 53, 76, 93, 94, 368, 371, 372, 417, 447, 632, 659, 808, 812, 815, 816, 819, 825, 831, 840, 841], "until": [3, 5, 802, 816, 836, 845, 851, 856, 859, 873], "handl": [3, 5, 39, 41, 47, 51, 52, 53, 69, 70, 74, 75, 76, 99, 106, 107, 108, 109, 110, 111, 112, 113, 114, 189, 190, 191, 192, 193, 197, 202, 203, 211, 215, 221, 233, 258, 260, 274, 280, 281, 286, 287, 291, 296, 297, 299, 363, 374, 463, 489, 622, 627, 628, 633, 643, 687, 759, 761, 784, 792, 809, 811, 818, 823, 824, 825, 831, 832, 833, 835, 836, 837, 838, 839, 840, 842, 843, 849, 863, 873], "o": [3, 5, 40, 41, 42, 43, 45, 568, 630, 632, 659, 808, 815, 818, 824, 845, 852], "environ": [3, 5, 6, 9, 22, 23, 24, 25, 42, 45, 808, 809, 816, 852, 866, 868], "xla_python_client_alloc": [3, 5], "platform": [3, 5, 6, 10, 22, 23, 25, 810, 813, 815, 822, 864, 868, 870], "jit": [3, 7, 9, 27, 30, 845, 851, 859, 866], "img_jax": [3, 5], "device_put": [3, 7], "15": [3, 5, 6, 8, 9, 10, 23, 39, 41, 42, 43, 46, 52, 53, 54, 58, 62, 66, 72, 73, 75, 76, 77, 80, 81, 83, 85, 89, 99, 132, 161, 219, 226, 230, 236, 238, 247, 254, 255, 260, 261, 269, 278, 279, 280, 345, 359, 368, 369, 371, 372, 374, 383, 390, 391, 408, 410, 413, 414, 418, 424, 466, 470, 475, 495, 519, 537, 541, 542, 545, 556, 557, 582, 588, 605, 625, 626, 628, 630, 632, 633, 635, 637, 639, 640, 641, 643, 646, 656, 667, 670, 671, 672, 678, 684, 685, 703, 709, 714, 735, 736, 743, 745, 754, 755, 769, 811, 815, 824, 827, 835, 869], "warm": 3, "_": [3, 6, 7, 9, 10, 27, 40, 41, 52, 53, 70, 75, 76, 78, 94, 151, 239, 241, 249, 250, 265, 331, 332, 368, 371, 374, 383, 415, 444, 447, 488, 518, 541, 611, 612, 626, 628, 630, 631, 633, 635, 637, 643, 681, 682, 684, 710, 721, 760, 816, 824, 825, 828, 836, 840, 848], "rang": [3, 6, 10, 27, 28, 39, 40, 41, 43, 49, 53, 66, 72, 76, 122, 133, 134, 283, 295, 303, 315, 363, 365, 372, 374, 383, 426, 438, 473, 481, 483, 488, 493, 519, 520, 521, 541, 610, 625, 628, 630, 641, 643, 745, 753, 754, 759, 761, 772, 774, 775, 787, 808, 811, 814, 825, 829, 833, 840, 845, 848, 849, 850, 866, 872], "16": [3, 5, 6, 10, 22, 23, 24, 25, 39, 41, 43, 52, 53, 54, 57, 58, 62, 66, 73, 75, 76, 77, 80, 81, 83, 85, 98, 99, 164, 230, 259, 279, 286, 342, 345, 349, 368, 371, 374, 383, 390, 391, 393, 399, 403, 404, 408, 409, 414, 418, 453, 470, 519, 525, 542, 545, 567, 588, 589, 621, 626, 628, 630, 631, 632, 633, 635, 637, 639, 640, 643, 654, 656, 663, 667, 670, 671, 678, 680, 684, 709, 722, 735, 736, 737, 744, 754, 755, 772, 775, 808, 816, 825, 827, 848], "0022192720000475674": 3, "64773613": 3, "29496723": 3, "exact": [3, 53, 69, 70, 106, 371, 373, 407, 412, 452, 453, 641, 745, 747, 774, 784, 815, 816, 819, 827, 845], "note": [3, 5, 10, 23, 27, 28, 33, 42, 43, 44, 53, 54, 58, 60, 64, 76, 81, 83, 93, 130, 143, 175, 243, 278, 279, 286, 324, 325, 345, 365, 368, 371, 372, 374, 394, 425, 430, 440, 441, 447, 470, 488, 626, 628, 632, 633, 635, 641, 643, 659, 668, 669, 680, 681, 683, 702, 706, 746, 748, 757, 788, 802, 806, 812, 814, 815, 816, 820, 825, 827, 828, 831, 836, 837, 838, 840, 841, 843], "were": [3, 5, 44, 70, 73, 164, 168, 169, 243, 628, 632, 659, 814, 815, 816, 825, 829, 831, 835, 836, 838, 840, 841, 843, 845, 859, 866, 867, 872], "function": [3, 6, 10, 12, 14, 16, 17, 19, 20, 21, 22, 23, 24, 25, 29, 30, 31, 32, 33, 34, 35, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 98, 99, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 149, 150, 151, 161, 162, 163, 164, 167, 168, 169, 171, 175, 176, 193, 195, 196, 205, 209, 210, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 318, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 380, 383, 390, 391, 392, 393, 395, 396, 397, 399, 403, 404, 405, 408, 409, 410, 414, 415, 417, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 430, 432, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 503, 505, 506, 507, 508, 509, 510, 511, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 551, 552, 553, 554, 556, 557, 558, 560, 561, 562, 564, 565, 567, 568, 571, 572, 573, 576, 577, 580, 582, 584, 587, 588, 589, 590, 591, 593, 595, 596, 597, 603, 607, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 654, 655, 656, 658, 659, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 687, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 716, 718, 720, 721, 722, 724, 725, 726, 727, 733, 734, 735, 736, 737, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 767, 770, 772, 773, 774, 775, 780, 784, 787, 790, 797, 798, 804, 806, 808, 812, 815, 816, 818, 819, 820, 821, 822, 824, 827, 828, 830, 836, 839, 844, 846, 847, 848, 849, 853, 855, 859, 861, 863, 864, 865, 866, 867, 872, 873], "calcul": [3, 10, 41, 52, 53, 54, 59, 66, 70, 75, 76, 77, 81, 82, 89, 99, 216, 217, 218, 219, 220, 221, 222, 223, 224, 233, 234, 236, 239, 240, 241, 257, 258, 259, 260, 261, 262, 267, 268, 269, 274, 281, 282, 283, 285, 286, 287, 293, 303, 331, 332, 345, 355, 368, 371, 372, 373, 374, 377, 383, 390, 391, 392, 426, 448, 453, 480, 497, 499, 525, 565, 628, 630, 633, 634, 643, 670, 678, 681, 692, 693, 694, 756, 757, 758, 759, 760, 761, 762, 772, 774, 787, 788, 791, 814, 828, 845, 856, 859], "dog": 3, "18": [3, 9, 10, 22, 23, 24, 25, 39, 41, 43, 52, 53, 62, 75, 76, 77, 80, 81, 85, 89, 109, 231, 236, 278, 282, 291, 292, 345, 363, 368, 371, 374, 393, 399, 403, 404, 408, 414, 418, 470, 587, 622, 628, 633, 639, 643, 650, 667, 673, 678, 685, 735, 736, 737, 754, 755, 759, 823, 825, 827], "19": [3, 9, 22, 23, 24, 25, 39, 41, 42, 43, 46, 52, 53, 62, 75, 76, 80, 81, 85, 222, 231, 259, 269, 286, 371, 372, 374, 383, 392, 393, 404, 408, 414, 418, 424, 429, 470, 519, 628, 633, 637, 639, 642, 667, 674, 687, 725, 735, 736, 737, 752, 827], "006431100999861883": 3, "258": [3, 632, 647, 649], "104": [3, 66, 633, 643, 678, 755], "259": 3, "72447652": 3, "13937832": 3, "05874982": 3, "samoi": 3, "wallabi": 3, "pomeranian": 3, "incorrect": [3, 824], "predict": [3, 5, 8, 10, 41, 42, 43, 44, 53, 59, 76, 82, 373, 449, 452, 455, 634, 692, 693, 694, 808, 825], "down": [3, 20, 30, 44, 53, 76, 371, 374, 407, 472, 815, 840, 853, 866, 872], "itself": [3, 22, 32, 52, 93, 270, 531, 597, 628, 630, 637, 726, 802, 812, 815, 816, 819, 822, 823, 824, 825, 826, 829, 830, 831, 836, 837, 849, 851, 855, 859, 865, 866, 867, 872], "version": [3, 6, 10, 24, 25, 30, 41, 42, 43, 46, 47, 53, 76, 93, 106, 287, 336, 338, 368, 383, 523, 528, 610, 628, 630, 633, 669, 670, 769, 797, 798, 808, 815, 816, 822, 824, 825, 828, 836, 838, 845, 855, 856, 857, 860, 872, 873], "return": [3, 5, 7, 8, 9, 10, 12, 14, 18, 19, 20, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 34, 39, 40, 41, 42, 43, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 96, 98, 99, 103, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 182, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 365, 368, 369, 370, 371, 372, 373, 374, 377, 378, 379, 381, 383, 384, 385, 386, 387, 388, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 403, 404, 405, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 767, 769, 772, 773, 774, 775, 779, 780, 785, 787, 788, 790, 792, 797, 798, 801, 802, 803, 804, 805, 806, 808, 815, 816, 820, 823, 825, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 840, 841, 842, 843, 845, 847, 848, 849, 850, 851, 859, 860, 861, 867], "20": [3, 6, 10, 14, 39, 41, 42, 43, 46, 52, 53, 54, 57, 62, 66, 75, 76, 77, 80, 81, 85, 89, 231, 235, 239, 275, 279, 283, 300, 345, 347, 349, 368, 371, 374, 390, 392, 408, 414, 418, 463, 485, 541, 548, 549, 551, 573, 577, 588, 628, 630, 633, 639, 640, 643, 646, 647, 658, 667, 672, 674, 678, 685, 735, 743, 744, 753, 754, 755, 759, 761, 808, 824, 843, 847], "004749261999904775": 3, "7245": 3, "1394": 3, "0587": 3, "promis": [3, 856], "sourc": [3, 6, 8, 14, 19, 20, 21, 22, 23, 24, 25, 27, 28, 33, 34, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 365, 368, 369, 370, 371, 372, 373, 374, 377, 378, 379, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 769, 770, 772, 773, 774, 776, 777, 778, 779, 780, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 814, 815, 816, 819, 820, 822, 823, 824, 837, 839, 855, 856, 857, 858, 860, 861, 865, 866, 867, 868, 869], "21": [3, 10, 39, 41, 43, 46, 52, 53, 54, 62, 72, 75, 76, 80, 81, 85, 89, 98, 134, 164, 219, 222, 224, 230, 254, 269, 300, 352, 371, 372, 373, 374, 383, 390, 393, 403, 408, 414, 416, 418, 422, 448, 463, 519, 573, 625, 626, 628, 630, 633, 637, 643, 667, 678, 682, 720, 735, 736, 753, 754, 755, 829, 835], "modul": [3, 5, 7, 9, 12, 14, 16, 17, 18, 22, 23, 24, 25, 27, 28, 29, 33, 39, 40, 41, 43, 44, 45, 68, 70, 91, 99, 364, 366, 367, 375, 376, 380, 569, 630, 644, 765, 769, 784, 785, 786, 788, 789, 791, 793, 796, 797, 806, 808, 810, 815, 820, 821, 822, 829, 833, 836, 837, 839, 840, 845, 846, 848, 850, 851, 857, 859, 861, 866, 867, 869], "def": [3, 5, 7, 9, 10, 12, 14, 18, 19, 20, 21, 22, 23, 27, 28, 29, 30, 31, 32, 33, 34, 39, 40, 41, 42, 43, 45, 52, 75, 118, 220, 535, 624, 630, 636, 637, 712, 713, 720, 801, 808, 812, 814, 815, 819, 820, 823, 825, 826, 827, 829, 830, 832, 833, 835, 836, 837, 838, 840, 841, 843, 845, 847, 848, 849, 850, 859, 860, 861], "__init__": [3, 5, 12, 14, 27, 28, 39, 40, 41, 43, 70, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 770, 777, 778, 779, 784, 787, 788, 789, 790, 791, 792, 793, 796, 797, 801, 803, 806, 808, 814, 820, 821, 825, 829, 837, 841, 845, 847, 848, 849, 850, 860], "self": [3, 5, 12, 14, 27, 28, 39, 40, 41, 43, 45, 47, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 98, 99, 102, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 125, 127, 129, 130, 132, 133, 134, 135, 136, 137, 139, 141, 142, 143, 145, 148, 149, 150, 151, 159, 161, 164, 167, 168, 169, 171, 173, 176, 193, 210, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 318, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 383, 385, 386, 387, 388, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 403, 404, 405, 407, 408, 409, 410, 411, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 432, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 507, 508, 509, 510, 511, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 533, 534, 536, 537, 540, 541, 542, 543, 544, 545, 548, 549, 552, 554, 556, 557, 558, 560, 561, 562, 564, 565, 567, 572, 573, 587, 588, 589, 590, 591, 593, 595, 596, 609, 611, 612, 615, 617, 618, 619, 620, 632, 646, 647, 648, 649, 650, 651, 654, 655, 656, 658, 659, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 733, 734, 735, 736, 737, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 792, 801, 808, 816, 820, 823, 829, 837, 838, 845, 847, 848, 849, 850, 860], "num_class": [3, 12, 14, 27, 28, 41, 43, 45, 808, 850, 860], "1000": [3, 6, 7, 8, 12, 27, 28, 41, 42, 43, 44, 46, 49, 72, 134, 625, 808, 848, 860], "v": [3, 4, 5, 16, 17, 20, 27, 28, 30, 33, 34, 39, 42, 43, 53, 57, 65, 72, 76, 80, 88, 134, 234, 239, 241, 282, 372, 374, 426, 436, 443, 444, 469, 628, 632, 636, 642, 659, 662, 712, 713, 751, 769, 788, 789, 790, 791, 792, 793, 808, 810, 815, 816, 818, 822, 830, 845, 848, 849, 850, 874], "none": [3, 5, 7, 9, 10, 27, 39, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 93, 97, 98, 99, 102, 103, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 148, 149, 150, 151, 154, 155, 156, 157, 158, 159, 161, 164, 166, 167, 168, 169, 171, 173, 176, 188, 191, 192, 204, 205, 206, 207, 208, 209, 210, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 319, 320, 321, 322, 323, 324, 325, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 363, 365, 368, 371, 372, 373, 374, 377, 378, 379, 381, 382, 383, 384, 385, 386, 387, 388, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 403, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 458, 459, 460, 461, 463, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 533, 534, 536, 537, 540, 541, 542, 543, 544, 545, 548, 549, 551, 552, 553, 554, 556, 557, 558, 560, 561, 564, 569, 572, 573, 574, 575, 576, 578, 579, 580, 581, 583, 584, 585, 587, 588, 589, 591, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 615, 617, 618, 619, 620, 622, 623, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 718, 719, 720, 721, 725, 726, 727, 729, 730, 731, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 769, 770, 772, 773, 774, 775, 780, 784, 785, 787, 788, 789, 790, 791, 792, 793, 796, 797, 800, 802, 806, 808, 812, 815, 819, 820, 821, 823, 824, 825, 826, 827, 829, 830, 832, 833, 836, 837, 838, 840, 841, 843, 845, 847, 849, 850, 859, 860, 861], "_build": [3, 5, 789, 790, 808], "kwarg": [3, 4, 5, 9, 10, 27, 41, 45, 48, 53, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 99, 102, 199, 374, 480, 568, 597, 625, 627, 630, 767, 769, 784, 785, 788, 789, 790, 797, 806, 808, 820, 825, 826, 829, 833, 836, 837, 843, 845, 849, 859, 860, 861], "featur": [3, 9, 10, 12, 14, 16, 18, 27, 28, 41, 45, 53, 76, 371, 385, 387, 388, 395, 396, 397, 787, 788, 806, 808, 814, 815, 816, 820, 821, 824, 825, 832, 841, 843, 848, 851, 860, 866, 867, 868, 872], "sequenti": [3, 5, 8, 25, 27, 28, 43, 808, 822, 823, 849, 860], "conv2d": [3, 5, 8, 25, 27, 28, 43, 46, 57, 80, 632, 649, 788, 808], "64": [3, 5, 8, 39, 41, 42, 43, 46, 52, 53, 57, 75, 76, 77, 80, 81, 85, 89, 99, 160, 230, 240, 274, 283, 284, 342, 368, 371, 393, 403, 541, 542, 589, 617, 626, 628, 630, 631, 632, 633, 637, 643, 647, 649, 651, 653, 654, 675, 678, 688, 722, 726, 736, 755, 759, 808, 815, 825, 848, 849, 863, 871], "2": [3, 4, 5, 6, 7, 8, 9, 10, 12, 18, 20, 21, 22, 23, 24, 25, 27, 28, 39, 40, 41, 42, 43, 46, 47, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 93, 96, 98, 99, 106, 108, 109, 110, 111, 112, 113, 114, 115, 119, 121, 122, 123, 124, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 143, 145, 148, 149, 150, 151, 155, 159, 161, 169, 171, 176, 192, 193, 194, 197, 200, 202, 204, 207, 210, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 315, 316, 317, 324, 326, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 363, 365, 368, 369, 371, 372, 373, 374, 377, 378, 381, 383, 387, 390, 391, 392, 393, 394, 395, 396, 398, 399, 400, 403, 404, 405, 408, 409, 410, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 432, 437, 439, 442, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 463, 464, 465, 466, 467, 470, 471, 472, 474, 475, 476, 477, 479, 480, 485, 486, 487, 488, 489, 490, 492, 494, 495, 496, 500, 501, 503, 506, 508, 509, 510, 511, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 530, 533, 534, 535, 536, 537, 540, 541, 542, 543, 544, 545, 548, 549, 550, 551, 552, 553, 554, 556, 557, 558, 560, 561, 562, 564, 565, 567, 568, 570, 572, 573, 577, 586, 587, 588, 589, 590, 591, 593, 597, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 712, 713, 714, 715, 717, 718, 720, 721, 722, 723, 725, 726, 731, 732, 733, 734, 735, 736, 737, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 772, 774, 775, 784, 787, 788, 797, 801, 802, 806, 808, 812, 815, 816, 819, 821, 822, 823, 824, 825, 827, 829, 830, 832, 833, 835, 836, 837, 838, 840, 844, 845, 847, 848, 849, 850, 851, 859, 860, 861, 872, 873], "data_format": [3, 43, 53, 57, 76, 80, 371, 377, 386, 390, 391, 392, 395, 396, 397, 408, 409, 410, 411, 413, 497, 498, 499, 502, 632, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 772, 788, 791, 808], "nchw": [3, 43, 53, 57, 76, 80, 371, 377, 386, 391, 396, 409, 413, 502, 632, 645, 648, 649, 652, 653, 654, 788, 808], "relu": [3, 5, 8, 25, 27, 28, 39, 46, 47, 53, 68, 69, 76, 108, 298, 299, 307, 363, 622, 784, 808, 838, 848, 849], "maxpool2d": [3, 5, 8, 41, 788, 808], "192": [3, 43, 772, 801], "384": [3, 78, 611, 631, 637, 714], "avgpool": [3, 8], "adaptiveavgpool2d": [3, 8, 788], "6": [3, 7, 8, 9, 10, 12, 20, 22, 23, 24, 25, 27, 28, 39, 41, 42, 43, 46, 47, 49, 50, 52, 53, 54, 55, 57, 58, 60, 62, 63, 65, 66, 72, 73, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 94, 98, 99, 106, 108, 113, 118, 123, 124, 131, 132, 135, 136, 139, 145, 149, 150, 151, 159, 161, 169, 215, 216, 218, 219, 221, 222, 223, 224, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 246, 247, 248, 249, 251, 252, 253, 254, 255, 256, 259, 260, 261, 262, 264, 266, 267, 268, 269, 271, 272, 273, 275, 276, 278, 279, 280, 281, 283, 284, 285, 286, 287, 288, 290, 292, 293, 295, 297, 299, 301, 302, 303, 305, 306, 307, 308, 309, 315, 326, 331, 332, 334, 336, 345, 346, 348, 349, 350, 352, 359, 363, 365, 368, 369, 371, 372, 373, 374, 379, 381, 383, 393, 395, 398, 399, 403, 404, 408, 414, 415, 416, 418, 421, 424, 427, 428, 432, 450, 451, 452, 453, 454, 455, 456, 458, 459, 460, 464, 466, 470, 471, 475, 476, 479, 480, 485, 486, 488, 489, 492, 495, 496, 506, 508, 509, 511, 516, 518, 519, 520, 521, 523, 525, 527, 528, 534, 536, 537, 540, 541, 542, 548, 549, 556, 557, 558, 573, 587, 588, 589, 590, 591, 593, 597, 611, 612, 613, 614, 615, 616, 617, 618, 619, 621, 622, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 658, 662, 664, 665, 666, 667, 669, 670, 671, 673, 674, 675, 678, 680, 681, 682, 683, 684, 685, 687, 688, 689, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 703, 704, 705, 706, 707, 708, 709, 710, 714, 715, 725, 726, 732, 733, 734, 735, 736, 737, 739, 740, 741, 744, 745, 746, 747, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 772, 787, 808, 812, 815, 819, 821, 823, 824, 825, 827, 830, 835, 840, 843, 845, 847, 848, 849], "classifi": [3, 10, 12, 14, 27, 28, 41, 43, 44, 808, 814, 859, 860], "prob": [3, 43, 53, 57, 76, 80, 85, 371, 378, 395, 396, 397, 504, 632, 639, 655, 734, 788, 808], "linear": [3, 8, 14, 26, 27, 28, 39, 40, 41, 43, 46, 53, 54, 57, 69, 76, 77, 80, 106, 108, 110, 111, 114, 291, 295, 299, 301, 302, 303, 307, 349, 363, 368, 371, 374, 383, 407, 442, 480, 528, 545, 568, 622, 630, 632, 637, 659, 682, 721, 772, 774, 775, 787, 788, 808, 823, 828, 833, 834, 836, 837, 840, 843, 845, 848, 849, 850, 860, 864, 865, 866, 869], "4096": 3, "_forward": [3, 5, 7, 9, 27, 28, 39, 40, 43, 808, 828, 845, 848, 849], "x": [3, 5, 6, 10, 12, 14, 18, 19, 20, 21, 22, 23, 27, 28, 29, 30, 31, 32, 33, 34, 39, 40, 41, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 93, 94, 98, 99, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 119, 122, 123, 124, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 148, 150, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 168, 169, 171, 176, 192, 193, 195, 197, 202, 203, 204, 208, 210, 211, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 270, 271, 273, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 318, 324, 325, 329, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 363, 365, 368, 369, 371, 372, 373, 374, 377, 381, 382, 383, 384, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 418, 420, 422, 423, 425, 427, 429, 430, 431, 432, 433, 436, 437, 438, 439, 440, 441, 442, 445, 446, 447, 448, 449, 451, 452, 453, 454, 455, 456, 457, 461, 462, 464, 465, 467, 468, 470, 473, 476, 477, 478, 479, 480, 481, 482, 483, 484, 487, 488, 490, 492, 493, 494, 496, 497, 498, 499, 500, 501, 502, 503, 510, 511, 512, 513, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 532, 533, 534, 535, 536, 537, 540, 541, 542, 543, 544, 545, 548, 549, 550, 551, 552, 554, 556, 557, 558, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 577, 578, 579, 582, 585, 586, 587, 588, 589, 590, 591, 593, 595, 596, 597, 609, 610, 612, 613, 614, 616, 620, 621, 622, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 658, 659, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 687, 688, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 712, 713, 714, 717, 720, 721, 722, 723, 724, 725, 726, 731, 732, 733, 735, 736, 737, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 769, 772, 773, 774, 788, 791, 794, 797, 801, 806, 808, 812, 814, 818, 820, 821, 823, 825, 826, 827, 828, 829, 830, 832, 833, 835, 836, 837, 838, 840, 841, 843, 845, 847, 848, 849, 850, 859, 860, 861], "reshap": [3, 27, 28, 43, 44, 53, 57, 58, 60, 70, 76, 80, 81, 83, 356, 368, 371, 372, 374, 390, 391, 392, 395, 408, 409, 410, 413, 422, 439, 464, 470, 610, 630, 632, 633, 635, 648, 650, 654, 674, 690, 808, 836, 837, 840, 843, 845, 847, 850, 863], "bidirect": [4, 632, 657], "encod": [4, 12, 14, 27, 28, 41, 43, 54, 59, 77, 82, 545, 630, 634, 692, 808, 848, 856, 860], "mlm": 4, "support": [4, 6, 9, 10, 18, 19, 22, 23, 24, 25, 27, 30, 42, 51, 53, 54, 58, 74, 76, 77, 81, 143, 162, 166, 188, 195, 210, 219, 236, 243, 264, 265, 269, 279, 298, 324, 345, 363, 365, 368, 372, 374, 407, 425, 434, 488, 534, 546, 555, 558, 559, 576, 591, 625, 626, 627, 628, 630, 632, 633, 656, 668, 669, 670, 674, 683, 690, 767, 773, 780, 792, 797, 798, 801, 806, 808, 810, 812, 814, 815, 816, 819, 820, 822, 826, 827, 828, 830, 832, 833, 835, 836, 838, 840, 841, 843, 844, 845, 847, 848, 850, 852, 853, 855, 856, 857, 860, 863, 865, 866, 869, 871, 872, 873], "googl": [4, 22, 23, 24, 25, 41, 42, 43, 45, 824, 856], "type": [4, 7, 12, 14, 18, 24, 27, 28, 33, 41, 42, 43, 46, 47, 48, 49, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 98, 99, 102, 103, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 363, 365, 368, 369, 371, 372, 373, 374, 377, 378, 379, 381, 383, 384, 385, 386, 387, 388, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 403, 404, 405, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 658, 659, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 767, 769, 772, 773, 774, 775, 779, 780, 784, 787, 788, 789, 790, 794, 797, 801, 802, 803, 806, 808, 814, 815, 816, 818, 819, 820, 823, 826, 827, 828, 829, 832, 834, 836, 838, 840, 841, 843, 845, 847, 848, 859, 860, 861, 866, 867, 870], "choos": [4, 41, 43, 51, 63, 64, 74, 210, 236, 243, 264, 265, 269, 331, 332, 368, 374, 627, 628, 640, 641, 643, 744, 745, 746, 747, 748, 756, 757, 758, 760, 772, 808, 814, 815, 816, 834, 840, 846, 850, 859], "librari": [4, 7, 9, 16, 17, 23, 25, 39, 41, 51, 64, 74, 210, 241, 243, 259, 264, 265, 287, 331, 332, 368, 627, 628, 633, 641, 643, 669, 670, 745, 746, 747, 748, 756, 757, 758, 760, 806, 808, 814, 815, 819, 825, 850, 851, 855, 856, 857, 859, 862, 863, 864, 866, 870, 873], "pretrain": [4, 7, 12, 13, 14, 27, 28, 46, 808, 860], "save": [4, 8, 41, 53, 70, 76, 383, 525, 585, 608, 627, 630, 644, 790, 806, 815, 824, 831, 840, 851, 857, 865], "some": [4, 5, 6, 9, 10, 12, 14, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 32, 33, 39, 43, 44, 70, 78, 241, 243, 259, 371, 395, 396, 397, 611, 612, 615, 617, 618, 619, 627, 628, 631, 637, 725, 788, 808, 812, 814, 815, 816, 819, 820, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 840, 841, 842, 843, 847, 848, 849, 851, 852, 853, 856, 857, 859, 860, 862, 863, 865, 866, 867, 872, 873], "mohame54": 4, "automodel": [4, 9, 27], "autotoken": 4, "load": [4, 6, 7, 9, 24, 27, 41, 42, 43, 44, 45, 46, 70, 372, 443, 644, 790, 808, 840, 851, 865, 872], "token": [4, 43, 817], "bert_bas": 4, "from_pretrain": [4, 9, 27, 44, 859, 860], "base": [4, 10, 41, 44, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 93, 94, 95, 96, 97, 98, 99, 101, 103, 134, 143, 175, 239, 240, 257, 258, 259, 260, 274, 315, 324, 326, 333, 336, 342, 349, 365, 368, 371, 372, 373, 381, 414, 418, 443, 448, 510, 578, 589, 601, 625, 626, 628, 630, 633, 635, 641, 643, 674, 698, 745, 746, 747, 748, 755, 770, 773, 774, 777, 778, 779, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 796, 797, 802, 803, 806, 808, 815, 816, 817, 819, 823, 824, 825, 829, 832, 834, 835, 836, 838, 839, 840, 841, 842, 843, 845, 866, 871, 873, 874], "uncas": 4, "eval": [4, 5, 8, 14, 22, 23, 24, 25, 632, 657, 790], "evalu": [4, 52, 53, 70, 75, 76, 239, 241, 257, 258, 259, 260, 264, 271, 273, 280, 284, 318, 350, 361, 362, 365, 370, 372, 373, 374, 439, 448, 453, 477, 621, 628, 631, 637, 644, 724, 725, 763, 764, 789, 790, 816, 823, 825, 833, 834, 866], "bert_token": 4, "sampl": [4, 7, 9, 12, 14, 24, 27, 28, 42, 49, 52, 53, 62, 66, 72, 75, 76, 85, 89, 133, 134, 288, 315, 365, 371, 373, 374, 378, 395, 396, 397, 407, 417, 419, 448, 453, 483, 504, 505, 506, 507, 508, 625, 628, 639, 643, 734, 735, 736, 737, 760, 762, 788, 838, 840], "test": [4, 19, 20, 22, 23, 29, 30, 32, 33, 34, 42, 43, 52, 54, 67, 75, 77, 90, 121, 167, 171, 250, 251, 252, 253, 276, 371, 395, 396, 397, 565, 624, 626, 628, 630, 644, 763, 764, 767, 770, 773, 802, 808, 810, 812, 813, 818, 822, 825, 827, 829, 831, 834, 837, 839, 841, 851, 852, 857, 859, 860, 861, 866], "did": [4, 41, 814, 822, 850, 856, 872], "realli": [4, 39, 815, 823, 830, 851, 859, 871, 872], "like": [4, 7, 9, 19, 20, 21, 27, 29, 30, 31, 32, 33, 34, 44, 46, 49, 52, 53, 60, 72, 75, 76, 80, 83, 88, 134, 152, 175, 220, 240, 246, 249, 262, 280, 337, 342, 354, 368, 371, 372, 373, 374, 381, 383, 414, 416, 425, 450, 459, 460, 469, 470, 510, 511, 528, 625, 626, 628, 633, 635, 639, 642, 668, 702, 737, 750, 802, 808, 812, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 830, 831, 832, 833, 834, 835, 836, 837, 838, 840, 841, 843, 844, 845, 847, 848, 849, 850, 851, 856, 859, 860, 866, 871], "input": [4, 5, 6, 9, 12, 14, 24, 25, 27, 32, 33, 41, 42, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 94, 98, 99, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 164, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 190, 192, 193, 206, 209, 210, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 318, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 363, 365, 368, 369, 370, 371, 372, 373, 374, 377, 378, 379, 381, 383, 384, 385, 386, 387, 388, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 403, 404, 405, 407, 408, 409, 410, 411, 413, 415, 416, 417, 418, 419, 420, 422, 423, 424, 425, 426, 427, 428, 430, 431, 432, 437, 439, 440, 441, 442, 443, 444, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 459, 460, 463, 464, 465, 466, 468, 470, 471, 472, 473, 474, 475, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 511, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 533, 534, 536, 537, 540, 541, 542, 543, 544, 545, 548, 549, 551, 552, 554, 556, 557, 558, 560, 561, 562, 563, 564, 565, 567, 572, 573, 574, 580, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 603, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 717, 720, 721, 722, 723, 725, 726, 727, 731, 732, 733, 734, 735, 736, 737, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 767, 769, 773, 780, 784, 787, 788, 789, 790, 791, 801, 802, 806, 819, 820, 821, 823, 825, 826, 827, 828, 833, 834, 835, 836, 837, 838, 840, 841, 842, 843, 845, 847, 848, 849, 850, 851, 859, 860, 867, 870], "pad": [4, 8, 41, 43, 53, 57, 60, 76, 80, 83, 94, 96, 371, 374, 390, 391, 392, 393, 394, 399, 400, 403, 404, 405, 407, 408, 409, 410, 411, 413, 414, 415, 416, 418, 419, 545, 630, 632, 635, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 697, 710, 774, 788, 808], "longest": 4, "return_tensor": [4, 9, 27, 44, 859, 860], "pt": [4, 9, 27, 859], "max_length": [4, 70], "512": [4, 5, 8, 41, 43, 81, 632, 647, 688, 808], "input_id": 4, "101": [4, 10, 42, 632, 633, 637, 656, 672, 720], "1045": 4, "2106": 4, "1005": 4, "1056": 4, "2428": 4, "2066": 4, "2115": 4, "4309": 4, "1012": 4, "102": [4, 10, 53, 76, 85, 393, 735], "token_type_id": 4, "attention_mask": [4, 57, 80, 632, 659], "pooler": 4, "compar": [4, 6, 7, 9, 27, 40, 44, 46, 53, 54, 64, 65, 66, 70, 76, 77, 88, 89, 330, 347, 368, 383, 526, 530, 533, 630, 632, 641, 642, 643, 657, 745, 746, 747, 748, 749, 752, 758, 769, 808, 821, 827, 829, 838, 840, 843, 848, 862, 864, 866, 872, 873], "no_grad": [4, 41, 859], "bert_output": 4, "pooler_output": 4, "ivy_bert": 4, "bert_base_uncas": 4, "ivy_input": 4, "k": [4, 7, 40, 43, 49, 53, 54, 57, 58, 62, 72, 75, 76, 80, 81, 85, 93, 94, 118, 128, 141, 142, 143, 263, 309, 324, 325, 365, 372, 374, 378, 381, 383, 423, 438, 442, 444, 446, 486, 490, 504, 505, 506, 507, 508, 511, 521, 533, 624, 625, 630, 632, 633, 637, 639, 640, 659, 662, 666, 673, 674, 680, 682, 683, 684, 687, 722, 735, 736, 737, 743, 808, 818, 819, 837, 838, 845, 859, 862, 866], "ivy_output": [4, 44], "logits_clos": 4, "allclos": [4, 6, 7, 9, 12, 14, 27, 44, 46, 53, 76, 368], "detach": [4, 6, 7, 9, 12, 14, 27, 835], "rtol": [4, 12, 14, 53, 58, 76, 81, 330, 347, 368, 633, 676, 679, 767, 769, 812, 830, 838], "005": [4, 8, 53, 76, 330, 347, 368, 449], "atol": [4, 6, 7, 9, 27, 53, 58, 76, 81, 330, 347, 368, 633, 676, 767, 769, 812, 830, 838], "equal": [4, 49, 50, 52, 53, 54, 58, 59, 60, 62, 64, 65, 66, 70, 73, 75, 76, 77, 81, 82, 83, 85, 88, 94, 98, 99, 128, 130, 131, 132, 138, 139, 148, 228, 230, 234, 239, 241, 250, 251, 272, 274, 279, 282, 283, 287, 326, 327, 328, 330, 347, 365, 368, 371, 372, 374, 377, 383, 394, 415, 442, 466, 475, 488, 492, 495, 500, 501, 503, 521, 530, 533, 610, 625, 626, 628, 630, 633, 634, 635, 639, 640, 641, 642, 643, 667, 675, 676, 679, 681, 687, 692, 695, 697, 702, 704, 710, 737, 743, 745, 746, 747, 748, 749, 752, 757, 759, 760, 761, 762, 780, 787, 788, 822, 823, 825, 827, 829, 838, 840, 863], "els": [4, 5, 7, 10, 42, 43, 45, 46, 53, 54, 62, 75, 76, 85, 154, 155, 156, 157, 158, 170, 276, 280, 371, 372, 378, 417, 430, 441, 445, 447, 505, 540, 544, 626, 628, 630, 632, 637, 639, 658, 724, 727, 735, 736, 737, 767, 801, 802, 808, 814, 815, 816, 819, 821, 825, 826, 829, 833, 836, 837, 838, 840, 841, 843, 845, 847, 849, 850, 851, 867], "768": 4, "fn": [4, 44, 46, 53, 70, 73, 76, 102, 162, 163, 195, 196, 199, 374, 457, 531, 546, 547, 597, 626, 627, 630, 637, 720, 721, 722, 724, 725, 726, 767, 769, 794, 797, 803, 804, 806, 826, 829, 836, 837, 845, 859], "finish": [4, 16, 27, 28, 39, 42, 808, 809, 814, 815, 818], "2f": [4, 7], "sec": 4, "89": [4, 10, 39, 52, 62, 73, 75, 76, 85, 99, 164, 231, 626, 633, 643, 685, 736, 737, 761], "43": [4, 10, 39, 41, 43, 53, 76, 85, 99, 230, 371, 372, 383, 392, 424, 519, 628, 639, 640, 736, 737, 744], "procedur": [4, 822, 824, 827, 838], "60": [4, 39, 43, 52, 66, 75, 77, 85, 89, 220, 254, 374, 485, 549, 557, 573, 588, 610, 628, 630, 633, 637, 643, 678, 717, 735, 753, 755, 759, 802, 824], "big": [4, 787, 809, 851, 866], "jnp": [4, 19, 24, 27, 28, 29, 30, 33, 39, 41, 45, 808, 825, 826, 829, 832, 836, 841, 845, 850, 860, 861], "config": [4, 5, 7, 9, 10, 21, 24, 27, 28, 41, 42, 44, 70, 637, 727, 808, 815, 819, 822, 824, 831, 838, 848, 859, 867], "jax_enable_x64": [4, 5, 7, 9, 10, 21, 24, 27, 28, 808], "ref": [4, 5, 7, 9, 77, 81, 255, 269, 272, 278, 285, 628, 635, 706, 815, 836], "initi": [4, 27, 28, 44, 53, 57, 66, 70, 76, 80, 89, 99, 372, 383, 430, 441, 447, 526, 527, 632, 643, 657, 658, 758, 785, 788, 789, 790, 792, 793, 806, 808, 811, 816, 817, 821, 825, 826, 830, 838, 840, 845, 856, 859, 860, 861, 866, 872, 873], "fast": [4, 22, 32, 53, 371, 394, 866], "valu": [4, 10, 39, 40, 42, 43, 49, 50, 52, 53, 54, 55, 57, 58, 60, 61, 62, 63, 64, 65, 66, 69, 70, 72, 73, 75, 76, 77, 78, 80, 81, 83, 84, 85, 86, 87, 88, 89, 96, 98, 99, 101, 114, 118, 119, 121, 122, 128, 131, 132, 133, 134, 137, 143, 148, 165, 169, 175, 208, 209, 216, 217, 218, 219, 221, 223, 224, 225, 232, 236, 237, 239, 241, 242, 243, 247, 248, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 266, 267, 268, 269, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 295, 298, 303, 306, 307, 309, 316, 318, 324, 326, 327, 328, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 344, 345, 347, 348, 350, 353, 355, 356, 357, 358, 359, 361, 362, 363, 365, 368, 369, 370, 371, 372, 373, 374, 377, 378, 382, 383, 394, 407, 414, 415, 417, 419, 423, 426, 430, 436, 441, 443, 445, 447, 448, 449, 451, 452, 453, 454, 463, 469, 474, 480, 485, 487, 488, 489, 490, 492, 494, 497, 499, 504, 505, 507, 508, 514, 516, 519, 520, 521, 524, 525, 526, 527, 528, 534, 536, 537, 538, 540, 545, 548, 549, 551, 556, 557, 558, 565, 572, 573, 577, 578, 579, 582, 591, 596, 601, 602, 605, 608, 609, 610, 611, 612, 613, 617, 622, 624, 625, 626, 627, 628, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 658, 659, 662, 666, 669, 670, 674, 675, 676, 679, 680, 681, 682, 683, 684, 687, 690, 695, 696, 697, 701, 702, 710, 711, 712, 716, 718, 719, 720, 721, 722, 727, 731, 732, 733, 734, 735, 736, 737, 738, 740, 741, 743, 744, 745, 746, 747, 748, 749, 751, 752, 753, 754, 756, 757, 758, 759, 760, 761, 762, 767, 769, 772, 773, 774, 775, 777, 779, 784, 787, 788, 789, 790, 791, 792, 806, 812, 815, 816, 819, 822, 823, 825, 826, 827, 828, 829, 830, 832, 833, 836, 837, 840, 842, 843, 845, 847, 851, 859, 866, 867], "demo": [5, 7, 8, 9, 10, 28, 35, 39, 43, 808], "milesi": 5, "blob": [5, 41, 43], "2f62e6b1c8e98022a6418d31a76f6abd800e5ae7": 5, "util": [5, 6, 9, 19, 22, 23, 24, 25, 41, 44, 53, 76, 194, 372, 443, 627, 794, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 815, 822, 826, 829, 830, 833, 836, 840, 841, 845, 860, 864, 872, 873], "data_load": 5, "py": [5, 6, 8, 9, 19, 22, 23, 24, 25, 41, 43, 46, 89, 372, 443, 755, 797, 801, 808, 814, 815, 816, 819, 821, 824, 825, 826, 828, 829, 830, 831, 832, 833, 837, 838, 840, 841, 845, 847, 849, 850], "l65": 5, "mask_valu": 5, "pil_img": 5, "scale": [5, 7, 41, 53, 57, 61, 76, 78, 80, 84, 108, 207, 208, 300, 301, 304, 315, 345, 363, 365, 368, 371, 372, 377, 389, 395, 396, 397, 405, 407, 412, 416, 432, 497, 498, 499, 618, 622, 627, 631, 632, 638, 655, 659, 662, 733, 772, 774, 775, 787, 788, 792, 802, 866, 868], "is_mask": 5, "w": [5, 6, 9, 42, 43, 53, 54, 55, 57, 70, 75, 76, 77, 78, 80, 93, 263, 345, 360, 368, 370, 371, 372, 377, 390, 391, 392, 394, 408, 409, 410, 411, 427, 447, 502, 517, 541, 543, 588, 611, 612, 613, 615, 617, 618, 619, 630, 631, 632, 637, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 656, 720, 808, 818, 835, 845, 848, 849, 860, 874], "h": [5, 53, 54, 57, 76, 77, 80, 371, 377, 391, 392, 409, 410, 502, 541, 543, 630, 632, 637, 645, 648, 649, 650, 651, 652, 653, 654, 717, 721, 723, 726, 731, 809, 818, 822, 823, 824, 860, 862], "size": [5, 10, 12, 14, 19, 22, 23, 29, 30, 32, 33, 34, 41, 43, 46, 53, 54, 57, 58, 60, 62, 63, 70, 76, 77, 80, 81, 83, 85, 86, 93, 94, 98, 99, 130, 133, 207, 208, 209, 308, 311, 315, 326, 327, 328, 329, 336, 352, 359, 365, 368, 369, 371, 372, 373, 374, 377, 378, 381, 383, 385, 386, 387, 388, 389, 390, 391, 407, 408, 409, 411, 412, 418, 419, 426, 429, 441, 447, 448, 450, 464, 466, 478, 488, 490, 492, 498, 499, 502, 506, 511, 523, 524, 525, 526, 527, 528, 567, 572, 625, 627, 630, 632, 633, 635, 639, 640, 644, 657, 659, 662, 664, 667, 671, 674, 678, 680, 683, 689, 698, 703, 704, 705, 734, 740, 743, 763, 764, 772, 774, 775, 788, 802, 808, 836, 838, 840, 843, 848, 859, 861], "neww": 5, "newh": 5, "int": [5, 41, 44, 47, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 93, 96, 98, 102, 109, 113, 114, 123, 124, 128, 130, 131, 132, 133, 134, 137, 141, 142, 143, 150, 157, 160, 161, 164, 171, 186, 200, 201, 202, 209, 210, 219, 226, 227, 228, 229, 230, 231, 243, 246, 270, 274, 279, 285, 288, 296, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 331, 332, 336, 337, 341, 345, 352, 354, 356, 359, 363, 365, 368, 369, 371, 372, 373, 374, 377, 378, 379, 381, 383, 385, 386, 387, 388, 390, 391, 392, 393, 394, 398, 399, 400, 403, 404, 405, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 422, 426, 428, 429, 430, 431, 433, 438, 440, 441, 444, 445, 447, 452, 456, 457, 461, 465, 466, 469, 470, 473, 475, 478, 479, 480, 481, 482, 483, 484, 485, 486, 488, 489, 490, 492, 493, 494, 495, 498, 500, 501, 503, 504, 505, 506, 507, 508, 509, 511, 516, 518, 519, 520, 521, 523, 524, 525, 526, 527, 528, 531, 541, 542, 543, 545, 548, 549, 552, 553, 567, 570, 572, 587, 588, 589, 590, 594, 610, 611, 612, 613, 614, 617, 622, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 659, 664, 666, 667, 674, 675, 680, 685, 687, 688, 689, 690, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 717, 720, 721, 723, 725, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 743, 745, 747, 749, 751, 752, 753, 754, 756, 757, 758, 759, 760, 761, 762, 763, 764, 772, 773, 774, 775, 784, 787, 788, 801, 802, 806, 823, 825, 826, 827, 829, 832, 833, 836, 838, 840, 841, 843, 845, 850, 859], "assert": [5, 10, 42, 44, 46, 70, 534, 630, 780, 812, 818, 819, 830, 833, 836, 837, 838, 840, 841, 847, 848], "too": [5, 53, 76, 219, 236, 243, 269, 374, 488, 628, 787, 814, 815, 816, 819, 825, 829, 841, 851], "small": [5, 10, 43, 52, 53, 58, 61, 75, 76, 81, 84, 236, 243, 269, 270, 330, 347, 368, 372, 373, 377, 436, 453, 497, 498, 499, 628, 633, 638, 676, 679, 681, 733, 787, 791, 808, 815, 824, 827, 833, 838, 843, 845, 849, 851, 859, 860, 867], "would": [5, 6, 9, 10, 19, 21, 22, 23, 24, 25, 27, 28, 31, 33, 35, 43, 49, 51, 53, 72, 74, 76, 83, 109, 113, 124, 210, 371, 374, 399, 404, 458, 459, 466, 468, 470, 471, 472, 479, 483, 495, 622, 627, 698, 699, 700, 702, 704, 705, 707, 709, 774, 784, 788, 808, 809, 812, 814, 815, 816, 817, 818, 819, 820, 821, 823, 824, 825, 827, 828, 830, 832, 834, 836, 837, 838, 840, 841, 843, 844, 845, 847, 849, 850, 851, 852, 856, 859, 866, 872], "pixel": [5, 41, 53, 76, 371, 407], "resampl": 5, "nearest": [5, 53, 76, 219, 236, 269, 279, 341, 368, 371, 383, 407, 528, 628, 843], "bicub": [5, 53, 76, 371, 407, 843], "zero": [5, 41, 49, 50, 52, 53, 54, 55, 57, 58, 60, 63, 64, 66, 67, 72, 73, 75, 76, 78, 80, 81, 85, 86, 89, 90, 94, 108, 110, 111, 112, 114, 125, 126, 128, 130, 135, 137, 138, 139, 141, 142, 145, 148, 149, 217, 218, 219, 221, 222, 223, 224, 225, 228, 230, 231, 233, 234, 235, 236, 238, 241, 242, 243, 250, 251, 252, 253, 259, 264, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 281, 282, 283, 284, 286, 287, 289, 290, 292, 294, 295, 299, 301, 307, 309, 318, 325, 331, 332, 335, 336, 337, 341, 349, 352, 354, 355, 356, 357, 363, 365, 368, 371, 372, 374, 381, 383, 393, 394, 395, 396, 397, 399, 400, 403, 404, 405, 414, 415, 416, 417, 418, 419, 424, 426, 434, 439, 442, 464, 474, 479, 480, 491, 492, 510, 519, 520, 537, 541, 548, 568, 573, 611, 612, 617, 618, 619, 620, 622, 625, 626, 628, 630, 631, 632, 633, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 652, 654, 655, 656, 659, 662, 663, 665, 669, 670, 672, 673, 674, 675, 676, 677, 679, 681, 687, 689, 690, 697, 698, 699, 700, 702, 703, 710, 733, 735, 736, 737, 740, 741, 742, 743, 745, 746, 747, 748, 752, 753, 754, 756, 757, 758, 759, 760, 761, 762, 763, 764, 772, 787, 788, 792, 806, 820, 823, 825, 826, 827, 832, 834, 835, 838, 845, 848, 849, 857, 865], "int64": [5, 53, 62, 63, 65, 66, 73, 85, 86, 88, 89, 138, 151, 157, 160, 162, 164, 168, 169, 173, 180, 312, 365, 381, 383, 511, 519, 520, 625, 626, 640, 642, 643, 735, 740, 741, 742, 751, 753, 754, 759, 761, 772, 773, 825, 837, 840, 845], "enumer": [5, 41, 43, 777, 808], "ndim": [5, 53, 58, 63, 76, 81, 86, 98, 102, 372, 374, 440, 441, 447, 458, 459, 460, 473, 481, 483, 493, 610, 630, 633, 640, 680, 683, 743, 823, 833, 840], "newaxi": [5, 623], "transpos": [5, 24, 27, 28, 45, 53, 57, 58, 70, 76, 80, 81, 98, 372, 420, 438, 440, 442, 517, 632, 633, 645, 647, 649, 651, 652, 653, 657, 673, 677, 679, 685, 774, 788, 808, 830, 836, 847, 850, 860], "255": [5, 24, 27, 28, 41, 42, 43, 45, 57, 76, 80, 230, 628, 654, 808, 860], "car": 5, "full_img": 5, "from_numpi": [5, 848], "fals": [5, 7, 8, 9, 14, 18, 19, 27, 30, 41, 42, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 59, 60, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 96, 97, 98, 99, 101, 102, 103, 106, 107, 108, 109, 110, 111, 112, 113, 114, 119, 124, 125, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 141, 142, 143, 145, 148, 149, 150, 151, 152, 154, 155, 156, 157, 158, 159, 161, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 192, 193, 198, 200, 203, 204, 206, 209, 210, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 319, 320, 321, 322, 323, 324, 325, 329, 330, 331, 332, 333, 334, 336, 338, 346, 347, 352, 353, 354, 355, 356, 357, 358, 359, 365, 368, 369, 371, 372, 373, 374, 377, 383, 385, 386, 387, 388, 390, 391, 392, 394, 395, 396, 397, 398, 399, 407, 408, 409, 410, 413, 414, 415, 417, 418, 419, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 434, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 458, 459, 460, 464, 465, 466, 467, 468, 469, 470, 471, 472, 475, 476, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 492, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 505, 510, 511, 517, 518, 519, 520, 521, 523, 524, 525, 526, 527, 528, 530, 533, 534, 536, 537, 540, 541, 542, 543, 544, 545, 548, 549, 551, 552, 554, 556, 557, 558, 560, 561, 562, 564, 565, 568, 572, 573, 574, 577, 580, 581, 583, 584, 586, 587, 588, 589, 591, 593, 595, 596, 598, 603, 604, 606, 607, 609, 612, 613, 615, 619, 620, 622, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 720, 724, 725, 726, 727, 734, 735, 736, 737, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 767, 769, 770, 772, 773, 774, 775, 780, 784, 785, 788, 789, 790, 792, 794, 797, 801, 802, 803, 806, 808, 812, 815, 819, 821, 824, 825, 826, 827, 829, 830, 836, 837, 838, 840, 842, 843, 845, 848, 849, 850, 859, 860], "permut": [5, 8, 41, 60, 83, 98, 381, 510, 635, 700, 707, 860], "img_numpi": 5, "cpu": [5, 6, 7, 9, 22, 23, 24, 25, 27, 41, 42, 43, 45, 46, 49, 51, 53, 62, 72, 74, 76, 85, 122, 128, 131, 133, 134, 137, 138, 139, 145, 189, 190, 192, 193, 194, 195, 200, 203, 205, 207, 210, 211, 213, 215, 372, 378, 434, 504, 505, 507, 508, 625, 627, 639, 734, 735, 736, 737, 769, 787, 788, 789, 790, 791, 792, 793, 806, 808, 812, 815, 816, 822, 825, 826, 830, 837, 840, 851, 864, 866, 869, 871], "torch_unet": 5, "unet_carvana": 5, "when": [5, 6, 8, 9, 10, 18, 19, 20, 22, 23, 24, 25, 27, 28, 30, 32, 33, 34, 42, 44, 48, 49, 50, 52, 53, 58, 59, 62, 63, 66, 70, 72, 73, 75, 76, 81, 82, 85, 86, 89, 99, 137, 148, 219, 236, 241, 243, 259, 269, 287, 288, 296, 331, 332, 363, 368, 371, 372, 373, 377, 378, 383, 394, 407, 419, 426, 430, 441, 447, 448, 453, 497, 499, 505, 525, 528, 558, 574, 582, 589, 625, 626, 628, 630, 632, 633, 634, 635, 637, 639, 640, 643, 645, 657, 659, 676, 681, 692, 693, 694, 702, 725, 726, 735, 736, 737, 740, 741, 743, 744, 756, 758, 760, 762, 772, 775, 787, 788, 789, 790, 791, 797, 806, 809, 813, 814, 815, 816, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 836, 837, 838, 840, 841, 842, 843, 845, 847, 848, 850, 851, 852, 855, 856, 859, 860, 864, 866, 869, 870, 871, 872], "ivy_unet": 5, "n_channel": 5, "n_class": 5, "forward": [5, 8, 14, 27, 28, 41, 43, 53, 76, 361, 370, 371, 394, 399, 400, 404, 405, 415, 416, 785, 787, 788, 790, 792, 806, 808, 815, 821, 828, 835, 840, 841, 843, 850, 851, 859, 866, 867], "effici": [5, 7, 8, 9, 16, 17, 19, 20, 27, 28, 29, 30, 53, 58, 76, 81, 372, 373, 436, 452, 581, 604, 630, 633, 676, 808, 815, 816, 823, 833, 834, 836, 840, 842, 845, 848, 851, 860, 866, 868, 869], "l62": 5, "mask_to_imag": 5, "ndarrai": [5, 49, 53, 54, 72, 76, 94, 123, 124, 136, 371, 372, 374, 383, 416, 441, 485, 524, 525, 595, 625, 630, 797, 801, 814, 820, 825, 826, 829, 832, 836, 837, 838, 841, 843, 845, 847, 850, 853], "isinst": [5, 10, 25, 27, 28, 829, 837, 840, 841, 849, 850], "len": [5, 10, 41, 43, 49, 53, 58, 76, 81, 135, 312, 321, 322, 365, 371, 372, 383, 405, 416, 428, 431, 441, 447, 528, 625, 633, 669, 688, 808, 823, 824, 829, 836, 837, 840, 847, 850, 859], "uint8": [5, 24, 27, 28, 43, 151, 158, 162, 173, 176, 181, 187, 626, 772, 773, 825, 840], "elif": [5, 7, 824, 829, 836, 837, 838], "bool": [5, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 98, 99, 106, 107, 108, 109, 110, 111, 112, 113, 114, 123, 124, 125, 130, 131, 132, 133, 134, 135, 137, 139, 145, 148, 149, 151, 152, 154, 155, 156, 157, 158, 159, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 178, 184, 188, 192, 193, 195, 196, 198, 200, 203, 204, 209, 210, 212, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 247, 248, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 319, 320, 321, 322, 323, 325, 330, 331, 332, 333, 334, 336, 338, 346, 347, 352, 353, 355, 357, 358, 359, 365, 368, 369, 371, 372, 373, 374, 377, 383, 390, 391, 392, 394, 395, 396, 397, 407, 408, 409, 410, 413, 415, 417, 419, 426, 430, 433, 434, 438, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 458, 459, 460, 464, 465, 466, 468, 469, 470, 471, 472, 475, 479, 483, 486, 488, 489, 490, 492, 495, 497, 499, 500, 501, 502, 503, 505, 517, 518, 519, 520, 521, 523, 524, 525, 526, 527, 528, 530, 533, 534, 536, 537, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 551, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 572, 573, 577, 586, 587, 588, 589, 591, 593, 595, 596, 609, 612, 613, 615, 617, 618, 619, 620, 622, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 655, 656, 657, 658, 659, 662, 663, 664, 669, 670, 671, 672, 673, 674, 676, 677, 678, 680, 681, 682, 683, 687, 688, 690, 692, 693, 694, 695, 698, 699, 700, 702, 703, 704, 705, 706, 707, 709, 710, 711, 712, 713, 714, 715, 720, 721, 722, 724, 725, 726, 731, 732, 734, 735, 736, 737, 739, 740, 741, 742, 743, 745, 746, 747, 748, 749, 752, 753, 754, 756, 757, 758, 759, 760, 761, 762, 763, 764, 769, 770, 772, 773, 774, 784, 788, 791, 792, 801, 802, 806, 825, 827, 829, 836, 837, 840, 841, 843, 845, 850, 859, 860], "argmax": [5, 42, 43, 44, 63, 86, 374, 485, 640, 808, 837, 859, 863], "fromarrai": [5, 24, 27, 28, 43], "interpol": [5, 41, 53, 76, 349, 368, 371, 383, 528, 632, 659, 843, 866], "mode": [5, 33, 45, 53, 58, 70, 76, 81, 92, 93, 94, 95, 96, 97, 206, 209, 214, 219, 236, 269, 323, 361, 362, 365, 370, 371, 372, 374, 402, 407, 415, 416, 428, 430, 438, 440, 441, 447, 463, 473, 478, 480, 481, 483, 485, 488, 489, 493, 574, 575, 576, 580, 581, 583, 584, 598, 599, 603, 604, 606, 607, 627, 628, 630, 632, 633, 657, 680, 780, 788, 789, 790, 805, 806, 815, 816, 818, 823, 826, 827, 830, 843, 851, 866, 869], "bilinear": [5, 53, 76, 371, 407, 843], "torch_mask": 5, "squeez": [5, 41, 60, 83, 635, 866], "torch_result": 5, "to_numpi": [5, 10, 27, 28, 39, 42, 43, 46, 54, 77, 630, 808, 830, 838, 848, 863], "give": [5, 19, 29, 39, 53, 57, 76, 80, 175, 361, 370, 371, 414, 418, 626, 632, 635, 645, 646, 647, 648, 650, 652, 654, 702, 787, 808, 815, 816, 818, 821, 824, 825, 827, 828, 830, 831, 832, 840, 857, 866, 870], "img_tf": 5, "math": [5, 44, 94, 286, 628, 825, 836, 837, 838, 850, 864], "ve": [5, 10, 16, 25, 27, 62, 85, 639, 734, 814, 815, 816, 817, 830, 840, 843, 844, 847, 853], "lot": [5, 824, 825, 834, 840, 851, 856, 857, 865], "far": [5, 27, 28, 637, 714, 725, 802, 826, 827, 846, 871, 872], "space": [5, 49, 52, 53, 54, 72, 75, 76, 77, 122, 133, 134, 288, 345, 368, 373, 450, 541, 545, 625, 628, 630, 843, 856], "del": [5, 824], "empty_cach": 5, "permute_dim": [5, 60, 83, 635, 830], "usr": [5, 7, 9, 41, 42, 43, 46, 815], "local": [5, 7, 9, 10, 12, 14, 16, 18, 19, 20, 21, 22, 23, 24, 25, 28, 32, 33, 34, 41, 42, 43, 46, 377, 502, 553, 630, 809, 815, 819, 822, 830, 833, 838, 840], "lib": [5, 10, 22, 23, 24, 25, 41, 42, 43, 46], "python3": [5, 8, 22, 23, 24, 25, 27, 41, 43, 46, 808, 815, 816], "dist": [5, 41, 42, 43, 46], "func_wrapp": [5, 47, 52, 53, 69, 75, 76, 106, 107, 108, 109, 110, 111, 112, 113, 114, 287, 291, 296, 297, 299, 363, 622, 628, 784, 826, 837, 842], "242": [5, 76], "userwarn": [5, 6, 8, 9, 19, 22, 23, 24, 25, 46], "creat": [5, 6, 9, 18, 19, 20, 22, 23, 24, 25, 27, 28, 29, 30, 32, 33, 34, 41, 42, 43, 45, 46, 49, 52, 53, 62, 70, 72, 75, 76, 81, 85, 94, 122, 123, 124, 126, 127, 128, 131, 132, 133, 134, 136, 137, 138, 139, 143, 144, 145, 270, 308, 309, 319, 321, 323, 324, 365, 371, 372, 374, 378, 390, 391, 392, 413, 430, 441, 447, 456, 464, 480, 485, 504, 505, 506, 507, 508, 576, 593, 610, 621, 625, 628, 630, 631, 639, 678, 734, 735, 736, 737, 739, 769, 780, 785, 787, 788, 789, 790, 791, 792, 793, 809, 811, 815, 816, 817, 820, 821, 822, 824, 825, 826, 829, 833, 834, 836, 837, 838, 840, 843, 845, 846, 849, 852, 853, 856, 859, 860, 861, 866, 867, 872], "mani": [5, 27, 28, 31, 60, 70, 83, 143, 324, 365, 625, 635, 704, 808, 814, 815, 816, 820, 821, 823, 824, 825, 826, 827, 828, 832, 833, 834, 836, 837, 838, 840, 843, 845, 847, 848, 851, 855, 856, 857, 862, 866, 869, 872, 873], "view": [5, 6, 9, 19, 22, 23, 24, 25, 53, 60, 76, 98, 129, 140, 374, 458, 459, 460, 466, 468, 470, 471, 472, 475, 479, 486, 492, 495, 551, 625, 630, 635, 698, 699, 700, 702, 704, 705, 707, 709, 815, 816, 829, 866], "lead": [5, 6, 9, 19, 22, 23, 24, 25, 58, 70, 81, 99, 243, 372, 436, 576, 628, 630, 633, 680, 683, 774, 824, 825, 827, 839, 841, 851, 856, 857], "overhead": [5, 6, 9, 19, 20, 22, 23, 24, 25, 27, 28, 30, 851, 859, 869], "perform": [5, 6, 10, 20, 22, 23, 24, 25, 27, 28, 30, 32, 39, 41, 49, 53, 57, 58, 66, 67, 72, 76, 77, 80, 81, 89, 90, 109, 113, 133, 134, 206, 214, 236, 269, 290, 337, 359, 368, 369, 371, 372, 374, 381, 383, 394, 395, 396, 397, 399, 400, 404, 405, 413, 415, 441, 457, 511, 519, 520, 541, 542, 543, 556, 557, 558, 574, 584, 622, 625, 627, 628, 630, 632, 633, 636, 637, 643, 644, 655, 658, 674, 683, 685, 690, 711, 712, 713, 721, 722, 753, 754, 763, 764, 767, 784, 788, 802, 806, 819, 820, 821, 823, 825, 826, 827, 832, 833, 834, 836, 837, 838, 840, 841, 843, 845, 848, 851, 857, 859, 860, 863, 866, 867, 868, 869, 870, 871, 873], "inplac": [5, 6, 8, 9, 10, 19, 22, 23, 24, 25, 48, 54, 70, 77, 93, 96, 532, 534, 555, 558, 559, 576, 577, 630, 637, 721, 722, 726, 731, 732, 779, 780, 785, 792, 818, 820, 827, 830, 832, 834, 837, 843, 847, 849], "17": [5, 9, 10, 22, 23, 24, 25, 39, 41, 43, 46, 47, 53, 58, 69, 75, 76, 77, 78, 80, 81, 85, 99, 108, 109, 134, 219, 236, 261, 269, 300, 308, 359, 365, 371, 374, 390, 391, 399, 400, 403, 404, 408, 409, 414, 418, 470, 542, 557, 611, 613, 622, 625, 628, 630, 631, 632, 633, 637, 639, 646, 655, 656, 667, 671, 722, 735, 736, 737, 739, 823], "factor": [5, 10, 53, 55, 57, 58, 76, 78, 80, 81, 92, 93, 94, 95, 96, 207, 208, 209, 371, 372, 377, 405, 416, 430, 431, 441, 444, 446, 447, 502, 611, 612, 617, 618, 627, 631, 632, 633, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 663, 772, 774, 775, 787, 788, 792, 829, 856], "inc": 5, "unetdoubleconv": 5, "down1": 5, "unetdown": 5, "128": [5, 8, 27, 28, 41, 50, 52, 57, 73, 75, 80, 99, 164, 240, 371, 393, 403, 541, 551, 626, 628, 630, 632, 633, 647, 649, 654, 678, 808], "down2": 5, "down3": 5, "down4": 5, "1024": [5, 8, 41, 42, 808], "up1": 5, "unetup": 5, "up2": 5, "up3": 5, "up4": 5, "outc": 5, "unetoutconv": 5, "x1": [5, 18, 27, 28, 46, 50, 52, 53, 54, 58, 63, 73, 75, 76, 77, 81, 86, 88, 98, 99, 103, 149, 159, 175, 182, 202, 219, 224, 226, 228, 229, 230, 231, 236, 237, 243, 244, 245, 246, 247, 248, 254, 255, 256, 261, 262, 263, 265, 266, 267, 268, 269, 272, 274, 278, 285, 290, 309, 330, 335, 342, 343, 344, 346, 348, 353, 357, 365, 368, 372, 374, 383, 442, 474, 518, 530, 533, 626, 627, 628, 630, 633, 640, 642, 664, 671, 673, 678, 682, 685, 686, 689, 744, 751, 769, 794, 808, 819, 825, 827, 829, 832, 836, 837, 860, 861], "x2": [5, 18, 27, 28, 50, 52, 53, 54, 58, 63, 73, 75, 76, 77, 81, 86, 98, 99, 103, 149, 175, 182, 202, 219, 224, 226, 228, 229, 230, 231, 236, 237, 243, 244, 245, 246, 247, 248, 254, 255, 256, 261, 262, 263, 265, 266, 267, 268, 269, 272, 274, 278, 285, 290, 330, 335, 342, 343, 344, 346, 348, 353, 357, 368, 372, 374, 383, 428, 442, 474, 518, 530, 533, 626, 627, 628, 630, 633, 640, 664, 671, 673, 678, 682, 685, 686, 689, 744, 769, 794, 819, 825, 827, 829, 832, 836, 837], "x3": [5, 50, 54, 149, 530, 626, 630], "x4": 5, "x5": 5, "in_channel": 5, "out_channel": 5, "mid_channel": 5, "double_conv": 5, "with_bia": [5, 788, 808, 849, 860], "batchnorm2d": [5, 8, 791], "downscal": [5, 54, 77, 536, 537, 558, 630], "maxpool": [5, 8], "doubl": 5, "conv": [5, 632, 788, 843], "maxpool_conv": 5, "upscal": 5, "scale_factor": [5, 53, 76, 371, 407, 843], "align_corn": [5, 53, 76, 371, 407, 843], "conv2dtranspos": [5, 788], "valid": [5, 41, 43, 53, 57, 67, 76, 80, 90, 93, 94, 153, 371, 372, 390, 391, 392, 408, 409, 410, 411, 413, 414, 418, 439, 447, 561, 626, 630, 632, 635, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 698, 706, 763, 764, 772, 773, 788, 801, 815, 821, 825, 827, 831, 835, 838, 840, 859, 867], "bhwc": 5, "diff_h": 5, "diff_w": 5, "pad_width": [5, 53, 60, 76, 83, 374, 480, 635, 697, 710], "constant_pad": [5, 60, 83, 635], "concat": [5, 39, 44, 54, 60, 70, 83, 209, 545, 627, 630, 635, 710, 838, 843, 845, 859], "root": [6, 8, 9, 22, 23, 24, 25, 41, 42, 43, 46, 52, 75, 283, 628, 810, 814, 815, 816, 822, 830, 837, 848], "user": [6, 9, 16, 22, 23, 24, 25, 27, 42, 43, 45, 270, 287, 374, 480, 576, 628, 630, 788, 789, 790, 801, 808, 815, 816, 818, 820, 821, 823, 824, 825, 826, 829, 834, 835, 836, 837, 840, 842, 843, 844, 845, 851, 852, 855, 856, 864, 866, 872, 873], "broken": [6, 9, 22, 23, 24, 25, 862, 866], "permiss": [6, 9, 22, 23, 24, 25, 815, 824], "conflict": [6, 9, 22, 23, 24, 25, 33, 815, 816, 824, 837, 848], "behaviour": [6, 9, 22, 23, 24, 25, 108, 111, 270, 622, 628, 813, 816, 818, 819, 820, 823, 825, 826, 828, 829, 832, 833, 834, 836, 837, 840, 841, 847], "system": [6, 9, 22, 23, 24, 25, 43, 372, 442, 633, 682, 772, 808, 815, 816, 817, 821, 824, 825, 851, 860, 864, 866, 869, 871, 873], "manag": [6, 9, 18, 19, 22, 23, 24, 25, 27, 576, 600, 630, 808, 809, 817, 821, 825, 826, 836, 839, 851, 857, 868, 870], "recommend": [6, 9, 22, 23, 24, 25, 264, 265, 278, 373, 450, 628, 643, 757, 760, 810, 815, 821, 822, 831, 834, 835, 859], "virtual": [6, 9, 22, 23, 24, 25, 816, 837, 856, 869, 870], "instead": [6, 9, 12, 14, 18, 22, 23, 24, 25, 27, 34, 41, 46, 52, 53, 58, 75, 76, 81, 94, 190, 278, 312, 365, 371, 383, 408, 409, 410, 518, 521, 627, 628, 633, 676, 772, 814, 815, 816, 819, 822, 824, 825, 827, 828, 829, 832, 833, 834, 836, 837, 838, 840, 843, 845, 847, 848, 851, 859, 860, 861, 864, 866, 872, 873], "pypa": [6, 9, 22, 23, 24, 25], "io": [6, 9, 22, 23, 24, 25, 42, 45, 815, 824], "venv": [6, 9, 22, 23, 24, 25], "torch": [6, 7, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 39, 41, 44, 45, 46, 49, 54, 58, 68, 77, 81, 125, 163, 190, 191, 195, 205, 207, 212, 279, 331, 332, 368, 374, 492, 534, 558, 591, 625, 626, 627, 628, 630, 633, 636, 683, 712, 713, 769, 780, 785, 797, 806, 808, 812, 815, 816, 819, 820, 821, 822, 824, 825, 826, 829, 830, 832, 833, 834, 835, 836, 837, 838, 840, 841, 843, 845, 847, 848, 850, 851, 853, 859, 860, 861, 872], "tensorflow": [6, 9, 11, 12, 16, 18, 19, 22, 23, 24, 25, 27, 28, 29, 32, 33, 34, 39, 45, 52, 53, 54, 75, 76, 143, 190, 205, 220, 324, 365, 372, 426, 591, 625, 627, 630, 767, 780, 797, 808, 812, 813, 814, 815, 816, 819, 824, 825, 826, 830, 832, 836, 837, 838, 840, 841, 843, 845, 850, 851, 853, 856, 857, 860, 861, 863, 864, 867, 869, 870, 872, 873], "2024": 6, "01": [6, 8, 22, 23, 25, 43, 49, 53, 54, 55, 58, 76, 77, 78, 81, 85, 134, 261, 279, 280, 308, 314, 339, 340, 347, 365, 371, 393, 403, 404, 545, 588, 589, 611, 612, 617, 625, 628, 630, 631, 633, 636, 639, 670, 680, 712, 713, 736, 737, 772, 821, 850], "22": [6, 10, 22, 23, 24, 25, 39, 41, 43, 46, 47, 52, 53, 54, 62, 66, 69, 76, 77, 80, 85, 109, 114, 231, 239, 300, 304, 363, 371, 372, 373, 374, 379, 383, 390, 391, 393, 408, 409, 410, 414, 418, 424, 448, 463, 509, 519, 542, 573, 609, 622, 628, 632, 633, 637, 640, 643, 655, 656, 667, 672, 678, 682, 722, 732, 735, 736, 737, 744, 754, 755, 815, 823, 829], "50": [6, 9, 10, 27, 28, 39, 43, 53, 66, 75, 76, 77, 235, 275, 353, 368, 371, 372, 374, 400, 424, 432, 485, 543, 549, 556, 557, 573, 588, 628, 630, 633, 637, 640, 643, 672, 678, 689, 715, 717, 743, 755, 772, 775, 835, 847, 859, 860], "099601": 6, "e": [6, 9, 27, 44, 45, 49, 53, 58, 62, 64, 65, 66, 68, 75, 76, 81, 85, 88, 89, 91, 93, 94, 98, 125, 134, 135, 138, 139, 143, 147, 176, 189, 216, 217, 218, 222, 224, 225, 228, 230, 232, 236, 237, 239, 242, 243, 249, 250, 257, 258, 259, 260, 267, 268, 269, 270, 272, 276, 278, 279, 282, 283, 287, 297, 324, 331, 332, 365, 368, 371, 372, 373, 374, 378, 383, 384, 390, 391, 394, 408, 409, 410, 411, 415, 428, 431, 439, 453, 488, 492, 504, 505, 506, 507, 508, 519, 520, 529, 623, 625, 626, 627, 628, 632, 633, 635, 637, 639, 641, 642, 643, 659, 664, 669, 670, 673, 674, 676, 679, 682, 683, 684, 687, 690, 698, 706, 717, 721, 722, 723, 726, 731, 732, 735, 736, 737, 745, 746, 747, 748, 749, 752, 753, 754, 756, 757, 758, 759, 760, 761, 762, 788, 801, 802, 806, 808, 809, 812, 814, 815, 816, 818, 819, 821, 823, 825, 829, 830, 835, 837, 840, 845, 848, 851, 852, 853, 856, 857, 859, 862, 874], "extern": [6, 823, 832, 837, 840, 841], "local_xla": 6, "xla": [6, 9, 837, 851, 853, 866], "stream_executor": [6, 9], "cuda_dnn": [6, 9], "cc": [6, 9, 22, 23, 25, 42, 830], "9261": 6, "unabl": [6, 9, 816, 843], "regist": [6, 9, 790, 816, 852, 859], "cudnn": [6, 9], "factori": [6, 9, 53, 373, 452, 453, 802], "attempt": [6, 9, 19, 22, 23, 24, 25, 41, 43, 46, 815, 842, 851], "plugin": [6, 9, 815], "been": [6, 9, 12, 14, 22, 24, 27, 28, 53, 54, 62, 76, 77, 85, 192, 279, 374, 487, 541, 542, 543, 627, 628, 630, 639, 734, 801, 802, 814, 816, 819, 821, 823, 824, 825, 826, 828, 829, 832, 833, 836, 840, 845, 847, 851, 852, 859, 866, 873], "099643": 6, "cuda_fft": [6, 9], "607": 6, "cufft": [6, 9], "100960": 6, "cuda_bla": [6, 9], "1515": 6, "cubla": [6, 9], "108768": 6, "core": [6, 22, 23, 25, 41, 42, 43, 45, 46, 53, 76, 93, 96, 200, 372, 430, 441, 446, 447, 627, 815, 826, 830, 840, 850, 855, 864, 865, 866, 867, 871, 873], "cpu_feature_guard": [6, 22, 23, 25], "182": [6, 22, 23, 25, 76], "binari": [6, 10, 22, 23, 25, 53, 54, 57, 59, 76, 80, 82, 226, 229, 231, 266, 286, 371, 373, 417, 452, 455, 628, 632, 634, 655, 659, 692], "optim": [6, 7, 9, 10, 18, 22, 23, 25, 27, 28, 41, 43, 44, 46, 53, 55, 76, 78, 308, 365, 373, 452, 453, 532, 619, 630, 631, 636, 711, 712, 713, 787, 802, 808, 825, 836, 843, 846, 848, 850, 857, 860, 864, 865, 866, 867, 868, 869, 870, 873], "instruct": [6, 22, 23, 25, 70, 99, 808, 814, 815, 819, 829, 831, 838, 840, 852, 864, 867, 870, 872], "critic": [6, 22, 23, 25, 27, 28, 806, 866, 872], "oper": [6, 18, 19, 22, 23, 24, 25, 27, 28, 29, 33, 40, 43, 49, 50, 52, 53, 54, 57, 70, 72, 73, 75, 76, 77, 80, 99, 114, 133, 134, 176, 206, 214, 219, 221, 230, 233, 236, 243, 258, 260, 269, 270, 274, 278, 281, 286, 298, 306, 326, 327, 328, 360, 363, 365, 370, 371, 373, 374, 385, 386, 387, 388, 390, 391, 392, 398, 399, 400, 404, 408, 409, 410, 411, 413, 414, 416, 418, 419, 448, 485, 487, 534, 541, 542, 543, 591, 622, 625, 626, 627, 628, 630, 632, 633, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 656, 659, 674, 685, 687, 759, 761, 772, 775, 788, 802, 806, 808, 814, 815, 818, 819, 820, 823, 825, 826, 827, 828, 829, 833, 836, 837, 840, 843, 845, 848, 849, 853, 855, 859, 862, 863, 864, 865, 866, 867, 869, 870, 871, 872, 873], "avx2": [6, 22, 23, 25], "fma": [6, 22, 23, 25], "rebuild": [6, 22, 23, 25, 70, 99], "appropri": [6, 7, 18, 22, 23, 25, 27, 28, 54, 63, 68, 86, 91, 219, 236, 243, 269, 330, 347, 368, 628, 640, 740, 808, 814, 815, 816, 829, 834, 840], "compil": [6, 7, 8, 9, 10, 22, 23, 25, 27, 28, 31, 44, 46, 287, 628, 780, 808, 815, 837, 841, 845, 851, 853, 860, 862, 865, 866, 867, 870, 873], "flag": [6, 22, 23, 25, 70, 192, 373, 383, 450, 518, 627, 632, 659, 769, 780, 791, 816, 825, 826, 836, 837, 838, 840, 859, 860], "332076": 6, "tf2tensorrt": [6, 9], "py_util": [6, 9], "38": [6, 9, 10, 23, 39, 41, 43, 46, 50, 53, 75, 76, 85, 161, 286, 353, 368, 371, 383, 391, 410, 413, 414, 519, 626, 628, 633, 675, 772, 827], "trt": [6, 9], "could": [6, 9, 27, 28, 33, 64, 641, 745, 746, 747, 748, 814, 815, 816, 819, 824, 825, 827, 834, 836, 837, 838, 840, 845, 847, 848, 849, 856, 857, 866, 871, 872], "find": [6, 9, 16, 42, 43, 46, 58, 64, 70, 81, 633, 637, 641, 676, 716, 745, 746, 747, 748, 801, 802, 808, 809, 810, 811, 813, 814, 815, 816, 819, 822, 824, 830, 835, 840, 843, 845, 848, 852, 853, 855, 859], "tensorrt": [6, 9], "lstm": [6, 632, 658, 788, 845, 866], "layer": [6, 12, 14, 18, 24, 25, 27, 28, 39, 44, 53, 61, 76, 84, 638, 657, 658, 659, 733, 785, 787, 789, 790, 791, 792, 793, 808, 828, 837, 841, 843, 845, 846, 849, 855, 860, 864, 866, 870, 873], "torch_lstm": 6, "rand": [6, 25, 27, 28, 43, 801, 802, 808, 859], "tf_lstm": 6, "workspac": [6, 8, 9, 19, 22, 23, 24, 25, 815, 830], "ivy_repo": [6, 19], "except": [6, 9, 19, 22, 23, 24, 25, 42, 43, 46, 53, 54, 60, 62, 67, 70, 76, 77, 81, 85, 90, 150, 331, 332, 337, 356, 368, 374, 378, 383, 464, 488, 492, 505, 524, 525, 540, 558, 575, 591, 597, 626, 630, 633, 635, 639, 640, 644, 679, 696, 698, 706, 735, 736, 737, 743, 763, 764, 767, 770, 774, 808, 816, 817, 818, 819, 820, 824, 825, 826, 828, 830, 832, 836, 837, 841, 842, 843, 847, 851], "383": [6, 19], "current": [6, 9, 18, 19, 22, 23, 24, 25, 27, 28, 41, 42, 48, 53, 54, 70, 76, 99, 118, 162, 163, 166, 183, 184, 185, 186, 187, 188, 194, 195, 196, 197, 202, 204, 372, 374, 424, 425, 480, 488, 546, 547, 550, 553, 555, 559, 570, 571, 591, 624, 626, 627, 630, 633, 637, 668, 714, 724, 725, 769, 773, 789, 790, 797, 798, 802, 805, 806, 808, 810, 814, 815, 816, 819, 821, 823, 824, 825, 826, 829, 830, 831, 833, 836, 837, 838, 839, 840, 843, 845, 850, 851, 857, 859, 866, 872, 873], "doe": [6, 9, 10, 18, 19, 22, 23, 24, 25, 27, 40, 42, 52, 53, 54, 60, 70, 75, 76, 83, 93, 143, 270, 272, 280, 324, 365, 372, 373, 383, 384, 425, 452, 453, 524, 525, 529, 558, 625, 628, 630, 633, 635, 668, 704, 767, 802, 812, 814, 816, 818, 821, 824, 825, 827, 828, 830, 831, 832, 833, 836, 837, 838, 840, 843, 845, 847, 848, 851, 853, 856, 859, 862, 866, 867, 873], "quietli": [6, 9, 19, 22, 23, 24, 25], "appli": [6, 7, 9, 19, 22, 23, 24, 25, 27, 28, 41, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 93, 94, 98, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 124, 125, 127, 129, 130, 132, 134, 135, 136, 137, 139, 141, 142, 145, 149, 150, 151, 164, 168, 169, 176, 193, 210, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 318, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 363, 368, 369, 371, 372, 373, 374, 377, 383, 385, 386, 387, 388, 390, 391, 392, 393, 395, 396, 397, 399, 403, 404, 405, 407, 408, 409, 410, 414, 415, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 430, 432, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 505, 506, 507, 508, 509, 510, 511, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 533, 534, 536, 537, 540, 541, 542, 543, 544, 545, 548, 549, 552, 554, 556, 557, 558, 560, 561, 562, 564, 565, 567, 572, 573, 587, 588, 589, 590, 591, 593, 595, 596, 609, 611, 612, 615, 617, 618, 619, 620, 622, 626, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 641, 643, 645, 646, 647, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 662, 663, 664, 666, 667, 668, 669, 670, 671, 672, 673, 674, 676, 678, 679, 680, 681, 683, 687, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 720, 723, 726, 727, 733, 734, 735, 736, 737, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 762, 763, 764, 774, 775, 784, 788, 791, 808, 814, 815, 816, 820, 823, 825, 826, 827, 828, 829, 831, 832, 833, 834, 836, 837, 840, 841, 843, 847, 848, 849, 850, 851, 859, 860, 867], "control": [6, 9, 19, 22, 23, 24, 25, 35, 53, 76, 143, 292, 324, 363, 365, 371, 374, 395, 396, 397, 463, 489, 576, 625, 630, 633, 666, 823, 825, 826, 835, 836, 837, 838, 843, 847, 848, 853, 859, 866, 872], "consid": [6, 9, 10, 19, 22, 23, 24, 25, 32, 33, 53, 58, 64, 76, 81, 114, 143, 264, 265, 324, 330, 335, 347, 365, 368, 372, 383, 426, 430, 441, 518, 622, 625, 628, 633, 641, 666, 676, 745, 746, 747, 748, 774, 787, 820, 824, 825, 833, 835, 841, 843, 846, 847, 848, 855, 856, 859, 863, 867, 871, 873], "set_inplace_mod": [6, 9, 19, 22, 23, 24, 25, 600, 630], "strict": [6, 9, 19, 22, 23, 24, 25, 576, 600, 630], "rais": [6, 9, 19, 22, 23, 24, 25, 42, 43, 49, 53, 54, 62, 64, 67, 70, 72, 76, 77, 83, 85, 87, 90, 124, 150, 239, 274, 331, 332, 342, 368, 371, 373, 374, 378, 383, 405, 416, 453, 458, 459, 466, 468, 470, 471, 472, 479, 488, 495, 505, 524, 525, 534, 558, 576, 578, 589, 591, 597, 601, 626, 628, 630, 633, 635, 639, 640, 641, 643, 644, 673, 675, 689, 698, 699, 700, 702, 704, 705, 706, 707, 709, 735, 736, 737, 743, 748, 756, 758, 763, 764, 767, 774, 792, 808, 816, 819, 821, 825, 826, 829, 836, 837, 841, 842, 845, 847, 852, 856], "error": [6, 9, 10, 19, 22, 23, 24, 25, 33, 44, 46, 52, 53, 57, 70, 75, 76, 80, 106, 238, 286, 331, 332, 339, 340, 368, 372, 373, 374, 383, 384, 441, 447, 449, 451, 488, 525, 529, 576, 622, 628, 630, 632, 633, 643, 662, 681, 684, 756, 758, 774, 792, 805, 809, 813, 814, 815, 816, 819, 820, 821, 824, 825, 826, 827, 831, 832, 837, 840, 841, 842, 847, 851, 857, 866], "whenev": [6, 9, 19, 22, 23, 24, 25, 788, 816, 821, 824, 825, 829, 836, 839, 840, 842, 848], "26": [6, 22, 23, 24, 25, 39, 41, 43, 46, 52, 53, 61, 62, 76, 77, 78, 85, 231, 236, 282, 371, 372, 393, 429, 439, 556, 611, 628, 630, 631, 632, 633, 637, 638, 643, 654, 667, 678, 685, 715, 733, 735, 736, 755], "221321": 6, "common_runtim": [6, 42], "gpu_devic": 6, "1929": 6, "job": [6, 27, 28, 808, 822, 824, 860], "localhost": 6, "replica": 6, "14699": 6, "mb": [6, 8, 41, 43, 46, 824], "tesla": 6, "v100": [6, 7], "pcie": [6, 856], "16gb": 6, "pci": 6, "bu": [6, 81, 856], "id": [6, 10, 42, 53, 76, 192, 326, 327, 328, 365, 553, 627, 630, 808, 813, 815, 820, 822, 823, 831, 835, 840, 852, 874], "0001": [6, 52, 53, 76, 279, 280, 372, 441, 447, 772, 775, 792], "00": [6, 8, 10, 41, 43, 46, 53, 54, 58, 76, 77, 81, 241, 308, 339, 340, 365, 371, 393, 399, 403, 404, 545, 589, 628, 630, 633, 670, 680, 772, 831, 840], "comput": [6, 24, 25, 27, 28, 34, 35, 40, 41, 43, 47, 52, 53, 54, 55, 57, 58, 59, 64, 66, 69, 70, 75, 76, 77, 78, 80, 81, 82, 89, 93, 94, 96, 109, 113, 209, 219, 226, 229, 231, 236, 237, 238, 243, 244, 245, 247, 248, 254, 255, 256, 263, 264, 265, 266, 268, 269, 272, 277, 278, 296, 300, 304, 310, 313, 314, 326, 327, 328, 331, 332, 334, 338, 340, 343, 345, 346, 350, 352, 357, 358, 359, 360, 361, 362, 363, 365, 368, 369, 370, 371, 372, 373, 374, 377, 381, 383, 390, 391, 392, 393, 394, 399, 400, 403, 404, 405, 407, 408, 409, 410, 411, 414, 415, 416, 419, 420, 422, 424, 425, 426, 427, 429, 430, 432, 434, 437, 439, 441, 444, 445, 447, 449, 450, 451, 452, 453, 454, 455, 474, 477, 490, 497, 499, 510, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 535, 536, 537, 581, 604, 611, 613, 614, 616, 620, 621, 627, 628, 630, 631, 632, 633, 634, 635, 637, 641, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 656, 663, 664, 668, 669, 670, 673, 674, 676, 678, 680, 682, 683, 685, 687, 689, 690, 692, 693, 694, 698, 720, 745, 746, 747, 748, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 769, 774, 788, 791, 802, 808, 815, 823, 824, 825, 833, 835, 837, 840, 842, 843, 845, 848, 851, 853, 856, 857, 859, 860, 862, 864, 866, 867, 869, 870, 872], "capabl": [6, 16, 24, 28, 840, 843], "625856": 6, "454": 6, "8902": 6, "origin": [6, 7, 9, 10, 25, 27, 28, 29, 30, 31, 33, 40, 41, 42, 46, 53, 58, 60, 66, 70, 76, 81, 83, 89, 93, 96, 98, 99, 224, 249, 276, 315, 365, 371, 372, 374, 383, 415, 441, 473, 479, 481, 484, 519, 520, 524, 525, 526, 527, 528, 628, 633, 635, 643, 674, 702, 703, 754, 769, 774, 797, 798, 808, 810, 814, 815, 816, 821, 822, 824, 825, 830, 834, 836, 837, 838, 845, 857, 859, 860, 866, 867], "32": [6, 10, 25, 27, 28, 39, 41, 42, 43, 52, 53, 62, 75, 76, 80, 81, 85, 98, 99, 108, 160, 218, 230, 231, 240, 254, 260, 276, 279, 280, 334, 368, 371, 372, 374, 383, 391, 392, 393, 403, 413, 414, 424, 428, 463, 519, 541, 557, 622, 626, 628, 630, 632, 633, 639, 640, 643, 647, 649, 650, 654, 656, 673, 678, 689, 735, 736, 737, 744, 755, 772, 775, 808, 824, 825, 835, 848, 871], "original_output": 6, "constant": [6, 12, 14, 19, 22, 23, 29, 32, 34, 39, 53, 60, 61, 76, 83, 84, 93, 94, 318, 365, 371, 373, 374, 417, 452, 453, 480, 635, 637, 638, 697, 720, 733, 787, 791, 808, 833, 838, 841, 849, 850, 851, 859, 861], "transpiled_output": 6, "verifi": [6, 10, 24, 321, 322, 365, 814, 825, 826, 837, 840, 841], "toler": [6, 53, 58, 76, 81, 330, 347, 368, 372, 426, 441, 447, 633, 676, 679, 767, 769, 819, 838, 866], "1e": [6, 7, 8, 9, 12, 14, 27, 39, 43, 50, 53, 55, 58, 59, 61, 73, 76, 78, 81, 82, 84, 97, 161, 330, 347, 368, 373, 377, 453, 497, 498, 499, 578, 579, 588, 601, 602, 611, 612, 617, 619, 626, 630, 631, 633, 634, 638, 683, 692, 693, 694, 733, 767, 769, 789, 791, 792, 808, 812, 823, 830, 833, 836, 838, 849, 850], "benchmark": [6, 868], "n_run": 6, "original_torch_tim": 6, "autograph": 6, "experiment": [6, 806, 812, 816, 825, 837, 841, 845, 866], "do_not_convert": 6, "compiled_tf_lstm": 6, "transpiled_tf_tim": 6, "own": [6, 12, 14, 18, 27, 28, 33, 808, 815, 819, 824, 825, 828, 829, 836, 837, 841, 845, 851, 853, 856, 857, 862, 865, 866, 871, 872], "comparison": [6, 8, 53, 76, 237, 272, 333, 368, 373, 452, 453, 628, 633, 684, 767, 829], "original_tf_lstm": 6, "kera": [6, 11, 12, 14, 16, 17, 25, 27, 28, 44, 45, 785, 808, 857, 860, 872], "time_major": [6, 76, 371, 417, 632, 658], "return_sequ": [6, 788], "original_tf_tim": 6, "slower": [6, 20, 837], "than": [6, 10, 27, 28, 30, 33, 52, 53, 54, 57, 58, 60, 62, 63, 64, 66, 70, 75, 76, 77, 80, 81, 83, 85, 86, 87, 89, 98, 99, 122, 130, 161, 209, 217, 218, 221, 222, 224, 225, 228, 230, 232, 236, 242, 243, 257, 258, 259, 260, 267, 269, 274, 278, 280, 282, 283, 287, 288, 289, 298, 308, 330, 333, 347, 354, 365, 368, 371, 372, 373, 374, 383, 393, 394, 399, 400, 403, 404, 405, 415, 416, 420, 422, 441, 447, 448, 471, 472, 519, 520, 521, 560, 561, 564, 581, 604, 625, 626, 627, 628, 630, 632, 633, 635, 639, 640, 641, 643, 657, 662, 664, 673, 674, 675, 676, 679, 690, 695, 699, 705, 737, 743, 746, 747, 748, 753, 754, 759, 760, 761, 762, 788, 802, 812, 814, 816, 819, 823, 824, 825, 827, 829, 830, 836, 837, 838, 840, 841, 842, 843, 845, 848, 849, 850, 851, 852, 856, 863, 864, 865, 866, 872, 873], "30": [6, 10, 22, 23, 24, 25, 39, 41, 52, 53, 54, 76, 77, 85, 89, 99, 269, 300, 345, 353, 368, 371, 374, 393, 403, 414, 463, 485, 509, 541, 543, 548, 549, 556, 557, 573, 582, 588, 628, 630, 633, 637, 643, 672, 678, 723, 735, 736, 754, 755, 759, 774, 787, 802, 811, 824], "698440": 6, "local_tsl": 6, "tsl": 6, "subprocess": 6, "304": 6, "cannot": [6, 41, 42, 43, 46, 53, 286, 458, 459, 460, 628, 816, 819, 821, 825, 837, 845, 850, 872], "spawn": [6, 569, 630], "child": 6, "No": [6, 27, 28, 41, 53, 59, 76, 82, 373, 450, 451, 452, 454, 455, 634, 692, 816, 824, 825, 866], "directori": [6, 41, 42, 43, 46, 585, 608, 627, 630, 806, 810, 814, 815, 816, 822, 824, 830, 837, 840, 852], "725307350738295x": 6, "440824652724787x": 6, "openmim": 7, "mim": 7, "0rc8": 7, "request": [7, 8, 9, 22, 23, 24, 25, 27, 28, 41, 44, 53, 200, 378, 508, 627, 806, 808, 809, 811, 814, 827, 831, 841, 843, 857, 860], "get_model": 7, "list_model": 7, "mmengin": 7, "configdict": 7, "saniti": [7, 9, 10, 27, 837], "checkpoint": [7, 8, 44, 851], "correct": [7, 12, 14, 23, 33, 39, 41, 43, 66, 89, 182, 372, 443, 626, 635, 643, 695, 760, 762, 769, 772, 808, 812, 814, 816, 818, 823, 824, 825, 826, 829, 830, 832, 833, 836, 838, 840, 860], "against": [7, 50, 53, 54, 58, 63, 73, 75, 76, 77, 81, 86, 149, 268, 287, 330, 333, 336, 347, 368, 383, 524, 525, 526, 527, 528, 565, 626, 628, 630, 633, 640, 673, 674, 676, 679, 740, 840, 845, 851, 855, 866], "zoo": 7, "checkpoint_nam": [7, 9, 27], "convnext": 7, "tiny_32xb128": 7, "noema_in1k": 7, "openmmlab": 7, "dure": [7, 9, 20, 22, 27, 30, 32, 33, 51, 55, 66, 70, 74, 78, 89, 210, 371, 395, 396, 397, 576, 597, 611, 612, 617, 627, 630, 631, 632, 633, 636, 643, 655, 673, 711, 712, 713, 760, 762, 780, 791, 792, 806, 815, 823, 825, 826, 829, 833, 834, 836, 837, 838, 839, 840, 843, 851, 859, 866, 867, 872], "get_scal": 7, "cfg": [7, 831], "kei": [7, 20, 21, 27, 28, 43, 45, 48, 53, 57, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 99, 106, 107, 108, 109, 110, 111, 112, 113, 114, 130, 132, 137, 139, 145, 149, 151, 164, 168, 169, 176, 210, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 247, 248, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 295, 299, 300, 301, 302, 303, 305, 306, 307, 309, 330, 331, 332, 334, 336, 338, 346, 347, 353, 355, 357, 358, 359, 381, 395, 396, 397, 415, 448, 449, 450, 451, 452, 453, 454, 455, 464, 465, 486, 488, 490, 492, 497, 499, 500, 501, 503, 505, 511, 518, 519, 520, 521, 530, 531, 533, 534, 536, 537, 538, 541, 542, 543, 544, 545, 548, 549, 552, 554, 556, 557, 558, 560, 561, 564, 572, 573, 587, 588, 589, 591, 593, 595, 596, 609, 615, 620, 630, 632, 636, 637, 646, 647, 648, 649, 655, 656, 659, 662, 663, 664, 669, 670, 671, 672, 673, 674, 676, 678, 680, 681, 687, 692, 693, 694, 695, 699, 702, 703, 704, 705, 706, 709, 710, 711, 712, 717, 723, 727, 734, 735, 736, 737, 739, 742, 745, 746, 747, 748, 749, 753, 754, 757, 759, 760, 762, 763, 764, 772, 773, 779, 785, 788, 792, 808, 811, 822, 823, 824, 833, 836, 837, 838, 840, 848, 860, 866, 869, 873], "input_shap": [7, 14, 25, 27, 28, 808], "block": [7, 27, 28, 31, 32, 33, 34, 372, 432, 808, 816, 823, 825, 829, 833, 840, 844, 846, 850, 851, 853, 860, 871, 873], "url": [7, 9, 24, 27, 28, 41, 44, 808, 860], "cocodataset": [7, 9, 24, 27, 28, 44, 808, 860], "org": [7, 8, 9, 24, 27, 28, 41, 43, 44, 46, 52, 53, 75, 76, 78, 143, 151, 239, 249, 250, 265, 324, 331, 332, 365, 368, 371, 374, 383, 415, 488, 518, 611, 612, 625, 626, 628, 631, 633, 635, 643, 681, 682, 710, 760, 808, 828, 860], "val2017": [7, 9, 27, 44], "000000039769": [7, 9, 27, 44], "stream": [7, 9, 24, 27, 28, 41, 44, 51, 74, 210, 627, 808, 860, 870], "_config": 7, "train_pipelin": 7, "tensor_imag": 7, "And": [7, 9, 10, 12, 14, 19, 22, 27, 28, 29, 42, 73, 361, 362, 370, 808, 819, 822, 831, 833, 840, 859], "final": [7, 9, 12, 14, 16, 24, 27, 28, 33, 39, 40, 49, 53, 54, 76, 77, 93, 121, 133, 134, 318, 365, 371, 416, 545, 624, 625, 630, 632, 657, 658, 659, 802, 814, 816, 817, 819, 820, 822, 824, 825, 827, 828, 833, 835, 836, 837, 839, 843, 844, 848, 859, 860, 862, 872], "transpiled_graph": [7, 9, 27], "what": [7, 9, 16, 21, 27, 28, 31, 32, 35, 40, 41, 371, 405, 416, 774, 802, 808, 814, 816, 818, 823, 824, 827, 828, 831, 832, 834, 835, 836, 837, 838, 840, 844, 845, 847, 848, 849, 850, 851, 856, 857, 862, 867, 868, 871], "improv": [7, 9, 10, 27, 30, 811, 816, 825, 832, 833, 843, 845, 853, 857, 859, 864, 866, 868, 869], "For": [7, 8, 9, 10, 18, 20, 27, 28, 30, 33, 35, 49, 53, 58, 64, 76, 81, 122, 135, 216, 217, 218, 219, 221, 222, 223, 224, 225, 232, 233, 234, 236, 237, 239, 241, 242, 243, 250, 251, 252, 257, 258, 259, 260, 261, 264, 269, 271, 272, 274, 278, 279, 280, 281, 282, 283, 286, 287, 289, 326, 327, 328, 331, 332, 334, 355, 365, 368, 372, 374, 438, 440, 460, 480, 483, 625, 628, 633, 635, 641, 643, 681, 683, 687, 695, 706, 745, 746, 747, 748, 756, 758, 759, 761, 773, 785, 814, 815, 816, 818, 820, 821, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 836, 837, 838, 839, 840, 841, 843, 845, 847, 848, 849, 850, 851, 852, 855, 856, 857, 859, 863, 864, 867, 872, 873], "issu": [7, 9, 373, 450, 787, 809, 810, 811, 812, 813, 815, 817, 819, 821, 822, 824, 825, 826, 827, 829, 830, 837, 840, 841, 843, 845, 849, 851, 857, 859], "107960": [7, 9], "export": [7, 9, 42, 824, 865, 872], "lc_all": [7, 9], "en_u": [7, 9], "utf": [7, 9], "ld_library_path": [7, 9], "lib64": [7, 9], "nvidia": [7, 9, 22, 23, 24, 25, 41, 43, 46, 870, 871], "library_path": [7, 9], "stub": [7, 9, 822], "ldconfig": [7, 9], "_f": [7, 9, 27], "comp_model": [7, 9, 27], "equival": [7, 9, 27, 58, 81, 93, 94, 122, 230, 243, 264, 265, 278, 279, 374, 464, 488, 494, 625, 628, 633, 676, 679, 682, 690, 797, 836, 837, 843, 848, 850, 852, 860], "just": [7, 9, 10, 12, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 39, 41, 43, 53, 58, 66, 81, 93, 96, 143, 324, 365, 372, 440, 625, 633, 643, 676, 755, 780, 788, 808, 812, 815, 816, 817, 819, 821, 824, 825, 826, 827, 828, 830, 833, 834, 836, 837, 838, 840, 845, 847, 848, 851, 856, 857, 860, 866, 867, 872], "np_imag": [7, 24, 27, 28], "jax_imag": 7, "hk": [7, 9, 27, 41, 45, 808, 850, 860], "rng_kei": [7, 9, 27, 808, 860], "random": [7, 9, 12, 14, 19, 20, 21, 22, 23, 25, 27, 28, 29, 30, 32, 33, 34, 41, 43, 44, 53, 57, 70, 76, 80, 319, 320, 321, 322, 323, 365, 372, 373, 430, 441, 447, 453, 504, 505, 506, 507, 508, 632, 655, 734, 735, 736, 737, 738, 739, 772, 774, 787, 801, 802, 808, 814, 826, 838, 840, 841, 850, 860, 861, 866], "prngkei": [7, 9, 20, 21, 27, 28, 41, 808, 850, 860], "42": [7, 9, 10, 20, 21, 25, 27, 28, 39, 41, 42, 47, 62, 69, 78, 85, 114, 230, 371, 393, 403, 611, 615, 622, 628, 631, 633, 638, 639, 643, 674, 678, 733, 734, 735, 736, 737, 738, 755, 808, 845, 850, 860], "jax_mlp_forward": 7, "param": [7, 9, 10, 27, 41, 42, 43, 45, 70, 76, 77, 99, 531, 548, 549, 630, 794, 808, 850, 860], "init": [7, 9, 27, 41, 43, 53, 76, 372, 430, 441, 447, 808, 819, 850, 860], "rng": [7, 9, 27, 41, 808, 850, 860], "both": [7, 8, 9, 10, 12, 14, 22, 24, 27, 28, 32, 33, 40, 42, 49, 52, 53, 54, 57, 58, 72, 75, 76, 77, 80, 81, 122, 123, 124, 126, 127, 128, 129, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 144, 145, 151, 167, 171, 174, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 236, 237, 239, 241, 242, 243, 247, 248, 249, 250, 251, 252, 256, 258, 259, 260, 261, 263, 264, 265, 266, 269, 271, 272, 273, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 309, 325, 331, 332, 334, 335, 337, 342, 347, 365, 368, 371, 372, 374, 378, 383, 390, 391, 392, 393, 395, 396, 397, 403, 408, 409, 410, 415, 417, 426, 474, 480, 488, 491, 492, 504, 518, 521, 548, 552, 554, 556, 565, 587, 596, 620, 621, 625, 626, 628, 630, 631, 632, 633, 635, 638, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 654, 655, 656, 658, 659, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 687, 689, 690, 691, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 733, 740, 741, 743, 744, 745, 746, 747, 748, 749, 752, 756, 757, 758, 759, 760, 761, 762, 763, 764, 767, 788, 808, 812, 814, 816, 821, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 836, 837, 840, 843, 845, 847, 848, 849, 850, 851, 859, 860, 866, 869, 871, 872, 873], "each": [7, 9, 10, 20, 21, 22, 27, 28, 30, 31, 32, 34, 41, 47, 49, 50, 52, 53, 54, 55, 57, 58, 60, 63, 64, 66, 70, 73, 75, 76, 77, 78, 80, 81, 83, 86, 87, 89, 93, 94, 96, 98, 99, 107, 108, 110, 111, 112, 114, 118, 135, 149, 161, 164, 209, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 241, 242, 243, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 291, 293, 294, 299, 301, 302, 303, 305, 306, 307, 312, 323, 326, 327, 328, 334, 342, 346, 350, 355, 358, 363, 365, 368, 371, 372, 374, 377, 378, 381, 383, 390, 391, 392, 395, 396, 397, 400, 408, 409, 410, 411, 414, 416, 417, 418, 425, 426, 431, 440, 441, 445, 447, 458, 459, 460, 464, 465, 466, 471, 472, 474, 475, 477, 479, 480, 483, 485, 494, 495, 502, 504, 511, 516, 517, 518, 519, 520, 521, 530, 533, 541, 548, 549, 565, 590, 610, 612, 613, 615, 617, 618, 619, 622, 624, 625, 626, 627, 628, 630, 631, 632, 633, 635, 637, 639, 640, 641, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 659, 663, 664, 665, 668, 669, 670, 673, 675, 676, 677, 679, 681, 682, 683, 688, 697, 701, 703, 704, 706, 708, 710, 720, 727, 734, 743, 745, 746, 748, 754, 755, 762, 769, 772, 774, 780, 788, 791, 792, 793, 802, 806, 811, 812, 814, 815, 816, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 836, 837, 838, 840, 841, 842, 843, 845, 847, 848, 850, 851, 855, 856, 857, 859, 860, 862, 863, 867, 869, 872], "timeit": [7, 9, 10, 20, 27, 28, 44, 46], "06": [7, 10, 22, 43, 50, 62, 75, 78, 97, 106, 161, 218, 234, 371, 393, 403, 617, 622, 626, 631, 737, 767, 769, 840, 848], "m": [7, 8, 9, 10, 27, 40, 42, 44, 46, 49, 53, 58, 62, 75, 76, 81, 85, 98, 135, 141, 142, 143, 263, 324, 325, 365, 371, 372, 373, 374, 378, 394, 425, 430, 431, 433, 434, 449, 460, 471, 472, 486, 504, 505, 506, 507, 508, 625, 633, 637, 639, 663, 665, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 687, 722, 735, 736, 737, 808, 815, 816, 818, 824, 845], "per": [7, 9, 10, 20, 41, 43, 53, 57, 76, 80, 315, 365, 371, 372, 374, 390, 391, 392, 408, 409, 410, 411, 440, 487, 632, 646, 648, 649, 650, 651, 654, 659, 788, 816, 824, 834, 837, 848], "loop": [7, 9, 10, 20, 35, 68, 76, 91, 118, 121, 371, 417, 624, 636, 711, 712, 713, 808, 821, 851, 859], "100": [7, 8, 9, 10, 39, 41, 43, 49, 52, 53, 72, 75, 76, 77, 80, 97, 134, 143, 230, 270, 283, 324, 347, 356, 365, 368, 371, 372, 374, 395, 396, 441, 447, 485, 549, 557, 573, 625, 628, 630, 633, 637, 672, 720, 808, 824, 825, 840, 848, 849, 850, 851, 856, 857, 859], "block_until_readi": 7, "08": [7, 53, 66, 76, 85, 222, 330, 347, 368, 371, 373, 393, 403, 453, 628, 736, 737, 762, 767, 772, 831], "\u00b5": [7, 9, 10, 20], "made": [7, 9, 27, 53, 60, 76, 372, 374, 432, 458, 459, 460, 706, 814, 816, 817, 819, 820, 823, 824, 829, 831, 833, 835, 836, 837, 841, 843, 845, 847, 856, 866], "significantli": [7, 9, 27, 53, 58, 76, 81, 372, 445, 633, 683, 824, 855, 864], "line": [7, 9, 10, 16, 17, 20, 21, 24, 27, 28, 30, 31, 42, 43, 286, 628, 806, 808, 815, 819, 820, 824, 826, 827, 829, 837, 840, 843, 846, 847, 848, 849, 857, 860, 869], "even": [7, 24, 27, 28, 53, 76, 93, 236, 269, 274, 279, 374, 383, 480, 518, 628, 815, 816, 817, 819, 821, 824, 825, 826, 828, 832, 833, 836, 837, 838, 843, 847, 848, 849, 850, 851, 856, 857, 872], "better": [7, 10, 30, 39, 45, 46, 814, 818, 837, 838, 841, 843, 844, 847, 848, 849, 857, 869], "3x": 7, "increas": [7, 9, 10, 20, 27, 30, 53, 58, 60, 76, 81, 83, 96, 374, 383, 480, 521, 633, 635, 688, 697, 710, 774, 825, 829, 837, 841, 843, 855, 859, 866], "execut": [7, 9, 18, 19, 20, 22, 23, 24, 25, 27, 28, 30, 32, 35, 42, 44, 46, 119, 121, 597, 624, 627, 630, 815, 816, 822, 823, 824, 825, 826, 827, 829, 833, 834, 836, 840, 843, 845, 847, 850, 851, 853, 859, 862, 866, 867, 868, 869, 870, 872], "train2017": [7, 9, 24, 27, 28, 808, 860], "000000283921": [7, 9, 27], "out_torch": [7, 9, 27], "et": [7, 632, 633, 659, 683], "took": [7, 75, 276], "out_jax": [7, 9, 27], "66m": 7, "53m": 7, "That": [7, 9, 12, 14, 19, 20, 21, 22, 23, 27, 28, 29, 30, 31, 32, 33, 34, 41, 278, 373, 452, 628, 801, 815, 816, 820, 840, 847, 848, 849, 867], "pretti": [7, 9, 27, 28, 41, 812, 830, 848, 872], "much": [7, 9, 10, 18, 19, 25, 27, 28, 29, 30, 41, 96, 330, 347, 368, 787, 814, 815, 816, 820, 823, 825, 833, 836, 837, 838, 841, 842, 843, 845, 847, 848, 856, 864, 866, 872, 873], "achiev": [7, 9, 10, 27, 808, 809, 811, 817, 824, 825, 833, 834, 840, 843, 848, 850, 853], "solid": [7, 9, 27], "associ": [8, 53, 58, 76, 81, 219, 269, 374, 383, 457, 521, 628, 633, 676, 679, 691, 769, 816, 825, 833, 834, 837, 838, 840, 851], "python": [8, 12, 18, 30, 35, 39, 41, 42, 43, 45, 46, 53, 62, 76, 85, 122, 203, 215, 243, 278, 371, 378, 417, 504, 505, 506, 507, 508, 610, 625, 627, 628, 630, 639, 734, 735, 736, 737, 739, 797, 801, 802, 806, 813, 815, 816, 819, 822, 823, 824, 829, 830, 837, 839, 840, 845, 847, 848, 851, 853, 854, 855, 856, 859, 863, 866, 867, 868, 872, 873], "2023": [8, 9, 22, 23, 24, 25, 41], "02": [8, 9, 41, 49, 54, 55, 61, 62, 75, 78, 85, 134, 221, 222, 261, 371, 393, 403, 404, 588, 589, 611, 612, 617, 625, 628, 630, 631, 638, 639, 733, 736, 737, 838], "52": [8, 10, 39, 52, 75, 77, 78, 85, 224, 234, 236, 383, 519, 541, 542, 557, 611, 628, 630, 631, 632, 633, 643, 656, 678, 737, 755, 801], "resolv": [8, 41, 43, 53, 66, 243, 383, 519, 520, 628, 635, 643, 698, 753, 754, 759, 761, 816, 822, 825, 831, 845], "185": [8, 41, 69], "199": [8, 41, 222, 628], "110": [8, 41], "133": [8, 41, 57, 537, 630, 656], "111": [8, 41, 637, 732], "108": [8, 10, 22, 23, 24, 25, 41, 632, 643, 656, 755], "connect": [8, 41, 788, 808, 810, 815, 822, 839, 849, 850, 856, 864], "443": [8, 41, 281, 628], "sent": [8, 41], "await": [8, 41], "respons": [8, 41, 377, 502, 816, 824, 825], "200": [8, 10, 41, 77, 80, 230, 371, 395, 396, 549, 573, 628, 630, 801, 848], "ok": [8, 41, 815], "length": [8, 41, 42, 49, 53, 59, 60, 70, 76, 82, 83, 93, 94, 99, 122, 130, 135, 310, 313, 314, 329, 337, 365, 368, 371, 372, 374, 378, 381, 393, 394, 399, 400, 403, 404, 405, 415, 416, 417, 419, 431, 440, 480, 489, 506, 511, 610, 625, 630, 632, 633, 634, 635, 641, 659, 683, 684, 692, 702, 745, 772, 788, 840, 848], "10472": 8, "10k": 8, "plain": [8, 41], "tx": 8, "23k": 8, "kb": [8, 41, 43, 46], "57": [8, 10, 39, 41, 52, 53, 75, 76, 194, 217, 218, 221, 222, 224, 234, 235, 275, 291, 292, 363, 627, 628], "109": [8, 41, 58, 633, 671], "634575": 8, "620k": 8, "jpeg": [8, 42, 43], "619": 8, "70k": 8, "113": 8, "resnet34_weight": 8, "torch_resnet_34": 8, "conv1": 8, "kernel_s": [8, 25, 27, 28, 43, 53, 76, 371, 390, 391, 392, 411, 418, 788, 794], "stride": [8, 53, 57, 76, 77, 80, 98, 371, 374, 390, 391, 392, 408, 409, 410, 411, 413, 414, 418, 456, 630, 632, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 788, 836, 841, 866], "bia": [8, 53, 57, 76, 80, 84, 377, 383, 502, 518, 568, 630, 632, 638, 645, 646, 647, 648, 649, 650, 651, 652, 653, 656, 657, 658, 659, 733, 788, 833, 840, 845, 849], "bn1": 8, "ep": [8, 53, 58, 61, 76, 81, 84, 161, 296, 363, 372, 373, 377, 426, 453, 497, 498, 499, 626, 633, 638, 676, 679, 733, 784, 791], "05": [8, 10, 43, 49, 52, 53, 55, 61, 75, 76, 78, 84, 134, 261, 314, 330, 339, 340, 347, 365, 368, 377, 497, 498, 499, 556, 578, 601, 611, 612, 617, 625, 628, 630, 631, 633, 638, 674, 733, 767, 772, 787, 791, 838, 840], "momentum": [8, 41, 53, 76, 377, 497, 499, 791, 856], "affin": [8, 791], "track_running_stat": [8, 791], "dilat": [8, 45, 53, 57, 76, 80, 371, 374, 408, 409, 410, 413, 414, 418, 480, 632, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 788], "ceil_mod": [8, 53, 76, 371, 390, 391, 392, 408, 409, 410, 413, 788], "layer1": 8, "basicblock": 8, "conv2": 8, "bn2": 8, "layer2": 8, "downsampl": [8, 53, 76, 407], "layer3": 8, "layer4": 8, "output_s": [8, 53, 76, 371, 385, 386, 387, 388, 632, 661, 788, 808, 860], "fc": [8, 14, 41, 808, 849, 860], "in_featur": [8, 57, 80, 632, 656, 840], "out_featur": [8, 57, 80, 632, 656, 840], "resnet_34": 8, "ivy_resnet_34": 8, "34": [8, 10, 39, 41, 75, 76, 77, 85, 164, 234, 261, 282, 371, 383, 414, 525, 541, 542, 626, 628, 630, 632, 633, 639, 656, 675, 736, 737, 826], "333f7ec4": 8, "pth": 8, "cach": [8, 9, 22, 23, 24, 25, 41, 43, 46, 191, 535, 627, 630, 777, 797, 831, 833, 836, 840], "83": [8, 10, 39, 58, 80, 85, 283, 371, 383, 393, 403, 414, 519, 628, 632, 633, 656, 671, 736], "3m": 8, "56": [8, 10, 39, 41, 52, 53, 57, 62, 75, 76, 80, 134, 269, 283, 286, 289, 371, 393, 403, 611, 625, 628, 631, 632, 633, 637, 643, 647, 649, 651, 653, 656, 678, 714, 736, 755, 827], "4mb": 8, "preserv": [8, 9, 22, 23, 24, 25, 53, 54, 55, 70, 76, 77, 78, 99, 371, 372, 374, 383, 407, 441, 458, 459, 460, 471, 472, 491, 525, 558, 620, 630, 631, 635, 699, 772, 839, 840, 850, 851, 860], "multipl": [8, 9, 18, 22, 23, 24, 25, 27, 52, 53, 58, 61, 66, 67, 70, 75, 76, 77, 78, 81, 83, 84, 89, 90, 130, 230, 254, 261, 267, 268, 269, 271, 331, 332, 368, 371, 372, 374, 377, 381, 393, 400, 403, 405, 439, 466, 475, 492, 495, 502, 511, 530, 537, 568, 611, 612, 615, 617, 618, 619, 620, 625, 628, 630, 631, 632, 633, 635, 638, 640, 643, 644, 647, 648, 649, 650, 663, 672, 673, 674, 687, 695, 698, 703, 704, 733, 740, 741, 756, 757, 758, 759, 760, 761, 762, 763, 764, 788, 802, 806, 808, 814, 816, 820, 821, 823, 827, 829, 831, 833, 836, 837, 838, 840, 843, 845, 851, 857, 859, 864, 865, 866, 873], "machin": [8, 9, 22, 23, 24, 25, 30, 31, 39, 45, 53, 58, 76, 81, 161, 164, 372, 426, 626, 633, 676, 679, 808, 815, 819, 833, 853, 856, 864, 866, 868, 869, 870, 871, 872], "rel": [8, 9, 22, 23, 24, 25, 53, 55, 58, 60, 65, 72, 76, 78, 81, 83, 88, 98, 132, 330, 347, 368, 373, 383, 452, 453, 518, 612, 615, 617, 618, 619, 631, 633, 635, 642, 667, 676, 679, 687, 699, 703, 749, 752, 767, 769, 816, 824, 838, 843, 866, 868], "project": [8, 9, 16, 21, 22, 23, 24, 25, 27, 28, 31, 94, 632, 659, 788, 808, 810, 811, 814, 815, 816, 817, 820, 821, 822, 840, 849, 851, 855, 856, 857, 860, 862, 864, 866, 869, 873, 874], "consist": [8, 9, 10, 22, 23, 24, 25, 27, 28, 66, 70, 236, 243, 269, 371, 372, 415, 425, 628, 633, 643, 668, 669, 755, 789, 790, 811, 819, 820, 824, 825, 831, 836, 845, 855, 867], "ad": [8, 9, 10, 22, 23, 24, 25, 53, 60, 76, 83, 91, 236, 269, 330, 347, 368, 377, 497, 498, 499, 588, 589, 628, 630, 632, 633, 635, 659, 669, 670, 698, 788, 793, 808, 812, 813, 814, 815, 816, 819, 820, 822, 823, 824, 825, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 841, 843, 845, 849, 851, 856, 859, 865, 866], "home": [8, 9, 22, 23, 24, 25, 824], "95": [8, 10, 39, 53, 55, 58, 62, 69, 78, 80, 85, 106, 356, 368, 414, 611, 615, 619, 622, 631, 633, 639, 671, 736, 737], "builtin": [8, 815, 847, 849], "callabl": [8, 45, 53, 54, 68, 76, 77, 80, 91, 118, 119, 121, 162, 163, 195, 196, 209, 359, 361, 362, 369, 370, 371, 374, 414, 417, 419, 457, 480, 531, 535, 540, 542, 546, 547, 568, 597, 610, 614, 616, 621, 624, 626, 627, 630, 631, 636, 637, 711, 712, 713, 720, 721, 722, 724, 725, 726, 727, 767, 770, 780, 792, 803, 806, 823, 829, 835, 837, 845, 858, 859, 860, 861], "track": [8, 18, 27, 28, 40, 41, 806, 815, 816, 819, 835, 836, 859, 866], "properli": [8, 815, 818, 829, 831, 837, 840], "might": [8, 33, 54, 94, 175, 540, 626, 630, 812, 814, 815, 816, 824, 825, 827, 830, 831, 834, 837, 840, 841, 843, 845, 847, 848, 853], "_trace_graph": 8, "shown": [8, 25, 27, 68, 70, 91, 253, 276, 334, 368, 628, 814, 815, 816, 819, 822, 824, 825, 827, 829, 831, 832, 837, 838, 840, 841, 842, 845, 847, 851], "8507": 8, "1351": 8, "0069": 8, "85072625": 8, "13506091": 8, "00688289": 8, "resnet50_weight": 8, "torch_resnet_50": 8, "imagenet1k_v2": 8, "11ad3fa6": 8, "97": [8, 10, 39, 53, 55, 75, 78, 85, 222, 356, 368, 615, 628, 631, 736], "8m": 8, "8mb": 8, "bottleneck": [8, 855], "conv3": 8, "bn3": 8, "2048": [8, 589, 630], "resnet_50": 8, "ivy_resnet_50": 8, "3429": 8, "0408": 8, "0121": 8, "34288204": 8, "04077014": 8, "01212029": 8, "depend": [9, 10, 12, 14, 18, 19, 20, 21, 22, 23, 24, 25, 27, 29, 32, 49, 50, 53, 54, 58, 64, 65, 73, 76, 81, 88, 89, 119, 125, 148, 216, 217, 218, 221, 222, 223, 224, 233, 234, 236, 239, 241, 257, 258, 259, 260, 269, 271, 274, 281, 282, 286, 287, 355, 368, 371, 372, 417, 425, 443, 591, 624, 625, 626, 628, 630, 632, 633, 640, 642, 657, 668, 669, 680, 681, 682, 683, 744, 749, 752, 762, 808, 810, 812, 814, 815, 816, 822, 825, 826, 828, 830, 834, 836, 837, 838, 839, 840, 843, 845, 851, 852, 856, 859, 864, 866, 867], "yet": [9, 10, 12, 14, 18, 19, 20, 21, 22, 23, 24, 25, 28, 43, 364, 366, 367, 375, 376, 380, 814, 815, 830, 851, 852, 859, 860, 861], "doc": [9, 10, 12, 14, 16, 18, 19, 20, 21, 22, 23, 24, 25, 28, 42, 43, 76, 143, 324, 331, 332, 365, 368, 520, 625, 808, 809, 813, 814, 818, 827, 828, 831, 832, 840, 845, 848, 849, 859, 860, 861], "autofeatureextractor": [9, 27], "extractor": [9, 12, 14, 27, 43, 808], "hug": [9, 27, 859], "face": [9, 27, 809, 815, 819, 830, 831, 835, 843, 845, 859, 866, 872], "arch_nam": [9, 27], "microsoft": [9, 27, 856, 859, 860, 866, 871, 873], "feature_extractor": [9, 27], "23": [9, 10, 22, 23, 24, 25, 39, 41, 43, 52, 53, 58, 62, 72, 75, 76, 77, 80, 85, 132, 231, 234, 251, 252, 253, 276, 278, 279, 280, 282, 289, 334, 335, 368, 371, 374, 383, 390, 391, 393, 403, 408, 409, 410, 414, 418, 463, 519, 525, 625, 628, 632, 633, 637, 640, 651, 653, 667, 671, 674, 682, 684, 685, 715, 722, 726, 735, 736, 737, 744, 808, 824, 840, 845], "980130": 9, "9342": 9, "980177": 9, "609": 9, "980207": 9, "1518": 9, "351203": 9, "placement": [9, 814], "390": [9, 22, 23, 24, 25], "inputs_jax": [9, 27], "last_hidden_st": [9, 27], "jax_forward": [9, 27], "jit_appli": 9, "63": [9, 10, 39, 43, 52, 69, 75, 80, 81, 114, 275, 282, 283, 371, 383, 393, 403, 414, 519, 628, 633, 637, 643, 663, 678, 715, 726, 755], "122": [9, 50, 164, 234, 628], "134": [9, 57, 633, 656, 675], "2x": [9, 27], "ipytest": 10, "panda": [10, 41, 43, 856, 863], "matplotlib": [10, 22, 23, 24, 25, 41, 42, 43, 46], "scikit": [10, 372, 443, 856], "learn": [10, 12, 14, 18, 19, 20, 21, 23, 25, 27, 28, 29, 30, 31, 32, 39, 41, 53, 55, 78, 372, 373, 443, 448, 541, 612, 615, 617, 618, 619, 630, 631, 636, 711, 712, 713, 792, 808, 809, 813, 814, 815, 818, 819, 825, 830, 831, 833, 835, 844, 853, 855, 856, 864, 868, 869, 870, 871, 872, 873], "cryptographi": 10, "frontend": [10, 575, 630, 769, 770, 773, 777, 780, 808, 813, 816, 818, 824, 825, 829, 830, 835, 839, 840, 843, 844, 846, 853, 860, 866], "sklearn": 10, "classification_report": 10, "model_select": 10, "train_test_split": 10, "dataset": [10, 27, 70, 808, 848, 859, 860], "load_breast_canc": 10, "pyplot": [10, 41, 42, 43, 46], "plt": [10, 41, 42, 43, 46], "pd": [10, 43], "functool": [10, 41, 829, 837, 847], "autoconfig": 10, "tqdm": [10, 22, 23, 24, 25, 41, 43, 808], "tqdm_notebook": 10, "These": [10, 34, 53, 76, 372, 374, 383, 425, 479, 518, 632, 633, 659, 668, 669, 808, 811, 813, 814, 815, 816, 819, 823, 825, 827, 828, 832, 833, 836, 837, 840, 845, 846, 848, 849, 850, 851, 853, 855, 856, 857, 860, 866, 870, 872, 873], "sole": [10, 39, 832, 841, 865, 866, 867], "re": [10, 16, 19, 20, 21, 27, 28, 29, 30, 31, 32, 33, 34, 41, 43, 44, 46, 53, 54, 63, 76, 86, 96, 209, 315, 365, 372, 374, 446, 481, 482, 541, 627, 630, 633, 635, 640, 685, 703, 742, 744, 809, 810, 814, 815, 816, 817, 818, 819, 822, 825, 830, 835, 836, 837, 838, 839, 841, 843, 847, 850, 851, 854, 855, 856, 866], "test_jax_gpu": 10, "xla_bridg": [10, 41], "get_backend": [10, 833], "test_torch_gpu": 10, "is_avail": 10, "test_xgboost_gpu": 10, "capsi": 10, "load_diabet": 10, "y": [10, 27, 28, 39, 40, 42, 43, 47, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 69, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 98, 99, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 125, 128, 130, 132, 133, 134, 135, 136, 137, 138, 139, 145, 148, 149, 150, 159, 161, 164, 176, 189, 193, 197, 202, 203, 204, 208, 210, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 247, 248, 250, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 309, 330, 331, 332, 338, 346, 347, 348, 349, 350, 355, 357, 359, 363, 365, 368, 371, 372, 373, 374, 377, 383, 391, 393, 395, 396, 400, 403, 405, 409, 415, 422, 426, 432, 439, 446, 448, 449, 451, 452, 453, 454, 455, 465, 467, 476, 480, 488, 489, 490, 492, 496, 500, 501, 503, 511, 517, 518, 519, 520, 521, 524, 526, 527, 528, 530, 533, 536, 537, 540, 541, 543, 544, 545, 548, 549, 550, 554, 556, 557, 558, 560, 561, 564, 565, 570, 577, 578, 579, 582, 585, 586, 588, 589, 591, 593, 595, 596, 597, 601, 602, 605, 608, 609, 610, 620, 622, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 647, 649, 651, 653, 654, 655, 656, 663, 664, 665, 669, 670, 671, 672, 673, 674, 676, 677, 678, 679, 681, 683, 684, 685, 687, 689, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 714, 717, 720, 721, 723, 731, 733, 734, 735, 736, 737, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 806, 808, 821, 823, 826, 827, 835, 837, 838, 840, 841, 843, 845, 847, 859], "target": [10, 12, 14, 20, 22, 23, 25, 27, 28, 30, 31, 32, 33, 34, 43, 53, 76, 191, 373, 448, 449, 450, 451, 452, 453, 454, 455, 627, 767, 788, 790, 796, 808, 812, 815, 818, 821, 830, 831, 838, 839, 844, 848, 849, 850, 860, 861, 862, 864, 865, 866, 869, 871, 872], "xgb_model": 10, "xgbregressor": 10, "tree_method": 10, "caus": [10, 373, 450, 815, 816, 819, 821, 823, 824, 825, 827, 836, 838, 840, 851], "either": [10, 22, 23, 32, 33, 34, 35, 39, 45, 52, 53, 54, 57, 66, 70, 75, 76, 77, 80, 81, 108, 111, 114, 119, 129, 130, 140, 216, 217, 218, 219, 224, 234, 236, 237, 239, 241, 243, 250, 251, 257, 258, 259, 260, 261, 269, 278, 280, 281, 283, 286, 287, 333, 355, 368, 371, 377, 383, 393, 403, 413, 414, 418, 502, 519, 520, 540, 560, 568, 569, 577, 597, 622, 624, 625, 628, 630, 632, 633, 636, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 659, 673, 678, 681, 685, 711, 712, 713, 753, 754, 759, 761, 774, 788, 789, 790, 797, 810, 814, 815, 816, 821, 822, 823, 825, 826, 827, 828, 829, 831, 833, 836, 837, 838, 839, 840, 843, 845, 848, 851, 852, 860, 866], "fit": [10, 60, 83, 635, 701, 814, 837, 845, 862, 863, 866], "consol": [10, 571, 630, 808, 816, 831, 840, 847, 852], "gpu_hist": 10, "captur": [10, 835, 840, 850, 867], "readouterr": 10, "err": 10, "99": [10, 39, 52, 53, 55, 73, 75, 85, 131, 218, 233, 356, 368, 588, 615, 625, 628, 630, 631, 637, 643, 718, 726, 736, 755], "implement": [10, 18, 19, 27, 29, 33, 41, 44, 50, 51, 53, 64, 65, 73, 74, 76, 81, 88, 93, 148, 162, 163, 176, 195, 196, 210, 216, 217, 218, 221, 222, 223, 224, 233, 234, 236, 239, 241, 243, 257, 258, 259, 260, 269, 271, 274, 278, 281, 282, 286, 287, 331, 332, 355, 368, 372, 383, 424, 425, 524, 525, 546, 547, 626, 627, 628, 630, 632, 633, 641, 642, 643, 659, 668, 669, 670, 678, 687, 745, 746, 747, 748, 749, 752, 756, 757, 758, 759, 760, 761, 773, 775, 797, 808, 812, 814, 818, 819, 820, 821, 823, 825, 826, 828, 829, 830, 832, 833, 834, 836, 838, 840, 841, 843, 845, 847, 848, 849, 850, 851, 853, 863, 864, 865, 866, 869, 872, 873], "tabular": 10, "pulsar": 10, "emploi": [10, 872], "remov": [10, 16, 17, 20, 25, 27, 28, 30, 58, 70, 81, 633, 635, 636, 637, 667, 673, 687, 705, 711, 712, 728, 802, 805, 808, 814, 821, 822, 824, 825, 828, 833, 839, 840, 843, 850, 859, 860, 866], "column": [10, 43, 53, 58, 76, 81, 93, 94, 128, 143, 324, 365, 372, 374, 381, 383, 425, 431, 443, 464, 469, 471, 472, 476, 478, 511, 517, 518, 625, 633, 668, 669, 674, 680, 682, 683, 688, 772, 787], "well": [10, 27, 28, 41, 42, 43, 77, 373, 452, 554, 630, 633, 682, 774, 808, 810, 814, 816, 822, 824, 825, 829, 836, 837, 838, 840, 849, 850, 860, 865, 866, 867, 871], "standard": [10, 52, 58, 61, 62, 66, 75, 84, 85, 89, 122, 123, 124, 126, 127, 128, 129, 131, 132, 133, 135, 138, 139, 140, 141, 142, 144, 145, 151, 161, 164, 176, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 236, 237, 239, 241, 242, 243, 247, 248, 249, 250, 251, 252, 256, 258, 259, 260, 261, 263, 264, 265, 266, 269, 271, 272, 273, 274, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 331, 332, 334, 368, 371, 372, 374, 383, 415, 445, 488, 492, 518, 610, 625, 626, 628, 630, 633, 635, 638, 639, 640, 641, 642, 643, 644, 663, 664, 665, 666, 667, 669, 670, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 689, 690, 696, 698, 699, 700, 702, 703, 705, 706, 710, 733, 736, 740, 741, 743, 744, 745, 746, 747, 748, 749, 752, 756, 757, 758, 759, 760, 761, 762, 763, 764, 774, 787, 791, 801, 802, 808, 811, 818, 819, 820, 823, 825, 828, 832, 836, 839, 840, 841, 851, 854, 860, 862, 864, 865, 868, 869, 871], "while": [10, 27, 28, 35, 53, 57, 70, 76, 80, 93, 94, 99, 121, 137, 175, 243, 244, 264, 265, 343, 368, 371, 372, 374, 416, 417, 439, 482, 483, 517, 624, 625, 626, 628, 632, 641, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 745, 757, 760, 770, 812, 814, 815, 816, 820, 821, 822, 824, 825, 826, 827, 830, 831, 832, 833, 835, 836, 837, 838, 839, 840, 841, 843, 847, 849, 850, 851, 852, 855, 856, 859, 866, 872, 873], "extra": [10, 28, 70, 99, 118, 610, 624, 630, 820, 825, 827, 834, 836, 837, 838, 843, 845, 859, 860, 863, 868], "dimens": [10, 49, 53, 54, 57, 58, 59, 60, 62, 63, 64, 66, 67, 70, 72, 76, 77, 80, 81, 82, 83, 85, 86, 87, 89, 90, 96, 98, 99, 102, 109, 113, 137, 141, 142, 312, 323, 325, 326, 327, 328, 331, 332, 336, 337, 345, 352, 359, 365, 368, 369, 371, 372, 373, 374, 377, 378, 381, 383, 385, 387, 388, 390, 391, 392, 394, 399, 400, 404, 408, 409, 410, 411, 414, 415, 417, 418, 420, 422, 425, 434, 443, 448, 452, 458, 459, 460, 464, 470, 481, 482, 483, 484, 486, 488, 492, 497, 498, 499, 502, 506, 508, 511, 521, 523, 524, 525, 526, 527, 528, 541, 542, 543, 545, 552, 586, 590, 610, 622, 625, 630, 632, 633, 634, 635, 636, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 658, 659, 663, 664, 665, 667, 668, 669, 670, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 687, 689, 690, 693, 694, 696, 698, 699, 700, 701, 702, 703, 704, 705, 706, 709, 711, 712, 713, 739, 740, 741, 743, 745, 746, 747, 748, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 772, 774, 784, 788, 791, 827, 829, 835, 837, 838, 840, 843, 845, 848], "label": [10, 41, 42, 43, 53, 59, 76, 82, 373, 448, 449, 451, 452, 453, 454, 455, 634, 692, 693, 694, 808, 814, 819, 837, 844, 845, 846, 850, 852, 866], "load_data": 10, "standardscal": 10, "df": [10, 43], "read_csv": [10, 43], "delimit": [10, 848], "drop": [10, 43, 53, 76, 327, 365, 373, 374, 452, 489, 787, 788, 815, 851], "sc": 10, "fit_transform": 10, "prepare_data": 10, "tupl": [10, 45, 48, 49, 50, 52, 53, 54, 57, 58, 60, 63, 64, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 96, 102, 106, 107, 108, 109, 110, 111, 112, 113, 114, 118, 123, 124, 130, 132, 136, 137, 139, 143, 145, 149, 150, 151, 162, 163, 164, 168, 169, 175, 176, 182, 192, 195, 196, 210, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 246, 247, 248, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 299, 300, 301, 302, 303, 305, 306, 307, 309, 312, 317, 321, 324, 330, 331, 332, 333, 334, 336, 337, 338, 341, 342, 344, 345, 346, 347, 351, 352, 353, 354, 355, 357, 358, 359, 360, 365, 368, 370, 371, 372, 374, 377, 378, 379, 381, 383, 390, 391, 392, 394, 395, 396, 397, 399, 404, 405, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 425, 426, 430, 434, 436, 441, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 458, 459, 460, 461, 464, 465, 475, 480, 486, 488, 489, 490, 492, 494, 497, 499, 500, 501, 502, 503, 505, 506, 508, 509, 510, 518, 519, 520, 521, 523, 524, 525, 526, 527, 530, 533, 534, 536, 537, 541, 542, 543, 544, 545, 546, 547, 548, 549, 551, 552, 554, 556, 557, 558, 560, 561, 564, 572, 573, 577, 587, 588, 589, 590, 591, 593, 594, 595, 596, 609, 610, 611, 612, 613, 615, 617, 620, 624, 625, 626, 627, 628, 630, 631, 632, 633, 635, 636, 637, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 662, 663, 664, 668, 669, 670, 671, 672, 673, 674, 676, 678, 679, 680, 681, 683, 685, 686, 687, 690, 692, 693, 694, 695, 696, 697, 699, 700, 702, 703, 704, 705, 706, 709, 710, 711, 712, 713, 714, 715, 717, 718, 719, 721, 722, 723, 725, 726, 729, 730, 731, 732, 734, 735, 736, 737, 739, 742, 743, 745, 746, 747, 748, 749, 750, 753, 754, 756, 757, 758, 759, 760, 761, 762, 763, 764, 772, 773, 774, 787, 788, 790, 801, 802, 820, 825, 832, 833, 836, 838, 840, 845, 848, 849, 851, 859, 860, 861], "expand_dim": [10, 24, 27, 28, 43, 45, 60, 83, 632, 635, 654, 808, 837, 845, 848, 860], "astyp": [10, 12, 14, 19, 41, 42, 43, 50, 57, 73, 80, 626, 632, 648, 650, 651, 654, 808, 825, 836, 837, 843, 861], "csv": [10, 43, 808], "instanc": [10, 18, 24, 27, 28, 41, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 98, 99, 106, 107, 108, 109, 110, 111, 112, 113, 114, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 148, 149, 150, 151, 161, 164, 167, 168, 169, 171, 176, 193, 210, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 318, 324, 325, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 365, 368, 371, 372, 373, 374, 377, 383, 390, 391, 392, 393, 395, 396, 397, 399, 403, 404, 408, 409, 410, 414, 415, 417, 418, 420, 421, 422, 423, 425, 426, 427, 428, 429, 430, 432, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 503, 505, 506, 507, 508, 509, 510, 511, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 533, 534, 536, 537, 540, 541, 542, 543, 544, 545, 548, 549, 552, 554, 556, 557, 558, 560, 561, 562, 564, 565, 567, 572, 573, 583, 587, 588, 589, 590, 591, 593, 595, 596, 609, 611, 612, 615, 617, 618, 619, 620, 625, 626, 628, 630, 631, 632, 633, 634, 635, 638, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 654, 655, 656, 658, 659, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 733, 734, 735, 736, 737, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 780, 785, 806, 814, 815, 816, 819, 820, 821, 825, 827, 828, 829, 830, 832, 833, 834, 835, 836, 840, 848, 849, 850, 853, 859, 867], "117564": 10, "variou": [10, 21, 31, 33, 39, 808, 811, 814, 815, 816, 819, 824, 825, 828, 829, 832, 834, 835, 837, 838, 839, 840, 852, 862, 864, 865, 866, 869, 872], "structur": [10, 28, 70, 73, 99, 161, 164, 538, 630, 637, 718, 727, 808, 814, 816, 817, 820, 823, 833, 838, 839, 840, 841, 848, 849, 865, 866], "allow": [10, 25, 27, 28, 39, 53, 66, 76, 89, 133, 274, 372, 383, 444, 521, 525, 568, 625, 628, 630, 642, 643, 751, 758, 772, 773, 774, 775, 789, 790, 802, 806, 808, 814, 816, 817, 820, 821, 824, 825, 829, 831, 833, 834, 835, 836, 837, 838, 840, 843, 845, 847, 851, 853, 856, 859, 860, 861, 864, 866, 870, 871], "navig": [10, 812, 815, 816, 818, 830], "choic": [10, 28, 45, 53, 66, 76, 89, 372, 374, 443, 463, 643, 760, 762, 808, 815, 824, 836, 837, 848, 857, 860, 866, 873], "rerun": [10, 41], "most": [10, 18, 27, 28, 70, 72, 93, 96, 137, 372, 425, 581, 604, 625, 630, 633, 668, 669, 805, 808, 813, 814, 815, 820, 823, 824, 825, 826, 830, 832, 833, 835, 836, 837, 838, 840, 841, 842, 843, 845, 847, 848, 849, 851, 856, 866, 867, 869, 870, 872, 873], "method": [10, 18, 27, 43, 47, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 98, 99, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 125, 127, 129, 130, 132, 134, 135, 136, 137, 139, 141, 142, 145, 148, 149, 150, 151, 161, 164, 168, 169, 176, 193, 210, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 318, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 368, 371, 372, 373, 374, 383, 390, 391, 392, 393, 395, 396, 397, 399, 403, 404, 405, 408, 409, 410, 414, 415, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 430, 432, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 503, 505, 506, 507, 508, 509, 510, 511, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 533, 534, 536, 537, 538, 540, 541, 542, 543, 544, 545, 548, 549, 552, 554, 556, 557, 558, 560, 561, 562, 564, 565, 567, 572, 573, 587, 588, 589, 590, 591, 593, 595, 596, 609, 611, 612, 615, 617, 618, 619, 620, 625, 626, 628, 630, 631, 633, 634, 637, 640, 643, 644, 646, 647, 648, 649, 650, 651, 654, 655, 656, 658, 662, 663, 664, 666, 667, 668, 669, 670, 671, 672, 673, 674, 676, 677, 678, 679, 680, 681, 683, 684, 687, 688, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 725, 726, 727, 733, 734, 735, 736, 737, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 762, 763, 764, 769, 780, 786, 787, 788, 789, 790, 814, 816, 819, 820, 824, 825, 826, 827, 828, 832, 840, 841, 845, 846, 849, 850, 851, 859, 860, 861, 867, 873], "signific": [10, 53, 373, 453, 842, 851, 855, 856, 866], "object": [10, 18, 23, 25, 27, 41, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 99, 102, 103, 125, 129, 130, 140, 152, 161, 164, 172, 175, 210, 268, 505, 553, 569, 613, 625, 626, 627, 630, 631, 637, 639, 717, 718, 719, 721, 722, 723, 729, 730, 731, 732, 739, 767, 769, 770, 777, 778, 779, 785, 786, 788, 789, 790, 797, 801, 808, 820, 821, 823, 824, 833, 834, 837, 838, 840, 843, 847, 850, 858, 859, 860, 861, 866, 872], "logist": 10, "booster": 10, "gblinear": 10, "n_estim": 10, "learning_r": 10, "reg_lambda": 10, "reg_alpha": 10, "base_margin": 10, "xgb_cl": 10, "ivy_cl": 10, "n": [10, 39, 42, 43, 44, 46, 49, 52, 53, 57, 58, 60, 62, 63, 66, 67, 75, 76, 80, 81, 83, 85, 86, 89, 90, 93, 98, 135, 141, 142, 143, 216, 286, 288, 324, 325, 337, 365, 368, 371, 372, 373, 374, 377, 378, 381, 383, 385, 386, 387, 388, 393, 394, 399, 400, 403, 404, 405, 413, 414, 415, 416, 418, 426, 427, 434, 438, 440, 442, 447, 448, 460, 466, 469, 473, 475, 486, 495, 497, 498, 499, 502, 504, 505, 506, 507, 508, 511, 518, 528, 625, 628, 632, 633, 635, 637, 639, 640, 643, 644, 645, 646, 647, 648, 650, 652, 654, 659, 664, 667, 671, 673, 674, 675, 676, 677, 678, 679, 680, 683, 684, 687, 688, 689, 690, 697, 698, 700, 706, 710, 722, 735, 736, 737, 743, 757, 759, 760, 761, 762, 763, 764, 788, 791, 801, 808, 818, 822, 824, 840, 852, 860], "436": 10, "48": [10, 39, 43, 52, 53, 75, 76, 77, 78, 85, 108, 218, 241, 283, 371, 391, 392, 393, 403, 409, 410, 413, 556, 611, 615, 622, 628, 630, 631, 633, 637, 643, 678, 715, 736, 755], "wai": [10, 16, 17, 18, 21, 23, 27, 31, 33, 39, 93, 96, 808, 810, 813, 814, 815, 819, 820, 821, 822, 824, 825, 826, 836, 837, 838, 840, 843, 847, 848, 849, 850, 851, 852, 855, 856, 861, 868, 872, 873], "t4": 10, "higher": [10, 53, 76, 372, 374, 383, 429, 441, 447, 458, 459, 460, 528, 787, 825, 836, 844, 845, 850, 851, 863, 866, 867, 870, 872, 873], "tier": [10, 817], "reduc": [10, 53, 54, 58, 63, 66, 67, 70, 76, 77, 81, 86, 89, 90, 209, 331, 332, 352, 368, 369, 383, 523, 524, 525, 526, 527, 528, 542, 627, 630, 633, 640, 643, 644, 680, 740, 741, 756, 757, 758, 759, 760, 761, 762, 763, 764, 801, 802, 824, 829, 837, 843, 845, 847, 859, 864, 868, 869, 870], "lower": [10, 43, 49, 52, 53, 58, 62, 75, 76, 81, 85, 128, 141, 267, 303, 309, 315, 324, 325, 363, 365, 383, 521, 522, 528, 625, 628, 633, 639, 663, 669, 670, 676, 737, 774, 787, 808, 816, 825, 827, 837, 840, 845, 851, 853, 862, 863, 864, 866, 867, 872, 873], "although": [10, 633, 681, 808, 810, 820, 822, 823, 837, 843, 864, 866], "experi": [10, 16, 43, 815, 829, 840, 846, 848, 851], "demonstr": [10, 24, 27, 28, 42, 817, 825, 827, 829, 847], "still": [10, 21, 23, 24, 27, 28, 30, 31, 34, 58, 70, 81, 633, 683, 772, 814, 815, 816, 820, 821, 825, 828, 829, 831, 833, 836, 837, 840, 843, 849, 851, 856, 859, 860, 863, 866, 872], "substanti": [10, 811, 816, 820, 825, 840, 856, 866], "dive": [10, 16, 18, 27, 39, 809, 810, 813, 814, 816, 819, 823, 825, 831, 838, 844, 847, 848, 851, 872], "stuff": 10, "tool": [10, 18, 27, 28, 808, 815, 816, 827, 831, 846, 850, 851, 854, 857, 860, 864, 865, 866, 867, 869, 872, 873], "25": [10, 39, 41, 42, 43, 52, 53, 54, 58, 59, 62, 66, 69, 75, 76, 77, 80, 81, 84, 85, 89, 98, 99, 114, 133, 219, 220, 230, 236, 238, 249, 254, 269, 274, 277, 279, 282, 283, 284, 289, 311, 365, 373, 383, 414, 449, 452, 519, 528, 556, 557, 573, 588, 625, 628, 630, 633, 634, 637, 638, 643, 646, 663, 667, 672, 688, 693, 715, 722, 726, 733, 735, 736, 737, 754, 755, 757, 762, 817, 823, 835], "201": [10, 75, 76, 221, 393, 628], "20x": 10, "24": [10, 20, 39, 41, 52, 53, 58, 66, 75, 76, 77, 80, 81, 85, 98, 231, 239, 254, 256, 269, 279, 280, 283, 345, 348, 368, 371, 383, 390, 392, 393, 403, 408, 409, 410, 414, 418, 519, 541, 542, 628, 630, 633, 637, 643, 646, 667, 674, 678, 715, 726, 735, 736, 737, 753, 755, 769, 829, 848], "ivy_pr": 10, "xgb_pred": 10, "ivyclassifi": 10, "nxgbclassifi": 10, "precis": [10, 53, 58, 76, 81, 161, 249, 269, 276, 283, 342, 368, 372, 383, 426, 518, 581, 604, 626, 628, 630, 633, 669, 670, 674, 681, 683, 684, 690, 780, 824, 837, 842, 843, 870], "recal": 10, "f1": [10, 825], "score": [10, 57, 80, 373, 455, 632, 660, 662, 808], "94": [10, 39, 52, 53, 55, 62, 75, 76, 78, 85, 203, 279, 280, 356, 368, 403, 615, 627, 631, 737], "106597": 10, "33": [10, 39, 41, 42, 52, 62, 66, 75, 76, 77, 78, 80, 222, 223, 230, 279, 371, 372, 374, 383, 391, 413, 414, 444, 463, 519, 537, 588, 615, 628, 630, 631, 632, 633, 637, 643, 655, 656, 678, 732, 735, 755, 762, 772, 775], "10967": 10, "accuraci": [10, 41, 43, 46, 371, 415, 825], "macro": 10, "avg": [10, 371, 390, 392, 413], "96": [10, 39, 53, 55, 75, 76, 77, 85, 233, 254, 286, 356, 368, 371, 393, 541, 542, 615, 628, 630, 631, 633, 643, 678, 737, 755], "67": [10, 39, 52, 53, 54, 58, 75, 76, 77, 80, 85, 98, 234, 239, 279, 280, 282, 289, 300, 304, 363, 383, 414, 519, 541, 542, 588, 614, 616, 628, 630, 631, 633, 671, 737], "73": [10, 39, 52, 81, 283, 383, 519, 633, 639, 663, 736, 840], "92": [10, 39, 43, 53, 54, 85, 356, 368, 609, 619, 631, 633, 665, 736, 737], "28": [10, 25, 27, 28, 39, 41, 43, 46, 52, 53, 57, 61, 75, 76, 77, 80, 81, 85, 89, 235, 238, 259, 275, 371, 372, 393, 403, 424, 525, 556, 611, 628, 630, 631, 632, 633, 638, 643, 647, 649, 651, 653, 654, 656, 678, 733, 735, 736, 737, 755, 759, 808], "27": [10, 39, 41, 46, 52, 53, 58, 62, 75, 76, 77, 80, 81, 85, 89, 230, 231, 234, 274, 282, 283, 342, 368, 371, 393, 403, 557, 587, 628, 630, 633, 637, 643, 673, 678, 688, 715, 722, 736, 755, 759, 772, 874], "852": [10, 632, 656], "449": 10, "47": [10, 39, 43, 52, 53, 58, 62, 75, 76, 77, 78, 80, 85, 225, 283, 371, 383, 391, 409, 410, 519, 541, 542, 615, 628, 630, 631, 632, 633, 639, 656, 671, 736, 737], "29": [10, 39, 41, 43, 46, 58, 75, 77, 78, 80, 85, 224, 383, 414, 519, 541, 542, 613, 617, 628, 630, 631, 633, 671, 735, 736, 737], "82": [10, 39, 41, 46, 47, 52, 78, 85, 109, 222, 383, 519, 611, 631, 736, 737, 812, 830], "68": [10, 39, 43, 46, 52, 85, 109, 131, 224, 371, 393, 403, 622, 625, 628, 633, 638, 689, 733, 736, 737], "nevertheless": 10, "fall": [10, 41, 792, 814, 825, 844], "short": [10, 39, 53, 76, 419, 632, 657, 658, 814, 816, 825, 845, 849], "blaze": 10, "31": [10, 22, 23, 24, 25, 39, 41, 42, 46, 47, 52, 53, 75, 76, 77, 80, 85, 109, 114, 134, 230, 261, 269, 371, 374, 383, 392, 393, 463, 519, 536, 622, 625, 628, 630, 736, 737, 848], "03": [10, 23, 42, 49, 52, 54, 55, 75, 76, 78, 85, 134, 234, 259, 339, 340, 588, 589, 612, 617, 625, 628, 630, 631, 633, 672, 736], "62": [10, 39, 41, 47, 69, 75, 76, 85, 109, 254, 282, 628, 638, 639, 733, 735, 737], "36": [10, 39, 43, 52, 53, 57, 66, 76, 77, 81, 224, 279, 280, 345, 368, 371, 372, 383, 393, 403, 429, 519, 541, 542, 589, 628, 630, 633, 637, 643, 656, 675, 678, 688, 725, 755], "35": [10, 39, 47, 57, 58, 69, 75, 76, 80, 81, 85, 109, 224, 283, 371, 393, 403, 628, 632, 633, 640, 643, 656, 664, 671, 736, 744, 755], "37": [10, 22, 23, 24, 25, 39, 47, 52, 53, 69, 75, 76, 80, 98, 109, 222, 230, 279, 282, 286, 379, 414, 509, 628, 632, 633, 637, 639, 656, 675, 722, 736, 824], "surpass": 10, "remark": [10, 851], "artifici": 10, "simpli": [10, 18, 27, 28, 30, 39, 47, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 98, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 125, 127, 129, 130, 132, 134, 135, 136, 137, 139, 141, 142, 145, 149, 150, 151, 164, 168, 169, 176, 193, 210, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 296, 297, 299, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 318, 325, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 371, 374, 383, 390, 391, 392, 393, 395, 396, 397, 399, 403, 404, 405, 408, 409, 410, 414, 415, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 430, 432, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 503, 505, 506, 507, 508, 509, 510, 511, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 533, 534, 536, 537, 540, 541, 542, 543, 544, 545, 548, 549, 552, 554, 556, 558, 560, 561, 562, 564, 565, 567, 572, 573, 587, 588, 589, 590, 591, 593, 595, 596, 609, 611, 612, 615, 617, 618, 619, 620, 628, 646, 647, 648, 649, 650, 651, 654, 655, 656, 658, 662, 663, 664, 666, 667, 668, 669, 670, 671, 672, 673, 674, 679, 680, 681, 683, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 733, 734, 735, 736, 737, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 762, 763, 764, 808, 814, 815, 816, 820, 821, 822, 824, 825, 826, 827, 828, 830, 832, 833, 836, 837, 838, 840, 843, 845, 849, 850, 851, 853, 867, 872], "stack": [10, 20, 22, 23, 24, 25, 30, 39, 43, 53, 58, 60, 70, 76, 81, 83, 98, 141, 142, 325, 365, 372, 374, 425, 464, 465, 467, 476, 496, 575, 584, 607, 625, 630, 633, 635, 637, 665, 667, 668, 669, 670, 672, 673, 675, 676, 677, 679, 680, 681, 683, 684, 687, 714, 724, 725, 788, 808, 813, 819, 836, 845, 862, 864, 871, 872], "x_doubl": 10, "vstack": [10, 53, 76, 374, 476], "y_doubl": 10, "explor": [10, 12, 14, 18, 22, 23, 24, 27, 28, 33, 34, 35, 814, 815, 816, 825, 830, 843, 846, 850, 866, 869], "235128": 10, "41": [10, 22, 23, 24, 25, 39, 41, 46, 52, 53, 58, 75, 76, 77, 80, 81, 109, 223, 231, 238, 269, 283, 371, 372, 379, 383, 391, 409, 414, 436, 509, 519, 536, 537, 622, 628, 630, 633, 643, 663, 671, 761], "315": [10, 275, 628], "40": [10, 39, 41, 43, 53, 54, 75, 76, 77, 85, 89, 99, 230, 234, 254, 283, 345, 368, 371, 374, 391, 393, 403, 409, 485, 541, 543, 548, 549, 573, 588, 610, 613, 628, 630, 631, 633, 637, 643, 672, 678, 723, 736, 755, 759, 808, 824], "879": 10, "65": [10, 39, 41, 43, 46, 75, 78, 85, 230, 269, 556, 611, 628, 630, 631, 633, 643, 678, 736, 737, 755, 824], "380": 10, "seem": [10, 814, 815, 843, 849, 850, 851, 866], "observ": [10, 53, 76, 383, 517, 518, 816, 825, 829, 845, 859, 868], "examin": 10, "600": [10, 43, 77, 80, 371, 395, 396, 549, 824], "plot": [10, 42, 808, 866], "conduct": [10, 870], "num_boosting_round": 10, "300": [10, 75, 77, 80, 279, 371, 395, 396, 549, 573, 628, 630, 633, 672, 840], "400": [10, 77, 80, 371, 395, 396, 549, 573, 630, 633, 672], "500": [10, 53, 76, 77, 80, 371, 372, 395, 396, 447, 549, 630], "ivy_elapsed_tim": 10, "xgb_elapsed_tim": 10, "ivy_tim": 10, "partial": [10, 53, 70, 76, 162, 163, 195, 196, 345, 368, 371, 372, 374, 383, 419, 434, 441, 481, 482, 483, 484, 525, 546, 547, 616, 626, 627, 630, 631, 773, 775, 789, 790, 816, 822, 843], "append": [10, 42, 43, 53, 58, 70, 76, 228, 337, 368, 628, 633, 635, 667, 673, 698, 802, 808, 824, 840, 845, 848, 863], "xgb_time": 10, "fivethirtyeight": 10, "legend": [10, 43, 814], "loc": [10, 863], "best": [10, 41, 568, 630, 802, 806, 808, 809, 812, 813, 814, 815, 816, 818, 824, 825, 829, 830, 839, 840, 841, 852, 869, 870], "xlabel": 10, "ylabel": 10, "obviou": [10, 848, 866], "trend": 10, "longer": [10, 815, 825, 836, 840, 866], "gap": 10, "between": [10, 16, 17, 22, 32, 33, 34, 39, 52, 53, 54, 57, 58, 59, 60, 64, 70, 75, 76, 80, 81, 82, 83, 99, 122, 161, 224, 237, 272, 288, 330, 347, 349, 368, 371, 372, 373, 374, 383, 395, 396, 397, 408, 409, 410, 418, 424, 428, 449, 450, 451, 452, 453, 454, 455, 480, 528, 625, 626, 628, 632, 634, 635, 637, 639, 641, 655, 678, 692, 693, 694, 698, 706, 720, 735, 746, 747, 748, 773, 780, 792, 808, 820, 821, 825, 827, 832, 833, 834, 836, 837, 838, 839, 840, 843, 844, 846, 847, 848, 850, 855, 859, 860, 862, 863, 865, 866, 867, 872], "within": [10, 12, 14, 18, 27, 28, 48, 53, 76, 122, 330, 347, 368, 371, 377, 408, 409, 410, 415, 418, 458, 459, 460, 502, 625, 639, 737, 802, 811, 814, 816, 817, 820, 824, 825, 837, 838, 839, 840, 849, 851, 860, 862, 863, 867], "slightli": [10, 308, 365, 823, 837, 840, 845, 849], "paramet": [10, 14, 25, 27, 28, 41, 43, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 96, 98, 99, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 200, 202, 203, 204, 205, 207, 208, 209, 210, 211, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 365, 368, 369, 370, 371, 372, 373, 374, 377, 378, 379, 381, 383, 384, 385, 386, 387, 388, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 403, 404, 405, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 551, 552, 553, 554, 556, 557, 558, 560, 561, 562, 563, 564, 565, 567, 568, 569, 572, 573, 576, 577, 578, 579, 582, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 767, 769, 772, 773, 774, 775, 780, 785, 787, 788, 789, 790, 791, 792, 793, 797, 798, 801, 802, 804, 806, 808, 814, 820, 828, 829, 832, 837, 838, 840, 841, 845, 847, 848, 859, 860, 861, 867], "x_train": 10, "y_train": [10, 43, 808], "train_siz": [10, 41], "random_st": [10, 372, 430], "51": [10, 39, 43, 52, 53, 75, 76, 77, 85, 231, 269, 282, 372, 393, 447, 628, 737, 772], "clear": [10, 191, 627, 814, 816, 821, 825, 826, 827, 837, 843, 845, 847, 855, 856, 857, 866], "amount": [10, 59, 82, 211, 627, 634, 692, 693, 694, 802, 815, 824, 826, 838], "widen": 10, "impress": 10, "outcom": [10, 53, 76, 333, 345, 368, 802], "howev": [10, 18, 19, 20, 21, 22, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 58, 81, 243, 286, 287, 374, 377, 488, 497, 499, 576, 628, 630, 633, 681, 683, 797, 814, 815, 819, 820, 821, 823, 825, 826, 827, 828, 829, 831, 832, 833, 836, 837, 838, 840, 843, 845, 847, 848, 849, 850, 851, 856, 859, 865, 866, 872], "tend": 10, "outperform": 10, "proce": [10, 814, 815], "95933": 10, "9874": 10, "105807": 10, "70": [10, 39, 41, 53, 76, 77, 371, 393, 403, 549, 573, 633, 643, 678, 755, 856], "77": [10, 39, 43, 77, 589, 633, 643, 678, 755], "93": [10, 39, 53, 75, 77, 85, 194, 283, 356, 368, 541, 542, 627, 630, 736, 737], "wrap": [10, 18, 20, 27, 28, 30, 41, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 98, 99, 102, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 125, 127, 129, 130, 132, 134, 135, 136, 137, 139, 141, 142, 145, 149, 150, 151, 164, 168, 169, 176, 193, 210, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 296, 297, 299, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 318, 325, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 371, 374, 383, 390, 391, 392, 393, 395, 396, 397, 399, 403, 404, 405, 408, 409, 410, 414, 415, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 430, 432, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 503, 505, 506, 507, 508, 509, 510, 511, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 533, 534, 535, 536, 537, 540, 541, 542, 543, 544, 545, 548, 549, 552, 554, 556, 557, 558, 560, 561, 562, 564, 565, 567, 572, 573, 584, 587, 588, 589, 590, 591, 593, 595, 596, 607, 609, 611, 612, 615, 617, 618, 619, 620, 630, 646, 647, 648, 649, 650, 651, 654, 655, 656, 658, 662, 663, 664, 666, 667, 668, 669, 670, 671, 672, 673, 674, 679, 680, 681, 683, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 733, 734, 735, 736, 737, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 762, 763, 764, 769, 808, 818, 819, 820, 821, 823, 824, 825, 826, 828, 829, 832, 833, 836, 837, 840, 845, 847, 850, 851, 853, 859, 860, 862, 866, 867, 872, 873], "balanc": 10, "breast": 10, "cancer": 10, "53": [10, 22, 39, 58, 62, 75, 80, 155, 211, 241, 414, 614, 616, 626, 627, 631, 633, 638, 671, 733, 737], "return_x_i": 10, "x_test": 10, "y_test": 10, "test_siz": [10, 41], "76": [10, 20, 39, 52, 53, 66, 73, 75, 76, 85, 164, 218, 234, 282, 318, 365, 403, 626, 628, 633, 637, 643, 685, 722, 736, 755], "87": [10, 39, 78, 80, 230, 259, 383, 414, 519, 611, 628, 631, 772, 830], "171": [10, 58, 633, 671, 772], "90": [10, 39, 41, 43, 52, 53, 75, 76, 235, 275, 279, 356, 368, 374, 383, 486, 519, 628, 633, 643, 678, 755, 802, 856], "86": [10, 39, 62, 76, 85, 371, 383, 403, 519, 611, 631, 736, 737], "88": [10, 39, 78, 85, 108, 383, 519, 615, 622, 631, 633, 639, 643, 678, 737, 755], "perfectli": [10, 774, 857], "align": [10, 53, 70, 76, 371, 372, 407, 423, 632, 661, 802, 811, 815, 824, 837, 839, 845, 847, 853, 872], "gain": [10, 787, 816, 817, 819, 844, 849, 866], "combin": [10, 33, 53, 70, 76, 99, 371, 383, 405, 416, 518, 546, 547, 630, 633, 664, 673, 816, 820, 823, 824, 825, 827, 829, 833, 840, 850, 866], "build": [11, 15, 16, 18, 25, 27, 28, 31, 32, 33, 34, 39, 41, 46, 64, 70, 99, 641, 745, 746, 747, 748, 788, 789, 790, 808, 809, 815, 818, 824, 825, 833, 835, 844, 846, 849, 850, 851, 853, 856, 860, 864, 866, 868, 871, 872, 873], "timm": [11, 12, 16, 27, 28, 808, 860], "seen": [12, 14, 19, 25, 27, 372, 378, 431, 506, 553, 630, 797, 824, 825, 827, 829, 837, 840, 845, 847, 848, 855, 856, 872], "veri": [12, 20, 27, 28, 30, 52, 75, 270, 330, 347, 368, 628, 633, 681, 774, 813, 814, 815, 816, 822, 823, 825, 826, 827, 829, 830, 832, 833, 836, 837, 838, 840, 841, 843, 846, 848, 849, 850, 851, 855, 856, 862, 863, 864, 866, 867, 868, 871, 872, 873], "guid": [12, 25, 808, 809, 814, 815, 816, 822, 831, 837, 839, 872], "focu": [12, 25, 814, 835, 864, 865, 868, 873], "more": [12, 15, 16, 18, 19, 20, 23, 25, 27, 28, 29, 30, 39, 41, 42, 43, 47, 52, 53, 58, 60, 64, 69, 75, 76, 81, 83, 87, 106, 107, 108, 109, 110, 111, 112, 113, 114, 122, 149, 241, 243, 259, 274, 287, 291, 296, 297, 299, 359, 363, 369, 372, 373, 374, 420, 422, 434, 436, 439, 452, 458, 459, 460, 465, 486, 576, 622, 625, 626, 628, 630, 633, 635, 641, 667, 673, 676, 679, 681, 683, 690, 699, 706, 745, 746, 747, 748, 774, 784, 802, 808, 810, 813, 814, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 827, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 844, 845, 846, 847, 848, 849, 850, 851, 852, 860, 861, 864, 865, 866, 867, 868, 869, 872, 873], "involv": [12, 15, 16, 23, 25, 50, 73, 176, 219, 236, 243, 269, 274, 626, 628, 802, 809, 817, 818, 824, 825, 827, 838, 843, 850, 856, 866, 872], "develop": [12, 26, 27, 28, 808, 809, 810, 811, 812, 813, 814, 815, 816, 819, 822, 824, 830, 839, 841, 851, 853, 855, 856, 857, 859, 860, 864, 865, 866, 867, 868, 871, 872, 873], "usual": [12, 14, 44, 236, 269, 628, 801, 815, 819, 825, 837, 840, 843], "directli": [12, 14, 18, 21, 25, 27, 28, 31, 371, 372, 407, 431, 637, 726, 808, 814, 815, 816, 817, 819, 820, 823, 824, 825, 826, 828, 831, 833, 834, 836, 837, 838, 841, 842, 845, 847, 849, 850, 851, 852, 857, 859, 860, 861, 870, 871, 872], "case": [12, 14, 20, 22, 27, 28, 30, 31, 32, 33, 41, 48, 49, 53, 54, 60, 66, 70, 72, 76, 77, 83, 93, 94, 99, 124, 135, 162, 163, 190, 195, 196, 203, 211, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 232, 233, 234, 236, 237, 239, 241, 242, 243, 244, 250, 251, 252, 257, 258, 259, 260, 261, 264, 269, 272, 274, 278, 279, 280, 281, 282, 283, 286, 287, 289, 331, 332, 343, 345, 355, 368, 371, 373, 374, 377, 378, 384, 395, 396, 397, 417, 448, 458, 459, 460, 466, 468, 470, 471, 472, 475, 479, 485, 486, 492, 495, 497, 499, 506, 529, 546, 547, 551, 558, 572, 573, 574, 625, 626, 627, 628, 630, 633, 635, 637, 643, 681, 687, 698, 699, 700, 702, 704, 705, 707, 709, 717, 723, 756, 757, 758, 759, 760, 761, 762, 772, 773, 792, 802, 808, 812, 814, 815, 816, 819, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 836, 837, 838, 840, 841, 843, 845, 847, 849, 850, 851, 856, 859, 860, 861, 865, 869], "mlp": 12, "mixer": 12, "onli": [12, 14, 27, 28, 33, 39, 41, 43, 45, 48, 49, 52, 53, 58, 60, 62, 70, 72, 75, 76, 81, 83, 85, 93, 96, 98, 114, 134, 174, 175, 204, 264, 265, 270, 276, 308, 338, 345, 365, 368, 371, 372, 374, 378, 383, 394, 407, 417, 426, 431, 445, 447, 458, 459, 460, 470, 504, 505, 521, 535, 622, 625, 626, 627, 628, 630, 632, 633, 635, 637, 639, 640, 642, 643, 659, 673, 680, 683, 684, 699, 702, 714, 715, 721, 722, 724, 725, 726, 731, 732, 735, 736, 737, 740, 741, 751, 757, 760, 770, 772, 773, 775, 788, 792, 801, 806, 808, 809, 810, 814, 815, 816, 819, 820, 821, 822, 823, 824, 825, 826, 827, 829, 832, 833, 835, 836, 837, 838, 840, 841, 842, 843, 845, 847, 848, 849, 850, 851, 855, 859, 860, 865, 866, 867, 872, 873], "retriev": [12, 14, 18, 531, 553, 578, 630, 816, 837], "mlp_encod": [12, 27, 28, 808, 860], "create_model": [12, 27, 28, 808, 860], "mixer_b16_224": [12, 27, 28, 808, 860], "nois": [12, 14, 27, 28, 808, 859, 860], "randn": [12, 14, 27, 28, 374, 492, 808, 860], "tf_mlp_encod": [12, 27, 28], "output_torch": [12, 14], "output_tf": [12, 14], "output_dens": [12, 27, 28, 808], "dens": [12, 25, 27, 28, 312, 365, 788, 808], "unit": [12, 27, 28, 53, 69, 76, 93, 94, 106, 108, 109, 110, 111, 112, 113, 114, 291, 292, 295, 299, 301, 302, 305, 306, 307, 363, 500, 501, 622, 808, 815, 819, 825, 837, 838, 840, 851, 867, 870], "activ": [12, 25, 27, 28, 53, 54, 57, 68, 76, 80, 91, 106, 107, 108, 109, 110, 111, 112, 113, 114, 291, 292, 293, 295, 299, 300, 301, 302, 303, 304, 305, 306, 307, 591, 632, 659, 662, 787, 788, 806, 808, 815, 816, 825, 831, 841, 842, 849, 860, 866, 869], "mention": [12, 14, 27, 28, 33, 814, 815, 816, 820, 827, 832, 833, 836, 837, 840, 843, 856, 861, 866], "basic": [12, 14, 18, 21, 25, 27, 28, 31, 34, 374, 487, 808, 809, 814, 827, 840], "fulli": [12, 14, 16, 17, 20, 25, 27, 28, 41, 53, 76, 383, 525, 788, 808, 820, 825, 832, 835, 843, 845, 846, 847, 848, 849, 850, 851, 857, 861, 864, 865, 866, 872, 873], "trainabl": [12, 14, 18, 24, 25, 27, 28, 45, 785, 789, 790, 793, 808, 828, 846, 848, 849, 860, 861], "fine": [12, 14, 27, 28, 815, 816, 825, 827, 837, 847, 850, 872], "tune": [12, 14, 27, 28, 871, 872], "train": [12, 14, 25, 27, 28, 44, 53, 55, 57, 76, 78, 80, 96, 371, 372, 377, 395, 396, 397, 444, 497, 499, 611, 612, 617, 631, 632, 655, 657, 659, 662, 787, 788, 789, 790, 791, 808, 823, 826, 833, 848, 849, 850, 851, 857, 860, 864, 865, 870, 872, 873], "ground": [12, 14, 373, 449, 767, 769, 780, 812, 830, 837, 840, 855], "ret": [12, 14, 27, 28, 47, 48, 49, 50, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 98, 99, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 159, 160, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 205, 208, 209, 210, 211, 212, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 365, 368, 369, 370, 371, 372, 373, 374, 377, 378, 379, 381, 383, 384, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 403, 404, 405, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 425, 427, 432, 434, 437, 439, 442, 445, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 486, 488, 489, 490, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 568, 569, 570, 572, 573, 577, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 658, 659, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 717, 720, 721, 722, 723, 724, 725, 726, 731, 732, 733, 734, 735, 736, 737, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 769, 772, 773, 774, 775, 785, 790, 792, 797, 802, 804, 808, 825, 826, 828, 829, 835, 836, 837, 838, 841, 845, 850, 860], "op": [12, 18, 39, 784, 797, 806, 841, 845, 851], "eagertensor": [12, 18, 39, 797, 838], "readi": [12, 14, 19, 20, 21, 29, 30, 31, 32, 33, 34, 41, 43, 814, 815], "deepmind": [13, 857], "perceiverio": [13, 857], "backbon": [13, 41, 808, 845, 848], "TO": [13, 15, 26], "replac": [13, 15, 26, 42, 52, 53, 54, 60, 62, 70, 75, 76, 77, 83, 85, 128, 270, 306, 309, 363, 365, 374, 485, 488, 492, 572, 573, 577, 625, 628, 630, 635, 639, 695, 734, 772, 816, 822, 823, 825, 826, 834, 837, 840, 847, 850, 851, 856, 860, 873], "efficientnet": 14, "include_top": [14, 808], "eff_encod": [14, 808], "applic": [14, 16, 41, 43, 46, 53, 57, 76, 80, 96, 372, 447, 632, 633, 637, 643, 659, 662, 687, 720, 721, 722, 726, 727, 759, 761, 808, 815, 824, 825, 826, 834, 849, 863, 864, 866, 868, 870, 872], "efficientnet_v2": [14, 808], "efficientnetv2b0": [14, 808], "data": [14, 22, 23, 24, 25, 28, 33, 41, 43, 46, 47, 49, 52, 53, 54, 57, 58, 60, 62, 63, 64, 65, 66, 67, 69, 70, 72, 75, 76, 77, 80, 81, 83, 85, 86, 87, 88, 89, 90, 98, 99, 101, 102, 103, 106, 107, 108, 109, 110, 111, 112, 113, 114, 122, 123, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 150, 151, 153, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 177, 178, 179, 180, 182, 188, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 237, 239, 241, 242, 243, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 269, 271, 272, 273, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 296, 297, 298, 299, 308, 309, 310, 311, 312, 313, 314, 325, 326, 327, 328, 329, 331, 332, 333, 350, 355, 363, 365, 368, 371, 372, 374, 378, 382, 383, 386, 395, 396, 397, 413, 415, 417, 423, 425, 445, 463, 485, 488, 489, 491, 492, 504, 505, 506, 507, 508, 514, 518, 519, 520, 524, 527, 528, 545, 558, 560, 561, 564, 591, 622, 625, 627, 628, 630, 632, 633, 635, 637, 639, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 655, 656, 657, 663, 664, 665, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 687, 689, 690, 696, 699, 700, 702, 703, 705, 706, 710, 718, 735, 736, 737, 739, 740, 741, 743, 744, 749, 751, 753, 754, 756, 757, 758, 759, 760, 761, 762, 763, 764, 767, 769, 770, 772, 773, 774, 775, 780, 784, 787, 788, 789, 790, 794, 802, 806, 808, 815, 818, 819, 820, 821, 822, 823, 826, 828, 832, 833, 834, 836, 838, 841, 843, 845, 847, 853, 854, 856, 866, 867, 868, 870, 871, 872], "storag": [14, 41, 42, 848, 856], "googleapi": [14, 41, 42], "efficientnetv2": 14, "b0_notop": 14, "h5": [14, 70], "24274472": 14, "0u": 14, "torch_eff_encod": [14, 808], "modes_to_trac": 14, "1280": [14, 541, 630, 808], "state": [15, 26, 41, 57, 76, 80, 96, 183, 184, 185, 186, 187, 269, 371, 417, 598, 600, 603, 605, 606, 626, 628, 630, 632, 657, 658, 770, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 808, 812, 815, 822, 825, 826, 828, 829, 830, 831, 832, 837, 840, 844, 845, 846, 848, 856, 860, 872, 873], "api": [15, 20, 25, 26, 30, 43, 45, 52, 53, 58, 75, 76, 122, 123, 124, 126, 127, 128, 129, 131, 132, 133, 135, 138, 139, 140, 141, 142, 144, 145, 151, 161, 164, 174, 176, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 236, 237, 239, 241, 242, 243, 247, 248, 249, 250, 251, 252, 256, 258, 259, 260, 261, 263, 264, 265, 266, 269, 271, 272, 273, 274, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 331, 332, 334, 368, 371, 374, 383, 415, 488, 492, 518, 625, 626, 628, 633, 635, 640, 641, 642, 643, 644, 663, 664, 665, 666, 667, 669, 670, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 689, 690, 696, 698, 699, 700, 702, 703, 705, 706, 710, 740, 741, 743, 744, 745, 746, 747, 748, 749, 752, 756, 757, 758, 759, 760, 761, 762, 763, 764, 808, 812, 815, 816, 818, 820, 822, 825, 826, 827, 828, 829, 830, 832, 834, 836, 837, 838, 840, 843, 844, 846, 848, 851, 853, 854, 855, 862, 864, 866, 868, 871, 873], "welcom": [16, 42, 808, 809, 815, 816, 817, 839], "goal": [16, 41, 243, 628, 808, 814, 817, 856, 866, 872], "provid": [16, 18, 22, 25, 27, 28, 32, 33, 39, 45, 49, 53, 54, 58, 60, 63, 66, 67, 70, 72, 76, 77, 81, 83, 86, 89, 90, 118, 135, 137, 154, 155, 156, 157, 158, 166, 176, 188, 192, 205, 288, 371, 372, 374, 377, 383, 407, 415, 419, 424, 428, 441, 442, 446, 447, 464, 466, 475, 495, 497, 499, 528, 540, 572, 573, 624, 625, 626, 627, 628, 630, 632, 633, 635, 637, 640, 643, 644, 659, 675, 678, 689, 698, 699, 706, 718, 740, 760, 762, 763, 764, 773, 788, 792, 797, 798, 808, 814, 815, 816, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 831, 832, 833, 835, 836, 837, 838, 840, 841, 843, 847, 849, 851, 855, 859, 860, 861, 864, 865, 866, 867, 868, 869, 870, 873], "varieti": [16, 819, 824, 825, 826, 840, 842, 862, 864, 868, 869, 872, 873], "organ": [16, 820, 823, 833, 837, 839, 841, 853, 856], "main": [16, 28, 49, 53, 58, 76, 81, 128, 141, 142, 143, 309, 324, 325, 365, 372, 374, 423, 469, 625, 633, 666, 667, 687, 808, 811, 814, 815, 816, 817, 819, 822, 823, 830, 834, 836, 864, 866, 867, 872], "exactli": [16, 20, 30, 39, 40, 44, 286, 628, 814, 823, 824, 825, 826, 827, 829, 840, 843, 855, 857], "rush": [16, 857], "jump": [16, 838], "straight": [16, 808, 824, 837, 840, 847], "quickstart": 16, "introduct": [16, 18, 25, 27, 28, 866], "point": [16, 25, 50, 52, 53, 58, 62, 64, 66, 73, 75, 76, 81, 85, 89, 122, 123, 124, 126, 128, 131, 138, 139, 144, 148, 161, 165, 169, 176, 216, 217, 218, 219, 221, 222, 223, 224, 225, 232, 233, 234, 236, 237, 239, 241, 242, 243, 249, 250, 251, 252, 257, 258, 259, 260, 261, 269, 271, 272, 274, 276, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 308, 309, 311, 331, 332, 349, 350, 353, 355, 365, 368, 371, 372, 373, 378, 383, 386, 395, 396, 397, 415, 425, 445, 449, 504, 505, 506, 507, 508, 518, 519, 520, 528, 623, 625, 626, 628, 633, 639, 640, 641, 642, 643, 663, 665, 668, 669, 670, 672, 674, 675, 676, 679, 680, 681, 682, 683, 684, 685, 687, 690, 736, 737, 743, 745, 746, 747, 748, 751, 753, 754, 756, 757, 758, 759, 760, 761, 762, 797, 798, 806, 808, 812, 814, 815, 816, 819, 820, 822, 824, 825, 827, 828, 830, 832, 836, 837, 840, 841, 843, 845, 847, 848, 857, 859, 872], "those": [16, 40, 41, 58, 60, 70, 76, 81, 83, 122, 175, 236, 269, 489, 610, 625, 626, 628, 630, 633, 635, 637, 640, 680, 683, 695, 716, 743, 811, 814, 815, 816, 817, 820, 823, 824, 825, 834, 836, 837, 838, 840, 843, 855, 863], "who": [16, 811, 817, 818, 829, 844, 851, 866, 868, 874], "deeper": [16, 18, 28, 48, 637, 725, 726, 816, 818, 840, 844, 855], "showcas": [16, 808], "real": [16, 24, 52, 53, 66, 75, 76, 89, 98, 108, 111, 114, 138, 139, 216, 217, 218, 219, 221, 222, 223, 224, 225, 234, 236, 237, 239, 241, 243, 247, 248, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 266, 269, 271, 272, 274, 278, 279, 280, 282, 283, 284, 285, 286, 287, 289, 290, 331, 332, 338, 339, 340, 350, 368, 371, 372, 394, 415, 416, 425, 426, 622, 625, 628, 633, 640, 643, 668, 669, 670, 674, 681, 683, 684, 687, 690, 743, 756, 758, 759, 760, 761, 823, 868], "world": [16, 24, 816, 868], "whether": [16, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 62, 66, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 94, 99, 106, 107, 108, 109, 110, 111, 112, 113, 114, 121, 123, 124, 130, 132, 137, 139, 145, 148, 149, 151, 154, 155, 156, 157, 158, 159, 162, 163, 164, 166, 167, 168, 169, 171, 172, 173, 174, 176, 188, 192, 193, 195, 196, 198, 200, 203, 204, 206, 209, 210, 212, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 247, 248, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 299, 300, 301, 302, 303, 305, 306, 307, 309, 325, 330, 331, 332, 333, 334, 336, 338, 346, 347, 353, 355, 357, 358, 359, 365, 368, 371, 372, 373, 374, 383, 390, 391, 392, 394, 395, 396, 397, 413, 415, 417, 419, 434, 436, 442, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 458, 459, 460, 464, 465, 466, 468, 470, 471, 472, 475, 479, 486, 488, 489, 490, 492, 495, 497, 499, 500, 501, 503, 505, 518, 519, 520, 521, 530, 533, 534, 536, 537, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 551, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 568, 572, 573, 574, 575, 577, 580, 581, 583, 584, 586, 587, 588, 589, 591, 593, 595, 596, 603, 604, 607, 609, 612, 613, 615, 617, 618, 619, 620, 622, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 639, 643, 644, 646, 647, 648, 649, 655, 656, 657, 658, 659, 662, 663, 664, 669, 670, 671, 672, 673, 674, 676, 678, 680, 681, 682, 687, 692, 693, 694, 695, 698, 699, 700, 702, 703, 704, 705, 706, 707, 709, 710, 711, 712, 713, 714, 715, 720, 721, 722, 724, 725, 726, 727, 731, 732, 734, 735, 736, 737, 739, 742, 745, 746, 747, 748, 749, 753, 754, 757, 759, 760, 762, 763, 764, 767, 769, 772, 784, 785, 788, 789, 790, 791, 792, 801, 808, 809, 814, 815, 820, 823, 825, 827, 832, 836, 837, 840, 842, 843, 859, 860], "beginn": [16, 809, 866], "advanc": [16, 39, 815, 817, 865], "got": [16, 39, 829], "cover": [16, 27, 53, 76, 371, 408, 409, 410, 814, 819, 820, 822, 825, 827, 828, 833, 834, 840, 843, 844], "write": [16, 17, 27, 28, 39, 43, 47, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 93, 98, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 137, 138, 139, 140, 141, 142, 144, 145, 148, 150, 210, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 325, 329, 331, 332, 333, 334, 335, 336, 337, 339, 340, 341, 342, 343, 344, 346, 348, 349, 350, 351, 354, 355, 356, 363, 365, 368, 371, 372, 373, 374, 377, 378, 379, 381, 383, 384, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 403, 404, 405, 407, 408, 409, 410, 413, 415, 416, 419, 420, 422, 423, 431, 432, 434, 437, 438, 439, 440, 446, 449, 450, 451, 452, 454, 455, 464, 465, 468, 469, 470, 471, 472, 473, 474, 477, 478, 479, 481, 482, 483, 484, 486, 487, 488, 489, 490, 492, 493, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 511, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 536, 537, 541, 542, 543, 548, 549, 558, 572, 573, 611, 612, 615, 617, 618, 619, 620, 622, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 659, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 673, 674, 676, 677, 678, 679, 680, 682, 684, 685, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 705, 706, 707, 708, 710, 733, 734, 735, 736, 737, 739, 741, 742, 744, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 770, 808, 813, 814, 816, 818, 819, 821, 822, 824, 825, 827, 828, 829, 833, 836, 838, 841, 845, 847, 850, 857, 866, 873], "familiar": [16, 17, 18, 808, 814, 815], "concept": [16, 17, 18], "agnost": [16, 17, 18, 19, 27, 28, 29, 33, 39, 808, 820, 825, 832, 845, 847, 850, 851, 872, 873], "unifi": [16, 17, 18, 20, 21, 27, 30, 31, 35, 42, 70, 209, 627, 817, 818, 819, 820, 824, 825, 829, 834, 835, 837, 843, 845, 851, 854, 856, 858, 860, 862, 863, 864, 866, 870, 873], "alongsid": [16, 17, 18, 19, 29, 632, 659, 856], "turn": [16, 17, 20, 30, 57, 80, 93, 94, 395, 396, 397, 632, 655, 788, 815, 822, 823, 826, 827, 837, 840, 857], "wrapper": [16, 17, 20, 53, 76, 294, 780, 820, 822, 823, 825, 829, 833, 836, 837, 840, 847, 853, 862, 866], "unus": [16, 17, 20, 827, 836], "part": [16, 17, 20, 49, 52, 53, 75, 76, 81, 98, 108, 111, 114, 141, 142, 143, 249, 253, 276, 324, 325, 351, 365, 368, 371, 372, 374, 383, 415, 426, 480, 528, 622, 625, 628, 633, 669, 670, 769, 808, 814, 815, 816, 817, 819, 822, 825, 831, 833, 836, 837, 840, 841, 843, 845, 846, 850, 851, 859, 860, 861, 864, 866, 871, 872, 873], "lazi": [16, 17, 20, 23, 30, 33, 34, 45], "eager": [16, 17, 20, 23, 25, 30, 33, 34, 45, 806, 823, 851, 866], "understand": [16, 17, 18, 22, 39, 45, 812, 813, 814, 815, 816, 818, 819, 822, 827, 828, 832, 838, 839, 844, 857, 862, 872], "decor": [16, 17, 22, 24, 25, 33, 45, 535, 630, 772, 774, 780, 812, 819, 820, 823, 825, 826, 830, 833, 836, 837, 838, 843], "kornia": [16, 17, 24, 27, 28, 41, 45, 808, 860], "roundup": 18, "over": [18, 25, 28, 30, 41, 53, 58, 66, 67, 68, 73, 76, 80, 81, 89, 90, 91, 93, 118, 316, 317, 331, 332, 345, 352, 365, 368, 371, 372, 373, 374, 381, 383, 385, 386, 387, 388, 391, 400, 405, 409, 413, 414, 415, 416, 417, 418, 440, 448, 457, 470, 485, 488, 489, 492, 511, 521, 527, 576, 610, 624, 630, 633, 638, 639, 643, 644, 664, 674, 685, 687, 689, 690, 733, 737, 756, 757, 758, 759, 760, 761, 762, 763, 764, 788, 791, 797, 801, 808, 815, 816, 821, 827, 828, 835, 836, 838, 841, 845, 847, 851, 855, 857, 864, 866], "indep": [18, 27], "futur": [18, 25, 27, 41, 633, 669, 670, 808, 815, 816, 817, 824, 825, 840, 841, 843, 847, 851, 855, 857, 872], "proof": [18, 27], "delv": [18, 28, 808], "theori": [18, 810, 822], "deep": [18, 25, 27, 39, 70, 541, 630, 808, 809, 810, 813, 814, 816, 819, 822, 823, 825, 831, 835, 838, 844, 847, 848, 855, 864, 866, 869, 870, 872, 873], "esenti": [18, 27], "abstract": [18, 27, 28, 787, 792, 808, 823, 825, 836, 837, 840, 843, 849, 855, 864, 866, 868, 869, 873], "specif": [18, 19, 24, 25, 27, 28, 29, 31, 33, 41, 51, 53, 54, 74, 76, 77, 176, 207, 210, 243, 264, 265, 274, 318, 331, 332, 365, 368, 374, 378, 488, 508, 541, 542, 543, 569, 626, 627, 628, 630, 633, 635, 636, 639, 642, 643, 669, 670, 685, 706, 711, 712, 713, 734, 751, 756, 757, 758, 760, 767, 769, 789, 790, 797, 798, 804, 806, 808, 811, 812, 814, 815, 816, 819, 820, 821, 822, 823, 825, 826, 829, 831, 832, 833, 836, 837, 838, 839, 840, 841, 843, 845, 846, 847, 849, 850, 851, 852, 853, 855, 859, 860, 861, 862, 864, 865, 867, 868, 869, 873], "quirk": [18, 27], "perk": [18, 27, 808, 820, 823], "under": [18, 27, 28, 53, 373, 452, 453, 801, 808, 814, 815, 818, 819, 826, 827, 828, 831, 837, 838, 840, 843, 844, 845, 848, 850, 851, 859, 860, 866, 869, 873], "hood": [18, 27, 28, 808, 818, 826, 827, 831, 837, 840, 843, 844, 845, 848, 850, 859, 860, 873], "appropi": 18, "string": [18, 27, 28, 43, 53, 54, 57, 70, 76, 80, 146, 147, 159, 166, 188, 189, 190, 191, 192, 194, 203, 210, 211, 215, 371, 372, 374, 414, 418, 426, 480, 491, 520, 539, 626, 627, 630, 632, 633, 645, 646, 647, 648, 650, 652, 654, 670, 767, 769, 773, 801, 802, 821, 822, 824, 825, 826, 829, 837, 845, 848], "simplest": [18, 815, 827, 840, 843], "interact": [18, 27, 42, 45, 814, 865, 866, 871], "submodul": [18, 27, 41, 43, 98, 99, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 784, 785, 787, 788, 790, 791, 792, 793, 814, 815, 816, 819, 822, 824, 826, 830, 833, 834, 840, 844, 845, 849, 853], "ones": [18, 25, 27, 39, 45, 49, 53, 55, 57, 62, 70, 72, 76, 80, 85, 128, 132, 137, 139, 145, 195, 196, 232, 309, 365, 383, 527, 611, 625, 627, 628, 631, 632, 650, 651, 735, 736, 737, 773, 808, 814, 820, 824, 827, 832, 833, 839, 840, 847, 848, 866], "likewis": [18, 23, 27, 34, 808, 816, 823, 825, 828, 832, 833, 837, 843, 848, 859, 860, 872], "nativearrai": [18, 27, 28, 48, 49, 50, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 64, 66, 69, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 98, 102, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 118, 119, 121, 123, 124, 125, 127, 132, 133, 134, 135, 136, 137, 139, 141, 142, 145, 148, 149, 150, 151, 154, 155, 156, 157, 158, 159, 161, 164, 167, 168, 169, 171, 173, 175, 176, 182, 192, 193, 209, 210, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 309, 310, 313, 314, 318, 325, 326, 327, 328, 329, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 363, 365, 368, 369, 371, 372, 373, 374, 377, 378, 379, 381, 383, 385, 386, 387, 388, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 403, 404, 405, 407, 408, 409, 410, 411, 413, 414, 415, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 463, 464, 465, 466, 468, 469, 470, 471, 472, 474, 475, 477, 478, 479, 480, 481, 482, 483, 484, 486, 487, 488, 489, 490, 492, 493, 494, 495, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 518, 519, 520, 521, 522, 530, 533, 534, 536, 537, 541, 542, 543, 545, 548, 549, 550, 551, 552, 554, 556, 557, 558, 561, 564, 565, 567, 572, 573, 574, 577, 586, 587, 588, 589, 590, 591, 593, 595, 596, 598, 609, 611, 612, 613, 615, 617, 618, 619, 620, 622, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 658, 659, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 714, 715, 716, 717, 721, 722, 723, 726, 731, 732, 733, 734, 735, 736, 737, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 793, 820, 823, 827, 829, 832, 833, 834, 836, 837, 841, 842, 845, 847, 853], "alia": [18, 27, 331, 332, 368, 623, 814, 837, 858, 861], "select": [18, 27, 32, 45, 53, 66, 76, 89, 372, 374, 383, 426, 439, 488, 489, 492, 519, 520, 643, 753, 754, 814, 815, 816, 824, 830, 836, 840, 845, 847, 850, 851, 866, 869, 870], "lastli": [18, 27, 820], "contain": [18, 27, 28, 42, 47, 48, 49, 50, 52, 53, 54, 57, 58, 59, 60, 63, 64, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 94, 98, 106, 107, 108, 109, 110, 111, 112, 113, 114, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 148, 149, 150, 151, 159, 161, 162, 163, 164, 167, 168, 169, 171, 173, 176, 193, 195, 196, 197, 202, 210, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 318, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 363, 365, 368, 370, 371, 372, 373, 374, 377, 383, 385, 386, 387, 388, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 403, 404, 405, 407, 408, 409, 410, 411, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 432, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 507, 508, 509, 510, 511, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 536, 537, 541, 542, 543, 544, 545, 546, 547, 548, 549, 552, 553, 554, 556, 557, 558, 560, 561, 562, 564, 565, 567, 572, 573, 577, 580, 582, 587, 588, 589, 590, 591, 593, 595, 596, 603, 609, 610, 611, 612, 613, 615, 617, 618, 619, 620, 622, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 658, 659, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 717, 721, 722, 723, 726, 727, 731, 732, 733, 734, 735, 736, 737, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 767, 769, 772, 779, 780, 788, 789, 790, 792, 793, 797, 801, 802, 806, 808, 810, 812, 814, 815, 818, 819, 820, 821, 822, 824, 825, 827, 828, 830, 832, 833, 834, 835, 836, 838, 840, 842, 843, 844, 845, 846, 849, 851, 852, 853, 855, 859, 866, 867, 872], "subclass": [18, 27, 28, 834, 837, 843, 860], "dict": [18, 27, 28, 41, 45, 48, 54, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 99, 106, 107, 108, 109, 110, 111, 112, 113, 114, 119, 121, 130, 132, 137, 139, 145, 149, 151, 162, 163, 164, 168, 169, 176, 192, 195, 196, 210, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 247, 248, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 305, 306, 307, 309, 321, 330, 331, 332, 333, 334, 336, 338, 346, 347, 353, 355, 357, 358, 359, 365, 374, 394, 395, 396, 397, 415, 448, 449, 450, 451, 452, 453, 454, 455, 458, 459, 460, 464, 465, 480, 486, 488, 489, 490, 492, 497, 499, 500, 501, 503, 505, 518, 519, 520, 521, 530, 531, 533, 534, 536, 537, 541, 542, 543, 544, 545, 546, 547, 548, 549, 552, 554, 556, 557, 558, 560, 561, 564, 568, 572, 573, 587, 588, 589, 591, 593, 595, 596, 609, 620, 624, 626, 627, 630, 637, 646, 647, 648, 649, 655, 656, 662, 663, 664, 669, 670, 671, 672, 673, 674, 676, 678, 680, 681, 687, 692, 693, 694, 695, 699, 702, 703, 704, 705, 706, 709, 710, 714, 715, 717, 720, 721, 722, 723, 725, 726, 727, 731, 732, 734, 735, 736, 737, 739, 742, 745, 746, 747, 748, 749, 753, 754, 757, 759, 760, 762, 763, 764, 769, 770, 785, 788, 790, 797, 802, 820, 823, 848, 849, 853, 859, 860, 861], "recurs": [18, 27, 28, 41, 43, 48, 70, 71, 162, 163, 195, 196, 372, 444, 546, 547, 553, 626, 627, 630, 637, 714, 715, 718, 724, 725, 726, 767, 815, 819, 822, 823, 830, 833, 836, 849, 851], "fashion": [18, 774, 840, 860], "native_arrai": [18, 27, 28, 49, 50, 52, 72, 74, 75, 76, 77, 81, 88, 106, 109, 132, 135, 137, 139, 145, 148, 149, 150, 151, 159, 164, 171, 193, 202, 210, 226, 230, 235, 236, 237, 239, 243, 247, 255, 256, 264, 269, 272, 275, 278, 283, 331, 332, 359, 368, 373, 374, 454, 480, 486, 490, 530, 533, 560, 561, 564, 595, 622, 625, 626, 627, 628, 630, 632, 633, 634, 635, 639, 640, 643, 644, 646, 647, 654, 662, 665, 669, 670, 675, 676, 680, 684, 685, 687, 690, 692, 694, 695, 702, 734, 743, 752, 758, 761, 763, 769, 779, 797, 812, 830, 838, 840], "data_class": [18, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 391, 392, 541, 545, 683, 708], "low": [18, 27, 30, 46, 53, 57, 62, 76, 80, 85, 371, 414, 418, 632, 639, 645, 646, 647, 648, 650, 652, 654, 735, 737, 774, 823, 829, 836, 837, 843, 845, 862, 864, 866, 867, 868, 870, 872], "level": [18, 27, 28, 30, 53, 76, 77, 372, 444, 533, 802, 806, 808, 809, 814, 815, 816, 817, 823, 825, 829, 833, 835, 836, 837, 839, 842, 843, 844, 845, 848, 849, 850, 851, 853, 857, 862, 863, 864, 865, 866, 867, 868, 870, 871, 872, 873, 874], "c": [18, 27, 33, 42, 43, 49, 53, 54, 55, 57, 60, 66, 72, 73, 75, 76, 77, 78, 80, 81, 83, 87, 89, 93, 94, 112, 123, 124, 134, 137, 161, 164, 219, 230, 236, 237, 257, 258, 260, 269, 272, 280, 287, 371, 372, 374, 377, 383, 385, 386, 387, 388, 399, 404, 420, 422, 424, 425, 427, 439, 458, 459, 460, 470, 488, 492, 497, 498, 499, 502, 520, 533, 541, 542, 543, 544, 552, 556, 557, 587, 596, 611, 612, 615, 617, 618, 619, 622, 625, 626, 628, 630, 631, 632, 633, 635, 637, 640, 641, 643, 646, 647, 648, 649, 650, 651, 653, 668, 670, 672, 702, 706, 714, 717, 721, 722, 723, 725, 726, 731, 732, 743, 748, 754, 755, 760, 762, 791, 801, 802, 809, 815, 818, 821, 822, 823, 827, 833, 835, 844, 845, 846, 848, 851, 853, 854, 856, 857, 860, 862, 866, 870, 871, 873], "fundament": [18, 27, 824, 837, 843, 845, 855, 866], "common": [18, 21, 27, 31, 52, 53, 70, 75, 175, 246, 254, 335, 342, 368, 626, 628, 809, 812, 814, 815, 822, 825, 826, 827, 833, 834, 837, 841, 843, 851, 855, 863, 866, 873], "signatur": [18, 27, 374, 383, 480, 518, 825, 826, 827, 828, 832, 836, 840, 841, 843, 856, 863, 872], "matmul": [18, 27, 28, 44, 58, 81, 372, 442, 610, 630, 633, 683, 821, 840, 841, 845], "to_n": [18, 27, 28, 39, 48, 71, 845], "jaxlib": [18, 24, 42, 797, 815, 820, 825, 826, 832, 841, 845, 847], "xla_extens": [18, 24, 797, 820, 825, 826, 832, 841, 845, 847], "arrayimpl": [18, 24, 797], "abov": [18, 23, 27, 28, 33, 34, 49, 52, 53, 58, 62, 69, 75, 76, 81, 85, 94, 114, 122, 123, 124, 126, 127, 128, 129, 131, 132, 133, 134, 135, 138, 139, 140, 141, 142, 143, 144, 145, 151, 167, 171, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 236, 237, 239, 241, 242, 243, 247, 248, 249, 250, 251, 252, 253, 256, 258, 259, 260, 261, 263, 264, 265, 266, 269, 271, 272, 273, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 307, 309, 324, 325, 331, 332, 334, 337, 363, 365, 368, 371, 372, 374, 383, 390, 391, 392, 393, 395, 396, 397, 403, 405, 408, 409, 410, 415, 416, 417, 425, 426, 480, 488, 492, 518, 521, 548, 552, 554, 556, 558, 587, 596, 620, 622, 625, 626, 628, 630, 631, 632, 633, 635, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 654, 655, 656, 659, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 687, 689, 690, 691, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 733, 735, 740, 741, 743, 744, 745, 746, 747, 748, 749, 752, 756, 757, 758, 759, 760, 761, 762, 763, 764, 808, 812, 814, 815, 816, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 835, 836, 837, 838, 840, 843, 845, 847, 848, 849, 850, 866, 871], "why": [18, 808, 816, 836, 847, 854, 856], "underli": [18, 27, 28, 39, 53, 60, 76, 83, 96, 226, 229, 231, 266, 373, 374, 453, 470, 628, 633, 635, 681, 702, 823, 836, 843, 859, 866], "disabl": [18, 27, 53, 76, 374, 488, 790, 806, 822], "array_mod": [18, 27, 574, 598, 630, 842], "set_array_mod": [18, 27, 598, 630, 842], "composit": [18, 27, 162, 163, 195, 196, 288, 372, 432, 546, 547, 626, 627, 628, 630, 773, 775, 814, 818, 820, 821, 823, 825, 826, 834, 836, 837, 838, 840, 843, 845, 849, 850, 851, 853, 859, 867], "ultim": [18, 27, 859], "sigmoid": [18, 27, 28, 39, 47, 53, 69, 76, 297, 363, 378, 504, 622, 784, 845, 848, 849], "z": [18, 27, 28, 40, 41, 49, 52, 53, 54, 58, 59, 62, 64, 66, 72, 75, 76, 77, 81, 82, 83, 85, 89, 98, 99, 133, 134, 136, 137, 197, 219, 220, 224, 226, 229, 231, 236, 247, 248, 251, 252, 253, 255, 256, 261, 263, 265, 266, 267, 268, 276, 285, 296, 297, 331, 332, 334, 363, 368, 373, 383, 449, 451, 452, 453, 454, 455, 461, 465, 476, 517, 518, 521, 528, 533, 545, 548, 549, 556, 557, 573, 586, 588, 589, 597, 610, 625, 627, 628, 630, 633, 634, 635, 637, 639, 640, 641, 643, 664, 673, 678, 679, 683, 690, 692, 693, 694, 695, 717, 721, 723, 731, 735, 736, 737, 740, 745, 755, 756, 758, 759, 760, 787, 808, 821, 823, 826, 827, 845, 847, 859], "divid": [18, 23, 27, 28, 44, 52, 53, 54, 60, 70, 75, 76, 83, 98, 99, 243, 377, 450, 497, 498, 499, 502, 588, 628, 630, 635, 704, 820, 823, 827, 831, 840], "exp": [18, 27, 28, 52, 53, 75, 76, 112, 114, 241, 261, 274, 297, 363, 371, 373, 399, 404, 453, 622, 628, 633, 681, 835, 837], "high": [18, 27, 28, 46, 53, 57, 62, 76, 80, 85, 371, 414, 418, 581, 630, 632, 639, 645, 646, 647, 648, 650, 652, 654, 735, 737, 774, 811, 814, 829, 835, 837, 848, 853, 857, 862, 863, 864, 865, 866, 870, 872, 873], "network": [18, 25, 27, 28, 39, 41, 46, 632, 656, 784, 787, 788, 808, 823, 833, 845, 849, 856, 860, 862, 864, 865, 866, 870, 872, 873], "entir": [18, 27, 28, 30, 43, 53, 66, 67, 70, 76, 77, 89, 90, 209, 239, 241, 281, 282, 331, 332, 368, 371, 374, 383, 395, 396, 397, 480, 521, 554, 627, 628, 643, 644, 756, 757, 758, 759, 760, 761, 762, 763, 764, 788, 802, 814, 815, 816, 819, 820, 823, 825, 827, 829, 836, 837, 838, 840, 843, 845, 848, 849, 850, 851, 856, 857, 860, 866, 872, 873], "further": [18, 70, 99, 774, 816, 819, 820, 824, 827, 829, 832, 833, 836, 837, 839, 840, 844, 845, 848, 849, 856, 857, 871, 872], "congratul": [18, 24], "There": [18, 25, 28, 33, 93, 364, 366, 367, 375, 376, 380, 774, 808, 814, 815, 816, 819, 820, 822, 823, 825, 826, 827, 829, 831, 833, 835, 837, 838, 842, 845, 848, 851, 855, 859, 867, 868, 872, 873], "come": [18, 41, 811, 814, 815, 816, 820, 824, 837, 842, 843, 849, 853, 866], "independ": [18, 28, 53, 62, 76, 85, 219, 236, 269, 279, 377, 378, 502, 504, 628, 633, 639, 664, 682, 734, 808, 819, 825, 827, 834, 845, 850, 860, 864], "good": [18, 27, 28, 808, 813, 814, 815, 816, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 838, 840, 841, 843, 845, 846, 849], "foundat": [18, 856, 869], "power": [18, 27, 28, 52, 53, 54, 58, 75, 76, 77, 81, 98, 99, 230, 239, 240, 274, 329, 342, 365, 368, 371, 419, 578, 589, 601, 628, 630, 633, 637, 675, 688, 720, 787, 842, 847, 848, 849, 866, 868, 872], "defin": [19, 25, 27, 28, 29, 49, 53, 54, 58, 72, 76, 77, 81, 96, 112, 137, 141, 142, 143, 219, 236, 243, 269, 270, 278, 280, 283, 296, 300, 304, 310, 313, 314, 315, 324, 325, 326, 327, 328, 331, 332, 334, 363, 365, 368, 371, 372, 374, 383, 407, 424, 480, 486, 521, 556, 557, 577, 622, 625, 628, 630, 632, 633, 643, 657, 664, 669, 670, 682, 756, 757, 758, 760, 808, 814, 815, 820, 821, 824, 825, 828, 832, 835, 837, 838, 840, 841, 847, 849, 851, 853, 861, 863, 864, 865, 866, 867, 870, 872, 873], "div": [19, 20, 21, 22, 23, 27, 28, 29, 30, 31, 32, 33, 34, 861], "sub": [19, 20, 21, 22, 23, 27, 28, 29, 30, 31, 32, 33, 34, 53, 58, 60, 70, 71, 75, 76, 77, 81, 83, 99, 268, 372, 374, 383, 426, 466, 475, 495, 524, 525, 553, 630, 633, 635, 636, 667, 687, 704, 711, 712, 713, 814, 816, 818, 823, 829, 837, 838, 840, 847, 848, 849, 861, 862], "By": [19, 39, 46, 53, 59, 60, 66, 67, 76, 82, 83, 89, 90, 283, 329, 331, 332, 345, 352, 365, 368, 371, 373, 374, 381, 383, 394, 452, 453, 488, 492, 511, 518, 521, 576, 628, 630, 633, 634, 635, 643, 644, 664, 689, 692, 701, 753, 756, 757, 758, 759, 760, 761, 762, 763, 764, 815, 821, 825, 827, 829, 833, 835, 836, 837, 845, 849, 850, 859], "with_numpi": 19, "seed": [19, 22, 23, 43, 44, 53, 57, 62, 64, 70, 76, 80, 85, 319, 320, 321, 322, 323, 365, 372, 378, 430, 441, 447, 504, 505, 506, 507, 508, 632, 639, 641, 655, 734, 735, 736, 737, 739, 745, 780, 785, 787, 802, 834, 838, 840], "123": [19, 72, 73, 76, 132, 164, 452, 544, 625, 630, 802, 840], "reproduc": [19, 44, 57, 80, 632, 655, 772, 773, 774, 775, 780, 812, 819, 830], "uniform": [19, 20, 21, 22, 23, 27, 28, 29, 30, 32, 33, 34, 41, 53, 62, 76, 85, 383, 521, 639, 734, 735, 737, 787, 808, 839, 849, 860, 861, 873], "x_": [19, 29, 94, 280, 628, 861], "66391283": 19, "12516928": 19, "38367081": 19, "03102401": 19, "76419425": 19, "52797794": 19, "90346956": 19, "61316347": 19, "27585283": 19, "66309303": 19, "compat": [19, 25, 29, 33, 39, 46, 52, 53, 58, 60, 63, 66, 67, 75, 76, 81, 83, 86, 89, 90, 98, 99, 150, 219, 224, 226, 228, 229, 230, 231, 236, 237, 243, 247, 248, 255, 256, 261, 263, 265, 266, 269, 272, 274, 278, 285, 290, 331, 332, 368, 626, 628, 633, 635, 640, 643, 644, 664, 676, 679, 682, 685, 689, 690, 702, 741, 756, 757, 758, 759, 760, 761, 762, 763, 764, 806, 808, 815, 821, 832, 837, 838, 841, 845, 851, 856], "sever": [19, 20, 29, 30, 32, 33, 34, 53, 76, 93, 371, 372, 385, 386, 387, 388, 440, 772, 815, 816, 841, 851, 864, 870], "pro": [19, 20, 21, 29, 30, 31, 32, 33, 34], "pick": [20, 30, 787], "off": [20, 30, 57, 58, 80, 81, 395, 396, 397, 632, 633, 655, 667, 687, 787, 788, 815, 830, 844, 857, 859, 872], "last": [20, 25, 27, 30, 49, 53, 57, 58, 59, 60, 63, 65, 66, 67, 70, 72, 76, 80, 81, 82, 83, 88, 89, 90, 94, 98, 133, 134, 137, 192, 309, 337, 365, 368, 371, 372, 373, 374, 381, 383, 400, 405, 415, 416, 417, 428, 452, 470, 480, 482, 488, 492, 511, 519, 520, 625, 627, 632, 633, 634, 635, 640, 642, 643, 644, 658, 659, 664, 667, 678, 687, 689, 693, 694, 696, 699, 702, 703, 704, 706, 740, 741, 749, 751, 752, 753, 754, 763, 764, 788, 797, 808, 816, 819, 821, 822, 825, 827, 836, 838, 840, 843, 845, 851, 857, 860, 866], "purpos": [20, 27, 28, 30, 41, 43, 143, 241, 259, 324, 365, 625, 628, 633, 681, 816, 818, 820, 823, 824, 826, 827, 829, 832, 833, 834, 837, 839, 840, 843, 844, 847, 853, 865, 867, 870, 871, 872], "illustr": [20, 30, 821, 845], "trigger": [20, 30, 790, 814, 831], "unif": [20, 22, 23, 30, 32, 809, 847, 856, 862, 872], "detail": [20, 30, 43, 47, 52, 53, 58, 60, 64, 69, 75, 76, 77, 81, 83, 87, 106, 107, 108, 109, 110, 111, 112, 113, 114, 129, 140, 287, 291, 296, 297, 299, 363, 372, 422, 465, 544, 622, 625, 628, 641, 667, 673, 679, 683, 706, 745, 746, 747, 748, 784, 808, 814, 816, 819, 821, 822, 823, 824, 831, 832, 833, 834, 837, 838, 839, 840, 841, 842, 845, 847, 848, 849, 868, 872], "55563945": 20, "65538704": 20, "14150524": 20, "46951997": 20, "30220294": 20, "14739668": 20, "57017946": 20, "91962677": 20, "51029003": 20, "59644395": 20, "arbitrari": [20, 30, 49, 50, 53, 70, 73, 76, 135, 149, 176, 318, 373, 450, 458, 459, 460, 613, 625, 626, 631, 832, 833, 835, 836, 837, 840, 849, 851, 859, 861, 867, 872], "constitu": [20, 30, 70, 850], "due": [20, 27, 28, 30, 44, 46, 269, 279, 374, 488, 628, 815, 819, 824, 829, 836, 837, 856, 859, 860, 866], "manner": [20, 28, 30, 40, 48, 71, 637, 726, 815, 825, 826, 828, 833, 837, 841, 848, 851, 855, 862, 864, 872, 873], "non": [20, 30, 50, 52, 53, 58, 62, 63, 66, 67, 73, 75, 76, 81, 85, 86, 89, 90, 130, 148, 166, 175, 244, 264, 265, 270, 331, 332, 336, 343, 356, 368, 371, 372, 374, 383, 415, 426, 430, 436, 459, 460, 521, 524, 625, 626, 628, 633, 637, 639, 640, 643, 644, 664, 665, 674, 676, 683, 685, 689, 690, 727, 736, 740, 741, 742, 743, 756, 757, 758, 759, 760, 762, 763, 764, 772, 787, 789, 790, 792, 820, 823, 827, 845, 859, 860, 861, 866], "5556394": 20, "655387": 20, "1415051": 20, "4695197": 20, "3022028": 20, "1473966": 20, "5701794": 20, "91962665": 20, "51028997": 20, "5964439": 20, "assess": [20, 30, 814, 843], "985": 20, "000": [20, 75, 270, 772, 812, 824, 830], "69": [20, 39, 46, 52, 78, 85, 217, 259, 371, 393, 403, 615, 628, 631, 633, 674, 675, 736, 840, 848], "On": [20, 27, 28, 815, 825, 826, 831, 837, 840, 843, 846, 850], "hand": [20, 52, 372, 442, 772, 808, 819, 825, 826, 831, 833, 840, 851], "singl": [20, 30, 39, 44, 52, 62, 70, 75, 85, 94, 288, 347, 368, 372, 378, 439, 505, 596, 609, 613, 628, 630, 631, 632, 639, 641, 659, 735, 736, 737, 745, 772, 788, 806, 814, 815, 816, 819, 824, 827, 832, 833, 834, 835, 836, 837, 838, 840, 841, 843, 845, 848, 849, 850, 851, 857], "learnt": [21, 31], "two": [21, 31, 33, 39, 49, 53, 58, 64, 76, 77, 81, 98, 99, 119, 122, 128, 135, 141, 142, 143, 174, 182, 230, 244, 245, 279, 324, 325, 330, 343, 344, 346, 347, 349, 351, 358, 365, 368, 371, 372, 373, 374, 383, 400, 423, 424, 425, 434, 439, 448, 450, 454, 459, 480, 486, 490, 518, 528, 533, 624, 625, 626, 628, 630, 632, 633, 635, 641, 657, 663, 665, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 687, 689, 707, 745, 746, 747, 748, 772, 774, 780, 788, 814, 815, 819, 820, 825, 826, 827, 828, 833, 837, 838, 840, 843, 844, 848, 850, 857, 863, 871], "workflow": [21, 31, 42, 814, 816, 817, 821, 825, 835, 837, 848, 853, 857, 865, 872, 873], "ivy_norm": 21, "jax_norm": [21, 27, 28], "wider": [21, 31, 581, 604, 630, 825, 842, 872], "avoid": [21, 31, 33, 53, 60, 76, 236, 241, 243, 259, 269, 373, 374, 377, 450, 458, 459, 460, 466, 468, 470, 471, 472, 475, 479, 486, 495, 497, 498, 499, 535, 551, 553, 576, 581, 604, 628, 630, 635, 698, 699, 700, 702, 704, 705, 707, 709, 774, 775, 815, 816, 821, 822, 823, 824, 825, 829, 834, 837, 840, 841, 842, 843, 866], "conveni": [21, 31, 814, 825, 826, 832, 838, 846, 848, 849, 853, 872], "act": [21, 31, 53, 76, 294, 359, 369, 816, 827, 842, 851, 873], "shorthand": [21, 31, 33, 840], "pair": [21, 31, 41, 53, 57, 76, 80, 224, 243, 316, 358, 365, 368, 371, 405, 414, 416, 418, 628, 632, 633, 645, 646, 647, 648, 650, 652, 654, 662, 664, 802], "93968587": 21, "26075466": 21, "22723222": 21, "06276492": 21, "47426987": 21, "72835908": 21, "71737559": 21, "50411096": 21, "65419174": 21, "15576624": 21, "implic": [21, 31, 32, 35, 823], "requir": [22, 23, 24, 25, 32, 41, 42, 43, 46, 52, 53, 70, 75, 76, 270, 283, 287, 372, 374, 425, 426, 480, 628, 633, 635, 668, 669, 670, 706, 772, 780, 785, 802, 810, 814, 815, 820, 822, 824, 825, 826, 827, 828, 829, 831, 832, 834, 837, 838, 839, 840, 841, 843, 845, 847, 851, 860, 866, 872], "satisfi": [22, 23, 24, 25, 41, 43, 46, 53, 371, 372, 394, 426, 825, 827], "opt": [22, 23, 24, 25, 45, 815, 821, 825, 836, 840, 843], "fw": [22, 23, 24, 25, 57, 80, 383, 518, 632, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 769, 815, 840], "mxnet": [22, 23, 24, 25, 205, 627, 797, 814, 815, 856, 873], "einop": [22, 23, 24, 25, 41, 43, 46, 54, 77, 541, 542, 543, 630, 825, 856], "miniconda": [22, 23, 24, 25], "env": [22, 23, 24, 25], "multienv": [22, 23, 24, 25], "site": [22, 23, 24, 25, 867], "psutil": [22, 23, 24, 25, 41, 43, 46], "termcolor": [22, 23, 24, 25, 41, 43, 46, 70, 99], "colorama": [22, 23, 24, 25, 41, 43], "535": [22, 23, 24, 25, 47, 69, 114, 622, 829], "diskcach": [22, 23, 24, 25, 41], "auth": [22, 23, 24, 25], "urllib3": [22, 23, 24, 25, 41], "pyvi": [22, 23, 24, 25, 27, 28], "dill": [22, 23, 24, 25, 41], "astunpars": [22, 23, 24, 25], "cloudpickl": [22, 23, 24, 25], "gast": [22, 23, 24, 25], "66": [22, 23, 24, 25, 39, 41, 43, 66, 76, 77, 78, 371, 403, 541, 542, 615, 630, 631, 633, 643, 678, 755], "wheel": [22, 23, 24, 25, 41, 43, 46, 855], "six": [22, 23, 24, 25, 41, 46, 815, 843], "cachetool": [22, 23, 24, 25], "pyasn1": [22, 23, 24, 25], "rsa": [22, 23, 24, 25], "jinja2": [22, 23, 24, 25], "jsonpickl": [22, 23, 24, 25], "networkx": [22, 23, 24, 25, 46], "charset": [22, 23, 24, 25, 41], "idna": [22, 23, 24, 25, 41], "certifi": [22, 23, 24, 25, 41], "2017": [22, 23, 24, 25, 41, 632, 659], "jedi": [22, 23, 24, 25], "inlin": [22, 23, 24, 25, 822], "prompt": [22, 23, 24, 25, 814, 816], "toolkit": [22, 23, 24, 25, 866, 867, 873], "pygment": [22, 23, 24, 25], "traitlet": [22, 23, 24, 25], "exceptiongroup": [22, 23, 24, 25], "paddl": [22, 23, 24, 25, 205, 331, 332, 368, 627, 785, 797, 814, 815, 825, 830], "pexpect": [22, 23, 24, 25], "markupsaf": [22, 23, 24, 25], "parso": [22, 23, 24, 25], "ptyprocess": [22, 23, 24, 25], "wcwidth": [22, 23, 24, 25], "asttoken": [22, 23, 24, 25], "pure": [22, 23, 24, 25, 33, 43, 808, 828, 832, 837, 843, 847, 850, 851, 866, 872, 873], "eagerli": [22, 23, 27, 28, 32, 33, 34, 41, 808, 859, 860, 861], "lazili": [22, 23, 24, 27, 28, 32, 34, 45, 808, 859, 860, 861], "actual": [22, 32, 812, 816, 818, 824, 830, 833, 834, 836, 837, 838, 840, 843, 844, 849, 851, 867, 872], "occur": [22, 27, 28, 32, 45, 50, 52, 64, 73, 75, 87, 151, 270, 286, 626, 628, 640, 641, 740, 741, 745, 746, 747, 748, 819, 824, 826, 829, 842], "becaus": [22, 30, 32, 42, 53, 371, 394, 767, 815, 816, 819, 820, 821, 822, 823, 825, 826, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 840, 843, 845, 849, 850, 851, 866, 869, 872], "argument": [22, 24, 25, 27, 28, 30, 32, 33, 34, 39, 41, 43, 45, 48, 49, 52, 53, 54, 58, 70, 71, 75, 76, 77, 93, 94, 99, 122, 123, 124, 126, 127, 128, 129, 131, 132, 133, 134, 135, 138, 139, 140, 141, 142, 143, 144, 145, 151, 167, 171, 176, 205, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 236, 237, 239, 241, 242, 243, 247, 248, 249, 250, 251, 252, 256, 258, 259, 260, 261, 263, 264, 265, 266, 269, 271, 272, 273, 274, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 309, 324, 325, 331, 332, 334, 337, 339, 340, 365, 368, 371, 372, 374, 383, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 403, 404, 405, 408, 409, 410, 415, 417, 419, 426, 480, 488, 492, 518, 521, 525, 531, 532, 534, 535, 540, 542, 543, 548, 552, 554, 556, 558, 568, 572, 573, 587, 591, 596, 597, 610, 620, 625, 626, 627, 628, 630, 631, 632, 633, 635, 636, 637, 638, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 654, 655, 656, 657, 659, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 689, 690, 691, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 713, 720, 733, 740, 741, 743, 744, 745, 746, 747, 748, 749, 752, 756, 757, 758, 759, 760, 761, 762, 763, 764, 767, 769, 772, 773, 780, 785, 788, 789, 790, 797, 801, 804, 808, 814, 818, 819, 820, 821, 822, 823, 827, 828, 831, 833, 838, 840, 841, 843, 845, 847, 848, 853, 855, 859, 860, 861, 866], "altern": [22, 32, 42, 53, 76, 81, 93, 94, 330, 338, 339, 340, 344, 346, 347, 348, 349, 351, 352, 353, 357, 358, 368, 808, 814, 815, 822, 836, 848, 869], "dummi": [22, 23, 32, 33, 34, 40, 816], "assum": [22, 23, 32, 33, 34, 49, 52, 53, 54, 57, 58, 59, 75, 76, 77, 80, 81, 82, 122, 123, 124, 126, 127, 128, 129, 131, 132, 133, 134, 135, 138, 139, 140, 141, 142, 144, 145, 151, 167, 171, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 236, 237, 239, 241, 242, 243, 247, 248, 249, 250, 251, 252, 253, 256, 258, 259, 260, 261, 263, 264, 265, 266, 269, 271, 272, 273, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 309, 325, 331, 332, 334, 337, 355, 365, 368, 371, 372, 374, 383, 390, 391, 392, 393, 395, 396, 397, 403, 408, 409, 410, 415, 417, 426, 440, 442, 480, 488, 492, 518, 521, 548, 552, 554, 556, 565, 587, 596, 620, 625, 626, 628, 630, 631, 632, 633, 634, 635, 638, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 654, 655, 656, 659, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 689, 690, 691, 692, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 733, 740, 741, 743, 744, 745, 746, 747, 748, 749, 752, 756, 757, 758, 759, 760, 761, 762, 763, 764, 788, 801, 808, 815, 819, 821, 824, 825, 828, 838, 840, 843, 847, 848, 851], "201733": 22, "slowli": [22, 32], "norm": [22, 32, 33, 53, 54, 58, 76, 77, 81, 92, 93, 371, 372, 393, 394, 398, 399, 400, 403, 404, 405, 415, 416, 422, 426, 500, 501, 503, 536, 537, 558, 630, 633, 674, 690, 733, 788, 792, 841], "slow": [22, 32, 810, 815, 822], "34431235": [22, 23], "51129461": [22, 23], "06686894": [22, 23], "36452447": [22, 23], "98795534": [22, 23], "15493582": [22, 23], "91630631": [22, 23], "41939619": [22, 23], "78909753": [22, 23], "19475674": [22, 23], "norm_trac": 22, "float64": [22, 23, 50, 53, 62, 66, 72, 73, 75, 76, 77, 85, 89, 122, 130, 131, 148, 151, 155, 156, 161, 162, 165, 166, 171, 172, 176, 178, 179, 185, 188, 270, 342, 368, 373, 383, 448, 453, 518, 567, 625, 626, 630, 633, 639, 669, 670, 674, 690, 736, 737, 754, 769, 772, 773, 825, 838, 840], "norm_tran": [22, 32], "know": [22, 23, 32, 33, 34, 64, 641, 745, 746, 747, 748, 810, 814, 816, 826, 834, 838, 840, 843, 857, 861, 867], "07": [23, 41, 43, 55, 59, 75, 78, 82, 85, 224, 257, 260, 261, 280, 371, 403, 601, 611, 612, 614, 615, 616, 617, 628, 630, 631, 634, 693, 694, 736, 789, 792, 849], "981554": 23, "happen": [23, 27, 28, 288, 628, 808, 815, 816, 817, 826, 836, 840, 848, 857, 859, 860], "wherea": [23, 34, 76, 371, 417, 816, 820, 823, 825, 826, 827, 832, 833, 840, 850, 863], "subtract": [23, 27, 28, 52, 75, 98, 99, 130, 374, 480, 625, 628, 820, 823, 827], "begin": [23, 53, 76, 280, 373, 374, 448, 464, 480, 481, 482, 483, 484, 628, 637, 714, 725, 772, 815, 819, 824, 838], "filelock": [24, 41], "extens": [24, 41, 52, 58, 75, 122, 123, 124, 126, 127, 128, 129, 131, 132, 133, 135, 138, 139, 140, 141, 142, 144, 145, 151, 161, 164, 176, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 236, 237, 239, 241, 242, 243, 247, 248, 249, 250, 251, 252, 256, 258, 259, 260, 261, 263, 264, 265, 266, 269, 271, 272, 273, 274, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 331, 332, 334, 368, 371, 374, 383, 415, 488, 492, 518, 625, 626, 628, 633, 635, 640, 641, 642, 643, 644, 663, 664, 665, 666, 667, 669, 670, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 689, 690, 696, 698, 699, 700, 702, 703, 705, 706, 710, 740, 741, 743, 744, 745, 746, 747, 748, 749, 752, 756, 757, 758, 759, 760, 761, 762, 763, 764, 813, 815, 816, 828, 830, 831, 840, 863, 866, 873], "sympi": [24, 856], "fsspec": [24, 41], "mpmath": 24, "scenario": [24, 825, 835], "often": [24, 53, 373, 448, 813, 819, 829, 832, 833, 837, 840, 851, 857, 867, 870, 873], "fortun": [24, 25, 819], "everyth": [24, 42, 801, 808, 814, 815, 816, 817, 818, 824, 827, 836, 837, 838, 840, 846, 851, 852, 857], "practic": [24, 816, 821, 824, 837, 839, 869], "specifi": [24, 25, 27, 28, 32, 33, 34, 45, 47, 49, 50, 52, 53, 54, 57, 58, 59, 60, 62, 63, 64, 66, 67, 69, 70, 73, 75, 76, 77, 80, 81, 82, 83, 85, 86, 89, 90, 93, 106, 107, 108, 109, 110, 111, 112, 113, 114, 122, 126, 131, 133, 138, 141, 142, 144, 148, 150, 197, 202, 204, 208, 209, 210, 278, 287, 291, 296, 297, 299, 325, 330, 347, 352, 363, 365, 368, 371, 372, 373, 374, 378, 383, 390, 391, 392, 394, 400, 405, 415, 416, 417, 418, 426, 438, 440, 445, 448, 452, 453, 454, 456, 470, 473, 482, 483, 485, 486, 488, 492, 505, 516, 518, 519, 520, 523, 524, 528, 531, 548, 549, 551, 553, 554, 567, 569, 577, 610, 622, 625, 626, 627, 628, 630, 632, 633, 634, 635, 637, 639, 640, 641, 642, 643, 644, 657, 659, 662, 664, 666, 667, 669, 670, 674, 682, 685, 687, 688, 689, 690, 692, 693, 694, 695, 696, 697, 698, 699, 703, 705, 706, 709, 710, 718, 719, 721, 722, 729, 730, 731, 732, 735, 736, 737, 739, 740, 741, 743, 746, 747, 748, 749, 753, 754, 755, 759, 761, 763, 764, 772, 775, 784, 788, 789, 790, 802, 806, 815, 818, 822, 825, 826, 832, 833, 834, 836, 837, 838, 840, 845, 848, 849, 859, 860, 861, 872], "everi": [24, 27, 28, 33, 41, 49, 53, 54, 76, 77, 131, 132, 297, 331, 332, 345, 363, 368, 371, 374, 408, 409, 410, 417, 494, 530, 625, 630, 814, 816, 819, 821, 822, 824, 825, 827, 831, 832, 833, 834, 836, 837, 838, 840, 845, 847, 849, 859, 860, 861, 866], "jax_kornia": [24, 27, 28, 808, 860], "though": [24, 813, 814, 816, 825, 826, 828, 833, 836, 837, 843, 848, 851], "000000000034": [24, 27, 28, 808, 860], "raw_img": [24, 27, 28, 808, 860], "enhanc": [24, 27, 28, 808, 839, 860], "sharp": [24, 27, 28, 808], "prefer": [24, 27, 28, 243, 628, 808, 815, 823, 829, 830, 834, 837, 852, 866], "leverag": [24, 27, 28, 808, 815, 836, 860, 864, 866], "whole": [25, 53, 76, 374, 377, 487, 500, 501, 503, 816, 822, 831], "full": [25, 53, 58, 76, 80, 81, 93, 94, 96, 161, 248, 256, 319, 320, 321, 322, 323, 365, 372, 373, 374, 445, 446, 452, 453, 481, 484, 575, 584, 599, 607, 625, 626, 628, 630, 632, 633, 647, 649, 650, 651, 653, 676, 680, 682, 683, 773, 780, 808, 815, 816, 822, 825, 828, 829, 832, 833, 837, 840, 843, 845, 851, 856, 857, 864, 866, 872], "advantag": [25, 27, 28, 808, 815, 816, 825, 836, 837, 852, 860, 866], "complex": [25, 27, 28, 41, 47, 52, 53, 58, 66, 69, 73, 75, 76, 81, 89, 106, 107, 108, 109, 110, 111, 112, 113, 114, 138, 139, 154, 168, 177, 183, 216, 217, 218, 219, 220, 221, 222, 225, 233, 234, 236, 237, 239, 241, 249, 250, 251, 252, 253, 257, 258, 259, 260, 269, 271, 272, 274, 276, 279, 280, 281, 282, 283, 286, 287, 291, 296, 297, 299, 334, 339, 340, 363, 368, 371, 372, 383, 394, 405, 415, 416, 420, 425, 426, 427, 438, 440, 526, 527, 588, 589, 622, 625, 626, 628, 630, 633, 640, 643, 668, 669, 670, 674, 681, 683, 685, 687, 690, 743, 758, 759, 761, 773, 784, 802, 811, 814, 817, 822, 825, 827, 834, 837, 840, 841, 843, 848, 849, 850, 851, 853, 860, 862, 864, 866, 868, 872, 873], "neccessari": 25, "set_random_se": [25, 44], "manual_se": 25, "301436": 25, "_c": 25, "0x7f252c392390": 25, "convolut": [25, 53, 57, 76, 80, 371, 392, 410, 632, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 774, 788, 806, 860, 864, 866], "flatten": [25, 27, 28, 41, 43, 46, 53, 54, 58, 60, 63, 64, 76, 77, 81, 83, 86, 87, 336, 352, 368, 372, 374, 383, 423, 469, 479, 483, 488, 489, 492, 494, 516, 523, 524, 525, 526, 527, 528, 541, 545, 630, 633, 635, 640, 641, 671, 678, 690, 696, 701, 703, 740, 741, 745, 746, 747, 748, 767, 769, 808, 836, 843], "keyword": [25, 27, 28, 43, 45, 48, 49, 53, 70, 76, 99, 135, 270, 371, 374, 383, 419, 480, 518, 532, 535, 568, 597, 625, 628, 630, 633, 637, 643, 684, 720, 761, 767, 769, 773, 789, 790, 801, 814, 820, 823, 825, 826, 834, 836, 837, 838, 840, 841, 843, 848, 859, 860, 861], "input_arrai": [25, 27, 28, 836], "torch_model": [25, 27, 28, 45], "159": [25, 69, 106, 622, 632, 656], "state_upd": 25, "properti": [25, 70, 93, 94, 95, 96, 97, 98, 102, 790, 792, 819, 823, 833, 838, 840, 847, 848, 849, 872], "_transpil": 25, "thank": [25, 848, 856], "fledg": [25, 815, 845, 846], "output_arrai": [25, 27, 28, 53, 450], "0893": 25, "1504": 25, "1372": 25, "0991": 25, "0867": 25, "0851": 25, "0911": 25, "0804": 25, "0926": 25, "0881": 25, "softmaxbackward0": 25, "furthermor": 25, "relat": [25, 243, 628, 808, 810, 813, 814, 815, 816, 822, 829, 837, 840, 841, 842, 843, 860, 869], "interest": [25, 27, 39, 236, 269, 628, 814, 816], "continu": [25, 27, 28, 43, 121, 283, 291, 363, 624, 628, 808, 813, 814, 815, 818, 819, 830, 836, 839, 840, 851, 856, 857, 866], "regress": [26, 866, 873], "checkout": [27, 42, 816, 819, 840], "f705efe7cb5d18df17ce6c1e20f04d0eb4933f48": 27, "theoret": 27, "aspect": [27, 28, 809, 835, 848, 866], "switch": [27, 39, 780, 821, 829, 833, 834, 873], "easiest": [27, 808, 810, 815, 852], "defer": [27, 28, 814, 820, 825, 826, 833, 836, 837, 840, 872], "similarli": [27, 40, 135, 143, 219, 324, 331, 332, 365, 368, 625, 628, 821, 825, 837, 843, 847, 872], "obtain": [27, 28, 46, 53, 76, 315, 365, 371, 411, 632, 659, 774, 837, 859], "essenc": [27, 867, 872], "becom": [27, 53, 76, 93, 342, 368, 374, 460, 635, 695, 797, 816, 817, 823, 825, 827, 829, 836, 851, 855, 857, 859], "regardless": [27, 28, 39, 70, 809, 825, 829, 847, 850, 857], "being": [27, 28, 39, 53, 70, 76, 91, 98, 102, 122, 372, 374, 436, 464, 480, 582, 625, 630, 632, 633, 657, 670, 769, 775, 787, 808, 815, 816, 819, 820, 821, 823, 825, 826, 827, 830, 832, 834, 836, 837, 838, 840, 841, 843, 845, 848, 851, 856, 857, 862, 864, 865, 866, 867, 872, 873], "slide": [27, 53, 57, 76, 80, 371, 390, 391, 392, 408, 409, 410, 411, 414, 418, 632, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 788], "A": [27, 28, 42, 49, 50, 53, 54, 60, 62, 66, 67, 70, 73, 75, 76, 77, 80, 81, 83, 85, 87, 90, 93, 94, 99, 118, 119, 121, 128, 136, 143, 149, 190, 209, 271, 273, 277, 309, 320, 324, 326, 327, 328, 330, 344, 347, 351, 352, 365, 368, 371, 372, 373, 374, 377, 378, 383, 386, 400, 414, 417, 419, 426, 434, 439, 442, 450, 454, 465, 468, 486, 490, 491, 497, 498, 499, 500, 504, 505, 506, 507, 508, 516, 525, 528, 533, 535, 544, 553, 556, 557, 588, 589, 590, 593, 621, 624, 625, 626, 627, 628, 630, 631, 632, 633, 635, 637, 639, 643, 644, 655, 659, 667, 669, 672, 677, 678, 682, 683, 695, 698, 700, 704, 706, 714, 717, 719, 721, 722, 723, 724, 725, 729, 730, 731, 732, 734, 735, 736, 737, 739, 745, 755, 763, 764, 767, 769, 770, 772, 773, 774, 775, 780, 787, 802, 806, 808, 813, 814, 815, 818, 823, 825, 826, 829, 832, 833, 837, 838, 840, 845, 848, 851, 852, 853, 854, 855, 856, 857, 859, 860, 861, 866, 867], "regressor": [27, 28, 808], "input_dim": [27, 28, 42, 808], "output_dim": [27, 28, 42, 808], "linear0": [27, 28, 39, 808, 848, 849], "linear1": [27, 28, 39, 808, 848, 849], "instanti": [27, 28, 780, 828], "adam": [27, 28, 39, 43, 55, 78, 532, 611, 612, 617, 630, 631, 792, 808, 848, 849, 850, 866], "n_training_exampl": [27, 28, 808], "2000": [27, 28, 76, 310, 365, 808], "random_norm": [27, 28, 57, 58, 62, 80, 81, 85, 541, 630, 632, 633, 639, 647, 649, 650, 651, 653, 654, 658, 683, 808], "linspac": [27, 28, 49, 72, 122, 625, 808, 832, 843, 845, 873], "loss_fn": [27, 28, 39, 41, 43, 808, 848, 849, 850], "pred": [27, 28, 42, 43, 53, 59, 76, 82, 373, 449, 452, 634, 692, 693, 694, 808, 823, 833, 836], "epoch": [27, 28, 41, 43, 808], "loss": [27, 28, 41, 43, 53, 76, 93, 448, 449, 450, 451, 452, 453, 454, 455, 581, 604, 630, 692, 693, 694, 808, 824, 825, 833, 837, 841, 842, 848, 849, 850, 866, 873], "gradient": [27, 28, 41, 43, 53, 76, 93, 209, 360, 368, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 627, 636, 711, 712, 713, 769, 780, 792, 808, 818, 841, 848, 849, 851, 866], "grad": [27, 28, 39, 43, 611, 631, 792, 808, 835, 848, 849, 850], "execute_with_gradi": [27, 28, 39, 43, 631, 808, 848, 849, 850, 851], "lambda": [27, 28, 44, 46, 76, 119, 121, 293, 303, 540, 553, 613, 614, 616, 621, 624, 630, 631, 633, 637, 669, 721, 722, 726, 808, 814, 833, 834, 835, 838, 843, 845, 848], "2d": [27, 28, 43, 53, 76, 93, 309, 365, 371, 372, 374, 383, 386, 387, 395, 396, 438, 445, 459, 469, 518, 788, 806, 808, 837, 843], "5f": [27, 28, 808], "nonetheless": [27, 28], "slight": [27, 28, 825, 840, 849], "introduc": [27, 28, 243, 628, 635, 641, 703, 745, 814, 823, 824, 825, 834, 838, 840, 843, 848, 855], "address": [27, 28, 53, 54, 76, 374, 488, 595, 630, 814, 816, 819, 820, 832, 839, 845, 857, 862, 864, 866, 872], "extract": [27, 28, 35, 42, 53, 76, 94, 374, 463, 489, 837, 839, 841, 862, 866, 867, 872], "gc": [27, 28, 553, 630], "decompos": [27, 28, 53, 76, 93, 96, 319, 320, 321, 322, 323, 344, 351, 365, 368, 372, 436, 441, 444, 447, 837, 850], "said": [27, 28, 774, 841, 857, 859], "otherwis": [27, 28, 45, 48, 49, 50, 52, 53, 54, 57, 58, 63, 64, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 93, 106, 107, 108, 109, 110, 111, 112, 113, 114, 119, 122, 124, 125, 130, 132, 133, 134, 137, 139, 145, 148, 149, 151, 152, 154, 155, 156, 157, 158, 167, 171, 175, 176, 192, 210, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 247, 248, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 303, 305, 306, 307, 309, 319, 320, 321, 322, 323, 330, 331, 332, 333, 334, 336, 337, 338, 346, 347, 353, 355, 357, 358, 359, 363, 365, 368, 371, 372, 374, 377, 390, 391, 392, 395, 396, 397, 415, 428, 443, 445, 448, 449, 450, 451, 452, 453, 454, 455, 458, 459, 460, 464, 465, 466, 468, 470, 471, 472, 479, 486, 488, 489, 490, 492, 495, 497, 499, 500, 501, 503, 505, 517, 518, 519, 520, 521, 530, 533, 534, 536, 537, 541, 542, 543, 544, 545, 548, 549, 552, 554, 556, 557, 558, 560, 561, 564, 565, 572, 573, 587, 588, 589, 591, 593, 595, 596, 597, 609, 613, 615, 620, 624, 625, 626, 627, 628, 630, 631, 632, 633, 636, 637, 640, 641, 642, 643, 644, 646, 647, 648, 649, 655, 656, 657, 659, 662, 663, 664, 665, 669, 670, 671, 672, 673, 674, 676, 678, 680, 681, 683, 687, 689, 690, 692, 693, 694, 695, 698, 699, 700, 702, 703, 704, 705, 706, 707, 709, 710, 711, 712, 727, 734, 735, 736, 737, 739, 740, 741, 742, 744, 745, 746, 747, 748, 749, 751, 753, 754, 756, 757, 758, 759, 760, 761, 762, 763, 764, 767, 772, 773, 788, 790, 791, 797, 808, 816, 820, 823, 825, 826, 827, 833, 834, 836, 840, 845, 852, 859, 860], "x0": [27, 28, 46, 77, 533, 630, 827], "normalize_trac": [27, 28], "html": [27, 28, 42, 52, 53, 75, 76, 143, 151, 239, 249, 250, 265, 324, 331, 332, 365, 368, 371, 374, 383, 415, 488, 518, 625, 626, 628, 633, 635, 643, 681, 682, 710, 760, 808, 828, 856], "fname": [27, 28, 44, 46, 790, 848], "anticip": [27, 28], "addition": [27, 28, 823, 836, 837, 872], "backend_compil": [27, 28], "normalize_native_comp": [27, 28], "return_backend_compiled_fn": 27, "immedi": [27, 28, 806, 814, 815], "built": [27, 28, 33, 41, 43, 46, 122, 625, 788, 789, 790, 808, 815, 816, 822, 823, 840, 846, 852, 859, 865, 866, 870], "summar": [27, 28, 93, 840], "eager_graph": [27, 28, 808, 859, 860], "lazy_graph": [27, 28, 808, 859, 860], "codebas": [27, 28, 207, 208, 627, 809, 811, 818, 825, 831, 836, 837, 839, 840, 841, 844, 857], "thought": [27, 28, 815, 816, 832, 856, 864], "research": [27, 28, 41, 808, 855, 860, 866, 873], "wa": [27, 28, 33, 42, 53, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 96, 106, 107, 108, 109, 110, 111, 112, 113, 114, 130, 132, 137, 139, 145, 149, 151, 176, 210, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 247, 248, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 299, 300, 301, 302, 303, 305, 306, 307, 308, 309, 330, 331, 332, 333, 334, 336, 338, 346, 347, 353, 354, 355, 357, 358, 359, 365, 368, 372, 395, 396, 397, 415, 446, 448, 449, 450, 451, 452, 453, 454, 455, 458, 459, 460, 464, 465, 486, 488, 489, 490, 492, 497, 499, 500, 501, 503, 505, 518, 519, 520, 521, 530, 533, 534, 536, 537, 541, 542, 543, 544, 545, 548, 549, 552, 554, 556, 557, 558, 560, 561, 564, 572, 573, 587, 588, 589, 591, 593, 595, 596, 597, 609, 615, 620, 628, 630, 637, 643, 644, 646, 647, 648, 649, 655, 656, 662, 663, 664, 669, 670, 671, 672, 673, 674, 676, 678, 680, 681, 687, 692, 693, 694, 695, 699, 702, 703, 704, 705, 706, 709, 710, 727, 734, 735, 736, 737, 739, 742, 745, 746, 747, 748, 749, 753, 754, 756, 757, 758, 759, 760, 761, 762, 763, 764, 797, 808, 810, 816, 819, 821, 822, 824, 827, 833, 835, 837, 845, 847, 856, 859, 860, 865, 866, 868], "matter": [27, 28, 33, 827, 855], "haven": [27, 28, 33, 852, 866], "jax_out": [27, 28], "ideal": [27, 28, 824, 825, 837, 843, 848], "But": [27, 28, 774, 823, 824, 828, 831, 834, 843, 850], "bring": [27, 28, 819, 839, 840, 845, 846, 853, 856], "wise": [27, 47, 52, 53, 58, 69, 75, 76, 81, 98, 99, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 216, 217, 219, 220, 221, 223, 224, 226, 227, 228, 229, 230, 231, 235, 236, 237, 238, 240, 243, 244, 245, 246, 247, 248, 254, 255, 256, 261, 262, 263, 264, 265, 266, 267, 268, 269, 272, 274, 275, 277, 278, 285, 290, 291, 292, 293, 294, 295, 297, 299, 301, 302, 303, 305, 306, 307, 330, 333, 338, 341, 342, 343, 346, 347, 348, 349, 353, 354, 357, 358, 363, 368, 371, 372, 374, 395, 396, 397, 424, 431, 467, 474, 476, 477, 496, 622, 628, 635, 664, 695, 792, 843], "vision": [27, 28, 46, 862, 872], "worth": [27, 28], "differenti": [27, 28, 291, 361, 362, 363, 370, 866], "chosen": [27, 28, 46, 96, 122, 224, 625, 628, 640, 744, 814, 824, 837], "plai": [27, 28, 373, 452, 808, 811, 815, 817, 820, 826, 830, 837, 840, 850, 866, 869], "role": [27, 28, 808, 811, 816, 817, 826, 837, 846, 867, 869, 873], "dl": [27, 28], "cnn": [27, 28, 866], "effortlessli": [27, 28], "previous": [27, 28, 599, 630, 797, 814, 815, 821, 833, 835, 840, 845], "pre": [27, 28, 808, 812, 814, 839, 840, 850, 851, 852, 866], "default_devic": [27, 28, 202, 205, 206, 207, 213, 214, 627, 826, 829, 830], "as_n": [27, 28, 50, 51, 70, 73, 74, 154, 155, 156, 157, 158, 159, 165, 192, 193, 626, 627, 825], "certainli": [27, 28, 808, 856, 872], "upon": [27, 28, 45, 806, 816, 817, 827, 836, 840, 843, 851, 865, 866], "unnecessari": [27, 28, 837], "extend": [27, 28, 53, 76, 374, 383, 480, 521, 821, 822, 825, 828, 829, 832, 837, 841, 851, 863, 866, 872], "infrastructur": [27, 28, 808, 862, 868, 869], "least": [27, 52, 53, 58, 75, 76, 236, 254, 269, 371, 374, 383, 399, 404, 458, 459, 460, 469, 471, 518, 628, 633, 640, 673, 743, 808, 816, 820, 824, 825, 826, 827, 833, 836, 840, 860], "coco": 27, "seamlessli": [28, 840], "benefit": [28, 808, 815, 820, 823, 836, 843, 847, 848, 851, 856, 857, 864, 868, 871], "through": [28, 33, 41, 53, 76, 96, 224, 383, 524, 525, 628, 637, 717, 723, 790, 801, 808, 809, 812, 813, 814, 816, 817, 818, 821, 822, 823, 824, 826, 827, 829, 830, 831, 833, 834, 836, 837, 838, 840, 842, 843, 844, 845, 848, 849, 850, 859, 864, 866, 867, 868], "therefor": [28, 33, 49, 52, 53, 58, 75, 76, 122, 123, 124, 126, 127, 128, 129, 131, 132, 133, 134, 135, 138, 139, 140, 141, 142, 143, 144, 145, 151, 167, 171, 175, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 236, 237, 239, 241, 242, 243, 247, 248, 249, 250, 251, 252, 256, 258, 259, 260, 261, 263, 264, 265, 266, 269, 271, 272, 273, 274, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 309, 324, 325, 331, 332, 334, 337, 365, 368, 371, 372, 374, 383, 390, 391, 392, 393, 395, 396, 397, 403, 408, 409, 410, 415, 417, 426, 473, 480, 481, 483, 488, 492, 493, 518, 521, 525, 534, 542, 543, 548, 552, 554, 556, 558, 572, 587, 591, 596, 620, 625, 626, 628, 630, 631, 632, 633, 635, 638, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 654, 655, 656, 659, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 689, 690, 691, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 733, 740, 741, 743, 744, 745, 746, 747, 748, 749, 752, 756, 757, 758, 759, 760, 761, 762, 763, 764, 814, 816, 819, 820, 823, 824, 825, 826, 827, 828, 829, 832, 833, 834, 836, 837, 838, 840, 841, 843, 845, 847, 849, 851, 855, 863, 866, 872], "wide": [28, 808, 816, 840, 864, 866], "prepar": [28, 41, 43, 46, 808, 824], "plenti": 28, "resourc": [28, 809, 814, 815, 824], "visit": [28, 814, 815, 816, 824], "page": [28, 808, 814, 815, 816, 822, 824, 830, 846, 847, 850, 852, 861, 874], "newli": [29, 30, 42, 44, 50, 73, 148, 535, 626, 630, 816, 824, 836, 840], "randon": [29, 30, 32, 33, 34], "mean_": 29, "std_": 29, "detect": [29, 33, 52, 70, 75, 251, 628, 637, 714, 725, 814, 815, 821, 823, 824, 831, 840, 848, 849], "inspect": [29, 33, 531, 630], "__": [29, 30, 31, 32, 33, 34, 70, 827, 848], "exhibit": [30, 872], "via": [30, 33, 243, 372, 374, 441, 444, 447, 488, 628, 637, 724, 725, 816, 819, 823, 825, 826, 836, 841, 843, 845, 847, 848, 866], "script": [30, 808, 815, 816, 819, 824, 827, 845, 851, 866], "comp": 30, "low_level": 30, "chain": [30, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 93, 106, 107, 108, 109, 110, 111, 112, 113, 114, 130, 132, 137, 139, 145, 149, 151, 164, 168, 169, 176, 210, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 247, 248, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 295, 299, 300, 301, 302, 303, 305, 306, 307, 309, 330, 331, 332, 334, 336, 338, 346, 347, 353, 355, 357, 358, 359, 395, 396, 397, 415, 448, 449, 450, 451, 452, 453, 454, 455, 464, 465, 486, 488, 490, 492, 497, 499, 500, 501, 503, 505, 518, 519, 520, 521, 530, 533, 534, 536, 537, 541, 542, 543, 544, 545, 548, 549, 552, 554, 556, 557, 558, 560, 561, 564, 572, 573, 587, 588, 589, 591, 593, 595, 596, 609, 615, 620, 636, 637, 646, 647, 648, 649, 655, 656, 662, 663, 664, 669, 670, 671, 672, 673, 674, 676, 678, 680, 681, 687, 692, 693, 694, 695, 699, 702, 703, 704, 705, 706, 709, 710, 711, 712, 716, 727, 734, 735, 736, 737, 739, 742, 745, 746, 747, 748, 749, 753, 754, 757, 759, 760, 762, 763, 764, 793, 820, 823, 835, 837, 849, 850, 851, 866], "un": [30, 166, 626, 825, 845], "partial_comp": 30, "time_funct": 30, "slowest": [30, 53, 60, 76, 83, 374, 470, 635, 702], "express": [30, 52, 53, 75, 76, 94, 217, 221, 223, 224, 233, 235, 275, 281, 286, 355, 368, 628, 794, 802, 828, 837, 845, 850, 866, 867], "fastest": [30, 53, 60, 76, 83, 372, 374, 439, 470, 635, 702], "maxim": [30, 833, 836, 845, 863, 864, 868, 869, 870], "conclud": [31, 841], "collect": [31, 41, 43, 45, 46, 48, 70, 71, 622, 627, 630, 631, 632, 634, 637, 638, 639, 727, 784, 788, 789, 790, 791, 792, 815, 824, 829, 830, 834, 835, 838, 840, 864, 866, 869], "norm_comp": [32, 33], "global": [32, 33, 43, 54, 70, 77, 99, 154, 155, 156, 157, 158, 207, 208, 209, 578, 579, 582, 588, 589, 601, 602, 605, 626, 627, 630, 780, 791, 797, 815, 820, 821, 824, 825, 826, 829, 833, 837, 845, 866], "approach": [32, 812, 814, 815, 816, 820, 823, 825, 826, 830, 833, 837, 840, 841, 843, 847, 848, 851, 863, 870, 872], "b": [33, 47, 52, 53, 54, 57, 58, 66, 69, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 93, 94, 97, 98, 99, 106, 107, 108, 109, 110, 111, 112, 113, 123, 124, 125, 130, 131, 132, 134, 137, 139, 145, 148, 149, 150, 151, 159, 169, 171, 176, 193, 210, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 326, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 357, 358, 359, 363, 365, 368, 371, 372, 373, 374, 378, 381, 383, 390, 391, 392, 393, 395, 396, 399, 403, 404, 405, 408, 409, 410, 414, 415, 418, 421, 424, 426, 428, 432, 435, 439, 442, 447, 448, 449, 451, 452, 453, 454, 458, 459, 460, 461, 464, 465, 466, 467, 470, 471, 472, 474, 475, 476, 477, 479, 480, 486, 488, 489, 490, 491, 492, 495, 496, 501, 503, 505, 506, 508, 509, 511, 518, 519, 520, 521, 523, 525, 528, 530, 533, 534, 536, 537, 540, 541, 542, 543, 544, 545, 548, 549, 552, 554, 556, 557, 558, 560, 561, 564, 565, 572, 573, 587, 588, 589, 591, 595, 596, 609, 611, 612, 613, 615, 617, 618, 619, 620, 622, 625, 626, 628, 630, 631, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 658, 662, 663, 664, 665, 667, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 680, 681, 682, 683, 684, 685, 687, 688, 689, 690, 692, 693, 694, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 714, 717, 720, 721, 722, 723, 725, 726, 731, 732, 733, 735, 736, 737, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 772, 801, 802, 806, 808, 809, 812, 816, 818, 819, 821, 823, 824, 827, 830, 833, 835, 838, 844, 845, 846, 848, 849, 850, 854, 857, 859, 862], "option": [33, 42, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 93, 98, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 148, 149, 150, 151, 153, 154, 155, 156, 157, 158, 164, 166, 176, 188, 192, 204, 207, 208, 209, 210, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 319, 320, 321, 322, 323, 324, 325, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 363, 365, 368, 371, 372, 373, 374, 377, 378, 379, 381, 383, 384, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 403, 404, 405, 407, 408, 409, 410, 411, 413, 415, 416, 417, 419, 420, 422, 423, 424, 426, 428, 430, 431, 432, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 458, 459, 460, 463, 464, 465, 466, 468, 470, 471, 472, 473, 474, 475, 477, 478, 479, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 511, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 533, 534, 536, 537, 539, 541, 542, 543, 544, 545, 548, 549, 551, 552, 553, 554, 556, 557, 558, 560, 561, 564, 569, 572, 573, 577, 587, 588, 589, 591, 593, 595, 596, 597, 609, 611, 612, 615, 617, 618, 619, 620, 622, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 673, 674, 676, 677, 678, 679, 680, 681, 682, 684, 685, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 720, 721, 725, 726, 731, 733, 734, 735, 736, 737, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 767, 769, 773, 780, 784, 785, 787, 788, 790, 792, 793, 801, 806, 814, 815, 816, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 836, 837, 838, 840, 841, 843, 845, 850, 851, 859, 860, 861, 866, 872], "prioriti": [33, 70, 797, 811, 814, 816, 817, 826, 836], "normalize_via_oper": 33, "determin": [33, 52, 53, 58, 60, 64, 67, 70, 75, 76, 77, 81, 88, 90, 93, 96, 98, 99, 128, 151, 153, 160, 166, 167, 168, 169, 171, 172, 173, 188, 198, 200, 201, 212, 217, 218, 219, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 233, 234, 236, 239, 241, 243, 249, 250, 251, 252, 253, 257, 258, 259, 260, 261, 266, 269, 274, 278, 281, 282, 283, 284, 285, 286, 287, 290, 300, 304, 350, 355, 363, 368, 371, 372, 373, 374, 383, 407, 415, 426, 448, 449, 488, 492, 518, 530, 533, 554, 555, 559, 560, 561, 562, 563, 564, 591, 609, 625, 626, 627, 628, 630, 633, 635, 636, 641, 644, 663, 664, 665, 667, 671, 672, 673, 675, 676, 678, 679, 681, 682, 687, 689, 690, 696, 711, 712, 713, 745, 746, 747, 748, 749, 763, 764, 774, 780, 787, 791, 823, 825, 826, 828, 833, 837, 840, 842, 843, 855], "think": [33, 814, 816, 824, 827, 843, 867], "uniqu": [33, 43, 53, 54, 64, 76, 77, 87, 371, 372, 374, 419, 442, 479, 480, 494, 565, 630, 636, 637, 641, 711, 712, 713, 716, 720, 745, 746, 747, 748, 774, 808, 819, 823, 833, 837, 838, 839, 843, 851, 855, 869], "rule": [33, 50, 52, 53, 58, 73, 75, 76, 81, 148, 151, 174, 175, 176, 225, 236, 269, 271, 278, 280, 288, 290, 371, 374, 383, 415, 468, 518, 626, 628, 633, 635, 663, 664, 671, 675, 678, 682, 696, 774, 801, 819, 820, 823, 824, 825, 827, 831, 832, 833, 835, 840, 843, 867], "broadcast": [33, 47, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 69, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 93, 98, 99, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 137, 138, 139, 140, 141, 142, 144, 145, 148, 149, 150, 210, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 247, 248, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 325, 331, 332, 333, 334, 335, 336, 339, 340, 342, 344, 346, 348, 349, 350, 351, 355, 363, 365, 368, 371, 372, 373, 374, 377, 378, 383, 390, 391, 392, 394, 395, 396, 397, 398, 399, 400, 404, 405, 407, 408, 409, 410, 413, 415, 420, 422, 423, 431, 432, 437, 438, 440, 449, 450, 451, 452, 454, 455, 461, 465, 468, 473, 481, 482, 483, 484, 486, 488, 490, 492, 493, 497, 500, 501, 503, 504, 505, 507, 508, 518, 519, 520, 521, 524, 525, 526, 527, 528, 536, 537, 541, 542, 543, 548, 549, 558, 572, 573, 611, 612, 615, 617, 618, 619, 620, 622, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 659, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 673, 674, 676, 677, 678, 679, 680, 682, 684, 685, 687, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 705, 706, 707, 708, 710, 733, 734, 735, 736, 737, 739, 740, 741, 742, 744, 748, 749, 753, 754, 756, 757, 758, 759, 760, 761, 762, 763, 764, 772, 774, 801, 823, 825, 827, 828, 829, 840, 841, 845], "elementwis": [33, 53, 61, 76, 84, 296, 298, 358, 363, 633, 638, 688, 733, 833, 841, 845], "must": [33, 41, 47, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 93, 94, 96, 98, 99, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 144, 145, 148, 149, 150, 209, 210, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 321, 322, 325, 326, 327, 328, 331, 332, 333, 334, 335, 337, 339, 340, 342, 344, 346, 348, 349, 350, 351, 355, 358, 363, 365, 368, 371, 372, 373, 374, 377, 378, 381, 383, 385, 387, 388, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 403, 404, 405, 407, 408, 409, 410, 413, 415, 416, 418, 420, 422, 423, 425, 431, 432, 437, 438, 439, 440, 445, 449, 450, 451, 452, 454, 455, 458, 459, 460, 465, 466, 468, 470, 471, 472, 473, 475, 479, 481, 482, 483, 484, 486, 488, 489, 490, 492, 493, 495, 500, 501, 503, 504, 505, 507, 508, 511, 518, 519, 520, 521, 528, 536, 537, 541, 542, 543, 548, 549, 551, 558, 572, 573, 610, 611, 612, 615, 617, 618, 619, 620, 622, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 659, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 687, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 751, 752, 753, 754, 756, 757, 758, 759, 760, 761, 762, 763, 764, 769, 787, 788, 792, 794, 813, 814, 815, 816, 819, 820, 824, 825, 826, 827, 828, 829, 832, 833, 834, 836, 837, 840, 841, 842, 843, 845, 849, 850, 855, 857, 860, 861, 867, 873], "taken": [33, 53, 58, 76, 81, 337, 368, 371, 416, 633, 667, 687, 814, 824, 837, 841, 850, 867], "account": [33, 43, 45, 53, 60, 76, 83, 283, 374, 470, 628, 635, 702, 787, 801, 815, 824, 828, 837, 841, 859], "rather": [33, 54, 70, 77, 122, 209, 560, 561, 564, 625, 627, 630, 632, 657, 812, 816, 819, 823, 825, 828, 830, 837, 838, 840, 841, 850, 851, 856, 862, 865, 866], "fact": [33, 93, 816, 819, 824, 837, 840, 845, 848], "consum": [33, 769, 823, 824, 832, 838, 840], "thrown": [33, 558, 630, 815, 820, 826, 829, 831, 851], "doesn": [33, 558, 576, 630, 767, 788, 814, 815, 821, 823, 824, 825, 826, 827, 830, 831, 833, 835, 840, 843, 845, 851, 859, 864], "consider": [33, 814, 827, 832, 843, 855, 863, 864], "effect": [33, 49, 53, 55, 66, 76, 78, 89, 135, 373, 407, 452, 611, 619, 625, 631, 632, 643, 659, 760, 762, 772, 775, 814, 820, 823, 824, 828, 832, 836, 838, 843, 851, 856], "explain": [33, 53, 76, 371, 405, 416, 808, 814, 815, 816, 819, 820, 821, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 835, 836, 837, 840, 841, 843, 845, 846, 847, 848, 849, 850, 862, 869, 872], "necessari": [33, 49, 53, 72, 76, 83, 124, 236, 269, 373, 374, 448, 458, 459, 460, 466, 468, 469, 470, 471, 472, 479, 495, 581, 604, 628, 630, 698, 699, 700, 702, 704, 705, 707, 709, 808, 814, 815, 820, 821, 823, 825, 827, 836, 837, 840, 842, 843, 859, 860], "standalon": [34, 814, 820, 840, 853, 862, 867, 872, 873], "dynam": [34, 635, 702, 790, 797, 818, 824, 825, 826, 836, 837, 842, 845, 859, 866, 870], "static": [34, 53, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 102, 103, 125, 315, 371, 392, 405, 410, 419, 441, 447, 486, 498, 591, 625, 632, 659, 678, 785, 790, 837, 842, 851, 865, 866, 867], "flow": [35, 823, 859, 866, 867], "statement": [35, 40, 824, 836, 840, 843, 851, 859, 860], "opposit": 35, "exclud": [35, 66, 76, 89, 122, 143, 324, 365, 519, 520, 625, 639, 737, 753, 772, 775, 797, 827, 845, 859], "todo": [36, 37, 38, 43, 46, 76, 520, 814, 825, 837], "aim": [39, 812, 816, 819, 830, 834, 837, 840, 844, 864, 866, 869], "interfac": [39, 72, 130, 625, 847, 850, 851, 853, 856, 862, 863, 864, 865, 866, 870, 873], "set_framework": [39, 46], "44": [39, 43, 52, 53, 62, 75, 76, 85, 222, 269, 279, 283, 284, 335, 368, 371, 392, 393, 628, 632, 633, 637, 640, 643, 655, 678, 722, 735, 736, 744, 755], "45": [39, 41, 43, 52, 53, 66, 75, 76, 78, 80, 85, 99, 220, 224, 236, 279, 280, 339, 340, 353, 368, 371, 383, 393, 403, 414, 519, 525, 611, 617, 628, 631, 633, 635, 643, 678, 704, 736, 737, 755, 772], "46": [39, 41, 43, 53, 62, 76, 80, 85, 134, 259, 280, 310, 365, 371, 391, 409, 410, 625, 628, 637, 715, 735, 736], "underneath": [39, 824, 864], "sai": [39, 814, 815, 830, 834, 847, 857, 874], "clip": [39, 52, 53, 60, 75, 76, 77, 83, 267, 268, 374, 463, 488, 489, 536, 537, 628, 630, 635, 823, 833, 835, 836, 848, 850, 863], "a_min": 39, "a_max": 39, "tensforflow": 39, "clip_by_valu": [39, 850, 863], "clip_value_min": 39, "clip_value_max": 39, "clamp": [39, 53, 76, 296, 363, 850], "min": [39, 43, 50, 53, 54, 58, 66, 73, 76, 77, 81, 89, 141, 143, 161, 164, 268, 324, 327, 332, 365, 368, 372, 374, 426, 485, 526, 542, 572, 573, 588, 625, 626, 628, 630, 633, 643, 674, 680, 683, 684, 690, 808, 863], "max": [39, 41, 50, 53, 54, 58, 66, 73, 76, 77, 81, 89, 161, 164, 267, 331, 368, 371, 372, 373, 374, 390, 391, 392, 408, 409, 410, 411, 413, 415, 426, 448, 485, 487, 488, 536, 537, 542, 558, 572, 573, 626, 628, 630, 633, 643, 674, 676, 679, 772, 788, 792, 824, 837, 863], "49": [39, 43, 53, 62, 76, 80, 81, 283, 371, 372, 383, 393, 403, 414, 439, 519, 628, 643, 688, 736, 755], "devicearrai": [39, 820, 837, 845, 847], "concaten": [39, 53, 54, 60, 76, 81, 374, 465, 541, 545, 630, 632, 635, 659, 678, 696, 772, 838, 843, 845, 848], "accept": [39, 48, 49, 52, 53, 58, 71, 75, 76, 122, 123, 124, 126, 127, 128, 129, 131, 132, 133, 134, 135, 138, 139, 140, 141, 142, 143, 144, 145, 151, 167, 171, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 236, 237, 239, 241, 242, 243, 247, 248, 249, 250, 251, 252, 253, 256, 258, 259, 260, 261, 263, 264, 265, 266, 269, 271, 272, 273, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 309, 324, 325, 331, 332, 334, 337, 338, 360, 365, 368, 370, 371, 372, 374, 383, 390, 391, 392, 393, 395, 396, 397, 403, 408, 409, 410, 415, 417, 426, 480, 488, 492, 518, 521, 525, 534, 542, 543, 548, 552, 554, 556, 558, 572, 587, 591, 596, 620, 625, 626, 628, 630, 631, 632, 633, 635, 638, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 654, 655, 656, 659, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 689, 690, 691, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 733, 740, 741, 743, 744, 745, 746, 747, 748, 749, 752, 756, 757, 758, 759, 760, 761, 762, 763, 764, 808, 814, 815, 816, 820, 823, 825, 826, 827, 828, 832, 833, 834, 835, 836, 837, 838, 840, 841, 843, 847, 853, 864], "jax_concat": 39, "tf_concat": 39, "np_concat": 39, "torch_concat": 39, "85": [39, 47, 53, 62, 69, 75, 76, 78, 80, 85, 99, 108, 221, 230, 231, 275, 291, 292, 295, 363, 383, 519, 588, 615, 622, 628, 630, 631, 632, 639, 656, 735, 736, 737], "mymodel": [39, 848], "x_in": [39, 848, 849, 850], "reduce_mean": [39, 808, 848, 849, 850], "91": [39, 53, 80, 85, 356, 368, 414, 632, 633, 639, 643, 656, 678, 736, 755], "49040043354034424": 39, "48975786566734314": 39, "4892795979976654": 39, "48886892199516296": 39, "4884953498840332": 39, "4881443977355957": 39, "4878086447715759": 39, "48748287558555603": 39, "48716384172439575": 39, "48684927821159363": 39, "48653748631477356": 39, "48622724413871765": 39, "4859171509742737": 39, "48560672998428345": 39, "48529526591300964": 39, "4849821627140045": 39, "48466697335243225": 39, "4843493402004242": 39, "4840289056301117": 39, "4837053418159485": 39, "4833785891532898": 39, "4830484390258789": 39, "48271444439888": 39, "48237672448158264": 39, "48203518986701965": 39, "48168954253196716": 39, "4813397228717804": 39, "4809857904911041": 39, "48062753677368164": 39, "48026490211486816": 39, "479898065328598": 39, "47952669858932495": 39, "4791509211063385": 39, "4787706732749939": 39, "47838595509529114": 39, "4779967665672302": 39, "47760307788848877": 39, "4772048890590668": 39, "47680220007896423": 39, "47639501094818115": 39, "47598329186439514": 39, "4755673110485077": 39, "4751465618610382": 39, "4747215211391449": 39, "4742920398712158": 39, "47385817766189575": 39, "47341999411582947": 39, "47297725081443787": 39, "4725303053855896": 39, "47207894921302795": 39, "47162333130836487": 39, "47116345167160034": 39, "470699280500412": 39, "47023090720176697": 39, "54": [39, 50, 52, 57, 75, 76, 80, 85, 164, 233, 234, 239, 254, 283, 289, 310, 365, 371, 383, 393, 403, 519, 628, 632, 633, 643, 656, 675, 678, 735, 736, 737, 755, 824, 827], "4697583019733429": 39, "55": [39, 47, 76, 85, 114, 230, 289, 383, 519, 556, 628, 630, 633, 639, 643, 672, 678, 736, 737, 755, 819], "46928152441978455": 39, "46880054473876953": 39, "4683155119419098": 39, "58": [39, 260, 536, 628, 630], "4678264260292053": 39, "59": [39, 52, 231, 383, 519], "46733325719833374": 39, "46683603525161743": 39, "61": [39, 41, 52, 53, 58, 75, 76, 78, 82, 85, 222, 257, 259, 284, 393, 611, 628, 631, 632, 633, 654, 671, 737, 830], "4663347601890564": 39, "4658295214176178": 39, "465320348739624": 39, "4648073613643646": 39, "46429020166397095": 39, "4637692868709564": 39, "46324464678764343": 39, "4627160429954529": 39, "4621836841106415": 39, "4616474211215973": 39, "71": [39, 52, 75, 80, 235, 275, 414, 628], "46110764145851135": 39, "72": [39, 53, 62, 76, 78, 241, 345, 368, 371, 393, 403, 615, 628, 631, 633, 643, 678, 736, 755], "460563987493515": 39, "4600166976451874": 39, "74": [39, 41, 52, 85, 231, 261, 628, 633, 675], "45946577191352844": 39, "45891112089157104": 39, "45835286378860474": 39, "4577910006046295": 39, "78": [39, 55, 280, 617, 628, 631, 633, 639, 643, 678, 736, 755], "45722562074661255": 39, "79": [39, 41, 53, 54, 76, 77, 80, 85, 98, 236, 371, 393, 403, 414, 536, 537, 628, 630, 737], "45665669441223145": 39, "80": [39, 53, 76, 345, 368, 372, 383, 439, 519, 633, 637, 643, 678, 725, 755, 856], "4560841917991638": 39, "81": [39, 43, 52, 58, 73, 75, 81, 85, 164, 234, 259, 260, 284, 383, 519, 626, 628, 633, 637, 639, 643, 671, 675, 688, 722, 737, 755, 840], "4555082619190216": 39, "45492875576019287": 39, "45434585213661194": 39, "84": [39, 57, 66, 75, 85, 164, 194, 259, 626, 627, 633, 638, 643, 656, 678, 733, 736, 737, 755], "45375964045524597": 39, "4531698524951935": 39, "4525766670703888": 39, "45198020339012146": 39, "4513803720474243": 39, "4507772624492645": 39, "4501707851886749": 39, "4495610296726227": 39, "4489481747150421": 39, "44833192229270935": 39, "4477125108242035": 39, "44708991050720215": 39, "44646409153938293": 39, "44583529233932495": 39, "98": [39, 47, 53, 55, 62, 69, 75, 78, 85, 109, 234, 282, 356, 368, 615, 622, 631, 633, 637, 640, 643, 678, 715, 726, 735, 737, 744, 755], "4452032148838043": 39, "44456806778907776": 39, "4439": 39, "selectbackward0": 39, "hope": [39, 851, 856, 872, 874], "ivy_compil": 40, "ic": 40, "produc": [40, 53, 54, 57, 76, 80, 298, 308, 311, 363, 365, 371, 419, 632, 662, 772, 802, 814, 825, 830, 831, 836, 838, 840, 841, 859, 867, 869], "numer": [40, 49, 50, 52, 53, 54, 58, 62, 63, 66, 73, 75, 76, 77, 81, 85, 86, 88, 98, 99, 135, 148, 216, 219, 232, 236, 241, 242, 243, 250, 251, 252, 255, 264, 265, 269, 271, 272, 273, 274, 278, 279, 280, 284, 285, 289, 290, 371, 373, 378, 383, 415, 450, 505, 518, 578, 579, 588, 589, 601, 602, 625, 626, 628, 630, 633, 639, 640, 643, 664, 671, 673, 678, 681, 683, 685, 687, 689, 735, 736, 737, 739, 740, 741, 743, 744, 749, 756, 759, 761, 772, 773, 774, 775, 787, 812, 825, 830, 835, 837, 838, 840, 841, 842, 843, 845, 849, 863, 866, 872], "anyth": [40, 53, 76, 383, 524, 525, 816, 829, 840, 841, 866, 867], "affect": [40, 46, 53, 373, 453, 824, 837], "intermedi": [40, 864, 865, 866, 867, 872], "variabl": [40, 42, 43, 45, 53, 54, 55, 61, 70, 76, 77, 78, 84, 118, 119, 121, 318, 365, 371, 372, 378, 383, 417, 443, 506, 517, 518, 534, 558, 559, 560, 561, 564, 591, 612, 613, 615, 617, 618, 619, 624, 630, 631, 633, 636, 638, 682, 711, 712, 713, 733, 769, 780, 785, 787, 788, 789, 790, 791, 792, 793, 816, 821, 825, 828, 832, 835, 836, 840, 841, 845, 848, 849, 850, 851, 852, 859, 867], "original_fn": 40, "100000": 40, "var": [40, 66, 89, 91, 118, 119, 120, 121, 624, 636, 643, 711, 712, 794, 815, 827, 845, 863], "co": [40, 41, 52, 54, 75, 234, 239, 241, 282, 545, 628, 630, 813, 825, 845, 856], "sin": [40, 52, 54, 75, 234, 239, 241, 282, 545, 628, 630, 820, 845], "tan": [40, 52, 75, 532, 628, 630, 828, 832, 833, 836, 837, 845], "comp_fn": 40, "compile_graph": [40, 46], "expected_result": 40, "compiled_result": 40, "irrelev": [40, 824, 825, 827], "opeat": 40, "_layer": [40, 845], "net": [40, 45, 46, 845, 850, 856, 857], "compiled_net": 40, "proceed": 41, "latest": [41, 43, 52, 53, 75, 76, 151, 239, 249, 250, 265, 331, 332, 368, 371, 374, 383, 415, 417, 488, 518, 626, 628, 633, 635, 643, 681, 682, 710, 760, 788, 808, 814, 815, 816, 819, 821, 824, 828, 830, 841, 851, 852, 860, 871], "pypi": [41, 43, 46, 814, 815, 841, 851], "pkg": [41, 43, 46], "public": [41, 43, 46, 538, 630, 824, 835, 847, 869], "revis": [41, 43, 816], "tmp": [41, 43, 585, 608, 630], "req": [41, 43], "tabqrujw": 41, "command": [41, 43, 808, 810, 815, 819, 822, 824, 830, 831, 852], "filter": [41, 43, 45, 53, 57, 76, 80, 313, 314, 365, 371, 392, 410, 632, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 774, 788, 808, 821, 824], "quiet": [41, 43], "commit": [41, 43, 811, 812, 814, 817, 819, 827, 839, 840], "f3be3702c9fab1c9fa97c743813a4bdb39525705": 41, "metadata": [41, 43, 46, 836], "setup": [41, 43, 46, 815, 816, 822, 824, 830], "done": [41, 43, 46, 633, 670, 813, 814, 815, 816, 819, 822, 824, 826, 827, 830, 831, 836, 837, 840, 848, 859, 860, 866], "py3": [41, 43, 46], "whl": [41, 42, 43, 46], "cp39": [41, 43], "manylinux_2_12_x86_64": [41, 43], "manylinux2010_x86_64": [41, 43], "manylinux_2_17_x86_64": [41, 43, 815], "manylinux2014_x86_64": [41, 42, 43], "eta": [41, 43, 46], "tar": [41, 42, 43, 46], "gz": [41, 42, 43, 46], "py2": [41, 43], "495": [41, 43], "nvidia_ml_pi": [41, 43], "pypars": [41, 43, 46], "ivy_cor": [41, 43, 46, 815], "1338326": 41, "sha256": [41, 43, 46], "e5c4205c80116b781373daf4502d61881235c5e3eb0d55096ab07dcc6eb66bec": 41, "store": [41, 43, 46, 50, 53, 54, 58, 60, 70, 73, 76, 77, 81, 83, 150, 371, 372, 416, 424, 428, 442, 446, 545, 630, 633, 635, 687, 704, 769, 770, 788, 789, 790, 810, 816, 820, 821, 823, 828, 834, 836, 837, 838, 845, 847, 848, 849, 853, 859], "ephem": [41, 43], "njrc_e6b": 41, "2e": [41, 43], "ae2d7c5ce8708e605368a33e08d57d1de8e107e3db157c3063": [41, 43], "4845": [41, 43], "a8cde63eca203d3bd7f900fa32f44dbd038476606a3836de14caf2b0a5ff7460": 41, "b6": [41, 43], "0d": [41, 43], "0d1bbd99855f99cb2f6c2e5ff96f8023fad8ec367695f7d72d": [41, 43], "successfulli": [41, 43, 46, 790, 811, 815, 820], "uninstal": [41, 43, 46], "found": [41, 43, 44, 46, 58, 60, 64, 70, 76, 81, 83, 87, 99, 197, 383, 465, 519, 627, 637, 667, 673, 706, 725, 745, 802, 811, 814, 815, 816, 820, 821, 822, 823, 825, 826, 828, 831, 834, 836, 837, 852, 868], "vnd": [41, 43, 46], "json": [41, 43, 46, 70, 815, 830, 848], "psst": 41, "cv2": [41, 43, 45, 848], "pickl": [41, 42, 70, 790, 823, 848], "imageio": 41, "urllib": [41, 46], "_src": 41, "tpu": [41, 190, 196, 205, 207, 212, 627, 806, 826, 866, 869], "back": [41, 53, 60, 76, 83, 374, 470, 491, 574, 598, 630, 632, 635, 659, 702, 787, 792, 802, 815, 820, 825, 826, 829, 834, 835, 842, 844, 851, 852, 856, 864, 868], "tf_cpp_min_log_level": 41, "info": [41, 805, 806, 808, 822, 828, 831], "mkdir": [41, 42, 43, 815, 824], "perceiv": [41, 42], "touch": 41, "io_processor": 41, "position_encod": 41, "absl": 41, "jmp": 41, "tabul": 41, "04": [41, 42, 49, 55, 69, 73, 76, 78, 108, 109, 134, 161, 241, 578, 611, 612, 617, 622, 625, 626, 628, 630, 631, 772, 815, 840], "29359": 41, "29k": 41, "67k": 41, "002": 41, "30179": 41, "47k": 41, "8107": 41, "9k": 41, "92k": 41, "itertool": 41, "preprocessor": 41, "vector": [41, 49, 53, 54, 57, 58, 76, 77, 80, 81, 93, 94, 96, 135, 361, 362, 370, 371, 372, 374, 377, 378, 383, 394, 425, 430, 438, 440, 445, 480, 482, 484, 502, 506, 518, 537, 541, 558, 610, 625, 630, 632, 633, 656, 659, 664, 668, 669, 671, 673, 678, 683, 684, 688, 689, 690, 691, 772, 788, 866], "perceiverbackbon": 41, "input_preprocessor": 41, "_input_preprocessor": 41, "_encod": 41, "__call__": [41, 769, 788, 789, 790, 808, 860], "is_train": 41, "po": [41, 802], "input_mask": 41, "network_input_is_1d": 41, "_input_is_1d": 41, "queri": [41, 42, 57, 70, 80, 194, 208, 551, 577, 627, 630, 632, 659, 662, 788, 823, 825, 830, 847, 866], "decod": [41, 848], "cross": [41, 43, 58, 59, 81, 82, 94, 633, 634, 692, 693, 694, 808, 824, 825], "attend": [41, 632, 659], "encoder_queri": 41, "latent": [41, 636, 712, 713], "imagepreprocessor": 41, "deal": [41, 790, 812, 826, 833, 835, 837, 840, 851], "image_s": 41, "fourier_pos_config": 41, "position_encoding_typ": 41, "fourier": [41, 53, 76, 371, 394, 399, 400, 404, 405, 415, 416, 419, 545, 630], "fourier_position_encoding_kwarg": 41, "concat_po": 41, "max_resolut": 41, "num_band": [41, 54, 77, 545, 630], "sine_onli": 41, "prep_typ": 41, "spatial_downsampl": 41, "cross_attend_widening_factor": 41, "cross_attention_shape_for_attn": 41, "kv": 41, "dropout_prob": 41, "num_block": 41, "num_cross_attend_head": 41, "num_self_attend_head": 41, "num_self_attends_per_block": 41, "num_z_channel": 41, "self_attend_widening_factor": 41, "use_query_residu": 41, "z_index_dim": 41, "z_pos_enc_init_scal": 41, "perceiver_backbon": [41, 808], "perceiverencod": 41, "At": [41, 814, 815, 816, 819, 830, 840, 841, 856, 866], "almost": [41, 813, 823, 838, 846, 848, 855], "publish": [41, 808, 851, 857, 860], "thankfulli": [41, 840], "perceiver_io": [41, 42], "imagenet_fourier_position_encod": 41, "pystat": 41, "imagenet_checkpoint": 41, "rb": 41, "ckpt": 41, "read": [41, 43, 53, 60, 70, 72, 76, 83, 130, 374, 470, 625, 635, 702, 814, 815, 822, 824, 830, 840, 842, 843, 866], "09": [41, 47, 52, 78, 85, 114, 274, 284, 611, 622, 628, 631, 736], "173": [41, 58, 633, 671], "194": 41, "217": [41, 829], "125": [41, 53, 58, 81, 230, 342, 368, 373, 449, 628, 633, 688], "177": [41, 43], "193776248": 41, "185m": 41, "octet": 41, "184": 41, "80m": 41, "144mb": 41, "144": 41, "mean_rgb": 41, "stddev_rgb": 41, "im": 41, "denorm": 41, "resize_and_center_crop": 41, "crop": [41, 53, 76, 371, 400, 405, 416], "center": [41, 787], "image_height": [41, 43, 808], "image_width": [41, 808], "padded_center_crop_s": 41, "minimum": [41, 52, 53, 54, 60, 63, 66, 75, 76, 77, 83, 86, 89, 216, 244, 271, 295, 327, 331, 332, 342, 363, 365, 368, 374, 383, 480, 516, 520, 526, 578, 579, 588, 589, 601, 602, 628, 630, 635, 640, 643, 695, 741, 756, 758, 772, 774, 775, 780, 825, 842, 863, 869, 873], "offset_height": 41, "offset_width": 41, "crop_window": 41, "inter_cub": 41, "ye": [41, 851], "dummy_input": [41, 808], "transpili": 41, "torch_perceiver_backbon": 41, "quicker": 41, "params_v": [41, 808, 860], "perceiverioclassifi": [41, 808], "max_pool": [41, 808], "huggingfac": [41, 859, 860], "Of": [41, 820, 836, 837, 848, 871, 872], "cours": [41, 815, 816, 819, 820, 827, 836, 837, 843, 848, 851, 871, 872], "468": 41, "huggingface_hub": 41, "multiprocess": [41, 70, 99, 630, 848, 851], "py39": 41, "132": [41, 76], "pyarrow": 41, "xxhash": 41, "212": [41, 53, 57, 76, 355, 368, 656], "pyyaml": 41, "2021": [41, 53, 76, 358, 368, 808], "aiohttp": 41, "async": 41, "timeout": [41, 70, 99, 582, 605, 630, 842], "0a3": 41, "async_timeout": 41, "frozenlist": 41, "manylinux_2_5_x86_64": [41, 46], "manylinux1_x86_64": [41, 46], "158": 41, "attr": [41, 825], "aiosign": 41, "multidict": 41, "114": [41, 371, 393, 403], "yarl": 41, "264": [41, 637, 714], "2022": [41, 42], "pytz": 41, "2020": [41, 819, 866], "dateutil": [41, 46], "wikiart": 41, "paint": [41, 808, 845, 855], "load_dataset": [41, 859, 860], "n_sampl": [41, 53, 76, 372, 374, 421, 429, 483], "10000": [41, 43, 49, 72, 134, 625], "huggan": 41, "split": [41, 42, 43, 47, 52, 53, 60, 69, 70, 75, 76, 83, 106, 107, 108, 109, 110, 111, 112, 113, 114, 207, 208, 209, 287, 291, 296, 297, 299, 344, 351, 363, 374, 466, 475, 495, 541, 568, 622, 627, 628, 630, 632, 635, 645, 652, 653, 707, 769, 784, 788, 808, 809, 816, 824, 844, 845, 851, 873], "wiki_art": 41, "gib": 41, "unknown": [41, 772], "total": [41, 43, 53, 66, 70, 76, 89, 99, 130, 211, 326, 327, 328, 336, 365, 368, 373, 448, 625, 627, 640, 643, 743, 760, 762, 802, 808, 809, 815, 816, 825, 826, 827, 840, 843, 848, 849, 851, 857], "huggan___parquet": 41, "36ee951979f9b56c": 41, "2a3b91fbd88a2c90d1dbbb32b460cf621d31bd5b05b934492fdef7d8d6f236ec": 41, "parquet": 41, "subsequ": [41, 797, 815, 820, 824, 825, 827, 832, 833, 836, 840, 849, 867], "reus": [41, 49, 72, 76, 83, 124, 458, 459, 466, 468, 470, 471, 472, 479, 495, 698, 699, 700, 702, 704, 705, 707, 709, 829, 840, 871], "curl": [41, 815], "server": [41, 808, 815, 816, 822, 830, 852, 866], "row": [41, 53, 76, 94, 128, 143, 324, 365, 372, 374, 381, 383, 431, 443, 472, 478, 496, 511, 517, 518, 625, 633, 639, 640, 674, 682, 683, 688, 734, 743, 787], "2fwikiart": 41, "receiv": [41, 45, 93, 532, 568, 630, 636, 711, 712, 713, 788, 806, 811, 815, 816, 825, 826, 840, 843], "xferd": 41, "averag": [41, 43, 53, 55, 59, 76, 78, 82, 371, 373, 377, 383, 385, 386, 390, 391, 392, 450, 451, 452, 453, 454, 455, 502, 518, 611, 612, 617, 631, 632, 634, 636, 659, 692, 711, 712, 787, 788], "dload": 41, "upload": [41, 840], "spent": [41, 857], "25936": 41, "278k": 41, "number": [41, 43, 44, 45, 46, 49, 50, 52, 53, 54, 57, 58, 59, 60, 62, 63, 64, 66, 67, 70, 72, 73, 75, 76, 77, 80, 81, 82, 83, 85, 86, 87, 89, 90, 93, 94, 96, 98, 99, 102, 122, 128, 130, 132, 133, 134, 135, 136, 137, 138, 139, 143, 149, 154, 155, 156, 157, 158, 160, 161, 164, 167, 168, 169, 171, 173, 176, 200, 201, 202, 216, 217, 218, 219, 220, 222, 224, 225, 232, 234, 236, 237, 239, 241, 242, 243, 249, 250, 251, 253, 257, 259, 267, 268, 269, 270, 271, 272, 274, 276, 278, 279, 280, 282, 283, 287, 289, 315, 319, 320, 321, 322, 323, 324, 326, 327, 328, 330, 331, 332, 334, 335, 336, 337, 347, 352, 356, 365, 368, 371, 372, 373, 374, 377, 383, 405, 416, 419, 422, 425, 429, 430, 431, 441, 445, 447, 448, 458, 459, 460, 480, 481, 482, 483, 484, 486, 488, 490, 492, 494, 497, 498, 499, 516, 518, 519, 520, 521, 527, 545, 552, 570, 587, 588, 589, 596, 609, 610, 623, 625, 626, 627, 628, 630, 632, 633, 634, 635, 636, 639, 640, 641, 643, 644, 645, 652, 653, 655, 657, 659, 664, 668, 669, 670, 676, 681, 683, 687, 688, 689, 692, 695, 697, 698, 700, 701, 703, 704, 706, 708, 710, 711, 712, 713, 734, 738, 743, 745, 746, 753, 754, 756, 757, 758, 759, 760, 761, 762, 763, 764, 769, 772, 773, 774, 780, 787, 788, 791, 802, 806, 808, 815, 816, 823, 824, 825, 826, 827, 834, 835, 836, 840, 841, 842, 843, 845, 848, 854, 855, 859], "abstract_expression": 41, "action_paint": 41, "analytical_cub": 41, "art_nouveau": 41, "baroqu": 41, "color_field_paint": 41, "contemporary_r": 41, "cubism": 41, "early_renaiss": 41, "expression": 41, "fauvism": 41, "high_renaiss": 41, "impression": 41, "mannerism_late_renaiss": 41, "minim": [41, 47, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 98, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 125, 127, 129, 130, 132, 134, 135, 136, 137, 139, 141, 142, 145, 149, 150, 151, 164, 168, 169, 176, 193, 210, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 296, 297, 299, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 318, 325, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 365, 371, 373, 374, 383, 390, 391, 392, 393, 395, 396, 397, 399, 403, 404, 405, 408, 409, 410, 414, 415, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 430, 432, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 503, 505, 506, 507, 508, 509, 510, 511, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 533, 534, 536, 537, 540, 541, 542, 543, 544, 545, 548, 549, 552, 554, 556, 557, 558, 560, 561, 562, 564, 565, 567, 572, 573, 587, 588, 589, 590, 591, 593, 595, 596, 609, 611, 612, 615, 617, 618, 619, 620, 646, 647, 648, 649, 650, 651, 654, 655, 656, 658, 662, 663, 664, 666, 667, 668, 669, 670, 671, 672, 673, 674, 679, 680, 681, 683, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 733, 734, 735, 736, 737, 739, 740, 741, 742, 743, 744, 745, 746, 747, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 762, 763, 764, 802, 828, 836, 838, 843, 845, 859, 864, 872], "naive_art_primitiv": 41, "new_real": 41, "northern_renaiss": 41, "pointil": 41, "pop_art": 41, "post_impression": 41, "realism": 41, "rococo": 41, "romantic": 41, "symbol": [41, 801, 814, 815, 866, 867], "synthetic_cub": 41, "ukiyo_": 41, "custom": [41, 53, 76, 295, 307, 360, 363, 370, 772, 801, 810, 818, 824, 829, 834, 838, 840, 843, 849, 856, 866, 870, 871, 872], "hugginfac": 41, "customdataset": 41, "__len__": [41, 823], "__getitem__": [41, 70, 823], "idx": [41, 42, 43, 531, 630, 808, 826, 847], "random_split": 41, "224x224": 41, "val_siz": 41, "dataset_train": 41, "dataset_v": 41, "dataset_test": 41, "dataloader_train": 41, "batch_siz": [41, 43, 46, 53, 57, 62, 76, 80, 85, 371, 373, 390, 391, 392, 408, 409, 410, 411, 455, 632, 639, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 657, 659, 734, 808, 848], "dataloader_v": 41, "dataloader_test": 41, "batch": [41, 42, 43, 53, 54, 58, 70, 76, 77, 81, 207, 208, 371, 372, 373, 377, 385, 387, 388, 394, 407, 417, 434, 448, 450, 497, 498, 499, 502, 545, 548, 549, 610, 627, 630, 632, 633, 636, 638, 656, 657, 658, 659, 690, 711, 712, 713, 733, 772, 788, 791, 808, 823, 833, 838, 848, 864], "iter": [41, 43, 48, 53, 54, 60, 68, 70, 76, 77, 83, 91, 96, 99, 118, 209, 316, 317, 365, 371, 372, 374, 417, 430, 441, 447, 464, 480, 530, 568, 624, 627, 630, 635, 637, 697, 701, 708, 710, 715, 716, 717, 718, 719, 720, 722, 723, 724, 725, 726, 729, 730, 732, 801, 802, 806, 819, 821, 823, 845, 848, 857, 859], "train_featur": 41, "train_label": 41, "imshow": [41, 42], "crossentropyloss": [41, 789], "sgd": [41, 792, 866], "lr": [41, 55, 78, 532, 612, 615, 617, 618, 619, 630, 631, 792, 848, 849], "001": [41, 52, 53, 61, 73, 76, 78, 161, 259, 276, 334, 347, 368, 612, 626, 628, 631, 638, 733, 772, 848, 849], "train_step": 41, "running_loss": [41, 43, 808], "last_loss": 41, "training_load": 41, "intra": 41, "report": [41, 811, 814, 840], "zero_grad": 41, "backward": [41, 53, 67, 76, 90, 278, 371, 394, 399, 400, 404, 405, 415, 416, 628, 633, 644, 664, 689, 763, 764, 788, 806, 841, 851], "adjust": [41, 66, 89, 372, 443, 643, 760, 762, 797, 806], "999": [41, 55, 75, 78, 287, 611, 612, 617, 619, 628, 631, 792, 849], "epoch_numb": 41, "best_vloss": 41, "1_000_000": 41, "avg_loss": 41, "running_vloss": 41, "vdata": 41, "vinput": 41, "vlabel": 41, "voutput": 41, "vloss": 41, "avg_vloss": 41, "model_path": 41, "model_": 41, "state_dict": [41, 789, 790], "highest": [41, 53, 62, 76, 85, 315, 318, 365, 639, 735, 825], "energi": 41, "sum": [41, 43, 52, 53, 54, 57, 58, 59, 66, 70, 75, 76, 77, 80, 81, 82, 89, 93, 98, 99, 209, 219, 261, 285, 328, 352, 365, 368, 372, 373, 374, 377, 383, 414, 424, 448, 449, 450, 451, 452, 453, 454, 455, 485, 502, 524, 525, 542, 572, 573, 627, 628, 630, 632, 633, 634, 643, 655, 662, 674, 683, 687, 690, 692, 754, 755, 787, 789, 801, 808, 823, 825, 833, 835, 836, 837, 845, 859, 860, 861, 863], "augment": 41, "mayb": [41, 42, 48, 808, 815, 824, 845, 847], "meta": [41, 711, 712, 713, 820, 841, 866], "finetun": 41, "deploi": [41, 808, 824, 853, 860, 864, 865, 866, 868, 872], "present": [42, 53, 66, 70, 76, 89, 334, 368, 377, 497, 498, 499, 643, 758, 814, 815, 816, 823, 825, 826, 832, 836, 845, 855, 863, 864, 873], "percieverio": 42, "ai": [42, 824, 864, 868], "contribut": [42, 53, 76, 383, 521, 811, 813, 815, 816, 817, 822, 830, 831, 837, 838, 845, 852, 859, 870, 874], "highli": [42, 808, 814, 866], "invit": [42, 814, 817, 837, 843], "g4ar9q7dtn": 42, "step1": 42, "printf": 42, "8packag": 42, "share": [42, 70, 182, 626, 772, 773, 808, 821, 823, 827, 833, 835, 837, 838, 840, 843, 845, 856, 864, 865, 872], "googledr": 42, "10_wfp1u4rmzc20eignrdqa9v2s9byjwv": 42, "file_id": 42, "drive": [42, 43], "uc": 42, "tee": [42, 815], "file_id_wget_cmd": 42, "perl": 42, "pe": 42, "g": [42, 44, 45, 53, 62, 64, 66, 68, 76, 85, 91, 93, 147, 176, 189, 236, 249, 269, 276, 279, 331, 332, 368, 371, 372, 374, 378, 383, 408, 410, 447, 488, 504, 505, 506, 507, 508, 519, 520, 626, 627, 628, 633, 637, 639, 641, 643, 669, 670, 674, 681, 683, 684, 690, 717, 721, 723, 726, 731, 735, 736, 737, 745, 746, 747, 748, 753, 754, 756, 758, 759, 761, 787, 806, 809, 814, 815, 818, 819, 821, 822, 823, 835, 837, 840, 845, 851, 853, 857, 862], "uuid": 42, "anywai": [42, 820, 834, 837], "bin": [42, 53, 76, 383, 516, 521, 815, 816, 819, 823], "bash": [42, 815, 816, 819], "step2": 42, "interpret": [42, 49, 53, 72, 76, 123, 124, 130, 136, 373, 383, 450, 518, 625, 824, 867], "sudo": [42, 815], "apt": [42, 815], "yf": 42, "step3": 42, "delet": [42, 816, 824], "xvzf": 42, "rm": [42, 44, 810, 816], "step4": 42, "symlink": 42, "unzip": [42, 43], "fr": 42, "l": [42, 53, 58, 75, 81, 263, 372, 373, 425, 448, 632, 633, 659, 663, 668, 669, 670, 673, 687, 816, 818], "d": [42, 53, 54, 57, 58, 60, 72, 76, 77, 80, 81, 83, 96, 112, 134, 143, 176, 219, 236, 237, 269, 272, 324, 365, 371, 372, 374, 377, 378, 381, 390, 391, 392, 399, 404, 408, 409, 410, 411, 413, 417, 423, 439, 460, 466, 468, 471, 475, 489, 491, 495, 502, 504, 510, 533, 544, 622, 625, 626, 628, 632, 633, 635, 637, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 666, 667, 671, 674, 678, 687, 688, 704, 717, 721, 722, 723, 726, 731, 732, 773, 802, 808, 809, 815, 818, 821, 822, 823, 830, 835, 840, 843, 848, 856, 857, 862], "ln": 42, "sf": 42, "la": 42, "step5": 42, "regular": [42, 76, 372, 383, 434, 439, 522, 815, 837, 866], "step6": 42, "ipkykernel": 42, "step7": 42, "engbjapanpython3": 42, "separ": [42, 53, 54, 76, 377, 498, 545, 630, 632, 659, 769, 780, 815, 816, 820, 823, 824, 827, 838, 839, 840, 845, 847, 848, 867, 871], "ipykernel": 42, "reconnect": 42, "sy": [42, 874], "oct": 42, "gcc": [42, 864, 871], "lf": 42, "upgrad": 42, "cuda11": 42, "cudnn805": 42, "cp38": [42, 46, 815], "helper": [42, 767, 769, 770, 776, 778, 779, 808, 812, 822, 825, 829, 830, 839, 848, 853], "feedforward": 42, "prenorm": 42, "perceiveriospec": 42, "fetch": [42, 553, 630, 815, 816, 819, 824], "ogbanugot": [42, 874], "xmartlab": 42, "caffeflow": 42, "fetch_class": 42, "class_label": 42, "ground_truth": 42, "127": [42, 50, 53, 58, 73, 76, 164, 355, 368, 626, 633, 671], "path_to_imag": 42, "get_imag": 42, "ax": [42, 47, 53, 58, 60, 63, 66, 67, 69, 76, 81, 83, 86, 89, 90, 98, 102, 109, 113, 209, 331, 332, 336, 337, 352, 359, 368, 369, 371, 372, 374, 377, 383, 400, 405, 416, 442, 479, 480, 486, 500, 523, 524, 525, 526, 527, 528, 541, 610, 627, 630, 633, 635, 640, 643, 644, 664, 674, 682, 685, 686, 690, 697, 699, 700, 703, 705, 707, 710, 740, 741, 756, 757, 758, 759, 760, 761, 762, 763, 764, 772, 774, 788, 825, 827, 840, 841, 845, 847], "fig": [42, 43], "subplot": [42, 43], "spine": 42, "set_vis": 42, "right": [42, 53, 58, 70, 76, 81, 99, 116, 117, 228, 230, 283, 346, 368, 371, 372, 374, 406, 436, 442, 443, 445, 471, 541, 624, 628, 630, 633, 642, 683, 688, 751, 772, 809, 814, 815, 816, 818, 819, 827, 830, 843, 848, 859], "bottom": [42, 541, 630, 814, 815, 824, 830, 872], "tick_param": 42, "set_xticklabel": 42, "set_yticklabel": 42, "show_result": 42, "along": [42, 47, 49, 52, 53, 54, 58, 59, 60, 62, 63, 65, 66, 67, 69, 70, 72, 75, 76, 77, 81, 82, 83, 85, 86, 88, 89, 90, 93, 94, 96, 109, 113, 118, 133, 134, 209, 283, 286, 288, 326, 327, 328, 331, 332, 336, 337, 352, 359, 365, 368, 369, 371, 372, 373, 374, 377, 383, 393, 399, 400, 403, 404, 405, 415, 416, 441, 452, 465, 466, 467, 469, 471, 472, 480, 485, 488, 490, 492, 500, 501, 502, 503, 519, 520, 521, 523, 524, 525, 526, 527, 528, 541, 548, 624, 625, 627, 628, 630, 633, 634, 635, 636, 639, 640, 642, 643, 644, 664, 678, 687, 689, 690, 692, 693, 694, 696, 699, 700, 701, 703, 704, 706, 708, 709, 711, 712, 713, 739, 740, 741, 749, 750, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 769, 772, 788, 808, 814, 817, 818, 827, 836, 839, 841, 843, 845, 866], "figur": [42, 842], "figsiz": [42, 43], "listdir": [42, 43], "endswith": 42, "this_dir": 42, "dirnam": 42, "join": [42, 43, 60, 70, 76, 83, 464, 465, 635, 696, 706, 808, 817], "add_subplot": 42, "xtick": 42, "ytick": 42, "set_titl": [42, 43], "color": [42, 70, 99, 807], "green": [42, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 99, 807, 814, 815, 816], "red": 42, "perceiver_io_img_classif": 42, "normalize_imag": 42, "batch_shap": [42, 57, 62, 72, 80, 85, 128, 137, 625, 632, 633, 639, 658, 662, 691, 734, 788, 843, 845, 847], "img_dim": 42, "queries_dim": 42, "learn_queri": 42, "load_weight": 42, "num_input_ax": 42, "network_depth": 42, "num_lat_att_per_lay": 42, "query_shap": 42, "num_fourier_freq_band": 42, "weight_fpath": 42, "pretrained_weight": 42, "isfil": 42, "noinspect": [42, 847], "pybroadexcept": 42, "from_disk_as_pickl": 42, "larg": [42, 52, 53, 75, 76, 219, 236, 243, 269, 270, 374, 383, 488, 518, 628, 633, 681, 810, 815, 816, 822, 824, 830, 848, 859, 866], "action": [42, 806, 813, 824, 827, 831, 840], "fail": [42, 767, 812, 815, 816, 819, 824, 825, 827, 831, 834, 836, 837, 838], "placehold": [42, 637, 721, 726, 731, 788, 816, 820, 832, 853], "pyunboundlocalvari": 42, "max_fourier_freq": 42, "random_uniform": [42, 46, 62, 85, 639, 826, 829, 840, 845, 849], "817437": 42, "gpu_bfc_alloc": 42, "orig_valu": 42, "tf_force_gpu_allow_growth": 42, "autograd": [42, 851], "declar": [42, 816, 839], "_3r2_73j": 43, "0edf8c1e8ea835f4c456bdf89737d89032f50b5a": 43, "1297564": 43, "05fcafac1e19fec835a9ac61270b3ac6039a5095f6b0f9fde20bacc2a5abba45": 43, "le3bu3_v": 43, "cc6508f5d7e25538c5df5fdae52a41d2bf17b9a517aedd125cfca913bb5b259b": 43, "third": [43, 93, 94, 374, 467, 494, 633, 641, 683, 745, 822, 825, 836, 851, 865, 866, 872], "parti": [43, 822, 825, 851, 856, 865, 866, 872], "mount": [43, 810, 816], "mydriv": 43, "chdir": 43, "One": [43, 53, 54, 60, 62, 76, 77, 83, 85, 96, 374, 458, 459, 460, 463, 480, 489, 492, 542, 630, 635, 639, 702, 735, 820, 823, 825, 827, 833, 838, 840, 845, 847, 848], "kaggl": 43, "medium": 43, "articl": [43, 808, 831], "insert": [43, 53, 63, 76, 86, 374, 455, 465, 635, 637, 640, 642, 698, 718, 719, 740, 751, 824, 831], "www": [43, 331, 332, 368], "your_kaggle_usernam": 43, "competit": 43, "digit": 43, "recogn": [43, 811, 817], "zip": [43, 845], "readabl": [43, 820, 823, 829, 831, 832, 840, 841, 847, 848], "chmod": [43, 815, 824], "recent": [43, 805, 815, 816, 840, 855, 856], "modifi": [43, 53, 70, 76, 93, 374, 383, 477, 480, 485, 525, 772, 802, 814, 815, 816, 819, 821, 822, 825, 826, 828, 830, 831, 833, 836, 838, 840, 841, 845], "forc": [43, 822, 824, 826], "archiv": [43, 815], "inflat": [43, 825], "sample_submiss": 43, "frame": [43, 53, 76, 315, 365, 371, 419, 856, 866], "later": [43, 70, 535, 630, 814, 831, 836, 840, 841, 866], "my": [43, 824], "label_df": 43, "mod_train": 43, "data_valu": 43, "test_data_valu": 43, "correct_label": 43, "train_path": 43, "str": [43, 45, 48, 49, 53, 54, 57, 58, 59, 60, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 106, 107, 108, 109, 110, 111, 112, 113, 114, 119, 121, 130, 132, 135, 137, 139, 145, 146, 149, 151, 153, 154, 155, 156, 160, 161, 164, 165, 166, 167, 168, 169, 171, 173, 176, 177, 178, 179, 180, 181, 188, 189, 209, 210, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 247, 248, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 305, 306, 307, 309, 330, 331, 332, 333, 334, 336, 338, 346, 347, 353, 355, 357, 358, 359, 371, 372, 373, 374, 377, 383, 386, 390, 391, 392, 394, 395, 396, 397, 399, 400, 404, 405, 408, 409, 410, 411, 413, 414, 415, 416, 418, 419, 422, 426, 441, 447, 448, 449, 450, 451, 452, 453, 454, 455, 458, 459, 460, 463, 464, 465, 470, 486, 488, 489, 490, 491, 492, 497, 498, 499, 500, 501, 503, 505, 507, 518, 519, 520, 521, 528, 530, 531, 533, 534, 536, 537, 539, 541, 542, 543, 544, 545, 548, 549, 552, 554, 556, 557, 558, 560, 561, 564, 569, 572, 573, 575, 576, 585, 587, 588, 589, 591, 593, 595, 596, 609, 613, 620, 624, 625, 626, 627, 630, 631, 632, 633, 634, 635, 636, 637, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 662, 663, 664, 669, 670, 671, 672, 673, 674, 676, 678, 680, 681, 684, 687, 692, 693, 694, 695, 699, 702, 703, 704, 705, 706, 709, 710, 711, 712, 713, 720, 721, 726, 731, 734, 735, 736, 737, 739, 742, 745, 746, 747, 749, 753, 754, 755, 757, 759, 760, 762, 763, 764, 769, 770, 772, 773, 778, 780, 788, 790, 791, 801, 802, 806, 825, 826, 829, 833, 836, 837, 841, 845, 850, 859, 860, 861], "makedir": 43, "valid_path": 43, "28x28": 43, "pic": 43, "pictur": [43, 808, 814, 845, 855], "int8": [43, 50, 62, 72, 73, 85, 130, 157, 162, 164, 165, 169, 625, 626, 735, 772, 773, 825, 840], "new_img": [43, 45], "builder": [43, 810], "batchwis": 43, "subset": [43, 774, 820, 824, 828, 832, 835, 837, 840, 845, 866], "goe": [43, 374, 463, 818, 831, 836, 843], "seed_valu": [43, 70, 639, 738], "randomize_dataset": 43, "shuffl": [43, 53, 62, 70, 76, 85, 506, 639], "create_dataset": 43, "num_examples_per_class": 43, "img_arrai": 43, "class_nam": [43, 769], "dir": [43, 848], "img_path": 43, "imread": [43, 45, 848], "imread_grayscal": 43, "generate_batch": [43, 808], "dataset_s": [43, 808], "ivyerror": [43, 803, 808, 829], "smaller": [43, 53, 60, 66, 76, 83, 298, 330, 347, 363, 368, 371, 373, 383, 400, 405, 416, 448, 518, 519, 520, 541, 630, 635, 643, 695, 703, 753, 754, 759, 761, 808, 816, 829, 845], "yield": [43, 63, 316, 317, 365, 374, 480, 640, 744, 808, 824], "x_batch_inst": 43, "form": [43, 45, 48, 49, 53, 58, 70, 72, 81, 92, 93, 94, 123, 124, 136, 141, 142, 308, 311, 325, 334, 365, 368, 372, 374, 425, 436, 467, 476, 480, 496, 531, 592, 594, 625, 630, 632, 633, 637, 663, 665, 667, 668, 669, 670, 672, 674, 675, 676, 677, 679, 680, 681, 682, 683, 684, 687, 715, 726, 772, 787, 809, 814, 815, 833, 840, 843, 849, 850, 856, 866, 867, 872], "intialis": 43, "num_epoch": [43, 808], "inherit": [43, 820, 823, 829, 847, 851, 853], "creation": [43, 53, 70, 76, 99, 822, 825, 826, 832, 834, 837, 838, 840, 841, 845, 859, 866, 868, 872], "inform": [43, 45, 50, 53, 55, 73, 78, 161, 164, 315, 365, 531, 620, 626, 630, 631, 636, 713, 806, 808, 813, 814, 815, 816, 817, 819, 823, 824, 829, 833, 834, 836, 838, 840, 869], "insid": [43, 58, 81, 99, 374, 490, 633, 676, 770, 815, 816, 820, 823, 825, 826, 830, 833, 834, 840, 841, 859, 872], "ivynet": [43, 808], "h_w": [43, 808], "input_channel": [43, 788, 808, 845, 849], "output_channel": [43, 788, 808, 849], "gelu": [43, 44, 47, 69, 622, 784, 808], "image_widht": 43, "start_dim": [43, 53, 76, 374, 470, 808], "end_dim": [43, 53, 76, 374, 470, 808], "gpu_is_avail": [43, 627, 808], "120": [43, 66, 89, 99, 633, 678, 753, 808], "model_nam": [43, 808], "__name__": [43, 44, 46, 597, 630, 808, 829], "heavi": [43, 774, 815, 837, 838, 843, 867], "lift": [43, 838, 867], "num_correct": [43, 808], "y_pred": [43, 808], "cross_entropi": [43, 59, 82, 634, 694, 808, 823, 833, 836], "epoch_loss": [43, 808], "field": [43, 58, 64, 81, 87, 372, 374, 425, 494, 633, 641, 668, 669, 680, 681, 683, 745, 746, 747, 808, 824, 864, 872], "training_accuraci": [43, 808], "train_loss": [43, 808], "train_correct": [43, 808], "train_loop": [43, 808], "posit": [43, 45, 48, 52, 53, 54, 58, 59, 60, 75, 76, 77, 81, 82, 83, 93, 128, 130, 143, 161, 216, 217, 218, 222, 225, 236, 243, 250, 251, 257, 259, 269, 270, 277, 278, 282, 283, 287, 309, 324, 330, 335, 347, 365, 368, 372, 374, 423, 443, 454, 479, 488, 535, 545, 610, 623, 625, 626, 628, 630, 633, 634, 635, 639, 640, 644, 663, 666, 687, 692, 698, 703, 738, 743, 763, 764, 769, 772, 780, 785, 789, 790, 802, 808, 814, 816, 819, 823, 837, 840, 841, 848, 859, 868], "leav": [43, 48, 53, 71, 73, 75, 76, 77, 80, 81, 83, 89, 99, 161, 164, 236, 293, 296, 297, 303, 374, 464, 465, 470, 482, 483, 484, 500, 501, 503, 519, 520, 525, 545, 593, 635, 637, 651, 662, 667, 683, 697, 701, 706, 708, 709, 714, 715, 724, 725, 726, 727, 753, 754, 801, 808, 814, 823, 824, 825, 827, 828, 832, 833, 836, 837, 840, 848, 849], "xbatch": [43, 808], "ybatch": [43, 808], "to_devic": [43, 51, 74, 192, 627, 790, 808], "entropi": [43, 59, 82, 634, 692, 693, 694, 808], "hot": [43, 49, 72, 137, 625, 808], "ybatch_encod": [43, 808], "one_hot": [43, 49, 72, 625, 808, 850], "loss_prob": [43, 808], "ret_grad_idx": [43, 613, 631, 769, 835], "xs_grad_idx": [43, 613, 631, 769, 835], "batch_loss": [43, 808], "set_descript": [43, 808], "set_postfix": [43, 808], "accuracy_percentag": [43, 808], "naverag": [43, 808], "6f": [43, 808], "_train_summari": [43, 808], "writer": [43, 808], "writerow": [43, 808], "157it": 43, "06it": 43, "475401": 43, "11it": 43, "081436": 43, "13it": 43, "0187": 43, "029279": 43, "0324": 43, "008382": 43, "07it": 43, "00456": 43, "003816": 43, "82it": 43, "00277": 43, "002179": 43, "05it": 43, "00175": 43, "001569": 43, "00147": 43, "001235": 43, "09it": 43, "00128": 43, "001005": 43, "106": 43, "10it": 43, "00112": 43, "000837": 43, "129": [43, 632, 651, 653], "12it": 43, "000989": 43, "000709": 43, "145": 43, "000873": 43, "000606": 43, "168": [43, 536, 630, 637, 714], "08it": 43, "000774": 43, "000524": 43, "000688": 43, "000455": 43, "000613": 43, "000398": 43, "000547": 43, "000350": 43, "205": 43, "000488": 43, "000308": 43, "218": 43, "000437": 43, "000273": 43, "000391": 43, "000243": 43, "238": [43, 243, 628], "98it": 43, "000351": 43, "000216": 43, "260": 43, "plot_summari": 43, "seaborn": 43, "whitegrid": 43, "ax1": 43, "ax2": 43, "nrow": 43, "ncol": 43, "fontweight": 43, "bold": 43, "set_xlabel": 43, "set_ylabel": 43, "tight_layout": 43, "savefig": 43, "summary_plot": 43, "png": [43, 45, 46, 848], "close": [43, 58, 241, 259, 279, 308, 365, 628, 633, 635, 683, 698, 811, 812, 814, 815, 816, 817, 825, 828, 830, 837, 843, 866], "save_weight": [43, 790], "model_param": 43, "ivynet_weight": 43, "hdf5": [43, 70, 790, 848], "deitimageprocessor": 44, "tfdeitforimageclassif": 44, "tfdeitforimageclassificationwithteach": 44, "head": [44, 45, 632, 659, 788, 808, 813, 815, 824, 837, 863], "distillation_classifi": 44, "cls_classifi": 44, "randomli": [44, 371, 395, 396, 397, 632, 655, 772, 773, 774, 775, 780, 788], "henc": [44, 64, 219, 334, 368, 628, 635, 641, 698, 745, 746, 747, 748, 797, 815, 823, 824, 825, 836, 840], "image_processor": [44, 859, 860], "facebook": 44, "distil": [44, 867], "patch16": 44, "outputs_from_original_model": 44, "predicted_class_idx": 44, "id2label": [44, 859], "architectur": [44, 808, 815, 850, 851, 864, 865, 866, 869, 870, 871], "bertforsequenceclassif": 44, "bertforpretrain": 44, "NOT": [44, 264, 628, 801, 814], "probabl": [44, 53, 57, 59, 62, 76, 80, 82, 85, 371, 373, 378, 383, 395, 396, 397, 450, 504, 518, 521, 525, 632, 634, 639, 655, 659, 662, 692, 734, 774, 787, 788, 808, 840, 852, 857], "ptarmigan": 44, "rf": [44, 816], "branch": [44, 224, 236, 239, 241, 269, 281, 282, 283, 286, 628, 815, 816, 819, 824, 831, 851, 859, 866], "moduleconvert": [44, 785, 790], "mc": 44, "from_keras_modul": [44, 785], "compiled_func": 44, "return_graph": [44, 46], "compiled_output": 44, "diverg": [44, 53, 76, 243, 373, 450, 628], "_all_funct": [44, 46], "convert_to_tensor_v2_with_dispatch": 44, "transpose_v2": 44, "convolution_v2": 44, "bias_add": 44, "binary_op_wrapp": 44, "cast": [44, 50, 52, 53, 58, 66, 73, 75, 81, 148, 151, 176, 270, 383, 519, 520, 626, 628, 633, 643, 674, 690, 753, 754, 759, 761, 773, 833, 838, 845, 863], "moments_v2": 44, "batch_norm": [44, 46, 53, 76, 377], "tensordot": [44, 58, 81, 633, 802, 825], "softmax_v2": 44, "_slice_help": 44, "save_to_disk": [44, 46, 790], "12265048989200113": 44, "11038777417100028": 44, "1167045795539998": 44, "ivy_api_kei": 45, "obj": [45, 123, 124, 553, 625, 630, 859, 860, 861], "combo": [45, 848], "permit": [45, 820, 832, 837, 840, 843], "usabl": [45, 832, 841], "neither": [45, 219, 236, 243, 269, 628, 633, 685, 824, 837, 843], "nor": [45, 219, 236, 243, 269, 628, 824, 837, 870], "specifc": 45, "invoc": 45, "represent": [45, 53, 54, 70, 76, 77, 99, 146, 147, 161, 164, 189, 190, 216, 219, 226, 229, 231, 236, 243, 266, 269, 271, 286, 312, 344, 348, 353, 357, 365, 368, 531, 593, 623, 626, 627, 628, 630, 772, 774, 775, 788, 825, 864, 865, 867, 871, 872], "externally_link": 45, "logo": 45, "patch": [45, 287, 628, 825, 866], "cv2_imshow": 45, "envrion": 45, "canni": 45, "original_img": 45, "fn_arg": 45, "dilate_edg": 45, "edg": [45, 53, 60, 76, 83, 315, 365, 371, 374, 383, 407, 480, 521, 635, 695, 697, 710, 775, 819, 840, 860, 866, 868, 872], "morphologi": 45, "hk_model": 45, "resnet18": [45, 46], "keras_model": 45, "count": [45, 53, 60, 64, 67, 72, 76, 83, 87, 90, 130, 202, 336, 368, 374, 383, 488, 492, 494, 516, 521, 625, 627, 633, 635, 641, 644, 664, 689, 696, 699, 745, 746, 763, 764, 822, 823, 827, 848], "odsc": 45, "talk": [45, 871], "228": 46, "352": [46, 80, 632, 656, 829], "nvidia_ml_py3": 46, "19190": 46, "241af6b4a51197474b0da3ee7bfa32d847756c8f0d93b51448655d6458312714": 46, "b9": 46, "b1": [46, 633, 682], "cb4feab29709d4155310d29a421389665dcab9eb3b679b527b": 46, "cycler": 46, "fonttool": 46, "965": 46, "pillow": 46, "kiwisolv": 46, "show_graph": [46, 790], "to_ivy_modul": [46, 785, 850], "image_dim": 46, "v0": [46, 849], "urlerror": 46, "dev_str": 46, "comp_network": 46, "time_chronolog": 46, "ret0_nc": 46, "ret1_nc": 46, "ret0_c": 46, "ret1_c": 46, "pytorch_vision_v0": 46, "distribut": [46, 53, 59, 62, 76, 82, 85, 371, 372, 373, 378, 395, 396, 397, 430, 441, 447, 450, 452, 453, 455, 504, 505, 506, 507, 508, 634, 639, 692, 693, 694, 734, 735, 736, 737, 739, 787, 788, 814, 815, 824, 826, 851, 866, 869], "distributed_c10d": 46, "262": 46, "reduce_op": 46, "deprec": 46, "reduceop": 46, "004645566477999864": 46, "0044566806820000695": 46, "attribut": [46, 70, 161, 162, 163, 164, 195, 196, 204, 546, 547, 626, 627, 630, 770, 821, 822, 823, 828, 829, 833, 834, 836, 837, 843, 846, 847, 848, 849], "definit": [46, 52, 58, 75, 81, 288, 628, 633, 663, 808, 812, 816, 820, 825, 830, 833, 847, 860], "max_pool2d": [46, 53, 76, 371, 391], "__iadd__": 46, "adaptive_avg_pool2d": [46, 53, 76, 371], "_arraywithactiv": [47, 98], "abc": [47, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 102, 544, 630, 637, 732, 787, 792, 801, 802, 847], "_abc_impl": [47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 102, 103], "_abc": [47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 102, 103], "_abc_data": [47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 102, 103], "approxim": [47, 52, 53, 58, 69, 75, 76, 81, 93, 96, 106, 217, 218, 221, 222, 223, 224, 233, 234, 239, 241, 243, 257, 258, 259, 260, 274, 281, 282, 286, 287, 288, 345, 355, 368, 373, 452, 453, 622, 628, 633, 676, 679, 784, 828, 837], "complex_mod": [47, 52, 53, 69, 75, 76, 106, 107, 108, 109, 110, 111, 112, 113, 114, 287, 291, 296, 297, 299, 363, 622, 628, 784, 834], "variant": [47, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 98, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 125, 127, 129, 130, 132, 134, 135, 136, 137, 139, 141, 142, 145, 149, 150, 151, 161, 164, 168, 169, 176, 193, 210, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 296, 297, 299, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 318, 325, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 371, 374, 383, 390, 391, 392, 393, 395, 396, 397, 399, 403, 404, 405, 408, 409, 410, 414, 415, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 430, 432, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 503, 505, 506, 507, 508, 509, 510, 511, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 533, 534, 536, 537, 540, 541, 542, 543, 544, 545, 548, 549, 552, 554, 556, 557, 558, 560, 561, 562, 564, 565, 567, 572, 573, 587, 588, 589, 590, 591, 593, 595, 596, 609, 611, 612, 615, 617, 618, 619, 620, 646, 647, 648, 649, 650, 651, 654, 655, 656, 658, 662, 663, 664, 666, 667, 668, 669, 670, 671, 672, 673, 674, 676, 679, 680, 681, 683, 687, 688, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 733, 734, 735, 736, 737, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 762, 763, 764, 820, 827, 828, 843], "docstr": [47, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 98, 106, 107, 108, 109, 110, 111, 112, 113, 114, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 149, 150, 151, 161, 164, 168, 169, 176, 193, 210, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 296, 297, 299, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 318, 325, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 368, 371, 374, 383, 390, 391, 392, 393, 395, 396, 397, 399, 403, 404, 405, 408, 409, 410, 414, 415, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 430, 432, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 503, 505, 506, 507, 508, 509, 510, 511, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 533, 534, 536, 537, 540, 541, 542, 543, 544, 545, 548, 549, 552, 554, 556, 557, 558, 560, 561, 562, 564, 565, 567, 572, 573, 587, 588, 589, 590, 591, 593, 595, 596, 609, 610, 611, 612, 615, 617, 618, 619, 620, 625, 626, 628, 630, 633, 635, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 654, 655, 656, 658, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 689, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 733, 734, 735, 736, 737, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 813, 814, 818, 822, 831, 832, 833, 834, 837, 839, 841], "liter": [47, 52, 53, 58, 69, 75, 76, 81, 106, 107, 108, 109, 110, 111, 112, 113, 114, 287, 291, 296, 297, 299, 363, 371, 372, 374, 377, 393, 403, 407, 415, 430, 436, 441, 444, 447, 480, 502, 622, 628, 633, 642, 674, 690, 751, 784, 843], "magnitud": [47, 52, 53, 69, 75, 76, 106, 107, 108, 109, 110, 111, 112, 113, 114, 216, 219, 236, 243, 269, 287, 291, 296, 297, 299, 363, 622, 628, 633, 683, 684, 784, 825], "handle_complex_input": [47, 52, 53, 69, 75, 76, 106, 107, 108, 109, 110, 111, 112, 113, 114, 287, 291, 296, 297, 299, 363, 622, 628, 784, 834], "elementhardswish": [47, 53, 69, 76, 294, 363, 622, 784], "leaky_relu": [47, 69, 76, 291, 622, 773], "alpha": [47, 52, 53, 69, 75, 76, 103, 108, 219, 285, 291, 292, 300, 304, 310, 363, 365, 372, 377, 378, 426, 502, 505, 506, 507, 622, 628, 784, 832, 837, 838], "float": [47, 49, 50, 52, 53, 54, 55, 57, 58, 59, 61, 62, 64, 66, 69, 72, 73, 75, 76, 77, 78, 80, 81, 82, 84, 85, 89, 93, 96, 98, 108, 114, 122, 123, 124, 126, 128, 130, 131, 132, 133, 134, 138, 139, 144, 148, 152, 156, 161, 165, 169, 175, 176, 179, 185, 194, 203, 207, 208, 211, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 232, 233, 234, 236, 237, 239, 240, 241, 242, 243, 247, 249, 250, 251, 252, 253, 255, 257, 258, 259, 260, 261, 262, 269, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 296, 298, 300, 303, 304, 306, 307, 308, 309, 310, 311, 313, 314, 315, 330, 331, 332, 333, 341, 342, 347, 349, 350, 353, 354, 355, 358, 359, 363, 365, 368, 369, 371, 372, 373, 374, 377, 378, 383, 386, 395, 396, 397, 414, 415, 422, 425, 426, 428, 441, 445, 447, 448, 449, 453, 454, 469, 487, 497, 498, 499, 502, 503, 504, 505, 506, 507, 508, 518, 519, 520, 521, 526, 527, 528, 535, 536, 537, 545, 554, 578, 579, 582, 588, 589, 609, 611, 612, 615, 617, 618, 619, 622, 623, 625, 626, 627, 628, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 643, 655, 657, 659, 662, 663, 665, 668, 669, 670, 672, 674, 675, 676, 679, 680, 681, 682, 683, 684, 685, 687, 690, 692, 693, 694, 711, 712, 713, 720, 733, 736, 737, 743, 745, 746, 747, 748, 753, 754, 756, 757, 758, 759, 760, 761, 762, 769, 772, 773, 775, 784, 787, 788, 791, 792, 806, 812, 819, 823, 825, 828, 829, 830, 832, 833, 835, 836, 838, 840, 841, 843, 845, 847, 849], "slope": [47, 53, 69, 76, 108, 291, 292, 298, 300, 304, 363, 622, 784], "neg": [47, 52, 53, 58, 60, 62, 67, 69, 75, 76, 81, 83, 85, 90, 93, 108, 111, 114, 122, 128, 130, 143, 236, 243, 250, 251, 269, 270, 278, 283, 291, 309, 324, 327, 363, 365, 372, 373, 374, 378, 423, 430, 436, 453, 488, 492, 508, 622, 625, 628, 633, 635, 639, 644, 664, 666, 683, 687, 689, 690, 696, 698, 699, 703, 736, 763, 764, 772, 774, 784, 823, 836], "leaki": [47, 69, 108, 622, 784], "log_softmax": [47, 69, 622, 784], "0719": [47, 69, 109], "221": [47, 109], "mish": [47, 69, 622, 784], "30340147": [47, 110, 622], "86509842": [47, 69, 110, 622], "269": [47, 112], "731": [47, 112], "881": [47, 52, 75, 112, 222, 235, 275, 628], "422": [47, 113, 622], "155": [47, 80, 113, 622, 632, 656], "softplu": [47, 69, 622, 784, 843], "beta": [47, 53, 61, 69, 76, 84, 114, 300, 304, 310, 313, 314, 363, 365, 372, 373, 377, 378, 426, 454, 502, 506, 507, 622, 638, 733, 784, 843], "threshold": [47, 52, 53, 69, 75, 76, 114, 267, 268, 307, 333, 363, 368, 373, 374, 449, 454, 487, 622, 628, 784, 843], "union": [47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 202, 203, 204, 205, 207, 208, 209, 210, 211, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 363, 365, 368, 369, 371, 372, 373, 374, 377, 378, 379, 381, 383, 385, 386, 387, 388, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 403, 404, 405, 407, 408, 409, 410, 411, 413, 414, 415, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 480, 481, 482, 483, 484, 486, 487, 488, 489, 490, 492, 493, 494, 495, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 530, 533, 534, 536, 537, 541, 542, 543, 544, 545, 548, 549, 550, 551, 552, 554, 556, 557, 558, 560, 561, 564, 565, 567, 568, 572, 573, 577, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 609, 610, 611, 612, 613, 614, 615, 617, 618, 619, 620, 622, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 658, 659, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 721, 722, 723, 725, 726, 731, 732, 733, 734, 735, 736, 737, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 769, 772, 787, 792, 793, 820, 823, 825, 826, 827, 829, 832, 833, 836, 841, 843, 845, 850, 859, 860, 861], "3461": [47, 69, 114, 622], "6491": [47, 69, 114, 622], "_array_to_new_backend": 48, "_to_ivi": 48, "_to_n": 48, "to_ignor": [48, 68, 91, 637, 725, 726], "_to_new_backend": 48, "args_to_ivi": 48, "include_deriv": [48, 71, 637, 715, 726, 769], "nest": [48, 70, 71, 99, 102, 239, 563, 593, 610, 613, 628, 630, 631, 636, 711, 712, 714, 715, 716, 717, 718, 719, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 792, 820, 822, 823, 833, 835, 841, 848, 849, 851, 853, 866], "unchang": [48, 52, 371, 374, 416, 470, 632, 655], "deriv": [48, 49, 53, 55, 71, 72, 76, 78, 127, 132, 139, 145, 309, 313, 338, 365, 368, 611, 612, 615, 616, 617, 618, 619, 625, 631, 636, 637, 713, 715, 726, 790, 792, 793, 825, 826, 847, 849], "word": [48, 122, 374, 473, 625, 639, 737, 785, 788, 823, 836, 837, 853], "args_to_n": [48, 836], "cont_inplac": 48, "decid": [48, 70, 637, 725, 726, 808, 814, 815, 825, 843], "args_to_new_backend": 48, "shallow": [48, 637, 721, 722, 726, 731, 732], "nativevari": 48, "mutabl": [48, 637, 715, 721, 722, 726, 731, 732, 821], "to_ivi": [48, 71, 637, 727, 836], "leaf": [48, 70, 77, 89, 99, 544, 637, 724, 725, 727, 754, 823, 833, 848], "travers": [48, 71, 637, 718, 726, 823, 825, 829, 845], "lowest": [48, 53, 62, 71, 76, 85, 383, 521, 637, 639, 726, 735, 802, 833, 851, 853, 863, 867, 871], "search": [48, 53, 71, 76, 740, 741, 780, 813, 815, 823, 827, 830, 840, 841, 855], "to_new_backend": 48, "_arraywithcr": [49, 98], "boolean": [49, 50, 52, 53, 54, 60, 63, 66, 70, 72, 73, 75, 76, 77, 83, 86, 89, 98, 99, 119, 121, 123, 124, 125, 131, 148, 164, 166, 168, 169, 172, 188, 198, 206, 212, 226, 227, 228, 229, 230, 231, 263, 264, 265, 266, 331, 332, 347, 368, 372, 374, 430, 441, 447, 458, 459, 460, 466, 468, 470, 471, 472, 475, 479, 486, 488, 495, 530, 533, 544, 551, 554, 555, 559, 560, 561, 562, 563, 564, 565, 574, 577, 580, 581, 583, 584, 609, 624, 625, 626, 627, 628, 630, 632, 635, 636, 637, 640, 643, 659, 698, 699, 700, 702, 704, 705, 707, 709, 711, 712, 724, 742, 743, 744, 756, 758, 772, 773, 774, 775, 780, 791, 823, 825, 833, 837, 840, 843], "alwai": [49, 50, 53, 54, 60, 72, 73, 76, 83, 106, 124, 148, 219, 269, 342, 368, 372, 374, 443, 458, 459, 460, 466, 468, 470, 471, 472, 475, 479, 486, 495, 551, 558, 622, 626, 628, 630, 635, 698, 699, 700, 702, 704, 705, 707, 709, 774, 808, 814, 815, 816, 820, 821, 823, 825, 828, 831, 832, 833, 836, 837, 838, 839, 840, 841, 843, 845, 851, 859], "never": [49, 53, 60, 72, 76, 83, 124, 374, 458, 459, 460, 466, 468, 470, 471, 472, 475, 479, 486, 495, 551, 630, 635, 698, 699, 700, 702, 704, 705, 707, 709, 816, 825, 836, 837, 840], "valueerror": [49, 53, 60, 72, 76, 83, 87, 124, 371, 373, 405, 416, 453, 458, 459, 466, 468, 470, 471, 472, 479, 495, 635, 698, 699, 700, 702, 704, 705, 707, 709, 748, 774, 803, 829], "buffer": [49, 72, 76, 83, 124, 130, 458, 459, 466, 468, 470, 471, 472, 479, 495, 625, 698, 699, 700, 702, 704, 705, 707, 709, 789, 790, 836, 851], "nativedtyp": [49, 50, 53, 57, 58, 62, 63, 66, 72, 76, 81, 85, 86, 89, 122, 123, 124, 126, 127, 128, 130, 131, 132, 133, 134, 136, 137, 138, 139, 144, 145, 147, 148, 153, 154, 155, 156, 157, 158, 159, 160, 165, 166, 170, 172, 174, 178, 188, 308, 309, 310, 311, 312, 313, 314, 329, 336, 352, 365, 368, 378, 383, 504, 505, 506, 507, 508, 518, 519, 520, 521, 524, 527, 625, 626, 632, 633, 639, 640, 642, 643, 655, 674, 690, 735, 736, 737, 740, 741, 751, 753, 754, 759, 761, 787, 825, 826, 832, 841, 845], "datatyp": [49, 53, 70, 72, 76, 124, 132, 136, 153, 174, 178, 371, 419, 625, 626, 767, 841, 859], "nativedevic": [49, 51, 53, 62, 72, 74, 76, 85, 122, 123, 124, 126, 127, 128, 131, 132, 133, 134, 136, 137, 138, 139, 143, 144, 145, 190, 191, 192, 193, 194, 197, 202, 203, 204, 205, 207, 208, 209, 210, 211, 215, 308, 309, 324, 365, 378, 504, 505, 507, 508, 625, 627, 639, 734, 735, 736, 737, 787, 792, 793, 825, 826, 829, 832, 841], "39999998": [49, 123, 124, 625, 641, 746], "5999999": [49, 53, 76, 80, 123, 124, 293, 363, 372, 421, 625, 632, 655, 662], "0999999": [49, 66, 123, 124, 293, 303, 306, 349, 363, 368, 625, 757], "10000038": [49, 123, 124, 625], "90786433e": [49, 123, 124, 625], "310": [49, 123, 124, 625], "copy_arrai": [49, 72, 625], "to_ivy_arrai": [49, 72, 125, 625], "empty_lik": [49, 53, 72, 76, 260, 372, 424, 625, 628], "uniniti": [49, 126, 127, 625, 831], "from_dlpack": [49, 72, 625], "full_lik": [49, 72, 625, 841], "fill_valu": [49, 53, 63, 72, 76, 86, 131, 132, 248, 256, 374, 378, 488, 508, 625, 628, 640, 743, 825, 838, 841], "scalar": [49, 52, 53, 54, 58, 69, 72, 75, 76, 77, 81, 93, 108, 132, 137, 219, 240, 285, 291, 334, 335, 337, 342, 345, 347, 349, 354, 368, 371, 372, 373, 374, 419, 426, 448, 458, 459, 460, 469, 474, 596, 609, 625, 628, 630, 633, 690, 825, 835, 837, 851, 866], "fill": [49, 52, 53, 62, 63, 70, 72, 75, 76, 85, 86, 126, 131, 132, 134, 137, 138, 139, 144, 145, 270, 309, 365, 372, 374, 378, 430, 436, 441, 447, 469, 488, 489, 505, 507, 508, 625, 628, 639, 640, 735, 743, 787, 814, 838], "000123": [49, 132, 625], "stop": [49, 53, 55, 72, 76, 78, 122, 133, 134, 209, 372, 441, 447, 574, 612, 615, 617, 618, 619, 620, 625, 627, 630, 631, 636, 637, 711, 712, 713, 725, 792, 806, 832, 835, 843, 845, 851, 866], "num": [49, 72, 133, 134, 625, 772, 816, 832, 845], "endpoint": [49, 72, 133, 134, 625, 787, 832], "logspac": [49, 72, 625, 845], "log": [49, 52, 53, 58, 72, 75, 76, 81, 114, 134, 259, 261, 274, 296, 297, 350, 357, 363, 368, 373, 378, 450, 452, 453, 504, 622, 625, 628, 681, 772, 774, 775, 784, 816, 823, 824, 827, 833, 836, 837, 838, 840, 842, 843, 845, 848], "sequenc": [49, 53, 57, 58, 60, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 99, 106, 107, 108, 109, 110, 111, 112, 113, 114, 128, 130, 132, 134, 137, 139, 145, 149, 151, 164, 168, 169, 176, 210, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 247, 248, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 299, 300, 301, 302, 303, 305, 306, 307, 309, 312, 319, 320, 321, 322, 323, 330, 331, 332, 333, 334, 336, 338, 346, 347, 353, 355, 357, 358, 359, 361, 362, 365, 368, 369, 370, 371, 372, 374, 378, 383, 384, 386, 387, 388, 395, 396, 397, 399, 400, 404, 405, 407, 414, 415, 416, 417, 418, 421, 429, 430, 431, 433, 439, 440, 441, 444, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 459, 460, 464, 465, 466, 467, 473, 475, 476, 478, 479, 481, 484, 486, 488, 489, 490, 492, 495, 496, 497, 499, 500, 501, 503, 505, 506, 518, 519, 520, 521, 528, 529, 530, 533, 534, 536, 537, 541, 542, 543, 544, 545, 548, 549, 552, 554, 556, 557, 558, 560, 561, 564, 568, 572, 573, 587, 588, 589, 591, 593, 595, 596, 609, 610, 613, 614, 615, 620, 625, 628, 630, 631, 632, 633, 635, 637, 643, 644, 645, 646, 647, 648, 649, 650, 652, 654, 655, 656, 657, 659, 662, 663, 664, 669, 670, 671, 672, 673, 674, 676, 678, 680, 681, 687, 690, 692, 693, 694, 695, 696, 698, 699, 701, 702, 703, 704, 705, 706, 709, 710, 714, 721, 731, 734, 735, 736, 737, 739, 742, 745, 746, 747, 748, 749, 753, 754, 756, 757, 758, 759, 760, 761, 762, 763, 764, 788, 791, 793, 816, 824, 825, 826, 827, 829, 840, 841, 843, 845, 850, 869], "on_valu": [49, 72, 134, 137, 625], "off_valu": [49, 72, 134, 137, 625], "evenli": [49, 52, 53, 57, 60, 70, 72, 75, 76, 80, 83, 122, 133, 134, 288, 371, 414, 418, 625, 628, 632, 635, 645, 646, 647, 648, 650, 652, 654, 704], "hint": [49, 52, 53, 58, 75, 76, 122, 123, 124, 126, 127, 128, 129, 131, 132, 133, 134, 135, 138, 139, 140, 141, 142, 144, 145, 151, 167, 171, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 236, 237, 239, 241, 242, 243, 247, 248, 249, 250, 251, 252, 253, 256, 258, 259, 260, 261, 263, 264, 265, 266, 269, 271, 272, 273, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 309, 325, 331, 332, 334, 337, 365, 368, 371, 372, 374, 383, 390, 391, 392, 393, 395, 396, 397, 403, 408, 409, 410, 415, 417, 426, 480, 488, 492, 518, 521, 548, 552, 554, 556, 587, 596, 620, 625, 626, 628, 630, 631, 632, 633, 635, 638, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 654, 655, 656, 659, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 689, 690, 691, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 733, 740, 741, 743, 744, 745, 746, 747, 748, 749, 752, 756, 757, 758, 759, 760, 761, 762, 763, 764, 814, 820, 828, 830, 832, 833, 836, 837, 841], "simplic": [49, 52, 53, 58, 75, 76, 122, 123, 124, 126, 127, 128, 129, 131, 132, 133, 134, 135, 138, 139, 140, 141, 142, 144, 145, 151, 167, 171, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 236, 237, 239, 241, 242, 243, 247, 248, 249, 250, 251, 252, 253, 256, 258, 259, 260, 261, 263, 264, 265, 266, 269, 271, 272, 273, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 309, 325, 331, 332, 334, 337, 365, 368, 371, 372, 374, 383, 390, 391, 392, 393, 395, 396, 397, 403, 408, 409, 410, 415, 417, 426, 480, 488, 492, 518, 521, 548, 552, 554, 556, 587, 596, 620, 625, 626, 628, 630, 631, 632, 633, 635, 638, 640, 641, 642, 643, 646, 647, 648, 649, 650, 654, 655, 656, 659, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 689, 690, 691, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 733, 740, 741, 743, 744, 745, 746, 747, 748, 749, 752, 756, 757, 758, 759, 760, 761, 762, 828, 843, 849], "nestabl": [49, 52, 53, 58, 75, 76, 122, 123, 124, 126, 127, 128, 129, 131, 132, 133, 134, 135, 138, 139, 140, 141, 142, 143, 144, 145, 151, 167, 171, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 236, 237, 239, 241, 242, 243, 247, 248, 249, 250, 251, 252, 256, 258, 259, 260, 261, 263, 264, 265, 266, 269, 271, 272, 273, 274, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 309, 324, 325, 331, 332, 334, 337, 365, 368, 371, 372, 374, 383, 390, 391, 392, 393, 395, 396, 397, 403, 408, 409, 410, 415, 417, 426, 480, 488, 492, 518, 521, 525, 534, 542, 543, 548, 552, 554, 556, 558, 572, 587, 591, 596, 620, 625, 626, 628, 630, 631, 632, 633, 635, 638, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 654, 655, 656, 659, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 689, 690, 691, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 733, 740, 741, 743, 744, 745, 746, 747, 748, 749, 752, 756, 757, 758, 759, 760, 761, 762, 763, 764, 814, 818, 827, 828, 836, 840, 853], "464": [49, 52, 85, 134, 223, 224, 628], "15888336": [49, 134], "2154": [49, 134], "43469003": [49, 134], "meshgrid": [49, 72, 625], "spars": [49, 53, 59, 72, 76, 82, 135, 312, 365, 372, 430, 441, 447, 625, 634, 694], "xy": [49, 72, 135, 625], "dimension": [49, 52, 53, 58, 60, 63, 66, 67, 70, 72, 75, 76, 81, 83, 89, 90, 98, 122, 128, 130, 135, 143, 288, 324, 331, 332, 365, 368, 371, 372, 374, 383, 399, 400, 404, 405, 415, 416, 423, 458, 459, 460, 464, 469, 470, 516, 528, 625, 628, 633, 635, 640, 643, 644, 664, 665, 671, 673, 676, 678, 679, 689, 690, 704, 740, 741, 743, 756, 757, 758, 759, 760, 761, 762, 763, 764, 833, 835, 840, 843, 845, 863, 866, 873], "repres": [49, 52, 53, 57, 58, 75, 76, 80, 81, 96, 121, 135, 137, 160, 218, 219, 222, 225, 234, 236, 243, 269, 282, 286, 287, 312, 326, 327, 328, 345, 362, 365, 368, 370, 371, 372, 373, 374, 377, 378, 381, 414, 418, 432, 446, 448, 453, 480, 491, 497, 498, 499, 504, 510, 517, 553, 624, 625, 626, 628, 630, 632, 633, 655, 656, 657, 671, 678, 681, 682, 774, 787, 791, 802, 815, 820, 825, 843, 847, 863, 864, 867], "coordin": [49, 52, 63, 75, 76, 86, 135, 143, 224, 286, 316, 317, 324, 345, 365, 379, 509, 625, 628, 640, 743], "conserv": [49, 135, 625], "cartesian": [49, 135, 625], "matrix": [49, 53, 54, 57, 58, 76, 77, 80, 81, 93, 94, 96, 98, 135, 141, 142, 143, 324, 325, 365, 372, 374, 383, 422, 425, 426, 429, 430, 431, 433, 436, 437, 438, 439, 440, 441, 442, 443, 446, 447, 478, 518, 530, 536, 625, 630, 632, 633, 656, 663, 665, 667, 668, 669, 670, 672, 673, 674, 675, 676, 677, 679, 680, 681, 682, 683, 684, 685, 687, 688, 691, 772, 774, 787, 788, 802, 806, 814, 825, 837, 864, 866], "ij": [49, 66, 135, 625, 643, 755, 802], "respect": [49, 52, 53, 55, 58, 75, 76, 78, 81, 93, 135, 216, 219, 224, 226, 228, 229, 230, 231, 236, 237, 243, 247, 248, 255, 256, 261, 263, 265, 266, 269, 272, 278, 282, 285, 286, 296, 345, 360, 363, 368, 370, 372, 374, 377, 428, 445, 457, 497, 499, 553, 611, 612, 613, 614, 615, 616, 617, 618, 619, 621, 625, 628, 630, 631, 632, 633, 636, 645, 652, 653, 659, 664, 680, 683, 711, 712, 713, 769, 772, 787, 802, 813, 814, 815, 816, 820, 821, 823, 824, 825, 826, 827, 832, 833, 835, 836, 837, 840, 841, 842, 862, 872], "rank": [49, 53, 58, 60, 67, 76, 81, 83, 90, 93, 94, 95, 96, 97, 102, 135, 319, 320, 321, 322, 323, 365, 372, 374, 383, 430, 431, 441, 444, 447, 480, 488, 492, 528, 625, 633, 635, 640, 644, 664, 666, 674, 676, 680, 682, 687, 689, 690, 697, 698, 706, 709, 710, 743, 763, 764, 809, 874], "ni": [49, 135, 625], "xi": [49, 135, 625], "scatter": [49, 54, 72, 77, 137, 572, 573, 625, 630, 822, 836, 843, 873], "j": [49, 52, 53, 54, 58, 66, 72, 75, 76, 81, 93, 121, 137, 217, 218, 219, 220, 222, 225, 234, 236, 239, 241, 249, 257, 259, 263, 269, 280, 282, 283, 286, 287, 334, 368, 371, 372, 383, 399, 400, 404, 415, 416, 420, 425, 427, 438, 444, 528, 533, 624, 625, 628, 630, 633, 643, 668, 687, 755, 802, 816, 818, 822, 859, 862], "unless": [49, 53, 58, 72, 76, 137, 269, 330, 347, 352, 368, 625, 628, 633, 676, 821, 826, 836, 851, 860, 861], "ones_lik": [49, 72, 625, 821, 850, 863], "tril": [49, 72, 625], "whose": [49, 52, 53, 54, 58, 60, 64, 66, 72, 75, 76, 77, 81, 83, 87, 89, 94, 96, 98, 132, 141, 142, 218, 222, 225, 233, 234, 235, 274, 275, 281, 282, 286, 287, 288, 325, 339, 340, 344, 348, 349, 351, 355, 365, 372, 374, 425, 446, 479, 488, 494, 535, 591, 625, 628, 630, 633, 635, 641, 643, 663, 665, 667, 668, 669, 670, 671, 672, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 687, 690, 699, 703, 745, 746, 747, 754, 755, 774, 811, 828, 840], "innermost": [49, 53, 58, 81, 141, 142, 325, 365, 372, 425, 625, 633, 663, 665, 667, 668, 669, 670, 672, 674, 675, 676, 677, 679, 680, 681, 682, 683, 684, 687], "mxn": [49, 53, 58, 81, 141, 142, 325, 365, 625, 633, 667, 674, 676, 677, 679, 680, 684, 687], "matric": [49, 53, 58, 76, 81, 93, 94, 98, 135, 141, 142, 325, 365, 372, 374, 425, 430, 431, 433, 439, 440, 445, 469, 625, 632, 633, 656, 663, 665, 667, 668, 669, 670, 671, 672, 674, 675, 676, 677, 679, 680, 681, 682, 683, 684, 687, 688, 774, 812, 830, 866], "diagon": [49, 53, 58, 76, 81, 94, 128, 141, 142, 143, 309, 324, 325, 365, 372, 374, 423, 426, 436, 442, 469, 625, 633, 666, 687], "triangular": [49, 53, 58, 81, 141, 142, 143, 324, 325, 365, 372, 442, 625, 633, 663, 669, 670, 676, 680], "alloc": [49, 50, 53, 73, 141, 142, 148, 325, 365, 625, 626, 806, 814, 816, 851], "triu": [49, 72, 625], "upper": [49, 53, 58, 62, 76, 81, 85, 128, 142, 143, 309, 325, 365, 372, 383, 442, 521, 625, 633, 639, 663, 669, 670, 680, 737, 825, 836, 840], "zeros_lik": [49, 53, 72, 148, 265, 374, 488, 611, 612, 615, 617, 618, 619, 625, 626, 628, 631, 633, 635, 680, 695, 837, 843], "data_typ": [50, 53, 73, 76, 178, 626, 822, 825, 840, 841], "_arraywithdatatyp": [50, 98], "irrespect": [50, 58, 73, 81, 148, 626, 633, 683, 823, 836, 847, 873], "promot": [50, 52, 53, 58, 73, 75, 76, 81, 88, 98, 99, 148, 151, 174, 175, 176, 182, 217, 218, 219, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 233, 234, 236, 239, 241, 243, 257, 258, 259, 260, 261, 266, 269, 274, 278, 281, 282, 283, 284, 285, 286, 287, 290, 342, 350, 355, 368, 371, 383, 415, 518, 581, 604, 626, 628, 630, 633, 635, 643, 663, 664, 671, 672, 673, 674, 675, 676, 678, 679, 681, 682, 689, 690, 696, 706, 749, 757, 760, 772, 773, 817, 819, 828, 829, 833, 842], "nan": [50, 52, 53, 54, 64, 66, 73, 75, 76, 77, 148, 216, 217, 218, 219, 221, 222, 223, 224, 225, 232, 233, 234, 235, 236, 237, 239, 241, 242, 243, 244, 245, 250, 251, 252, 257, 258, 259, 260, 261, 264, 269, 270, 272, 274, 275, 278, 279, 280, 281, 282, 283, 286, 287, 289, 296, 330, 331, 332, 343, 347, 352, 355, 363, 368, 374, 383, 488, 516, 517, 524, 525, 526, 527, 554, 609, 623, 626, 628, 630, 641, 643, 644, 745, 746, 747, 748, 756, 757, 758, 760, 761, 762, 763, 764, 772, 775, 819, 825, 828, 835, 841, 842], "infin": [50, 52, 54, 58, 73, 75, 81, 148, 216, 217, 218, 219, 222, 223, 224, 225, 232, 233, 234, 236, 237, 239, 241, 242, 243, 250, 251, 257, 258, 259, 260, 261, 264, 269, 270, 272, 274, 278, 279, 281, 282, 283, 286, 287, 289, 331, 332, 355, 368, 554, 623, 626, 628, 630, 633, 643, 644, 681, 690, 756, 758, 763, 764, 819, 828], "desir": [50, 51, 53, 63, 70, 73, 74, 76, 86, 93, 148, 150, 151, 210, 315, 356, 365, 368, 374, 383, 478, 524, 527, 528, 626, 627, 633, 640, 685, 742, 787, 788, 816, 821, 824, 825, 826, 837, 845, 855, 859, 866], "broadcast_arrai": [50, 73, 626], "mix": [50, 52, 73, 75, 76, 77, 82, 85, 98, 99, 149, 162, 163, 176, 195, 196, 226, 229, 230, 231, 236, 237, 243, 247, 255, 256, 266, 269, 272, 278, 373, 383, 454, 525, 544, 546, 547, 548, 549, 558, 593, 596, 626, 627, 628, 630, 632, 633, 634, 635, 638, 643, 646, 648, 651, 653, 654, 656, 662, 663, 685, 692, 694, 695, 733, 755, 757, 760, 773, 775, 814, 818, 825, 826, 827, 836, 843, 845, 853, 866, 870, 872], "broadcast_to": [50, 73, 626, 825], "can_cast": [50, 73, 626, 825, 833, 837], "accord": [50, 53, 54, 60, 66, 73, 83, 89, 151, 161, 219, 230, 236, 243, 269, 280, 315, 365, 371, 374, 416, 480, 548, 551, 572, 573, 626, 628, 630, 633, 635, 643, 689, 697, 710, 760, 762, 767, 774, 794, 801, 814, 815, 819, 825, 831, 833, 837, 840], "finfo": [50, 73, 626, 840], "resolut": [50, 73, 161, 626, 816], "4028235e": [50, 161, 626], "iinfo": [50, 73, 626], "integ": [50, 52, 53, 57, 58, 60, 62, 66, 67, 70, 75, 76, 77, 80, 81, 83, 85, 89, 90, 98, 99, 122, 131, 164, 165, 171, 175, 176, 180, 216, 226, 227, 228, 229, 230, 231, 232, 242, 243, 254, 266, 271, 274, 278, 279, 289, 290, 326, 327, 328, 331, 332, 336, 341, 342, 365, 368, 371, 374, 378, 381, 383, 399, 404, 414, 417, 418, 419, 466, 475, 480, 488, 492, 495, 504, 505, 506, 507, 508, 510, 511, 516, 518, 519, 520, 525, 528, 551, 567, 577, 610, 625, 626, 628, 630, 632, 633, 635, 639, 642, 643, 644, 645, 646, 647, 648, 650, 652, 654, 664, 666, 675, 689, 690, 704, 734, 735, 736, 737, 738, 739, 751, 753, 754, 756, 757, 758, 759, 760, 761, 762, 763, 764, 772, 773, 774, 775, 780, 788, 802, 816, 823, 825, 835, 838, 840, 845, 847], "119": [50, 164], "1220": [50, 164], "int16": [50, 53, 62, 66, 73, 85, 151, 155, 157, 162, 164, 171, 186, 383, 519, 520, 626, 643, 735, 753, 754, 759, 761, 772, 773, 825, 837, 840, 845], "32768": [50, 73, 164, 589, 630], "32767": [50, 73, 164], "is_bool_dtyp": [50, 73, 626], "is_float_dtyp": [50, 73, 626, 841], "is_int_dtyp": [50, 73, 626, 838, 841], "is_uint_dtyp": [50, 73, 626, 838, 841], "result_typ": [50, 73, 626, 825], "arrays_and_dtyp": [50, 73, 176, 626], "_arraywithdevic": [51, 98], "move": [51, 53, 74, 76, 143, 206, 210, 214, 324, 365, 374, 479, 625, 627, 790, 808, 816, 826, 841], "addit": [51, 53, 54, 61, 74, 76, 77, 84, 119, 121, 210, 219, 279, 373, 377, 383, 448, 502, 517, 522, 541, 542, 543, 610, 624, 627, 628, 630, 632, 636, 638, 659, 713, 733, 788, 802, 814, 815, 816, 821, 825, 827, 828, 831, 833, 835, 836, 837, 840, 841, 843, 847, 848, 850, 859, 866, 867, 868, 872], "__dlpack__": [51, 74, 129, 210, 625, 627], "caveat": [51, 74, 210, 373, 452, 627], "portabl": [51, 74, 210, 627, 808, 864], "_arraywithelementwis": [52, 98], "ab": [52, 58, 68, 75, 91, 98, 99, 274, 330, 347, 368, 374, 487, 628, 633, 637, 674, 684, 690, 722, 725, 769, 801, 802, 812, 820, 825, 830, 834, 837, 840, 863], "absolut": [52, 53, 58, 68, 70, 75, 76, 81, 98, 216, 280, 330, 347, 350, 356, 368, 372, 373, 426, 443, 449, 451, 628, 633, 674, 675, 676, 681, 767, 769, 772, 774, 775, 809, 815], "aco": [52, 75, 628], "invers": [52, 53, 58, 75, 76, 81, 217, 218, 221, 222, 223, 224, 225, 340, 368, 371, 381, 394, 403, 405, 415, 510, 628, 633, 672, 675, 679, 794, 825], "cosin": [52, 75, 217, 218, 233, 234, 308, 311, 365, 371, 393, 403, 628, 788], "acosh": [52, 75, 162, 163, 626, 628, 812, 830], "area": [52, 53, 75, 76, 80, 218, 222, 225, 371, 407, 414, 418, 628, 811, 836, 843, 856, 862], "hyperbol": [52, 75, 218, 222, 225, 234, 282, 286, 287, 300, 304, 363, 628], "sector": [52, 75, 218, 222, 225, 628, 856], "second": [52, 53, 55, 58, 60, 64, 75, 76, 77, 78, 81, 83, 87, 94, 98, 99, 119, 143, 174, 182, 219, 224, 226, 228, 229, 230, 231, 237, 243, 244, 245, 246, 247, 248, 254, 255, 256, 261, 262, 263, 265, 266, 269, 272, 274, 285, 315, 324, 330, 343, 345, 346, 347, 353, 357, 358, 365, 368, 372, 373, 374, 381, 383, 424, 425, 426, 428, 432, 454, 486, 494, 505, 507, 511, 518, 521, 533, 582, 605, 611, 612, 617, 624, 625, 626, 628, 630, 631, 633, 635, 636, 637, 641, 664, 667, 668, 669, 671, 673, 678, 680, 681, 683, 685, 687, 689, 706, 707, 712, 715, 745, 746, 747, 792, 815, 819, 822, 825, 827, 831, 836, 837, 840, 842, 847, 857, 871], "multipli": [52, 53, 57, 66, 75, 76, 80, 93, 219, 285, 348, 371, 372, 407, 438, 439, 519, 520, 628, 632, 643, 655, 753, 759, 816, 820, 821, 823, 827], "angl": [52, 75, 224, 234, 282, 287, 346, 368, 628], "deg": [52, 75, 220, 628], "radian": [52, 53, 75, 76, 217, 220, 221, 223, 224, 233, 235, 275, 281, 286, 355, 368, 628, 828], "degre": [52, 53, 66, 75, 76, 89, 220, 235, 275, 318, 365, 374, 486, 628, 643, 760, 762, 865], "1j": [52, 75, 76, 220, 221, 233, 234, 239, 241, 253, 276, 281, 282, 286, 334, 588, 628, 630], "2j": [52, 53, 75, 76, 220, 249, 334, 371, 399, 404, 589, 628, 630], "3j": [52, 53, 75, 76, 220, 253, 276, 334, 368, 628], "35619449": [52, 220, 628], "78539816": [52, 220, 628], "135": [52, 220, 536, 628, 630], "asin": [52, 75, 628], "sine": [52, 75, 221, 222, 281, 282, 628], "927": [52, 75, 221], "asinh": [52, 75, 221, 628], "atan": [52, 75, 628], "tangent": [52, 75, 223, 224, 225, 286, 287, 300, 304, 361, 363, 370, 628, 828], "785": [52, 75, 223, 224, 628], "atan2": [52, 75, 628], "quotient": [52, 75, 224, 236, 243, 628], "245": [52, 80, 224, 632, 655, 656], "588": [52, 224, 628], "inf": [52, 53, 54, 58, 75, 76, 77, 81, 224, 241, 250, 251, 252, 253, 257, 258, 260, 270, 296, 340, 350, 363, 368, 372, 383, 422, 521, 554, 609, 623, 628, 630, 632, 633, 660, 674, 690, 772, 775, 812, 825, 830, 835], "719": [52, 224, 628], "197": [52, 224, 628], "atanh": [52, 75, 628], "549": [52, 75, 80, 225, 628, 632, 656], "bitwise_and": [52, 75, 628], "bitwise_invert": [52, 75, 628], "bitiwse_invert": [52, 227], "bitwise_left_shift": [52, 75, 628], "bitwise_or": [52, 75, 628], "bitwise_right_shift": [52, 75, 98, 628], "bitwise_xor": [52, 75, 98, 628], "ceil": [52, 53, 75, 76, 93, 96, 122, 371, 390, 391, 392, 408, 409, 410, 413, 625, 628, 788, 836], "round": [52, 53, 75, 76, 93, 95, 96, 97, 219, 232, 236, 242, 243, 269, 283, 289, 290, 341, 368, 628, 812, 814, 815, 816, 819, 820, 821, 823, 824, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 840, 841, 843, 845, 846, 847, 848, 849, 850, 855, 856, 857, 863], "416": [52, 233, 628], "540": [52, 233], "990": [52, 233], "cosh": [52, 75, 233, 628], "deg2rad": [52, 75, 628], "convers": [52, 53, 76, 235, 275, 574, 584, 630, 789, 790, 814, 844, 846, 850, 851, 853, 857, 865, 872], "180": [52, 75, 235, 275, 628], "270": [52, 75, 235, 275, 628], "360": [52, 75, 235, 275, 628, 824], "dividend": [52, 75, 236, 243, 278, 290, 628], "divisor": [52, 53, 55, 66, 75, 76, 78, 89, 236, 243, 246, 247, 278, 290, 371, 374, 390, 391, 392, 466, 475, 495, 611, 612, 617, 628, 631, 643, 760, 762, 788, 792], "375": [52, 237, 272], "erf": [52, 75, 339, 368, 628], "exponenti": [52, 53, 75, 76, 238, 239, 241, 261, 274, 291, 301, 363, 372, 437, 628], "gauss": [52, 75, 238, 628], "328": [52, 238, 286, 628], "677": [52, 238], "842": [52, 238, 286, 628], "71828198": [52, 75, 239], "38905573": [52, 75, 239], "08553696": [52, 75, 239, 628], "exp2": [52, 75, 628], "expm1": [52, 75, 628, 825], "244": [52, 241, 808], "918": [52, 241], "147": [52, 241, 628], "floor": [52, 53, 75, 76, 93, 96, 230, 243, 371, 390, 391, 392, 394, 408, 409, 410, 413, 628, 788, 836], "floor_divid": [52, 75, 628, 780, 825], "fmin": [52, 75, 628, 825], "gcd": [52, 75, 628, 825], "greater": [52, 53, 57, 60, 62, 75, 76, 80, 85, 98, 99, 130, 217, 218, 221, 222, 224, 225, 228, 230, 236, 242, 243, 257, 259, 274, 278, 280, 282, 283, 287, 288, 289, 333, 368, 371, 394, 399, 404, 415, 625, 628, 632, 633, 635, 639, 662, 664, 675, 705, 737, 774, 788, 816, 817, 838, 863], "greater_equ": [52, 75, 98, 99, 261, 628, 863], "isfinit": [52, 75, 628, 837], "out_i": [52, 75, 250, 251, 252, 253, 276, 628], "self_i": [52, 75, 250, 251, 252, 253, 276], "finit": [52, 75, 216, 217, 218, 219, 222, 224, 225, 234, 236, 237, 239, 241, 243, 250, 251, 257, 259, 269, 270, 272, 274, 278, 282, 283, 287, 628], "isinf": [52, 75, 628], "detect_posit": [52, 75, 251, 628], "detect_neg": [52, 75, 251, 628], "isnan": [52, 75, 628], "isreal": [52, 75, 628], "5j": [52, 75, 76, 253, 276, 334, 368, 628], "6j": [52, 53, 75, 249, 253, 334, 628], "lcm": [52, 75, 628, 825], "less": [52, 53, 58, 62, 66, 75, 76, 81, 85, 98, 99, 217, 218, 221, 224, 225, 232, 236, 243, 257, 258, 259, 260, 274, 278, 280, 283, 354, 368, 371, 372, 383, 393, 394, 403, 415, 441, 447, 518, 521, 628, 633, 639, 643, 674, 675, 676, 679, 690, 737, 760, 762, 788, 815, 816, 823, 825, 827, 829, 832, 837, 840, 843, 844, 845, 856, 863, 866, 868], "less_equ": [52, 75, 98, 99, 628, 829, 863], "log10": [52, 53, 75, 315, 365, 628], "logarithm": [52, 75, 239, 257, 258, 259, 260, 261, 338, 350, 368, 628, 633, 681], "602": [52, 258, 628], "699": [52, 258, 628], "log1p": [52, 75, 628, 835], "693": [52, 75, 113, 222, 259, 622, 628], "0953": [52, 75, 257, 259, 628], "log2": [52, 75, 262, 628], "logaddexp": [52, 75, 628], "logaddexp2": [52, 75, 628, 812, 830], "169925": [52, 75, 262, 628], "logical_and": [52, 75, 628, 837, 843, 873], "logical_not": [52, 75, 628, 825], "logical_or": [52, 75, 628, 873], "conform": [52, 58, 75, 122, 123, 124, 126, 127, 128, 129, 131, 132, 133, 135, 138, 139, 140, 141, 142, 144, 145, 151, 161, 164, 176, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 236, 237, 239, 241, 242, 243, 247, 248, 249, 250, 251, 252, 256, 258, 259, 260, 261, 263, 264, 265, 266, 269, 271, 272, 273, 274, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 331, 332, 334, 368, 371, 374, 383, 415, 488, 492, 518, 625, 626, 628, 633, 635, 640, 641, 642, 643, 644, 663, 664, 665, 666, 667, 669, 670, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 689, 690, 696, 698, 699, 700, 702, 703, 705, 706, 710, 740, 741, 743, 744, 745, 746, 747, 748, 749, 752, 756, 757, 758, 759, 760, 761, 762, 763, 764, 828, 831], "api_specif": [52, 53, 75, 76, 151, 239, 249, 250, 265, 331, 332, 368, 371, 374, 415, 488, 626, 628, 635, 643, 710, 760, 828], "array_api": [52, 75, 151, 239, 249, 250, 265, 371, 374, 415, 488, 626, 628, 633, 635, 643, 681, 682, 710, 760, 828], "logical_xor": [52, 75, 628], "maximum": [52, 53, 54, 55, 60, 63, 66, 70, 75, 76, 77, 78, 83, 86, 89, 99, 209, 295, 331, 332, 343, 356, 363, 368, 371, 372, 374, 383, 387, 388, 398, 441, 444, 447, 480, 519, 521, 526, 536, 537, 545, 553, 617, 627, 628, 630, 631, 633, 635, 640, 643, 674, 695, 740, 741, 756, 758, 772, 774, 775, 780, 802, 816, 825, 827, 836, 848, 863, 873], "use_wher": [52, 75, 267, 268, 628], "formula": [52, 53, 75, 236, 258, 260, 267, 268, 269, 315, 349, 365, 368, 377, 497, 499, 628, 806], "exce": [52, 53, 76, 268, 374, 490, 628], "product": [52, 53, 57, 58, 66, 75, 76, 80, 81, 89, 93, 94, 96, 269, 361, 362, 370, 372, 374, 383, 421, 424, 428, 431, 432, 433, 438, 439, 440, 492, 519, 520, 527, 628, 632, 633, 643, 659, 662, 664, 671, 673, 678, 685, 689, 753, 754, 755, 759, 760, 802, 814, 845, 866, 868], "nan_to_num": [52, 75, 628], "posinf": [52, 75, 270, 628], "neginf": [52, 75, 270, 628], "5e": [52, 55, 75, 76, 270, 353, 617, 628, 631], "not_equ": [52, 75, 98, 99, 628, 863], "pow": [52, 75, 98, 99, 628, 819, 863], "expon": [52, 53, 54, 76, 77, 274, 342, 344, 348, 368, 377, 502, 589, 628, 630, 633, 675], "rad2deg": [52, 75, 628], "286": [52, 76, 275], "458": [52, 275], "573": [52, 275, 628], "reciproc": [52, 75, 628], "333": [52, 75, 236, 277, 537, 628, 630], "remaind": [52, 53, 60, 70, 75, 76, 83, 245, 628, 635, 704, 819, 836], "modulu": [52, 75, 278, 628, 836], "sign": [52, 53, 58, 64, 66, 75, 76, 81, 93, 122, 216, 217, 218, 219, 222, 224, 225, 230, 234, 236, 239, 241, 243, 269, 271, 278, 282, 283, 287, 335, 368, 372, 374, 383, 443, 487, 488, 519, 520, 625, 628, 633, 641, 643, 681, 745, 746, 747, 748, 753, 754, 759, 761, 808, 815, 817, 825, 845, 850, 856], "x2_i": [52, 75, 219, 224, 226, 228, 229, 230, 231, 236, 237, 243, 247, 248, 255, 256, 261, 263, 265, 266, 269, 272, 274, 278, 285, 628, 819], "decim": [52, 75, 279, 628, 842], "678": [52, 279, 280], "np_variant": [52, 75, 280, 628], "841": [52, 69, 75, 106, 281, 622, 628], "909": [52, 75, 77, 281, 628], "141": [52, 75, 148, 281, 626, 628], "sinh": [52, 75, 281, 628], "232": [52, 75, 282, 628], "sqrt": [52, 53, 75, 76, 371, 394, 399, 400, 404, 405, 415, 628, 787, 788, 808], "squar": [52, 53, 58, 75, 76, 81, 283, 372, 373, 377, 383, 425, 437, 449, 502, 518, 613, 614, 616, 621, 628, 631, 633, 637, 663, 665, 666, 668, 669, 670, 672, 675, 681, 682, 683, 688, 720, 808], "tanh": [52, 53, 75, 76, 286, 300, 304, 363, 628, 784, 845], "762": [52, 75, 287, 628], "964": [52, 75, 287, 628], "trapz": [52, 75, 628], "dx": [52, 75, 288, 628], "apart": [52, 75, 288, 628], "trapezoid": [52, 75, 288, 628], "trunc": [52, 75, 628], "025": [52, 289, 373, 454, 628, 636, 713], "trunc_divid": [52, 75, 628], "_arraywithactivationsexperiment": [53, 98], "celu": [53, 76, 363], "formul": [53, 69, 76, 94, 106, 291, 293, 363, 784], "elu": [53, 76, 295, 363, 784], "scaler": [53, 76, 292, 363, 772, 775, 840], "hardshrink": [53, 76, 363], "lambd": [53, 76, 293, 303, 363], "hardsilu": [53, 76, 363], "66666667": [53, 115, 294, 383, 518, 622], "hardtanh": [53, 76, 363], "max_val": [53, 76, 295, 363], "min_val": [53, 76, 295, 363], "region": [53, 76, 295, 303, 363, 815], "19722438": [53, 76, 296, 363], "38629448": [53, 76, 296, 363], "38629436": [53, 76, 296, 363], "logsigmoid": [53, 76, 363, 784], "31326175": [53, 69, 297, 363], "126928": [53, 76, 297], "01814993": [53, 297], "00004578": [53, 297], "57888985": [53, 297], "31326169": [53, 76, 297, 363], "69314718": [53, 58, 69, 76, 81, 297, 350, 363, 368, 633, 681], "01104775": [53, 297], "prelu": [53, 76, 363, 784], "unidirect": [53, 298, 363, 632, 657], "relu6": [53, 76, 363, 784], "rectifi": [53, 69, 76, 108, 110, 111, 299, 302, 307, 363, 622], "scaled_tanh": [53, 76, 304, 363], "7159": [53, 76, 300, 304, 363], "amplitud": [53, 76, 300, 304, 363], "65537548": [53, 76, 300], "49570239": [53, 76, 300], "77637792": [53, 300], "selu": [53, 76, 363, 784], "11133075": [53, 301, 363], "05070102": [53, 76, 301, 363], "10140204": [53, 301, 363], "15210295": [53, 301, 363], "20280409": [53, 301, 363], "25350523": [53, 301, 363], "30420589": [53, 301, 363], "35490704": [53, 301, 363], "silu": [53, 76, 363, 784], "26894143": [53, 302], "73105854": [53, 76, 302], "softshrink": [53, 76, 363], "bound": [53, 76, 303, 315, 363, 365, 374, 463, 488, 489, 772, 825, 829, 837, 840, 845, 872], "tanhshrink": [53, 76, 363], "23840582": [53, 76, 305, 363], "condit": [53, 63, 76, 86, 119, 306, 321, 322, 365, 372, 422, 624, 637, 640, 724, 725, 744, 774, 819, 825, 827, 829, 833, 834, 836, 840, 859], "met": [53, 76, 306, 829], "hreshold": [53, 306], "thresholded_relu": [53, 76, 363], "_arraywithconversionsexperiment": [53, 98], "_arraywithcreationexperiment": [53, 98], "blackman_window": [53, 76, 365], "period": [53, 76, 282, 286, 308, 310, 311, 313, 314, 365, 371, 406, 628, 816], "window": [53, 57, 76, 80, 308, 310, 311, 313, 314, 329, 365, 371, 377, 390, 391, 392, 394, 408, 409, 410, 411, 413, 414, 418, 419, 502, 632, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 788, 810, 816, 822, 830, 871], "symmetr": [53, 58, 76, 81, 93, 94, 308, 310, 311, 313, 314, 365, 372, 374, 425, 480, 633, 663, 668, 669, 670, 691, 823], "38777878e": [53, 76, 308, 365], "40000000e": [53, 308, 365], "00000000e": [53, 58, 76, 77, 308, 339, 340, 365, 371, 393, 399, 403, 404, 633, 680, 812, 830], "30000000e": [53, 76, 308, 365], "eye_lik": [53, 76, 365], "elsewher": [53, 76, 128, 309, 365, 625, 640, 744, 815], "mel_weight_matrix": [53, 76, 365], "num_mel_bin": [53, 76, 315, 365], "dft_length": [53, 76, 315, 365, 371, 394], "sample_r": [53, 76, 315, 365], "lower_edge_hertz": [53, 76, 315, 365], "upper_edge_hertz": [53, 76, 315, 365], "3000": [53, 76, 315, 365], "melweightmatrix": [53, 76, 315, 365], "linearli": [53, 54, 77, 315, 365, 545, 630, 633, 682], "frequenc": [53, 54, 76, 77, 315, 365, 383, 518, 545, 630, 816], "spectra": [53, 315, 365], "dft": [53, 76, 315, 365, 371], "stft": [53, 76, 315, 365, 371], "mel": [53, 76, 315, 365], "term": [53, 76, 308, 315, 318, 365, 373, 452, 453, 632, 657, 658, 788, 802, 808, 816, 823, 845, 853, 855, 866], "hertz": [53, 315, 365], "2595": [53, 315, 365], "700": [53, 77, 315, 365, 549], "band": [53, 54, 76, 77, 315, 365, 545, 630], "spectrum": [53, 76, 315, 365], "n_fft": [53, 76, 315, 365, 371, 394], "signal": [53, 76, 315, 365, 371, 385, 386, 387, 388, 393, 394, 403, 419, 788, 865, 866], "8000": [53, 76, 310, 315, 365], "75694758": [53, 315, 365], "trilu": [53, 76, 365], "retain": [53, 143, 324, 325, 365, 613, 625, 631, 835, 839, 853], "unsorted_segment_mean": [53, 76, 365], "segment_id": [53, 76, 326, 327, 328, 365, 794], "num_seg": [53, 76, 326, 327, 328, 365, 794], "identifi": [53, 76, 326, 327, 328, 365, 814, 819, 824, 825, 840, 843], "th": [53, 76, 94, 326, 327, 328, 337, 365, 368, 372, 373, 383, 423, 430, 448, 528], "distinct": [53, 64, 76, 326, 327, 328, 365, 641, 745, 746, 747, 748, 811, 815, 823, 828, 835, 836, 837, 844, 856, 866], "unsorted_segment_min": [53, 76, 365], "unsorted_segment_sum": [53, 76, 365], "polyv": [53, 76, 365], "coeff": [53, 76, 318, 365], "polynomi": [53, 76, 318, 365], "coeffici": [53, 76, 310, 318, 365, 372, 442, 633, 682, 792], "indetermin": [53, 76, 318, 365], "simplifi": [53, 76, 318, 365, 801, 802, 829, 837, 845, 846, 849, 856, 859, 862, 864, 865, 866, 869, 872, 873], "substitut": [53, 76, 318, 365], "_arraywithdata_typeexperiment": [53, 98], "_arraywithdeviceexperiment": [53, 98], "_arraywithelementwiseexperiment": [53, 98], "equal_nan": [53, 76, 330, 347, 368], "1e10": [53, 330, 347, 368], "00001e10": [53, 330, 347, 368], "00001e": [53, 330, 368], "amax": [53, 76, 368], "keepdim": [53, 58, 60, 63, 66, 67, 70, 76, 81, 83, 86, 89, 90, 331, 332, 336, 352, 359, 368, 369, 374, 383, 485, 523, 524, 525, 526, 527, 528, 633, 635, 640, 643, 644, 674, 690, 709, 740, 741, 756, 757, 758, 759, 760, 761, 762, 763, 764, 829, 837, 845], "singleton": [53, 58, 63, 66, 67, 76, 81, 86, 89, 90, 331, 332, 368, 633, 635, 640, 643, 644, 690, 698, 705, 741, 756, 757, 758, 759, 760, 761, 762, 763, 764, 845], "amin": [53, 76, 368], "binar": [53, 76, 368], "map": [53, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 92, 99, 106, 107, 108, 109, 110, 111, 112, 113, 114, 130, 132, 137, 139, 145, 149, 151, 164, 168, 169, 176, 210, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 247, 248, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 299, 300, 301, 302, 303, 305, 306, 307, 309, 330, 331, 332, 333, 334, 336, 338, 346, 347, 353, 355, 357, 358, 359, 368, 371, 395, 396, 397, 415, 448, 449, 450, 451, 452, 453, 454, 455, 458, 459, 460, 464, 465, 486, 488, 489, 490, 492, 497, 499, 500, 501, 503, 505, 518, 519, 520, 521, 530, 533, 534, 536, 537, 541, 542, 543, 544, 545, 548, 549, 552, 554, 556, 557, 558, 560, 561, 564, 572, 573, 587, 588, 589, 591, 593, 595, 596, 609, 610, 615, 620, 630, 637, 646, 647, 648, 649, 655, 656, 662, 663, 664, 669, 670, 671, 672, 673, 674, 676, 678, 680, 681, 687, 692, 693, 694, 695, 699, 702, 703, 704, 705, 706, 709, 710, 721, 722, 726, 727, 734, 735, 736, 737, 739, 742, 745, 746, 747, 748, 749, 753, 754, 757, 759, 760, 762, 763, 764, 802, 820, 823, 825, 832, 833, 837, 840, 841, 848, 851, 853, 860, 867], "conj": [53, 76, 234, 239, 241, 282, 283, 287, 368, 628], "conjug": [53, 58, 76, 81, 334, 368, 371, 372, 378, 394, 420, 426, 438, 440, 442, 506, 633, 673, 677, 685], "copysign": [53, 76, 368], "unsign": [53, 66, 76, 335, 368, 374, 383, 488, 519, 520, 643, 753, 754, 759, 761, 773, 825, 845], "count_nonzero": [53, 76, 368], "diff": [53, 70, 76, 368, 827, 836, 863], "prepend": [53, 76, 337, 368, 633, 635, 673, 698, 815], "differenc": [53, 76, 337, 368], "prior": [53, 76, 337, 368, 378, 506, 633, 685, 829, 841], "expand": [53, 54, 60, 76, 77, 337, 368, 374, 492, 545, 630, 635, 698, 823, 839], "discret": [53, 76, 337, 368, 371, 393, 394, 399, 400, 403, 404, 405, 415, 416, 634, 693, 788], "digamma": [53, 76, 368], "7549271": [53, 338, 368], "92278427": [53, 76, 338, 368], "9988394": [53, 338, 368], "erfc": [53, 76, 368], "complementari": [53, 76, 329, 339, 365, 368, 864, 872], "84270084e": [53, 339, 340], "80259693e": [53, 339, 340], "erfinv": [53, 76, 368], "toward": [53, 60, 76, 83, 243, 290, 341, 353, 368, 374, 383, 486, 521, 628, 635, 703, 808, 812, 814, 815, 830, 845, 862, 866], "float_pow": [53, 76, 368], "fmax": [53, 76, 368], "fmod": [53, 76, 628], "divis": [53, 54, 55, 76, 77, 78, 230, 236, 243, 245, 278, 280, 290, 374, 466, 579, 588, 602, 611, 612, 617, 628, 630, 631, 632, 645, 652, 653, 792, 833, 842], "frexp": [53, 76, 368], "edge_ord": [53, 76, 345, 368], "estim": [53, 76, 345, 368, 383, 518, 806], "boundari": [53, 62, 76, 85, 96, 321, 322, 345, 365, 368, 371, 407, 639, 737, 866], "33333333": [53, 76, 277, 345, 368, 448, 628], "hypot": [53, 76, 368], "hypotenus": [53, 346, 368], "4031": [53, 346, 368], "8102": [53, 346, 368], "isclos": [53, 76, 368, 819], "ldexp": [53, 76, 368], "lerp": [53, 76, 368], "lgamma": [53, 76, 368], "45373654": [53, 350, 368], "6477685": [53, 350, 368], "modf": [53, 76, 368], "fraction": [53, 76, 351, 368, 383, 528, 632, 655], "nansum": [53, 76, 368], "accumul": [53, 76, 352, 368, 374, 485], "nextaft": [53, 76, 368], "0e": [53, 55, 76, 78, 353, 368, 617, 631], "4013e": [53, 76, 353, 368], "4028e": [53, 76, 353, 368], "signbit": [53, 76, 368], "637": [53, 76, 355, 368], "0909": [53, 76, 355, 368], "sparsify_tensor": [53, 76, 368], "sparsifi": [53, 76, 356, 368], "arang": [53, 58, 66, 76, 81, 133, 356, 368, 371, 372, 390, 391, 392, 399, 404, 408, 409, 410, 413, 422, 439, 472, 568, 610, 625, 630, 633, 636, 643, 674, 690, 712, 713, 755, 808, 825, 836, 873], "xlogi": [53, 76, 368], "0986": [53, 76, 357, 368], "3863": [53, 76, 357, 368], "0000": [53, 76, 310, 311, 314, 340, 357, 365, 368, 372, 374, 437, 474], "zeta": [53, 76, 368], "0369": [53, 76, 358, 368], "_arraywithgeneralexperiment": [53, 98], "init_valu": [53, 76, 80, 359, 369, 371, 414], "reduct": [53, 54, 59, 67, 70, 76, 77, 80, 82, 90, 359, 369, 371, 373, 374, 414, 448, 449, 450, 451, 452, 453, 454, 455, 485, 542, 572, 573, 630, 634, 644, 692, 693, 694, 763, 764, 789, 825, 833, 836, 840, 847], "_arraywithgradientsexperiment": [53, 98], "_arraywithimageexperiment": [53, 98], "_arraywithlayersexperiment": [53, 98], "adaptive_avg_pool1d": [53, 76, 371], "1d": [53, 76, 93, 94, 371, 372, 374, 383, 385, 393, 395, 397, 403, 438, 458, 463, 485, 489, 518, 772, 788], "adapt": [53, 76, 78, 371, 385, 386, 387, 388, 618, 631, 788, 792, 856], "pool": [53, 76, 80, 371, 385, 386, 387, 388, 390, 391, 392, 408, 409, 410, 411, 414, 788, 815], "plane": [53, 76, 236, 239, 241, 269, 281, 282, 283, 286, 371, 374, 385, 386, 387, 388, 486, 628], "l_in": [53, 76, 371, 385], "spatial": [53, 57, 76, 80, 371, 377, 385, 386, 387, 388, 407, 414, 418, 497, 498, 499, 502, 632, 645, 646, 647, 648, 650, 652, 654, 791], "Will": [53, 76, 371, 385, 386, 387, 388, 797, 851], "l_out": [53, 76, 371, 385], "nhwc": [53, 57, 76, 80, 371, 377, 386, 391, 396, 409, 413, 502, 632, 645, 648, 649, 652, 653, 654, 788], "3d": [53, 58, 76, 371, 386, 388, 395, 396, 460, 633, 671, 788, 843], "4d": [53, 76, 371, 372, 377, 386, 396, 397, 446, 502], "s_0": [53, 76, 371, 386, 387], "s_1": [53, 76, 371, 386, 387], "adaptive_max_pool2d": [53, 76, 371], "h_in": [53, 76, 371, 387, 388], "w_in": [53, 76, 371, 387, 388], "adaptive_max_pool3d": [53, 76, 371], "avg_pool1d": [53, 76, 371], "kernel": [53, 57, 76, 80, 371, 390, 391, 392, 408, 409, 410, 411, 632, 658, 845, 851, 866, 869, 870], "nwc": [53, 57, 76, 80, 371, 390, 395, 408, 411, 632, 645, 646, 647, 652, 653, 788], "count_include_pad": [53, 76, 371, 390, 391, 392, 788], "d_in": [53, 57, 76, 80, 371, 388, 390, 391, 392, 394, 399, 400, 404, 408, 409, 410, 411, 632, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654], "algorithm": [53, 57, 69, 76, 80, 106, 371, 372, 390, 391, 392, 407, 408, 409, 410, 411, 441, 443, 447, 633, 646, 648, 649, 650, 651, 654, 681, 784, 788, 802, 825, 837, 843, 851, 866, 868, 870], "ncw": [53, 57, 76, 80, 371, 390, 395, 396, 408, 411, 632, 645, 646, 647, 652, 653, 788], "avg_pool2d": [53, 76, 371], "divisor_overrid": [53, 76, 371, 390, 391, 392, 788], "avg_pool3d": [53, 76, 371], "ndhwc": [53, 57, 76, 80, 371, 392, 397, 410, 632, 645, 650, 651, 652, 653, 788], "volum": [53, 57, 76, 80, 371, 392, 394, 399, 400, 404, 410, 632, 650, 651], "ncdhw": [53, 57, 76, 80, 371, 392, 397, 410, 632, 645, 650, 651, 652, 653, 788], "dct": [53, 76, 371, 788, 848], "truncat": [53, 76, 371, 372, 393, 399, 403, 404, 405, 416, 445, 575, 630, 788, 829, 848], "larger": [53, 60, 66, 76, 83, 89, 161, 371, 393, 400, 403, 405, 416, 626, 635, 643, 695, 703, 760, 762, 788, 840, 843, 873], "ortho": [53, 76, 371, 393, 394, 399, 400, 403, 404, 405, 415, 416, 788], "onesid": [53, 76, 371, 394], "fft": [53, 76, 371, 394, 400, 415, 416, 419, 788, 814, 866], "symmetri": [53, 371, 394], "rfft": [53, 76, 371, 394, 416], "invok": [53, 371, 394, 808, 831, 859, 860], "batch_idx": [53, 371, 394], "signal_dim1": [53, 371, 394], "signal_dim2": [53, 371, 394], "signal_dimn": [53, 371, 394], "signal_dim": [53, 371, 394], "embed": [53, 76, 371, 373, 448, 632, 659, 774, 788, 866], "max_norm": [53, 54, 76, 77, 371, 398, 536, 537, 630, 788], "ifft": [53, 76, 371, 399, 405, 788], "pi": [53, 76, 282, 286, 371, 373, 399, 404, 453, 623, 628], "44509285e": [53, 76, 371, 399], "14423775e": [53, 76, 371, 399], "17j": [53, 76, 371, 399, 404], "11483250e": [53, 76, 371, 399], "16j": [53, 76, 371, 399, 404], "33486982e": [53, 76, 371, 399], "22464680e": [53, 76, 371, 399], "95799250e": [53, 76, 371, 399], "66951701e": [53, 76, 371, 399], "fft2": [53, 371], "vari": [53, 64, 93, 94, 287, 400, 541, 628, 630, 633, 641, 680, 746, 747, 748, 802, 823, 827, 837, 840, 847], "20477401j": [53, 371, 400], "0614962j": [53, 371, 400], "idct": [53, 76, 371], "49862671": [53, 76, 371, 393, 403], "37691498": [53, 76, 371, 393, 403], "00390816": [53, 76, 371, 393, 403], "58938599": [53, 76, 371, 393, 403], "92713165": [53, 76, 371, 393, 403], "078475": [53, 76, 371, 393, 403], "19664812": [53, 76, 371, 393, 403], "95411837": [53, 76, 371, 393, 403], "30636606e": [53, 76, 371, 404], "43029718e": [53, 76, 371, 404], "18j": [53, 76, 371, 399, 404], "53080850e": [53, 76, 371, 404], "58689626e": [53, 76, 371, 404], "24474906e": [53, 76, 371, 404], "91858728e": [53, 76, 371, 404], "01435406e": [53, 76, 371, 404], "ifftn": [53, 76, 371], "24730653": [53, 76, 371, 405], "90832391j": [53, 76, 371, 405], "49495562": [53, 76, 371, 405], "9039565j": [53, 76, 371, 405], "98193269": [53, 76, 371, 405], "49560517j": [53, 76, 371, 405], "93280757": [53, 76, 371, 405], "48075343j": [53, 76, 371, 405], "28526384": [53, 76, 371, 405], "3351205j": [53, 76, 371, 405], "2343787": [53, 76, 371, 405], "83528011j": [53, 76, 371, 405], "18791352": [53, 76, 371, 405], "30690572j": [53, 76, 371, 405], "82115787": [53, 76, 371, 405], "96195183j": [53, 76, 371, 405], "44719226": [53, 76, 371, 405], "72654048j": [53, 76, 371, 405], "51476765": [53, 371, 405], "66160417j": [53, 371, 405], "04319742": [53, 371, 405], "05411636j": [53, 371, 405], "015561": [53, 371, 405], "04216015j": [53, 371, 405], "06310689": [53, 371, 405], "05347854j": [53, 371, 405], "13392983": [53, 371, 405], "16052352j": [53, 371, 405], "08371392": [53, 371, 405], "17252843j": [53, 371, 405], "0031429": [53, 371, 405], "05421245j": [53, 371, 405], "10446617": [53, 371, 405], "17747098j": [53, 371, 405], "05344324": [53, 371, 405], "07972424j": [53, 371, 405], "8344667": [53, 76, 371, 405], "98222595j": [53, 76, 371, 405], "48472244": [53, 76, 371, 405], "30233797j": [53, 76, 371, 405], "recompute_scale_factor": [53, 76, 371, 407, 843], "antialia": [53, 76, 371, 407, 843], "height": [53, 54, 57, 76, 77, 80, 371, 407, 541, 630, 632, 648, 649, 650, 651, 654, 817, 848], "width": [53, 54, 57, 76, 77, 80, 371, 372, 374, 377, 383, 407, 426, 480, 502, 521, 541, 630, 632, 646, 647, 648, 649, 650, 651, 654, 659], "trilinear": [53, 76, 371, 407, 843], "nearest_exact": [53, 76, 371, 407, 843], "tf_area": [53, 76, 371, 407, 843], "mitchellcub": [53, 76, 371, 407, 843], "lanczos3": [53, 76, 371, 407, 843], "lanczos5": [53, 76, 371, 407, 843], "gaussian": [53, 76, 106, 371, 407, 622, 843], "overwrit": [53, 70, 76, 209, 371, 407, 627, 816, 836, 837, 845], "thu": [53, 76, 230, 243, 278, 286, 287, 371, 372, 407, 425, 628, 633, 668, 669, 814, 824, 829, 834, 837, 841], "antialias": [53, 76, 407], "max_pool1d": [53, 76, 371], "dilaton": [53, 76, 408, 409, 410], "max_pool3d": [53, 76, 371], "max_unpool1d": [53, 76, 371], "unpool": [53, 76, 371, 411], "reduce_window": [53, 80, 371], "window_dimens": [53, 80, 371, 414], "window_strid": [53, 80, 371, 414], "base_dil": [53, 80, 371, 414], "window_dil": [53, 80, 371, 414], "trim": [53, 70, 76, 371, 374, 415, 491], "orthonorm": [53, 58, 76, 81, 371, 415, 633, 680, 683], "8660254j": [53, 76, 371, 415], "rfftn": [53, 76, 371], "sliding_window": [53, 76, 371], "window_s": [53, 76, 371, 418], "frame_length": [53, 76, 371, 419], "frame_step": [53, 76, 371, 419], "fft_length": [53, 76, 371, 419], "window_fn": [53, 76, 371, 419], "pad_end": [53, 76, 371, 419], "smallest": [53, 70, 76, 161, 164, 232, 371, 374, 419, 490, 626, 628, 633, 674, 772, 774, 775], "enclos": [53, 76, 371, 419, 867], "window_length": [53, 76, 308, 310, 313, 314, 329, 365, 371, 419], "li": [53, 76, 371, 372, 383, 419, 426, 528, 855], "past": [53, 76, 371, 419, 816, 819, 838, 840, 852, 866], "fft_unique_bin": [53, 76, 371, 419], "complex64": [53, 73, 76, 154, 168, 177, 183, 249, 276, 371, 415, 419, 626, 628, 633, 681, 683, 684, 773, 825, 830], "complex128": [53, 76, 77, 154, 155, 168, 177, 183, 371, 419, 567, 626, 630, 633, 669, 670, 674, 690, 772, 773, 812, 825, 830], "compon": [53, 76, 138, 139, 217, 218, 219, 222, 225, 234, 236, 237, 239, 241, 269, 271, 272, 279, 282, 283, 286, 287, 319, 323, 334, 365, 368, 371, 372, 377, 419, 430, 441, 502, 625, 628, 640, 743, 808, 839, 845, 856, 862, 867, 869], "linear_algebra": [53, 58, 76, 81, 633, 841], "_arraywithlinearalgebraexperiment": [53, 98], "adjoint": [53, 58, 76, 81, 372, 442, 633, 672, 682, 683, 772], "batched_out": [53, 76, 372], "j1": [53, 76, 372, 421], "jn": [53, 76, 372, 421], "k1": [53, 76, 372, 421], "km": [53, 76, 372, 421], "outer": [53, 58, 76, 81, 93, 372, 421, 633, 636, 711, 712, 713, 802, 814], "30000001": [53, 76, 372, 421, 541, 630, 641, 746], "40000001": [53, 57, 69, 76, 98, 99, 108, 111, 292, 363, 372, 421, 622, 632, 641, 662, 746], "60000002": [53, 76, 89, 99, 372, 377, 421, 501, 503, 757], "80000001": [53, 76, 372, 377, 421, 501, 503], "60000001": [53, 76, 372, 421], "90000004": [53, 76, 372, 421, 643, 757], "20000002": [53, 76, 372, 421], "20000005": [53, 55, 76, 292, 300, 303, 304, 363, 372, 421, 611], "00000012": [53, 76, 372, 421], "49999994": [53, 76, 372, 421], "00000006": [53, 76, 372, 421], "60000014": [53, 76, 372, 421], "19999993": [53, 76, 372, 421], "80000007": [53, 76, 372, 421], "20000017": [53, 76, 372, 421], "89999992": [53, 76, 372, 421], "60000008": [53, 76, 372, 421], "80000019": [53, 76, 349, 368, 372, 421], "4000001": [53, 76, 80, 372, 421, 632, 655, 662], "cond": [53, 76, 119, 372, 624, 851], "933034373659268": [53, 422], "diagflat": [53, 76, 372, 432, 437], "offset": [53, 58, 61, 72, 76, 81, 84, 130, 372, 377, 423, 497, 498, 499, 625, 633, 638, 667, 687, 733, 779], "padding_valu": [53, 76, 372, 423], "right_left": [53, 76, 372, 423], "num_row": [53, 76, 372, 423], "num_col": [53, 76, 372, 423], "dot": [53, 57, 76, 80, 93, 372, 373, 439, 448, 632, 633, 659, 662, 689, 802, 808, 815, 824], "eig": [53, 58, 76, 372, 633, 669, 670], "37228132": [53, 76, 372, 425, 427, 668], "82456484": [53, 425, 668], "41597356": [53, 425, 668], "56576746": [53, 425, 668], "90937671": [53, 425, 668], "eigh_tridiagon": [53, 76, 372], "eigvals_onli": [53, 76, 372, 426], "select_rang": [53, 76, 372, 426], "tol": [53, 76, 97, 372, 426, 441, 447], "eigenvalu": [53, 58, 76, 81, 93, 94, 372, 425, 426, 427, 633, 668, 669, 670, 676], "eigenvector": [53, 76, 372, 425, 426, 633, 668, 669], "interv": [53, 62, 67, 76, 85, 90, 122, 133, 134, 141, 372, 383, 426, 521, 625, 633, 635, 639, 644, 664, 689, 695, 698, 706, 735, 737, 763, 764], "togeth": [53, 70, 76, 330, 347, 368, 372, 426, 793, 808, 817, 820, 823, 825, 836, 837, 840, 841, 843, 849, 850, 851, 856, 864, 866, 867, 872], "cluster": [53, 76, 372, 426, 851, 866], "converg": [53, 76, 372, 426, 857], "_2": [53, 76, 372, 426], "eig_val": [53, 76, 372, 426], "decreas": [53, 76, 372, 426, 774], "eig_vector": [53, 76, 372, 426], "38196": [53, 426], "61803": [53, 426], "eigval": [53, 76, 372], "general_inner_product": [53, 81, 372], "n_mode": [53, 81, 372, 428], "tradit": [53, 81, 372, 428], "inner": [53, 58, 72, 81, 102, 137, 372, 425, 428, 625, 633, 636, 668, 669, 673, 711, 712, 713, 802, 814, 836], "higher_order_mo": [53, 76, 372], "n_featur": [53, 76, 372, 429], "d1": [53, 76, 372, 429], "dn": [53, 76, 372, 429], "initialize_tuck": [53, 76, 372], "svd": [53, 58, 76, 81, 96, 372, 430, 436, 441, 443, 444, 445, 447, 633, 684], "truncated_svd": [53, 76, 372, 430, 441, 444, 447], "non_neg": [53, 76, 323, 365, 372, 430], "mask": [53, 57, 76, 80, 93, 371, 372, 374, 417, 430, 431, 441, 447, 487, 551, 630, 632, 655, 659, 662, 843], "svd_mask_repeat": [53, 76, 372, 430, 441, 447], "tuckertensor": [53, 76, 97, 323, 365, 372, 430, 441, 447], "scheme": [53, 76, 372, 430, 441, 819, 849, 866], "tucker": [53, 76, 323, 365, 372, 430, 441], "decomposit": [53, 58, 76, 81, 93, 94, 96, 319, 320, 321, 322, 323, 365, 372, 430, 434, 441, 444, 446, 447, 633, 663, 669, 680, 683, 814, 873], "miss": [53, 76, 372, 374, 430, 441, 447, 487, 792, 814, 815, 820, 823, 824, 827, 837, 840, 843], "everywher": [53, 76, 372, 430, 441, 447], "imput": [53, 76, 372, 430, 441, 447], "kron": [53, 76, 372, 437, 873], "make_svd_non_neg": [53, 76, 372, 445], "nntype": [53, 76, 372, 436], "nndsvd": [53, 76, 372, 436], "singular": [53, 58, 76, 81, 372, 430, 436, 443, 445, 633, 674, 676, 679, 683, 684, 772, 774, 825], "nndsvda": [53, 76, 372, 436], "boutsidi": [53, 76, 372, 436], "gallopoulo": [53, 76, 372, 436], "pattern": [53, 54, 76, 77, 372, 436, 541, 542, 543, 630, 825, 828, 839, 857], "recognit": [53, 76, 372, 436, 811], "1350": [53, 76, 372, 436], "1362": [53, 76, 372, 436], "2008": [53, 76, 372, 436, 866], "matrix_exp": [53, 76, 372], "7183": [53, 76, 372, 437], "3891": [53, 76, 372, 437], "mode_dot": [53, 76, 92, 93, 97, 372], "matrix_or_vector": [53, 76, 93, 97, 372, 438], "i_1": [53, 76, 93, 94, 372, 438], "i_k": [53, 76, 93, 372, 438], "i_n": [53, 76, 93, 372, 438], "i_": [53, 76, 93, 372, 383, 438, 521], "multi_dot": [53, 76, 372], "148": [53, 75, 76, 239, 372, 439], "multi_mode_dot": [53, 76, 372], "mat_or_vec_list": [53, 76, 372, 440], "times_0": [53, 372, 440], "vec": [53, 372, 440], "times_1": [53, 372, 440], "cdot": [53, 269, 372, 440, 628], "times_n": [53, 372, 440], "partial_tuck": [53, 76, 372], "n_iter_max": [53, 76, 372, 441, 447], "verbos": [53, 76, 372, 441, 444, 447, 806, 840, 845], "return_error": [53, 76, 372, 441, 447], "variat": [53, 76, 372, 441, 447, 827, 837, 840], "reconstruct": [53, 58, 64, 76, 87, 96, 372, 374, 441, 447, 494, 633, 641, 683, 745, 747, 838], "return_erro": [53, 372, 441, 447], "svd_flip": [53, 76, 372], "u_based_decis": [53, 76, 372, 443], "basi": [53, 76, 372, 443, 816, 819, 848], "flip": [53, 60, 76, 83, 93, 227, 372, 374, 443, 471, 472, 628, 635, 836, 847, 848, 850], "decis": [53, 76, 372, 443, 808, 819, 825, 843, 845, 847, 866], "u_adjust": [53, 76, 372, 443], "v_adjust": [53, 76, 372, 443], "tensor_train": [53, 76, 372], "tt": [53, 76, 322, 365, 372, 444, 446], "kth": [53, 372, 444], "tttensor": [53, 96, 322, 365, 372, 444], "compute_uv": [53, 58, 76, 81, 372, 445, 633, 683], "n_eigenvec": [53, 76, 372, 445], "returnedv": [53, 445], "vh": [53, 58, 76, 81, 372, 445, 633, 683], "eigen": [53, 76, 372, 445], "namedtupl": [53, 58, 64, 76, 81, 87, 372, 374, 425, 445, 494, 633, 641, 668, 669, 680, 681, 683, 745, 746, 747], "tt_matrix_to_tensor": [53, 76, 372], "known": [53, 76, 280, 372, 444, 446, 628, 787, 819, 824, 825, 837, 840], "rank_k": [53, 76, 372, 446], "left_dim_k": [53, 76, 372, 446], "right_dim_k": [53, 76, 372, 446], "rank_": [53, 76, 372, 446], "49671414": [53, 76, 372, 446, 639, 736], "1382643": [53, 76, 372, 446, 639, 736], "64768857": [53, 76, 372, 446, 639, 736], "5230298": [53, 76, 372, 446, 639, 736], "23415337": [53, 76, 372, 446, 639, 736], "23413695": [53, 76, 372, 446, 639, 736], "57921278": [53, 76, 372, 446], "76743472": [53, 76, 372, 446], "1163073": [53, 76, 372, 446], "11629914": [53, 76, 372, 446], "03237505": [53, 76, 372, 446], "03237278": [53, 76, 372, 446], "78441733": [53, 76, 372, 446], "38119566": [53, 76, 372, 446], "21834874": [53, 76, 372, 446], "10610882": [53, 76, 372, 446], "15165846": [53, 76, 372, 446], "15164782": [53, 76, 372, 446], "35662258": [53, 76, 372, 446], "35659757": [53, 76, 372, 446], "02283812": [53, 76, 372, 446], "49705869": [53, 76, 372, 446], "40518808": [53, 76, 372, 446], "16882598": [53, 76, 372, 446], "fixed_factor": [53, 76, 372, 447], "tl": [53, 76, 372, 447], "kolda": [53, 76, 372, 447], "bader": [53, 76, 372, 447], "siam": [53, 76, 372, 444, 447], "review": [53, 76, 372, 447, 810, 811, 814, 816, 822, 824, 827, 837, 841], "vol": [53, 76, 372, 447], "pp": [53, 76, 372, 447], "455": [53, 76, 372, 447], "2009": [53, 76, 372, 447], "_arraywithlossesexperiment": [53, 98], "hinge_embedding_loss": [53, 76, 373], "margin": [53, 76, 373, 448, 455, 837], "measur": [53, 373, 448, 632, 659, 788], "semi": [53, 373, 448], "supervis": [53, 373, 448], "l_n": [53, 373, 448], "x_n": [53, 373, 448], "y_n": [53, 373, 448], "ell": [53, 373, 448], "operatornam": [53, 280, 282, 373, 448, 628, 633, 669], "l_1": [53, 373, 448], "Its": [53, 373, 448, 866], "hyperparamet": [53, 76, 373, 448], "aggreg": [53, 76, 373, 448, 641, 745, 824], "unreduc": [53, 76, 373, 448], "hing": [53, 76, 373, 448, 455], "input_tensor": [53, 76, 372, 373, 444, 448, 453, 837], "target_tensor": [53, 373, 448, 453], "huber_loss": [53, 76, 373], "delta": [53, 55, 76, 78, 373, 449, 611, 631], "transit": [53, 76, 373, 449, 866], "huber": [53, 76, 373, 449], "kl_div": [53, 76, 373], "log_target": [53, 76, 373, 450], "contai": [53, 450], "batchmean": [53, 373, 450], "kullback": [53, 76, 373, 450], "leibler": [53, 76, 373, 450], "0916": [53, 450], "l1_loss": [53, 76, 373, 452], "l1": [53, 58, 76, 81, 373, 377, 449, 451, 452, 454, 500, 633, 690, 823, 848], "targetict": [53, 76, 373, 451, 452, 454, 455], "20000000000000004": [53, 451], "log_poisson_loss": [53, 76, 373], "compute_full_loss": [53, 76, 373, 452, 789], "favor": [53, 76, 373, 452], "likelihood": [53, 76, 373, 452, 453], "28402555": [53, 373, 452], "03402555": [53, 373, 452], "1573164": [53, 373, 452], "poisson_nll_loss": [53, 76, 373], "log_input": [53, 76, 373, 453], "poisson": [53, 76, 373, 378, 452, 453], "assumpt": [53, 373, 452, 453], "minu": [53, 373, 452, 453], "omiss": [53, 373, 453], "stirl": [53, 76, 373, 452, 453], "describ": [53, 66, 76, 94, 219, 236, 237, 269, 272, 274, 373, 378, 381, 453, 508, 511, 628, 632, 643, 659, 755, 759, 761, 810, 811, 814, 815, 816, 822, 824, 836, 837, 840, 845, 850, 866], "prevent": [53, 55, 76, 78, 373, 453, 553, 611, 612, 617, 630, 631, 632, 643, 655, 761, 787, 792, 814, 816, 824, 825, 829, 836, 837, 841], "1977562": [53, 453], "smooth_l1_loss": [53, 76, 373], "smooth": [53, 59, 76, 82, 373, 449, 454, 634, 692, 693, 694, 835], "8125": [53, 454], "soft_margin_loss": [53, 76, 373], "soft": [53, 76, 303, 373, 374, 455, 487, 826], "35667497": [53, 455], "22314353": [53, 455], "60943791": [53, 455], "manipul": [53, 76, 836, 837, 841, 843, 845, 850, 855, 866], "_arraywithmanipulationexperiment": [53, 98], "as_strid": [53, 76, 374], "nativeshap": [53, 57, 60, 62, 76, 83, 85, 123, 124, 126, 131, 138, 144, 374, 378, 456, 468, 473, 481, 484, 504, 505, 506, 507, 508, 573, 586, 592, 594, 625, 630, 632, 635, 639, 645, 647, 649, 651, 653, 702, 735, 736, 737, 832, 834], "byte": [53, 54, 72, 76, 77, 98, 130, 374, 456, 567, 625, 630, 871, 872], "associative_scan": [53, 76, 374], "revers": [53, 54, 58, 66, 76, 81, 89, 98, 99, 362, 370, 371, 372, 374, 383, 417, 433, 457, 471, 472, 519, 520, 540, 630, 633, 635, 643, 688, 699, 753, 754, 814, 823, 824, 825, 827, 828, 836, 837, 843, 850, 851], "scan": [53, 76, 374, 457, 851], "atleast_1d": [53, 76, 374], "ari": [53, 76, 374, 458, 459, 460, 466, 475, 495], "a1": [53, 77, 374, 458, 459, 460, 464, 533], "a2": [53, 77, 374, 458, 459, 460, 464, 533], "atleast_2d": [53, 76, 374], "atleast_3d": [53, 76, 374], "column_stack": [53, 76, 374], "concat_from_sequ": [53, 76, 374], "input_sequ": [53, 76, 374, 465], "new_axi": [53, 76, 374, 465, 850], "dsplit": [53, 76, 374], "indices_or_sect": [53, 76, 374, 466, 475, 495], "3rd": [53, 76, 374, 466], "dstack": [53, 76, 374], "fill_diagon": [53, 76, 374], "fill_diag": [53, 469], "fortran": [53, 60, 76, 83, 374, 470, 635, 702, 866, 870], "layout": [53, 60, 76, 83, 374, 470, 635, 702, 821, 836, 837, 843], "fliplr": [53, 76, 374, 836], "diag": [53, 58, 76, 81, 94, 374, 471, 472, 633, 669, 845], "flipud": [53, 76, 374, 836], "fold": [53, 76, 374, 481, 482, 824], "unfold": [53, 76, 93, 94, 96, 372, 374, 430, 473, 481, 483], "folded_tensor": [53, 374, 473], "heavisid": [53, 76, 374], "5000": [53, 374, 474, 633, 672, 802], "hsplit": [53, 76, 374], "horizont": [53, 76, 374, 464, 475, 541, 630], "hstack": [53, 76, 374, 464], "i0": [53, 76, 374, 383, 521], "bessel": [53, 66, 76, 89, 313, 365, 374, 477, 643, 760, 762], "kind": [53, 66, 76, 161, 164, 165, 383, 477, 519, 520, 525, 626, 643, 753, 754, 759, 761, 772, 773, 813, 837, 840, 843, 845, 851], "26606588": [53, 76, 374, 477], "2795853": [53, 76, 374, 477], "88079259": [53, 76, 374, 477], "row_mod": [53, 76, 374, 478], "column_mod": [53, 76, 374, 478], "ascend": [53, 65, 76, 88, 374, 381, 478, 511, 642, 749, 751, 817], "prod": [53, 54, 66, 77, 89, 372, 374, 431, 433, 478, 527, 542, 630, 643, 772, 802, 825, 827, 845, 863], "moveaxi": [53, 76, 374], "destin": [53, 76, 374, 479], "unstack": [53, 60, 70, 83, 479, 635, 823, 845, 848, 873], "reorder": [53, 60, 76, 83, 374, 479, 541, 630, 635, 699, 839], "stat_length": [53, 76, 374, 480], "constant_valu": [53, 76, 374, 480], "end_valu": [53, 76, 374, 480], "reflect_typ": [53, 76, 374, 480], "partial_fold": [53, 76, 374], "skip_begin": [53, 76, 374, 481, 482, 483, 484], "untouch": [53, 76, 374, 481, 482, 483, 484], "partial_tensor_to_vec": [53, 76, 374], "skip_end": [53, 76, 374, 482, 483], "vectoris": [53, 76, 93, 374, 482, 484], "partial_unfold": [53, 76, 374], "ravel_tensor": [53, 76, 374, 483], "n_1": [53, 76, 374, 483], "n_2": [53, 76, 374, 483], "n_i": [53, 76, 372, 374, 431, 483], "partial_vec_to_tensor": [53, 76, 374], "put_along_axi": [53, 76, 374], "rot90": [53, 76, 374, 836], "rotat": [53, 76, 374, 486], "soft_threshold": [53, 76, 374], "behav": [53, 76, 331, 332, 368, 372, 374, 425, 488, 633, 668, 819, 829, 834, 836, 837, 838, 847, 867], "invalid": [53, 67, 76, 90, 374, 488, 633, 635, 644, 689, 698, 763, 764, 772, 815, 825], "slice": [53, 66, 70, 76, 77, 89, 94, 143, 324, 365, 374, 463, 485, 488, 489, 548, 549, 551, 577, 625, 630, 637, 643, 723, 758, 840, 866], "inexact": [53, 76, 342, 368, 374, 488], "largest": [53, 70, 76, 161, 164, 372, 374, 443, 488, 490, 626, 633, 674, 683], "take_along_axi": [53, 76, 374], "arr": [53, 54, 73, 76, 169, 374, 463, 485, 489, 573, 626, 825, 826], "top_k": [53, 76, 374], "sort": [53, 64, 70, 76, 87, 99, 195, 288, 372, 374, 383, 425, 490, 511, 525, 627, 628, 633, 641, 668, 669, 683, 684, 745, 749, 750, 751, 774, 808, 813, 824, 839, 841], "trim_zero": [53, 76, 374], "fb": [53, 76, 374, 491], "front": [53, 76, 374, 491, 837, 844, 845, 848, 855, 864, 866], "unflatten": [53, 76, 374], "unfolded_tensor": [53, 374, 493], "unique_consecut": [53, 76, 374], "vsplit": [53, 76, 374], "vertic": [53, 76, 374, 495, 496, 541, 630, 816], "_arraywithnormsexperiment": [53, 98], "varianc": [53, 66, 76, 89, 377, 497, 499, 643, 762, 787, 791], "nsc": [53, 76, 377, 497, 498, 499, 791], "braodcast": [53, 76, 377, 497], "running_mean": [53, 76, 377, 497, 499, 791], "running_var": [53, 76, 377, 497, 499, 791], "nc": [53, 76, 377, 497, 498, 499, 791], "group_norm": [53, 76, 377], "num_group": [53, 76, 377, 498], "group": [53, 76, 374, 377, 494, 498, 632, 637, 645, 652, 653, 716, 806, 817, 819, 823, 825, 833, 837, 838, 862, 865, 871], "instance_norm": [53, 76, 377], "l1_normal": [53, 76, 377], "33333334": [53, 76, 294, 363, 377, 500, 503, 613, 631, 632, 633, 654, 690], "33333337": [53, 133, 377, 500, 613, 625, 631], "28571439": [53, 377, 500], "l2_normal": [53, 76, 377, 503], "l2": [53, 58, 81, 92, 93, 377, 501, 503, 633, 690, 788, 823], "44721359": [53, 76, 377, 501, 503], "89442718": [53, 76, 377, 501, 503], "lp_normal": [53, 76, 377], "lp": [53, 377, 503], "_arraywithrandomexperiment": [53, 98], "bernoulli": [53, 76, 371, 378, 395, 396, 397], "event": [53, 76, 378, 504, 840], "entri": [53, 60, 70, 76, 83, 87, 94, 133, 372, 374, 378, 442, 469, 471, 472, 504, 625, 635, 637, 704, 727, 745, 815, 824, 840, 866], "parameter": [53, 62, 76, 85, 378, 504, 505, 507, 508, 639, 734, 736, 737], "odd": [53, 76, 274, 374, 378, 480, 504, 628, 802, 813, 819], "drawn": [53, 62, 76, 85, 378, 504, 505, 506, 507, 508, 639, 734, 735, 736, 737, 772, 773, 774, 787, 840], "dirichlet": [53, 76, 378], "10598304": [53, 378, 506], "21537054": [53, 378, 506], "67864642": [53, 378, 506], "48006698": [53, 378, 506], "07472073": [53, 378, 506], "44521229": [53, 378, 506], "55479872": [53, 378, 506], "05426367": [53, 378, 506], "39093761": [53, 378, 506], "19531053": [53, 378, 506], "51675832": [53, 378, 506], "28793114": [53, 378, 506], "12315625": [53, 378, 506], "29823365": [53, 378, 506], "5786101": [53, 378, 506], "15564976": [53, 378, 506], "50542368": [53, 378, 506], "33892656": [53, 378, 506], "1325352": [53, 378, 506], "44439589": [53, 378, 506], "42306891": [53, 378, 506], "gamma": [53, 61, 76, 84, 338, 350, 368, 378, 383, 522, 638, 733], "rate": [53, 55, 76, 78, 371, 378, 413, 508, 612, 615, 617, 618, 619, 631, 632, 636, 657, 711, 712, 713, 792, 824], "lam": [53, 76, 378, 508], "_arraywithsearchingexperiment": [53, 98], "unravel_index": [53, 76, 379], "unravel": [53, 76, 379, 509], "_arraywithsetexperiment": [53, 98], "_arraywithsortingexperiment": [53, 98], "lexsort": [53, 76, 381], "indirectli": [53, 76, 381, 511], "statist": [53, 76, 91, 374, 480, 791, 806, 814, 825, 840, 841, 866], "_arraywithstatisticalexperiment": [53, 98], "bincount": [53, 76, 383], "minlength": [53, 76, 383, 516], "corrcoef": [53, 76, 383], "rowvar": [53, 76, 383, 517, 518], "relationship": [53, 76, 517, 787, 839], "cov": [53, 76, 383], "ddof": [53, 76, 383, 518], "fweight": [53, 76, 383, 518], "aweight": [53, 76, 383, 518], "overridden": [53, 76, 383, 518, 792, 820], "unbias": [53, 66, 76, 89, 383, 518, 643, 762], "typic": [53, 76, 330, 347, 368, 383, 518, 642, 751, 788, 819, 833, 865, 873], "assign": [53, 76, 93, 383, 518, 814, 816, 821, 825, 836, 839, 847], "covari": [53, 76, 383, 518], "cummax": [53, 76, 383], "exclus": [53, 54, 66, 70, 76, 77, 89, 122, 372, 383, 441, 519, 520, 560, 561, 564, 625, 630, 639, 643, 735, 753, 754, 811, 823, 825, 833, 850, 870, 872], "cumul": [53, 66, 76, 89, 383, 519, 520, 643, 753, 754], "uint64": [53, 66, 158, 163, 165, 166, 176, 178, 181, 383, 519, 520, 626, 643, 753, 754, 759, 761, 772, 773, 825, 840, 845], "uint16": [53, 66, 153, 158, 163, 164, 173, 383, 519, 520, 626, 643, 753, 754, 759, 761, 772, 773, 825, 837, 840, 845], "bit": [53, 66, 160, 161, 164, 227, 228, 230, 383, 519, 520, 626, 628, 643, 753, 754, 759, 761, 808, 813, 814, 815, 823, 824, 825, 827, 833, 845, 847, 872], "uint32": [53, 66, 158, 163, 164, 165, 187, 383, 519, 520, 626, 643, 753, 754, 759, 761, 772, 773, 825, 840, 845], "cummin": [53, 76, 383], "histogram": [53, 76, 383], "extend_lower_interv": [53, 76, 383, 521], "extend_upper_interv": [53, 76, 383, 521], "densiti": [53, 76, 383, 521], "monoton": [53, 76, 383, 521], "rightmost": [53, 76, 383, 521], "c1": [53, 76, 383, 521, 823], "ff": [53, 76, 383, 521], "c_": [53, 76, 94, 383, 521], "igamma": [53, 76, 383], "incomplet": [53, 76, 383, 522, 816], "3614": [53, 76, 383, 522], "2085": [53, 76, 383, 522], "median": [53, 76, 374, 383, 480, 525], "nanmean": [53, 76, 383], "6666666666666665": [53, 76, 383, 524], "nanmedian": [53, 76, 383], "overwrite_input": [53, 76, 383, 525], "treat": [53, 70, 76, 99, 274, 352, 368, 374, 377, 383, 489, 502, 525, 527, 628, 769, 835, 840, 846, 850], "undefin": [53, 76, 374, 383, 384, 480, 525, 529, 825, 829, 835], "nanmin": [53, 76, 383], "nanprod": [53, 76, 383], "Not": [53, 76, 352, 368, 372, 383, 427, 527, 623, 821, 829, 838, 848, 849, 851], "quantil": [53, 76, 383, 863], "inclus": [53, 76, 122, 383, 528, 625, 639, 735, 809, 821, 836, 843], "midpoint": [53, 76, 383, 528], "surround": [53, 76, 383, 528, 843], "whichev": [53, 76, 383, 528], "_arraywithutilityexperiment": [53, 98], "optional_get_el": [53, 76, 384], "empti": [53, 54, 66, 70, 77, 89, 122, 374, 384, 480, 529, 536, 573, 625, 630, 633, 637, 643, 644, 687, 690, 728, 758, 759, 761, 763, 764, 814, 815, 820, 822, 825, 826, 836], "_arraywithgener": [54, 98], "all_equ": [54, 77, 630], "equality_matrix": [54, 77, 530, 630], "array_equ": [54, 77, 630], "assert_supports_inplac": [54, 77, 630], "ivybackendexcept": [54, 77, 534, 558, 630, 803, 820, 826, 829, 830], "clip_matrix_norm": [54, 77, 630], "894": [54, 77, 536, 537, 630, 638, 733], "clip_vector_norm": [54, 77, 630], "default_v": [54, 540, 630], "catch_except": [54, 540, 630], "rev": [54, 540, 630], "with_cal": [54, 540, 630], "catch": [54, 540, 630, 834, 840], "einops_rearrang": [54, 77, 630], "axes_length": [54, 77, 541, 542, 543, 630], "arrang": [54, 541, 630], "rearrang": [54, 77, 541, 543, 630, 839], "einops_reduc": [54, 77, 630, 825], "einops_repeat": [54, 77, 630], "fourier_encod": [54, 77, 630], "max_freq": [54, 77, 545, 630], "oppos": [54, 77, 545, 630, 825], "geometr": [54, 77, 545, 630, 633, 688], "0000000e": [54, 77, 545, 630], "2246468e": [54, 77, 545, 630], "4492936e": [54, 545, 630], "6739404e": [54, 77, 545, 630], "batch_dim": [54, 77, 548, 549, 630, 794], "gather_nd": [54, 77, 630], "get_num_dim": [54, 77, 630], "as_arrai": [54, 77, 552, 586, 630, 794], "has_nan": [54, 77, 630], "include_inf": [54, 77, 554, 609, 630], "inplace_decr": [54, 77, 630], "val": [54, 70, 75, 77, 249, 374, 469, 556, 557, 558, 577, 578, 579, 628, 630, 825, 836, 847], "decrement": [54, 77, 556, 630], "inplace_incr": [54, 77, 630], "increment": [54, 77, 557, 630, 816, 866], "inplace_upd": [54, 77, 576, 630, 785, 836], "ensure_in_backend": [54, 77, 558, 630, 836], "keep_input_dtyp": [54, 77, 558, 630, 836], "is_arrai": [54, 77, 630, 836, 837], "is_ivy_arrai": [54, 77, 630, 836, 847], "is_ivy_contain": [54, 630], "is_native_arrai": [54, 77, 172, 561, 626, 630, 847], "isin": [54, 77, 630, 863], "test_el": [54, 77, 565, 630], "assume_uniqu": [54, 77, 565, 630], "invert": [54, 77, 227, 565, 628, 630, 633, 675], "scatter_flat": [54, 77, 630], "occupi": [54, 161, 164, 572, 573, 626, 630], "scatter_nd": [54, 77, 630, 843, 847], "stable_divid": [54, 77, 630, 833], "denomin": [54, 61, 77, 84, 579, 588, 602, 630, 638, 733, 791, 833, 842, 851, 863], "min_denomin": [54, 77, 579, 588, 602, 630, 842], "_min_denomin": [54, 588, 630], "stable_pow": [54, 77, 630], "min_bas": [54, 77, 578, 589, 601, 630, 791, 842], "stabl": [54, 65, 77, 88, 143, 324, 331, 332, 365, 368, 381, 511, 578, 579, 588, 589, 601, 602, 625, 630, 642, 749, 752, 774, 815, 821, 825, 837, 842, 845, 851], "00004": [54, 77, 589, 630], "00008": [54, 77, 589, 630], "00004000e": [54, 589], "56002560e": [54, 589], "60001200e": [54, 589], "09602048e": [54, 589], "supports_inplace_upd": [54, 77, 630], "to_fil": 54, "fid": 54, "sep": 54, "format_": 54, "recov": [54, 829, 837], "to_scalar": [54, 77, 630], "value_is_nan": [54, 77, 630], "_arraywithgradi": [55, 98], "adam_step": [55, 78, 631], "mw": [55, 78, 611, 612, 631, 849], "vw": [55, 78, 611, 612, 631, 849], "beta1": [55, 78, 532, 611, 612, 617, 630, 631, 792, 849], "beta2": [55, 78, 532, 611, 612, 617, 630, 631, 792, 849], "epsilon": [55, 58, 59, 78, 81, 82, 532, 611, 612, 617, 630, 631, 633, 634, 676, 679, 692, 693, 694, 784, 789, 791, 792, 823, 833, 836, 849], "dc": [55, 78, 611, 612, 615, 617, 618, 619, 631], "dw": [55, 78, 611, 612, 615, 617, 618, 619, 631], "forget": [55, 78, 611, 612, 617, 631, 792, 808, 825], "dcdw": [55, 78, 611, 612, 615, 617, 618, 631], "adam_step_delta": [55, 78, 611, 631], "2020105": [55, 611, 631], "22187898": [55, 611, 631], "24144873": [55, 611, 631], "10000002": [55, 89, 292, 363, 611, 757], "00300002": [55, 611], "00800002": [55, 611], "adam_upd": [55, 78, 631, 849], "mw_tm1": [55, 78, 612, 617, 631], "vw_tm1": [55, 78, 612, 617, 631], "stop_gradi": [55, 78, 209, 532, 612, 615, 617, 618, 619, 627, 630, 631, 636, 711, 712, 713, 792, 849], "ws_new": [55, 78, 612, 617, 618, 619, 631], "updated_weight": [55, 78, 612, 631], "92558753": [55, 612], "92558873": [55, 612, 631], "92558718": [55, 612, 631], "00000063e": [55, 78, 612, 631], "00000016e": [55, 78, 612, 631], "00000086e": [55, 78, 612, 631], "gradient_descent_upd": [55, 78, 631, 636, 711, 712, 713], "descent": [55, 78, 615, 631, 792, 849, 866], "new_weight": [55, 78, 615, 617, 618, 631, 848], "lamb_upd": [55, 78, 631], "max_trust_ratio": [55, 78, 617, 631, 792], "decay_lambda": [55, 78, 617, 618, 631, 792], "trust": [55, 78, 617, 631, 792], "ratio": [55, 78, 617, 631, 792], "decai": [55, 78, 617, 618, 631, 792], "lamb": [55, 78, 617, 631, 792, 849], "784": [55, 617, 631], "lars_upd": [55, 78, 631], "lar": [55, 78, 618, 631, 792, 849], "34077978": [55, 618, 631], "78025991": [55, 618, 631], "56051969": [55, 618, 631], "78026009": [55, 618, 631], "56051981": [55, 618, 631], "12103939": [55, 618, 631], "optimizer_upd": [55, 78, 631], "effective_grad": [55, 78, 619, 631], "3e": [55, 78, 619, 631], "preserve_typ": [55, 78, 620, 631], "_arraywithimag": [56, 98], "_arraywithlay": [57, 98], "conv1d": [57, 80, 632, 788], "filter_format": [57, 80, 632, 645, 646, 647, 648, 649, 650, 651, 652, 653], "channel_last": [57, 80, 632, 645, 646, 647, 648, 649, 650, 651, 652, 653, 772], "x_dilat": [57, 80, 632, 645, 646, 648, 649, 650, 652], "d_out": [57, 80, 371, 388, 632, 645, 646, 647, 648, 649, 650, 651, 652, 653], "channel_first": [57, 80, 632, 645, 646, 647, 648, 649, 650, 651, 652, 653], "wio": [57, 632, 645, 646, 647, 652], "conv1d_transpos": [57, 80, 632], "output_shap": [57, 80, 632, 645, 647, 649, 651, 653, 788], "iow": [57, 80, 632, 647], "woi": [57, 80, 632, 647], "fh": [57, 80, 632, 637, 645, 648, 649, 650, 651, 652, 653, 654, 726], "hwio": [57, 632, 645, 646, 648, 652], "conv2d_transpos": [57, 80, 632], "iohw": [57, 80, 632, 649], "hwoi": [57, 80, 632, 649], "conv3d": [57, 80, 632, 651, 788], "fd": [57, 80, 632, 645, 650, 651, 652, 653], "conv3d_transpos": [57, 80, 632, 653], "iodhw": [57, 80, 632, 651, 653], "dhwoi": [57, 80, 632, 651, 653], "depthwise_conv2d": [57, 80, 632], "randint": [57, 62, 64, 80, 85, 639, 641, 654, 658, 745, 825, 859], "noise_shap": [57, 80, 632, 655], "42857146": [57, 632, 655], "85714293": [57, 632, 655], "28571415": [57, 80, 632, 655], "71428585": [57, 80, 632, 655], "14285755": [57, 80, 632, 655], "5714283": [57, 632, 655], "4285717": [57, 80, 632, 655], "8571434": [57, 80, 632, 655], "2857151": [57, 632, 655], "dropout1d": [57, 80, 371], "droput1d": [57, 395, 396], "dropout2d": [57, 80, 371], "dropout3d": [57, 80, 371], "droput3d": [57, 397], "outer_batch_shap": [57, 80, 632, 656], "inner_batch_shap": [57, 80, 632, 656], "lstm_updat": [57, 80, 632, 845], "init_h": [57, 80, 632, 658, 845], "init_c": [57, 80, 632, 658, 845], "recurrent_kernel": [57, 80, 632, 658, 845], "recurrent_bia": [57, 80, 632, 658, 845], "hidden": [57, 80, 632, 657, 658, 788, 822, 829, 845, 849], "recurr": [57, 76, 80, 371, 417, 632, 658, 845, 866, 870], "timestep": [57, 76, 80, 371, 417, 632, 657, 658, 659, 788, 845], "h_i": [57, 80, 658], "c_i": [57, 80, 658], "rc": [57, 80, 658], "multi_head_attent": [57, 80, 632, 836], "num_head": [57, 80, 632, 659, 788], "in_proj_weight": [57, 80, 632, 659], "q_proj_weight": [57, 80, 632, 659], "k_proj_weight": [57, 80, 632, 659], "v_proj_weight": [57, 80, 632, 659], "out_proj_weight": [57, 80, 632, 659], "in_proj_bia": [57, 80, 632, 659], "out_proj_bia": [57, 80, 632, 659], "is_caus": [57, 80, 632, 659, 662], "key_padding_mask": [57, 80, 632, 659], "bias_k": [57, 80, 632, 659], "bias_v": [57, 80, 632, 659], "static_k": [57, 80, 632, 659], "static_v": [57, 80, 632, 659], "add_zero_attn": [57, 80, 632, 659], "return_attention_weight": [57, 80, 632, 659], "average_attention_weight": [57, 80, 632, 659], "scaled_dot_product_attent": [57, 80, 632], "dropout_p": [57, 80, 632, 662], "num_queri": [57, 80, 632, 662], "feat_dim": [57, 80, 632, 662], "num_kei": [57, 80, 632, 662], "causal": [57, 80, 632, 659, 662], "attent": [57, 80, 632, 659, 662, 788, 816, 820, 856], "29999995": [57, 292, 293, 303, 363, 371, 415, 632, 641, 662, 746], "19994521": [57, 632, 662], "09994531": [57, 632, 662], "30000019": [57, 374, 464, 632, 662], "_arraywithlinearalgebra": [58, 98], "choleski": [58, 81, 633, 836], "625": [58, 76, 344, 633, 663], "vif": [58, 81, 664], "det": [58, 81, 633, 681, 824], "axis1": [58, 60, 81, 83, 633, 635, 667, 687, 707], "axis2": [58, 81, 633, 667, 687], "eigh": [58, 81, 372, 425, 633, 668], "uplo": [58, 81, 633, 669, 670], "eigvalsh": [58, 81, 633], "array_lik": [58, 81, 371, 373, 374, 416, 449, 450, 454, 455, 485, 633, 671, 678, 802], "105": [58, 80, 632, 633, 655, 656, 671, 678], "149": [58, 633, 671], "143": [58, 75, 99, 286, 628, 633, 671, 827], "203": [58, 75, 225, 633, 638, 671, 733], "233": [58, 633, 671], "inv": [58, 81, 633], "transpose_a": [58, 81, 633, 673], "transpose_b": [58, 81, 633, 673], "adjoint_a": [58, 81, 633, 673], "adjoint_b": [58, 81, 633, 673], "matrix_norm": [58, 81, 633], "ord": [58, 81, 633, 674, 690], "fro": [58, 81, 373, 449, 633, 674], "nuc": [58, 81, 633, 674], "matrix_pow": [58, 81, 633], "matrix_rank": [58, 81, 633], "hermitian": [58, 81, 372, 425, 426, 633, 668, 669, 670, 676, 683], "largest_singular_valu": [58, 81, 633, 676, 679], "defici": [58, 633, 676], "matrix_transpos": [58, 81, 633, 847], "pinv": [58, 81, 633], "pseudo": [58, 81, 633, 679, 835], "99999988": [58, 81, 633, 679], "qr": [58, 81, 633, 838], "complet": [58, 70, 81, 633, 680, 773, 814, 815, 816, 817, 819, 820, 823, 824, 827, 829, 833, 837, 838, 840, 843, 847, 848, 856, 864], "12309149": [58, 633, 680], "90453403": [58, 633, 680], "40824829": [58, 633, 680], "49236596": [58, 633, 680], "30151134": [58, 633, 680], "81649658": [58, 633, 680], "86164044": [58, 633, 680], "12403841e": [58, 633, 680], "60113630e": [58, 633, 680], "10782342e": [58, 633, 680], "04534034e": [58, 633, 680], "80906807e": [58, 633, 680], "88178420e": [58, 81, 633, 670, 680], "slogdet": [58, 81, 633], "logabsdet": [58, 81, 633, 681], "natur": [58, 81, 239, 257, 258, 259, 260, 279, 350, 368, 628, 633, 681, 820, 827, 829, 838, 856], "098611": [58, 633, 681], "solv": [58, 81, 372, 436, 633, 772, 808, 815, 819, 830, 837, 846, 868], "full_matric": [58, 81, 633, 683], "svf": [58, 683], "reconstructed_x": [58, 633, 683], "svdval": [58, 81, 633], "tensorsolv": [58, 81, 633], "vander": [58, 81, 633], "vandermond": [58, 81, 633, 688], "vecdot": [58, 81, 633], "vector_norm": [58, 81, 633], "mathemat": [58, 81, 219, 224, 236, 241, 243, 259, 269, 623, 628, 633, 674, 690, 825, 837, 843, 866, 872], "manhattan": [58, 81, 633, 690], "euclidean": [58, 81, 93, 94, 633, 690], "7416575": [58, 81, 633, 690], "vector_to_skew_symmetric_matrix": [58, 81, 633], "_arraywithloss": [59, 98], "binary_cross_entropi": [59, 82, 634, 824], "from_logit": [59, 82, 634, 692, 789], "pos_weight": [59, 82, 634, 692], "crossentropi": [59, 82, 634, 692], "26765382": [59, 634, 692], "34657359": [59, 634, 693], "sparse_cross_entropi": [59, 82, 634], "07438118": [59, 82, 694], "11889165": [59, 694], "_arraywithmanipul": [60, 98], "x_min": [60, 83, 635, 695, 850], "x_max": [60, 83, 635, 695, 850], "before_1": [60, 83, 374, 480, 635, 697, 710], "after_1": [60, 83, 374, 480, 635, 697, 710], "before_n": [60, 83, 374, 480, 635, 697, 710], "after_n": [60, 83, 374, 480, 635, 697, 710], "repetit": [60, 83, 635, 701, 708, 843], "flat": [60, 70, 83, 379, 509, 572, 630, 635, 701], "allowzero": [60, 83, 635, 702], "remain": [60, 63, 76, 83, 86, 219, 236, 237, 243, 251, 252, 269, 272, 278, 280, 371, 395, 396, 397, 416, 628, 635, 637, 640, 702, 720, 743, 802, 815, 816, 824, 827, 829, 833, 841, 843, 851], "roll": [60, 83, 635, 832, 863], "shift": [60, 72, 83, 99, 132, 143, 228, 230, 324, 365, 625, 628, 635, 703, 815, 816, 826, 827, 832, 839, 863], "restor": [60, 83, 635, 703, 831], "num_or_size_split": [60, 70, 83, 635, 704, 845], "with_remaind": [60, 70, 83, 635, 704], "squeezabl": [60, 635, 705], "swapax": [60, 83, 635], "axis0": [60, 83, 635, 707], "swap_ax": [60, 707], "swap": [60, 83, 635, 707, 797, 860], "tile": [60, 77, 83, 543, 635], "unpack": [60, 83, 635, 709, 838, 840], "zero_pad": [60, 83, 635], "_arraywithnorm": [61, 98], "layer_norm": [61, 84, 638], "normalized_idx": [61, 84, 638, 733], "new_std": [61, 84, 638, 733, 791], "learnabl": [61, 84, 632, 636, 638, 657, 713, 733, 788, 791, 850], "deviat": [61, 62, 66, 84, 85, 89, 638, 639, 643, 733, 736, 760, 774, 787, 791, 819, 857], "0976": [61, 638, 733], "3452": [61, 638, 733], "2740": [61, 638, 733], "1047": [61, 638, 733], "5886": [61, 638, 733], "2732": [61, 638, 733], "7696": [61, 638, 733, 772], "7024": [61, 638, 733], "2518": [61, 638, 733], "826": [61, 638, 733], "178": [61, 638, 733], "981": [61, 638, 733], "831": [61, 638, 733], "421": [61, 638, 733], "_arraywithrandom": [62, 98], "multinomi": [62, 85, 378, 506, 639], "population_s": [62, 85, 639, 734], "num_sampl": [62, 85, 639, 734], "unnorm": [62, 85, 639, 734, 840], "popul": [62, 66, 70, 85, 89, 639, 643, 734, 760, 762, 825, 826, 836, 840, 845, 872], "draw": [62, 85, 378, 504, 506, 508, 639, 734, 736, 737, 772, 773, 774, 775, 780, 787, 814, 819, 838, 840], "half": [62, 85, 122, 283, 625, 628, 639, 735, 737, 812, 830, 843], "235": [62, 736], "float16": [62, 73, 85, 130, 153, 155, 156, 161, 163, 342, 368, 625, 626, 633, 690, 736, 737, 772, 773, 812, 825, 830, 837, 840], "807": [62, 736], "_arraywithsearch": [63, 98], "select_last_index": [63, 86, 640, 740, 741], "occurr": [63, 374, 383, 494, 516, 640, 641, 740, 741, 745], "argmin": [63, 86, 640, 863], "output_dtyp": [63, 86, 640, 741], "argwher": [63, 86, 640], "nonzero": [63, 86, 94, 217, 218, 219, 222, 225, 234, 236, 239, 241, 243, 269, 282, 287, 628, 640], "as_tupl": [63, 86, 640, 743], "fewer": [63, 86, 640, 743], "_arraywithset": [64, 98], "unique_al": [64, 87, 641], "by_valu": [64, 87, 641, 745], "inverse_indic": [64, 87, 374, 494, 641, 745, 747], "unique_count": [64, 87, 641], "unique_invers": [64, 87, 641], "unique_valu": [64, 87, 641], "admonit": [64, 748], "dask": [64, 641, 745, 746, 747, 748, 856], "difficult": [64, 641, 745, 746, 747, 748, 816, 819, 825, 840, 851], "omit": [64, 279, 628, 641, 745, 746, 747, 748, 832, 836, 837], "x_i": [64, 66, 75, 94, 216, 217, 218, 221, 222, 223, 225, 227, 232, 233, 234, 239, 241, 242, 249, 250, 251, 252, 253, 257, 258, 259, 260, 264, 271, 276, 279, 280, 281, 282, 283, 284, 286, 287, 289, 331, 332, 334, 355, 368, 628, 641, 643, 745, 746, 747, 748, 756, 757, 758, 760, 761, 762, 787, 828], "x_j": [64, 641, 745, 746, 747, 748], "impli": [64, 641, 745, 746, 747, 748, 840], "typeerror": [64, 87, 641, 748, 847], "_arraywithsort": [65, 98], "stabil": [65, 88, 588, 589, 630, 642, 749, 752, 825, 835, 841, 843], "maintain": [65, 88, 642, 749, 752, 815, 816, 819, 831, 836, 838, 839, 840, 855, 865], "msort": [65, 88, 642], "searchsort": [65, 88, 642, 773], "side": [65, 88, 346, 368, 372, 442, 642, 751, 772, 788, 801, 802, 815, 816, 822], "sorter": [65, 88, 642, 751], "ret_dtyp": [65, 88, 642, 751], "_arraywithstatist": [66, 98], "cumprod": [66, 89, 643, 837, 850, 863], "cumsum": [66, 89, 643, 825, 863], "einsum": [66, 89, 643], "equat": [66, 76, 89, 310, 365, 372, 442, 633, 643, 682, 755, 772, 801, 824, 866], "operand": [66, 76, 80, 216, 217, 218, 219, 221, 222, 223, 224, 225, 232, 233, 234, 236, 237, 239, 241, 242, 243, 250, 251, 252, 257, 258, 259, 260, 261, 269, 272, 274, 278, 279, 280, 281, 282, 283, 286, 287, 289, 331, 332, 355, 359, 368, 369, 371, 414, 628, 633, 643, 681, 687, 755, 756, 758, 759, 761, 801, 802, 820, 823, 828, 837], "contract": [66, 633, 643, 685, 755, 802], "seq": [66, 643, 755, 772], "ii": [66, 89, 643, 755, 816], "jk": [66, 643, 755, 802], "ik": [66, 643, 755, 802], "126": [66, 106, 275, 622, 628, 633, 643, 675, 755], "510": [66, 643, 755], "special": [66, 81, 93, 94, 98, 99, 216, 217, 218, 219, 221, 222, 223, 224, 225, 232, 233, 234, 236, 237, 239, 241, 242, 243, 250, 251, 252, 257, 258, 259, 260, 261, 264, 269, 272, 274, 278, 279, 280, 281, 282, 283, 286, 287, 289, 331, 332, 355, 368, 628, 633, 643, 681, 687, 756, 757, 758, 759, 760, 761, 762, 772, 773, 774, 775, 780, 787, 814, 817, 819, 820, 822, 824, 827, 828, 829, 832, 836, 838, 839, 840, 841, 843, 866, 867, 868], "arithmet": [66, 89, 230, 236, 269, 628, 643, 757, 837], "propag": [66, 230, 331, 332, 368, 628, 643, 756, 757, 758, 760, 761, 762, 835], "04999995": [66, 757], "freedom": [66, 89, 643, 760, 762, 821], "constitut": [66, 89, 643, 760, 762, 833, 845, 867], "commonli": [66, 89, 643, 760, 762, 829, 833, 835], "81649661": [66, 643, 760], "6666665": [66, 762, 848], "667": [66, 77, 236, 537, 588, 628, 630, 762], "_arraywithutil": [67, 98], "logic": [67, 90, 200, 236, 237, 263, 264, 265, 269, 272, 627, 628, 644, 763, 764, 814, 820, 824, 825, 826, 829, 833, 834, 835, 836, 837, 839, 840, 843, 847, 860], "AND": [67, 90, 226, 237, 263, 628, 644, 763], "OR": [67, 90, 229, 265, 272, 628, 644, 764, 815, 816, 835], "_wrap_funct": [68, 91, 822, 833, 834], "function_nam": [68, 91, 814, 841], "new_funct": [68, 91, 822], "add_ivy_array_instance_method": 68, "cl": [68, 91], "moduletyp": [68, 91, 859, 860, 861], "toi": [68, 91], "arrayexampl": 68, "hasattr": [68, 91], "_containerwithactiv": [69, 99], "dict_in": [69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 99], "queue": [69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 99, 582, 605, 630, 842, 848], "queue_load_s": [69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 99], "container_combine_method": [69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 99], "list_join": [69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 99], "queue_timeout": [69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 99, 582, 605, 630, 842], "print_limit": [69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 99], "key_length_limit": [69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 99], "print_ind": [69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 99], "print_line_spac": [69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 99], "ivyh": [69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 99], "default_key_color": [69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 99], "keyword_color_dict": [69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 99], "rebuild_child_contain": [69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 99], "types_to_iteratively_nest": [69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 99], "alphabetical_kei": [69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 99], "dynamic_backend": [69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 98, 99, 789, 790, 821, 842], "build_cal": [69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 99], "containerbas": [69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 823], "_static_gelu": 69, "key_chain": [69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 125, 127, 129, 130, 132, 133, 134, 135, 136, 137, 139, 141, 142, 143, 145, 148, 149, 150, 151, 159, 161, 164, 167, 168, 169, 171, 173, 176, 210, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 309, 310, 313, 314, 324, 325, 329, 330, 331, 332, 333, 334, 336, 338, 346, 347, 353, 355, 356, 357, 358, 359, 385, 386, 387, 388, 390, 391, 392, 394, 395, 396, 397, 398, 399, 407, 408, 409, 410, 414, 415, 418, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 432, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 458, 459, 460, 464, 465, 467, 476, 478, 480, 481, 482, 484, 485, 486, 487, 488, 489, 490, 492, 494, 496, 497, 498, 499, 500, 501, 503, 505, 510, 511, 518, 519, 520, 521, 528, 530, 533, 534, 536, 537, 541, 542, 543, 544, 545, 548, 549, 552, 554, 556, 557, 558, 560, 561, 564, 572, 573, 587, 588, 589, 591, 593, 595, 596, 609, 615, 620, 646, 647, 648, 649, 650, 651, 654, 655, 656, 658, 659, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 680, 681, 682, 683, 684, 685, 686, 687, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 734, 735, 736, 737, 739, 742, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764], "to_appli": [69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 125, 127, 129, 130, 132, 133, 134, 135, 136, 137, 139, 141, 142, 143, 145, 148, 149, 150, 151, 159, 161, 164, 167, 168, 169, 171, 173, 176, 210, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 309, 310, 313, 314, 324, 325, 329, 330, 331, 332, 333, 334, 336, 338, 346, 347, 353, 355, 356, 357, 358, 359, 385, 386, 387, 388, 390, 391, 392, 394, 395, 396, 397, 398, 399, 407, 408, 409, 410, 414, 415, 418, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 432, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 458, 459, 460, 464, 465, 467, 476, 478, 480, 481, 482, 484, 485, 486, 487, 488, 489, 490, 492, 494, 496, 497, 498, 499, 500, 501, 503, 505, 510, 511, 518, 519, 520, 521, 528, 530, 533, 534, 536, 537, 541, 542, 543, 544, 545, 548, 549, 552, 554, 556, 557, 558, 560, 561, 564, 572, 573, 587, 588, 589, 591, 593, 595, 596, 609, 615, 620, 637, 646, 647, 648, 649, 650, 651, 654, 655, 656, 658, 659, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 680, 681, 682, 683, 684, 685, 686, 687, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 727, 734, 735, 736, 737, 739, 742, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764], "prune_unappli": [69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 125, 127, 129, 130, 132, 133, 134, 135, 136, 137, 139, 141, 142, 143, 145, 148, 149, 150, 151, 159, 161, 164, 167, 168, 169, 171, 173, 176, 210, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 309, 310, 313, 314, 324, 325, 329, 330, 331, 332, 333, 334, 336, 338, 346, 347, 353, 355, 356, 357, 358, 359, 385, 386, 387, 388, 390, 391, 392, 394, 395, 396, 397, 398, 399, 407, 408, 409, 410, 414, 415, 418, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 432, 436, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 458, 459, 460, 464, 465, 467, 476, 478, 480, 481, 482, 484, 485, 486, 487, 488, 489, 490, 492, 494, 496, 497, 498, 499, 500, 501, 503, 505, 510, 511, 518, 519, 520, 521, 528, 530, 533, 534, 536, 537, 541, 542, 543, 544, 545, 548, 549, 552, 554, 556, 557, 558, 560, 561, 564, 572, 573, 587, 588, 589, 591, 593, 595, 596, 609, 615, 620, 637, 646, 647, 648, 649, 650, 651, 654, 655, 656, 658, 659, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 680, 681, 682, 683, 684, 685, 686, 687, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 727, 734, 735, 736, 737, 739, 742, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764], "map_sequ": [69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 125, 127, 129, 130, 132, 133, 134, 135, 136, 137, 139, 141, 142, 143, 145, 148, 149, 150, 151, 159, 161, 164, 167, 168, 169, 171, 173, 176, 210, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 309, 310, 313, 314, 324, 325, 329, 330, 331, 332, 333, 334, 336, 338, 346, 347, 353, 355, 356, 357, 358, 359, 385, 386, 387, 388, 390, 391, 392, 394, 395, 396, 397, 398, 399, 407, 408, 409, 410, 414, 415, 418, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 432, 436, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 458, 459, 460, 464, 465, 467, 476, 478, 480, 481, 482, 484, 485, 486, 487, 488, 489, 490, 492, 494, 496, 497, 498, 499, 500, 501, 503, 505, 510, 511, 518, 519, 520, 521, 528, 530, 533, 534, 536, 537, 541, 542, 543, 544, 545, 548, 549, 552, 554, 556, 557, 558, 560, 561, 564, 572, 573, 587, 588, 589, 591, 593, 595, 596, 609, 615, 620, 646, 647, 648, 649, 650, 651, 654, 655, 656, 658, 659, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 680, 681, 682, 683, 684, 685, 686, 687, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 734, 735, 736, 737, 739, 742, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764], "prune": [69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 106, 107, 108, 109, 110, 111, 112, 113, 114, 130, 132, 137, 139, 145, 149, 151, 164, 168, 169, 176, 210, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 247, 248, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 299, 300, 301, 302, 303, 305, 306, 307, 309, 330, 331, 332, 333, 334, 336, 338, 346, 347, 353, 355, 357, 358, 359, 395, 396, 397, 415, 448, 449, 450, 451, 452, 453, 454, 455, 458, 459, 460, 464, 465, 486, 488, 489, 490, 492, 497, 499, 500, 501, 503, 505, 518, 519, 520, 521, 530, 533, 534, 536, 537, 541, 542, 543, 544, 545, 548, 549, 552, 554, 556, 557, 558, 560, 561, 564, 572, 573, 587, 588, 589, 591, 593, 595, 596, 609, 615, 620, 637, 646, 647, 648, 649, 655, 656, 662, 663, 664, 669, 670, 671, 672, 673, 674, 676, 678, 680, 681, 687, 692, 693, 694, 695, 699, 702, 703, 704, 705, 706, 709, 710, 727, 728, 729, 730, 734, 735, 736, 737, 739, 742, 745, 746, 747, 748, 749, 753, 754, 757, 759, 760, 762, 763, 764, 770, 773, 824], "static_gelu": 69, "046": 69, "_static_hardswish": 69, "_static_leaky_relu": 69, "static_leaky_relu": 69, "38999999": [69, 76, 108, 291, 292, 363], "_static_log_softmax": 69, "static_log_softmax": 69, "371": [69, 109], "_static_mish": 69, "static_mish": 69, "30883577": [69, 110, 622], "28903052": [69, 110, 622], "10714479": [69, 110, 622], "_static_relu": 69, "static_relu": 69, "_static_sigmoid": 69, "static_sigmoid": 69, "2689414": [69, 112, 113, 622], "7310586": [69, 112, 113, 622], "88079703": [69, 112, 622], "62245935": [69, 112], "4750208": [69, 112], "_static_softmax": 69, "static_softmax": 69, "72844321": [69, 113], "19852395": [69, 113], "07303288": [69, 113], "_static_softplu": 69, "revert": [69, 114, 622], "static_softplu": 69, "53499615": 69, "42036411": 69, "948": [69, 114, 637, 714], "166": [69, 106, 622], "dictionari": [70, 87, 99, 208, 597, 613, 627, 630, 631, 748, 767, 769, 802, 820, 824, 825, 833, 837, 838, 848, 851], "asynchron": [70, 99, 866], "wait": [70, 99, 582, 630, 808, 814, 816, 824, 837], "arriv": [70, 99, 582, 630, 843], "cont_list_join": [70, 99], "limit": [70, 99, 161, 164, 536, 537, 553, 626, 630, 635, 695, 772, 774, 775, 787, 794, 802, 808, 815, 816, 822, 824, 827, 829, 837, 840, 843, 848, 851, 865, 866, 867], "whitespac": [70, 99], "indent": [70, 99, 848], "newlin": [70, 99, 828], "termin": [70, 99, 815, 816, 823, 830, 831, 845, 848], "constructor": [70, 99, 532, 630, 769, 785, 793, 825, 826, 828, 847], "kept": [70, 99, 636, 711, 712, 816, 836, 841], "encount": [70, 99, 788, 812, 814, 825, 829, 830, 840], "node": [70, 77, 99, 534, 544, 591, 637, 724, 725, 787, 796, 822, 823, 837, 856, 859, 860, 867], "alphabet": [70, 99], "__setitem__": [70, 374, 488, 820, 823, 847], "_cont_at_key_chains_input_as_dict": 70, "current_chain": 70, "ignore_key_error": 70, "_cont_at_key_chains_input_as_seq": 70, "_cont_call_static_method_with_flexible_arg": 70, "static_method": 70, "kw": 70, "self_idx": 70, "_cont_concat_unifi": 70, "_cont_get_dev": 70, "_cont_get_dtyp": 70, "_cont_get_shap": 70, "_cont_ivi": 70, "_cont_mean_unifi": 70, "_1": 70, "_cont_prune_key_chains_input_as_dict": 70, "return_cont": 70, "_cont_prune_key_chains_input_as_seq": 70, "_cont_slice_kei": 70, "key_slic": 70, "_cont_sum_unifi": 70, "_get_queue_item": 70, "cont_all_fals": 70, "assert_is_bool": 70, "cont_all_key_chain": 70, "include_empti": 70, "cont_all_tru": [70, 823, 848], "cont_as_bool": 70, "cont_assert_contains_sub_contain": 70, "sub_cont": 70, "screen": [70, 814, 815, 848], "cont_assert_contains_sub_structur": 70, "check_shap": [70, 794], "cont_assert_ident": 70, "check_typ": 70, "same_arrai": [70, 848], "arrays_equ": 70, "cont_assert_identical_structur": 70, "assert_and_assign": 70, "congruent": 70, "cont_at_key_chain": 70, "ignore_non": 70, "cont_at_kei": 70, "substr": 70, "cont_combin": 70, "duplic": [70, 374, 485, 553, 630, 637, 716, 821, 828, 834, 835, 838, 849, 872], "configur": [70, 208, 627, 637, 727, 815, 816, 822, 824, 825, 830, 831], "container_rightmost": 70, "cont_common_key_chain": 70, "cont_config": 70, "cont_contains_sub_contain": 70, "cont_contains_sub_structur": 70, "cont_copi": [70, 848], "cont_create_if_abs": 70, "noth": [70, 843, 872], "cont_cutoff_at_depth": 70, "depth_cutoff": 70, "summari": [70, 165, 538, 626, 630, 815, 816, 840], "cont_cutoff_at_height": 70, "height_cutoff": 70, "cont_deep_copi": [70, 848, 859], "cont_dev": 70, "belong": [70, 814, 819, 849], "cont_dev_str": 70, "cont_diff": [70, 848], "diff_kei": 70, "detect_key_diff": 70, "detect_value_diff": 70, "detect_shape_diff": 70, "among": [70, 823, 824, 840, 843, 857, 866], "container0": 70, "cont_dtyp": 70, "cont_duplicate_array_keychain": 70, "cont_find_sub_contain": 70, "sub_cont_to_find": 70, "cont_find_sub_structur": 70, "sub_struc_to_find": 70, "cont_flatten_key_chain": [70, 848], "above_height": [70, 848], "below_depth": [70, 848], "cont_format_key_chain": 70, "format_fn": 70, "cont_from_disk_as_hdf5": [70, 848], "h5_obj_or_filepath": 70, "slice_obj": 70, "disk": [70, 790, 848, 865], "h5py": 70, "filepath": [70, 644, 765, 766, 816, 819], "cont_from_disk_as_json": [70, 848], "json_filepath": 70, "cont_from_disk_as_pickl": [70, 848], "pickle_filepath": 70, "cont_from_flat_list": 70, "flat_list": 70, "hierarchi": [70, 806, 814, 839, 848, 862, 872], "cont_handle_inplac": 70, "prime": [70, 825], "overwritten": [70, 820, 821], "cont_has_kei": 70, "query_kei": 70, "somewher": [70, 824], "cont_has_key_chain": 70, "cont_ident": [70, 848], "cont_identical_array_shap": 70, "cont_identical_config": 70, "cont_identical_structur": 70, "cont_if_exist": 70, "cont_inplace_upd": 70, "cont_ivi": 70, "cont_key_chains_contain": 70, "sub_str": 70, "cont_list_stack": [70, 848], "cont_load": 70, "cont_map": [70, 823, 848], "func": [70, 93, 209, 360, 361, 362, 370, 535, 610, 613, 614, 616, 621, 627, 630, 631, 637, 727, 769, 814, 819, 820, 827, 829, 835], "cont_map_sub_cont": 70, "include_self": 70, "possibli": [70, 593, 630, 772, 840, 851], "cont_max_depth": 70, "cont_multi_map": 70, "map_nest": 70, "assert_ident": 70, "leftmost": [70, 637, 727], "cont_multi_map_in_funct": 70, "cont_num_arrai": 70, "cont_overwrite_at_key_chain": 70, "target_dict": 70, "return_dict": 70, "cont_prune_empti": 70, "keep_non": 70, "cont_prune_key_chain": 70, "key1": [70, 808, 849], "key2": [70, 808], "key3": 70, "cont_prune_key_from_key_chain": 70, "certain": [70, 122, 133, 134, 373, 450, 625, 814, 815, 816, 819, 825, 833, 839, 840, 843, 851, 859, 860, 861, 870], "cont_prune_kei": 70, "cont_prune_keys_from_key_chain": 70, "cont_reduc": 70, "cont_remove_key_length_limit": 70, "cont_remove_print_limit": 70, "cont_reshape_lik": 70, "leading_shap": 70, "cont_restructur": 70, "keep_orig": 70, "old": [70, 815, 821, 836], "cont_restructure_key_chain": 70, "keychain_map": 70, "cont_sav": 70, "cont_set_at_key_chain": 70, "cont_set_at_kei": 70, "cont_shap": [70, 632, 650], "cont_show": 70, "cont_show_sub_contain": 70, "sub_cont_or_keychain": 70, "cont_size_ordered_arrai": 70, "keychain": [70, 76, 294, 333, 458, 459, 460, 489], "cont_slice_kei": 70, "all_depth": 70, "cont_slice_via_kei": 70, "slice_kei": 70, "cont_sort_by_kei": 70, "cont_structural_diff": 70, "cont_to_dict": 70, "cont_to_disk_as_hdf5": [70, 848], "starting_index": 70, "max_batch_s": 70, "cont_to_disk_as_json": [70, 848], "cont_to_disk_as_pickl": [70, 848], "cont_to_flat_list": 70, "cont_to_iter": [70, 823], "leaf_keys_onli": 70, "cont_to_iterator_kei": 70, "cont_to_iterator_valu": 70, "cont_to_json": 70, "cont_to_nested_list": 70, "cont_to_raw": 70, "cont_trim_kei": 70, "cont_try_kc": 70, "cont_unifi": 70, "concatten": [70, 209, 627], "cont_unstack_cont": 70, "dim_siz": 70, "cont_update_config": 70, "cont_with_default_key_color": 70, "cont_with_entries_as_list": 70, "cont_with_ivy_backend": 70, "ivy_backend": [70, 838], "cont_with_key_length_limit": [70, 848], "cont_with_print_ind": [70, 848], "cont_with_print_limit": [70, 848], "cont_with_print_line_spac": 70, "h5_file_s": 70, "shuffle_h5_fil": 70, "split_cont": 70, "_is_json": 70, "_repr": 70, "_containerwithconvers": [71, 99], "_static_to_ivi": 71, "_static_to_n": 71, "_containerwithcr": [72, 99], "_static_arang": 72, "_static_asarrai": 72, "_static_copy_arrai": 72, "_static_empti": 72, "_static_empty_lik": 72, "_static_ey": 72, "n_row": [72, 76, 128, 143, 324, 365, 372, 433, 625], "n_col": [72, 76, 128, 143, 324, 365, 625], "_static_from_dlpack": 72, "_static_ful": 72, "_static_full_lik": 72, "static_full_lik": 72, "2324": [72, 132, 625], "234": [72, 75, 132, 155, 238, 289, 625, 626, 628, 632, 656, 772], "_static_linspac": 72, "_static_logspac": 72, "static_logspac": 72, "15443469": [72, 134], "64158883": [72, 134], "_static_meshgrid": 72, "_static_native_arrai": 72, "_static_one_hot": 72, "static_one_hot": 72, "_static_on": 72, "_static_ones_lik": 72, "_static_tril": 72, "_static_triu": 72, "_static_zero": 72, "_static_zeros_lik": 72, "frombuff": [72, 625], "expos": [72, 130, 538, 625, 630, 808, 824, 845, 849, 855], "x00": [72, 130, 625], "xf0": [72, 130, 625], "x01": [72, 130, 625], "x02": [72, 130, 625], "x03": [72, 130, 625], "x04": [72, 130, 625], "x05": [72, 130], "5443469": [72, 134, 625], "static_frombuff": 72, "static_triu_indic": 72, "triu_indic": [72, 625], "_containerwithdatatyp": [73, 99], "_static_astyp": 73, "718": [73, 75, 148, 265, 626], "618": [73, 75, 148, 265, 626], "static_astyp": 73, "_static_broadcast_arrai": 73, "static_broadcast_arrai": 73, "_static_broadcast_to": 73, "static_broadcast_to": 73, "_static_can_cast": 73, "from_": [73, 151, 626], "static_can_cast": 73, "_static_default_complex_dtyp": 73, "complex_dtyp": [73, 154, 177, 626], "_static_default_float_dtyp": 73, "float_dtyp": [73, 156, 179, 626], "_static_dtyp": 73, "_static_finfo": 73, "inquir": [73, 161, 164], "static_finfo": 73, "55040e": [73, 161, 626], "7976931348623157e": [73, 161, 626], "308": [73, 161, 626, 772, 840], "_static_function_supported_dtyp": 73, "_static_function_unsupported_dtyp": 73, "_static_iinfo": 73, "1800": [73, 164, 626], "1084": 73, "40000": 73, "static_iinfo": 73, "2147483648": [73, 76, 164, 374, 488, 626], "2147483647": [73, 164, 626], "_static_is_bool_dtyp": 73, "dtype_in": [73, 146, 147, 160, 166, 167, 168, 169, 170, 171, 172, 173, 188, 626], "_static_is_complex_dtyp": 73, "is_complex_dtyp": [73, 626, 841], "roughli": [73, 815, 819, 869], "static_is_complex_dtyp": 73, "_static_is_float_dtyp": 73, "static_is_float_dtyp": 73, "_static_is_int_dtyp": 73, "_static_is_uint_dtyp": 73, "_static_result_typ": 73, "static_result_typ": 73, "broadcats": [73, 149], "_containerwithdevic": [74, 99], "_static_dev": 74, "static_dev": 74, "_static_to_devic": 74, "static_to_devic": 74, "contaion": [74, 193], "_containerwithelementwis": [75, 99], "_static_ab": 75, "static_ab": 75, "_static_aco": 75, "static_aco": 75, "_static_acosh": 75, "static_acosh": 75, "_static_add": 75, "static_add": [75, 103], "_static_asin": 75, "static_asin": 75, "524": [75, 221, 628], "412": [75, 80, 221, 628, 637, 714], "_static_asinh": 75, "static_asinh": 75, "_static_atan": 75, "static_atan": 75, "_static_atan2": 75, "static_atan2": 75, "915": [75, 224, 628], "983": [75, 224, 628], "978": [75, 224, 628], "696": [75, 85, 224, 628, 736], "993": [75, 224, 628], "_static_atanh": 75, "static_atanh": 75, "_static_bitwise_and": 75, "static_bitwise_and": 75, "_static_bitwise_invert": 75, "static_bitwise_invert": 75, "_static_bitwise_left_shift": 75, "_static_bitwise_or": 75, "static_bitwise_or": 75, "_static_bitwise_right_shift": 75, "static_bitwise_right_shift": 75, "_static_bitwise_xor": 75, "static_bitwise_xor": 75, "_static_ceil": 75, "static_ceil": 75, "_static_co": 75, "static_co": 75, "_static_cosh": 75, "static_cosh": 75, "_static_deg2rad": 75, "static_deg2rad": 75, "0262": [75, 235, 275, 628], "873": [75, 235, 275, 628], "_static_divid": 75, "static_divid": 75, "_static_equ": 75, "static_equ": 75, "_static_erf": 75, "static_erf": 75, "27632612": [75, 238], "934008": [75, 238, 628], "99999928": [75, 238], "91903949": [75, 238], "_static_exp": 75, "static_exp": 75, "59814835": [75, 239, 628], "4131622": [75, 239], "_static_expm1": 75, "thefunct": [75, 238], "areal": 75, "static_expm1": 75, "71828175": [75, 239, 628], "38905621": [75, 239, 628], "59815216": 75, "_static_floor": 75, "static_floor": 75, "_static_floor_divid": 75, "static_floor_divid": 75, "_static_great": 75, "static_great": 75, "_static_greater_equ": 75, "static_greater_equ": 75, "_static_isfinit": 75, "999999999999": [75, 250, 628], "static_isfinit": 75, "_static_isinf": 75, "static_isinf": 75, "_static_isnan": 75, "static_isnan": 75, "_static_isr": 75, "0j": [75, 76, 138, 139, 217, 218, 219, 222, 225, 234, 239, 241, 253, 257, 259, 276, 280, 282, 283, 287, 334, 368, 625, 628, 633, 681], "23j": [75, 76], "9j": [75, 76], "static_isr": 75, "_static_lcm": 75, "1080": [75, 254], "1550": [75, 254], "130": [75, 254], "_static_less": 75, "static_less": 75, "_static_less_equ": 75, "static_less_equ": 75, "_static_log": 75, "static_log": 75, "_static_log10": 75, "static_log10": 75, "898": [75, 258, 628], "0414": [75, 258, 628], "_static_log1p": 75, "static_log1p": 75, "_static_log2": 75, "static_log2": 75, "_static_logaddexp": 75, "static_logaddexp": 75, "_static_logical_and": 75, "static_logical_and": 75, "_static_logical_not": 75, "static_logical_not": 75, "_static_logical_or": 75, "static_logical_or": 75, "_static_logical_xor": 75, "static_logical_xor": 75, "_static_maximum": 75, "static_maximum": 75, "_static_minimum": 75, "static_minimum": 75, "_static_multipli": 75, "static_multipli": 75, "_static_neg": 75, "static_neg": 75, "_static_not_equ": 75, "static_not_equ": 75, "_static_posit": 75, "static_posit": 75, "_static_pow": 75, "static_pow": 75, "_static_rad2deg": 75, "static_rad2deg": 75, "5160": 75, "10300": [75, 275, 628], "15500": 75, "20600": 75, "2860": [75, 275], "_static_reciproc": 75, "recirpoc": [75, 277], "static_reciproc": 75, "_static_remaind": 75, "static_remaind": 75, "_static_round": 75, "thevfunct": 75, "527": [75, 279, 628], "static_round": 75, "301": [75, 279, 628], "_static_sign": 75, "static_sign": 75, "_static_sin": 75, "static_sin": 75, "757": [75, 281, 628], "959": [75, 241, 281, 628], "279": [75, 281, 371, 393, 403, 536, 628, 630], "_static_sinh": 75, "static_sinh": 75, "835": [75, 282], "347": [75, 282], "721": [75, 282], "_static_sqrt": 75, "static_sqrt": 75, "_static_squar": 75, "static_squar": 75, "_static_subtract": 75, "static_subtract": 75, "_static_tan": 75, "static_tan": 75, "_static_tanh": 75, "static_tanh": 75, "995": [75, 287, 628], "9999": 75, "_static_trapz": 75, "static_trapz": 75, "_static_trunc": 75, "static_trunc": 75, "_static_trunc_divid": 75, "75j": [75, 220, 249], "01317055": [75, 220], "05634501": [75, 220], "115": [75, 220, 275, 628], "3461759": [75, 220], "524111": [75, 220], "644": [75, 221, 628, 849], "305": [75, 80, 221, 628], "351": [75, 235, 275], "00613": [75, 235], "0154": [75, 235], "403": [75, 239], "428772": [75, 239], "649": [75, 241], "220": [75, 241], "865": [75, 241], "metho": [75, 248, 260], "imaginari": [75, 98, 108, 111, 114, 138, 139, 217, 218, 219, 234, 236, 237, 239, 241, 249, 269, 271, 272, 279, 282, 283, 287, 334, 368, 371, 372, 415, 426, 622, 625, 628, 640, 743, 827], "4j": [75, 249, 371, 415, 589, 628, 630], "7j": [75, 76, 253, 276, 334, 368, 628], "956": [75, 259], "08746284": [75, 262], "32192809": [75, 262], "nuner": [75, 269], "413": [75, 275], "335": [75, 76, 276, 334], "345j": [75, 76, 276, 334], "static_angl": 75, "static_exp2": 75, "static_fmin": 75, "static_gcd": 75, "static_imag": 75, "static_logaddexp2": 75, "static_nan_to_num": 75, "static_r": 75, "_containerwithactivationexperiment": [76, 99], "_static_celu": 76, "formlat": 76, "static_celu": 76, "_static_elu": 76, "static_elu": 76, "_static_hardshrink": 76, "hard": [76, 293, 816, 847, 866], "shrinkag": [76, 293, 303, 374, 487], "_static_hardsilu": 76, "20833333": [76, 294, 363], "29166666": [76, 294, 363], "66666669": [76, 99, 294, 363, 377, 503, 613, 631], "66666663": [76, 133, 294, 363, 625], "_static_hardtanh": 76, "3899": 76, "_static_scaled_tanh": 76, "931": 76, "71587813": 76, "88367474": 76, "00376701": [76, 300], "2285642": 76, "99999881": 76, "49999905": 76, "_static_silu": 76, "static_silu": 76, "27777028": [76, 302], "23947507": [76, 302], "0900332": [76, 302], "_static_softshrink": 76, "_static_tanhshrink": 76, "36634541": [76, 305], "02005103": [76, 305], "00262468": [76, 305], "_static_threshold": 76, "389999": [76, 295], "19722462": [76, 296], "84729779": [76, 296], "31326163": [76, 297], "46328258": [76, 297], "51301527": [76, 297], "79813886": [76, 297], "simplywrap": [76, 300], "54939651": [76, 300], "09999998": [76, 300, 611, 631], "09999999": [76, 300], "08336546": [76, 300], "0379949": [76, 300], "22856998": [76, 301], "42028043": [76, 301], "31868932": [76, 301], "static_logit": 76, "static_logsigmoid": 76, "34115386": 76, "64439666": 76, "24115384": 76, "55435526": 76, "07888974": 76, "00741899": 76, "26328245": 76, "00012302": 76, "static_prelu": 76, "static_relu6": 76, "static_selu": 76, "static_thresholded_relu": 76, "_containerwithconversionexperiment": [76, 99], "_containerwithcreationexperiment": [76, 99], "_static_trilu": 76, "blackman": [76, 308, 365], "00770143e": [76, 308], "49229857e": [76, 308], "hamming_window": [76, 365], "ham": [76, 310, 365], "4180": [76, 310], "8180": [76, 310], "hann_window": [76, 365], "hann": [76, 311, 365], "7500": [76, 311], "3455": [76, 311], "9045": [76, 311], "kaiser_bessel_derived_window": [76, 365], "suitabl": [76, 313, 314, 365, 642, 751, 774, 815, 816, 823, 841, 866], "spectral": [76, 313, 314, 365], "analysi": [76, 313, 314, 365, 866, 867], "kaiser": [76, 308, 313, 314, 365], "70710677": [76, 313, 501, 503], "18493208": [76, 313, 365], "9827513": [76, 313, 365], "kaiser_window": [76, 365], "static_kaiser_window": [76, 314], "2049": [76, 314], "8712": [76, 314], "0367": [76, 314, 365], "7753": [76, 314], "static_blackman_window": 76, "static_eye_lik": 76, "static_hamming_window": 76, "static_hann_window": 76, "static_hann": 76, "static_kaiser_bessel_derived_window": 76, "static_mel_weight_matrix": 76, "static_polyv": 76, "static_tril_indic": 76, "static_unsorted_segment_mean": 76, "static_unsorted_segment_min": 76, "static_unsorted_segment_sum": 76, "static_vorbis_window": 76, "vorbis_window": [76, 365], "vorbi": [76, 329, 365], "38268343": [76, 329, 633, 669], "92387953": [76, 329], "14943586": [76, 329, 365], "51644717": [76, 329], "85631905": [76, 329], "98877142": [76, 329], "tril_indic": [76, 365], "_containerwithdata_typeexperiment": [76, 99], "_containerwithdeviceexperiment": [76, 99], "_containerwithelementwiseexperiment": [76, 99], "0003": [76, 330, 633, 672, 772, 775], "0006": [76, 330, 358], "2345j": [76, 334], "5772": [76, 338], "9635": [76, 338], "4228": [76, 338], "9228": [76, 338], "57299206e": [76, 339, 340], "67773480e": [76, 339, 340], "20904985e": [76, 339, 340], "84270084": [76, 339, 340, 368], "99532223": [76, 339, 340], "99997795": [76, 339, 340], "mantissa": [76, 344, 368, 825], "frist": [76, 345, 368], "coord": [76, 345], "6055": [76, 346], "160": [76, 348], "10240": [76, 348], "60000038": [76, 349, 368, 633, 689], "0707": [76, 355, 368], "0579": [76, 355, 368], "static_allclos": 76, "static_amax": 76, "static_amin": 76, "static_binar": 76, "static_conj": 76, "static_copysign": 76, "static_count_nonzero": 76, "static_diff": 76, "static_digamma": 76, "57721537": 76, "96351004": 76, "static_erfc": 76, "15729921": 76, "00467773": [76, 339, 368], "static_erfinv": 76, "static_fix": 76, "static_float_pow": 76, "static_fmax": 76, "static_fmod": 76, "static_frexp": 76, "static_gradi": 76, "static_hypot": 76, "static_isclos": 76, "static_ldexp": 76, "static_lerp": 76, "90000057": [76, 349, 368], "70000076": [76, 349, 368], "55000019": [76, 349, 368], "05000019": [76, 349, 368], "static_modf": 76, "static_nansum": 76, "static_nextaft": 76, "static_signbit": 76, "static_sinc": 76, "636": 76, "090": 76, "070": 76, "057": 76, "static_sparsify_tensor": 76, "static_xlogi": 76, "static_zeta": 76, "0244": [76, 358], "_containerwithgeneralexperiment": [76, 99], "_static_reduc": 76, "static_reduc": 76, "_containerwithgradientsexperiment": [76, 99], "_containerwithimageexperiment": [76, 99], "_containerwithlayersexperiment": [76, 99], "_static_fft": 76, "static_fft": 76, "_static_sliding_window": 76, "673": [76, 393], "0507": [76, 393], "79711437": [76, 371, 393, 403], "94867325": [76, 371, 393, 403], "74089146": [76, 371, 393, 403], "25980937": [76, 371, 393, 403], "64958102": [76, 371, 393, 403], "2442648": [76, 371, 393, 403], "247306": [76, 405], "908323j": [76, 405], "494955": [76, 405], "90395j": [76, 405], "static_adaptive_avg_pool1d": 76, "static_adaptive_avg_pool2d": 76, "static_adaptive_max_pool2d": 76, "static_adaptive_max_pool3d": 76, "static_avg_pool1d": 76, "static_avg_pool2d": 76, "static_avg_pool3d": 76, "static_dct": 76, "253": [76, 282, 628], "515": [76, 639, 736], "467": 76, "static_dft": 76, "static_embed": 76, "static_idct": 76, "93732834": [76, 371, 393], "75048852": [76, 371, 393], "29723358": [76, 371, 403], "6950531": 76, "93914509": 76, "88008738": 76, "18951225": 76, "06697273": [76, 371, 403], "57439804": 76, "68861485": [76, 371, 403], "41308832": [76, 371, 403], "0700836": 76, "2449036": 76, "6711426": 76, "514": 76, "501709": 76, "4924011": 76, "static_ifft": 76, "static_ifftn": 76, "static_interpol": 76, "static_max_pool1d": 76, "static_max_pool2d": 76, "max_pool2dd": 76, "static_max_pool3d": 76, "static_max_unpool1d": 76, "static_rfft": 76, "static_rfftn": 76, "static_rnn": 76, "step_funct": [76, 371, 417], "initial_st": [76, 371, 417, 632, 657], "go_backward": [76, 371, 417], "unrol": [76, 371, 417, 632, 658, 845, 848], "input_length": [76, 371, 417], "zero_output_for_mask": [76, 371, 417], "return_all_output": [76, 371, 417], "rnn": [76, 371, 866], "tempor": [76, 371, 417], "state_s": [76, 371, 417], "while_loop": [76, 371, 417, 624], "otput": [76, 371, 417], "funciton": [76, 371, 417], "static_stft": 76, "_containerwithlinearalgebraexperiment": [76, 99], "933034": [76, 372, 422], "eigenvealu": [76, 425, 668], "xx": [76, 425, 427, 668], "37228107": [76, 425, 668], "3722816": [76, 425, 668], "8245648": [76, 425, 668], "41597357": [76, 425, 668], "56576747": [76, 425, 668], "9093767": [76, 425, 668], "56155": [76, 426], "82842": [76, 426], "450": [76, 432], "static_adjoint": 76, "static_batched_out": 76, "static_cond": 76, "static_diagflat": 76, "static_dot": 76, "static_eig": 76, "static_eigh_tridiagon": 76, "static_eigv": 76, "static_higher_order_mo": 76, "static_initialize_tuck": 76, "static_kron": 76, "kroneck": [76, 372, 431, 432], "static_make_svd_non_neg": 76, "static_matrix_exp": 76, "static_mode_dot": 76, "static_multi_dot": 76, "static_multi_mode_dot": 76, "static_partial_tuck": 76, "static_svd_flip": 76, "static_tensor_train": 76, "static_truncated_svd": 76, "static_tt_matrix_to_tensor": 76, "tt_matrix": [76, 372, 446], "output_tensor": [76, 96, 372, 446], "static_tuck": 76, "_containerwithlossesexperiment": [76, 99], "_static_hinge_embedding_loss": 76, "_static_huber_loss": 76, "static_huber_loss": 76, "0575": [76, 449], "_static_kl_div": 76, "_static_l1_loss": 76, "static_l1_loss": 76, "_static_log_poisson_loss": 76, "static_log_poisson_loss": 76, "_static_poisson_nll_loss": 76, "06446016": 76, "55611551": 76, "30244565": [76, 453], "_static_smooth_l1_loss": 76, "static_smooth_l1_loss": 76, "_static_soft_margin_loss": 76, "3890561": [76, 452], "413159": [76, 452], "06429195": [76, 453], "43333333": [76, 454], "10666666": [76, 454], "_containerwithmanipulationexperiment": [76, 99], "_static_fill_diagon": 76, "_static_put_along_axi": 76, "_static_tak": 76, "69999981": [76, 303, 363, 374, 464, 488], "_static_trim_zero": 76, "_static_unflatten": 76, "_static_unique_consecut": 76, "ary1": [76, 374, 458, 459, 460], "ary2": [76, 374, 458, 459, 460], "broadcast_shap": [76, 102, 374, 772, 774], "static_concat_from_sequ": [76, 465], "30192195": [76, 477], "static_as_strid": 76, "static_atleast_1d": 76, "static_atleast_2d": 76, "static_atleast_3d": 76, "static_broadcast_shap": 76, "static_column_stack": 76, "static_dsplit": 76, "static_dstack": 76, "static_expand": 76, "static_flatten": 76, "static_fliplr": 76, "static_flipud": 76, "static_fold": 76, "static_heavisid": 76, "static_hsplit": 76, "static_hstack": 76, "static_i0": 76, "static_matric": 76, "static_moveaxi": 76, "static_pad": 76, "static_partial_fold": 76, "static_partial_tensor_to_vec": 76, "static_partial_unfold": 76, "static_partial_vec_to_tensor": 76, "static_rot90": 76, "static_soft_threshold": 76, "static_take_along_axi": 76, "static_top_k": 76, "static_unfold": 76, "static_vsplit": 76, "static_vstack": 76, "_containerwithnormsexperiment": [76, 99], "16903085": [76, 501, 503], "50709254": [76, 501, 503], "84515423": [76, 501, 503], "44183609": [76, 501, 503], "56807494": [76, 501, 503], "69431382": [76, 501, 503], "static_batch_norm": 76, "static_group_norm": 76, "static_instance_norm": 76, "static_l1_norm": 76, "static_l2_norm": 76, "static_lp_norm": 76, "12500000": 76, "37500000": 76, "62500000": 76, "27500000": 76, "35000000": 76, "42500000": 76, "0000000": 76, "5000000": 76, "2500000": 76, "_containerwithrandomexperiment": [76, 99], "43643127": [76, 506], "32325703": [76, 506], "24031169": [76, 506], "34251311": [76, 506], "31692529": [76, 506], "3405616": [76, 506], "5319725": [76, 506], "22458365": [76, 506], "24344385": [76, 506], "26588406": [76, 506], "61075421": [76, 506], "12336174": [76, 506], "51142915": [76, 506], "25041268": [76, 506], "23815817": [76, 506], "64042903": [76, 506], "25763214": [76, 506], "10193883": [76, 506], "31624692": [76, 506], "46567987": [76, 506], "21807321": [76, 506], "37677699": [76, 506], "39914594": [76, 506], "22407707": [76, 506], "static_bernoulli": 76, "static_beta": 76, "static_dirichlet": 76, "static_gamma": 76, "static_poisson": 76, "_containerwithsearchingexperiment": [76, 99], "static_unravel_index": 76, "_containerwithsetexperiment": [76, 99], "_containerwithsortingexperiment": [76, 99], "invert_permut": [76, 381], "static_invert_permut": 76, "static_lexsort": [76, 88], "_containerwithstatisticalexperiment": [76, 99], "_static_cummax": 76, "static_cummax": 76, "_static_cummin": 76, "static_cummin": 76, "_static_nanmin": 76, "static_nanmin": 76, "func_nam": [76, 521, 814, 827, 828, 833, 837], "static_bincount": 76, "static_corrcoef": 76, "static_cov": [76, 383, 518], "static_histogram": 76, "static_igamma": 76, "static_lgamma": 76, "static_median": 76, "static_nanmean": 76, "static_nanmedian": 76, "static_nanprod": 76, "static_quantil": 76, "_containerwithutilityexperiment": [76, 99], "static_optional_get_el": 76, "_containerwithgener": [77, 99], "_static_all_equ": 77, "static_all_equ": 77, "_static_array_equ": 77, "a0": [77, 374, 464], "static_array_equ": 77, "_static_assert_supports_inplac": 77, "_static_clip_matrix_norm": 77, "static_clip_matrix_norm": 77, "849": [77, 536, 537, 630], "_static_clip_vector_norm": 77, "static_clip_vector_norm": 77, "_static_einops_rearrang": 77, "static_einops_rearrang": 77, "_static_einops_reduc": 77, "static_einops_reduc": 77, "29333329": [77, 542, 630], "53000069": [77, 542, 630], "39666676": [77, 542, 630], "20666695": [77, 542, 630], "_static_einops_repeat": 77, "static_einops_repeat": 77, "_static_exist": 77, "_static_fourier_encod": 77, "static_fourier_encod": 77, "classivi": [77, 641, 746], "89858720e": 77, "79717439e": 77, "_static_gath": 77, "static_gath": 77, "_static_gather_nd": 77, "static_gather_nd": 77, "_static_get_num_dim": 77, "static_get_num_dim": 77, "_static_has_nan": 77, "leafwis": 77, "static_has_nan": 77, "_static_inplace_decr": 77, "_static_inplace_incr": 77, "_static_inplace_upd": 77, "_static_is_arrai": 77, "static_is_arrai": 77, "_static_is_ivy_arrai": 77, "static_is_ivy_arrai": 77, "_static_is_native_arrai": 77, "static_is_native_arrai": 77, "_static_scatter_flat": 77, "_static_scatter_nd": 77, "static_scatter_nd": 77, "_static_s": 77, "static_s": 77, "_static_stable_divid": 77, "22222222": 77, "11111111": 77, "857": [77, 588, 630], "444": 77, "_static_stable_pow": 77, "00012": [77, 589, 630], "00016": [77, 78, 589, 617, 630, 631], "00001": [77, 589, 630, 772], "00032": [77, 589], "00256": [77, 589], "1679638": [77, 589], "395": [77, 589], "16777383": [77, 589], "_static_supports_inplace_upd": 77, "_static_to_list": 77, "static_to_list": 77, "_static_to_numpi": 77, "static_to_numpi": 77, "_static_to_scalar": 77, "static_to_scalar": 77, "_static_value_is_nan": 77, "452": 77, "static_value_is_nan": 77, "833": [77, 537], "items": [77, 98, 630], "static_isin": 77, "static_items": 77, "static_strid": 77, "425": [77, 609], "_containerwithgradi": [78, 99], "_static_stop_gradi": 78, "static_stop_gradi": 78, "976": [78, 287, 611, 628, 631], "49e": [78, 611, 631], "74e": [78, 611, 631], "95e": [78, 611, 631], "024": [78, 611, 631], "096": [78, 611, 631], "216": [78, 81, 611, 631, 688], "626": [78, 611, 631], "en": [78, 611, 612, 631, 824], "wikipedia": [78, 611, 612, 631], "wiki": [78, 611, 612, 631], "stochastic_gradient_desc": [78, 611, 612, 631], "01099": [78, 612], "01003": [78, 612, 631], "01015": [78, 612, 631], "99936122": [78, 612, 631], "99936116": [78, 612, 631], "99936128": [78, 612, 631], "99936104": [78, 612, 631], "w_new": [78, 615, 631], "708": [78, 617, 631], "445": [78, 617, 631], "6e": [78, 617, 631], "00036": [78, 617, 631], "00049": [78, 617, 631], "layerwis": [78, 618, 631], "01132035": [78, 618, 631], "22264051": [78, 618, 631], "2056601": [78, 618, 631], "1324538": [78, 618, 631], "56490755": [78, 618, 631], "96622658": [78, 618, 631], "90848625": [78, 618, 631], "93616199": [78, 618, 631], "77232409": [78, 618, 631], "_containerwithimag": [79, 99], "_containerwithlay": [80, 99], "_static_conv1d": 80, "static_conv1d": 80, "_static_conv1d_transpos": 80, "static_conv1d_transpos": 80, "112": [80, 633, 643, 647, 678, 755], "_static_conv2d": 80, "ey": [80, 625, 632, 648, 654, 843, 850], "static_conv2d": 80, "_static_conv2d_transpos": 80, "static_conv2d_transpos": 80, "_static_conv3d": 80, "fdfh": [80, 650], "static_conv3d": 80, "_static_conv3d_transpos": 80, "static_conv3d_transpos": 80, "_static_depthwise_conv2d": 80, "inp": [80, 632, 654], "static_depthwise_conv2d": 80, "_static_dropout": 80, "static_dropout": 80, "_static_dropout1d": 80, "static_dropout1d": 80, "_static_dropout2d": 80, "_static_dropout3d": 80, "_static_linear": 80, "278": [80, 632, 655, 656], "static_linear": 80, "195": 80, "_static_lstm_upd": 80, "_static_multi_head_attent": 80, "_static_reduce_window": 80, "_static_scaled_dot_product_attent": 80, "static_scaled_dot_product_attent": 80, "39999962": [80, 632, 655, 656], "19999695": [80, 656], "11600018": [80, 656], "88399887": [80, 656], "196": [80, 632, 656], "306": [80, 632, 656], "19999981": [80, 293, 306, 363, 371, 415, 632, 655, 662], "59249449": [80, 632, 662], "68226194": [80, 632, 662], "19603825": [80, 632, 662], "9960382": [80, 632, 662], "26894283": [80, 632, 662], "40236187": [80, 632, 662], "39999437": [80, 632, 662], "59999037": [80, 632, 662], "35046196": [80, 632, 662], "54282808": [80, 632, 662], "39989519": [80, 632, 662], "5998764": [80, 632, 662], "_containerwithlinearalgebra": [81, 99], "_static_choleski": 81, "static_choleski": 81, "577": [81, 633, 663], "707": [81, 633, 663], "static_rol": [81, 83], "_static_cross": 81, "static_cross": 81, "_static_det": 81, "_static_diag": 81, "_static_diagon": 81, "static_diagon": 81, "_static_eigh": 81, "_static_eigvalsh": 81, "static_eigvalsh": 81, "51572949": [81, 633, 670], "17091519": [81, 633, 670], "3448143": [81, 633, 670], "35898387e": [81, 633, 670], "46410179e": [81, 633, 670], "_static_inn": 81, "static_inn": 81, "_static_inv": 81, "static_inv": 81, "_static_matmul": 81, "matul": 81, "static_matmul": 81, "_static_matrix_norm": 81, "deimens": 81, "static_matrix_norm": 81, "_static_matrix_pow": 81, "_static_matrix_rank": 81, "static_matrix_rank": 81, "_static_matrix_transpos": 81, "static_matrix_transpos": 81, "_static_out": 81, "n1": [81, 135, 625], "n2": [81, 135, 625], "static_out": [81, 678], "_static_pinv": 81, "static_pinv": 81, "0426": 81, "0964": 81, "0605": 81, "1368": 81, "_static_qr": 81, "static_qr": 81, "31622777": [81, 633, 680], "9486833": [81, 633, 680], "4472136": [81, 633, 680], "89442719": [81, 633, 680], "16227766": [81, 633, 680], "42718872": [81, 633, 680], "63245553": [81, 633, 680], "47213595": [81, 633, 680], "81377674": [81, 633, 680], "_static_slogdet": 81, "static_slogdet": 81, "6931472": 81, "0986123": 81, "_static_solv": 81, "_static_svd": 81, "static_svd": 81, "au": 81, "aS": 81, "avh": 81, "bvh": 81, "_static_svdv": 81, "_static_tensordot": 81, "_static_tensorsolv": 81, "_static_trac": 81, "static_trac": 81, "_static_vand": 81, "static_vand": 81, "343": [81, 279, 628, 688], "729": [81, 688, 849], "_static_vecdot": 81, "_static_vector_norm": 81, "static_vector_norm": 81, "77359247": [81, 690], "_static_vector_to_skew_symmetric_matrix": 81, "09861231": [81, 633, 681], "static_general_inner_product": 81, "3475602": [81, 683], "93765765": [81, 683], "58776021": [81, 683], "10416126": [81, 683], "80644298": [81, 683], "87024701": [81, 683], "48127627": [81, 683], "79101127": [81, 683], "98288572": [81, 683], "68917423": [81, 683], "_containerwithloss": [82, 99], "_static_binary_cross_entropi": 82, "static_binary_cross_entropi": 82, "511": 82, "223": 82, "357": 82, "_static_cross_entropi": 82, "static_cross_entropi": 82, "20397282": 82, "83258148": 82, "60943794": [82, 633, 681], "_static_sparse_cross_entropi": 82, "static_sparse_cross_entropi": 82, "36354783": [82, 634, 692], "14733934": [82, 634, 692], "17027519": [82, 693], "53647931": [82, 693], "53647929": [82, 694], "1702752": [82, 694], "_containerwithmanipul": [83, 99], "_static_clip": 83, "static_clip": 83, "_static_concat": 83, "_static_constant_pad": 83, "static_constant_pad": 83, "_static_expand_dim": 83, "static_expand_dim": 83, "container_axi": [83, 635, 698], "_static_flip": 83, "static_flip": 83, "_static_permute_dim": 83, "static_permute_dim": 83, "_static_repeat": 83, "static_repeat": 83, "_static_reshap": 83, "static_reshap": 83, "_static_rol": 83, "positivclip": 83, "_static_split": 83, "static_split": 83, "_static_squeez": 83, "static_squeez": 83, "_static_stack": 83, "leavv": 83, "static_stack": 83, "_static_swapax": 83, "_static_til": 83, "static_til": 83, "_static_unstack": 83, "static_unstack": 83, "_static_zero_pad": 83, "repreat": [83, 701], "_containerwithnorm": [84, 99], "34198591": [84, 638, 733], "04274819": [84, 638, 733], "29923761": [84, 638, 733], "24053511": [84, 638, 733], "62221265": [84, 733], "20277636": [84, 733], "41943574": [84, 733], "83710337": [84, 733], "_containerwithrandom": [85, 99], "_static_multinomi": 85, "_static_randint": 85, "static_randint": 85, "_static_random_norm": 85, "static_random_norm": 85, "651": 85, "_static_random_uniform": 85, "static_random_uniform": 85, "481": 85, "0999": 85, "_static_shuffl": 85, "static_shuffl": 85, "431": [85, 736], "274": [85, 736], "_containerwithsearch": [86, 99], "_static_argmax": 86, "static_argmax": 86, "_static_argmin": 86, "static_argmin": 86, "_static_argwher": 86, "static_argwher": 86, "_static_nonzero": 86, "_static_wher": 86, "static_wher": 86, "_containerwithset": [87, 99], "_static_unique_al": 87, "static_unique_al": 87, "_static_unique_count": 87, "static_unique_count": 87, "_static_unique_invers": 87, "static_unique_invers": 87, "_static_unique_valu": 87, "_containerwithsort": [88, 99], "_static_argsort": 88, "static_argsort": 88, "_static_searchsort": 88, "_static_sort": 88, "static_sort": 88, "static_msort": 88, "_containerwithstatist": [89, 99], "_static_cumprod": 89, "static_cumprod": 89, "_static_cumsum": 89, "static_cumsum": 89, "_static_min": 89, "_static_prod": 89, "static_prod": 89, "11000001": [89, 759], "23100001": [89, 759], "30800003": [89, 643, 759], "_static_sum": 89, "_static_var": 89, "static_var": 89, "12666667": [89, 643, 762], "11555555": [89, 643, 762], "rtype": [89, 755, 801], "respectv": [89, 760], "81649649": [89, 760], "94280904": [89, 760], "509902": [89, 643, 760], "2472192": [89, 760], "44948983": [89, 760], "41421354": [89, 760], "6666667": [89, 762], "_containerwithutil": [90, 99], "_static_al": 90, "static_al": 90, "_static_ani": 90, "static_ani": 90, "add_ivy_container_instance_method": 91, "containerexampl": 91, "factorized_tensor": [92, 93, 94, 95, 96, 97], "factorizedtensor": [92, 93, 94, 95, 96, 97], "matrix_or_tensor": 92, "to_tensor": [92, 93, 94, 95, 96, 97], "to_unfold": [92, 93, 94, 95, 96, 97], "to_vec": [92, 93, 94, 95, 96, 97], "cp_tensor": [93, 94], "cptensor": [93, 94, 319, 365], "cp_copi": 93, "cp_flip_sign": 93, "s_i": [93, 94], "normalisation_weight": [93, 94], "normalised_factor": [93, 94], "cp_lstsq_grad": 93, "return_loss": 93, "nabla": 93, "mathcal": 93, "mathbf": 93, "factor_matric": 93, "cp_gradient": 93, "quantiti": 93, "cp_mode_dot": 93, "keep_dim": [93, 97], "cp_multi_mode_dot": 93, "cp_n_param": 93, "tensor_shap": [93, 95, 96, 97], "n_param": [93, 94, 95, 96, 97], "cp_norm": 93, "cp_to_tensor": 93, "khatria": 93, "rao": [93, 372, 431], "khatri": [93, 372, 431], "cp_normal": 93, "normalis": [93, 94], "u_1": [93, 94], "u_n": [93, 94], "v_1": [93, 94], "v_n": [93, 94], "v_k": [93, 94], "u_k": [93, 94], "absorb": [93, 94], "refold": [93, 374, 473, 484], "cp_to_unfold": 93, "ie": 93, "s_u_i": 93, "exploit": [93, 869], "khatri_rao": [93, 372], "cp_to_vec": 93, "ravel": [93, 843], "unfolding_dot_khatri_rao": 93, "mttkrp": 93, "validate_cp_rank": 93, "percent": [93, 96], "validate_cp_tensor": 93, "parafac2_tensor": 94, "parafac2tensor": [94, 320, 365], "apply_parafac2_project": 94, "evolv": [94, 855, 866], "b_i": 94, "ijk": [94, 802], "sum_r": 94, "a_": 94, "ir": [94, 864, 867, 872], "jr": 94, "kr": 94, "coupl": [94, 815, 820, 847, 849, 866], "factoris": 94, "i1": [94, 383, 521], "classmethod": [94, 101, 102, 777], "from_cptensor": 94, "parafac2_tensor_ok": 94, "parafac2_normalis": 94, "normalised_project": 94, "parafac2_to_slic": 94, "slice_idx": 94, "frontal": 94, "a_i": 94, "j_i": 94, "b_": 94, "reformul": 94, "p_i": 94, "orthogon": [94, 319, 323, 365, 372, 425, 441, 447, 633, 668, 669], "sum_": 94, "ijr": 94, "constraint": [94, 802, 824, 825, 835], "projection_matric": 94, "parafac2_to_tensor": 94, "construct": [94, 635, 708, 788, 791, 792, 793, 839, 845, 849, 850, 864, 866, 873], "uneven": 94, "parafac2_to_unfold": 94, "parafac2_to_vec": 94, "validate_parafac2_tensor": 94, "cp": [94, 319, 365, 816], "tr_tensor": 95, "trtensor": [95, 321, 365], "tr_n_param": 95, "tr_to_tensor": 95, "tr_to_unfold": 95, "tr_to_vec": 95, "validate_tr_rank": 95, "validate_tr_tensor": 95, "tt_tensor": 96, "_tt_n_param": 96, "mp": [96, 322, 365], "index_upd": 96, "pad_tt_rank": 96, "factor_list": 96, "n_pad": 96, "pad_boundari": 96, "ring": 96, "bond": 96, "padded_factor_list": 96, "tt_to_tensor": 96, "assembl": [96, 372, 446], "tt_to_unfold": 96, "reassembl": 96, "tt_to_vec": 96, "validate_tt_rank": 96, "constant_rank": 96, "allow_overparametr": 96, "proport": [96, 787], "realiz": [96, 866], "validate_tt_tensor": 96, "tucker_tensor": 97, "tucker_copi": 97, "tucker_mode_dot": [97, 873], "tucker_n_param": 97, "tucker_norm": 97, "tucker_to_tensor": 97, "skip_factor": 97, "transpose_factor": 97, "tucker_to_unfold": 97, "tucker_to_vec": 97, "validate_tucker_rank": 97, "fixed_mod": 97, "validate_tucker_tensor": 97, "_bisection_root_find": 97, "fun": [97, 362, 370, 610, 630, 637, 725, 824], "max_it": 97, "__abs__": [98, 99], "__add__": [98, 99, 820, 823, 827, 828, 832, 837, 838, 847], "__eq__": [98, 99], "__ge__": [98, 99], "__gt__": [98, 99, 843], "__le__": [98, 99], "__lt__": [98, 99], "__ne__": [98, 99], "__pow__": [98, 99, 847], "69678056": 98, "59876156": 98, "82660675": 98, "__radd__": [98, 99, 827, 828, 837], "__rrshift__": [98, 99], "__rshift__": [98, 99], "__rsub__": [98, 99], "__sub__": [98, 99, 820, 823, 827, 832, 847], "__truediv__": [98, 99, 820, 823, 827], "__xor__": [98, 99], "referenc": [98, 829, 836], "resid": [98, 102, 635, 698, 837, 845, 849], "mt": [98, 847], "hopefulli": [98, 99, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 784, 785, 787, 788, 790, 791, 792, 793, 812, 814, 815, 816, 818, 819, 820, 821, 822, 823, 824, 825, 826, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 840, 841, 843, 845, 846, 847, 848, 849, 850, 855, 856, 857], "overview": [98, 99, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 784, 785, 787, 788, 790, 791, 792, 793, 808, 822, 824, 838, 840, 844], "reach": [98, 99, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 784, 785, 787, 788, 790, 791, 792, 793, 812, 814, 815, 816, 817, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 840, 841, 843, 845, 846, 847, 848, 849, 850, 855, 856, 857, 865, 866], "eq": 99, "ge": 99, "le": 99, "ne": 99, "75979435": 99, "52153397": 99, "13532257": 99, "rshift": 99, "truediv": 99, "nested_arrai": [101, 102, 103, 822], "nestedarrai": 101, "nested_rank": [101, 102, 103], "inner_shap": [101, 102, 103], "nestedarraybas": [101, 102, 103], "from_row_length": 101, "row_length": 101, "from_row_split": 101, "row_split": 101, "ragged_map": 102, "ragged_multi_map": 102, "ragged_arrai": 102, "ragged_multi_map_in_funct": 102, "replace_ivy_arrai": 102, "unbind": 102, "nestedarrayelementwis": 103, "strictli": [108, 111, 114, 243, 622, 628, 832, 836], "24000001": [108, 622], "703": [109, 622], "683": [109, 622], "408": [109, 622], "313": [109, 622], "437": [109, 622], "40337825": [110, 622], "56114835": [110, 622], "20788449": [110, 622], "0768": [113, 622], "231": [113, 622], "\u03b2": [114, 622], "body_fn": [118, 119, 121, 624], "bodi": [118, 121, 624, 819, 840], "lst": [118, 624], "orelse_fn": [119, 624], "body1": [120, 624], "body2": [120, 624], "test_fn": [121, 624, 770, 808, 860, 861], "repeatedli": [121, 624, 637, 723, 824, 840], "ml_framework": [122, 625], "distanc": [122, 625], "adjac": [122, 625], "nestedsequ": [123, 124, 625], "typevar": [123, 124, 625], "supportsbufferprotocol": [123, 124, 625], "static_copy_arrai": [125, 625], "intdtyp": [128, 139, 145, 157, 168, 173, 180, 186, 625, 626], "pycapsul": [129, 140, 625], "interchang": [129, 140, 625, 635, 707], "plu": [130, 625], "x00b": [130, 625], "x00d": [130, 625], "x00e": [130, 625], "41588834": [134, 625], "7827941": [134, 625], "6227766": [134, 625], "23413252": [134, 625], "n3": [135, 625], "xv": [135, 625], "yv": [135, 625], "x_nativ": [136, 625, 836], "y_nativ": [136, 625], "z_nativ": [136, 625], "d_type": [138, 625], "col": [143, 324, 365, 625], "primari": [143, 162, 163, 195, 196, 324, 365, 381, 511, 546, 547, 625, 626, 627, 630, 773, 775, 814, 818, 821, 825, 834, 836, 837, 839, 840, 843, 851, 853], "upward": [143, 324, 365, 625], "downward": [143, 324, 365, 625], "2xn": [143, 324, 365, 625], "subarrai": [143, 324, 365, 625], "incompat": [150, 626], "closest": [153, 232, 242, 243, 279, 289, 626, 628, 840, 843], "xtype": [153, 626], "ytype": [153, 626], "native_uint16": [153, 626], "complexdtyp": [154, 168, 177, 626], "set_default_complex_dtyp": [154, 183, 626], "4294": [154, 156, 626], "967346": [154, 156, 626], "set_default_dtyp": [155, 184, 626, 825, 833], "floatdtyp": [156, 179, 626], "set_default_float_dtyp": [156, 165, 177, 185, 626, 825], "int_dtyp": [157, 180, 626], "set_default_int_dtyp": [157, 165, 186, 626, 825], "4294967346": [157, 158, 626], "uint_dtyp": [158, 181, 626], "uint": [158, 173, 181, 187, 626, 825, 838], "uintdtyp": [158, 173, 181, 187, 626], "set_default_uint_dtyp": [158, 165, 187, 626], "native_bool": [160, 626], "ieee": [161, 219, 236, 241, 259, 269, 278, 283, 286, 623, 626, 628, 856], "754": [161, 219, 236, 241, 259, 269, 278, 283, 286, 623, 626, 628, 856], "smallest_norm": [161, 626], "bfloat16": [162, 626, 772, 773, 825, 837, 840, 841], "unsupport": [163, 196, 547, 626, 627, 630, 767, 770, 812, 815, 830, 837], "encapsul": [164, 626, 824], "314": [164, 276, 334, 368, 626, 628], "9223372036854775808": [164, 626], "9223372036854775807": [164, 626], "65535": [164, 626], "4294967295": [164, 626], "native_uint8": [166, 626], "hashabl": [170, 626], "type1": [174, 626], "type2": [174, 626], "array_api_promot": [174, 175, 626, 772, 773], "unexpect": [175, 243, 626, 628, 825], "default_complex_dtyp": [177, 626], "default_dtype_stack": [178, 184, 626], "unset_default_dtyp": [178, 626], "native_uint64": [178, 626], "default_float_dtyp": [179, 626, 825], "default_int_dtyp": [180, 186, 626, 825], "default_uint_dtyp": [181, 187, 626], "ret1": [182, 626], "ret2": [182, 626], "reset": [183, 184, 185, 186, 187, 213, 214, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 626, 627, 630, 826], "default_complex_dtype_stack": [183, 626], "default_float_dtype_stack": [185, 626], "native_float16": [188, 626], "unmodifi": [190, 627, 821, 825], "aliv": [197, 202, 204, 550, 570, 571, 627, 630, 826], "139740789224448": [197, 627], "physic": [200, 627], "process_specif": [203, 215, 627], "percentag": [203, 627], "ram": [203, 211, 215, 627], "alon": [203, 215, 627, 808, 831, 840], "036902561555": [203, 627], "7024003467681645": [203, 627], "as_native_dev": [203, 627], "7095597456708771": [203, 627], "attr_onli": [204, 627], "soft_device_mod": [206, 214, 627], "chunk": [207, 208, 209, 627], "split_factor": [207, 627, 829], "max_chunk_s": [209, 627], "chunk_siz": [209, 627], "input_ax": [209, 627], "output_ax": [209, 627], "usag": [209, 627, 825, 833, 836, 840, 845, 851, 856, 869], "fed": [209, 627, 849], "fist": [209, 627], "gb": [211, 215, 627, 815, 830], "66700032": [211, 627], "589934592": [211, 627], "219563008": [215, 627], "902400346": [215, 627], "525205504": [215, 627], "na": [216, 628, 840], "noqa": [216, 283, 628, 788, 797, 838], "princip": [217, 221, 223, 355, 368, 628], "domain": [217, 218, 221, 222, 223, 224, 233, 234, 239, 241, 257, 258, 260, 281, 282, 283, 286, 287, 355, 368, 628, 828, 864, 866], "codomain": [217, 218, 221, 222, 223, 224, 233, 234, 239, 241, 257, 258, 260, 281, 282, 283, 286, 287, 355, 368, 628, 828], "\u03c0": [217, 221, 223, 224, 623, 628], "3\u03c0": [217, 224, 628], "unspecifi": [217, 218, 222, 225, 234, 239, 241, 243, 278, 282, 283, 287, 372, 425, 628, 633, 635, 668, 669, 706, 836], "\u03c0j": [218, 222, 225, 257, 259, 628], "3\u03c0j": [218, 257, 259, 628], "x1_i": [219, 224, 226, 228, 229, 230, 231, 236, 237, 243, 247, 248, 255, 256, 261, 263, 265, 266, 269, 272, 274, 278, 285, 628, 819], "2019": [219, 236, 241, 259, 269, 628, 866, 869], "overflow": [219, 236, 243, 628, 633, 643, 681, 761, 813, 825], "commut": [219, 628], "tabl": [219, 236, 269, 581, 604, 628, 630, 772, 773, 788, 837, 842, 866], "dj": [219, 236, 269, 628], "bj": [219, 236, 269, 334, 368, 628], "z1": [219, 628], "z2": [219, 628], "yj": [220, 628], "nanj": [222, 628], "809": [222, 628], "569": [222, 628], "733": [222, 628], "notat": [224, 628, 643, 755, 824], "denot": [224, 628, 790], "quadrant": [224, 628], "rai": [224, 628, 856], "bitwis": [226, 229, 231, 266, 628], "170": [230, 628], "243": [230, 628], "xor": [231, 266, 628], "654": [233, 628], "ci": [234, 239, 241, 282, 628, 819, 825, 831, 838, 840, 851], "368": [234, 628], "670": [234, 628], "202": [234, 628, 819], "548": [234, 628], "1490": [234, 628], "57079633": [235, 628], "14159265": [235, 628], "71238898": [235, 628], "28318531": [235, 628], "02617994": [235, 628], "87266463": [235, 628], "01919862": [235, 628], "03839725": [235, 628], "05759586": [235, 628], "07679449": [235, 628], "09599311": [235, 628], "11519173": [235, 628], "35081118": [235, 628], "88139129": [235, 628], "underflow": [236, 243, 628, 633, 681, 825], "textbook": [236, 269, 628], "frac": [236, 258, 260, 280, 282, 286, 371, 377, 399, 400, 404, 405, 497, 499, 628], "ac": [236, 269, 628, 801, 802], "bd": [236, 269, 628], "bc": [236, 269, 628, 801, 802], "versu": [236, 269, 628], "riemann": [236, 269, 628], "sphere": [236, 269, 628], "c99": [236, 269, 628], "infinit": [236, 269, 283, 628], "unlik": [236, 269, 628, 819, 824, 827, 856, 871, 873], "698": [236, 628], "truth": [237, 247, 248, 255, 256, 272, 373, 449, 628, 767, 769, 780, 812, 830, 837, 840], "32862675": [238, 628], "67780113": [238, 628], "11246294": [238, 628], "42839241": [238, 628], "52050018": [238, 628], "16799599": [238, 628], "30787992": [238, 628], "43796915": [238, 628], "98667163": [238, 628], "79690808": [238, 628], "88020504": [238, 628], "91031402": [238, 628], "95228523": [238, 628], "96610528": [238, 628], "cut": [239, 241, 281, 282, 283, 286, 628, 855, 872], "08553692": [239, 628], "567": [239, 628], "00344786": [239, 628], "76297021": [239, 628], "197948": [239, 628], "53253174": [239, 628], "accur": [241, 259, 628, 633, 681, 834], "fdlibm": [241, 259, 628], "compliant": [241, 259, 264, 265, 331, 332, 368, 628, 643, 756, 757, 758, 760], "potenti": [241, 259, 628, 808, 814, 815, 824, 825, 837, 844, 869], "632": [241, 628], "20e": [241, 628], "72e": [241, 628, 772], "greatest": [242, 243, 246, 628], "pep": [243, 628, 832], "disambigu": [243, 628, 835], "former": [243, 628, 815, 825, 828, 837], "latter": [243, 628, 815, 819, 821, 825, 828, 837], "overload": [243, 628, 840], "led": [243, 628, 819, 868], "subtl": [243, 628, 825, 872], "bug": [243, 628, 808, 814, 816, 822, 830, 831, 837, 840, 852], "ambigu": [243, 628], "semant": [243, 278, 374, 488, 628, 825, 845, 850, 855, 867], "ill": [243, 628, 774], "surpris": [243, 628, 851], "arrau": [249, 628], "log_": [258, 260, 628], "742": [259, 628], "negat": [271, 334, 368, 628], "52095687": [274, 628], "92457771": [274, 628], "49372482": [274, 628], "22738838": [274, 628], "156": [274, 628, 772], "5877228": [274, 628], "189": [275, 628, 637, 714], "252": [275, 628], "378": [275, 628], "1150": [275, 628], "2890": [275, 628], "172": [275, 628], "487": [275, 628, 632, 656], "344": [275, 628], "355j": [276, 334, 368, 628], "55j": [276, 334, 368, 628], "primarili": [278, 628, 814, 823, 866], "reason": [278, 287, 628, 814, 816, 819, 820, 823, 824, 825, 827, 833, 836, 837, 840, 841, 843, 845, 847, 856, 872], "counterpart": [279, 628, 823, 834], "deliber": [279, 628, 843], "imprecis": [279, 628], "5654": [279, 628], "034": [279, 628], "433": [279, 614, 616, 628, 631], "signum": [280, 628], "textrm": [280, 628], "932": [281, 628], "746": [281, 628], "657": [281, 537, 628, 630], "indistinguish": [283, 628], "convent": [283, 628, 633, 643, 673, 755, 816, 821, 832, 841, 855, 872], "infti": [283, 628], "32455532": [283, 628], "89897949": [283, 628], "169": [283, 628], "analyt": [286, 628, 866, 868, 872], "pole": [286, 628], "546": [286, 628, 632, 656], "916": [286, 628], "996": [286, 628], "histor": [287, 628], "stem": [287, 628, 836], "older": [287, 628], "advis": [287, 628, 837], "462": [287, 628], "604": [287, 628], "984": [287, 628], "997": [287, 628], "0375": [289, 628], "032": [289, 628], "57258511": [292, 363], "69999999": [292, 363, 621, 631], "90928203": [292, 363], "98772264": [292, 363], "99591321": [292, 363], "99863964": [292, 363], "69880581": [292, 363], "18126924": [292, 363], "79999995": [293, 303, 306, 363], "70000005": [293, 306, 363], "1241": [294, 363], "4897": [294, 363], "4090": [294, 363], "31008321": [294, 363], "1147176": [294, 363], "40899992": [294, 363], "20141329": [297, 363], "40318608": [297, 363], "48683619": [297, 363], "46328247": [297, 363], "59813893": [297, 363], "43748799": [297, 363], "parametr": [298, 363, 819, 840, 866], "71589994": [300, 304, 363], "14324772": [300, 304, 363], "70648694": [300, 304, 363], "54488957": [300, 304, 363], "10740992": [300, 304, 363], "19514863": [300, 304, 363], "6705687": [301, 363], "52016652": [301, 363], "40560818": [301, 363], "45630932": [301, 363], "2689": [302, 363], "7310": [302, 363], "7615": [302, 363], "2784": [302, 363], "7168": [302, 363], "8708": [302, 363], "4374": [302, 363], "1379": [302, 363], "0089": [302, 363], "59999991": [303, 363], "03597236": [305, 363], "43827677": [305, 363], "80100036": [305, 363], "12954807": [305, 363], "76459098": [305, 363], "20044947": [305, 363], "60000372": [305, 363], "taper": [308, 311, 365], "summat": [308, 365, 643, 755, 801, 802], "leakag": [308, 365], "wors": [308, 365, 856], "y1": [309, 365], "0800": [310, 365], "3979": [310, 365], "9121": [310, 365], "5400": [310, 365], "han": [311, 365], "ith": [312, 365], "00726415": [313, 365], "9999736": [313, 365], "2773e": [314, 365], "0172e": [314, 365], "9294e": [314, 365], "4149": [314, 365], "9138": [314, 365], "5529": [314, 365], "multidimension": [316, 317, 365, 866], "normalise_factor": [319, 320, 365], "parafac2": [320, 365], "tr": [321, 365], "context": [321, 365, 569, 630, 814, 815, 816, 821, 825, 826, 827], "38268346": [329, 365], "38268352": [329, 365], "8563191": [329, 365], "14943568": [329, 365], "paddlepaddl": [331, 332, 368, 815], "cn": [331, 332, 368], "zh": [331, 332, 368], "amax_cn": [331, 368], "sentinel": [331, 332, 368, 643, 756, 758], "amin_cn": [332, 368], "4769": [340, 368], "position": [342, 368], "triangl": [346, 368], "999999e": [347, 368], "65999985": [349, 368], "52000046": [349, 368], "1500001": [349, 368, 542, 630], "11259177": [350, 368], "3574118": [350, 368], "20097363": [350, 368], "suppli": [354, 368, 374, 480, 801, 820, 822, 840], "217234": [355, 368], "hurwitz": [358, 368], "custom_grad_func": [360, 370], "bind": [360, 370, 814, 835, 865, 866], "upstream": [360, 370, 815, 816, 819, 830, 835], "primal": [361, 362, 370], "jacobian": [361, 362, 370, 616, 631, 851, 866], "cotang": [362, 370], "stanh": 363, "ndenumer": 365, "ndindex": 365, "random_cp": 365, "random_parafac2": 365, "random_tr": 365, "random_tt": 365, "random_tuck": 365, "bind_custom_gradient_funct": [370, 835], "jvp": 370, "vjp": 370, "h_out": [371, 388, 632, 657], "w_out": [371, 388], "area_interpol": 371, "01823380e": [371, 393, 403], "15385818e": [371, 393, 403], "36371466e": [371, 393, 403], "38763905e": [371, 393, 403], "60722279e": [371, 393, 403], "80319249e": [371, 393, 403], "05617893e": [371, 393, 403], "21500000e": [371, 393, 403], "24000015e": [371, 393, 403], "90734863e": [371, 393, 403], "10000420e": [371, 393, 403], "15899994e": [371, 393, 403], "24000053e": [371, 393, 403], "81469727e": [371, 393, 403], "09999847e": [371, 393, 403], "4135742": [371, 393, 403], "6779785": [371, 393, 403], "3770599": [371, 393, 403], "8719864": [371, 393, 403], "72109985": [371, 393, 403], "52869415": [371, 393, 403], "79182434": [371, 393, 403], "72489166": [371, 393, 403], "container_n": [371, 393, 403], "container_typ": [371, 393, 403, 630], "container_norm": [371, 393, 403], "1580677": [371, 393], "89422607": [371, 393], "86190414": [371, 393], "00041008": [371, 393], "75149155": [371, 393], "97056389": [371, 393], "87819386": [371, 393], "89381361": [371, 393], "50000000e": [371, 393, 403, 772], "22044605e": [371, 393, 403], "ed": [371, 395, 396, 397], "rest": [371, 374, 395, 396, 397, 466, 815, 822, 824, 840, 850, 868], "5d": [371, 397, 788], "emb": [371, 398], "51285338": [371, 398], "87183261": [371, 398], "2308116": [371, 398], "02733949e": [371, 399], "00j": [371, 399], "49660576e": [371, 399], "68178638e": [371, 399], "01j": [371, 399, 404], "98912367e": [371, 399], "21802426e": [371, 399, 404], "04549134e": [371, 399, 404], "82842712e": [371, 399, 404], "86902654e": [371, 399, 404], "25501143e": [371, 399, 404], "32978028e": [371, 399, 404], "52068201e": [371, 399, 404], "71158374e": [371, 399, 404], "generate_einsum_equ": 371, "get_interpolate_kernel": 371, "27279224e": [371, 403], "44232273e": [371, 403], "70464332e": [371, 403], "73454881e": [371, 403], "00902849e": [371, 403], "10039906e": [371, 403], "07022366e": [371, 403], "69506073": [371, 403], "93914604": [371, 403], "88008881": [371, 403], "18951607": [371, 403], "57439613": [371, 403], "15318303e": [371, 404], "15148591e": [371, 404], "19j": [371, 404], "25000000e": [371, 404], "35378602e": [371, 404], "02j": [371, 404], "65404249e": [371, 404], "17611649e": [371, 404], "24320230e": [371, 404], "79344813e": [371, 404], "22374531e": [371, 404], "45929364e": [371, 404], "14208718e": [371, 404], "07177031e": [371, 404], "indexerror": [371, 405, 416, 635, 698, 803, 829], "interp": [371, 843], "xp": [371, 406, 819], "fp": [371, 406], "nd": [371, 407], "tf_bicub": [371, 407, 843], "nearest_interpol": 371, "window_shap": [371, 413], "pool_typ": [371, 413], "irfft": [371, 415], "silent": [371, 415], "discard": [371, 415, 824], "1400001": [371, 415], "3999999": [371, 415], "3999996": [371, 415], "99038106j": [371, 416], "33012702": [371, 416], "23205081j": [371, 416], "33012702j": [371, 416], "superdiagon": [372, 423, 633, 666], "subdiagon": [372, 423, 633, 666], "eigendecomposit": [372, 425, 633, 668, 669], "qlq\u1d40": [372, 425, 633, 668, 669], "tridiagon": [372, 426], "38196602": [372, 426], "61803389": [372, 426], "35048741": [372, 426], "56710052": [372, 426], "06693714": [372, 426], "74234426": [372, 426], "56155282": [372, 426], "56155276": [372, 426], "82842714": [372, 426], "82842731": [372, 426, 633, 669], "necessarili": [372, 427, 820, 823], "generalis": [372, 428], "skip_matrix": [372, 431, 433], "khatri_rao_product": [372, 431], "kronecker_product": [372, 433], "n_column": [372, 433], "lu_factor": 372, "pivot": [372, 434], "lu": [372, 434, 435], "lu_solv": 372, "nnmf": [372, 436], "hoi": [372, 441, 447], "solve_triangular": 372, "unit_diagon": [372, 442], "solut": [372, 442, 633, 682, 772, 808, 812, 814, 815, 816, 823, 825, 830, 838, 840, 843, 864, 868], "determinist": [372, 443, 840], "borrow": [372, 443, 818], "extmath": [372, 443], "ivan": [372, 444], "oseledet": [372, 444], "scientif": [372, 444, 866], "2295": [372, 444], "2317": [372, 444], "2011": [372, 444], "convention": [373, 450, 869], "explicit": [373, 374, 450, 488, 815, 823, 825, 835, 836, 837, 845, 851, 866], "555969": [373, 450], "223876": [373, 450], "111938": [373, 450], "42649534": [373, 450], "68651628": [373, 450], "51119184": [373, 450], "59967244": [373, 450], "mae": [373, 451], "666": [373, 451, 632, 633, 656, 674], "91097307": [373, 453], "3467": [373, 454], "0133": [373, 454], "0250": [373, 454], "0056": [373, 454], "0025": [373, 454], "0675": [373, 454], "6987": [373, 455], "1606": [373, 455], "3711": [373, 455], "4032": [373, 455], "6931": [373, 455], "whilst": [374, 458, 459, 460, 850, 853, 866], "ary3": [374, 460], "check_scalar": 374, "force_integ": [374, 462], "force_posit": [374, 462], "mod": [374, 463, 819], "tall": [374, 469], "appear": [374, 471, 472, 610, 630, 815, 816, 819, 837, 843, 859], "horizot": [374, 476], "shortcut": [374, 480, 815], "linear_ramp": [374, 480], "reflect": [374, 480, 816, 820, 836, 840], "ramp": [374, 480], "mirror": [374, 480, 811, 814, 866], "padding_func": [374, 480], "iaxis_pad_width": [374, 480], "iaxi": [374, 480], "unalt": [374, 480], "put": [374, 485, 808, 814, 840, 851, 872], "mul": [374, 485, 836, 847], "conceptu": [374, 488, 862, 867], "concern": [374, 488, 816, 818, 823, 825, 827, 836, 843, 844, 872], "regard": [374, 488, 813, 823, 837, 838, 843, 856], "mutat": [374, 488], "elimin": [374, 494, 815], "consecut": [374, 494], "batch_mean": [377, 497, 499], "batch_var": [377, 497, 499], "running_vari": [377, 497, 499], "local_response_norm": 377, "neighbour": [377, 502], "42857143": [377, 503], "5714286": [377, 503], "multivari": [378, 506], "bayesian": [378, 506], "supposedli": [381, 510], "indirect": [381, 511], "secondari": [381, 511], "is_ivy_sparse_arrai": 382, "is_native_sparse_arrai": 382, "native_sparse_arrai": 382, "coo_indic": [382, 514], "crow_indic": [382, 514], "col_indic": [382, 514], "ccol_indic": [382, 514], "row_indic": [382, 514], "dense_shap": [382, 514], "native_sparse_array_to_indices_values_and_shap": 382, "nativesparsearrai": 382, "sparsearrai": 382, "linalg": [383, 518, 633, 681, 682, 814, 836, 838], "aw": [383, 518, 856], "48447205": [383, 518], "c0": [383, 521], "ck": [383, 521], "c2": [383, 521], "nearest_jax": [383, 528], "trace_on_next_step": [532, 630, 792, 849], "recalcul": [535, 630], "my_sum": [535, 630], "val1": [535, 630], "val2": [535, 630], "cached_sum": [535, 630], "line_eq": [535, 630], "slp": [535, 630], "itc": [535, 630], "cached_line_eq": [535, 630], "0353": [536, 630], "424": [536, 630], "176": [536, 630], "339": [536, 630], "271": [536, 630], "391": [536, 630], "417": [537, 630], "583": [537, 630], "0667": [537, 630], "267": [537, 630], "131": [537, 630], "263": [537, 630], "394": [537, 630, 639, 739], "526": [537, 630], "788": [537, 630], "27279221": [537, 630], "69705628": [537, 630], "12132034": [537, 630], "default_str": [540, 630], "46999979": [541, 630], "66000009": [541, 630], "93000001": [541, 630], "29000092": [541, 630], "33999991": [541, 630], "6400001": [541, 630], "96000004": [541, 630], "36000013": [541, 630], "51999998": [541, 630], "67000008": [541, 630], "suppos": [541, 630, 825, 840], "960": [541, 630], "3600": [541, 630], "h1": [541, 630], "w1": [541, 630], "40499985": [542, 630], "61000061": [542, 630], "max_depth": [553, 630], "seen_set": [553, 630], "local_set": [553, 630], "referr": [553, 630], "redund": [553, 630, 808, 825, 829, 837, 859], "example_funct": [553, 630], "repr": [553, 630], "ivyexcept": [558, 591, 630, 803, 826, 829, 834, 836, 837, 841], "allow_dupl": [568, 630], "fork": [569, 630, 809, 819, 824, 830], "forkserv": [569, 630], "mp_default": [569, 630], "defaultcontext": [569, 630], "0x7f4e3193e520": [569, 630], "mp_fork": [569, 630], "forkcontext": [569, 630], "0x7f4e3193e580": [569, 630], "mp_spawn": [569, 630], "spawncontext": [569, 630], "0x7f4e3193e5e0": [569, 630], "mp_forkserv": [569, 630], "forkservercontext": [569, 630], "0x7f4e3193e640": [569, 630], "garbag": [571, 630], "collector": [571, 630], "get_all_arrays_in_memori": [571, 630], "exception_trace_mod": [575, 599, 630, 842], "lenient": [576, 600, 630], "inplace_mod": [576, 600, 630], "break": [576, 630, 808, 821, 825, 832, 841, 851], "infus": [577, 630], "unset": [578, 585, 630, 633, 681, 797, 821, 845], "unset_min_bas": [578, 630], "nestable_mod": [580, 603, 630, 842], "precise_mod": [581, 604, 630, 842], "shape_array_mod": [583, 606, 630, 842], "show_func_wrapper_trace_mod": [584, 607, 630, 842], "tmp_dr": [585, 630], "tmp_dir": [585, 608, 630, 842], "my_tmp": [585, 630], "unset_tmp_dir": [585, 630], "49999999999975": [588, 630], "5015015015010504": [588, 630], "000444502911705e": [588, 630], "9999999999995j": [588, 630], "00000262": [589, 630], "15605032": [589, 630], "01208451j": [589, 630], "00048": [589, 630], "1296": [589, 630], "00864": [589, 630], "isn": [591, 630, 811, 816, 834, 836, 840, 848, 851, 868], "100000023841858": [593, 630], "200000047683716": [593, 630], "299999952316284": [593, 630], "400000095367432": [593, 630], "599999904632568": [593, 630], "hemant": [597, 630], "unset_shape_array_mod": [598, 630], "set_exception_trace_mod": [599, 630, 829], "set_min_bas": [601, 630], "set_min_denomin": [602, 630], "set_nestable_mod": [603, 630], "set_precise_mod": [604, 630], "set_queue_timeout": [605, 630], "set_shape_array_mod": [606, 630], "set_show_func_wrapper_trace_mod": [607, 630, 829], "set_tmp_dir": [608, 630], "my_dir": [608, 630], "451": [609, 630], "in_ax": [610, 630], "out_ax": [610, 630], "thereof": [610, 630], "summaris": [610, 630], "99999998": [611, 631], "19999998": [611, 631], "00000001": [611, 631], "00300001": [611, 631], "00800001": [611, 631], "0125": [611, 631], "17294501": [611, 631], "15770318": [611, 631], "20863818": [611, 631], "90000075": [612, 631], "90000164": [612, 631], "9000032": [612, 631], "50000012e": [612, 631], "92558754": [612, 631], "92558694": [612, 631], "92558682": [612, 631], "92558861": [612, 631], "60000025e": [612, 631], "01024": [612, 631], "retain_grad": [613, 631], "func_ret": [613, 631, 835], "666666": [613, 631], "333332": [613, 631], "66666675": [613, 621, 631], "argnum": [614, 631], "933": [614, 616, 631], "jac_fn": [616, 631], "639": [617, 631], "361": [617, 631], "52565837": [618, 631], "8418861": [618, 631], "68377209": [618, 631], "value_grad": [621, 631], "42333412": [621, 631], "5333333": [621, 631], "93333334": [621, 631], "43333334": [621, 631], "0666666": [621, 631], "softsign": 622, "718281828459045": 623, "euler": 623, "141592653589793": 623, "cmp_i": 624, "cmp_isnot": 624, "for_loop": 624, "if_els": 624, "try_except": 624, "to_dlpack": 625, "as_ivy_dtyp": [626, 837], "as_native_dtyp": 626, "check_float": 626, "closest_valid_dtyp": 626, "default_dtyp": [626, 825, 833], "dtype_bit": 626, "function_supported_dtyp": [626, 825, 840], "function_unsupported_dtyp": [626, 825], "infer_default_dtyp": 626, "invalid_dtyp": [626, 825], "is_hashable_dtyp": 626, "is_native_dtyp": 626, "promote_typ": [626, 825], "promote_types_of_input": [626, 825, 836], "type_promote_arrai": [626, 825], "unset_default_complex_dtyp": 626, "unset_default_float_dtyp": 626, "unset_default_int_dtyp": 626, "unset_default_uint_dtyp": 626, "valid_dtyp": 626, "defaultcomplexdtyp": 626, "defaultdtyp": 626, "defaultfloatdtyp": 626, "defaultintdtyp": 626, "defaultuintdtyp": 626, "as_ivy_dev": [627, 847], "clear_cached_mem_on_dev": 627, "dev_util": [627, 826], "function_supported_devic": 627, "function_unsupported_devic": 627, "get_all_ivy_arrays_on_dev": [627, 826], "handle_soft_device_vari": [627, 826], "num_cpu_cor": [627, 826], "num_gpu": [627, 826, 840], "num_ivy_arrays_on_dev": 627, "percent_used_mem_on_dev": 627, "print_all_ivy_arrays_on_dev": 627, "set_split_factor": [627, 829], "split_func_cal": 627, "total_mem_on_dev": [627, 826], "tpu_is_avail": 627, "unset_default_devic": [627, 826], "unset_soft_device_mod": [627, 826], "used_mem_on_dev": 627, "defaultdevic": [627, 826], "profil": 627, "save_dir": 627, "arg_info": 630, "arg_nam": 630, "cache_fn": [630, 833], "current_backend_str": [630, 840, 845, 847], "function_supported_devices_and_dtyp": 630, "function_unsupported_devices_and_dtyp": 630, "get_item": [630, 836], "get_referrers_recurs": 630, "inplace_arrays_support": 630, "inplace_variables_support": 630, "is_ivy_nested_arrai": 630, "isscalar": 630, "match_kwarg": 630, "num_arrays_in_memori": 630, "print_all_arrays_in_memori": 630, "set_item": [630, 840], "to_ivy_shap": 630, "to_native_shap": 630, "try_else_non": 630, "unset_array_mod": [630, 842], "unset_exception_trace_mod": 630, "unset_inplace_mod": 630, "unset_min_denomin": 630, "unset_nestable_mod": 630, "unset_precise_mod": 630, "unset_queue_timeout": 630, "unset_show_func_wrapper_trace_mod": 630, "vmap": [630, 851, 866], "arraymod": 630, "precisemod": [630, 825], "jac": 631, "value_and_grad": [631, 835], "neural": [632, 784, 788, 808, 860, 862, 864, 865, 866, 870, 872, 873], "feature_group_count": [632, 645, 652, 653], "oiw": [632, 645, 646, 652], "oihw": [632, 645, 648, 652], "oidhw": [632, 645, 650, 652], "dhwio": [632, 645, 646, 650, 652], "conv_general_dil": [632, 837], "conv_general_transpos": 632, "depthwis": [632, 654, 774, 788], "overfit": [632, 655], "overal": [632, 655, 802, 823, 825, 826, 828, 850, 859, 862, 864, 865, 866], "1428566": [632, 655], "49000001": [632, 655], "55599999": [632, 655], "21000004": [632, 655], "incom": [632, 656], "4269": [632, 656], "911": [632, 656, 829], "157": [632, 656], "753": [632, 656], "545": [632, 639, 656, 737], "547": [632, 656, 826], "124": [632, 656], "963": [632, 656], "98495483": [632, 656], "0293808": [632, 656], "0159359": [632, 656], "74752808": [632, 656], "20942307": [632, 656], "3205719": [632, 656], "all_weight": [632, 657], "num_lay": [632, 657, 788], "batch_first": [632, 657, 659], "weights_transpos": [632, 657], "has_ih_bia": [632, 657], "has_hh_bia": [632, 657], "multi": [632, 633, 657, 659, 664, 774, 788, 827, 844, 851, 862, 864, 866, 870], "long": [632, 657, 658, 815, 816, 824, 825, 827, 829, 830, 837, 845, 866], "seq_len": [632, 657], "input_s": [632, 657], "h_0": [632, 657], "c_0": [632, 657], "num_direct": [632, 657], "hidden_s": [632, 657], "four": [632, 657, 811, 820, 825, 827, 832, 833, 840, 843, 848], "w_ih": [632, 657], "w_hh": [632, 657], "b_ih": [632, 657], "b_hh": [632, 657], "bias": [632, 657], "pack": [632, 657], "c_out": [632, 657], "paper": [632, 659, 808, 857], "vaswani": [632, 659], "al": [632, 659], "num_attention_head": [632, 659], "key_dim": [632, 659, 788], "value_dim": [632, 659, 788], "attention_weight": [632, 659], "unbatch": [632, 659], "nm": 632, "box": [632, 660, 661, 815], "iou_threshold": [632, 660], "max_output_s": [632, 660], "score_threshold": [632, 660], "roi_align": 632, "spatial_scal": [632, 661], "sampling_ratio": [632, 661], "23333359": [632, 662], "03946018": [632, 662], "0280633": [632, 662], "29981947": [632, 662], "29981089": [632, 662], "06345534": [632, 662], "9634552": [632, 662], "19336844": [632, 662], "09336829": [632, 662], "axisa": [633, 664], "axisb": [633, 664], "axisc": [633, 664], "293": [633, 665], "46997": [633, 665], "explicitli": [633, 669, 670, 685, 769, 788, 789, 790, 812, 819, 820, 821, 823, 825, 828, 829, 830, 833, 834, 835, 836, 838, 840, 845, 851, 860, 866], "17157288": [633, 669], "9238795": [633, 669], "78930789": [633, 669], "59803128": [633, 669], "19127655": [633, 669], "31213903": [633, 669], "63418275": [633, 669], "84632206": [633, 669], "70548367": [633, 669], "70223427": [633, 669], "09570674": [633, 669], "63116378": [633, 669], "56109613": [633, 669], "53554028": [633, 669], "32237405": [633, 669], "43822157": [633, 669], "83906901": [633, 669], "50766778": [633, 669], "71475857": [633, 669], "48103389": [633, 669], "3676433": [633, 669], "68466955": [633, 669], "62933773": [633, 669], "77917379": [633, 669], "14264561": [633, 669], "61036086": [633, 669], "45033181e": [633, 670], "02829754e": [633, 670], "54220343e": [633, 670], "12647155e": [633, 670], "38447177e": [633, 670], "56155300e": [633, 670], "26794919": [633, 670], "7320509": [633, 670], "0012": [633, 672], "00342": [633, 672], "000565": [633, 672], "0104": [633, 672], "000981": [633, 672], "00282": [633, 672], "000766": [633, 672], "0322": [633, 672], "00237": [633, 672], "000151": [633, 672], "00101": [633, 672], "00019": [633, 672], "0214": [633, 672], "00171": [633, 672], "0107": [633, 672], "0167": [633, 672], "0472": [633, 672], "0536": [633, 672], "0177": [633, 672], "000429": [633, 672], "00762": [633, 672], "frobeniu": [633, 674], "nuclear": [633, 674], "induc": [633, 674], "ranl": [633, 674], "47722558": [633, 674], "776": [633, 674], "6000004": [633, 674], "118": [633, 675], "moor": [633, 679], "penros": [633, 679], "31622776": [633, 680], "94868332": [633, 680], "1622777": [633, 680], "42718887": [633, 680], "deteremin": [633, 681], "logsabsdet": [633, 681], "subject": [633, 681], "unset_backend": [633, 681, 797, 821], "ordin": [633, 682], "b2": [633, 682], "usvh": [633, 683], "cetera": [633, 683], "driver": [633, 684, 851], "cusolv": [633, 684], "gesvd": [633, 684], "gesvdj": [633, 684], "gesvda": [633, 684], "86217213": [633, 684], "31816804": [633, 684], "615": [633, 684], "ss": [633, 684], "25994301": [633, 684], "16403675": [633, 684], "61529762": [633, 684], "51231241": [633, 684], "39777088": [633, 684], "15413129": [633, 684], "1029852": [633, 684], "01383495": [633, 684], "86647356": [633, 684], "7786541": [633, 684], "55970621": [633, 684], "16857576": [633, 684], "86412698": [633, 684], "37566757": [633, 684], "88477993": [633, 684], "95925522": [633, 684], "6444726": [633, 684], "54687881": [633, 684], "16134834": [633, 684], "35037804": [633, 684], "31025076": [633, 684], "35769391": [633, 684], "transposit": [633, 685], "success": [633, 643, 687, 759, 761, 811, 815, 824, 856], "0x": [633, 688], "Such": [633, 688, 833, 840], "progress": [633, 688, 811, 815, 816, 850], "alexandr": [633, 688], "theophil": [633, 688], "dot_product": [633, 689], "9000001": [633, 690], "64158917": [633, 690], "skew": [633, 691], "60309976": [634, 692], "6666193": [634, 692], "01348412": [634, 692], "05393649": [634, 692], "49992943": [634, 692], "83330965": [634, 692], "02136981": [634, 692], "32844672": [634, 692], "26561815": [634, 692], "22314337": [634, 692], "08916873": [634, 693, 694], "44832274": [634, 694], "75646281": [634, 694], "13862944": [634, 694], "57564628": [634, 694], "outsid": [635, 695, 706, 825, 826, 833, 847, 871], "honor": [635, 702], "beyond": [635, 703, 828, 837, 872], "famili": [635, 706], "intxx": [635, 706], "floatxx": [635, 706], "rep": [635, 708], "fomaml_step": 636, "inner_cost_fn": [636, 711, 712, 713], "outer_cost_fn": [636, 711, 712], "inner_grad_step": [636, 711, 712, 713], "inner_learning_r": [636, 711, 712, 713], "inner_optimization_step": [636, 711, 712, 713], "inner_batch_fn": [636, 711, 712], "outer_batch_fn": [636, 711, 712], "average_across_step": [636, 711, 712], "inner_v": [636, 711, 712], "keep_inner_v": [636, 711, 712], "outer_v": [636, 711, 712], "keep_outer_v": [636, 711, 712], "return_inner_v": [636, 711, 712, 713], "num_task": [636, 711, 712, 713], "maml": [636, 711, 712], "0x7f9ba6a2ff40": [636, 711, 712, 713], "maml_step": 636, "vanilla": [636, 712, 849, 866], "_variabl": [636, 712, 713], "sub_batch": [636, 712], "40069818": [636, 712], "13723135": [636, 712], "reptile_step": 636, "cost_fn": [636, 713], "reptil": [636, 713], "batch_in": [636, 713], "4485182": [636, 713], "139": [636, 713], "9569855": [636, 713], "9880483": [636, 713], "01766968": [636, 713], "02197957": [636, 713], "02197981": [636, 713], "all_nested_indic": 637, "include_nest": [637, 714], "_index": [637, 714, 725], "_base": [637, 714, 724, 725, 836], "themselv": [637, 714, 823, 825, 826, 828, 833, 837, 849, 863, 872], "863": [637, 714, 826], "672": [637, 714], "482": [637, 714], "674": [637, 714], "341": [637, 714], "copy_nest": 637, "to_mut": [637, 715, 726], "deepli": [637, 715, 817, 851, 866], "copied_nest": [637, 715], "1337": [637, 715, 726], "duplicate_array_index_chain": 637, "index_nest": [637, 833], "insert_into_nest_at_index": 637, "insert_into_nest_at_indic": 637, "onto": [637, 720, 726, 854, 855, 866], "special_squar": [637, 720], "6666666666666667": [637, 720], "special_pow": [637, 720], "linear_model": [637, 720], "map_nest_at_index": 637, "_result": [637, 721, 731], "hh": [637, 721, 726], "map_nest_at_indic": 637, "ub": [637, 722], "tb": [637, 722], "multi_index_nest": 637, "nested_ani": 637, "check_nest": [637, 724, 725], "nested_argwher": 637, "stop_after_n_found": [637, 725], "nested_indic": [637, 725], "nested_map": [637, 826, 833], "_tuple_check_fn": [637, 726], "_list_check_fn": [637, 726], "_dict_check_fn": [637, 726], "wherebi": [637, 726, 814, 863], "ah": [637, 726], "bh": [637, 726], "ch": [637, 726], "dh": [637, 726, 819], "eh": [637, 726], "gh": [637, 726, 815, 830], "ih": [637, 726], "1338": [637, 726], "nested_multi_map": 637, "index_chain": [637, 727], "nest0": [637, 727], "ivy_arrai": [637, 727, 820, 837], "unappli": [637, 727], "prune_empti": 637, "prune_nest_at_index": 637, "prune_nest_at_indic": 637, "set_nest_at_index": 637, "set_nest_at_indic": 637, "xyz": [637, 732], "pqr": [637, 732], "mini": [638, 733, 788, 791], "uniformli": [639, 735, 737], "22346112": [639, 736], "0922": [639, 736], "9213753": [639, 736], "12818667": [639, 736], "799": [639, 736], "469": [639, 736], "287": [639, 736], "0366": [639, 736], "26431865": [639, 737], "475": [639, 737], "878": [639, 737], "861": [639, 737], "929": [639, 737], "789": [639, 737], "519": [639, 737], "0435": [639, 737], "381": [639, 737], "4608004": [639, 737], "8458502": [639, 737], "67270088": [639, 737], "31128597": [639, 737], "zeroel": [640, 743], "guarante": [641, 745, 747, 806, 820, 825, 836, 851, 857], "fourth": [641, 745], "1141": [641, 745], "8101": [641, 745], "9298": [641, 745], "8460": [641, 745], "2119": [641, 745], "3519": [641, 745], "6252": [641, 745], "4033": [641, 745], "7443": [641, 745], "2577": [641, 745], "3707": [641, 745], "0545": [641, 745], "3238": [641, 745], "5944": [641, 745], "0775": [641, 745], "4327": [641, 745], "62519997": [641, 745], "40329999": [641, 745], "59439999": [641, 745], "74430001": [641, 745], "81010002": [641, 745], "84600002": [641, 745], "92979997": [641, 745], "einstein": [643, 755, 801], "117": [643, 755], "intend": [643, 761, 770, 787, 819, 832, 835, 864, 866, 870, 871], "07472222": [643, 762], "00666667": [643, 762], "08966666": [643, 762], "simplicit": [644, 763, 764], "ivy_test": [767, 769, 770, 772, 773, 774, 775, 776, 777, 778, 779, 780, 814, 815, 816, 819, 822, 824, 830, 838], "test_ivi": [767, 769, 770, 772, 773, 774, 775, 776, 777, 778, 779, 780, 814, 815, 816, 822, 824, 830, 838, 840], "assert_all_clos": [767, 838], "ret_np": [767, 769, 838], "ret_from_gt_np": [767, 838], "ground_truth_backend": [767, 769, 770, 779, 780, 812, 830, 838], "mark": [767, 811, 814, 816, 819, 840, 845], "assert_same_typ": 767, "ret_from_target": 767, "ret_from_gt": 767, "backend_to_test": [767, 769, 812, 830, 838], "gt_backend": 767, "with_backend": [767, 797], "assert_same_type_and_shap": 767, "this_key_chain": 767, "check_unsupported_devic": 767, "input_devic": 767, "all_as_kwargs_np": [767, 769], "presenc": [767, 823, 836], "check_unsupported_device_and_dtyp": 767, "input_dtyp": [767, 769, 779, 812, 830, 838, 840], "check_unsupported_dtyp": 767, "test_unsupported_funct": 767, "value_test": 767, "ret_np_flat": 767, "ret_np_from_gt_flat": 767, "specific_tolerance_dict": 767, "ret_from_np_gt_flat": 767, "function_test": 769, "args_to_contain": 769, "array_arg": [769, 833], "args_to_frontend": 769, "frontend_array_fn": 769, "arrays_to_frontend": 769, "as_list": 769, "convtru": 769, "nativeclass": 769, "counter": [769, 849], "create_args_kwarg": 769, "args_np": 769, "arg_np_val": 769, "args_idx": 769, "kwargs_np": 769, "kwarg_np_val": 769, "kwargs_idx": 769, "test_flag": [769, 812, 830, 838, 840], "on_devic": [769, 779, 812, 830, 838], "flatten_and_to_np": 769, "flatten_frontend": 769, "flatten_frontend_fw_to_np": 769, "frontend_ret": [769, 838], "isscalar_func": 769, "is_native_array_func": 769, "to_numpy_func": 769, "flatten_frontend_to_np": 769, "get_frontend_ret": 769, "frontend_fn": 769, "frontend_array_funct": 769, "precision_mod": [769, 779, 780, 830], "test_trac": [769, 779, 780, 812, 819, 830], "test_trace_each": [769, 779, 780], "get_ret_and_flattened_np_arrai": 769, "gradient_incompatible_funct": 769, "gradient_test": [769, 840], "rtol_": [769, 812, 830], "atol_": [769, 812, 830, 838], "tolerance_dict": 769, "gradient_unsupported_dtyp": 769, "kwargs_to_args_n_kwarg": 769, "num_positional_arg": [769, 779, 780, 812, 830, 838, 840], "port": [769, 857], "test_frontend_funct": [769, 838], "fn_tree": [769, 770, 780, 812, 830, 837, 838, 840], "gt_fn_tree": [769, 780], "test_valu": [769, 838, 840], "frontend_function_flag": [769, 779], "functiontestflag": [769, 779, 812, 830], "with_out": [769, 779, 812, 830, 838, 840], "instance_method": [769, 779, 812, 830, 840], "as_vari": [769, 779, 812, 830, 838, 840], "namespac": [769, 814, 825, 834, 837, 838, 841, 845, 850], "test_frontend_method": [769, 838], "init_input_dtyp": [769, 838], "method_input_dtyp": [769, 838], "init_flag": [769, 838, 840], "method_flag": [769, 779, 838, 840], "init_all_as_kwargs_np": [769, 838], "method_all_as_kwargs_np": [769, 838], "frontend_method_data": [769, 838], "init_as_variable_flag": [769, 780], "dictat": [769, 820, 827, 832, 836], "init_num_positional_arg": [769, 780], "init_native_array_flag": 769, "with_v": 769, "ret_gt": 769, "test_funct": [769, 812, 815, 816, 824, 830, 838, 840], "fn_name": [769, 770, 780, 812, 821, 830, 838, 840], "return_flat_np_arrai": 769, "as_variable_flag": [769, 780, 840], "native_array_flag": [769, 780, 840], "container_flag": [769, 779, 780, 840], "test_function_backend_comput": 769, "test_function_ground_truth_comput": 769, "arg_np_arrai": 769, "arrays_args_indic": 769, "arrays_kwargs_indic": 769, "kwarg_np_arrai": 769, "test_gradient_backend_comput": 769, "test_gradient_ground_truth_comput": 769, "test_method": 769, "method_nam": [769, 778, 780, 838], "init_with_v": 769, "method_with_v": 769, "test_gradi": [769, 779, 780, 812, 830, 840], "method_as_variable_flag": [769, 780], "method_num_positional_arg": [769, 780], "method_native_array_flag": 769, "method_container_flag": [769, 780], "test_method_backend_comput": 769, "test_method_ground_truth_comput": 769, "org_con_data": 769, "args_np_method": 769, "met_arg_np_v": 769, "met_args_idx": 769, "kwargs_np_method": 769, "met_kwarg_np_v": 769, "met_kwargs_idx": 769, "v_np": 769, "traced_if_requir": 769, "wrap_frontend_function_arg": 769, "holder": 770, "current_frontend_config": 770, "0x7f9b9a16df30": 770, "interruptedtest": 770, "test_interrupt": 770, "baseexcept": 770, "tri": [770, 825], "testdata": 770, "supported_device_dtyp": 770, "is_method": 770, "setup_api_test": 770, "test_data": 770, "setup_frontend_test": 770, "teardown_api_test": 770, "teardown_frontend_test": 770, "hypothesis_help": [772, 773, 774, 775], "array_help": 772, "array_and_broadcastable_shap": 772, "searchstrategi": [772, 773, 774, 775, 779, 780, 840], "array_bool": [772, 840], "min_valu": [772, 773, 774, 775, 812, 830, 838, 840], "max_valu": [772, 773, 774, 775, 838, 840], "ex": [772, 773, 774, 775, 780, 824, 860], "strategi": [772, 773, 774, 775, 779, 780, 814, 838], "array_helpers_dtype_info_help": 772, "kind_dtyp": [772, 774], "array_indices_axi": 772, "array_dtyp": [772, 773, 840], "indices_dtyp": 772, "get_dtyp": [772, 773, 812, 830, 838, 840], "abs_smallest_v": [772, 774, 775], "large_abs_safety_factor": [772, 774, 775, 812, 830, 838, 840], "small_abs_safety_factor": [772, 774, 775, 812, 830, 838], "safety_factor_scal": [772, 774, 775, 838, 840], "disable_random_axi": 772, "axis_zero": 772, "allow_inf": [772, 775, 838, 840], "min_num_dim": [772, 774, 838, 840], "max_num_dim": [772, 774, 838, 840], "min_dim_s": [772, 774, 838, 840], "max_dim_s": [772, 774, 838], "first_dimension_onli": 772, "indices_same_dim": 772, "valid_bound": 772, "safeti": [772, 774, 775, 866], "0002": [772, 775], "hypothesi": [772, 774, 780, 814, 816, 819, 824, 834], "65536": 772, "44758124e": [772, 840], "array_indices_put_along_axi": 772, "values_dtyp": 772, "array_valu": [772, 840], "allow_nan": [772, 775, 840], "allow_subnorm": [772, 775, 840], "exclude_min": [772, 775, 840], "exclude_max": [772, 775], "subnorm": [772, 775], "get_shap": [772, 774, 838, 840], "1806": 772, "36912": 772, "6955": 772, "59576": 772, "1025": 772, "arrays_and_ax": 772, "available_dtyp": [772, 773, 812, 830, 838, 840], "allow_non": [772, 774, 838, 840], "return_dtyp": 772, "force_int_axi": 772, "26e": 772, "10e": 772, "24322108": 772, "26446279e": 772, "96046448e": 772, "008": 772, "17549435e": 772, "038": 772, "06541027e": 772, "13725760e": 772, "07143888": 772, "arrays_for_pool": 772, "min_dim": 772, "max_dim": 772, "min_sid": 772, "max_sid": 772, "explicit_or_str_pad": 772, "only_explicit_pad": 772, "return_dil": 772, "mixed_fn_compo": [772, 773, 774, 775, 840], "return_data_format": 772, "cond_data_gen_help": 772, "create_concatenable_arrays_dtyp": 772, "min_num_arrai": 772, "max_num_arrai": 772, "concat_dim": 772, "common_shap": [772, 840], "stackabl": 772, "given_common_shap": 772, "create_nested_input": 772, "leaf_valu": 772, "dtype_and_valu": [772, 812, 830, 838, 840], "num_arrai": [772, 773, 838, 840], "shared_dtyp": [772, 773, 838], "ret_shap": 772, "array_api_dtyp": [772, 773], "shape_kei": 772, "37915": 772, "6322": 772, "26765": 772, "12413": 772, "26986": 772, "34665": 772, "000e": 772, "711e": 772, "100e": 772, "955e": [772, 840], "40817": 772, "56193": 772, "29200": 772, "5851": 772, "9746": 772, "9604645e": 772, "103": 772, "41795": 772, "1170789994": 772, "44251": 772, "44209": 772, "433075925": 772, "24791": 772, "24691": 772, "24892": 772, "16711": 772, "972": 772, "15357": 772, "72057594037927936": 772, "dtype_array_queri": 772, "allow_mask": 772, "allow_neg_step": 772, "dtype_array_query_v": 772, "dtype_values_axi": [772, 840], "min_axi": 772, "max_axi": 772, "valid_axi": 772, "allow_neg_ax": 772, "min_axes_s": 772, "max_axes_s": 772, "force_tuple_axi": 772, "29788": 772, "62222885e": 772, "68281172e": 772, "257j": 772, "40129846e": 772, "90000000e": 772, "63426649e": 772, "91931887e": 772, "29488e": 772, "14361019e": 772, "12445": 772, "einsum_help": 772, "get_first_solve_batch_matrix": 772, "choose_adjoint": 772, "get_second_solve_batch_matrix": 772, "get_first_solve_matrix": 772, "allow_simplifi": 772, "choose_sid": 772, "xa": 772, "get_second_solve_matrix": 772, "list_of_s": 772, "sampled_from": [772, 838, 840], "min_siz": [772, 774, 780, 840], "max_siz": [772, 774, 780, 840], "size_bound": [772, 840], "999999999999999": 772, "9394938006792373": 772, "mutually_broadcastable_shap": 772, "num_shap": 772, "base_shap": 772, "dtype_help": 773, "univers": [773, 837, 855], "cast_filt": 773, "cast_filter_help": 773, "current_backend": [773, 797, 814, 821, 829, 833, 838, 841, 845], "get_castable_dtyp": 773, "castabl": 773, "prune_funct": 773, "intersect": [773, 824, 840], "signed_integ": 773, "real_and_complex": 773, "float_and_complex": 773, "general_help": 774, "broadcasterror": 774, "apply_safety_factor": 774, "dims_and_offset": 774, "ensure_dim_uniqu": 774, "embedding_help": 774, "general_helpers_dtype_info_help": 774, "get_axi": [774, 840], "allow_neg": 774, "sort_valu": 774, "force_tupl": 774, "force_int": 774, "assertionerror": [774, 812, 819, 829, 830, 838, 840], "get_bound": [774, 840], "get_mean_std": 774, "matrix_is_st": 774, "cond_limit": 774, "instabl": [774, 812, 825, 830], "computation": [774, 815], "prone": [774, 825], "thumb": 774, "gradual": 774, "strong": [774, 851, 856, 866], "collinear": 774, "reshape_shap": [774, 840], "sizes_": 774, "two_broadcastable_shap": 774, "x_and_filt": 774, "number_help": 775, "arbitrarili": [775, 848], "safety_factor": 775, "backend_proc": 776, "input_queu": 776, "output_queu": 776, "frontend_proc": 776, "pipeline_help": 777, "backendhandl": 777, "update_backend": [777, 838], "backendhandlermod": 777, "enum": 777, "setbackend": 777, "withbackend": 777, "withbackendcontext": 777, "get_frontend_config": 777, "frontendmethoddata": 778, "ivy_init_modul": 778, "framework_init_modul": 778, "init_nam": 778, "test_parameter_flag": 779, "dynamicflag": [779, 780], "frontendfunctiontestflag": [779, 830], "with_copi": 779, "generate_frontend_arrai": [779, 780, 830], "testflag": 779, "apply_flag": 779, "args_to_iter": 779, "frontendinittestflag": 779, "frontendmethodtestflag": 779, "test_cython_wrapp": [779, 780], "initmethodtestflag": 779, "methodtestflag": 779, "build_flag": 779, "frontend_init_flag": 779, "frontend_method_flag": 779, "function_flag": 779, "init_method_flag": 779, "testing_help": 780, "handle_exampl": [780, 840], "test_exampl": [780, 840], "test_frontend_exampl": [780, 840], "test_method_exampl": [780, 840], "test_frontend_method_exampl": [780, 840], "given_kwarg": 780, "handle_frontend_method": [780, 838, 840], "class_tre": [780, 838], "init_tre": [780, 838], "init_native_arrai": 780, "_as_varaible_strategi": 780, "method_native_arrai": 780, "test_inplac": [780, 840], "_given_kwarg": 780, "test_compil": 780, "handle_frontend_test": [780, 838, 840], "alias": [780, 814, 837, 838], "number_positional_arg": [780, 838], "test_with_out": [780, 838, 840], "test_with_copi": 780, "handle_method": [780, 840], "method_tre": [780, 838, 840], "_gradient_strategi": 780, "handle_test": [780, 812, 830, 840], "test_instance_method": [780, 840], "num_positional_args_help": 780, "num_positional_args_method": 780, "geglu": 784, "leakyrelu": 784, "logsoftmax": 784, "from_flax_modul": 785, "native_modul": 785, "params_fx": 785, "rng_seed": 785, "constructor_arg": 785, "constructor_kwarg": 785, "instance_arg": 785, "instance_kwarg": 785, "flax": [785, 850, 851, 857, 866], "from_haiku_modul": 785, "params_hk": 785, "from_paddle_modul": 785, "from_torch_modul": 785, "dedic": [785, 817, 832, 843, 847, 849], "to_keras_modul": 785, "native_module_class": 785, "modulehelp": [786, 790], "create_vari": [787, 849], "var_shap": [787, 849], "fan_out": [787, 849], "fan_in": [787, 849], "rectangular": 787, "firstlayersiren": 787, "siren": 787, "glorotuniform": [787, 788, 849], "glorot": 787, "xavier": 787, "neuron": 787, "w_1x_1": 787, "w_2x_2": 787, "w_nx_n": 787, "w_i": 787, "vanish": 787, "explod": [787, 854, 855], "kaimingnorm": 787, "fan_mod": [787, 849], "kaim": 787, "he": 787, "negative_slop": 787, "fan": 787, "propog": 787, "fan_sum": [787, 849], "Ones": 787, "randomnorm": 787, "stddev": 787, "w0": 787, "wlim": 787, "predefin": 787, "fan_avg": 787, "adaptiveavgpool1d": 788, "avgpool1d": 788, "implicit": [788, 823, 828, 837, 840, 845, 866], "avgpool2d": 788, "avgpool3d": 788, "e501": 788, "filter_s": 788, "weight_initi": [788, 849], "bias_initi": [788, 849], "0x7f9ba679ba60": 788, "0x7f9ba679bac0": 788, "conv1dtranspos": 788, "0x7f9ba679bb20": 788, "0x7f9ba679bb80": 788, "filter_shap": 788, "0x7f9ba679bbe0": 788, "0x7f9ba679bc40": 788, "0x7f9ba679bca0": 788, "0x7f9ba6798250": 788, "0x7f9ba6798130": 788, "0x7f9ba67980d0": 788, "conv3dtranspos": 788, "0x7f9ba6798070": 788, "0x7f9ba6798550": 788, "depthwiseconv2d": 788, "num_channel": 788, "0x7f9ba67981f0": 788, "0x7f9ba6798190": 788, "bernoul": 788, "num_embed": 788, "embedding_dim": 788, "padding_idx": 788, "lookup": 788, "num_embeddingss": 788, "renorm": 788, "insensit": 788, "return_st": 788, "0x7f9ba67985b0": 788, "get_initial_st": 788, "0x7f9ba679b8e0": 788, "0x7f9ba679b940": 788, "maxpool1d": 788, "maxpool3d": 788, "multiheadattent": 788, "embed_dim": 788, "head_dim": 788, "dropout_r": 788, "use_proj_bia": 788, "attention_ax": 788, "build_mod": [788, 789, 790], "on_init": [788, 790], "parallel": [788, 822, 866, 870, 871], "binarycrossentropyloss": 789, "store_var": [789, 790], "with_partial_v": [789, 790], "logpoissonloss": 789, "modulemeta": 790, "temporarili": [790, 812, 819, 830], "from_cal": 790, "module_dict": 790, "register_buff": 790, "register_paramet": 790, "weights_path": 790, "randomness_factor": 790, "with_edge_label": 790, "with_arg_label": 790, "with_output_label": 790, "output_connected_onli": 790, "highlight_subgraph": 790, "trace_kwarg": 790, "_unified_ivy_graph": 790, "_call": 790, "num_featur": 791, "trail": 791, "layernorm": 791, "normalized_shap": 791, "elementwise_affin": 791, "set_stat": [792, 849], "adamw": 792, "weight_decai": 792, "init_on_first_step": 792, "fallback_to_non_trac": 792, "ignore_miss": 792, "privat": [792, 837, 840], "_step": [792, 849], "stochast": [792, 866], "sub_modul": 793, "check_al": 794, "messag": [794, 803, 807, 815, 816, 824, 827, 829, 831, 837, 845, 847, 856], "check_all_or_any_fn": 794, "check_ani": 794, "check_dev_correct_format": 794, "check_dimens": 794, "check_elem_in_list": [794, 833, 836, 837], "elem": 794, "check_equ": [794, 837], "check_exist": 794, "check_fals": 794, "check_gather_input_valid": 794, "check_gather_nd_input_valid": 794, "check_great": 794, "allow_equ": [794, 829], "check_inplace_sizes_valid": [794, 836], "check_isinst": 794, "allowed_typ": 794, "check_kernel_padding_s": 794, "padding_s": 794, "check_less": [794, 829], "check_one_way_broadcast": 794, "check_same_dtyp": 794, "check_shapes_broadcast": 794, "check_tru": 794, "check_unsorted_segment_valid_param": 794, "ast_help": 796, "importtransform": 796, "nodetransform": 796, "impersonate_import": 796, "tree": [796, 825], "local_ivy_id": 796, "visit_import": 796, "visit_importfrom": 796, "ivyload": 796, "loader": [796, 848, 851], "exec_modul": 796, "ivypathfind": 796, "metapathfind": 796, "find_spec": 796, "fullnam": 796, "contextmanag": 797, "choose_random_backend": 797, "global_backend": 797, "dynamic_backend_convert": 797, "backend_stack": [797, 845], "prevent_access_loc": 797, "previous_backend": [797, 821], "Or": [797, 808, 810, 815, 836, 848], "set_backend_to_specific_vers": 797, "set_jax_backend": 797, "set_mxnet_backend": 797, "mx": 797, "set_numpy_backend": 797, "set_paddle_backend": 797, "set_tensorflow_backend": 797, "set_torch_backend": 797, "sub_backend_handl": 798, "clear_sub_backend": 798, "find_available_sub_backend": 798, "sub_backends_loc": 798, "fn_name_from_version_specific_fn_nam": 798, "fn_name_from_version_specific_fn_name_sub_backend": 798, "sub_backend_vers": 798, "backend_vers": [798, 812, 825, 830], "set_sub_backend": 798, "sub_backend_str": 798, "set_sub_backend_to_specific_vers": 798, "sub_backend": 798, "unset_sub_backend": 798, "check_for_binari": 799, "cleanup_and_fetch_binari": [799, 815], "clean": [799, 816, 841, 845, 846, 848], "dynamic_import": 800, "import_modul": [800, 845], "einsum_pars": 801, "convert_interleaved_input": 801, "interleav": 801, "convert_subscript": 801, "old_sub": 801, "symbol_map": 801, "subscript": [801, 802], "oe": 801, "ellipsi": [801, 802], "find_output_shap": 801, "find_output_str": 801, "canon": 801, "gen_unused_symbol": 801, "abd": [801, 802], "get_symbol": 801, "letter": 801, "resort": 801, "unicod": 801, "charact": [801, 837, 856], "chr": 801, "surrog": 801, "\u0155": 801, "20000": 801, "\u4eac": 801, "has_valid_einsum_chars_onli": 801, "einsum_str": 801, "abaz": 801, "\u00f6ver": 801, "is_valid_einsum_char": 801, "\u01f5": 801, "legalise_einsum_expr": 801, "reproduct": [801, 802], "pars": [801, 802, 822, 827, 851], "intak": 801, "contract_path": 801, "parse_einsum_input": [801, 802], "einsum_eqn": 801, "legalis": 801, "legalise_einsum_eqn": 801, "za": [801, 802], "xza": [801, 802], "xz": [801, 802], "possibly_convert_to_numpi": 801, "myshap": 801, "__main__": 801, "0x10f850710": 801, "einsum_path_help": 802, "can_dot": 802, "idx_remov": 802, "bla": 802, "benefici": 802, "movement": 802, "costli": 802, "gemm": 802, "ijj": 802, "ddot": 802, "ikj": 802, "compute_size_by_dict": 802, "idx_dict": 802, "abbc": 802, "find_contract": 802, "input_set": 802, "output_set": 802, "lh": 802, "rh": 802, "new_result": 802, "idx_contract": 802, "iset": 802, "oset": 802, "bdc": 802, "flop_count": 802, "num_term": 802, "size_dictionari": 802, "flop": [802, 806], "greedy_path": 802, "memory_limit": 802, "exhaust": [802, 836, 840, 863, 872], "indices_remov": 802, "priorit": [802, 814, 839, 843], "hadamard": 802, "cubic": 802, "greedi": 802, "idx_siz": 802, "optimal_path": 802, "siev": 802, "input_str": 802, "output_str": 802, "parse_possible_contract": 802, "path_cost": 802, "naive_cost": 802, "propos": [802, 816, 837, 843, 866], "intermediari": [802, 821], "unoptim": 802, "new_input_set": 802, "update_other_result": 802, "provision": 802, "_parse_possible_contract": 802, "mod_result": 802, "inplaceupdateexcept": 803, "include_backend": [803, 829], "ivyattributeerror": [803, 829], "attributeerror": [803, 829, 847], "ivybroadcastshapeerror": [803, 829], "ivydeviceerror": 803, "ivydtypepromotionerror": [803, 829], "ivyindexerror": [803, 829], "ivyinvalidbackendexcept": 803, "ivynotimplementedexcept": [803, 829], "notimplementederror": 803, "ivyvalueerror": [803, 829], "handle_except": [803, 832, 834], "add_array_spec": 804, "fn_array_spec": 804, "set_logging_mod": 805, "debug": [805, 811, 815, 816, 823, 824, 835, 840, 843, 848, 866, 874], "unset_logging_mod": 805, "print_stat": 806, "viz": 806, "snakeviz": 806, "bonu": 806, "cprofil": 806, "tensorflow_profile_start": 806, "logdir": 806, "host_tracer_level": 806, "python_tracer_level": 806, "device_tracer_level": 806, "delay_m": 806, "toggl": [806, 816], "host": [806, 810, 824, 851, 856, 871], "timestamp": 806, "awai": [806, 808, 864, 866], "millisecond": 806, "guess": 806, "tensorflow_profile_stop": 806, "torch_profiler_init": 806, "schedul": [806, 824, 851, 866, 873], "on_trace_readi": 806, "record_shap": 806, "profile_memori": 806, "with_stack": 806, "with_flop": 806, "with_modul": 806, "experimental_config": 806, "profileract": 806, "record_and_sav": 806, "dealloc": 806, "record": [806, 815, 851, 867], "callstack": 806, "aten": 806, "torchscript": [806, 845, 853, 873], "_experimentalconfig": 806, "kineto": 806, "torch_profiler_start": 806, "torch_profiler_stop": 806, "cprint": [807, 845], "grant": 808, "autotun": [808, 870], "grow": [808, 811, 817, 866, 874], "peopl": [808, 813, 815, 816, 818, 866, 868], "wip": [808, 859], "docker": [808, 812, 813, 830], "pull": [808, 809, 811, 814, 815, 819, 827, 831, 841, 843, 851, 852, 857], "sweat_smil": 808, "setting_up": 808, "jax_fn": 808, "jax_x": 808, "torch_x": 808, "torch_fn": 808, "motiv": [808, 847, 856], "contextu": 808, "problem": [808, 811, 814, 816, 819, 820, 826, 837, 847, 856, 862, 868, 872], "explos": [808, 854, 856], "adher": [808, 819, 825, 828, 832, 843, 845, 850, 855, 856, 862, 863, 872], "focus": [808, 825, 841, 864, 865, 866, 872, 873], "orient": 808, "contributor": [808, 809, 812, 814, 815, 816, 830, 837, 844, 866], "shorter": [808, 847], "ensp": 808, "customiz": [808, 822], "deepmind_perceiver_io": 808, "sm_framework": 808, "segmentation_model": 808, "sm": 808, "torch_sm": 808, "metric": [808, 851], "iou_scor": 808, "rax": 808, "torch_rax": 808, "poly1_softmax_loss": 808, "madmom": 808, "madmon": 808, "torch_madmom": 808, "freq": 808, "audio": 808, "hz2midi": 808, "torch_loss": 808, "maxpooling1d": 808, "pool_siz": 808, "tf_kornia": 808, "tf_rax": 808, "tf_madmom": 808, "tf_loss": 808, "_forward_classifi": [808, 860], "forward_classifi": [808, 860], "hk_eff_encod": 808, "dummy_x": 808, "jax_sm": 808, "jax_madmom": 808, "jax_loss": 808, "np_kornia": 808, "np_sm": 808, "np_rax": 808, "np_loss": 808, "yourself": [808, 814, 816, 831, 840, 843], "favourit": [808, 815], "pipelin": [808, 810, 818, 819, 820, 838, 841, 850, 853, 855, 860, 866, 867, 872], "hyperparam": 808, "idea": [808, 814, 839, 841, 846, 857, 865], "instantli": [808, 860], "essenti": [808, 811, 814, 821, 823, 826, 827, 833, 836, 837, 838, 855, 856, 872], "mainli": [808, 814, 818, 835, 837, 840, 846, 848, 853, 866], "handler": [808, 844, 846, 850, 853], "scene": [808, 818, 844, 846, 854, 855, 866], "facilit": [808, 817], "mse_loss": 808, "jax_ms": 808, "tf_mse": 808, "np_mse": 808, "torch_ms": 808, "someth": [808, 812, 816, 821, 830, 831, 841, 848, 849, 851, 852, 872], "favorit": 808, "flexibl": [808, 823, 825, 832, 835, 841, 843, 866], "everyon": [808, 809, 814, 815, 816, 851, 857], "plan": [808, 852], "interoper": [808, 856, 863, 864, 866, 869], "believ": [808, 816, 856], "feedback": [808, 814, 824], "appreci": [808, 817], "amaz": [808, 874], "journei": [808, 809, 817], "ambiti": 808, "season": 808, "perfect": 808, "ask": [808, 814, 815, 827, 845, 847, 851, 852, 857], "fellow": 808, "twitter": 808, "sneak": 808, "peek": 808, "stai": [808, 824], "proper": [808, 814, 837, 860], "credit": 808, "accompani": 808, "lenton2021ivi": 808, "inter": 808, "author": [808, 814, 816, 864, 868], "lenton": 808, "daniel": 808, "pardo": 808, "fabio": 808, "falck": 808, "fabian": 808, "jame": 808, "stephen": 808, "clark": 808, "ronald": 808, "journal": 808, "arxiv": 808, "preprint": 808, "2102": 808, "02886": 808, "year": [808, 819, 851, 855, 857, 866], "strongli": [809, 815, 837, 872, 873], "engag": [809, 816, 817, 856], "skill": [809, 817, 868], "veteran": 809, "effort": [809, 814, 851, 856, 862, 866, 872], "board": [809, 822], "stage": [809, 816, 818, 819, 822, 840, 856, 866], "excit": [809, 818, 856], "reward": [809, 817], "badg": [809, 817, 824, 874], "program": [809, 836, 863, 864, 866, 869, 870, 873], "climb": [809, 813], "Be": [810, 822], "awar": [810, 822, 829, 831], "linux": [810, 815, 816, 822, 869, 871], "regularli": [810, 822, 824], "internet": [810, 822], "codespac": [810, 822, 830], "make_doc": 810, "sh": [810, 815, 816, 819, 824], "pwd": 810, "ssh": [810, 824], "make_docs_without_dock": [810, 822], "award": 811, "formal": 811, "dynamo": [811, 874], "earn": [811, 817], "thoroughli": [811, 819], "valuabl": [811, 814, 816], "merg": [811, 814, 816, 819, 824, 837, 866, 874], "meet": [811, 817, 837], "qualiti": [811, 816], "wizard": [811, 874], "impact": [811, 824, 840, 849, 868], "inspector": [811, 874], "acknowledg": [811, 817], "honour": 811, "dilig": 811, "bronz": [811, 817, 874], "silver": [811, 817, 874], "gold": [811, 817, 851, 874], "expertis": [811, 817, 868], "assist": [812, 830], "runtimeerror": [812, 830], "logaddexp2_cpu": [812, 830], "falsifi": [812, 819, 830, 840], "test_logaddexp2": [812, 830], "backend_fw": [812, 830, 838], "dtype_and_x": [812, 830, 838, 840], "reproduce_failur": [812, 819, 830, 834, 840], "axicy2bkaamobaar2waaaacvaai": [812, 830], "decoartor": [812, 830], "with_unsupported_dtyp": [812, 825, 830, 837], "25830078125": [812, 830], "258544921875": [812, 830], "test_acosh": [812, 830], "axicy2baabyqwqgiaabdaai": [812, 830], "quit": [812, 816, 820, 827, 828, 830, 833, 834, 840, 843, 866, 872], "41421356": [812, 830], "41421356e": [812, 830], "34078079e": [812, 830], "154": [812, 830], "test_ab": [812, 815, 830, 840], "000j": [812, 830], "154j": [812, 830], "axicy2zkyaiibibgziaaxqhexsaab7juqaaamteazq": [812, 830], "thread": [812, 814, 815, 816, 819, 820, 821, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 843, 848, 866], "pycharm": [812, 838, 840], "few": [813, 814, 816, 823, 825, 826, 832, 833, 835, 836, 838, 840, 843, 845, 846, 847, 848, 849, 857, 866, 868], "steep": 813, "curv": 813, "realpython": 813, "pyn": 813, "exchang": [813, 856, 862, 864], "pilot": [813, 852], "stuck": [813, 814], "spell": 813, "sound": [813, 824, 844], "frequent": [814, 816, 821, 866], "outlin": [814, 815, 816, 818, 823, 825, 828, 833, 836, 837, 840], "broad": [814, 868], "individu": [814, 816, 819, 821, 825, 833, 837, 866, 869, 872, 873], "clearli": [814, 816, 827, 838, 840, 856, 870], "straightforward": [814, 817, 848], "lie": 814, "urgent": 814, "encourag": [814, 817, 831, 851, 856], "tackl": [814, 817, 837], "challeng": [814, 821, 872], "categoris": [814, 819, 837], "comfort": [814, 815, 829], "linkag": 814, "pr": [814, 816, 817, 819, 831, 837, 838, 840], "confid": 814, "submit": [814, 831], "scipi": [814, 856, 868, 873], "mindspor": 814, "simpler": [814, 816, 831, 859, 867, 873], "member": [814, 816, 837, 852, 856], "comment": [814, 815, 816, 819, 825, 831, 837, 839, 843], "composition": 814, "feasibl": [814, 824, 840, 856, 859], "pend": 814, "helpfulli": [814, 843, 864], "problemat": [814, 815], "unimpl": 814, "issue_link": 814, "alias_nam": 814, "notic": [814, 820, 824, 830, 831, 840, 843, 859], "push": [814, 816, 817, 819, 838, 840, 872], "liner": 814, "meanwhil": [814, 824], "reselect": 814, "faithfulli": 814, "creation_routin": [814, 838], "indexing_routin": 814, "ma": 814, "manipulation_routin": 814, "mathematical_funct": [814, 837], "sorting_searching_count": 814, "ufunc": [814, 837], "matrix_and_vector_product": 814, "matrix_eigenvalu": 814, "norms_and_other_numb": 814, "solving_equations_and_inverting_matric": 814, "gleam": 814, "uncom": 814, "test_numpy_inn": 814, "test_frontend": [814, 824, 830, 838], "unsur": [814, 840], "statu": [814, 817, 824, 831, 857], "refrain": 814, "checkbox": [814, 815], "aforement": 814, "parent": [814, 824, 847], "arraywithelementwis": [814, 820, 847], "containerwithmanipul": 814, "thorough": [814, 828, 832, 840], "add_reformatting_checklist_": 814, "category_nam": [814, 825, 826, 828, 832, 833], "autom": [814, 824, 831, 840, 853, 868], "bot": [814, 831], "markdown": [814, 822], "patient": [814, 815], "elabor": 814, "struggl": 814, "assigne": 814, "status": 814, "central": [814, 831, 843, 856, 872], "analyz": [814, 853], "relevant_submodul": 814, "roadmap": [814, 824], "soon": [814, 816, 824, 825, 851, 859], "deem": [814, 837], "subtask": 814, "clearer": [814, 829, 838, 848], "backend_nam": [814, 821, 825, 826, 828, 832, 833, 834], "sometim": [814, 815, 816, 819, 825, 833, 837, 840, 843], "rare": [814, 826, 851, 871], "button": [814, 815, 816, 830], "centr": 814, "predetermin": 814, "superset": [814, 818, 833, 836, 851], "reserv": 814, "happi": [815, 830, 851, 857], "your_usernam": [815, 830], "your_fold": [815, 830], "enter": [815, 816, 820, 825, 826, 830, 832, 834], "sync": [815, 819, 830], "remot": [815, 819, 830, 831], "nutshel": [815, 832], "hook": [815, 831, 839], "lint": [815, 818], "succe": [815, 859], "whatev": [815, 823, 851], "elig": [815, 817], "student": 815, "licens": [815, 869], "remind": 815, "expir": 815, "won": [815, 816, 823, 825, 850, 852, 856, 857, 859, 860, 861], "profession": 815, "trial": 815, "jetbrain": 815, "month": [815, 855], "bui": [815, 872], "paid": 815, "rapid": [815, 855, 856, 866], "pace": 815, "person": [815, 816], "abil": [815, 843, 846, 851, 866], "perhap": [815, 847, 848, 849, 851, 872], "conda": [815, 856, 868], "ivy_dev": [815, 816], "icon": [815, 816, 830], "panel": 815, "vscode": [815, 830], "palett": 815, "ctrl": [815, 816], "mac": [815, 816], "intel": [815, 856, 864, 871], "m1": 815, "optional_apple_silicon_1": 815, "optional_apple_silicon_2": 815, "array_api_test": [815, 816, 819, 830], "test_array_api": [815, 816, 819, 830, 840], "suit": [815, 818, 819, 824, 830, 839, 840, 848, 856, 866, 872], "cmd": 815, "bat": [815, 816], "virtualenv": 815, "tick": [815, 816, 824], "nz2": 815, "openssl": 815, "libssl1": 815, "1_1": 815, "1f": 815, "1ubuntu2": 815, "20_amd64": 815, "deb": 815, "dpkg": 815, "mitig": [815, 872], "desktop": [815, 830], "powershel": 815, "admin": 815, "deploy": [815, 860, 865, 868, 869, 872, 873], "menu": [815, 830], "introspect": 815, "dialog": 815, "persist": 815, "earlier": [815, 816, 825, 841], "virtualis": 815, "bio": [815, 856], "dropdown": [815, 824], "dockerfil": 815, "ca": 815, "certif": 815, "gnupg": 815, "lsb": 815, "keyr": 815, "fssl": 815, "gpg": 815, "dearmor": 815, "echo": [815, 824, 852], "arch": 815, "lsb_releas": 815, "null": [815, 830], "ce": 815, "cli": 815, "containerd": 815, "systemctl": 815, "softwar": [815, 816, 855, 856, 864, 869, 870, 871], "press": [815, 816, 848], "4a": 815, "socket": 815, "rwx": 815, "sock": 815, "pid": 815, "editor": 815, "pytest": [815, 816, 819, 824, 830, 834, 840], "keyboard": 815, "screenshot": 815, "pop": [815, 830, 856], "test_elementwis": 815, "bar": [815, 830], "shell": [815, 816, 819, 824], "setup_test": 815, "run_ivy_core_test": 815, "run_ivy_nn_test": 815, "run_ivy_stateful_test": 815, "run_test": [815, 824], "test_depend": 815, "test_ivy_cor": 815, "test_ivy_nn": 815, "test_ivy_st": 815, "unix": 815, "test_": [815, 838], "test_cor": [815, 816, 838], "offici": [815, 825, 845], "wish": [815, 837], "ivy_nn": 815, "ivy_st": 815, "header": [815, 816, 839], "arrow": 815, "test_stat": 815, "test_submodule_nam": 815, "test_function_nam": 815, "debugg": 815, "studio": [815, 830, 840], "especi": [815, 821, 831, 855, 866], "afterward": [815, 848], "background": [815, 822, 830, 866, 868], "overlap": [815, 824, 830, 841, 843, 867], "test_file_path": [815, 830], "test_fn_nam": [815, 830], "engin": [815, 866, 868, 869], "devcontain": 815, "comma": 815, "postcreatecommand": 815, "post_create_command": 815, "poststartcommand": 815, "safe": [815, 837], "containerworkspacefold": 815, "reopen": 815, "test_fle_path": 815, "slash": 815, "isol": [815, 816, 867, 872], "container": 815, "intens": 815, "headach": 815, "arm": [815, 816], "vm": [815, 824], "azur": 815, "cloud": [815, 824, 868], "theme": [815, 822], "ipad": 815, "browser": [815, 822], "quota": 815, "requisit": 815, "pane": [815, 816, 824], "dockerfilegpu": 815, "ivv": 815, "multiv": 815, "multivers": [815, 841], "dockerfilemultivers": 815, "dockerhub": 815, "upto": [815, 816], "minut": [815, 824], "launch": 815, "quickli": [815, 816, 824, 848, 849, 855, 857, 866, 873], "kindli": [815, 839], "guidelin": 815, "colour": 815, "chanc": 815, "troubleshoot": 815, "ever": 815, "flask": [815, 830], "toolbar": [815, 816, 830], "_array_modul": [815, 819, 830], "refresh": [815, 830], "pytestarg": [815, 830], "unittesten": [815, 830], "pytesten": [815, 830], "autotestdiscoveronsaveen": [815, 830], "conftest": 815, "serv": [815, 816, 820, 823, 832, 833, 837, 838, 840, 843, 844, 853, 864], "aren": [815, 825], "available_config": 815, "cp310": 815, "x86": [815, 871], "newer": [815, 840], "_compil": 815, "meantim": 815, "suffici": [815, 827, 837, 840], "bear": [815, 820, 823, 825, 837], "tendenc": 816, "land": 816, "unrel": [816, 856], "fly": [816, 866], "internship": 816, "suspect": 816, "iii": 816, "issue_numb": 816, "12345": 816, "rememb": 816, "respond": 816, "dai": [816, 831], "freed": 816, "situat": [816, 824, 850], "obvious": [816, 824], "hypothet": 816, "frustrat": 816, "delai": [816, 859], "busi": 816, "inact": 816, "unfairli": 816, "investig": 816, "name_of_your_branch": 816, "date": [816, 819], "complic": [816, 838, 845], "merge_with_upstream": 816, "abort": 816, "tediou": [816, 827, 843], "stash": [816, 831], "reinstat": 816, "uncommit": 816, "unstag": [816, 831], "untrack": 816, "atlassian": 816, "wrote": 816, "piec": [816, 820, 833, 834, 845, 859, 862, 864], "blame": 816, "eg": 816, "week": [816, 857], "grep": 816, "commit_id": 816, "handi": 816, "histori": 816, "highlight": [816, 824, 827, 837, 839], "approv": 816, "someon": [816, 851], "hash": [816, 848], "cancel": 816, "speedup": 816, "unavail": 816, "tickbox": 816, "span": [816, 864, 872], "intent": [816, 836], "discourag": 816, "adopt": [816, 820, 832, 843, 856, 865, 866, 871], "philosophi": 816, "infrequ": 816, "earli": [816, 866], "wast": [816, 824], "spot": [816, 827, 833], "mistak": 816, "mountain": 816, "advoc": [816, 851], "session": [816, 866], "beauti": 816, "particularli": [816, 848, 851, 859, 864], "care": [816, 826, 837, 843, 850, 856], "undo": 816, "stress": 816, "nifti": 816, "reassur": 816, "local_path_to_ivi": 816, "subfold": [816, 838, 840, 841], "dep": 816, "fresh": 816, "arsen": 816, "exec": 816, "ivy_contain": 816, "test_imag": 816, "test_random_crop": 816, "test_creation_funct": 816, "test_arang": 816, "cursor": 816, "alt": 816, "blog": 816, "breakpoint": 816, "gutter": 816, "caret": 816, "f8": 816, "f9": 816, "Into": 816, "f7": 816, "smart": 816, "fragment": [816, 862, 864, 868], "wherein": [816, 833, 840], "failur": [816, 824, 838, 840], "embark": 817, "innov": [817, 856], "door": [817, 851], "elev": 817, "mission": [817, 856, 868], "opportun": 817, "testament": [817, 839], "stone": 817, "gift": 817, "acquir": 817, "peak": 817, "privileg": [817, 868], "bounti": 817, "cash": 817, "delight": 817, "weed": [818, 844], "tour": 818, "formatt": [818, 831], "conjunct": 819, "establish": [819, 868], "popular": [819, 866], "sens": [819, 825, 827, 837, 839, 847], "unconnect": 819, "initialis": [819, 837, 840], "strang": [819, 847], "test_linalg": [819, 838], "test_set_funct": 819, "test_signatur": 819, "excess": [819, 821, 827], "array_modul": 819, "vv": 819, "test_manipulation_funct": 819, "test_concat": [819, 840], "nb": 819, "liber": 819, "______________________": 819, "test_remaind": 819, "_______________________": 819, "test_operators_and_elementwise_funct": 819, "1264": 819, "1277": 819, "binary_param_assert_against_refimpl": 819, "ctx": 819, "620": 819, "binary_assert_against_refimpl": 819, "324": 819, "scalar_o": 819, "17304064": 819, "binaryparamcontext": 819, "axic42baaowcnp": 819, "rumwmabaear0": 819, "make_binary_param": 819, "numeric_dtyp": 819, "left_strat": 819, "left_sym": 819, "right_strat": 819, "right_sym": 819, "right_is_scalar": 819, "binary_param_assert_dtyp": 819, "binary_param_assert_shap": 819, "recreat": 819, "unexpectedli": 819, "discrep": [819, 838], "test_asarray_arrai": 819, "test_floor_divid": 819, "health": 819, "test_iop": 819, "__imod__": 819, "isequ": 819, "test_matrix_norm": 819, "alter": 819, "tweak": 819, "array_api_methods_to_test": 819, "test_special_cas": 819, "__ipow__": 819, "is_integ": 819, "easier": [819, 820, 821, 825, 838, 841, 853, 866, 868], "revisit": [819, 832], "_data": [820, 836, 837, 847], "organiz": [820, 823, 837], "underpin": [820, 823, 845], "programmat": [820, 823, 867], "backup": [820, 822, 823], "accident": [820, 823, 837], "absent": [820, 823], "auto": [820, 822, 823, 831, 848], "__mul__": [820, 823, 827, 832, 843, 847], "throw": [820, 825, 826, 829, 830, 847, 866], "imposs": 820, "inputs_to_native_arrai": [820, 833, 834], "outputs_to_ivy_arrai": [820, 825, 826, 832, 833, 834], "secondli": [820, 825], "__ivy_array_function__": 820, "inspir": 820, "__torch_function__": 820, "myarrai": 820, "handled_funct": 820, "notimpl": 820, "issubclass": 820, "enough": [820, 824, 825, 826, 840, 847, 848, 849], "ivy_funct": 820, "my_ab": 820, "my_arrai": 820, "implicit_backend": [821, 845], "__dict__": [821, 836, 845], "ivy_original_dict": [821, 845], "fallback": 821, "live": [821, 822, 825, 856, 857, 862, 864], "scope": [821, 867, 871], "dlpack": 821, "set_dynamic_backend": 821, "unset_dynamic_backend": 821, "dynamic_backend_a": 821, "set_": 821, "unset_": 821, "backend_handl": 821, "requires_grad": 821, "memory_format": 821, "preserve_format": 821, "weren": 821, "vast": [821, 825, 866], "minor": [821, 843, 851], "fn_name_v_1p12_and_abov": 821, "fn_name_v_1p01_to_1p1": 821, "heavili": [822, 834, 851], "characterist": 822, "conf": 822, "cleanup": 822, "readm": [822, 851], "maxdepth": 822, "caption": 822, "related_work": 822, "deep_div": 822, "faq": 822, "glossari": 822, "autosummari": 822, "top_functional_toc": 822, "restructuredtext": 822, "discov": [822, 825], "ivy_toctree_caption_map": 822, "unfortun": [822, 831], "linker": 822, "foo": 822, "discussion_channel_map": 822, "1000043690254946374": 822, "1000043749088436315": 822, "forum": [822, 852], "seri": [822, 825, 837, 840, 866, 868], "discussion_paragraph": 822, "discord_link": 822, "channel_link": 822, "gg": 822, "zvqdvbznqj": 822, "799879767196958751": 822, "channel_id": 822, "autoskippablemethod": 822, "skippable_method_attribut": 822, "__qualname__": 822, "autodoc": 822, "__doc__": 822, "autoivydata": 822, "mutual": [823, 833], "containerwithelementwis": 823, "__repr__": 823, "__getattr__": [823, 859], "__setattr__": [823, 859], "__contains__": 823, "__getstate__": 823, "__setstate__": 823, "unpickl": 823, "num_dim": [823, 850], "restrict": [823, 824, 837, 845, 859, 863], "enforc": [823, 847], "lefthand": 823, "righthand": 823, "handle_nest": [823, 832, 833, 834, 845], "absenc": [823, 832, 866], "implicitli": [823, 835, 840, 845], "log_pr": [823, 833, 836], "intuit": [823, 840, 848, 849, 862], "chronolog": 823, "concurr": [823, 824, 833, 866], "despit": [823, 825, 826, 838, 845, 856, 863, 866], "__list__": 823, "whatsoev": [823, 833, 853, 872], "children": 823, "shallowest": 823, "deepest": 823, "rollback": 824, "incorpor": [824, 838, 848, 866], "techniqu": 824, "triplet": 824, "test_torch": [824, 838], "test_tensor": [824, 838], "test_torch_instance_arctan_": 824, "12500": 824, "daili": 824, "huge": [824, 848, 854, 856, 866, 872], "shoot": 824, "_reduce_loss": [824, 833, 836], "test_nn": 824, "test_loss": 824, "test_binary_cross_entropy_with_logit": 824, "test_cross_entropi": 824, "test_binary_cross_entropi": 824, "test_sparse_cross_entropi": 824, "test_loss_funct": 824, "test_torch_binary_cross_entropi": 824, "test_torch_cross_entropi": 824, "binary_cross_entropy_with_logit": 824, "torch_binary_cross_entropi": 824, "torch_cross_entropi": 824, "magic": 824, "readthedoc": 824, "pedagog": 824, "f_1": 824, "t_1": 824, "t_3": 824, "t_7": 824, "t_": 824, "f_m": 824, "cyclic": 824, "intellig": [824, 840, 868], "tests_fil": 824, "file_nam": [824, 840, 841], "tests_lin": 824, "correspondingli": 824, "tests_to_run": 824, "determine_tests_lin": 824, "mongodb": 824, "databas": [824, 840], "mechan": [824, 851], "secret": 824, "db": 824, "ssh_deploy_kei": 824, "suffic": [824, 834, 840], "massiv": 824, "yml": 824, "felicit": 824, "clone_map": 824, "deploy_kei": 824, "user_email": 824, "user_nam": 824, "target_branch": 824, "github_serv": 824, "deploy_key_fil": 824, "ssh_known_hosts_fil": 824, "known_host": 824, "keyscan": 824, "git_ssh_command": 824, "userknownhostsfil": 824, "email": [824, 856], "methodologi": 824, "master1": 824, "restructur": 824, "_map": 824, "t_2": 824, "t_n": 824, "index_map": 824, "test_map": 824, "snowbal": 824, "recalibr": 824, "workflow_dispatch": 824, "cron": 824, "saturdai": 824, "night": 824, "pm": 824, "gut": 824, "lesser": [824, 829], "lol": 824, "hour": [824, 857], "cater": [824, 839], "master2": 824, "master32": 824, "synchron": 824, "runner2": 824, "corrupt": 824, "decoupl": [824, 849], "150": 824, "cycl": [824, 840], "yellow": 824, "queu": 824, "redirect": 824, "book": 824, "onrend": 824, "jo": 824, "ran": 824, "clickabl": 824, "all_dtyp": 825, "all_numeric_dtyp": 825, "all_int_dtyp": 825, "all_float_dtyp": 825, "replic": [825, 835, 836, 837], "thirdli": 825, "native_float32": 825, "importantli": [825, 847, 850], "arguabl": [825, 826, 837], "jaxarrai": [825, 826, 829, 832, 836, 841, 845], "_handle_0_dim_output": 825, "subtli": [825, 836], "promote_types_frontend_nam": 825, "promote_types_of_frontend_name_input": 825, "frontend_nam": 825, "upcast": 825, "nearli": [825, 832, 834, 866], "downcast": 825, "footprint": 825, "concret": 825, "aris": [825, 831, 851, 856], "utterli": 825, "meant": [825, 827, 836], "twice": 825, "disadvantag": 825, "relax": 825, "f64": 825, "unwant": 825, "primaci": 825, "resembl": 825, "compound": 825, "infer_dtyp": [825, 826, 832, 834], "settabl": [825, 826], "handle_out_argu": [825, 826, 832, 833, 834, 836, 845], "infer_devic": [825, 826, 832, 834], "deleg": [825, 873], "shape_to_tupl": 825, "with_supported_dtyp": 825, "unment": 825, "_cast_for_unary_op": [825, 833, 836], "target_typ": 825, "syntax": [825, 855, 856, 866], "unsupported_dtyp": 825, "supported_dtypes_and_devic": 825, "with_unsupported_device_and_dtyp": 825, "globals_getter_func": 825, "f2": 825, "lack": [825, 836, 866, 873], "mandat": [825, 836, 840, 841, 856], "confus": [825, 829, 836, 843, 853, 857], "inconsist": [825, 829, 835], "is_nan": 825, "supported_dtyp": 825, "anytim": 825, "84530": 825, "unwarr": 825, "risk": [825, 872], "needlessli": 825, "bloat": 825, "undergo": [825, 851], "unsupported_devic": 825, "supported_devic": 825, "downsid": 825, "coverag": [825, 840], "undesir": 825, "accomplish": 825, "upcast_data_typ": 825, "downcast_data_typ": 825, "crosscast_data_typ": 825, "cast_data_typ": 825, "downcast_data_dtyp": 825, "vice": 825, "versa": 825, "till": 825, "crosscast": 825, "exmp1": 825, "watch": [825, 837], "handle_numpy_arrays_in_specific_backend": [825, 832], "cate": 825, "understood": 825, "consumpt": [825, 870], "dual": 826, "categor": [826, 833, 837], "210": 826, "_handle_except": [826, 829], "1013": 826, "_handle_nest": [826, 829], "905": 826, "_handle_out_argu": [826, 829], "441": 826, "_inputs_to_native_arrai": [826, 829], "new_arg": [826, 829], "new_kwarg": [826, 829], "_outputs_to_ivy_arrai": [826, 829], "358": 826, "_handle_array_funct": [826, 829], "_handle_device_shift": 826, "handle_device_shift": [826, 834], "crucial": [826, 835], "device_shifting_dev": 826, "__enter__": 826, "__exit__": 826, "mostli": [826, 836, 840], "soft_devic": 826, "eight": [827, 844], "op_nam": 827, "__r": 827, "unsurprisingli": [827, 855], "recap": [827, 849], "combinatori": 827, "okai": [827, 843, 845], "spec": [827, 828], "my_func": [827, 841], "some_flag": 827, "another_flag": 827, "jointli": 827, "5574077": 827, "1850398": 827, "5463025": 827, "8422884": 827, "91601413": 827, "9647598": 827, "3738229": 827, "1597457": 827, "0963247": 827, "9955841": 827, "3278579": 827, "asid": 827, "increasingli": [827, 859], "14254655": 827, "1578213": 827, "380515": 827, "trivial": [827, 836], "failing_fn_nam": 827, "onlin": [827, 828], "minutest": 827, "fault": [827, 866], "contrast": [828, 832, 837, 872], "preview": 828, "incorrectli": [828, 859], "needless": [828, 838], "renam": [828, 837], "judgment": 828, "operator_nam": 828, "succinct": 828, "docst": 828, "native_error": 829, "_combine_messag": 829, "truli": [829, 847], "wrong": [829, 831, 834, 837, 843], "198": 829, "392": 829, "_handle_array_like_without_promot": 829, "805": 829, "432": 829, "349": 829, "other_test": 829, "523": 829, "_handle_numpy_out": 829, "396": [829, 849], "_outputs_to_numpy_arrai": 829, "_inputs_to_ivy_arrays_np": 829, "ivy_arg": 829, "ivy_kwarg": 829, "453": 829, "_from_zero_dim_arrays_to_scalar": 829, "truth_value_test": 829, "visibl": 829, "unwieldi": 829, "squash": 829, "hide": [829, 859], "cleaner": [829, 848], "caught": [829, 831], "rethrow": 829, "_print_traceback_histori": 829, "error_stack": 829, "axiserror": 829, "polici": [829, 834, 840, 842], "moreov": 829, "submoodul": 830, "test_jax_transpos": 830, "manipulaiton": 830, "test_jax": [830, 838], "test_numpi": [830, 838], "test_manipul": [830, 838, 840], "preconditionnotmet": 830, "densetensor": 830, "holder_": 830, "phi": 830, "dense_tensor_impl": 830, "array_and_ax": 830, "aaegbaegaqaaaaaaaaaaaaab": 830, "black": 831, "flake8": 831, "linter": 831, "autoflak": 831, "docformatt": 831, "pydocstyl": 831, "yaml": 831, "patch1687898304": 831, "8072": 831, "3516aed563": 831, "reformat": 831, "akshai": 831, "jain": 831, "gui": 831, "cryptic": 831, "garden": 831, "utc": 831, "didn": 831, "human": 831, "intervent": 831, "typo": 831, "ui": 831, "handle_array_like_without_promot": [832, 834], "to_native_arrays_and_back": [832, 834, 845], "handle_array_funct": [832, 834], "inputs_to_native_shap": [832, 834], "rational": [832, 836, 843], "__div__": [832, 843], "484": 832, "annot": 832, "brittl": 832, "freeli": 832, "inde": [832, 843, 851, 864], "technic": [832, 836, 851, 866, 868], "original_typ": 832, "cumbersom": 832, "hinder": [832, 855], "venn": 833, "diagram": [833, 872], "light": [833, 841, 851, 853, 867, 872], "maximis": 833, "encompass": 833, "partial_mixed_handl": [833, 834, 843], "handle_partial_mixed_funct": [833, 834, 843], "fn_decor": 833, "mixed_backend_wrapp": [833, 836], "to_add": 833, "to_skip": 833, "inputs_to_ivy_arrai": [833, 834], "modif": [833, 866], "briefli": [833, 840, 848], "get_all_arrays_on_dev": 833, "outputs_to_ivy_shap": 834, "outputs_to_native_arrai": 834, "handle_view_index": [834, 836], "handle_view": [834, 836], "handle_rag": 834, "handle_backend_invalid": 834, "handle_nan": 834, "to_native_shapes_and_back": 834, "modern": [835, 855, 856, 871], "inter_func": 835, "custom_grad_fn": 835, "args1": 835, "eas": [835, 866], "speak": 836, "val_n": 836, "base_idx": 836, "_manipulation_stack": 836, "base_flat": 836, "_view_ref": 836, "_update_view": 836, "contigu": 836, "c_contigu": 836, "ascontiguousarrai": 836, "copyto": 836, "_is_vari": 836, "tensor_scatter_nd_upd": 836, "is_vari": 836, "_update_torch_view": 836, "predominantli": [836, 841], "support_native_out": [836, 845], "_scalar_output_to_0d_arrai": 836, "_wrap_fn": 836, "dim0": 836, "dim1": 836, "res_floor": 836, "extent": [836, 837], "to_out_fn": 836, "add_wrapp": 836, "paradigm": [836, 851, 866], "expans": 836, "brief": [836, 840], "weak": 836, "_torch_bas": 836, "_torch_view_ref": 836, "_torch_manipul": 836, "weakli": 836, "adequ": 836, "tf_frontend": 837, "lax": [837, 838, 843, 850, 851], "torch_frontend": [837, 838], "numpy_frontend": 837, "jax_frontend": 837, "to_ivy_arrays_and_back": [837, 838], "fidel": 837, "algebra": [837, 864, 865, 866, 869, 873], "dynamic": 837, "mimic": 837, "arithmetic_oper": 837, "handle_numpy_out": 837, "handle_numpy_dtyp": 837, "handle_numpy_cast": 837, "from_zero_dim_arrays_to_scalar": 837, "_add": 837, "same_kind": 837, "subok": [837, 838, 843], "promote_types_of_numpy_input": 837, "underscor": 837, "unhandl": 837, "trigonometric_funct": 837, "_tan": 837, "check_tensorflow_cast": 837, "raw_op": [837, 838], "map_raw_ops_alia": 837, "output_typ": 837, "kwargs_to_upd": 837, "pointwise_op": 837, "sensibl": 837, "ahead": [837, 841, 866], "reduce_logsumexp": 837, "logsumexp": 837, "trick": 837, "max_input_tensor": 837, "preferred_element_typ": 837, "languag": [837, 845, 853, 855, 857, 864, 867, 869, 870, 871, 872], "offer": [837, 849, 857, 866, 872, 873], "finer": 837, "logicaland": 837, "np_frontend": 837, "_ivy_arrai": 837, "radd": 837, "_init_data": 837, "_process_str_data": 837, "_dtype": [837, 838, 847], "_shape": [837, 847], "govern": 837, "promote_types_of_": 837, "_input": 837, "promote_types_of_torch_input": [837, 838], "handle_numpy_casting_speci": 837, "new_fn": 837, "equiv": 837, "unsaf": 837, "array_type_test": 837, "_isfinit": 837, "organis": 837, "grasp": 837, "youtub": 837, "knowledg": 838, "np_frontend_help": 838, "open_task": 838, "test_lax": 838, "test_oper": 838, "test_jax_tan": 838, "test_mathematical_funct": 838, "test_trigonometric_funct": 838, "dtypes_values_cast": 838, "dtypes_values_casting_dtyp": 838, "arr_func": 838, "get_num_positional_args_ufunc": 838, "test_numpy_tan": 838, "handle_where_and_array_bool": 838, "test_tensorflow": 838, "test_math": 838, "test_tensorflow_tan": 838, "test_pointwise_op": 838, "test_torch_tan": 838, "_fill_valu": 838, "test_glob": 838, "test_jax_ful": 838, "test_from_shape_or_valu": 838, "_input_fill_and_dtyp": 838, "dtype_and_input": 838, "dtype_to_cast": 838, "input_fill_dtyp": 838, "test_numpy_ful": 838, "test_raw_op": 838, "test_tensorflow_fil": 838, "test_creation_op": 838, "with_arrai": 838, "test_torch_ful": 838, "add_nois": 838, "all_clos": 838, "_get_dtype_and_matrix": 838, "test_torch_qr": 838, "frontend_q": 838, "frontend_r": 838, "walkthrough": 838, "comparison_op": 838, "test_comparison_op": 838, "test_torch_great": 838, "all_alias": 838, "test_ndarrai": 838, "test_numpy_instance_add__": 838, "test_tensorflow_instance_add": 838, "1e04": 838, "allow_infin": 838, "test_torch_instance_add": 838, "_arrays_idx_n_dtyp": 838, "surprisingli": 838, "closest_relevant_group": 838, "strive": [838, 840, 843, 851, 868], "craft": [839, 840], "tailor": 839, "clariti": [839, 840, 843, 866], "weav": 839, "thrill": 839, "brim": 839, "stand": [839, 840], "landscap": 839, "forese": 839, "refin": 839, "inquiri": 839, "fixtur": 840, "hit": [840, 845, 859], "eleg": [840, 866], "unexplor": 840, "artifact": 840, "bespok": 840, "_array_or_typ": 840, "rigor": [840, 855], "test_default_int_dtyp": 840, "print_hypothesis_exampl": 840, "custom_strategi": 840, "randomis": 840, "simplist": 840, "intricaci": 840, "glanc": 840, "one_of": 840, "datum": 840, "pipe": 840, "array_or_scal": 840, "len_of_arrai": 840, "test_add": 840, "test_gpu_is_avail": 840, "pretest": 840, "snippet": [840, 860], "outlier": 840, "frontend_test": 840, "frontend_method": 840, "criterion": 840, "valid_ax": 840, "hoc": 840, "11228": 840, "268": 840, "wherev": 840, "9622": 840, "28136": 840, "6375": 840, "12720": 840, "21354": 840, "900e": 840, "57384": 840, "25687": 840, "248": 840, "test_devic": 840, "array_shap": 840, "test_lay": 840, "some_sequ": 840, "arrays_valu": 840, "36418": 840, "213": 840, "21716926": 840, "none_or_list_of_float": 840, "get_prob": 840, "103515625e": 840, "099609375": 840, "probabilist": 840, "number_positional_argu": 840, "unreproduc": 840, "x_and_linear": 840, "is_torch_backend": 840, "x_shape": [840, 845], "weight_shap": 840, "bias_shap": 840, "ivy_np": 840, "valid_float_dtyp": 840, "test_demo": 840, "failing_test": 840, "traceback": 840, "shrink": 840, "prescrib": 840, "scratch": 840, "therebi": 840, "test_gelu": 840, "test_fil": 840, "phase": [840, 851, 866], "notabl": [840, 866], "max_exampl": 840, "deadlin": 840, "weird": 840, "systemat": 840, "safeguard": 840, "inabl": 840, "test_result_typ": 840, "9090909090909091": 840, "judgement": 841, "some_namespac": 841, "some_backend": 841, "another_backend": 841, "refactor": 841, "ongo": 841, "check_fill_value_and_dtype_are_compat": 841, "_to_devic": 841, "shouldn": [841, 859], "pin": 841, "unpinn": 841, "culmin": 841, "unsett": 842, "array_significant_figur": 842, "array_decimal_valu": 842, "warning_level": 842, "nan_polici": 842, "stablest": 842, "constantli": [843, 855], "answer": [843, 847, 851], "contradict": 843, "entail": 843, "sacrif": 843, "jacfwd": 843, "jacrev": 843, "banner": 843, "expens": 843, "incredibli": [843, 848, 851, 869], "price": 843, "pai": 843, "intrus": 843, "x_beta": 843, "equip": 843, "simplif": 843, "allevi": 843, "ineffici": [843, 851, 866], "fuse": 843, "hybrid": 843, "workaround": 843, "slip": 843, "radar": 843, "stumbl": 843, "gone": [844, 856], "fulfil": 844, "syntact": [845, 850], "power_seq": 845, "_determine_backend_from_arg": 845, "importlib": 845, "_backend_dict": 845, "x_flat": 845, "wi": 845, "wi_x": 845, "wii_x": 845, "wif_x": 845, "wig_x": 845, "wio_x": 845, "wh": 845, "ht": 845, "ct": 845, "hts_list": 845, "wii_xt": 845, "wif_xt": 845, "wig_xt": 845, "wio_xt": 845, "htm1": 845, "ctm1": 845, "wh_htm1": 845, "whi_htm1": 845, "whf_htm1": 845, "whg_htm1": 845, "who_htm1": 845, "ft": 845, "ot": 845, "reliabl": 845, "scalabl": [845, 855, 871, 872], "sacrific": 845, "hear": 845, "virtu": [845, 863], "pure_ivi": 845, "pure_torch": 845, "unclean": 845, "wx": 845, "temp": 845, "ivy_func": 845, "emphas": 845, "example_input": 845, "static_argnum": [845, 859], "static_argnam": [845, 859], "primit": [846, 851, 864, 866], "upcom": 846, "hierarch": [846, 848, 849, 866], "arraywithactiv": 847, "arraywithcr": 847, "arraywithdatatyp": 847, "arraywithdevic": 847, "arraywithgener": 847, "arraywithgradi": 847, "arraywithimag": 847, "arraywithlay": 847, "arraywithlinearalgebra": 847, "arraywithloss": 847, "arraywithmanipul": 847, "arraywithnorm": 847, "arraywithrandom": 847, "arraywithsearch": 847, "arraywithset": 847, "arraywithsort": 847, "arraywithstatist": 847, "arraywithutil": 847, "_init": 847, "_size": 847, "_devic": 847, "_dev_str": 847, "_pre_repr": 847, "_post_repr": 847, "framework_str": 847, "pypep8nam": 847, "immut": 847, "claim": 847, "_native_wrapp": 847, "genuin": 847, "some_method": 847, "rewritten": 847, "littl": [847, 855, 868], "wonder": [847, 855, 857], "compartment": 847, "newshap": 847, "new_shap": 847, "tidi": 847, "crystal": 847, "ton": 848, "ado": [848, 849], "soup": 848, "walk": [848, 849], "cnt": 848, "3333335": 848, "autocomplet": 848, "midwai": 848, "agent": 848, "total_spe": 848, "total_height": 848, "total_width": 848, "ag": 848, "tot": 848, "total_": 848, "total_h": 848, "cnt0": 848, "cnt1": 848, "diff_0": 848, "diff_1": 848, "config0": 848, "config1": 848, "l0": 848, "decoder__l0": 848, "decoder__l1": 848, "encoder__l0": 848, "encoder__l1": 848, "l0__b": 848, "l0__w": 848, "l1__b": 848, "l1__w": 848, "printabl": 848, "foresight": 848, "untidili": 848, "update_ag": 848, "normalize_img": 848, "img_max": 848, "reduce_max": 848, "img_min": 848, "reduce_min": 848, "img_rang": 848, "agent_posit": 848, "agent_veloc": 848, "agent_cam_front_rgb": 848, "agent_cam_front_depth": 848, "agent_cam_rear_rgb": 848, "agent_cam_rear_depth": 848, "agent_cam_lidar": 848, "camera": 848, "front_rgb": 848, "front_depth": 848, "rear_rgb": 848, "rear_depth": 848, "lidar": 848, "rgb": 848, "rear": 848, "veloc": 848, "cam": 848, "cam_max": 848, "cam_min": 848, "cam_rang": 848, "five": 848, "allud": [848, 856], "perman": 848, "dataload": 848, "_cnt": 848, "img_": 848, "_dataset_s": 848, "_batch_siz": 848, "_count": [848, 849], "__next__": 848, "img_fnam": 848, "loaded_img": 848, "batch_slic": 848, "0145": 848, "addbackward0": 848, "_create_vari": 849, "_input_channel": 849, "_output_channel": 849, "_w_shape": 849, "_b_shape": 849, "_with_bia": 849, "764": 849, "872": 849, "211": 849, "439": 849, "nightmar": 849, "overcom": 849, "v1": 849, "key0": 849, "linear3": 849, "v2": 849, "preced": [849, 856], "_w_init": 849, "_b_init": 849, "misnom": 849, "saw": 849, "_beta1": 849, "_beta2": 849, "_epsilon": 849, "_mw": 849, "_vw": 849, "_first_pass": 849, "_should_trac": 849, "new_v": 849, "_lr": 849, "_inplac": 849, "_stop_gradi": 849, "sparse_funct": 850, "vital": [850, 855], "_linear": 850, "jax_graph": 850, "to_backend": 850, "thinli": 850, "to_haiku_modul": 850, "loss_fn_t": 850, "without_apply_rng": 850, "update_rul": 850, "tree_multimap": 850, "trax": [850, 857], "objax": [850, 857], "matur": [851, 856, 866], "doubt": 851, "grate": [851, 874], "probe": 851, "lock": 851, "dex": 851, "tricki": [851, 853], "predictor": 851, "tight": 851, "dispatch": [851, 866, 869], "ast": 851, "autodiff": 851, "shine": 851, "merci": 851, "compet": [851, 866], "parallelis": 851, "spmd": 851, "mixtur": 851, "expert": 851, "sophist": 851, "depart": 851, "hundr": 851, "thousand": 851, "broadli": [851, 872], "supplementari": 851, "reusabl": [851, 864, 866], "fanci": [851, 866], "fusion": [851, 870], "lose": 851, "pmap": 851, "eventu": 851, "supplement": 851, "backdoor": 851, "callback": 851, "somewhat": [851, 866], "outsourc": 851, "ivy_root": 852, "pem": 852, "api_kei": 852, "asap": 852, "nail": 853, "scientist": 853, "correl": 853, "collabor": [854, 855, 856], "consortium": [854, 856], "grown": 855, "rapidli": 855, "shareabl": 855, "outdat": 855, "newest": 855, "prototyp": [855, 866], "obsolet": [855, 857], "invent": 855, "simultan": [855, 857], "runner": 855, "principl": [855, 864, 866, 869], "2006": 855, "cloth": 855, "forgiven": 856, "eyebrow": 856, "somehow": 856, "industri": [856, 866, 868], "funni": 856, "comic": 856, "charger": 856, "instant": 856, "contrari": 856, "bumpi": 856, "road": 856, "technologi": [856, 864, 868], "motherboard": 856, "raid": 856, "bluetooth": 856, "wireless": 856, "btx": 856, "sata": 856, "tcp": 856, "ip": 856, "smtp": 856, "send": [856, 871], "gmail": 856, "outlook": 856, "growth": [856, 869], "necess": 856, "2015": [856, 866], "aros": 856, "ourselv": [856, 872], "quansight": [856, 872], "compani": [856, 862], "apach": [856, 868, 872], "onnx": [856, 864, 872], "cupi": [856, 866, 873], "modin": 856, "spyder": 856, "octoml": [856, 872], "sponsor": 856, "lg": 856, "electron": 856, "shaw": 856, "pursuit": 856, "complianc": 856, "convinc": 856, "celebr": 856, "abund": 857, "streamlin": [857, 869], "awesom": 857, "love": 857, "slew": 857, "inevit": [857, 867], "erron": 857, "poor": 857, "spin": 857, "sake": 857, "wouldn": 857, "frantic": 857, "lucid": 857, "honk": 857, "hasn": 857, "spend": [857, 866], "sonnet": 857, "trainer": [857, 873], "quo": 857, "dopamin": 857, "ignit": 857, "catalyst": 857, "lightn": 857, "fastai": 857, "publicli": [859, 860, 861], "logger": 859, "arg_stateful_idx": 859, "kwarg_stateful_idx": 859, "include_gener": 859, "array_cach": 859, "return_backend_traced_fn": 859, "lazygraph": [859, 860, 861], "sum_j": 859, "traced_fn": 859, "impos": 859, "comp_func": 859, "trade": 859, "bake": 859, "cont": 859, "new_attribut": 859, "resnet50": 859, "breed": 859, "autoimageprocessor": [859, 860], "resnetforimageclassif": [859, 860], "traced_graph": 859, "predicted_label": 859, "debug_mod": 860, "rough": 860, "transformed_with_st": 860, "bigger": 860, "hf": 860, "tf_model": 860, "tf_input": 860, "transpile_kwarg": 861, "transpiled_func": 861, "unified_func": 861, "rwork": 862, "vendor": [862, 868], "complimentari": [862, 872], "acycl": [862, 867], "fillna": 863, "pct_chang": 863, "tail": 863, "_____________": 863, "__________________________________________________________________": 863, "scaffold": [864, 872], "heart": 864, "toolchain": [864, 869], "assembli": [864, 871, 872], "idl": 864, "middl": 864, "emit": 864, "gnu": [864, 869], "broader": 864, "heterogen": 864, "aid": 864, "coprocessor": 864, "programm": [864, 871], "gate": 864, "onednn": 864, "sit": [864, 867, 872], "tandem": 864, "possess": 864, "khrono": [865, 871], "appl": 865, "coremltool": 865, "albeit": 865, "promin": 866, "abbrevi": 866, "laboratori": 866, "proprietari": [866, 870, 871], "mathwork": 866, "commerci": 866, "1984": 866, "toolbox": 866, "mupad": 866, "simulink": 866, "graphic": [866, 870, 871], "simul": 866, "million": [866, 869], "worldwid": 866, "scienc": [866, 868], "econom": 866, "2001": 866, "od": 866, "solver": 866, "cython": 866, "friendli": 866, "2002": 866, "lua": 866, "luajit": 866, "idiap": 866, "epfl": 866, "2005": 866, "numarrai": 866, "cpython": 866, "partli": 866, "2007": 866, "forest": 866, "boost": 866, "dbscan": 866, "inbuilt": 866, "esqu": 866, "aesara": 866, "datafram": 866, "2012": 866, "polymorph": 866, "mpi": 866, "openmp": 866, "glue": 866, "jaot": 866, "nasa": 866, "cern": 866, "climat": 866, "allianc": 866, "influenti": 866, "2014": 866, "scala": 866, "ship": 866, "forgiv": 866, "decemb": 866, "announc": 866, "mainten": 866, "v7": 866, "meaning": 866, "2016": 866, "imper": 866, "amazon": 866, "traction": 866, "cognit": [866, 873], "grade": 866, "dnn": 866, "backpropag": 866, "succumb": 866, "came": 866, "monitor": 866, "practition": [866, 870, 871, 872], "hobbyist": 866, "tremend": 866, "ecosystem": 866, "gear": 866, "batteri": 866, "zygot": 866, "jl": 866, "workload": 866, "daggerflux": 866, "frontier": 866, "hessian": 866, "2018": 866, "lightweight": [866, 873], "shortcom": 866, "barrier": 866, "inexperienc": 866, "underdevelop": 866, "fanat": 866, "ounc": 866, "infanc": 866, "emerg": 866, "nich": 866, "mobil": 866, "lite": 866, "enterpris": 866, "reinvent": [866, 868], "inertia": 866, "creator": [866, 868], "paszk": 866, "hi": 866, "bulk": 866, "haskel": 866, "dataflow": 867, "trace_modul": 867, "scriptfunct": 867, "scriptmodul": 867, "fake": 867, "proxi": 867, "graphmodul": 867, "travi": 868, "oliph": 868, "leader": 868, "cornerston": 868, "numba": 868, "numfocu": 868, "pydata": 868, "confer": 868, "consult": 868, "servic": 868, "devop": 868, "mlop": 868, "dashboard": 868, "startup": 868, "mlir": [868, 869, 872], "Their": 868, "held": 868, "presum": 868, "llvm": [868, 871], "founder": 868, "tvm": [868, 872], "sustain": 868, "empow": 868, "har": 868, "burden": 868, "precompil": 869, "executor": 869, "julia": [869, 872], "fsf": 869, "gpl": 869, "biggest": [869, 872], "throughput": 870, "gpgpu": 870, "classic": 871, "sycl": 871, "dpc": 871, "processor": 871, "maco": 871, "oneapi": 871, "ia": 871, "aka": 871, "xeon": 871, "gen9": 871, "xe": 871, "arria": 871, "gx": 871, "fpga": 871, "lofti": 872, "ambit": 872, "realm": 872, "bedrock": 872, "flux": 872, "bite": 872, "chew": 872, "eagerpi": 872, "tensorli": 872, "thinc": 872, "neuropod": 872, "fx": 872, "retrain": 872, "closer": 872, "greatli": 872, "modular": 872, "anywher": 872, "theano": 873, "plaidml": 873, "partial_svd": 873, "excel": 873, "subsystem": 873, "samund": 874, "singh": 874, "samthakur587": 874, "suraj": 874, "muhammad": 874, "ishaqu": 874, "muhammadnizamani": 874, "suyash": 874, "gupta": 874, "sgalpha01": 874, "sanjai": 874, "suthar": 874, "sanjay8602": 874, "zera": 874, "marveen": 874, "lyngkhoi": 874, "fleventi": 874, "nitesh": 874, "kesharwani": 874, "niteshk84": 874, "sarvesh": 874, "jackson": 874, "mcclintock": 874, "jacksondm33": 874, "david": 874, "adlai": 874, "nettei": 874, "garima": 874, "saroj": 874, "androgari": 874, "lee": 874, "bissessar": 874, "leebissessar5": 874, "mostafa": 874, "gamal": 874, "mr": 874, "array22": 874, "ogban": 874, "ugot": 874, "rahul": 874, "prem": 874, "rp097": 874, "rohit": 874, "kumar": 874, "salla": 874, "rohitsalla": 874, "srikar": 874, "vedantam": 874, "shruzki": 874, "waqar": 874, "ahm": 874, "waqaarahm": 874, "aryan": 874, "pandei": 874, "aryan8912": 874, "dhruv": 874, "sharma": 874, "druvdub": 874, "kacper": 874, "ko\u017cdo\u0144": 874, "kozdon": 874, "mehmet": 874, "bilgehan": 874, "bezcioglu": 874, "bilgehanmehmet": 874, "sheroz": 874, "khan": 874, "ksheroz": 874, "muzakkir": 874, "hussain": 874, "muzakkirhussain011": 874}, "objects": {"ivy.Array": [[216, 0, 1, "", "abs"], [217, 0, 1, "", "acos"], [218, 0, 1, "", "acosh"], [611, 0, 1, "", "adam_step"], [612, 0, 1, "", "adam_update"], [385, 0, 1, "", "adaptive_avg_pool1d"], [386, 0, 1, "", "adaptive_avg_pool2d"], [387, 0, 1, "", "adaptive_max_pool2d"], [388, 0, 1, "", "adaptive_max_pool3d"], [219, 0, 1, "", "add"], [420, 0, 1, "", "adjoint"], [763, 0, 1, "", "all"], [530, 0, 1, "", "all_equal"], [330, 0, 1, "", "allclose"], [331, 0, 1, "", "amax"], [332, 0, 1, "", "amin"], [220, 0, 1, "", "angle"], [764, 0, 1, "", "any"], [740, 0, 1, "", "argmax"], [741, 0, 1, "", "argmin"], [749, 0, 1, "", "argsort"], [742, 0, 1, "", "argwhere"], [533, 0, 1, "", "array_equal"], [456, 0, 1, "", "as_strided"], [124, 0, 1, "", "asarray"], [221, 0, 1, "", "asin"], [222, 0, 1, "", "asinh"], [534, 0, 1, "", "assert_supports_inplace"], [457, 0, 1, "", "associative_scan"], [148, 0, 1, "", "astype"], [223, 0, 1, "", "atan"], [224, 0, 1, "", "atan2"], [225, 0, 1, "", "atanh"], [458, 0, 1, "", "atleast_1d"], [459, 0, 1, "", "atleast_2d"], [460, 0, 1, "", "atleast_3d"], [390, 0, 1, "", "avg_pool1d"], [391, 0, 1, "", "avg_pool2d"], [392, 0, 1, "", "avg_pool3d"], [497, 0, 1, "", "batch_norm"], [421, 0, 1, "", "batched_outer"], [504, 0, 1, "", "bernoulli"], [505, 0, 1, "", "beta"], [333, 0, 1, "", "binarizer"], [692, 0, 1, "", "binary_cross_entropy"], [516, 0, 1, "", "bincount"], [226, 0, 1, "", "bitwise_and"], [227, 0, 1, "", "bitwise_invert"], [228, 0, 1, "", "bitwise_left_shift"], [229, 0, 1, "", "bitwise_or"], [230, 0, 1, "", "bitwise_right_shift"], [231, 0, 1, "", "bitwise_xor"], [308, 0, 1, "", "blackman_window"], [149, 0, 1, "", "broadcast_arrays"], [150, 0, 1, "", "broadcast_to"], [151, 0, 1, "", "can_cast"], [232, 0, 1, "", "ceil"], [291, 0, 1, "", "celu"], [663, 0, 1, "", "cholesky"], [695, 0, 1, "", "clip"], [536, 0, 1, "", "clip_matrix_norm"], [537, 0, 1, "", "clip_vector_norm"], [464, 0, 1, "", "column_stack"], [696, 0, 1, "", "concat"], [465, 0, 1, "", "concat_from_sequence"], [422, 0, 1, "", "cond"], [334, 0, 1, "", "conj"], [697, 0, 1, "", "constant_pad"], [646, 0, 1, "", "conv1d"], [647, 0, 1, "", "conv1d_transpose"], [648, 0, 1, "", "conv2d"], [649, 0, 1, "", "conv2d_transpose"], [650, 0, 1, "", "conv3d"], [651, 0, 1, "", "conv3d_transpose"], [125, 0, 1, "", "copy_array"], [335, 0, 1, "", "copysign"], [517, 0, 1, "", "corrcoef"], [233, 0, 1, "", "cos"], [234, 0, 1, "", "cosh"], [336, 0, 1, "", "count_nonzero"], [518, 0, 1, "", "cov"], [664, 0, 1, "", "cross"], [693, 0, 1, "", "cross_entropy"], [519, 0, 1, "", "cummax"], [520, 0, 1, "", "cummin"], [753, 0, 1, "", "cumprod"], [754, 0, 1, "", "cumsum"], [393, 0, 1, "", "dct"], [540, 0, 1, "", "default"], [235, 0, 1, "", "deg2rad"], [654, 0, 1, "", "depthwise_conv2d"], [665, 0, 1, "", "det"], [193, 0, 1, "", "dev"], [394, 0, 1, "", "dft"], [666, 0, 1, "", "diag"], [423, 0, 1, "", "diagflat"], [667, 0, 1, "", "diagonal"], [337, 0, 1, "", "diff"], [338, 0, 1, "", "digamma"], [506, 0, 1, "", "dirichlet"], [236, 0, 1, "", "divide"], [424, 0, 1, "", "dot"], [655, 0, 1, "", "dropout"], [395, 0, 1, "", "dropout1d"], [396, 0, 1, "", "dropout2d"], [397, 0, 1, "", "dropout3d"], [466, 0, 1, "", "dsplit"], [467, 0, 1, "", "dstack"], [159, 0, 1, "", "dtype"], [425, 0, 1, "", "eig"], [669, 0, 1, "", "eigh"], [426, 0, 1, "", "eigh_tridiagonal"], [427, 0, 1, "", "eigvals"], [670, 0, 1, "", "eigvalsh"], [541, 0, 1, "", "einops_rearrange"], [542, 0, 1, "", "einops_reduce"], [543, 0, 1, "", "einops_repeat"], [755, 0, 1, "", "einsum"], [292, 0, 1, "", "elu"], [398, 0, 1, "", "embedding"], [127, 0, 1, "", "empty_like"], [237, 0, 1, "", "equal"], [238, 0, 1, "", "erf"], [339, 0, 1, "", "erfc"], [340, 0, 1, "", "erfinv"], [544, 0, 1, "", "exists"], [239, 0, 1, "", "exp"], [240, 0, 1, "", "exp2"], [468, 0, 1, "", "expand"], [698, 0, 1, "", "expand_dims"], [241, 0, 1, "", "expm1"], [309, 0, 1, "", "eye_like"], [399, 0, 1, "", "fft"], [400, 0, 1, "", "fft2"], [469, 0, 1, "", "fill_diagonal"], [161, 0, 1, "", "finfo"], [341, 0, 1, "", "fix"], [470, 0, 1, "", "flatten"], [699, 0, 1, "", "flip"], [471, 0, 1, "", "fliplr"], [472, 0, 1, "", "flipud"], [342, 0, 1, "", "float_power"], [242, 0, 1, "", "floor"], [243, 0, 1, "", "floor_divide"], [343, 0, 1, "", "fmax"], [244, 0, 1, "", "fmin"], [245, 0, 1, "", "fmod"], [473, 0, 1, "", "fold"], [545, 0, 1, "", "fourier_encode"], [344, 0, 1, "", "frexp"], [129, 0, 1, "", "from_dlpack"], [132, 0, 1, "", "full_like"], [507, 0, 1, "", "gamma"], [548, 0, 1, "", "gather"], [549, 0, 1, "", "gather_nd"], [246, 0, 1, "", "gcd"], [106, 0, 1, "", "gelu"], [428, 0, 1, "", "general_inner_product"], [552, 0, 1, "", "get_num_dims"], [345, 0, 1, "", "gradient"], [615, 0, 1, "", "gradient_descent_update"], [247, 0, 1, "", "greater"], [248, 0, 1, "", "greater_equal"], [498, 0, 1, "", "group_norm"], [293, 0, 1, "", "hardshrink"], [294, 0, 1, "", "hardsilu"], [107, 0, 1, "", "hardswish"], [295, 0, 1, "", "hardtanh"], [554, 0, 1, "", "has_nans"], [474, 0, 1, "", "heaviside"], [429, 0, 1, "", "higher_order_moment"], [448, 0, 1, "", "hinge_embedding_loss"], [521, 0, 1, "", "histogram"], [475, 0, 1, "", "hsplit"], [476, 0, 1, "", "hstack"], [449, 0, 1, "", "huber_loss"], [346, 0, 1, "", "hypot"], [477, 0, 1, "", "i0"], [403, 0, 1, "", "idct"], [404, 0, 1, "", "ifft"], [405, 0, 1, "", "ifftn"], [522, 0, 1, "", "igamma"], [164, 0, 1, "", "iinfo"], [249, 0, 1, "", "imag"], [430, 0, 1, "", "initialize_tucker"], [671, 0, 1, "", "inner"], [556, 0, 1, "", "inplace_decrement"], [557, 0, 1, "", "inplace_increment"], [558, 0, 1, "", "inplace_update"], [499, 0, 1, "", "instance_norm"], [407, 0, 1, "", "interpolate"], [672, 0, 1, "", "inv"], [560, 0, 1, "", "is_array"], [167, 0, 1, "", "is_bool_dtype"], [169, 0, 1, "", "is_float_dtype"], [171, 0, 1, "", "is_int_dtype"], [561, 0, 1, "", "is_ivy_array"], [562, 0, 1, "", "is_ivy_container"], [564, 0, 1, "", "is_native_array"], [173, 0, 1, "", "is_uint_dtype"], [347, 0, 1, "", "isclose"], [250, 0, 1, "", "isfinite"], [565, 0, 1, "", "isin"], [251, 0, 1, "", "isinf"], [252, 0, 1, "", "isnan"], [253, 0, 1, "", "isreal"], [567, 0, 1, "", "itemsize"], [450, 0, 1, "", "kl_div"], [432, 0, 1, "", "kron"], [451, 0, 1, "", "l1_loss"], [500, 0, 1, "", "l1_normalize"], [501, 0, 1, "", "l2_normalize"], [617, 0, 1, "", "lamb_update"], [618, 0, 1, "", "lars_update"], [733, 0, 1, "", "layer_norm"], [254, 0, 1, "", "lcm"], [348, 0, 1, "", "ldexp"], [108, 0, 1, "", "leaky_relu"], [349, 0, 1, "", "lerp"], [255, 0, 1, "", "less"], [256, 0, 1, "", "less_equal"], [511, 0, 1, "", "lexsort"], [350, 0, 1, "", "lgamma"], [656, 0, 1, "", "linear"], [133, 0, 1, "", "linspace"], [257, 0, 1, "", "log"], [258, 0, 1, "", "log10"], [259, 0, 1, "", "log1p"], [260, 0, 1, "", "log2"], [452, 0, 1, "", "log_poisson_loss"], [109, 0, 1, "", "log_softmax"], [261, 0, 1, "", "logaddexp"], [262, 0, 1, "", "logaddexp2"], [263, 0, 1, "", "logical_and"], [264, 0, 1, "", "logical_not"], [265, 0, 1, "", "logical_or"], [266, 0, 1, "", "logical_xor"], [296, 0, 1, "", "logit"], [297, 0, 1, "", "logsigmoid"], [134, 0, 1, "", "logspace"], [503, 0, 1, "", "lp_normalize"], [658, 0, 1, "", "lstm_update"], [436, 0, 1, "", "make_svd_non_negative"], [673, 0, 1, "", "matmul"], [478, 0, 1, "", "matricize"], [437, 0, 1, "", "matrix_exp"], [674, 0, 1, "", "matrix_norm"], [675, 0, 1, "", "matrix_power"], [676, 0, 1, "", "matrix_rank"], [677, 0, 1, "", "matrix_transpose"], [756, 0, 1, "", "max"], [408, 0, 1, "", "max_pool1d"], [409, 0, 1, "", "max_pool2d"], [410, 0, 1, "", "max_pool3d"], [411, 0, 1, "", "max_unpool1d"], [267, 0, 1, "", "maximum"], [757, 0, 1, "", "mean"], [523, 0, 1, "", "median"], [315, 0, 1, "", "mel_weight_matrix"], [135, 0, 1, "", "meshgrid"], [758, 0, 1, "", "min"], [268, 0, 1, "", "minimum"], [110, 0, 1, "", "mish"], [438, 0, 1, "", "mode_dot"], [351, 0, 1, "", "modf"], [479, 0, 1, "", "moveaxis"], [750, 0, 1, "", "msort"], [439, 0, 1, "", "multi_dot"], [659, 0, 1, "", "multi_head_attention"], [440, 0, 1, "", "multi_mode_dot"], [734, 0, 1, "", "multinomial"], [269, 0, 1, "", "multiply"], [270, 0, 1, "", "nan_to_num"], [524, 0, 1, "", "nanmean"], [525, 0, 1, "", "nanmedian"], [526, 0, 1, "", "nanmin"], [527, 0, 1, "", "nanprod"], [352, 0, 1, "", "nansum"], [136, 0, 1, "", "native_array"], [271, 0, 1, "", "negative"], [353, 0, 1, "", "nextafter"], [743, 0, 1, "", "nonzero"], [272, 0, 1, "", "not_equal"], [137, 0, 1, "", "one_hot"], [139, 0, 1, "", "ones_like"], [619, 0, 1, "", "optimizer_update"], [529, 0, 1, "", "optional_get_element"], [678, 0, 1, "", "outer"], [480, 0, 1, "", "pad"], [481, 0, 1, "", "partial_fold"], [482, 0, 1, "", "partial_tensor_to_vec"], [441, 0, 1, "", "partial_tucker"], [483, 0, 1, "", "partial_unfold"], [484, 0, 1, "", "partial_vec_to_tensor"], [700, 0, 1, "", "permute_dims"], [679, 0, 1, "", "pinv"], [508, 0, 1, "", "poisson"], [453, 0, 1, "", "poisson_nll_loss"], [273, 0, 1, "", "positive"], [274, 0, 1, "", "pow"], [298, 0, 1, "", "prelu"], [759, 0, 1, "", "prod"], [485, 0, 1, "", "put_along_axis"], [680, 0, 1, "", "qr"], [528, 0, 1, "", "quantile"], [275, 0, 1, "", "rad2deg"], [735, 0, 1, "", "randint"], [736, 0, 1, "", "random_normal"], [737, 0, 1, "", "random_uniform"], [276, 0, 1, "", "real"], [277, 0, 1, "", "reciprocal"], [359, 0, 1, "", "reduce"], [414, 0, 1, "", "reduce_window"], [111, 0, 1, "", "relu"], [299, 0, 1, "", "relu6"], [278, 0, 1, "", "remainder"], [701, 0, 1, "", "repeat"], [702, 0, 1, "", "reshape"], [176, 0, 1, "", "result_type"], [415, 0, 1, "", "rfft"], [416, 0, 1, "", "rfftn"], [703, 0, 1, "", "roll"], [486, 0, 1, "", "rot90"], [279, 0, 1, "", "round"], [662, 0, 1, "", "scaled_dot_product_attention"], [300, 0, 1, "", "scaled_tanh"], [572, 0, 1, "", "scatter_flat"], [573, 0, 1, "", "scatter_nd"], [751, 0, 1, "", "searchsorted"], [301, 0, 1, "", "selu"], [586, 0, 1, "", "shape"], [739, 0, 1, "", "shuffle"], [112, 0, 1, "", "sigmoid"], [280, 0, 1, "", "sign"], [354, 0, 1, "", "signbit"], [302, 0, 1, "", "silu"], [281, 0, 1, "", "sin"], [355, 0, 1, "", "sinc"], [282, 0, 1, "", "sinh"], [587, 0, 1, "", "size"], [418, 0, 1, "", "sliding_window"], [681, 0, 1, "", "slogdet"], [454, 0, 1, "", "smooth_l1_loss"], [455, 0, 1, "", "soft_margin_loss"], [487, 0, 1, "", "soft_thresholding"], [113, 0, 1, "", "softmax"], [114, 0, 1, "", "softplus"], [303, 0, 1, "", "softshrink"], [682, 0, 1, "", "solve"], [752, 0, 1, "", "sort"], [694, 0, 1, "", "sparse_cross_entropy"], [356, 0, 1, "", "sparsify_tensor"], [704, 0, 1, "", "split"], [283, 0, 1, "", "sqrt"], [284, 0, 1, "", "square"], [705, 0, 1, "", "squeeze"], [588, 0, 1, "", "stable_divide"], [589, 0, 1, "", "stable_pow"], [706, 0, 1, "", "stack"], [760, 0, 1, "", "std"], [419, 0, 1, "", "stft"], [620, 0, 1, "", "stop_gradient"], [590, 0, 1, "", "strides"], [285, 0, 1, "", "subtract"], [761, 0, 1, "", "sum"], [591, 0, 1, "", "supports_inplace_updates"], [683, 0, 1, "", "svd"], [443, 0, 1, "", "svd_flip"], [684, 0, 1, "", "svdvals"], [707, 0, 1, "", "swapaxes"], [488, 0, 1, "", "take"], [489, 0, 1, "", "take_along_axis"], [286, 0, 1, "", "tan"], [287, 0, 1, "", "tanh"], [305, 0, 1, "", "tanhshrink"], [444, 0, 1, "", "tensor_train"], [685, 0, 1, "", "tensordot"], [686, 0, 1, "", "tensorsolve"], [306, 0, 1, "", "threshold"], [307, 0, 1, "", "thresholded_relu"], [708, 0, 1, "", "tile"], [210, 0, 1, "", "to_device"], [593, 0, 1, "", "to_list"], [595, 0, 1, "", "to_numpy"], [596, 0, 1, "", "to_scalar"], [490, 0, 1, "", "top_k"], [687, 0, 1, "", "trace"], [288, 0, 1, "", "trapz"], [141, 0, 1, "", "tril"], [325, 0, 1, "", "trilu"], [491, 0, 1, "", "trim_zeros"], [142, 0, 1, "", "triu"], [289, 0, 1, "", "trunc"], [290, 0, 1, "", "trunc_divide"], [445, 0, 1, "", "truncated_svd"], [446, 0, 1, "", "tt_matrix_to_tensor"], [447, 0, 1, "", "tucker"], [492, 0, 1, "", "unflatten"], [493, 0, 1, "", "unfold"], [745, 0, 1, "", "unique_all"], [494, 0, 1, "", "unique_consecutive"], [746, 0, 1, "", "unique_counts"], [747, 0, 1, "", "unique_inverse"], [748, 0, 1, "", "unique_values"], [509, 0, 1, "", "unravel_index"], [326, 0, 1, "", "unsorted_segment_mean"], [327, 0, 1, "", "unsorted_segment_min"], [328, 0, 1, "", "unsorted_segment_sum"], [709, 0, 1, "", "unstack"], [609, 0, 1, "", "value_is_nan"], [688, 0, 1, "", "vander"], [762, 0, 1, "", "var"], [689, 0, 1, "", "vecdot"], [690, 0, 1, "", "vector_norm"], [691, 0, 1, "", "vector_to_skew_symmetric_matrix"], [495, 0, 1, "", "vsplit"], [496, 0, 1, "", "vstack"], [744, 0, 1, "", "where"], [357, 0, 1, "", "xlogy"], [710, 0, 1, "", "zero_pad"], [145, 0, 1, "", "zeros_like"], [358, 0, 1, "", "zeta"]], "ivy": [[630, 1, 1, "", "ArrayMode"], [626, 1, 1, "", "DefaultComplexDtype"], [627, 1, 1, "", "DefaultDevice"], [626, 1, 1, "", "DefaultDtype"], [626, 1, 1, "", "DefaultFloatDtype"], [626, 1, 1, "", "DefaultIntDtype"], [626, 1, 1, "", "DefaultUintDtype"], [382, 1, 1, "", "NativeSparseArray"], [625, 1, 1, "", "NestedSequence"], [630, 1, 1, "", "PreciseMode"], [627, 1, 1, "", "Profiler"], [382, 1, 1, "", "SparseArray"], [216, 2, 1, "", "abs"], [217, 2, 1, "", "acos"], [218, 2, 1, "", "acosh"], [631, 2, 1, "", "adam_step"], [631, 2, 1, "", "adam_update"], [385, 2, 1, "", "adaptive_avg_pool1d"], [386, 2, 1, "", "adaptive_avg_pool2d"], [387, 2, 1, "", "adaptive_max_pool2d"], [388, 2, 1, "", "adaptive_max_pool3d"], [219, 2, 1, "", "add"], [372, 2, 1, "", "adjoint"], [644, 2, 1, "", "all"], [630, 2, 1, "", "all_equal"], [637, 2, 1, "", "all_nested_indices"], [368, 2, 1, "", "allclose"], [368, 2, 1, "", "amax"], [368, 2, 1, "", "amin"], [220, 2, 1, "", "angle"], [644, 2, 1, "", "any"], [625, 2, 1, "", "arange"], [389, 2, 1, "", "area_interpolate"], [630, 2, 1, "", "arg_info"], [630, 2, 1, "", "arg_names"], [640, 2, 1, "", "argmax"], [640, 2, 1, "", "argmin"], [642, 2, 1, "", "argsort"], [640, 2, 1, "", "argwhere"], [625, 2, 1, "", "array"], [630, 2, 1, "", "array_equal"], [189, 2, 1, "", "as_ivy_dev"], [626, 2, 1, "", "as_ivy_dtype"], [190, 2, 1, "", "as_native_dev"], [626, 2, 1, "", "as_native_dtype"], [374, 2, 1, "", "as_strided"], [625, 2, 1, "", "asarray"], [221, 2, 1, "", "asin"], [222, 2, 1, "", "asinh"], [630, 2, 1, "", "assert_supports_inplace"], [374, 2, 1, "", "associative_scan"], [626, 2, 1, "", "astype"], [223, 2, 1, "", "atan"], [224, 2, 1, "", "atan2"], [225, 2, 1, "", "atanh"], [374, 2, 1, "", "atleast_1d"], [374, 2, 1, "", "atleast_2d"], [374, 2, 1, "", "atleast_3d"], [390, 2, 1, "", "avg_pool1d"], [391, 2, 1, "", "avg_pool2d"], [392, 2, 1, "", "avg_pool3d"], [377, 2, 1, "", "batch_norm"], [372, 2, 1, "", "batched_outer"], [378, 2, 1, "", "bernoulli"], [378, 2, 1, "", "beta"], [368, 2, 1, "", "binarizer"], [634, 2, 1, "", "binary_cross_entropy"], [383, 2, 1, "", "bincount"], [370, 2, 1, "", "bind_custom_gradient_function"], [226, 2, 1, "", "bitwise_and"], [227, 2, 1, "", "bitwise_invert"], [228, 2, 1, "", "bitwise_left_shift"], [229, 2, 1, "", "bitwise_or"], [230, 2, 1, "", "bitwise_right_shift"], [231, 2, 1, "", "bitwise_xor"], [308, 2, 1, "", "blackman_window"], [626, 2, 1, "", "broadcast_arrays"], [374, 2, 1, "", "broadcast_shapes"], [626, 2, 1, "", "broadcast_to"], [630, 2, 1, "", "cache_fn"], [626, 2, 1, "", "can_cast"], [232, 2, 1, "", "ceil"], [291, 2, 1, "", "celu"], [626, 2, 1, "", "check_float"], [374, 2, 1, "", "check_scalar"], [633, 2, 1, "", "cholesky"], [374, 2, 1, "", "choose"], [191, 2, 1, "", "clear_cached_mem_on_dev"], [635, 2, 1, "", "clip"], [630, 2, 1, "", "clip_matrix_norm"], [630, 2, 1, "", "clip_vector_norm"], [626, 2, 1, "", "closest_valid_dtype"], [624, 2, 1, "", "cmp_is"], [624, 2, 1, "", "cmp_isnot"], [374, 2, 1, "", "column_stack"], [635, 2, 1, "", "concat"], [374, 2, 1, "", "concat_from_sequence"], [372, 2, 1, "", "cond"], [368, 2, 1, "", "conj"], [635, 2, 1, "", "constant_pad"], [630, 2, 1, "", "container_types"], [632, 2, 1, "", "conv"], [632, 2, 1, "", "conv1d"], [632, 2, 1, "", "conv1d_transpose"], [632, 2, 1, "", "conv2d"], [632, 2, 1, "", "conv2d_transpose"], [632, 2, 1, "", "conv3d"], [632, 2, 1, "", "conv3d_transpose"], [632, 2, 1, "", "conv_general_dilated"], [632, 2, 1, "", "conv_general_transpose"], [625, 2, 1, "", "copy_array"], [637, 2, 1, "", "copy_nest"], [368, 2, 1, "", "copysign"], [383, 2, 1, "", "corrcoef"], [233, 2, 1, "", "cos"], [234, 2, 1, "", "cosh"], [368, 2, 1, "", "count_nonzero"], [383, 2, 1, "", "cov"], [633, 2, 1, "", "cross"], [634, 2, 1, "", "cross_entropy"], [383, 2, 1, "", "cummax"], [383, 2, 1, "", "cummin"], [643, 2, 1, "", "cumprod"], [643, 2, 1, "", "cumsum"], [630, 2, 1, "", "current_backend_str"], [393, 2, 1, "", "dct"], [630, 2, 1, "", "default"], [626, 2, 1, "", "default_complex_dtype"], [192, 2, 1, "", "default_device"], [626, 2, 1, "", "default_dtype"], [626, 2, 1, "", "default_float_dtype"], [626, 2, 1, "", "default_int_dtype"], [626, 2, 1, "", "default_uint_dtype"], [235, 2, 1, "", "deg2rad"], [632, 2, 1, "", "depthwise_conv2d"], [633, 2, 1, "", "det"], [193, 2, 1, "", "dev"], [194, 2, 1, "", "dev_util"], [394, 2, 1, "", "dft"], [633, 2, 1, "", "diag"], [372, 2, 1, "", "diagflat"], [633, 2, 1, "", "diagonal"], [368, 2, 1, "", "diff"], [368, 2, 1, "", "digamma"], [378, 2, 1, "", "dirichlet"], [236, 2, 1, "", "divide"], [372, 2, 1, "", "dot"], [632, 2, 1, "", "dropout"], [395, 2, 1, "", "dropout1d"], [396, 2, 1, "", "dropout2d"], [397, 2, 1, "", "dropout3d"], [374, 2, 1, "", "dsplit"], [374, 2, 1, "", "dstack"], [626, 2, 1, "", "dtype"], [626, 2, 1, "", "dtype_bits"], [637, 2, 1, "", "duplicate_array_index_chains"], [623, 6, 1, "", "e"], [372, 2, 1, "", "eig"], [633, 2, 1, "", "eigh"], [372, 2, 1, "", "eigh_tridiagonal"], [372, 2, 1, "", "eigvals"], [633, 2, 1, "", "eigvalsh"], [630, 2, 1, "", "einops_rearrange"], [630, 2, 1, "", "einops_reduce"], [630, 2, 1, "", "einops_repeat"], [643, 2, 1, "", "einsum"], [292, 2, 1, "", "elu"], [398, 2, 1, "", "embedding"], [625, 2, 1, "", "empty"], [625, 2, 1, "", "empty_like"], [237, 2, 1, "", "equal"], [238, 2, 1, "", "erf"], [368, 2, 1, "", "erfc"], [368, 2, 1, "", "erfinv"], [631, 2, 1, "", "execute_with_gradients"], [630, 2, 1, "", "exists"], [239, 2, 1, "", "exp"], [240, 2, 1, "", "exp2"], [374, 2, 1, "", "expand"], [635, 2, 1, "", "expand_dims"], [241, 2, 1, "", "expm1"], [625, 2, 1, "", "eye"], [309, 2, 1, "", "eye_like"], [399, 2, 1, "", "fft"], [400, 2, 1, "", "fft2"], [374, 2, 1, "", "fill_diagonal"], [626, 2, 1, "", "finfo"], [368, 2, 1, "", "fix"], [374, 2, 1, "", "flatten"], [635, 2, 1, "", "flip"], [374, 2, 1, "", "fliplr"], [374, 2, 1, "", "flipud"], [368, 2, 1, "", "float_power"], [242, 2, 1, "", "floor"], [243, 2, 1, "", "floor_divide"], [368, 2, 1, "", "fmax"], [244, 2, 1, "", "fmin"], [245, 2, 1, "", "fmod"], [374, 2, 1, "", "fold"], [636, 2, 1, "", "fomaml_step"], [624, 2, 1, "", "for_loop"], [630, 2, 1, "", "fourier_encode"], [368, 2, 1, "", "frexp"], [625, 2, 1, "", "from_dlpack"], [625, 2, 1, "", "frombuffer"], [625, 2, 1, "", "full"], [625, 2, 1, "", "full_like"], [195, 2, 1, "", "function_supported_devices"], [630, 2, 1, "", "function_supported_devices_and_dtypes"], [626, 2, 1, "", "function_supported_dtypes"], [196, 2, 1, "", "function_unsupported_devices"], [630, 2, 1, "", "function_unsupported_devices_and_dtypes"], [626, 2, 1, "", "function_unsupported_dtypes"], [378, 2, 1, "", "gamma"], [630, 2, 1, "", "gather"], [630, 2, 1, "", "gather_nd"], [246, 2, 1, "", "gcd"], [622, 2, 1, "", "gelu"], [372, 2, 1, "", "general_inner_product"], [401, 2, 1, "", "generate_einsum_equation"], [630, 2, 1, "", "get_all_arrays_in_memory"], [197, 2, 1, "", "get_all_ivy_arrays_on_dev"], [402, 2, 1, "", "get_interpolate_kernel"], [630, 2, 1, "", "get_item"], [630, 2, 1, "", "get_num_dims"], [630, 2, 1, "", "get_referrers_recursive"], [198, 2, 1, "", "gpu_is_available"], [631, 2, 1, "", "grad"], [368, 2, 1, "", "gradient"], [631, 2, 1, "", "gradient_descent_update"], [247, 2, 1, "", "greater"], [248, 2, 1, "", "greater_equal"], [377, 2, 1, "", "group_norm"], [310, 2, 1, "", "hamming_window"], [199, 2, 1, "", "handle_soft_device_variable"], [311, 2, 1, "", "hann_window"], [293, 2, 1, "", "hardshrink"], [294, 2, 1, "", "hardsilu"], [622, 2, 1, "", "hardswish"], [295, 2, 1, "", "hardtanh"], [630, 2, 1, "", "has_nans"], [374, 2, 1, "", "heaviside"], [372, 2, 1, "", "higher_order_moment"], [373, 2, 1, "", "hinge_embedding_loss"], [383, 2, 1, "", "histogram"], [374, 2, 1, "", "hsplit"], [374, 2, 1, "", "hstack"], [373, 2, 1, "", "huber_loss"], [368, 2, 1, "", "hypot"], [374, 2, 1, "", "i0"], [403, 2, 1, "", "idct"], [624, 2, 1, "", "if_else"], [404, 2, 1, "", "ifft"], [405, 2, 1, "", "ifftn"], [383, 2, 1, "", "igamma"], [626, 2, 1, "", "iinfo"], [249, 2, 1, "", "imag"], [637, 2, 1, "", "index_nest"], [312, 2, 1, "", "indices"], [623, 6, 1, "", "inf"], [626, 2, 1, "", "infer_default_dtype"], [372, 2, 1, "", "initialize_tucker"], [633, 2, 1, "", "inner"], [630, 2, 1, "", "inplace_arrays_supported"], [630, 2, 1, "", "inplace_decrement"], [630, 2, 1, "", "inplace_increment"], [630, 2, 1, "", "inplace_update"], [630, 2, 1, "", "inplace_variables_supported"], [637, 2, 1, "", "insert_into_nest_at_index"], [637, 2, 1, "", "insert_into_nest_at_indices"], [377, 2, 1, "", "instance_norm"], [406, 2, 1, "", "interp"], [407, 2, 1, "", "interpolate"], [633, 2, 1, "", "inv"], [626, 2, 1, "", "invalid_dtype"], [381, 2, 1, "", "invert_permutation"], [630, 2, 1, "", "is_array"], [626, 2, 1, "", "is_bool_dtype"], [626, 2, 1, "", "is_complex_dtype"], [626, 2, 1, "", "is_float_dtype"], [626, 2, 1, "", "is_hashable_dtype"], [626, 2, 1, "", "is_int_dtype"], [630, 2, 1, "", "is_ivy_array"], [630, 2, 1, "", "is_ivy_container"], [630, 2, 1, "", "is_ivy_nested_array"], [382, 2, 1, "", "is_ivy_sparse_array"], [630, 2, 1, "", "is_native_array"], [626, 2, 1, "", "is_native_dtype"], [382, 2, 1, "", "is_native_sparse_array"], [626, 2, 1, "", "is_uint_dtype"], [368, 2, 1, "", "isclose"], [250, 2, 1, "", "isfinite"], [630, 2, 1, "", "isin"], [251, 2, 1, "", "isinf"], [252, 2, 1, "", "isnan"], [253, 2, 1, "", "isreal"], [630, 2, 1, "", "isscalar"], [630, 2, 1, "", "itemsize"], [631, 2, 1, "", "jac"], [370, 2, 1, "", "jvp"], [313, 2, 1, "", "kaiser_bessel_derived_window"], [314, 2, 1, "", "kaiser_window"], [372, 2, 1, "", "khatri_rao"], [373, 2, 1, "", "kl_div"], [372, 2, 1, "", "kron"], [372, 2, 1, "", "kronecker"], [373, 2, 1, "", "l1_loss"], [377, 2, 1, "", "l1_normalize"], [377, 2, 1, "", "l2_normalize"], [631, 2, 1, "", "lamb_update"], [631, 2, 1, "", "lars_update"], [638, 2, 1, "", "layer_norm"], [254, 2, 1, "", "lcm"], [368, 2, 1, "", "ldexp"], [622, 2, 1, "", "leaky_relu"], [368, 2, 1, "", "lerp"], [255, 2, 1, "", "less"], [256, 2, 1, "", "less_equal"], [381, 2, 1, "", "lexsort"], [368, 2, 1, "", "lgamma"], [632, 2, 1, "", "linear"], [625, 2, 1, "", "linspace"], [644, 2, 1, "", "load"], [377, 2, 1, "", "local_response_norm"], [257, 2, 1, "", "log"], [258, 2, 1, "", "log10"], [259, 2, 1, "", "log1p"], [260, 2, 1, "", "log2"], [373, 2, 1, "", "log_poisson_loss"], [622, 2, 1, "", "log_softmax"], [261, 2, 1, "", "logaddexp"], [262, 2, 1, "", "logaddexp2"], [263, 2, 1, "", "logical_and"], [264, 2, 1, "", "logical_not"], [265, 2, 1, "", "logical_or"], [266, 2, 1, "", "logical_xor"], [296, 2, 1, "", "logit"], [297, 2, 1, "", "logsigmoid"], [625, 2, 1, "", "logspace"], [377, 2, 1, "", "lp_normalize"], [632, 2, 1, "", "lstm"], [632, 2, 1, "", "lstm_update"], [372, 2, 1, "", "lu_factor"], [372, 2, 1, "", "lu_solve"], [372, 2, 1, "", "make_svd_non_negative"], [636, 2, 1, "", "maml_step"], [637, 2, 1, "", "map"], [637, 2, 1, "", "map_nest_at_index"], [637, 2, 1, "", "map_nest_at_indices"], [630, 2, 1, "", "match_kwargs"], [633, 2, 1, "", "matmul"], [374, 2, 1, "", "matricize"], [372, 2, 1, "", "matrix_exp"], [633, 2, 1, "", "matrix_norm"], [633, 2, 1, "", "matrix_power"], [633, 2, 1, "", "matrix_rank"], [633, 2, 1, "", "matrix_transpose"], [643, 2, 1, "", "max"], [408, 2, 1, "", "max_pool1d"], [409, 2, 1, "", "max_pool2d"], [410, 2, 1, "", "max_pool3d"], [411, 2, 1, "", "max_unpool1d"], [267, 2, 1, "", "maximum"], [643, 2, 1, "", "mean"], [383, 2, 1, "", "median"], [315, 2, 1, "", "mel_weight_matrix"], [625, 2, 1, "", "meshgrid"], [643, 2, 1, "", "min"], [268, 2, 1, "", "minimum"], [622, 2, 1, "", "mish"], [372, 2, 1, "", "mode_dot"], [368, 2, 1, "", "modf"], [374, 2, 1, "", "moveaxis"], [642, 2, 1, "", "msort"], [372, 2, 1, "", "multi_dot"], [632, 2, 1, "", "multi_head_attention"], [637, 2, 1, "", "multi_index_nest"], [372, 2, 1, "", "multi_mode_dot"], [639, 2, 1, "", "multinomial"], [269, 2, 1, "", "multiply"], [630, 2, 1, "", "multiprocessing"], [623, 6, 1, "", "nan"], [270, 2, 1, "", "nan_to_num"], [383, 2, 1, "", "nanmean"], [383, 2, 1, "", "nanmedian"], [383, 2, 1, "", "nanmin"], [383, 2, 1, "", "nanprod"], [368, 2, 1, "", "nansum"], [625, 2, 1, "", "native_array"], [382, 2, 1, "", "native_sparse_array"], [382, 2, 1, "", "native_sparse_array_to_indices_values_and_shape"], [316, 2, 1, "", "ndenumerate"], [317, 2, 1, "", "ndindex"], [412, 2, 1, "", "nearest_interpolate"], [271, 2, 1, "", "negative"], [637, 2, 1, "", "nested_any"], [637, 2, 1, "", "nested_argwhere"], [637, 2, 1, "", "nested_map"], [637, 2, 1, "", "nested_multi_map"], [623, 6, 1, "", "newaxis"], [368, 2, 1, "", "nextafter"], [632, 2, 1, "", "nms"], [640, 2, 1, "", "nonzero"], [272, 2, 1, "", "not_equal"], [630, 2, 1, "", "num_arrays_in_memory"], [200, 2, 1, "", "num_cpu_cores"], [201, 2, 1, "", "num_gpus"], [202, 2, 1, "", "num_ivy_arrays_on_dev"], [625, 2, 1, "", "one_hot"], [625, 2, 1, "", "ones"], [625, 2, 1, "", "ones_like"], [631, 2, 1, "", "optimizer_update"], [384, 2, 1, "", "optional_get_element"], [633, 2, 1, "", "outer"], [374, 2, 1, "", "pad"], [374, 2, 1, "", "partial_fold"], [374, 2, 1, "", "partial_tensor_to_vec"], [372, 2, 1, "", "partial_tucker"], [374, 2, 1, "", "partial_unfold"], [374, 2, 1, "", "partial_vec_to_tensor"], [203, 2, 1, "", "percent_used_mem_on_dev"], [635, 2, 1, "", "permute_dims"], [623, 6, 1, "", "pi"], [633, 2, 1, "", "pinv"], [378, 2, 1, "", "poisson"], [373, 2, 1, "", "poisson_nll_loss"], [318, 2, 1, "", "polyval"], [413, 2, 1, "", "pool"], [273, 2, 1, "", "positive"], [274, 2, 1, "", "pow"], [298, 2, 1, "", "prelu"], [630, 2, 1, "", "print_all_arrays_in_memory"], [204, 2, 1, "", "print_all_ivy_arrays_on_dev"], [643, 2, 1, "", "prod"], [626, 2, 1, "", "promote_types"], [626, 2, 1, "", "promote_types_of_inputs"], [637, 2, 1, "", "prune_empty"], [637, 2, 1, "", "prune_nest_at_index"], [637, 2, 1, "", "prune_nest_at_indices"], [374, 2, 1, "", "put_along_axis"], [633, 2, 1, "", "qr"], [383, 2, 1, "", "quantile"], [275, 2, 1, "", "rad2deg"], [639, 2, 1, "", "randint"], [319, 2, 1, "", "random_cp"], [639, 2, 1, "", "random_normal"], [320, 2, 1, "", "random_parafac2"], [321, 2, 1, "", "random_tr"], [365, 2, 1, "", "random_tt"], [365, 2, 1, "", "random_tucker"], [639, 2, 1, "", "random_uniform"], [276, 2, 1, "", "real"], [277, 2, 1, "", "reciprocal"], [369, 2, 1, "", "reduce"], [371, 2, 1, "", "reduce_window"], [622, 2, 1, "", "relu"], [299, 2, 1, "", "relu6"], [278, 2, 1, "", "remainder"], [635, 2, 1, "", "repeat"], [636, 2, 1, "", "reptile_step"], [635, 2, 1, "", "reshape"], [626, 2, 1, "", "result_type"], [371, 2, 1, "", "rfft"], [371, 2, 1, "", "rfftn"], [371, 2, 1, "", "rnn"], [632, 2, 1, "", "roi_align"], [635, 2, 1, "", "roll"], [374, 2, 1, "", "rot90"], [279, 2, 1, "", "round"], [644, 2, 1, "", "save"], [632, 2, 1, "", "scaled_dot_product_attention"], [300, 2, 1, "", "scaled_tanh"], [630, 2, 1, "", "scatter_flat"], [630, 2, 1, "", "scatter_nd"], [642, 2, 1, "", "searchsorted"], [639, 2, 1, "", "seed"], [301, 2, 1, "", "selu"], [630, 2, 1, "", "set_array_mode"], [626, 2, 1, "", "set_default_complex_dtype"], [205, 2, 1, "", "set_default_device"], [626, 2, 1, "", "set_default_dtype"], [626, 2, 1, "", "set_default_float_dtype"], [626, 2, 1, "", "set_default_int_dtype"], [626, 2, 1, "", "set_default_uint_dtype"], [630, 2, 1, "", "set_exception_trace_mode"], [630, 2, 1, "", "set_inplace_mode"], [630, 2, 1, "", "set_item"], [630, 2, 1, "", "set_min_base"], [630, 2, 1, "", "set_min_denominator"], [637, 2, 1, "", "set_nest_at_index"], [637, 2, 1, "", "set_nest_at_indices"], [630, 2, 1, "", "set_nestable_mode"], [630, 2, 1, "", "set_precise_mode"], [630, 2, 1, "", "set_queue_timeout"], [630, 2, 1, "", "set_shape_array_mode"], [630, 2, 1, "", "set_show_func_wrapper_trace_mode"], [206, 2, 1, "", "set_soft_device_mode"], [207, 2, 1, "", "set_split_factor"], [630, 2, 1, "", "set_tmp_dir"], [630, 2, 1, "", "shape"], [639, 2, 1, "", "shuffle"], [622, 2, 1, "", "sigmoid"], [280, 2, 1, "", "sign"], [368, 2, 1, "", "signbit"], [302, 2, 1, "", "silu"], [281, 2, 1, "", "sin"], [368, 2, 1, "", "sinc"], [282, 2, 1, "", "sinh"], [630, 2, 1, "", "size"], [371, 2, 1, "", "sliding_window"], [633, 2, 1, "", "slogdet"], [373, 2, 1, "", "smooth_l1_loss"], [373, 2, 1, "", "soft_margin_loss"], [374, 2, 1, "", "soft_thresholding"], [622, 2, 1, "", "softmax"], [622, 2, 1, "", "softplus"], [303, 2, 1, "", "softshrink"], [622, 2, 1, "", "softsign"], [633, 2, 1, "", "solve"], [372, 2, 1, "", "solve_triangular"], [642, 2, 1, "", "sort"], [634, 2, 1, "", "sparse_cross_entropy"], [368, 2, 1, "", "sparsify_tensor"], [635, 2, 1, "", "split"], [208, 2, 1, "", "split_factor"], [209, 2, 1, "", "split_func_call"], [283, 2, 1, "", "sqrt"], [284, 2, 1, "", "square"], [635, 2, 1, "", "squeeze"], [630, 2, 1, "", "stable_divide"], [630, 2, 1, "", "stable_pow"], [635, 2, 1, "", "stack"], [304, 2, 1, "", "stanh"], [643, 2, 1, "", "std"], [371, 2, 1, "", "stft"], [631, 2, 1, "", "stop_gradient"], [630, 2, 1, "", "strides"], [285, 2, 1, "", "subtract"], [643, 2, 1, "", "sum"], [630, 2, 1, "", "supports_inplace_updates"], [633, 2, 1, "", "svd"], [372, 2, 1, "", "svd_flip"], [633, 2, 1, "", "svdvals"], [635, 2, 1, "", "swapaxes"], [374, 2, 1, "", "take"], [374, 2, 1, "", "take_along_axis"], [286, 2, 1, "", "tan"], [287, 2, 1, "", "tanh"], [305, 2, 1, "", "tanhshrink"], [372, 2, 1, "", "tensor_train"], [633, 2, 1, "", "tensordot"], [633, 2, 1, "", "tensorsolve"], [306, 2, 1, "", "threshold"], [307, 2, 1, "", "thresholded_relu"], [635, 2, 1, "", "tile"], [210, 2, 1, "", "to_device"], [625, 2, 1, "", "to_dlpack"], [630, 2, 1, "", "to_ivy_shape"], [630, 2, 1, "", "to_list"], [630, 2, 1, "", "to_native_shape"], [630, 2, 1, "", "to_numpy"], [630, 2, 1, "", "to_scalar"], [374, 2, 1, "", "top_k"], [211, 2, 1, "", "total_mem_on_dev"], [212, 2, 1, "", "tpu_is_available"], [633, 2, 1, "", "trace"], [859, 2, 1, "", "trace_graph"], [860, 2, 1, "", "transpile"], [288, 2, 1, "", "trapz"], [625, 2, 1, "", "tril"], [365, 2, 1, "", "tril_indices"], [365, 2, 1, "", "trilu"], [374, 2, 1, "", "trim_zeros"], [625, 2, 1, "", "triu"], [625, 2, 1, "", "triu_indices"], [289, 2, 1, "", "trunc"], [290, 2, 1, "", "trunc_divide"], [372, 2, 1, "", "truncated_svd"], [630, 2, 1, "", "try_else_none"], [624, 2, 1, "", "try_except"], [372, 2, 1, "", "tt_matrix_to_tensor"], [372, 2, 1, "", "tucker"], [626, 2, 1, "", "type_promote_arrays"], [374, 2, 1, "", "unflatten"], [374, 2, 1, "", "unfold"], [861, 2, 1, "", "unify"], [641, 2, 1, "", "unique_all"], [374, 2, 1, "", "unique_consecutive"], [641, 2, 1, "", "unique_counts"], [641, 2, 1, "", "unique_inverse"], [641, 2, 1, "", "unique_values"], [379, 2, 1, "", "unravel_index"], [630, 2, 1, "", "unset_array_mode"], [626, 2, 1, "", "unset_default_complex_dtype"], [213, 2, 1, "", "unset_default_device"], [184, 2, 1, "", "unset_default_dtype"], [185, 2, 1, "", "unset_default_float_dtype"], [186, 2, 1, "", "unset_default_int_dtype"], [187, 2, 1, "", "unset_default_uint_dtype"], [630, 2, 1, "", "unset_exception_trace_mode"], [630, 2, 1, "", "unset_inplace_mode"], [630, 2, 1, "", "unset_min_base"], [630, 2, 1, "", "unset_min_denominator"], [630, 2, 1, "", "unset_nestable_mode"], [630, 2, 1, "", "unset_precise_mode"], [630, 2, 1, "", "unset_queue_timeout"], [630, 2, 1, "", "unset_shape_array_mode"], [630, 2, 1, "", "unset_show_func_wrapper_trace_mode"], [214, 2, 1, "", "unset_soft_device_mode"], [630, 2, 1, "", "unset_tmp_dir"], [365, 2, 1, "", "unsorted_segment_mean"], [365, 2, 1, "", "unsorted_segment_min"], [365, 2, 1, "", "unsorted_segment_sum"], [635, 2, 1, "", "unstack"], [215, 2, 1, "", "used_mem_on_dev"], [188, 2, 1, "", "valid_dtype"], [631, 2, 1, "", "value_and_grad"], [630, 2, 1, "", "value_is_nan"], [633, 2, 1, "", "vander"], [643, 2, 1, "", "var"], [633, 2, 1, "", "vecdot"], [633, 2, 1, "", "vector_norm"], [633, 2, 1, "", "vector_to_skew_symmetric_matrix"], [370, 2, 1, "", "vjp"], [630, 2, 1, "", "vmap"], [365, 2, 1, "", "vorbis_window"], [374, 2, 1, "", "vsplit"], [374, 2, 1, "", "vstack"], [640, 2, 1, "", "where"], [624, 2, 1, "", "while_loop"], [368, 2, 1, "", "xlogy"], [635, 2, 1, "", "zero_pad"], [625, 2, 1, "", "zeros"], [625, 2, 1, "", "zeros_like"], [368, 2, 1, "", "zeta"]], "ivy.Container": [[216, 0, 1, "", "abs"], [217, 0, 1, "", "acos"], [218, 0, 1, "", "acosh"], [611, 0, 1, "", "adam_step"], [612, 0, 1, "", "adam_update"], [385, 0, 1, "", "adaptive_avg_pool1d"], [386, 0, 1, "", "adaptive_avg_pool2d"], [387, 0, 1, "", "adaptive_max_pool2d"], [388, 0, 1, "", "adaptive_max_pool3d"], [219, 0, 1, "", "add"], [420, 0, 1, "", "adjoint"], [763, 0, 1, "", "all"], [530, 0, 1, "", "all_equal"], [330, 0, 1, "", "allclose"], [331, 0, 1, "", "amax"], [332, 0, 1, "", "amin"], [220, 0, 1, "", "angle"], [764, 0, 1, "", "any"], [740, 0, 1, "", "argmax"], [741, 0, 1, "", "argmin"], [749, 0, 1, "", "argsort"], [742, 0, 1, "", "argwhere"], [533, 0, 1, "", "array_equal"], [456, 0, 1, "", "as_strided"], [124, 0, 1, "", "asarray"], [221, 0, 1, "", "asin"], [222, 0, 1, "", "asinh"], [534, 0, 1, "", "assert_supports_inplace"], [457, 0, 1, "", "associative_scan"], [148, 0, 1, "", "astype"], [223, 0, 1, "", "atan"], [224, 0, 1, "", "atan2"], [225, 0, 1, "", "atanh"], [458, 0, 1, "", "atleast_1d"], [459, 0, 1, "", "atleast_2d"], [460, 0, 1, "", "atleast_3d"], [390, 0, 1, "", "avg_pool1d"], [391, 0, 1, "", "avg_pool2d"], [392, 0, 1, "", "avg_pool3d"], [497, 0, 1, "", "batch_norm"], [421, 0, 1, "", "batched_outer"], [504, 0, 1, "", "bernoulli"], [505, 0, 1, "", "beta"], [333, 0, 1, "", "binarizer"], [692, 0, 1, "", "binary_cross_entropy"], [516, 0, 1, "", "bincount"], [226, 0, 1, "", "bitwise_and"], [227, 0, 1, "", "bitwise_invert"], [228, 0, 1, "", "bitwise_left_shift"], [229, 0, 1, "", "bitwise_or"], [230, 0, 1, "", "bitwise_right_shift"], [231, 0, 1, "", "bitwise_xor"], [308, 0, 1, "", "blackman_window"], [149, 0, 1, "", "broadcast_arrays"], [461, 0, 1, "", "broadcast_shapes"], [150, 0, 1, "", "broadcast_to"], [151, 0, 1, "", "can_cast"], [232, 0, 1, "", "ceil"], [291, 0, 1, "", "celu"], [663, 0, 1, "", "cholesky"], [695, 0, 1, "", "clip"], [536, 0, 1, "", "clip_matrix_norm"], [537, 0, 1, "", "clip_vector_norm"], [464, 0, 1, "", "column_stack"], [696, 0, 1, "", "concat"], [465, 0, 1, "", "concat_from_sequence"], [422, 0, 1, "", "cond"], [334, 0, 1, "", "conj"], [697, 0, 1, "", "constant_pad"], [646, 0, 1, "", "conv1d"], [647, 0, 1, "", "conv1d_transpose"], [648, 0, 1, "", "conv2d"], [649, 0, 1, "", "conv2d_transpose"], [650, 0, 1, "", "conv3d"], [651, 0, 1, "", "conv3d_transpose"], [125, 0, 1, "", "copy_array"], [335, 0, 1, "", "copysign"], [517, 0, 1, "", "corrcoef"], [233, 0, 1, "", "cos"], [234, 0, 1, "", "cosh"], [336, 0, 1, "", "count_nonzero"], [518, 0, 1, "", "cov"], [664, 0, 1, "", "cross"], [693, 0, 1, "", "cross_entropy"], [519, 0, 1, "", "cummax"], [520, 0, 1, "", "cummin"], [753, 0, 1, "", "cumprod"], [754, 0, 1, "", "cumsum"], [393, 0, 1, "", "dct"], [235, 0, 1, "", "deg2rad"], [654, 0, 1, "", "depthwise_conv2d"], [665, 0, 1, "", "det"], [193, 0, 1, "", "dev"], [394, 0, 1, "", "dft"], [666, 0, 1, "", "diag"], [423, 0, 1, "", "diagflat"], [667, 0, 1, "", "diagonal"], [337, 0, 1, "", "diff"], [338, 0, 1, "", "digamma"], [506, 0, 1, "", "dirichlet"], [236, 0, 1, "", "divide"], [424, 0, 1, "", "dot"], [655, 0, 1, "", "dropout"], [395, 0, 1, "", "dropout1d"], [396, 0, 1, "", "dropout2d"], [397, 0, 1, "", "dropout3d"], [466, 0, 1, "", "dsplit"], [467, 0, 1, "", "dstack"], [159, 0, 1, "", "dtype"], [425, 0, 1, "", "eig"], [669, 0, 1, "", "eigh"], [426, 0, 1, "", "eigh_tridiagonal"], [427, 0, 1, "", "eigvals"], [670, 0, 1, "", "eigvalsh"], [541, 0, 1, "", "einops_rearrange"], [542, 0, 1, "", "einops_reduce"], [543, 0, 1, "", "einops_repeat"], [755, 0, 1, "", "einsum"], [292, 0, 1, "", "elu"], [398, 0, 1, "", "embedding"], [127, 0, 1, "", "empty_like"], [237, 0, 1, "", "equal"], [238, 0, 1, "", "erf"], [339, 0, 1, "", "erfc"], [340, 0, 1, "", "erfinv"], [544, 0, 1, "", "exists"], [239, 0, 1, "", "exp"], [240, 0, 1, "", "exp2"], [468, 0, 1, "", "expand"], [698, 0, 1, "", "expand_dims"], [241, 0, 1, "", "expm1"], [309, 0, 1, "", "eye_like"], [399, 0, 1, "", "fft"], [469, 0, 1, "", "fill_diagonal"], [161, 0, 1, "", "finfo"], [341, 0, 1, "", "fix"], [470, 0, 1, "", "flatten"], [699, 0, 1, "", "flip"], [471, 0, 1, "", "fliplr"], [472, 0, 1, "", "flipud"], [342, 0, 1, "", "float_power"], [242, 0, 1, "", "floor"], [243, 0, 1, "", "floor_divide"], [343, 0, 1, "", "fmax"], [244, 0, 1, "", "fmin"], [245, 0, 1, "", "fmod"], [473, 0, 1, "", "fold"], [545, 0, 1, "", "fourier_encode"], [344, 0, 1, "", "frexp"], [129, 0, 1, "", "from_dlpack"], [130, 0, 1, "", "frombuffer"], [132, 0, 1, "", "full_like"], [507, 0, 1, "", "gamma"], [548, 0, 1, "", "gather"], [549, 0, 1, "", "gather_nd"], [246, 0, 1, "", "gcd"], [106, 0, 1, "", "gelu"], [428, 0, 1, "", "general_inner_product"], [552, 0, 1, "", "get_num_dims"], [345, 0, 1, "", "gradient"], [615, 0, 1, "", "gradient_descent_update"], [247, 0, 1, "", "greater"], [248, 0, 1, "", "greater_equal"], [498, 0, 1, "", "group_norm"], [310, 0, 1, "", "hamming_window"], [311, 0, 1, "", "hann_window"], [293, 0, 1, "", "hardshrink"], [294, 0, 1, "", "hardsilu"], [107, 0, 1, "", "hardswish"], [295, 0, 1, "", "hardtanh"], [554, 0, 1, "", "has_nans"], [474, 0, 1, "", "heaviside"], [429, 0, 1, "", "higher_order_moment"], [448, 0, 1, "", "hinge_embedding_loss"], [521, 0, 1, "", "histogram"], [475, 0, 1, "", "hsplit"], [476, 0, 1, "", "hstack"], [449, 0, 1, "", "huber_loss"], [346, 0, 1, "", "hypot"], [477, 0, 1, "", "i0"], [403, 0, 1, "", "idct"], [404, 0, 1, "", "ifft"], [405, 0, 1, "", "ifftn"], [522, 0, 1, "", "igamma"], [164, 0, 1, "", "iinfo"], [249, 0, 1, "", "imag"], [430, 0, 1, "", "initialize_tucker"], [671, 0, 1, "", "inner"], [556, 0, 1, "", "inplace_decrement"], [557, 0, 1, "", "inplace_increment"], [558, 0, 1, "", "inplace_update"], [499, 0, 1, "", "instance_norm"], [407, 0, 1, "", "interpolate"], [672, 0, 1, "", "inv"], [510, 0, 1, "", "invert_permutation"], [560, 0, 1, "", "is_array"], [167, 0, 1, "", "is_bool_dtype"], [168, 0, 1, "", "is_complex_dtype"], [169, 0, 1, "", "is_float_dtype"], [171, 0, 1, "", "is_int_dtype"], [561, 0, 1, "", "is_ivy_array"], [564, 0, 1, "", "is_native_array"], [173, 0, 1, "", "is_uint_dtype"], [347, 0, 1, "", "isclose"], [250, 0, 1, "", "isfinite"], [565, 0, 1, "", "isin"], [251, 0, 1, "", "isinf"], [252, 0, 1, "", "isnan"], [253, 0, 1, "", "isreal"], [567, 0, 1, "", "itemsize"], [313, 0, 1, "", "kaiser_bessel_derived_window"], [314, 0, 1, "", "kaiser_window"], [450, 0, 1, "", "kl_div"], [432, 0, 1, "", "kron"], [451, 0, 1, "", "l1_loss"], [500, 0, 1, "", "l1_normalize"], [501, 0, 1, "", "l2_normalize"], [617, 0, 1, "", "lamb_update"], [618, 0, 1, "", "lars_update"], [733, 0, 1, "", "layer_norm"], [254, 0, 1, "", "lcm"], [348, 0, 1, "", "ldexp"], [108, 0, 1, "", "leaky_relu"], [349, 0, 1, "", "lerp"], [255, 0, 1, "", "less"], [256, 0, 1, "", "less_equal"], [511, 0, 1, "", "lexsort"], [350, 0, 1, "", "lgamma"], [656, 0, 1, "", "linear"], [133, 0, 1, "", "linspace"], [257, 0, 1, "", "log"], [258, 0, 1, "", "log10"], [259, 0, 1, "", "log1p"], [260, 0, 1, "", "log2"], [452, 0, 1, "", "log_poisson_loss"], [109, 0, 1, "", "log_softmax"], [261, 0, 1, "", "logaddexp"], [262, 0, 1, "", "logaddexp2"], [263, 0, 1, "", "logical_and"], [264, 0, 1, "", "logical_not"], [265, 0, 1, "", "logical_or"], [266, 0, 1, "", "logical_xor"], [296, 0, 1, "", "logit"], [297, 0, 1, "", "logsigmoid"], [134, 0, 1, "", "logspace"], [503, 0, 1, "", "lp_normalize"], [658, 0, 1, "", "lstm_update"], [436, 0, 1, "", "make_svd_non_negative"], [673, 0, 1, "", "matmul"], [478, 0, 1, "", "matricize"], [437, 0, 1, "", "matrix_exp"], [674, 0, 1, "", "matrix_norm"], [675, 0, 1, "", "matrix_power"], [676, 0, 1, "", "matrix_rank"], [677, 0, 1, "", "matrix_transpose"], [756, 0, 1, "", "max"], [408, 0, 1, "", "max_pool1d"], [409, 0, 1, "", "max_pool2d"], [410, 0, 1, "", "max_pool3d"], [411, 0, 1, "", "max_unpool1d"], [267, 0, 1, "", "maximum"], [757, 0, 1, "", "mean"], [523, 0, 1, "", "median"], [315, 0, 1, "", "mel_weight_matrix"], [135, 0, 1, "", "meshgrid"], [758, 0, 1, "", "min"], [268, 0, 1, "", "minimum"], [110, 0, 1, "", "mish"], [438, 0, 1, "", "mode_dot"], [351, 0, 1, "", "modf"], [479, 0, 1, "", "moveaxis"], [750, 0, 1, "", "msort"], [439, 0, 1, "", "multi_dot"], [659, 0, 1, "", "multi_head_attention"], [440, 0, 1, "", "multi_mode_dot"], [734, 0, 1, "", "multinomial"], [269, 0, 1, "", "multiply"], [270, 0, 1, "", "nan_to_num"], [524, 0, 1, "", "nanmean"], [525, 0, 1, "", "nanmedian"], [526, 0, 1, "", "nanmin"], [527, 0, 1, "", "nanprod"], [352, 0, 1, "", "nansum"], [136, 0, 1, "", "native_array"], [271, 0, 1, "", "negative"], [353, 0, 1, "", "nextafter"], [743, 0, 1, "", "nonzero"], [272, 0, 1, "", "not_equal"], [137, 0, 1, "", "one_hot"], [139, 0, 1, "", "ones_like"], [619, 0, 1, "", "optimizer_update"], [529, 0, 1, "", "optional_get_element"], [678, 0, 1, "", "outer"], [480, 0, 1, "", "pad"], [481, 0, 1, "", "partial_fold"], [482, 0, 1, "", "partial_tensor_to_vec"], [441, 0, 1, "", "partial_tucker"], [483, 0, 1, "", "partial_unfold"], [484, 0, 1, "", "partial_vec_to_tensor"], [700, 0, 1, "", "permute_dims"], [679, 0, 1, "", "pinv"], [508, 0, 1, "", "poisson"], [453, 0, 1, "", "poisson_nll_loss"], [318, 0, 1, "", "polyval"], [273, 0, 1, "", "positive"], [274, 0, 1, "", "pow"], [298, 0, 1, "", "prelu"], [759, 0, 1, "", "prod"], [485, 0, 1, "", "put_along_axis"], [680, 0, 1, "", "qr"], [528, 0, 1, "", "quantile"], [275, 0, 1, "", "rad2deg"], [735, 0, 1, "", "randint"], [736, 0, 1, "", "random_normal"], [737, 0, 1, "", "random_uniform"], [276, 0, 1, "", "real"], [277, 0, 1, "", "reciprocal"], [359, 0, 1, "", "reduce"], [414, 0, 1, "", "reduce_window"], [111, 0, 1, "", "relu"], [299, 0, 1, "", "relu6"], [278, 0, 1, "", "remainder"], [701, 0, 1, "", "repeat"], [702, 0, 1, "", "reshape"], [176, 0, 1, "", "result_type"], [415, 0, 1, "", "rfft"], [416, 0, 1, "", "rfftn"], [703, 0, 1, "", "roll"], [486, 0, 1, "", "rot90"], [279, 0, 1, "", "round"], [662, 0, 1, "", "scaled_dot_product_attention"], [300, 0, 1, "", "scaled_tanh"], [572, 0, 1, "", "scatter_flat"], [573, 0, 1, "", "scatter_nd"], [751, 0, 1, "", "searchsorted"], [301, 0, 1, "", "selu"], [739, 0, 1, "", "shuffle"], [112, 0, 1, "", "sigmoid"], [280, 0, 1, "", "sign"], [354, 0, 1, "", "signbit"], [302, 0, 1, "", "silu"], [281, 0, 1, "", "sin"], [355, 0, 1, "", "sinc"], [282, 0, 1, "", "sinh"], [587, 0, 1, "", "size"], [418, 0, 1, "", "sliding_window"], [681, 0, 1, "", "slogdet"], [454, 0, 1, "", "smooth_l1_loss"], [455, 0, 1, "", "soft_margin_loss"], [487, 0, 1, "", "soft_thresholding"], [113, 0, 1, "", "softmax"], [114, 0, 1, "", "softplus"], [303, 0, 1, "", "softshrink"], [682, 0, 1, "", "solve"], [752, 0, 1, "", "sort"], [694, 0, 1, "", "sparse_cross_entropy"], [356, 0, 1, "", "sparsify_tensor"], [704, 0, 1, "", "split"], [283, 0, 1, "", "sqrt"], [284, 0, 1, "", "square"], [705, 0, 1, "", "squeeze"], [588, 0, 1, "", "stable_divide"], [589, 0, 1, "", "stable_pow"], [706, 0, 1, "", "stack"], [760, 0, 1, "", "std"], [419, 0, 1, "", "stft"], [620, 0, 1, "", "stop_gradient"], [590, 0, 1, "", "strides"], [285, 0, 1, "", "subtract"], [761, 0, 1, "", "sum"], [591, 0, 1, "", "supports_inplace_updates"], [683, 0, 1, "", "svd"], [443, 0, 1, "", "svd_flip"], [684, 0, 1, "", "svdvals"], [707, 0, 1, "", "swapaxes"], [488, 0, 1, "", "take"], [489, 0, 1, "", "take_along_axis"], [286, 0, 1, "", "tan"], [287, 0, 1, "", "tanh"], [305, 0, 1, "", "tanhshrink"], [444, 0, 1, "", "tensor_train"], [685, 0, 1, "", "tensordot"], [686, 0, 1, "", "tensorsolve"], [306, 0, 1, "", "threshold"], [307, 0, 1, "", "thresholded_relu"], [708, 0, 1, "", "tile"], [210, 0, 1, "", "to_device"], [593, 0, 1, "", "to_list"], [595, 0, 1, "", "to_numpy"], [596, 0, 1, "", "to_scalar"], [490, 0, 1, "", "top_k"], [687, 0, 1, "", "trace"], [288, 0, 1, "", "trapz"], [141, 0, 1, "", "tril"], [324, 0, 1, "", "tril_indices"], [325, 0, 1, "", "trilu"], [491, 0, 1, "", "trim_zeros"], [142, 0, 1, "", "triu"], [143, 0, 1, "", "triu_indices"], [289, 0, 1, "", "trunc"], [290, 0, 1, "", "trunc_divide"], [445, 0, 1, "", "truncated_svd"], [446, 0, 1, "", "tt_matrix_to_tensor"], [447, 0, 1, "", "tucker"], [492, 0, 1, "", "unflatten"], [493, 0, 1, "", "unfold"], [745, 0, 1, "", "unique_all"], [494, 0, 1, "", "unique_consecutive"], [746, 0, 1, "", "unique_counts"], [747, 0, 1, "", "unique_inverse"], [748, 0, 1, "", "unique_values"], [509, 0, 1, "", "unravel_index"], [326, 0, 1, "", "unsorted_segment_mean"], [327, 0, 1, "", "unsorted_segment_min"], [328, 0, 1, "", "unsorted_segment_sum"], [709, 0, 1, "", "unstack"], [609, 0, 1, "", "value_is_nan"], [688, 0, 1, "", "vander"], [762, 0, 1, "", "var"], [689, 0, 1, "", "vecdot"], [690, 0, 1, "", "vector_norm"], [691, 0, 1, "", "vector_to_skew_symmetric_matrix"], [329, 0, 1, "", "vorbis_window"], [495, 0, 1, "", "vsplit"], [496, 0, 1, "", "vstack"], [744, 0, 1, "", "where"], [357, 0, 1, "", "xlogy"], [710, 0, 1, "", "zero_pad"], [145, 0, 1, "", "zeros_like"], [358, 0, 1, "", "zeta"]], "ivy.data_classes.array": [[47, 3, 0, "-", "activations"], [98, 3, 0, "-", "array"], [48, 3, 0, "-", "conversions"], [49, 3, 0, "-", "creation"], [50, 3, 0, "-", "data_type"], [51, 3, 0, "-", "device"], [52, 3, 0, "-", "elementwise"], [53, 3, 0, "-", "experimental"], [54, 3, 0, "-", "general"], [55, 3, 0, "-", "gradients"], [56, 3, 0, "-", "image"], [57, 3, 0, "-", "layers"], [58, 3, 0, "-", "linear_algebra"], [59, 3, 0, "-", "losses"], [60, 3, 0, "-", "manipulation"], [61, 3, 0, "-", "norms"], [62, 3, 0, "-", "random"], [63, 3, 0, "-", "searching"], [64, 3, 0, "-", "set"], [65, 3, 0, "-", "sorting"], [66, 3, 0, "-", "statistical"], [67, 3, 0, "-", "utility"], [68, 3, 0, "-", "wrapping"]], "ivy.data_classes.array.activations": [[47, 1, 1, "", "_ArrayWithActivations"]], "ivy.data_classes.array.activations._ArrayWithActivations": [[47, 4, 1, "", "_abc_impl"], [47, 0, 1, "", "gelu"], [47, 0, 1, "", "hardswish"], [47, 0, 1, "", "leaky_relu"], [47, 0, 1, "", "log_softmax"], [47, 0, 1, "", "mish"], [47, 0, 1, "", "relu"], [47, 0, 1, "", "sigmoid"], [47, 0, 1, "", "softmax"], [47, 0, 1, "", "softplus"]], "ivy.data_classes.array.array": [[98, 1, 1, "", "Array"]], "ivy.data_classes.array.array.Array": [[98, 5, 1, "", "T"], [98, 0, 1, "", "__abs__"], [98, 0, 1, "", "__add__"], [98, 0, 1, "", "__eq__"], [98, 0, 1, "", "__ge__"], [98, 0, 1, "", "__gt__"], [98, 0, 1, "", "__init__"], [98, 0, 1, "", "__le__"], [98, 0, 1, "", "__lt__"], [98, 0, 1, "", "__ne__"], [98, 0, 1, "", "__pow__"], [98, 0, 1, "", "__radd__"], [98, 0, 1, "", "__rrshift__"], [98, 0, 1, "", "__rshift__"], [98, 0, 1, "", "__rsub__"], [98, 0, 1, "", "__sub__"], [98, 0, 1, "", "__truediv__"], [98, 0, 1, "", "__xor__"], [98, 5, 1, "", "backend"], [98, 5, 1, "", "base"], [98, 5, 1, "", "data"], [98, 5, 1, "", "device"], [98, 5, 1, "", "dtype"], [98, 5, 1, "", "dynamic_backend"], [98, 5, 1, "", "imag"], [98, 5, 1, "", "itemsize"], [98, 5, 1, "", "mT"], [98, 5, 1, "", "ndim"], [98, 5, 1, "", "real"], [98, 5, 1, "", "shape"], [98, 5, 1, "", "size"], [98, 5, 1, "", "strides"]], "ivy.data_classes.array.conversions": [[48, 2, 1, "", "_array_to_new_backend"], [48, 2, 1, "", "_to_ivy"], [48, 2, 1, "", "_to_native"], [48, 2, 1, "", "_to_new_backend"], [48, 2, 1, "", "args_to_ivy"], [48, 2, 1, "", "args_to_native"], [48, 2, 1, "", "args_to_new_backend"], [48, 2, 1, "", "to_ivy"], [48, 2, 1, "", "to_native"], [48, 2, 1, "", "to_new_backend"]], "ivy.data_classes.array.creation": [[49, 1, 1, "", "_ArrayWithCreation"]], "ivy.data_classes.array.creation._ArrayWithCreation": [[49, 4, 1, "", "_abc_impl"], [49, 0, 1, "", "asarray"], [49, 0, 1, "", "copy_array"], [49, 0, 1, "", "empty_like"], [49, 0, 1, "", "from_dlpack"], [49, 0, 1, "", "full_like"], [49, 0, 1, "", "linspace"], [49, 0, 1, "", "logspace"], [49, 0, 1, "", "meshgrid"], [49, 0, 1, "", "native_array"], [49, 0, 1, "", "one_hot"], [49, 0, 1, "", "ones_like"], [49, 0, 1, "", "tril"], [49, 0, 1, "", "triu"], [49, 0, 1, "", "zeros_like"]], "ivy.data_classes.array.data_type": [[50, 1, 1, "", "_ArrayWithDataTypes"]], "ivy.data_classes.array.data_type._ArrayWithDataTypes": [[50, 4, 1, "", "_abc_impl"], [50, 0, 1, "", "astype"], [50, 0, 1, "", "broadcast_arrays"], [50, 0, 1, "", "broadcast_to"], [50, 0, 1, "", "can_cast"], [50, 0, 1, "", "dtype"], [50, 0, 1, "", "finfo"], [50, 0, 1, "", "iinfo"], [50, 0, 1, "", "is_bool_dtype"], [50, 0, 1, "", "is_float_dtype"], [50, 0, 1, "", "is_int_dtype"], [50, 0, 1, "", "is_uint_dtype"], [50, 0, 1, "", "result_type"]], "ivy.data_classes.array.device": [[51, 1, 1, "", "_ArrayWithDevice"]], "ivy.data_classes.array.device._ArrayWithDevice": [[51, 4, 1, "", "_abc_impl"], [51, 0, 1, "", "dev"], [51, 0, 1, "", "to_device"]], "ivy.data_classes.array.elementwise": [[52, 1, 1, "", "_ArrayWithElementwise"]], "ivy.data_classes.array.elementwise._ArrayWithElementwise": [[52, 4, 1, "", "_abc_impl"], [52, 0, 1, "", "abs"], [52, 0, 1, "", "acos"], [52, 0, 1, "", "acosh"], [52, 0, 1, "", "add"], [52, 0, 1, "", "angle"], [52, 0, 1, "", "asin"], [52, 0, 1, "", "asinh"], [52, 0, 1, "", "atan"], [52, 0, 1, "", "atan2"], [52, 0, 1, "", "atanh"], [52, 0, 1, "", "bitwise_and"], [52, 0, 1, "", "bitwise_invert"], [52, 0, 1, "", "bitwise_left_shift"], [52, 0, 1, "", "bitwise_or"], [52, 0, 1, "", "bitwise_right_shift"], [52, 0, 1, "", "bitwise_xor"], [52, 0, 1, "", "ceil"], [52, 0, 1, "", "cos"], [52, 0, 1, "", "cosh"], [52, 0, 1, "", "deg2rad"], [52, 0, 1, "", "divide"], [52, 0, 1, "", "equal"], [52, 0, 1, "", "erf"], [52, 0, 1, "", "exp"], [52, 0, 1, "", "exp2"], [52, 0, 1, "", "expm1"], [52, 0, 1, "", "floor"], [52, 0, 1, "", "floor_divide"], [52, 0, 1, "", "fmin"], [52, 0, 1, "", "gcd"], [52, 0, 1, "", "greater"], [52, 0, 1, "", "greater_equal"], [52, 0, 1, "", "isfinite"], [52, 0, 1, "", "isinf"], [52, 0, 1, "", "isnan"], [52, 0, 1, "", "isreal"], [52, 0, 1, "", "lcm"], [52, 0, 1, "", "less"], [52, 0, 1, "", "less_equal"], [52, 0, 1, "", "log"], [52, 0, 1, "", "log10"], [52, 0, 1, "", "log1p"], [52, 0, 1, "", "log2"], [52, 0, 1, "", "logaddexp"], [52, 0, 1, "", "logaddexp2"], [52, 0, 1, "", "logical_and"], [52, 0, 1, "", "logical_not"], [52, 0, 1, "", "logical_or"], [52, 0, 1, "", "logical_xor"], [52, 0, 1, "", "maximum"], [52, 0, 1, "", "minimum"], [52, 0, 1, "", "multiply"], [52, 0, 1, "", "nan_to_num"], [52, 0, 1, "", "negative"], [52, 0, 1, "", "not_equal"], [52, 0, 1, "", "positive"], [52, 0, 1, "", "pow"], [52, 0, 1, "", "rad2deg"], [52, 0, 1, "", "real"], [52, 0, 1, "", "reciprocal"], [52, 0, 1, "", "remainder"], [52, 0, 1, "", "round"], [52, 0, 1, "", "sign"], [52, 0, 1, "", "sin"], [52, 0, 1, "", "sinh"], [52, 0, 1, "", "sqrt"], [52, 0, 1, "", "square"], [52, 0, 1, "", "subtract"], [52, 0, 1, "", "tan"], [52, 0, 1, "", "tanh"], [52, 0, 1, "", "trapz"], [52, 0, 1, "", "trunc"], [52, 0, 1, "", "trunc_divide"]], "ivy.data_classes.array.experimental": [[53, 3, 0, "-", "activations"], [53, 3, 0, "-", "conversions"], [53, 3, 0, "-", "creation"], [53, 3, 0, "-", "data_type"], [53, 3, 0, "-", "device"], [53, 3, 0, "-", "elementwise"], [53, 3, 0, "-", "general"], [53, 3, 0, "-", "gradients"], [53, 3, 0, "-", "image"], [53, 3, 0, "-", "layers"], [53, 3, 0, "-", "linear_algebra"], [53, 3, 0, "-", "losses"], [53, 3, 0, "-", "manipulation"], [53, 3, 0, "-", "norms"], [53, 3, 0, "-", "random"], [53, 3, 0, "-", "searching"], [53, 3, 0, "-", "set"], [53, 3, 0, "-", "sorting"], [53, 3, 0, "-", "statistical"], [53, 3, 0, "-", "utility"]], "ivy.data_classes.array.experimental.activations": [[53, 1, 1, "", "_ArrayWithActivationsExperimental"]], "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental": [[53, 4, 1, "", "_abc_impl"], [53, 0, 1, "", "celu"], [53, 0, 1, "", "elu"], [53, 0, 1, "", "hardshrink"], [53, 0, 1, "", "hardsilu"], [53, 0, 1, "", "hardtanh"], [53, 0, 1, "", "logit"], [53, 0, 1, "", "logsigmoid"], [53, 0, 1, "", "prelu"], [53, 0, 1, "", "relu6"], [53, 0, 1, "", "scaled_tanh"], [53, 0, 1, "", "selu"], [53, 0, 1, "", "silu"], [53, 0, 1, "", "softshrink"], [53, 0, 1, "", "tanhshrink"], [53, 0, 1, "", "threshold"], [53, 0, 1, "", "thresholded_relu"]], "ivy.data_classes.array.experimental.conversions": [[53, 1, 1, "", "_ArrayWithConversionsExperimental"]], "ivy.data_classes.array.experimental.conversions._ArrayWithConversionsExperimental": [[53, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.creation": [[53, 1, 1, "", "_ArrayWithCreationExperimental"], [53, 2, 1, "", "polyval"]], "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental": [[53, 4, 1, "", "_abc_impl"], [53, 0, 1, "", "blackman_window"], [53, 0, 1, "", "eye_like"], [53, 0, 1, "", "mel_weight_matrix"], [53, 0, 1, "", "trilu"], [53, 0, 1, "", "unsorted_segment_mean"], [53, 0, 1, "", "unsorted_segment_min"], [53, 0, 1, "", "unsorted_segment_sum"]], "ivy.data_classes.array.experimental.data_type": [[53, 1, 1, "", "_ArrayWithData_typeExperimental"]], "ivy.data_classes.array.experimental.data_type._ArrayWithData_typeExperimental": [[53, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.device": [[53, 1, 1, "", "_ArrayWithDeviceExperimental"]], "ivy.data_classes.array.experimental.device._ArrayWithDeviceExperimental": [[53, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.elementwise": [[53, 1, 1, "", "_ArrayWithElementWiseExperimental"]], "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental": [[53, 4, 1, "", "_abc_impl"], [53, 0, 1, "", "allclose"], [53, 0, 1, "", "amax"], [53, 0, 1, "", "amin"], [53, 0, 1, "", "binarizer"], [53, 0, 1, "", "conj"], [53, 0, 1, "", "copysign"], [53, 0, 1, "", "count_nonzero"], [53, 0, 1, "", "diff"], [53, 0, 1, "", "digamma"], [53, 0, 1, "", "erfc"], [53, 0, 1, "", "erfinv"], [53, 0, 1, "", "fix"], [53, 0, 1, "", "float_power"], [53, 0, 1, "", "fmax"], [53, 0, 1, "", "fmod"], [53, 0, 1, "", "frexp"], [53, 0, 1, "", "gradient"], [53, 0, 1, "", "hypot"], [53, 0, 1, "", "isclose"], [53, 0, 1, "", "ldexp"], [53, 0, 1, "", "lerp"], [53, 0, 1, "", "lgamma"], [53, 0, 1, "", "modf"], [53, 0, 1, "", "nansum"], [53, 0, 1, "", "nextafter"], [53, 0, 1, "", "signbit"], [53, 0, 1, "", "sinc"], [53, 0, 1, "", "sparsify_tensor"], [53, 0, 1, "", "xlogy"], [53, 0, 1, "", "zeta"]], "ivy.data_classes.array.experimental.general": [[53, 1, 1, "", "_ArrayWithGeneralExperimental"]], "ivy.data_classes.array.experimental.general._ArrayWithGeneralExperimental": [[53, 4, 1, "", "_abc_impl"], [53, 0, 1, "", "reduce"]], "ivy.data_classes.array.experimental.gradients": [[53, 1, 1, "", "_ArrayWithGradientsExperimental"]], "ivy.data_classes.array.experimental.gradients._ArrayWithGradientsExperimental": [[53, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.image": [[53, 1, 1, "", "_ArrayWithImageExperimental"]], "ivy.data_classes.array.experimental.image._ArrayWithImageExperimental": [[53, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.layers": [[53, 1, 1, "", "_ArrayWithLayersExperimental"]], "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental": [[53, 4, 1, "", "_abc_impl"], [53, 0, 1, "", "adaptive_avg_pool1d"], [53, 0, 1, "", "adaptive_avg_pool2d"], [53, 0, 1, "", "adaptive_max_pool2d"], [53, 0, 1, "", "adaptive_max_pool3d"], [53, 0, 1, "", "avg_pool1d"], [53, 0, 1, "", "avg_pool2d"], [53, 0, 1, "", "avg_pool3d"], [53, 0, 1, "", "dct"], [53, 0, 1, "", "dft"], [53, 0, 1, "", "embedding"], [53, 0, 1, "", "fft"], [53, 0, 1, "", "fft2"], [53, 0, 1, "", "idct"], [53, 0, 1, "", "ifft"], [53, 0, 1, "", "ifftn"], [53, 0, 1, "", "interpolate"], [53, 0, 1, "", "max_pool1d"], [53, 0, 1, "", "max_pool2d"], [53, 0, 1, "", "max_pool3d"], [53, 0, 1, "", "max_unpool1d"], [53, 0, 1, "", "reduce_window"], [53, 0, 1, "", "rfft"], [53, 0, 1, "", "rfftn"], [53, 0, 1, "", "sliding_window"], [53, 0, 1, "", "stft"]], "ivy.data_classes.array.experimental.linear_algebra": [[53, 1, 1, "", "_ArrayWithLinearAlgebraExperimental"]], "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental": [[53, 4, 1, "", "_abc_impl"], [53, 0, 1, "", "adjoint"], [53, 0, 1, "", "batched_outer"], [53, 0, 1, "", "cond"], [53, 0, 1, "", "diagflat"], [53, 0, 1, "", "dot"], [53, 0, 1, "", "eig"], [53, 0, 1, "", "eigh_tridiagonal"], [53, 0, 1, "", "eigvals"], [53, 0, 1, "", "general_inner_product"], [53, 0, 1, "", "higher_order_moment"], [53, 0, 1, "", "initialize_tucker"], [53, 0, 1, "", "kron"], [53, 0, 1, "", "make_svd_non_negative"], [53, 0, 1, "", "matrix_exp"], [53, 0, 1, "", "mode_dot"], [53, 0, 1, "", "multi_dot"], [53, 0, 1, "", "multi_mode_dot"], [53, 0, 1, "", "partial_tucker"], [53, 0, 1, "", "svd_flip"], [53, 0, 1, "", "tensor_train"], [53, 0, 1, "", "truncated_svd"], [53, 0, 1, "", "tt_matrix_to_tensor"], [53, 0, 1, "", "tucker"]], "ivy.data_classes.array.experimental.losses": [[53, 1, 1, "", "_ArrayWithLossesExperimental"]], "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental": [[53, 4, 1, "", "_abc_impl"], [53, 0, 1, "", "hinge_embedding_loss"], [53, 0, 1, "", "huber_loss"], [53, 0, 1, "", "kl_div"], [53, 0, 1, "", "l1_loss"], [53, 0, 1, "", "log_poisson_loss"], [53, 0, 1, "", "poisson_nll_loss"], [53, 0, 1, "", "smooth_l1_loss"], [53, 0, 1, "", "soft_margin_loss"]], "ivy.data_classes.array.experimental.manipulation": [[53, 1, 1, "", "_ArrayWithManipulationExperimental"]], "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental": [[53, 4, 1, "", "_abc_impl"], [53, 0, 1, "", "as_strided"], [53, 0, 1, "", "associative_scan"], [53, 0, 1, "", "atleast_1d"], [53, 0, 1, "", "atleast_2d"], [53, 0, 1, "", "atleast_3d"], [53, 0, 1, "", "column_stack"], [53, 0, 1, "", "concat_from_sequence"], [53, 0, 1, "", "dsplit"], [53, 0, 1, "", "dstack"], [53, 0, 1, "", "expand"], [53, 0, 1, "", "fill_diagonal"], [53, 0, 1, "", "flatten"], [53, 0, 1, "", "fliplr"], [53, 0, 1, "", "flipud"], [53, 0, 1, "", "fold"], [53, 0, 1, "", "heaviside"], [53, 0, 1, "", "hsplit"], [53, 0, 1, "", "hstack"], [53, 0, 1, "", "i0"], [53, 0, 1, "", "matricize"], [53, 0, 1, "", "moveaxis"], [53, 0, 1, "", "pad"], [53, 0, 1, "", "partial_fold"], [53, 0, 1, "", "partial_tensor_to_vec"], [53, 0, 1, "", "partial_unfold"], [53, 0, 1, "", "partial_vec_to_tensor"], [53, 0, 1, "", "put_along_axis"], [53, 0, 1, "", "rot90"], [53, 0, 1, "", "soft_thresholding"], [53, 0, 1, "", "take"], [53, 0, 1, "", "take_along_axis"], [53, 0, 1, "", "top_k"], [53, 0, 1, "", "trim_zeros"], [53, 0, 1, "", "unflatten"], [53, 0, 1, "", "unfold"], [53, 0, 1, "", "unique_consecutive"], [53, 0, 1, "", "vsplit"], [53, 0, 1, "", "vstack"]], "ivy.data_classes.array.experimental.norms": [[53, 1, 1, "", "_ArrayWithNormsExperimental"]], "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental": [[53, 4, 1, "", "_abc_impl"], [53, 0, 1, "", "batch_norm"], [53, 0, 1, "", "group_norm"], [53, 0, 1, "", "instance_norm"], [53, 0, 1, "", "l1_normalize"], [53, 0, 1, "", "l2_normalize"], [53, 0, 1, "", "lp_normalize"]], "ivy.data_classes.array.experimental.random": [[53, 1, 1, "", "_ArrayWithRandomExperimental"]], "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental": [[53, 4, 1, "", "_abc_impl"], [53, 0, 1, "", "bernoulli"], [53, 0, 1, "", "beta"], [53, 0, 1, "", "dirichlet"], [53, 0, 1, "", "gamma"], [53, 0, 1, "", "poisson"]], "ivy.data_classes.array.experimental.searching": [[53, 1, 1, "", "_ArrayWithSearchingExperimental"]], "ivy.data_classes.array.experimental.searching._ArrayWithSearchingExperimental": [[53, 4, 1, "", "_abc_impl"], [53, 0, 1, "", "unravel_index"]], "ivy.data_classes.array.experimental.set": [[53, 1, 1, "", "_ArrayWithSetExperimental"]], "ivy.data_classes.array.experimental.set._ArrayWithSetExperimental": [[53, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.sorting": [[53, 1, 1, "", "_ArrayWithSortingExperimental"]], "ivy.data_classes.array.experimental.sorting._ArrayWithSortingExperimental": [[53, 4, 1, "", "_abc_impl"], [53, 0, 1, "", "lexsort"]], "ivy.data_classes.array.experimental.statistical": [[53, 1, 1, "", "_ArrayWithStatisticalExperimental"]], "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental": [[53, 4, 1, "", "_abc_impl"], [53, 0, 1, "", "bincount"], [53, 0, 1, "", "corrcoef"], [53, 0, 1, "", "cov"], [53, 0, 1, "", "cummax"], [53, 0, 1, "", "cummin"], [53, 0, 1, "", "histogram"], [53, 0, 1, "", "igamma"], [53, 0, 1, "", "median"], [53, 0, 1, "", "nanmean"], [53, 0, 1, "", "nanmedian"], [53, 0, 1, "", "nanmin"], [53, 0, 1, "", "nanprod"], [53, 0, 1, "", "quantile"]], "ivy.data_classes.array.experimental.utility": [[53, 1, 1, "", "_ArrayWithUtilityExperimental"]], "ivy.data_classes.array.experimental.utility._ArrayWithUtilityExperimental": [[53, 4, 1, "", "_abc_impl"], [53, 0, 1, "", "optional_get_element"]], "ivy.data_classes.array.general": [[54, 1, 1, "", "_ArrayWithGeneral"]], "ivy.data_classes.array.general._ArrayWithGeneral": [[54, 4, 1, "", "_abc_impl"], [54, 0, 1, "", "all_equal"], [54, 0, 1, "", "array_equal"], [54, 0, 1, "", "assert_supports_inplace"], [54, 0, 1, "", "clip_matrix_norm"], [54, 0, 1, "", "clip_vector_norm"], [54, 0, 1, "", "default"], [54, 0, 1, "", "einops_rearrange"], [54, 0, 1, "", "einops_reduce"], [54, 0, 1, "", "einops_repeat"], [54, 0, 1, "", "exists"], [54, 0, 1, "", "fourier_encode"], [54, 0, 1, "", "gather"], [54, 0, 1, "", "gather_nd"], [54, 0, 1, "", "get_num_dims"], [54, 0, 1, "", "has_nans"], [54, 0, 1, "", "inplace_decrement"], [54, 0, 1, "", "inplace_increment"], [54, 0, 1, "", "inplace_update"], [54, 0, 1, "", "is_array"], [54, 0, 1, "", "is_ivy_array"], [54, 0, 1, "", "is_ivy_container"], [54, 0, 1, "", "is_native_array"], [54, 0, 1, "", "isin"], [54, 0, 1, "", "scatter_flat"], [54, 0, 1, "", "scatter_nd"], [54, 0, 1, "", "stable_divide"], [54, 0, 1, "", "stable_pow"], [54, 0, 1, "", "supports_inplace_updates"], [54, 0, 1, "", "to_file"], [54, 0, 1, "", "to_list"], [54, 0, 1, "", "to_numpy"], [54, 0, 1, "", "to_scalar"], [54, 0, 1, "", "value_is_nan"]], "ivy.data_classes.array.gradients": [[55, 1, 1, "", "_ArrayWithGradients"]], "ivy.data_classes.array.gradients._ArrayWithGradients": [[55, 4, 1, "", "_abc_impl"], [55, 0, 1, "", "adam_step"], [55, 0, 1, "", "adam_update"], [55, 0, 1, "", "gradient_descent_update"], [55, 0, 1, "", "lamb_update"], [55, 0, 1, "", "lars_update"], [55, 0, 1, "", "optimizer_update"], [55, 0, 1, "", "stop_gradient"]], "ivy.data_classes.array.image": [[56, 1, 1, "", "_ArrayWithImage"]], "ivy.data_classes.array.image._ArrayWithImage": [[56, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.layers": [[57, 1, 1, "", "_ArrayWithLayers"]], "ivy.data_classes.array.layers._ArrayWithLayers": [[57, 4, 1, "", "_abc_impl"], [57, 0, 1, "", "conv1d"], [57, 0, 1, "", "conv1d_transpose"], [57, 0, 1, "", "conv2d"], [57, 0, 1, "", "conv2d_transpose"], [57, 0, 1, "", "conv3d"], [57, 0, 1, "", "conv3d_transpose"], [57, 0, 1, "", "depthwise_conv2d"], [57, 0, 1, "", "dropout"], [57, 0, 1, "", "dropout1d"], [57, 0, 1, "", "dropout2d"], [57, 0, 1, "", "dropout3d"], [57, 0, 1, "", "linear"], [57, 0, 1, "", "lstm_update"], [57, 0, 1, "", "multi_head_attention"], [57, 0, 1, "", "scaled_dot_product_attention"]], "ivy.data_classes.array.linear_algebra": [[58, 1, 1, "", "_ArrayWithLinearAlgebra"]], "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra": [[58, 4, 1, "", "_abc_impl"], [58, 0, 1, "", "cholesky"], [58, 0, 1, "", "cross"], [58, 0, 1, "", "det"], [58, 0, 1, "", "diag"], [58, 0, 1, "", "diagonal"], [58, 0, 1, "", "eig"], [58, 0, 1, "", "eigh"], [58, 0, 1, "", "eigvalsh"], [58, 0, 1, "", "inner"], [58, 0, 1, "", "inv"], [58, 0, 1, "", "matmul"], [58, 0, 1, "", "matrix_norm"], [58, 0, 1, "", "matrix_power"], [58, 0, 1, "", "matrix_rank"], [58, 0, 1, "", "matrix_transpose"], [58, 0, 1, "", "outer"], [58, 0, 1, "", "pinv"], [58, 0, 1, "", "qr"], [58, 0, 1, "", "slogdet"], [58, 0, 1, "", "solve"], [58, 0, 1, "", "svd"], [58, 0, 1, "", "svdvals"], [58, 0, 1, "", "tensordot"], [58, 0, 1, "", "tensorsolve"], [58, 0, 1, "", "trace"], [58, 0, 1, "", "vander"], [58, 0, 1, "", "vecdot"], [58, 0, 1, "", "vector_norm"], [58, 0, 1, "", "vector_to_skew_symmetric_matrix"]], "ivy.data_classes.array.losses": [[59, 1, 1, "", "_ArrayWithLosses"]], "ivy.data_classes.array.losses._ArrayWithLosses": [[59, 4, 1, "", "_abc_impl"], [59, 0, 1, "", "binary_cross_entropy"], [59, 0, 1, "", "cross_entropy"], [59, 0, 1, "", "sparse_cross_entropy"]], "ivy.data_classes.array.manipulation": [[60, 1, 1, "", "_ArrayWithManipulation"]], "ivy.data_classes.array.manipulation._ArrayWithManipulation": [[60, 4, 1, "", "_abc_impl"], [60, 0, 1, "", "clip"], [60, 0, 1, "", "concat"], [60, 0, 1, "", "constant_pad"], [60, 0, 1, "", "expand_dims"], [60, 0, 1, "", "flip"], [60, 0, 1, "", "permute_dims"], [60, 0, 1, "", "repeat"], [60, 0, 1, "", "reshape"], [60, 0, 1, "", "roll"], [60, 0, 1, "", "split"], [60, 0, 1, "", "squeeze"], [60, 0, 1, "", "stack"], [60, 0, 1, "", "swapaxes"], [60, 0, 1, "", "tile"], [60, 0, 1, "", "unstack"], [60, 0, 1, "", "view"], [60, 0, 1, "", "zero_pad"]], "ivy.data_classes.array.norms": [[61, 1, 1, "", "_ArrayWithNorms"]], "ivy.data_classes.array.norms._ArrayWithNorms": [[61, 4, 1, "", "_abc_impl"], [61, 0, 1, "", "layer_norm"]], "ivy.data_classes.array.random": [[62, 1, 1, "", "_ArrayWithRandom"]], "ivy.data_classes.array.random._ArrayWithRandom": [[62, 4, 1, "", "_abc_impl"], [62, 0, 1, "", "multinomial"], [62, 0, 1, "", "randint"], [62, 0, 1, "", "random_normal"], [62, 0, 1, "", "random_uniform"], [62, 0, 1, "", "shuffle"]], "ivy.data_classes.array.searching": [[63, 1, 1, "", "_ArrayWithSearching"]], "ivy.data_classes.array.searching._ArrayWithSearching": [[63, 4, 1, "", "_abc_impl"], [63, 0, 1, "", "argmax"], [63, 0, 1, "", "argmin"], [63, 0, 1, "", "argwhere"], [63, 0, 1, "", "nonzero"], [63, 0, 1, "", "where"]], "ivy.data_classes.array.set": [[64, 1, 1, "", "_ArrayWithSet"]], "ivy.data_classes.array.set._ArrayWithSet": [[64, 4, 1, "", "_abc_impl"], [64, 0, 1, "", "unique_all"], [64, 0, 1, "", "unique_counts"], [64, 0, 1, "", "unique_inverse"], [64, 0, 1, "", "unique_values"]], "ivy.data_classes.array.sorting": [[65, 1, 1, "", "_ArrayWithSorting"]], "ivy.data_classes.array.sorting._ArrayWithSorting": [[65, 4, 1, "", "_abc_impl"], [65, 0, 1, "", "argsort"], [65, 0, 1, "", "msort"], [65, 0, 1, "", "searchsorted"], [65, 0, 1, "", "sort"]], "ivy.data_classes.array.statistical": [[66, 1, 1, "", "_ArrayWithStatistical"]], "ivy.data_classes.array.statistical._ArrayWithStatistical": [[66, 4, 1, "", "_abc_impl"], [66, 0, 1, "", "cumprod"], [66, 0, 1, "", "cumsum"], [66, 0, 1, "", "einsum"], [66, 0, 1, "", "max"], [66, 0, 1, "", "mean"], [66, 0, 1, "", "min"], [66, 0, 1, "", "prod"], [66, 0, 1, "", "std"], [66, 0, 1, "", "sum"], [66, 0, 1, "", "var"]], "ivy.data_classes.array.utility": [[67, 1, 1, "", "_ArrayWithUtility"]], "ivy.data_classes.array.utility._ArrayWithUtility": [[67, 4, 1, "", "_abc_impl"], [67, 0, 1, "", "all"], [67, 0, 1, "", "any"]], "ivy.data_classes.array.wrapping": [[68, 2, 1, "", "_wrap_function"], [68, 2, 1, "", "add_ivy_array_instance_methods"]], "ivy.data_classes.container": [[69, 3, 0, "-", "activations"], [70, 3, 0, "-", "base"], [99, 3, 0, "-", "container"], [71, 3, 0, "-", "conversions"], [72, 3, 0, "-", "creation"], [73, 3, 0, "-", "data_type"], [74, 3, 0, "-", "device"], [75, 3, 0, "-", "elementwise"], [76, 3, 0, "-", "experimental"], [77, 3, 0, "-", "general"], [78, 3, 0, "-", "gradients"], [79, 3, 0, "-", "image"], [80, 3, 0, "-", "layers"], [81, 3, 0, "-", "linear_algebra"], [82, 3, 0, "-", "losses"], [83, 3, 0, "-", "manipulation"], [84, 3, 0, "-", "norms"], [85, 3, 0, "-", "random"], [86, 3, 0, "-", "searching"], [87, 3, 0, "-", "set"], [88, 3, 0, "-", "sorting"], [89, 3, 0, "-", "statistical"], [90, 3, 0, "-", "utility"], [91, 3, 0, "-", "wrapping"]], "ivy.data_classes.container.activations": [[69, 1, 1, "", "_ContainerWithActivations"]], "ivy.data_classes.container.activations._ContainerWithActivations": [[69, 4, 1, "", "_abc_impl"], [69, 0, 1, "", "_static_gelu"], [69, 0, 1, "", "_static_hardswish"], [69, 0, 1, "", "_static_leaky_relu"], [69, 0, 1, "", "_static_log_softmax"], [69, 0, 1, "", "_static_mish"], [69, 0, 1, "", "_static_relu"], [69, 0, 1, "", "_static_sigmoid"], [69, 0, 1, "", "_static_softmax"], [69, 0, 1, "", "_static_softplus"], [69, 0, 1, "", "gelu"], [69, 0, 1, "", "hardswish"], [69, 0, 1, "", "leaky_relu"], [69, 0, 1, "", "log_softmax"], [69, 0, 1, "", "mish"], [69, 0, 1, "", "relu"], [69, 0, 1, "", "sigmoid"], [69, 0, 1, "", "softmax"], [69, 0, 1, "", "softplus"]], "ivy.data_classes.container.base": [[70, 1, 1, "", "ContainerBase"], [70, 2, 1, "", "_is_jsonable"], [70, 2, 1, "", "_repr"]], "ivy.data_classes.container.base.ContainerBase": [[70, 0, 1, "", "__getitem__"], [70, 0, 1, "", "__init__"], [70, 0, 1, "", "__setitem__"], [70, 4, 1, "", "_abc_impl"], [70, 0, 1, "", "_cont_at_key_chains_input_as_dict"], [70, 0, 1, "", "_cont_at_key_chains_input_as_seq"], [70, 0, 1, "", "_cont_call_static_method_with_flexible_args"], [70, 0, 1, "", "_cont_concat_unify"], [70, 0, 1, "", "_cont_get_dev"], [70, 0, 1, "", "_cont_get_dtype"], [70, 0, 1, "", "_cont_get_shape"], [70, 0, 1, "", "_cont_get_shapes"], [70, 5, 1, "", "_cont_ivy"], [70, 0, 1, "", "_cont_mean_unify"], [70, 0, 1, "", "_cont_prune_key_chains_input_as_dict"], [70, 0, 1, "", "_cont_prune_key_chains_input_as_seq"], [70, 0, 1, "", "_cont_slice_keys"], [70, 0, 1, "", "_cont_sum_unify"], [70, 0, 1, "", "_get_queue_item"], [70, 0, 1, "", "cont_all_false"], [70, 0, 1, "", "cont_all_key_chains"], [70, 0, 1, "", "cont_all_true"], [70, 0, 1, "", "cont_as_bools"], [70, 0, 1, "", "cont_assert_contains_sub_container"], [70, 0, 1, "", "cont_assert_contains_sub_structure"], [70, 0, 1, "", "cont_assert_identical"], [70, 0, 1, "", "cont_assert_identical_structure"], [70, 0, 1, "", "cont_at_key_chain"], [70, 0, 1, "", "cont_at_key_chains"], [70, 0, 1, "", "cont_at_keys"], [70, 0, 1, "", "cont_combine"], [70, 0, 1, "", "cont_common_key_chains"], [70, 5, 1, "", "cont_config"], [70, 0, 1, "", "cont_contains_sub_container"], [70, 0, 1, "", "cont_contains_sub_structure"], [70, 0, 1, "", "cont_copy"], [70, 0, 1, "", "cont_create_if_absent"], [70, 0, 1, "", "cont_cutoff_at_depth"], [70, 0, 1, "", "cont_cutoff_at_height"], [70, 0, 1, "", "cont_deep_copy"], [70, 5, 1, "", "cont_dev"], [70, 5, 1, "", "cont_dev_str"], [70, 0, 1, "", "cont_diff"], [70, 5, 1, "", "cont_dtype"], [70, 0, 1, "", "cont_duplicate_array_keychains"], [70, 0, 1, "", "cont_find_sub_container"], [70, 0, 1, "", "cont_find_sub_structure"], [70, 0, 1, "", "cont_flatten_key_chain"], [70, 0, 1, "", "cont_flatten_key_chains"], [70, 0, 1, "", "cont_format_key_chains"], [70, 0, 1, "", "cont_from_disk_as_hdf5"], [70, 0, 1, "", "cont_from_disk_as_json"], [70, 0, 1, "", "cont_from_disk_as_pickled"], [70, 0, 1, "", "cont_from_flat_list"], [70, 0, 1, "", "cont_handle_inplace"], [70, 0, 1, "", "cont_has_key"], [70, 0, 1, "", "cont_has_key_chain"], [70, 0, 1, "", "cont_identical"], [70, 0, 1, "", "cont_identical_array_shapes"], [70, 0, 1, "", "cont_identical_configs"], [70, 0, 1, "", "cont_identical_structure"], [70, 0, 1, "", "cont_if_exists"], [70, 0, 1, "", "cont_inplace_update"], [70, 5, 1, "", "cont_ivy"], [70, 0, 1, "", "cont_key_chains_containing"], [70, 0, 1, "", "cont_list_join"], [70, 0, 1, "", "cont_list_stack"], [70, 0, 1, "", "cont_load"], [70, 0, 1, "", "cont_map"], [70, 0, 1, "", "cont_map_sub_conts"], [70, 5, 1, "", "cont_max_depth"], [70, 0, 1, "", "cont_multi_map"], [70, 0, 1, "", "cont_multi_map_in_function"], [70, 0, 1, "", "cont_num_arrays"], [70, 0, 1, "", "cont_overwrite_at_key_chain"], [70, 0, 1, "", "cont_overwrite_at_key_chains"], [70, 0, 1, "", "cont_prune_empty"], [70, 0, 1, "", "cont_prune_key_chain"], [70, 0, 1, "", "cont_prune_key_chains"], [70, 0, 1, "", "cont_prune_key_from_key_chains"], [70, 0, 1, "", "cont_prune_keys"], [70, 0, 1, "", "cont_prune_keys_from_key_chains"], [70, 0, 1, "", "cont_reduce"], [70, 0, 1, "", "cont_remove_key_length_limit"], [70, 0, 1, "", "cont_remove_print_limit"], [70, 0, 1, "", "cont_reshape_like"], [70, 0, 1, "", "cont_restructure"], [70, 0, 1, "", "cont_restructure_key_chains"], [70, 0, 1, "", "cont_save"], [70, 0, 1, "", "cont_set_at_key_chain"], [70, 0, 1, "", "cont_set_at_key_chains"], [70, 0, 1, "", "cont_set_at_keys"], [70, 5, 1, "", "cont_shape"], [70, 5, 1, "", "cont_shapes"], [70, 0, 1, "", "cont_show"], [70, 0, 1, "", "cont_show_sub_container"], [70, 0, 1, "", "cont_size_ordered_arrays"], [70, 0, 1, "", "cont_slice_keys"], [70, 0, 1, "", "cont_slice_via_key"], [70, 0, 1, "", "cont_sort_by_key"], [70, 0, 1, "", "cont_structural_diff"], [70, 0, 1, "", "cont_to_dict"], [70, 0, 1, "", "cont_to_disk_as_hdf5"], [70, 0, 1, "", "cont_to_disk_as_json"], [70, 0, 1, "", "cont_to_disk_as_pickled"], [70, 0, 1, "", "cont_to_flat_list"], [70, 0, 1, "", "cont_to_iterator"], [70, 0, 1, "", "cont_to_iterator_keys"], [70, 0, 1, "", "cont_to_iterator_values"], [70, 0, 1, "", "cont_to_jsonable"], [70, 0, 1, "", "cont_to_nested_list"], [70, 0, 1, "", "cont_to_raw"], [70, 0, 1, "", "cont_trim_key"], [70, 0, 1, "", "cont_try_kc"], [70, 0, 1, "", "cont_unify"], [70, 0, 1, "", "cont_unstack_conts"], [70, 0, 1, "", "cont_update_config"], [70, 0, 1, "", "cont_with_default_key_color"], [70, 0, 1, "", "cont_with_entries_as_lists"], [70, 0, 1, "", "cont_with_ivy_backend"], [70, 0, 1, "", "cont_with_key_length_limit"], [70, 0, 1, "", "cont_with_print_indent"], [70, 0, 1, "", "cont_with_print_limit"], [70, 0, 1, "", "cont_with_print_line_spacing"], [70, 5, 1, "", "dynamic_backend"], [70, 0, 1, "", "h5_file_size"], [70, 0, 1, "", "shuffle_h5_file"], [70, 0, 1, "", "split_conts"]], "ivy.data_classes.container.container": [[99, 1, 1, "", "Container"]], "ivy.data_classes.container.container.Container": [[99, 0, 1, "", "__abs__"], [99, 0, 1, "", "__add__"], [99, 0, 1, "", "__eq__"], [99, 0, 1, "", "__ge__"], [99, 0, 1, "", "__gt__"], [99, 0, 1, "", "__init__"], [99, 0, 1, "", "__le__"], [99, 0, 1, "", "__lt__"], [99, 0, 1, "", "__ne__"], [99, 0, 1, "", "__pow__"], [99, 0, 1, "", "__radd__"], [99, 0, 1, "", "__rrshift__"], [99, 0, 1, "", "__rshift__"], [99, 0, 1, "", "__rsub__"], [99, 0, 1, "", "__sub__"], [99, 0, 1, "", "__truediv__"], [99, 0, 1, "", "__xor__"]], "ivy.data_classes.container.conversions": [[71, 1, 1, "", "_ContainerWithConversions"]], "ivy.data_classes.container.conversions._ContainerWithConversions": [[71, 4, 1, "", "_abc_impl"], [71, 0, 1, "", "_static_to_ivy"], [71, 0, 1, "", "_static_to_native"], [71, 0, 1, "", "to_ivy"], [71, 0, 1, "", "to_native"]], "ivy.data_classes.container.creation": [[72, 1, 1, "", "_ContainerWithCreation"]], "ivy.data_classes.container.creation._ContainerWithCreation": [[72, 4, 1, "", "_abc_impl"], [72, 0, 1, "", "_static_arange"], [72, 0, 1, "", "_static_asarray"], [72, 0, 1, "", "_static_copy_array"], [72, 0, 1, "", "_static_empty"], [72, 0, 1, "", "_static_empty_like"], [72, 0, 1, "", "_static_eye"], [72, 0, 1, "", "_static_from_dlpack"], [72, 0, 1, "", "_static_full"], [72, 0, 1, "", "_static_full_like"], [72, 0, 1, "", "_static_linspace"], [72, 0, 1, "", "_static_logspace"], [72, 0, 1, "", "_static_meshgrid"], [72, 0, 1, "", "_static_native_array"], [72, 0, 1, "", "_static_one_hot"], [72, 0, 1, "", "_static_ones"], [72, 0, 1, "", "_static_ones_like"], [72, 0, 1, "", "_static_tril"], [72, 0, 1, "", "_static_triu"], [72, 0, 1, "", "_static_zeros"], [72, 0, 1, "", "_static_zeros_like"], [72, 0, 1, "", "asarray"], [72, 0, 1, "", "copy_array"], [72, 0, 1, "", "empty_like"], [72, 0, 1, "", "from_dlpack"], [72, 0, 1, "", "frombuffer"], [72, 0, 1, "", "full_like"], [72, 0, 1, "", "linspace"], [72, 0, 1, "", "logspace"], [72, 0, 1, "", "meshgrid"], [72, 0, 1, "", "native_array"], [72, 0, 1, "", "one_hot"], [72, 0, 1, "", "ones_like"], [72, 0, 1, "", "static_frombuffer"], [72, 0, 1, "", "static_triu_indices"], [72, 0, 1, "", "tril"], [72, 0, 1, "", "triu"], [72, 0, 1, "", "triu_indices"], [72, 0, 1, "", "zeros_like"]], "ivy.data_classes.container.data_type": [[73, 1, 1, "", "_ContainerWithDataTypes"]], "ivy.data_classes.container.data_type._ContainerWithDataTypes": [[73, 4, 1, "", "_abc_impl"], [73, 0, 1, "", "_static_astype"], [73, 0, 1, "", "_static_broadcast_arrays"], [73, 0, 1, "", "_static_broadcast_to"], [73, 0, 1, "", "_static_can_cast"], [73, 0, 1, "", "_static_default_complex_dtype"], [73, 0, 1, "", "_static_default_float_dtype"], [73, 0, 1, "", "_static_dtype"], [73, 0, 1, "", "_static_finfo"], [73, 0, 1, "", "_static_function_supported_dtypes"], [73, 0, 1, "", "_static_function_unsupported_dtypes"], [73, 0, 1, "", "_static_iinfo"], [73, 0, 1, "", "_static_is_bool_dtype"], [73, 0, 1, "", "_static_is_complex_dtype"], [73, 0, 1, "", "_static_is_float_dtype"], [73, 0, 1, "", "_static_is_int_dtype"], [73, 0, 1, "", "_static_is_uint_dtype"], [73, 0, 1, "", "_static_result_type"], [73, 0, 1, "", "astype"], [73, 0, 1, "", "broadcast_arrays"], [73, 0, 1, "", "broadcast_to"], [73, 0, 1, "", "can_cast"], [73, 0, 1, "", "dtype"], [73, 0, 1, "", "finfo"], [73, 0, 1, "", "iinfo"], [73, 0, 1, "", "is_bool_dtype"], [73, 0, 1, "", "is_complex_dtype"], [73, 0, 1, "", "is_float_dtype"], [73, 0, 1, "", "is_int_dtype"], [73, 0, 1, "", "is_uint_dtype"], [73, 0, 1, "", "result_type"]], "ivy.data_classes.container.device": [[74, 1, 1, "", "_ContainerWithDevice"]], "ivy.data_classes.container.device._ContainerWithDevice": [[74, 4, 1, "", "_abc_impl"], [74, 0, 1, "", "_static_dev"], [74, 0, 1, "", "_static_to_device"], [74, 0, 1, "", "dev"], [74, 0, 1, "", "to_device"]], "ivy.data_classes.container.elementwise": [[75, 1, 1, "", "_ContainerWithElementwise"]], "ivy.data_classes.container.elementwise._ContainerWithElementwise": [[75, 4, 1, "", "_abc_impl"], [75, 0, 1, "", "_static_abs"], [75, 0, 1, "", "_static_acos"], [75, 0, 1, "", "_static_acosh"], [75, 0, 1, "", "_static_add"], [75, 0, 1, "", "_static_asin"], [75, 0, 1, "", "_static_asinh"], [75, 0, 1, "", "_static_atan"], [75, 0, 1, "", "_static_atan2"], [75, 0, 1, "", "_static_atanh"], [75, 0, 1, "", "_static_bitwise_and"], [75, 0, 1, "", "_static_bitwise_invert"], [75, 0, 1, "", "_static_bitwise_left_shift"], [75, 0, 1, "", "_static_bitwise_or"], [75, 0, 1, "", "_static_bitwise_right_shift"], [75, 0, 1, "", "_static_bitwise_xor"], [75, 0, 1, "", "_static_ceil"], [75, 0, 1, "", "_static_cos"], [75, 0, 1, "", "_static_cosh"], [75, 0, 1, "", "_static_deg2rad"], [75, 0, 1, "", "_static_divide"], [75, 0, 1, "", "_static_equal"], [75, 0, 1, "", "_static_erf"], [75, 0, 1, "", "_static_exp"], [75, 0, 1, "", "_static_expm1"], [75, 0, 1, "", "_static_floor"], [75, 0, 1, "", "_static_floor_divide"], [75, 0, 1, "", "_static_greater"], [75, 0, 1, "", "_static_greater_equal"], [75, 0, 1, "", "_static_isfinite"], [75, 0, 1, "", "_static_isinf"], [75, 0, 1, "", "_static_isnan"], [75, 0, 1, "", "_static_isreal"], [75, 0, 1, "", "_static_lcm"], [75, 0, 1, "", "_static_less"], [75, 0, 1, "", "_static_less_equal"], [75, 0, 1, "", "_static_log"], [75, 0, 1, "", "_static_log10"], [75, 0, 1, "", "_static_log1p"], [75, 0, 1, "", "_static_log2"], [75, 0, 1, "", "_static_logaddexp"], [75, 0, 1, "", "_static_logical_and"], [75, 0, 1, "", "_static_logical_not"], [75, 0, 1, "", "_static_logical_or"], [75, 0, 1, "", "_static_logical_xor"], [75, 0, 1, "", "_static_maximum"], [75, 0, 1, "", "_static_minimum"], [75, 0, 1, "", "_static_multiply"], [75, 0, 1, "", "_static_negative"], [75, 0, 1, "", "_static_not_equal"], [75, 0, 1, "", "_static_positive"], [75, 0, 1, "", "_static_pow"], [75, 0, 1, "", "_static_rad2deg"], [75, 0, 1, "", "_static_reciprocal"], [75, 0, 1, "", "_static_remainder"], [75, 0, 1, "", "_static_round"], [75, 0, 1, "", "_static_sign"], [75, 0, 1, "", "_static_sin"], [75, 0, 1, "", "_static_sinh"], [75, 0, 1, "", "_static_sqrt"], [75, 0, 1, "", "_static_square"], [75, 0, 1, "", "_static_subtract"], [75, 0, 1, "", "_static_tan"], [75, 0, 1, "", "_static_tanh"], [75, 0, 1, "", "_static_trapz"], [75, 0, 1, "", "_static_trunc"], [75, 0, 1, "", "_static_trunc_divide"], [75, 0, 1, "", "abs"], [75, 0, 1, "", "acos"], [75, 0, 1, "", "acosh"], [75, 0, 1, "", "add"], [75, 0, 1, "", "angle"], [75, 0, 1, "", "asin"], [75, 0, 1, "", "asinh"], [75, 0, 1, "", "atan"], [75, 0, 1, "", "atan2"], [75, 0, 1, "", "atanh"], [75, 0, 1, "", "bitwise_and"], [75, 0, 1, "", "bitwise_invert"], [75, 0, 1, "", "bitwise_left_shift"], [75, 0, 1, "", "bitwise_or"], [75, 0, 1, "", "bitwise_right_shift"], [75, 0, 1, "", "bitwise_xor"], [75, 0, 1, "", "ceil"], [75, 0, 1, "", "cos"], [75, 0, 1, "", "cosh"], [75, 0, 1, "", "deg2rad"], [75, 0, 1, "", "divide"], [75, 0, 1, "", "equal"], [75, 0, 1, "", "erf"], [75, 0, 1, "", "exp"], [75, 0, 1, "", "exp2"], [75, 0, 1, "", "expm1"], [75, 0, 1, "", "floor"], [75, 0, 1, "", "floor_divide"], [75, 0, 1, "", "fmin"], [75, 0, 1, "", "gcd"], [75, 0, 1, "", "greater"], [75, 0, 1, "", "greater_equal"], [75, 0, 1, "", "imag"], [75, 0, 1, "", "isfinite"], [75, 0, 1, "", "isinf"], [75, 0, 1, "", "isnan"], [75, 0, 1, "", "isreal"], [75, 0, 1, "", "lcm"], [75, 0, 1, "", "less"], [75, 0, 1, "", "less_equal"], [75, 0, 1, "", "log"], [75, 0, 1, "", "log10"], [75, 0, 1, "", "log1p"], [75, 0, 1, "", "log2"], [75, 0, 1, "", "logaddexp"], [75, 0, 1, "", "logaddexp2"], [75, 0, 1, "", "logical_and"], [75, 0, 1, "", "logical_not"], [75, 0, 1, "", "logical_or"], [75, 0, 1, "", "logical_xor"], [75, 0, 1, "", "maximum"], [75, 0, 1, "", "minimum"], [75, 0, 1, "", "multiply"], [75, 0, 1, "", "nan_to_num"], [75, 0, 1, "", "negative"], [75, 0, 1, "", "not_equal"], [75, 0, 1, "", "positive"], [75, 0, 1, "", "pow"], [75, 0, 1, "", "rad2deg"], [75, 0, 1, "", "real"], [75, 0, 1, "", "reciprocal"], [75, 0, 1, "", "remainder"], [75, 0, 1, "", "round"], [75, 0, 1, "", "sign"], [75, 0, 1, "", "sin"], [75, 0, 1, "", "sinh"], [75, 0, 1, "", "sqrt"], [75, 0, 1, "", "square"], [75, 0, 1, "", "static_angle"], [75, 0, 1, "", "static_exp2"], [75, 0, 1, "", "static_fmin"], [75, 0, 1, "", "static_gcd"], [75, 0, 1, "", "static_imag"], [75, 0, 1, "", "static_logaddexp2"], [75, 0, 1, "", "static_nan_to_num"], [75, 0, 1, "", "static_real"], [75, 0, 1, "", "subtract"], [75, 0, 1, "", "tan"], [75, 0, 1, "", "tanh"], [75, 0, 1, "", "trapz"], [75, 0, 1, "", "trunc"], [75, 0, 1, "", "trunc_divide"]], "ivy.data_classes.container.experimental": [[76, 3, 0, "-", "activations"], [76, 3, 0, "-", "conversions"], [76, 3, 0, "-", "creation"], [76, 3, 0, "-", "data_type"], [76, 3, 0, "-", "device"], [76, 3, 0, "-", "elementwise"], [76, 3, 0, "-", "general"], [76, 3, 0, "-", "gradients"], [76, 3, 0, "-", "image"], [76, 3, 0, "-", "layers"], [76, 3, 0, "-", "linear_algebra"], [76, 3, 0, "-", "losses"], [76, 3, 0, "-", "manipulation"], [76, 3, 0, "-", "norms"], [76, 3, 0, "-", "random"], [76, 3, 0, "-", "searching"], [76, 3, 0, "-", "set"], [76, 3, 0, "-", "sorting"], [76, 3, 0, "-", "statistical"], [76, 3, 0, "-", "utility"]], "ivy.data_classes.container.experimental.activations": [[76, 1, 1, "", "_ContainerWithActivationExperimental"]], "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental": [[76, 4, 1, "", "_abc_impl"], [76, 0, 1, "", "_static_celu"], [76, 0, 1, "", "_static_elu"], [76, 0, 1, "", "_static_hardshrink"], [76, 0, 1, "", "_static_hardsilu"], [76, 0, 1, "", "_static_hardtanh"], [76, 0, 1, "", "_static_scaled_tanh"], [76, 0, 1, "", "_static_silu"], [76, 0, 1, "", "_static_softshrink"], [76, 0, 1, "", "_static_tanhshrink"], [76, 0, 1, "", "_static_threshold"], [76, 0, 1, "", "celu"], [76, 0, 1, "", "elu"], [76, 0, 1, "", "hardshrink"], [76, 0, 1, "", "hardsilu"], [76, 0, 1, "", "hardtanh"], [76, 0, 1, "", "logit"], [76, 0, 1, "", "logsigmoid"], [76, 0, 1, "", "prelu"], [76, 0, 1, "", "relu6"], [76, 0, 1, "", "scaled_tanh"], [76, 0, 1, "", "selu"], [76, 0, 1, "", "silu"], [76, 0, 1, "", "softshrink"], [76, 0, 1, "", "static_logit"], [76, 0, 1, "", "static_logsigmoid"], [76, 0, 1, "", "static_prelu"], [76, 0, 1, "", "static_relu6"], [76, 0, 1, "", "static_selu"], [76, 0, 1, "", "static_thresholded_relu"], [76, 0, 1, "", "tanhshrink"], [76, 0, 1, "", "threshold"], [76, 0, 1, "", "thresholded_relu"]], "ivy.data_classes.container.experimental.conversions": [[76, 1, 1, "", "_ContainerWithConversionExperimental"]], "ivy.data_classes.container.experimental.conversions._ContainerWithConversionExperimental": [[76, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.creation": [[76, 1, 1, "", "_ContainerWithCreationExperimental"]], "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental": [[76, 4, 1, "", "_abc_impl"], [76, 0, 1, "", "_static_trilu"], [76, 0, 1, "", "blackman_window"], [76, 0, 1, "", "eye_like"], [76, 0, 1, "", "hamming_window"], [76, 0, 1, "", "hann_window"], [76, 0, 1, "", "kaiser_bessel_derived_window"], [76, 0, 1, "", "kaiser_window"], [76, 0, 1, "", "mel_weight_matrix"], [76, 0, 1, "", "polyval"], [76, 0, 1, "", "static_blackman_window"], [76, 0, 1, "", "static_eye_like"], [76, 0, 1, "", "static_hamming_window"], [76, 0, 1, "", "static_hann_window"], [76, 0, 1, "", "static_kaiser_bessel_derived_window"], [76, 0, 1, "", "static_kaiser_window"], [76, 0, 1, "", "static_mel_weight_matrix"], [76, 0, 1, "", "static_polyval"], [76, 0, 1, "", "static_tril_indices"], [76, 0, 1, "", "static_unsorted_segment_mean"], [76, 0, 1, "", "static_unsorted_segment_min"], [76, 0, 1, "", "static_unsorted_segment_sum"], [76, 0, 1, "", "static_vorbis_window"], [76, 0, 1, "", "tril_indices"], [76, 0, 1, "", "trilu"], [76, 0, 1, "", "unsorted_segment_mean"], [76, 0, 1, "", "unsorted_segment_min"], [76, 0, 1, "", "unsorted_segment_sum"], [76, 0, 1, "", "vorbis_window"]], "ivy.data_classes.container.experimental.data_type": [[76, 1, 1, "", "_ContainerWithData_typeExperimental"]], "ivy.data_classes.container.experimental.data_type._ContainerWithData_typeExperimental": [[76, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.device": [[76, 1, 1, "", "_ContainerWithDeviceExperimental"]], "ivy.data_classes.container.experimental.device._ContainerWithDeviceExperimental": [[76, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.elementwise": [[76, 1, 1, "", "_ContainerWithElementWiseExperimental"]], "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental": [[76, 4, 1, "", "_abc_impl"], [76, 0, 1, "", "allclose"], [76, 0, 1, "", "amax"], [76, 0, 1, "", "amin"], [76, 0, 1, "", "binarizer"], [76, 0, 1, "", "conj"], [76, 0, 1, "", "copysign"], [76, 0, 1, "", "count_nonzero"], [76, 0, 1, "", "diff"], [76, 0, 1, "", "digamma"], [76, 0, 1, "", "erfc"], [76, 0, 1, "", "erfinv"], [76, 0, 1, "", "fix"], [76, 0, 1, "", "float_power"], [76, 0, 1, "", "fmax"], [76, 0, 1, "", "fmod"], [76, 0, 1, "", "frexp"], [76, 0, 1, "", "gradient"], [76, 0, 1, "", "hypot"], [76, 0, 1, "", "isclose"], [76, 0, 1, "", "ldexp"], [76, 0, 1, "", "lerp"], [76, 0, 1, "", "modf"], [76, 0, 1, "", "nansum"], [76, 0, 1, "", "nextafter"], [76, 0, 1, "", "signbit"], [76, 0, 1, "", "sinc"], [76, 0, 1, "", "sparsify_tensor"], [76, 0, 1, "", "static_allclose"], [76, 0, 1, "", "static_amax"], [76, 0, 1, "", "static_amin"], [76, 0, 1, "", "static_binarizer"], [76, 0, 1, "", "static_conj"], [76, 0, 1, "", "static_copysign"], [76, 0, 1, "", "static_count_nonzero"], [76, 0, 1, "", "static_diff"], [76, 0, 1, "", "static_digamma"], [76, 0, 1, "", "static_erfc"], [76, 0, 1, "", "static_erfinv"], [76, 0, 1, "", "static_fix"], [76, 0, 1, "", "static_float_power"], [76, 0, 1, "", "static_fmax"], [76, 0, 1, "", "static_fmod"], [76, 0, 1, "", "static_frexp"], [76, 0, 1, "", "static_gradient"], [76, 0, 1, "", "static_hypot"], [76, 0, 1, "", "static_isclose"], [76, 0, 1, "", "static_ldexp"], [76, 0, 1, "", "static_lerp"], [76, 0, 1, "", "static_modf"], [76, 0, 1, "", "static_nansum"], [76, 0, 1, "", "static_nextafter"], [76, 0, 1, "", "static_signbit"], [76, 0, 1, "", "static_sinc"], [76, 0, 1, "", "static_sparsify_tensor"], [76, 0, 1, "", "static_xlogy"], [76, 0, 1, "", "static_zeta"], [76, 0, 1, "", "xlogy"], [76, 0, 1, "", "zeta"]], "ivy.data_classes.container.experimental.general": [[76, 1, 1, "", "_ContainerWithGeneralExperimental"]], "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental": [[76, 4, 1, "", "_abc_impl"], [76, 0, 1, "", "_static_reduce"], [76, 0, 1, "", "reduce"]], "ivy.data_classes.container.experimental.gradients": [[76, 1, 1, "", "_ContainerWithGradientsExperimental"]], "ivy.data_classes.container.experimental.gradients._ContainerWithGradientsExperimental": [[76, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.image": [[76, 1, 1, "", "_ContainerWithImageExperimental"]], "ivy.data_classes.container.experimental.image._ContainerWithImageExperimental": [[76, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.layers": [[76, 1, 1, "", "_ContainerWithLayersExperimental"]], "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental": [[76, 4, 1, "", "_abc_impl"], [76, 0, 1, "", "_static_fft"], [76, 0, 1, "", "_static_sliding_window"], [76, 0, 1, "", "adaptive_avg_pool1d"], [76, 0, 1, "", "adaptive_avg_pool2d"], [76, 0, 1, "", "adaptive_max_pool2d"], [76, 0, 1, "", "adaptive_max_pool3d"], [76, 0, 1, "", "avg_pool1d"], [76, 0, 1, "", "avg_pool2d"], [76, 0, 1, "", "avg_pool3d"], [76, 0, 1, "", "dct"], [76, 0, 1, "", "dft"], [76, 0, 1, "", "embedding"], [76, 0, 1, "", "fft"], [76, 0, 1, "", "idct"], [76, 0, 1, "", "ifft"], [76, 0, 1, "", "ifftn"], [76, 0, 1, "", "interpolate"], [76, 0, 1, "", "max_pool1d"], [76, 0, 1, "", "max_pool2d"], [76, 0, 1, "", "max_pool3d"], [76, 0, 1, "", "max_unpool1d"], [76, 0, 1, "", "rfft"], [76, 0, 1, "", "rfftn"], [76, 0, 1, "", "sliding_window"], [76, 0, 1, "", "static_adaptive_avg_pool1d"], [76, 0, 1, "", "static_adaptive_avg_pool2d"], [76, 0, 1, "", "static_adaptive_max_pool2d"], [76, 0, 1, "", "static_adaptive_max_pool3d"], [76, 0, 1, "", "static_avg_pool1d"], [76, 0, 1, "", "static_avg_pool2d"], [76, 0, 1, "", "static_avg_pool3d"], [76, 0, 1, "", "static_dct"], [76, 0, 1, "", "static_dft"], [76, 0, 1, "", "static_embedding"], [76, 0, 1, "", "static_idct"], [76, 0, 1, "", "static_ifft"], [76, 0, 1, "", "static_ifftn"], [76, 0, 1, "", "static_interpolate"], [76, 0, 1, "", "static_max_pool1d"], [76, 0, 1, "", "static_max_pool2d"], [76, 0, 1, "", "static_max_pool3d"], [76, 0, 1, "", "static_max_unpool1d"], [76, 0, 1, "", "static_rfft"], [76, 0, 1, "", "static_rfftn"], [76, 0, 1, "", "static_rnn"], [76, 0, 1, "", "static_stft"], [76, 0, 1, "", "stft"]], "ivy.data_classes.container.experimental.linear_algebra": [[76, 1, 1, "", "_ContainerWithLinearAlgebraExperimental"]], "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental": [[76, 4, 1, "", "_abc_impl"], [76, 0, 1, "", "adjoint"], [76, 0, 1, "", "batched_outer"], [76, 0, 1, "", "cond"], [76, 0, 1, "", "diagflat"], [76, 0, 1, "", "dot"], [76, 0, 1, "", "eig"], [76, 0, 1, "", "eigh_tridiagonal"], [76, 0, 1, "", "eigvals"], [76, 0, 1, "", "higher_order_moment"], [76, 0, 1, "", "initialize_tucker"], [76, 0, 1, "", "kron"], [76, 0, 1, "", "make_svd_non_negative"], [76, 0, 1, "", "matrix_exp"], [76, 0, 1, "", "mode_dot"], [76, 0, 1, "", "multi_dot"], [76, 0, 1, "", "multi_mode_dot"], [76, 0, 1, "", "partial_tucker"], [76, 0, 1, "", "static_adjoint"], [76, 0, 1, "", "static_batched_outer"], [76, 0, 1, "", "static_cond"], [76, 0, 1, "", "static_diagflat"], [76, 0, 1, "", "static_dot"], [76, 0, 1, "", "static_eig"], [76, 0, 1, "", "static_eigh_tridiagonal"], [76, 0, 1, "", "static_eigvals"], [76, 0, 1, "", "static_higher_order_moment"], [76, 0, 1, "", "static_initialize_tucker"], [76, 0, 1, "", "static_kron"], [76, 0, 1, "", "static_make_svd_non_negative"], [76, 0, 1, "", "static_matrix_exp"], [76, 0, 1, "", "static_mode_dot"], [76, 0, 1, "", "static_multi_dot"], [76, 0, 1, "", "static_multi_mode_dot"], [76, 0, 1, "", "static_partial_tucker"], [76, 0, 1, "", "static_svd_flip"], [76, 0, 1, "", "static_tensor_train"], [76, 0, 1, "", "static_truncated_svd"], [76, 0, 1, "", "static_tt_matrix_to_tensor"], [76, 0, 1, "", "static_tucker"], [76, 0, 1, "", "svd_flip"], [76, 0, 1, "", "tensor_train"], [76, 0, 1, "", "truncated_svd"], [76, 0, 1, "", "tt_matrix_to_tensor"], [76, 0, 1, "", "tucker"]], "ivy.data_classes.container.experimental.losses": [[76, 1, 1, "", "_ContainerWithLossesExperimental"]], "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental": [[76, 4, 1, "", "_abc_impl"], [76, 0, 1, "", "_static_hinge_embedding_loss"], [76, 0, 1, "", "_static_huber_loss"], [76, 0, 1, "", "_static_kl_div"], [76, 0, 1, "", "_static_l1_loss"], [76, 0, 1, "", "_static_log_poisson_loss"], [76, 0, 1, "", "_static_poisson_nll_loss"], [76, 0, 1, "", "_static_smooth_l1_loss"], [76, 0, 1, "", "_static_soft_margin_loss"], [76, 0, 1, "", "hinge_embedding_loss"], [76, 0, 1, "", "huber_loss"], [76, 0, 1, "", "kl_div"], [76, 0, 1, "", "l1_loss"], [76, 0, 1, "", "log_poisson_loss"], [76, 0, 1, "", "poisson_nll_loss"], [76, 0, 1, "", "smooth_l1_loss"], [76, 0, 1, "", "soft_margin_loss"]], "ivy.data_classes.container.experimental.manipulation": [[76, 1, 1, "", "_ContainerWithManipulationExperimental"], [76, 2, 1, "", "concat_from_sequence"]], "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental": [[76, 4, 1, "", "_abc_impl"], [76, 0, 1, "", "_static_fill_diagonal"], [76, 0, 1, "", "_static_put_along_axis"], [76, 0, 1, "", "_static_take"], [76, 0, 1, "", "_static_trim_zeros"], [76, 0, 1, "", "_static_unflatten"], [76, 0, 1, "", "_static_unique_consecutive"], [76, 0, 1, "", "as_strided"], [76, 0, 1, "", "associative_scan"], [76, 0, 1, "", "atleast_1d"], [76, 0, 1, "", "atleast_2d"], [76, 0, 1, "", "atleast_3d"], [76, 0, 1, "", "broadcast_shapes"], [76, 0, 1, "", "column_stack"], [76, 0, 1, "", "concat_from_sequence"], [76, 0, 1, "", "dsplit"], [76, 0, 1, "", "dstack"], [76, 0, 1, "", "expand"], [76, 0, 1, "", "fill_diagonal"], [76, 0, 1, "", "flatten"], [76, 0, 1, "", "fliplr"], [76, 0, 1, "", "flipud"], [76, 0, 1, "", "fold"], [76, 0, 1, "", "heaviside"], [76, 0, 1, "", "hsplit"], [76, 0, 1, "", "hstack"], [76, 0, 1, "", "i0"], [76, 0, 1, "", "matricize"], [76, 0, 1, "", "moveaxis"], [76, 0, 1, "", "pad"], [76, 0, 1, "", "partial_fold"], [76, 0, 1, "", "partial_tensor_to_vec"], [76, 0, 1, "", "partial_unfold"], [76, 0, 1, "", "partial_vec_to_tensor"], [76, 0, 1, "", "put_along_axis"], [76, 0, 1, "", "rot90"], [76, 0, 1, "", "soft_thresholding"], [76, 0, 1, "", "static_as_strided"], [76, 0, 1, "", "static_atleast_1d"], [76, 0, 1, "", "static_atleast_2d"], [76, 0, 1, "", "static_atleast_3d"], [76, 0, 1, "", "static_broadcast_shapes"], [76, 0, 1, "", "static_column_stack"], [76, 0, 1, "", "static_concat_from_sequence"], [76, 0, 1, "", "static_dsplit"], [76, 0, 1, "", "static_dstack"], [76, 0, 1, "", "static_expand"], [76, 0, 1, "", "static_flatten"], [76, 0, 1, "", "static_fliplr"], [76, 0, 1, "", "static_flipud"], [76, 0, 1, "", "static_fold"], [76, 0, 1, "", "static_heaviside"], [76, 0, 1, "", "static_hsplit"], [76, 0, 1, "", "static_hstack"], [76, 0, 1, "", "static_i0"], [76, 0, 1, "", "static_matricize"], [76, 0, 1, "", "static_moveaxis"], [76, 0, 1, "", "static_pad"], [76, 0, 1, "", "static_partial_fold"], [76, 0, 1, "", "static_partial_tensor_to_vec"], [76, 0, 1, "", "static_partial_unfold"], [76, 0, 1, "", "static_partial_vec_to_tensor"], [76, 0, 1, "", "static_rot90"], [76, 0, 1, "", "static_soft_thresholding"], [76, 0, 1, "", "static_take_along_axis"], [76, 0, 1, "", "static_top_k"], [76, 0, 1, "", "static_unfold"], [76, 0, 1, "", "static_vsplit"], [76, 0, 1, "", "static_vstack"], [76, 0, 1, "", "take"], [76, 0, 1, "", "take_along_axis"], [76, 0, 1, "", "top_k"], [76, 0, 1, "", "trim_zeros"], [76, 0, 1, "", "unflatten"], [76, 0, 1, "", "unfold"], [76, 0, 1, "", "unique_consecutive"], [76, 0, 1, "", "vsplit"], [76, 0, 1, "", "vstack"]], "ivy.data_classes.container.experimental.norms": [[76, 1, 1, "", "_ContainerWithNormsExperimental"]], "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental": [[76, 4, 1, "", "_abc_impl"], [76, 0, 1, "", "batch_norm"], [76, 0, 1, "", "group_norm"], [76, 0, 1, "", "instance_norm"], [76, 0, 1, "", "l1_normalize"], [76, 0, 1, "", "l2_normalize"], [76, 0, 1, "", "lp_normalize"], [76, 0, 1, "", "static_batch_norm"], [76, 0, 1, "", "static_group_norm"], [76, 0, 1, "", "static_instance_norm"], [76, 0, 1, "", "static_l1_normalize"], [76, 0, 1, "", "static_l2_normalize"], [76, 0, 1, "", "static_lp_normalize"]], "ivy.data_classes.container.experimental.random": [[76, 1, 1, "", "_ContainerWithRandomExperimental"]], "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental": [[76, 4, 1, "", "_abc_impl"], [76, 0, 1, "", "bernoulli"], [76, 0, 1, "", "beta"], [76, 0, 1, "", "dirichlet"], [76, 0, 1, "", "gamma"], [76, 0, 1, "", "poisson"], [76, 0, 1, "", "static_bernoulli"], [76, 0, 1, "", "static_beta"], [76, 0, 1, "", "static_dirichlet"], [76, 0, 1, "", "static_gamma"], [76, 0, 1, "", "static_poisson"]], "ivy.data_classes.container.experimental.searching": [[76, 1, 1, "", "_ContainerWithSearchingExperimental"]], "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental": [[76, 4, 1, "", "_abc_impl"], [76, 0, 1, "", "static_unravel_index"], [76, 0, 1, "", "unravel_index"]], "ivy.data_classes.container.experimental.set": [[76, 1, 1, "", "_ContainerWithSetExperimental"]], "ivy.data_classes.container.experimental.set._ContainerWithSetExperimental": [[76, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.sorting": [[76, 1, 1, "", "_ContainerWithSortingExperimental"]], "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental": [[76, 4, 1, "", "_abc_impl"], [76, 0, 1, "", "invert_permutation"], [76, 0, 1, "", "lexsort"], [76, 0, 1, "", "static_invert_permutation"], [76, 0, 1, "", "static_lexsort"]], "ivy.data_classes.container.experimental.statistical": [[76, 1, 1, "", "_ContainerWithStatisticalExperimental"]], "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental": [[76, 4, 1, "", "_abc_impl"], [76, 0, 1, "", "_static_cummax"], [76, 0, 1, "", "_static_cummin"], [76, 0, 1, "", "_static_nanmin"], [76, 0, 1, "", "bincount"], [76, 0, 1, "", "corrcoef"], [76, 0, 1, "", "cov"], [76, 0, 1, "", "cummax"], [76, 0, 1, "", "cummin"], [76, 0, 1, "", "histogram"], [76, 0, 1, "", "igamma"], [76, 0, 1, "", "lgamma"], [76, 0, 1, "", "median"], [76, 0, 1, "", "nanmean"], [76, 0, 1, "", "nanmedian"], [76, 0, 1, "", "nanmin"], [76, 0, 1, "", "nanprod"], [76, 0, 1, "", "quantile"], [76, 0, 1, "", "static_bincount"], [76, 0, 1, "", "static_corrcoef"], [76, 0, 1, "", "static_cov"], [76, 0, 1, "", "static_histogram"], [76, 0, 1, "", "static_igamma"], [76, 0, 1, "", "static_lgamma"], [76, 0, 1, "", "static_median"], [76, 0, 1, "", "static_nanmean"], [76, 0, 1, "", "static_nanmedian"], [76, 0, 1, "", "static_nanprod"], [76, 0, 1, "", "static_quantile"]], "ivy.data_classes.container.experimental.utility": [[76, 1, 1, "", "_ContainerWithUtilityExperimental"]], "ivy.data_classes.container.experimental.utility._ContainerWithUtilityExperimental": [[76, 4, 1, "", "_abc_impl"], [76, 0, 1, "", "optional_get_element"], [76, 0, 1, "", "static_optional_get_element"]], "ivy.data_classes.container.general": [[77, 1, 1, "", "_ContainerWithGeneral"]], "ivy.data_classes.container.general._ContainerWithGeneral": [[77, 4, 1, "", "_abc_impl"], [77, 0, 1, "", "_static_all_equal"], [77, 0, 1, "", "_static_array_equal"], [77, 0, 1, "", "_static_assert_supports_inplace"], [77, 0, 1, "", "_static_clip_matrix_norm"], [77, 0, 1, "", "_static_clip_vector_norm"], [77, 0, 1, "", "_static_einops_rearrange"], [77, 0, 1, "", "_static_einops_reduce"], [77, 0, 1, "", "_static_einops_repeat"], [77, 0, 1, "", "_static_exists"], [77, 0, 1, "", "_static_fourier_encode"], [77, 0, 1, "", "_static_gather"], [77, 0, 1, "", "_static_gather_nd"], [77, 0, 1, "", "_static_get_num_dims"], [77, 0, 1, "", "_static_has_nans"], [77, 0, 1, "", "_static_inplace_decrement"], [77, 0, 1, "", "_static_inplace_increment"], [77, 0, 1, "", "_static_inplace_update"], [77, 0, 1, "", "_static_is_array"], [77, 0, 1, "", "_static_is_ivy_array"], [77, 0, 1, "", "_static_is_native_array"], [77, 0, 1, "", "_static_scatter_flat"], [77, 0, 1, "", "_static_scatter_nd"], [77, 0, 1, "", "_static_size"], [77, 0, 1, "", "_static_stable_divide"], [77, 0, 1, "", "_static_stable_pow"], [77, 0, 1, "", "_static_supports_inplace_updates"], [77, 0, 1, "", "_static_to_list"], [77, 0, 1, "", "_static_to_numpy"], [77, 0, 1, "", "_static_to_scalar"], [77, 0, 1, "", "_static_value_is_nan"], [77, 0, 1, "", "all_equal"], [77, 0, 1, "", "array_equal"], [77, 0, 1, "", "assert_supports_inplace"], [77, 0, 1, "", "clip_matrix_norm"], [77, 0, 1, "", "clip_vector_norm"], [77, 0, 1, "", "einops_rearrange"], [77, 0, 1, "", "einops_reduce"], [77, 0, 1, "", "einops_repeat"], [77, 0, 1, "", "exists"], [77, 0, 1, "", "fourier_encode"], [77, 0, 1, "", "gather"], [77, 0, 1, "", "gather_nd"], [77, 0, 1, "", "get_num_dims"], [77, 0, 1, "", "has_nans"], [77, 0, 1, "", "inplace_decrement"], [77, 0, 1, "", "inplace_increment"], [77, 0, 1, "", "inplace_update"], [77, 0, 1, "", "is_array"], [77, 0, 1, "", "is_ivy_array"], [77, 0, 1, "", "is_native_array"], [77, 0, 1, "", "isin"], [77, 0, 1, "", "itemsize"], [77, 0, 1, "", "scatter_flat"], [77, 0, 1, "", "scatter_nd"], [77, 0, 1, "", "size"], [77, 0, 1, "", "stable_divide"], [77, 0, 1, "", "stable_pow"], [77, 0, 1, "", "static_isin"], [77, 0, 1, "", "static_itemsize"], [77, 0, 1, "", "static_strides"], [77, 0, 1, "", "strides"], [77, 0, 1, "", "supports_inplace_updates"], [77, 0, 1, "", "to_list"], [77, 0, 1, "", "to_numpy"], [77, 0, 1, "", "to_scalar"], [77, 0, 1, "", "value_is_nan"]], "ivy.data_classes.container.gradients": [[78, 1, 1, "", "_ContainerWithGradients"]], "ivy.data_classes.container.gradients._ContainerWithGradients": [[78, 4, 1, "", "_abc_impl"], [78, 0, 1, "", "_static_stop_gradient"], [78, 0, 1, "", "adam_step"], [78, 0, 1, "", "adam_update"], [78, 0, 1, "", "gradient_descent_update"], [78, 0, 1, "", "lamb_update"], [78, 0, 1, "", "lars_update"], [78, 0, 1, "", "optimizer_update"], [78, 0, 1, "", "stop_gradient"]], "ivy.data_classes.container.image": [[79, 1, 1, "", "_ContainerWithImage"]], "ivy.data_classes.container.image._ContainerWithImage": [[79, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.layers": [[80, 1, 1, "", "_ContainerWithLayers"]], "ivy.data_classes.container.layers._ContainerWithLayers": [[80, 4, 1, "", "_abc_impl"], [80, 0, 1, "", "_static_conv1d"], [80, 0, 1, "", "_static_conv1d_transpose"], [80, 0, 1, "", "_static_conv2d"], [80, 0, 1, "", "_static_conv2d_transpose"], [80, 0, 1, "", "_static_conv3d"], [80, 0, 1, "", "_static_conv3d_transpose"], [80, 0, 1, "", "_static_depthwise_conv2d"], [80, 0, 1, "", "_static_dropout"], [80, 0, 1, "", "_static_dropout1d"], [80, 0, 1, "", "_static_dropout2d"], [80, 0, 1, "", "_static_dropout3d"], [80, 0, 1, "", "_static_linear"], [80, 0, 1, "", "_static_lstm_update"], [80, 0, 1, "", "_static_multi_head_attention"], [80, 0, 1, "", "_static_reduce_window"], [80, 0, 1, "", "_static_scaled_dot_product_attention"], [80, 0, 1, "", "conv1d"], [80, 0, 1, "", "conv1d_transpose"], [80, 0, 1, "", "conv2d"], [80, 0, 1, "", "conv2d_transpose"], [80, 0, 1, "", "conv3d"], [80, 0, 1, "", "conv3d_transpose"], [80, 0, 1, "", "depthwise_conv2d"], [80, 0, 1, "", "dropout"], [80, 0, 1, "", "dropout1d"], [80, 0, 1, "", "dropout2d"], [80, 0, 1, "", "dropout3d"], [80, 0, 1, "", "linear"], [80, 0, 1, "", "lstm_update"], [80, 0, 1, "", "multi_head_attention"], [80, 0, 1, "", "reduce_window"], [80, 0, 1, "", "scaled_dot_product_attention"]], "ivy.data_classes.container.linear_algebra": [[81, 1, 1, "", "_ContainerWithLinearAlgebra"]], "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra": [[81, 4, 1, "", "_abc_impl"], [81, 0, 1, "", "_static_cholesky"], [81, 0, 1, "", "_static_cross"], [81, 0, 1, "", "_static_det"], [81, 0, 1, "", "_static_diag"], [81, 0, 1, "", "_static_diagonal"], [81, 0, 1, "", "_static_eigh"], [81, 0, 1, "", "_static_eigvalsh"], [81, 0, 1, "", "_static_inner"], [81, 0, 1, "", "_static_inv"], [81, 0, 1, "", "_static_matmul"], [81, 0, 1, "", "_static_matrix_norm"], [81, 0, 1, "", "_static_matrix_power"], [81, 0, 1, "", "_static_matrix_rank"], [81, 0, 1, "", "_static_matrix_transpose"], [81, 0, 1, "", "_static_outer"], [81, 0, 1, "", "_static_pinv"], [81, 0, 1, "", "_static_qr"], [81, 0, 1, "", "_static_slogdet"], [81, 0, 1, "", "_static_solve"], [81, 0, 1, "", "_static_svd"], [81, 0, 1, "", "_static_svdvals"], [81, 0, 1, "", "_static_tensordot"], [81, 0, 1, "", "_static_tensorsolve"], [81, 0, 1, "", "_static_trace"], [81, 0, 1, "", "_static_vander"], [81, 0, 1, "", "_static_vecdot"], [81, 0, 1, "", "_static_vector_norm"], [81, 0, 1, "", "_static_vector_to_skew_symmetric_matrix"], [81, 0, 1, "", "cholesky"], [81, 0, 1, "", "cross"], [81, 0, 1, "", "det"], [81, 0, 1, "", "diag"], [81, 0, 1, "", "diagonal"], [81, 0, 1, "", "eigh"], [81, 0, 1, "", "eigvalsh"], [81, 0, 1, "", "general_inner_product"], [81, 0, 1, "", "inner"], [81, 0, 1, "", "inv"], [81, 0, 1, "", "matmul"], [81, 0, 1, "", "matrix_norm"], [81, 0, 1, "", "matrix_power"], [81, 0, 1, "", "matrix_rank"], [81, 0, 1, "", "matrix_transpose"], [81, 0, 1, "", "outer"], [81, 0, 1, "", "pinv"], [81, 0, 1, "", "qr"], [81, 0, 1, "", "slogdet"], [81, 0, 1, "", "solve"], [81, 0, 1, "", "static_general_inner_product"], [81, 0, 1, "", "svd"], [81, 0, 1, "", "svdvals"], [81, 0, 1, "", "tensordot"], [81, 0, 1, "", "tensorsolve"], [81, 0, 1, "", "trace"], [81, 0, 1, "", "vander"], [81, 0, 1, "", "vecdot"], [81, 0, 1, "", "vector_norm"], [81, 0, 1, "", "vector_to_skew_symmetric_matrix"]], "ivy.data_classes.container.losses": [[82, 1, 1, "", "_ContainerWithLosses"]], "ivy.data_classes.container.losses._ContainerWithLosses": [[82, 4, 1, "", "_abc_impl"], [82, 0, 1, "", "_static_binary_cross_entropy"], [82, 0, 1, "", "_static_cross_entropy"], [82, 0, 1, "", "_static_sparse_cross_entropy"], [82, 0, 1, "", "binary_cross_entropy"], [82, 0, 1, "", "cross_entropy"], [82, 0, 1, "", "sparse_cross_entropy"]], "ivy.data_classes.container.manipulation": [[83, 1, 1, "", "_ContainerWithManipulation"]], "ivy.data_classes.container.manipulation._ContainerWithManipulation": [[83, 4, 1, "", "_abc_impl"], [83, 0, 1, "", "_static_clip"], [83, 0, 1, "", "_static_concat"], [83, 0, 1, "", "_static_constant_pad"], [83, 0, 1, "", "_static_expand_dims"], [83, 0, 1, "", "_static_flip"], [83, 0, 1, "", "_static_permute_dims"], [83, 0, 1, "", "_static_repeat"], [83, 0, 1, "", "_static_reshape"], [83, 0, 1, "", "_static_roll"], [83, 0, 1, "", "_static_split"], [83, 0, 1, "", "_static_squeeze"], [83, 0, 1, "", "_static_stack"], [83, 0, 1, "", "_static_swapaxes"], [83, 0, 1, "", "_static_tile"], [83, 0, 1, "", "_static_unstack"], [83, 0, 1, "", "_static_zero_pad"], [83, 0, 1, "", "clip"], [83, 0, 1, "", "concat"], [83, 0, 1, "", "constant_pad"], [83, 0, 1, "", "expand_dims"], [83, 0, 1, "", "flip"], [83, 0, 1, "", "permute_dims"], [83, 0, 1, "", "repeat"], [83, 0, 1, "", "reshape"], [83, 0, 1, "", "roll"], [83, 0, 1, "", "split"], [83, 0, 1, "", "squeeze"], [83, 0, 1, "", "stack"], [83, 0, 1, "", "swapaxes"], [83, 0, 1, "", "tile"], [83, 0, 1, "", "unstack"], [83, 0, 1, "", "zero_pad"]], "ivy.data_classes.container.norms": [[84, 1, 1, "", "_ContainerWithNorms"]], "ivy.data_classes.container.norms._ContainerWithNorms": [[84, 4, 1, "", "_abc_impl"], [84, 0, 1, "", "layer_norm"]], "ivy.data_classes.container.random": [[85, 1, 1, "", "_ContainerWithRandom"]], "ivy.data_classes.container.random._ContainerWithRandom": [[85, 4, 1, "", "_abc_impl"], [85, 0, 1, "", "_static_multinomial"], [85, 0, 1, "", "_static_randint"], [85, 0, 1, "", "_static_random_normal"], [85, 0, 1, "", "_static_random_uniform"], [85, 0, 1, "", "_static_shuffle"], [85, 0, 1, "", "multinomial"], [85, 0, 1, "", "randint"], [85, 0, 1, "", "random_normal"], [85, 0, 1, "", "random_uniform"], [85, 0, 1, "", "shuffle"]], "ivy.data_classes.container.searching": [[86, 1, 1, "", "_ContainerWithSearching"]], "ivy.data_classes.container.searching._ContainerWithSearching": [[86, 4, 1, "", "_abc_impl"], [86, 0, 1, "", "_static_argmax"], [86, 0, 1, "", "_static_argmin"], [86, 0, 1, "", "_static_argwhere"], [86, 0, 1, "", "_static_nonzero"], [86, 0, 1, "", "_static_where"], [86, 0, 1, "", "argmax"], [86, 0, 1, "", "argmin"], [86, 0, 1, "", "argwhere"], [86, 0, 1, "", "nonzero"], [86, 0, 1, "", "where"]], "ivy.data_classes.container.set": [[87, 1, 1, "", "_ContainerWithSet"]], "ivy.data_classes.container.set._ContainerWithSet": [[87, 4, 1, "", "_abc_impl"], [87, 0, 1, "", "_static_unique_all"], [87, 0, 1, "", "_static_unique_counts"], [87, 0, 1, "", "_static_unique_inverse"], [87, 0, 1, "", "_static_unique_values"], [87, 0, 1, "", "unique_all"], [87, 0, 1, "", "unique_counts"], [87, 0, 1, "", "unique_inverse"], [87, 0, 1, "", "unique_values"]], "ivy.data_classes.container.sorting": [[88, 1, 1, "", "_ContainerWithSorting"]], "ivy.data_classes.container.sorting._ContainerWithSorting": [[88, 4, 1, "", "_abc_impl"], [88, 0, 1, "", "_static_argsort"], [88, 0, 1, "", "_static_searchsorted"], [88, 0, 1, "", "_static_sort"], [88, 0, 1, "", "argsort"], [88, 0, 1, "", "msort"], [88, 0, 1, "", "searchsorted"], [88, 0, 1, "", "sort"], [88, 0, 1, "", "static_msort"]], "ivy.data_classes.container.statistical": [[89, 1, 1, "", "_ContainerWithStatistical"]], "ivy.data_classes.container.statistical._ContainerWithStatistical": [[89, 4, 1, "", "_abc_impl"], [89, 0, 1, "", "_static_cumprod"], [89, 0, 1, "", "_static_cumsum"], [89, 0, 1, "", "_static_min"], [89, 0, 1, "", "_static_prod"], [89, 0, 1, "", "_static_sum"], [89, 0, 1, "", "_static_var"], [89, 0, 1, "", "cumprod"], [89, 0, 1, "", "cumsum"], [89, 0, 1, "", "einsum"], [89, 0, 1, "", "max"], [89, 0, 1, "", "mean"], [89, 0, 1, "", "min"], [89, 0, 1, "", "prod"], [89, 0, 1, "", "std"], [89, 0, 1, "", "sum"], [89, 0, 1, "", "var"]], "ivy.data_classes.container.utility": [[90, 1, 1, "", "_ContainerWithUtility"]], "ivy.data_classes.container.utility._ContainerWithUtility": [[90, 4, 1, "", "_abc_impl"], [90, 0, 1, "", "_static_all"], [90, 0, 1, "", "_static_any"], [90, 0, 1, "", "all"], [90, 0, 1, "", "any"]], "ivy.data_classes.container.wrapping": [[91, 2, 1, "", "_wrap_function"], [91, 2, 1, "", "add_ivy_container_instance_methods"]], "ivy.data_classes.factorized_tensor": [[92, 3, 0, "-", "base"], [93, 3, 0, "-", "cp_tensor"], [94, 3, 0, "-", "parafac2_tensor"], [95, 3, 0, "-", "tr_tensor"], [96, 3, 0, "-", "tt_tensor"], [97, 3, 0, "-", "tucker_tensor"]], "ivy.data_classes.factorized_tensor.base": [[92, 1, 1, "", "FactorizedTensor"]], "ivy.data_classes.factorized_tensor.base.FactorizedTensor": [[92, 0, 1, "", "__init__"], [92, 4, 1, "", "_abc_impl"], [92, 0, 1, "", "mode_dot"], [92, 0, 1, "", "norm"], [92, 0, 1, "", "to_tensor"], [92, 0, 1, "", "to_unfolded"], [92, 0, 1, "", "to_vec"]], "ivy.data_classes.factorized_tensor.cp_tensor": [[93, 1, 1, "", "CPTensor"]], "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor": [[93, 0, 1, "", "__init__"], [93, 4, 1, "", "_abc_impl"], [93, 0, 1, "", "cp_copy"], [93, 0, 1, "", "cp_flip_sign"], [93, 0, 1, "", "cp_lstsq_grad"], [93, 0, 1, "", "cp_mode_dot"], [93, 0, 1, "", "cp_n_param"], [93, 0, 1, "", "cp_norm"], [93, 0, 1, "", "cp_normalize"], [93, 0, 1, "", "cp_to_tensor"], [93, 0, 1, "", "cp_to_unfolded"], [93, 0, 1, "", "cp_to_vec"], [93, 0, 1, "", "mode_dot"], [93, 5, 1, "", "n_param"], [93, 0, 1, "", "norm"], [93, 0, 1, "", "normalize"], [93, 0, 1, "", "to_tensor"], [93, 0, 1, "", "to_unfolded"], [93, 0, 1, "", "to_vec"], [93, 0, 1, "", "unfolding_dot_khatri_rao"], [93, 0, 1, "", "validate_cp_rank"], [93, 0, 1, "", "validate_cp_tensor"]], "ivy.data_classes.factorized_tensor.parafac2_tensor": [[94, 1, 1, "", "Parafac2Tensor"]], "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor": [[94, 0, 1, "", "__init__"], [94, 4, 1, "", "_abc_impl"], [94, 0, 1, "", "apply_parafac2_projections"], [94, 0, 1, "", "from_CPTensor"], [94, 5, 1, "", "n_param"], [94, 0, 1, "", "parafac2_normalise"], [94, 0, 1, "", "parafac2_to_slice"], [94, 0, 1, "", "parafac2_to_slices"], [94, 0, 1, "", "parafac2_to_tensor"], [94, 0, 1, "", "parafac2_to_unfolded"], [94, 0, 1, "", "parafac2_to_vec"], [94, 0, 1, "", "to_tensor"], [94, 0, 1, "", "to_unfolded"], [94, 0, 1, "", "to_vec"], [94, 0, 1, "", "validate_parafac2_tensor"]], "ivy.data_classes.factorized_tensor.tr_tensor": [[95, 1, 1, "", "TRTensor"]], "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor": [[95, 0, 1, "", "__init__"], [95, 4, 1, "", "_abc_impl"], [95, 5, 1, "", "n_param"], [95, 0, 1, "", "to_tensor"], [95, 0, 1, "", "to_unfolded"], [95, 0, 1, "", "to_vec"], [95, 0, 1, "", "tr_n_param"], [95, 0, 1, "", "tr_to_tensor"], [95, 0, 1, "", "tr_to_unfolded"], [95, 0, 1, "", "tr_to_vec"], [95, 0, 1, "", "validate_tr_rank"], [95, 0, 1, "", "validate_tr_tensor"]], "ivy.data_classes.factorized_tensor.tt_tensor": [[96, 1, 1, "", "TTTensor"]], "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor": [[96, 0, 1, "", "__init__"], [96, 4, 1, "", "_abc_impl"], [96, 0, 1, "", "_tt_n_param"], [96, 0, 1, "", "index_update"], [96, 5, 1, "", "n_param"], [96, 0, 1, "", "pad_tt_rank"], [96, 0, 1, "", "to_tensor"], [96, 0, 1, "", "to_unfolding"], [96, 0, 1, "", "to_vec"], [96, 0, 1, "", "tt_to_tensor"], [96, 0, 1, "", "tt_to_unfolded"], [96, 0, 1, "", "tt_to_vec"], [96, 0, 1, "", "validate_tt_rank"], [96, 0, 1, "", "validate_tt_tensor"]], "ivy.data_classes.factorized_tensor.tucker_tensor": [[97, 1, 1, "", "TuckerTensor"], [97, 2, 1, "", "_bisection_root_finder"]], "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor": [[97, 0, 1, "", "__init__"], [97, 4, 1, "", "_abc_impl"], [97, 0, 1, "", "mode_dot"], [97, 5, 1, "", "n_param"], [97, 0, 1, "", "to_tensor"], [97, 0, 1, "", "to_unfolded"], [97, 0, 1, "", "to_vec"], [97, 0, 1, "", "tucker_copy"], [97, 0, 1, "", "tucker_mode_dot"], [97, 0, 1, "", "tucker_n_param"], [97, 0, 1, "", "tucker_normalize"], [97, 0, 1, "", "tucker_to_tensor"], [97, 0, 1, "", "tucker_to_unfolded"], [97, 0, 1, "", "tucker_to_vec"], [97, 0, 1, "", "validate_tucker_rank"], [97, 0, 1, "", "validate_tucker_tensor"]], "ivy.data_classes.nested_array": [[102, 3, 0, "-", "base"], [103, 3, 0, "-", "elementwise"], [101, 3, 0, "-", "nested_array"]], "ivy.data_classes.nested_array.base": [[102, 1, 1, "", "NestedArrayBase"]], "ivy.data_classes.nested_array.base.NestedArrayBase": [[102, 0, 1, "", "__init__"], [102, 4, 1, "", "_abc_impl"], [102, 0, 1, "", "broadcast_shapes"], [102, 5, 1, "", "data"], [102, 5, 1, "", "device"], [102, 5, 1, "", "dtype"], [102, 5, 1, "", "inner_shape"], [102, 5, 1, "", "ndim"], [102, 0, 1, "", "nested_array"], [102, 5, 1, "", "nested_rank"], [102, 0, 1, "", "ragged_map"], [102, 0, 1, "", "ragged_multi_map"], [102, 0, 1, "", "ragged_multi_map_in_function"], [102, 0, 1, "", "replace_ivy_arrays"], [102, 5, 1, "", "shape"], [102, 0, 1, "", "unbind"]], "ivy.data_classes.nested_array.elementwise": [[103, 1, 1, "", "NestedArrayElementwise"]], "ivy.data_classes.nested_array.elementwise.NestedArrayElementwise": [[103, 4, 1, "", "_abc_impl"], [103, 0, 1, "", "static_add"]], "ivy.data_classes.nested_array.nested_array": [[101, 1, 1, "", "NestedArray"]], "ivy.data_classes.nested_array.nested_array.NestedArray": [[101, 0, 1, "", "__init__"], [101, 0, 1, "", "from_row_lengths"], [101, 0, 1, "", "from_row_splits"]], "ivy.functional.ivy": [[622, 3, 0, "-", "activations"], [623, 3, 0, "-", "constants"], [624, 3, 0, "-", "control_flow_ops"], [625, 3, 0, "-", "creation"], [626, 3, 0, "-", "data_type"], [627, 3, 0, "-", "device"], [628, 3, 0, "-", "elementwise"], [629, 3, 0, "-", "experimental"], [630, 3, 0, "-", "general"], [631, 3, 0, "-", "gradients"], [632, 3, 0, "-", "layers"], [633, 3, 0, "-", "linear_algebra"], [634, 3, 0, "-", "losses"], [635, 3, 0, "-", "manipulation"], [636, 3, 0, "-", "meta"], [637, 3, 0, "-", "nest"], [638, 3, 0, "-", "norms"], [639, 3, 0, "-", "random"], [640, 3, 0, "-", "searching"], [641, 3, 0, "-", "set"], [642, 3, 0, "-", "sorting"], [643, 3, 0, "-", "statistical"], [644, 3, 0, "-", "utility"]], "ivy.functional.ivy.experimental": [[363, 3, 0, "-", "activations"], [364, 3, 0, "-", "constants"], [365, 3, 0, "-", "creation"], [366, 3, 0, "-", "data_type"], [367, 3, 0, "-", "device"], [368, 3, 0, "-", "elementwise"], [369, 3, 0, "-", "general"], [370, 3, 0, "-", "gradients"], [371, 3, 0, "-", "layers"], [372, 3, 0, "-", "linear_algebra"], [373, 3, 0, "-", "losses"], [374, 3, 0, "-", "manipulation"], [375, 3, 0, "-", "meta"], [376, 3, 0, "-", "nest"], [377, 3, 0, "-", "norms"], [378, 3, 0, "-", "random"], [379, 3, 0, "-", "searching"], [380, 3, 0, "-", "set"], [381, 3, 0, "-", "sorting"], [382, 3, 0, "-", "sparse_array"], [383, 3, 0, "-", "statistical"], [384, 3, 0, "-", "utility"]], "ivy.stateful": [[784, 3, 0, "-", "activations"], [785, 3, 0, "-", "converters"], [786, 3, 0, "-", "helpers"], [787, 3, 0, "-", "initializers"], [788, 3, 0, "-", "layers"], [789, 3, 0, "-", "losses"], [790, 3, 0, "-", "module"], [791, 3, 0, "-", "norms"], [792, 3, 0, "-", "optimizers"], [793, 3, 0, "-", "sequential"]], "ivy.stateful.activations": [[784, 1, 1, "", "ELU"], [784, 1, 1, "", "GEGLU"], [784, 1, 1, "", "GELU"], [784, 1, 1, "", "Hardswish"], [784, 1, 1, "", "LeakyReLU"], [784, 1, 1, "", "LogSigmoid"], [784, 1, 1, "", "LogSoftmax"], [784, 1, 1, "", "Logit"], [784, 1, 1, "", "Mish"], [784, 1, 1, "", "PReLU"], [784, 1, 1, "", "ReLU"], [784, 1, 1, "", "ReLU6"], [784, 1, 1, "", "SeLU"], [784, 1, 1, "", "SiLU"], [784, 1, 1, "", "Sigmoid"], [784, 1, 1, "", "Softmax"], [784, 1, 1, "", "Softplus"], [784, 1, 1, "", "Tanh"]], "ivy.stateful.activations.ELU": [[784, 0, 1, "", "__init__"]], "ivy.stateful.activations.GEGLU": [[784, 0, 1, "", "__init__"]], "ivy.stateful.activations.GELU": [[784, 0, 1, "", "__init__"]], "ivy.stateful.activations.Hardswish": [[784, 0, 1, "", "__init__"]], "ivy.stateful.activations.LeakyReLU": [[784, 0, 1, "", "__init__"]], "ivy.stateful.activations.LogSigmoid": [[784, 0, 1, "", "__init__"]], "ivy.stateful.activations.LogSoftmax": [[784, 0, 1, "", "__init__"]], "ivy.stateful.activations.Logit": [[784, 0, 1, "", "__init__"]], "ivy.stateful.activations.Mish": [[784, 0, 1, "", "__init__"]], "ivy.stateful.activations.PReLU": [[784, 0, 1, "", "__init__"]], "ivy.stateful.activations.ReLU": [[784, 0, 1, "", "__init__"]], "ivy.stateful.activations.ReLU6": [[784, 0, 1, "", "__init__"]], "ivy.stateful.activations.SeLU": [[784, 0, 1, "", "__init__"]], "ivy.stateful.activations.SiLU": [[784, 0, 1, "", "__init__"]], "ivy.stateful.activations.Sigmoid": [[784, 0, 1, "", "__init__"]], "ivy.stateful.activations.Softmax": [[784, 0, 1, "", "__init__"]], "ivy.stateful.activations.Softplus": [[784, 0, 1, "", "__init__"]], "ivy.stateful.activations.Tanh": [[784, 0, 1, "", "__init__"]], "ivy.stateful.converters": [[785, 1, 1, "", "ModuleConverters"], [785, 2, 1, "", "to_ivy_module"]], "ivy.stateful.converters.ModuleConverters": [[785, 0, 1, "", "from_flax_module"], [785, 0, 1, "", "from_haiku_module"], [785, 0, 1, "", "from_keras_module"], [785, 0, 1, "", "from_paddle_module"], [785, 0, 1, "", "from_torch_module"], [785, 0, 1, "", "to_keras_module"]], "ivy.stateful.helpers": [[786, 1, 1, "", "ModuleHelpers"]], "ivy.stateful.initializers": [[787, 1, 1, "", "Constant"], [787, 1, 1, "", "FirstLayerSiren"], [787, 1, 1, "", "GlorotUniform"], [787, 1, 1, "", "Initializer"], [787, 1, 1, "", "KaimingNormal"], [787, 1, 1, "", "Ones"], [787, 1, 1, "", "RandomNormal"], [787, 1, 1, "", "Siren"], [787, 1, 1, "", "Uniform"], [787, 1, 1, "", "Zeros"]], "ivy.stateful.initializers.Constant": [[787, 0, 1, "", "__init__"], [787, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.FirstLayerSiren": [[787, 0, 1, "", "__init__"]], "ivy.stateful.initializers.GlorotUniform": [[787, 0, 1, "", "__init__"]], "ivy.stateful.initializers.Initializer": [[787, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.KaimingNormal": [[787, 0, 1, "", "__init__"], [787, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.Ones": [[787, 0, 1, "", "__init__"]], "ivy.stateful.initializers.RandomNormal": [[787, 0, 1, "", "__init__"], [787, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.Siren": [[787, 0, 1, "", "__init__"]], "ivy.stateful.initializers.Uniform": [[787, 0, 1, "", "__init__"], [787, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.Zeros": [[787, 0, 1, "", "__init__"]], "ivy.stateful.layers": [[788, 1, 1, "", "AdaptiveAvgPool1d"], [788, 1, 1, "", "AdaptiveAvgPool2d"], [788, 1, 1, "", "AvgPool1D"], [788, 1, 1, "", "AvgPool2D"], [788, 1, 1, "", "AvgPool3D"], [788, 1, 1, "", "Conv1D"], [788, 1, 1, "", "Conv1DTranspose"], [788, 1, 1, "", "Conv2D"], [788, 1, 1, "", "Conv2DTranspose"], [788, 1, 1, "", "Conv3D"], [788, 1, 1, "", "Conv3DTranspose"], [788, 1, 1, "", "Dct"], [788, 1, 1, "", "DepthwiseConv2D"], [788, 1, 1, "", "Dropout"], [788, 1, 1, "", "Embedding"], [788, 1, 1, "", "FFT"], [788, 1, 1, "", "IFFT"], [788, 1, 1, "", "Identity"], [788, 1, 1, "", "LSTM"], [788, 1, 1, "", "Linear"], [788, 1, 1, "", "MaxPool1D"], [788, 1, 1, "", "MaxPool2D"], [788, 1, 1, "", "MaxPool3D"], [788, 1, 1, "", "MultiHeadAttention"]], "ivy.stateful.layers.AdaptiveAvgPool1d": [[788, 0, 1, "", "__init__"]], "ivy.stateful.layers.AdaptiveAvgPool2d": [[788, 0, 1, "", "__init__"]], "ivy.stateful.layers.AvgPool1D": [[788, 0, 1, "", "__init__"]], "ivy.stateful.layers.AvgPool2D": [[788, 0, 1, "", "__init__"]], "ivy.stateful.layers.AvgPool3D": [[788, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv1D": [[788, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv1DTranspose": [[788, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv2D": [[788, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv2DTranspose": [[788, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv3D": [[788, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv3DTranspose": [[788, 0, 1, "", "__init__"]], "ivy.stateful.layers.Dct": [[788, 0, 1, "", "__init__"]], "ivy.stateful.layers.DepthwiseConv2D": [[788, 0, 1, "", "__init__"]], "ivy.stateful.layers.Dropout": [[788, 0, 1, "", "__init__"]], "ivy.stateful.layers.Embedding": [[788, 0, 1, "", "__init__"]], "ivy.stateful.layers.FFT": [[788, 0, 1, "", "__init__"]], "ivy.stateful.layers.IFFT": [[788, 0, 1, "", "__init__"]], "ivy.stateful.layers.Identity": [[788, 0, 1, "", "__init__"]], "ivy.stateful.layers.LSTM": [[788, 0, 1, "", "__init__"], [788, 0, 1, "", "get_initial_state"]], "ivy.stateful.layers.Linear": [[788, 0, 1, "", "__init__"]], "ivy.stateful.layers.MaxPool1D": [[788, 0, 1, "", "__init__"]], "ivy.stateful.layers.MaxPool2D": [[788, 0, 1, "", "__init__"]], "ivy.stateful.layers.MaxPool3D": [[788, 0, 1, "", "__init__"]], "ivy.stateful.layers.MultiHeadAttention": [[788, 0, 1, "", "__init__"]], "ivy.stateful.losses": [[789, 1, 1, "", "BinaryCrossEntropyLoss"], [789, 1, 1, "", "CrossEntropyLoss"], [789, 1, 1, "", "LogPoissonLoss"]], "ivy.stateful.losses.BinaryCrossEntropyLoss": [[789, 0, 1, "", "__init__"]], "ivy.stateful.losses.CrossEntropyLoss": [[789, 0, 1, "", "__init__"]], "ivy.stateful.losses.LogPoissonLoss": [[789, 0, 1, "", "__init__"]], "ivy.stateful.module": [[790, 1, 1, "", "Module"], [790, 1, 1, "", "ModuleMeta"]], "ivy.stateful.module.Module": [[790, 0, 1, "", "__call__"], [790, 0, 1, "", "__init__"], [790, 5, 1, "", "buffers"], [790, 0, 1, "", "build"], [790, 5, 1, "", "build_mode"], [790, 5, 1, "", "built"], [790, 5, 1, "", "device"], [790, 5, 1, "", "dtype"], [790, 0, 1, "", "eval"], [790, 0, 1, "", "load"], [790, 5, 1, "", "module_dict"], [790, 0, 1, "", "register_buffer"], [790, 0, 1, "", "register_parameter"], [790, 0, 1, "", "save"], [790, 0, 1, "", "save_weights"], [790, 0, 1, "", "show_graph"], [790, 5, 1, "", "state_dict"], [790, 0, 1, "", "to_device"], [790, 0, 1, "", "trace_graph"], [790, 0, 1, "", "train"], [790, 5, 1, "", "training"], [790, 5, 1, "", "v"]], "ivy.stateful.norms": [[791, 1, 1, "", "BatchNorm2D"], [791, 1, 1, "", "LayerNorm"]], "ivy.stateful.norms.BatchNorm2D": [[791, 0, 1, "", "__init__"]], "ivy.stateful.norms.LayerNorm": [[791, 0, 1, "", "__init__"]], "ivy.stateful.optimizers": [[792, 1, 1, "", "Adam"], [792, 1, 1, "", "AdamW"], [792, 1, 1, "", "LAMB"], [792, 1, 1, "", "LARS"], [792, 1, 1, "", "Optimizer"], [792, 1, 1, "", "SGD"]], "ivy.stateful.optimizers.Adam": [[792, 0, 1, "", "__init__"], [792, 0, 1, "", "set_state"], [792, 5, 1, "", "state"]], "ivy.stateful.optimizers.AdamW": [[792, 0, 1, "", "__init__"]], "ivy.stateful.optimizers.LAMB": [[792, 0, 1, "", "__init__"], [792, 0, 1, "", "set_state"], [792, 5, 1, "", "state"]], "ivy.stateful.optimizers.LARS": [[792, 0, 1, "", "__init__"], [792, 0, 1, "", "set_state"], [792, 5, 1, "", "state"]], "ivy.stateful.optimizers.Optimizer": [[792, 0, 1, "", "__init__"], [792, 0, 1, "", "set_state"], [792, 0, 1, "", "step"]], "ivy.stateful.optimizers.SGD": [[792, 0, 1, "", "__init__"], [792, 0, 1, "", "set_state"], [792, 5, 1, "", "state"]], "ivy.stateful.sequential": [[793, 1, 1, "", "Sequential"]], "ivy.stateful.sequential.Sequential": [[793, 0, 1, "", "__init__"]], "ivy.utils": [[794, 3, 0, "-", "assertions"], [795, 3, 0, "-", "backend"], [799, 3, 0, "-", "binaries"], [800, 3, 0, "-", "dynamic_import"], [801, 3, 0, "-", "einsum_parser"], [802, 3, 0, "-", "einsum_path_helpers"], [803, 3, 0, "-", "exceptions"], [804, 3, 0, "-", "inspection"], [805, 3, 0, "-", "logging"], [806, 3, 0, "-", "profiler"], [807, 3, 0, "-", "verbosity"]], "ivy.utils.assertions": [[794, 2, 1, "", "check_all"], [794, 2, 1, "", "check_all_or_any_fn"], [794, 2, 1, "", "check_any"], [794, 2, 1, "", "check_dev_correct_formatting"], [794, 2, 1, "", "check_dimensions"], [794, 2, 1, "", "check_elem_in_list"], [794, 2, 1, "", "check_equal"], [794, 2, 1, "", "check_exists"], [794, 2, 1, "", "check_false"], [794, 2, 1, "", "check_gather_input_valid"], [794, 2, 1, "", "check_gather_nd_input_valid"], [794, 2, 1, "", "check_greater"], [794, 2, 1, "", "check_inplace_sizes_valid"], [794, 2, 1, "", "check_isinstance"], [794, 2, 1, "", "check_kernel_padding_size"], [794, 2, 1, "", "check_less"], [794, 2, 1, "", "check_one_way_broadcastable"], [794, 2, 1, "", "check_same_dtype"], [794, 2, 1, "", "check_shape"], [794, 2, 1, "", "check_shapes_broadcastable"], [794, 2, 1, "", "check_true"], [794, 2, 1, "", "check_unsorted_segment_valid_params"]], "ivy.utils.backend": [[796, 3, 0, "-", "ast_helpers"], [797, 3, 0, "-", "handler"], [798, 3, 0, "-", "sub_backend_handler"]], "ivy.utils.backend.ast_helpers": [[796, 1, 1, "", "ImportTransformer"], [796, 1, 1, "", "IvyLoader"], [796, 1, 1, "", "IvyPathFinder"]], "ivy.utils.backend.ast_helpers.ImportTransformer": [[796, 0, 1, "", "__init__"], [796, 0, 1, "", "impersonate_import"], [796, 0, 1, "", "visit_Import"], [796, 0, 1, "", "visit_ImportFrom"]], "ivy.utils.backend.ast_helpers.IvyLoader": [[796, 0, 1, "", "__init__"], [796, 0, 1, "", "exec_module"]], "ivy.utils.backend.ast_helpers.IvyPathFinder": [[796, 0, 1, "", "find_spec"]], "ivy.utils.backend.handler": [[797, 1, 1, "", "ContextManager"], [797, 2, 1, "", "choose_random_backend"], [797, 2, 1, "", "current_backend"], [797, 2, 1, "", "dynamic_backend_converter"], [797, 2, 1, "", "prevent_access_locally"], [797, 2, 1, "", "previous_backend"], [797, 2, 1, "", "set_backend"], [797, 2, 1, "", "set_backend_to_specific_version"], [797, 2, 1, "", "set_jax_backend"], [797, 2, 1, "", "set_mxnet_backend"], [797, 2, 1, "", "set_numpy_backend"], [797, 2, 1, "", "set_paddle_backend"], [797, 2, 1, "", "set_tensorflow_backend"], [797, 2, 1, "", "set_torch_backend"], [797, 2, 1, "", "unset_backend"], [797, 2, 1, "", "with_backend"]], "ivy.utils.backend.handler.ContextManager": [[797, 0, 1, "", "__init__"]], "ivy.utils.backend.sub_backend_handler": [[798, 2, 1, "", "clear_sub_backends"], [798, 2, 1, "", "find_available_sub_backends"], [798, 2, 1, "", "fn_name_from_version_specific_fn_name"], [798, 2, 1, "", "fn_name_from_version_specific_fn_name_sub_backend"], [798, 2, 1, "", "set_sub_backend"], [798, 2, 1, "", "set_sub_backend_to_specific_version"], [798, 2, 1, "", "unset_sub_backend"]], "ivy.utils.binaries": [[799, 2, 1, "", "check_for_binaries"], [799, 2, 1, "", "cleanup_and_fetch_binaries"]], "ivy.utils.dynamic_import": [[800, 2, 1, "", "import_module"]], "ivy.utils.einsum_parser": [[801, 2, 1, "", "convert_interleaved_input"], [801, 2, 1, "", "convert_subscripts"], [801, 2, 1, "", "find_output_shape"], [801, 2, 1, "", "find_output_str"], [801, 2, 1, "", "gen_unused_symbols"], [801, 2, 1, "", "get_symbol"], [801, 2, 1, "", "has_valid_einsum_chars_only"], [801, 2, 1, "", "is_valid_einsum_char"], [801, 2, 1, "", "legalise_einsum_expr"], [801, 2, 1, "", "possibly_convert_to_numpy"]], "ivy.utils.einsum_path_helpers": [[802, 2, 1, "", "can_dot"], [802, 2, 1, "", "compute_size_by_dict"], [802, 2, 1, "", "find_contraction"], [802, 2, 1, "", "flop_count"], [802, 2, 1, "", "greedy_path"], [802, 2, 1, "", "optimal_path"], [802, 2, 1, "", "parse_einsum_input"], [802, 2, 1, "", "parse_possible_contraction"], [802, 2, 1, "", "update_other_results"]], "ivy.utils.exceptions": [[803, 7, 1, "", "InplaceUpdateException"], [803, 7, 1, "", "IvyAttributeError"], [803, 7, 1, "", "IvyBackendException"], [803, 7, 1, "", "IvyBroadcastShapeError"], [803, 7, 1, "", "IvyDeviceError"], [803, 7, 1, "", "IvyDtypePromotionError"], [803, 7, 1, "", "IvyError"], [803, 7, 1, "", "IvyException"], [803, 7, 1, "", "IvyIndexError"], [803, 7, 1, "", "IvyInvalidBackendException"], [803, 7, 1, "", "IvyNotImplementedException"], [803, 7, 1, "", "IvyValueError"], [803, 2, 1, "", "handle_exceptions"]], "ivy.utils.exceptions.InplaceUpdateException": [[803, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyAttributeError": [[803, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyBackendException": [[803, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyBroadcastShapeError": [[803, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyDeviceError": [[803, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyDtypePromotionError": [[803, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyError": [[803, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyException": [[803, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyIndexError": [[803, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyInvalidBackendException": [[803, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyNotImplementedException": [[803, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyValueError": [[803, 0, 1, "", "__init__"]], "ivy.utils.inspection": [[804, 2, 1, "", "add_array_specs"], [804, 2, 1, "", "fn_array_spec"]], "ivy.utils.logging": [[805, 2, 1, "", "set_logging_mode"], [805, 2, 1, "", "unset_logging_mode"]], "ivy.utils.profiler": [[806, 1, 1, "", "Profiler"], [806, 2, 1, "", "tensorflow_profile_start"], [806, 2, 1, "", "tensorflow_profile_stop"], [806, 2, 1, "", "torch_profiler_init"], [806, 2, 1, "", "torch_profiler_start"], [806, 2, 1, "", "torch_profiler_stop"]], "ivy.utils.profiler.Profiler": [[806, 0, 1, "", "__init__"], [806, 4, 1, "", "print_stats"], [806, 4, 1, "", "viz"]], "ivy.utils.verbosity": [[807, 2, 1, "", "cprint"]], "ivy_tests.test_ivy.helpers": [[767, 3, 0, "-", "assertions"], [768, 3, 0, "-", "available_frameworks"], [769, 3, 0, "-", "function_testing"], [770, 3, 0, "-", "globals"], [771, 3, 0, "-", "hypothesis_helpers"], [776, 3, 0, "-", "multiprocessing"], [777, 3, 0, "-", "pipeline_helper"], [778, 3, 0, "-", "structs"], [779, 3, 0, "-", "test_parameter_flags"], [780, 3, 0, "-", "testing_helpers"]], "ivy_tests.test_ivy.helpers.assertions": [[767, 2, 1, "", "assert_all_close"], [767, 2, 1, "", "assert_same_type"], [767, 2, 1, "", "assert_same_type_and_shape"], [767, 2, 1, "", "check_unsupported_device"], [767, 2, 1, "", "check_unsupported_device_and_dtype"], [767, 2, 1, "", "check_unsupported_dtype"], [767, 2, 1, "", "test_unsupported_function"], [767, 2, 1, "", "value_test"]], "ivy_tests.test_ivy.helpers.function_testing": [[769, 2, 1, "", "args_to_container"], [769, 2, 1, "", "args_to_frontend"], [769, 2, 1, "", "arrays_to_frontend"], [769, 2, 1, "", "as_lists"], [769, 2, 1, "", "convtrue"], [769, 2, 1, "", "create_args_kwargs"], [769, 2, 1, "", "flatten"], [769, 2, 1, "", "flatten_and_to_np"], [769, 2, 1, "", "flatten_frontend"], [769, 2, 1, "", "flatten_frontend_fw_to_np"], [769, 2, 1, "", "flatten_frontend_to_np"], [769, 2, 1, "", "get_frontend_ret"], [769, 2, 1, "", "get_ret_and_flattened_np_array"], [769, 2, 1, "", "gradient_incompatible_function"], [769, 2, 1, "", "gradient_test"], [769, 2, 1, "", "gradient_unsupported_dtypes"], [769, 2, 1, "", "kwargs_to_args_n_kwargs"], [769, 2, 1, "", "test_frontend_function"], [769, 2, 1, "", "test_frontend_method"], [769, 2, 1, "", "test_function"], [769, 2, 1, "", "test_function_backend_computation"], [769, 2, 1, "", "test_function_ground_truth_computation"], [769, 2, 1, "", "test_gradient_backend_computation"], [769, 2, 1, "", "test_gradient_ground_truth_computation"], [769, 2, 1, "", "test_method"], [769, 2, 1, "", "test_method_backend_computation"], [769, 2, 1, "", "test_method_ground_truth_computation"], [769, 2, 1, "", "traced_if_required"], [769, 2, 1, "", "wrap_frontend_function_args"]], "ivy_tests.test_ivy.helpers.globals": [[770, 6, 1, "", "CURRENT_FRONTEND_CONFIG"], [770, 7, 1, "", "InterruptedTest"], [770, 1, 1, "", "TestData"], [770, 2, 1, "", "setup_api_test"], [770, 2, 1, "", "setup_frontend_test"], [770, 2, 1, "", "teardown_api_test"], [770, 2, 1, "", "teardown_frontend_test"]], "ivy_tests.test_ivy.helpers.globals.InterruptedTest": [[770, 0, 1, "", "__init__"]], "ivy_tests.test_ivy.helpers.globals.TestData": [[770, 0, 1, "", "__init__"], [770, 4, 1, "", "fn_name"], [770, 4, 1, "", "fn_tree"], [770, 4, 1, "", "is_method"], [770, 4, 1, "", "supported_device_dtypes"], [770, 4, 1, "", "test_fn"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers": [[772, 3, 0, "-", "array_helpers"], [773, 3, 0, "-", "dtype_helpers"], [774, 3, 0, "-", "general_helpers"], [775, 3, 0, "-", "number_helpers"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers": [[772, 2, 1, "", "array_and_broadcastable_shape"], [772, 2, 1, "", "array_bools"], [772, 2, 1, "", "array_helpers_dtype_info_helper"], [772, 2, 1, "", "array_indices_axis"], [772, 2, 1, "", "array_indices_put_along_axis"], [772, 2, 1, "", "array_values"], [772, 2, 1, "", "arrays_and_axes"], [772, 2, 1, "", "arrays_for_pooling"], [772, 2, 1, "", "broadcast_shapes"], [772, 2, 1, "", "cond_data_gen_helper"], [772, 2, 1, "", "create_concatenable_arrays_dtypes"], [772, 2, 1, "", "create_nested_input"], [772, 2, 1, "", "dtype_and_values"], [772, 2, 1, "", "dtype_array_query"], [772, 2, 1, "", "dtype_array_query_val"], [772, 2, 1, "", "dtype_values_axis"], [772, 2, 1, "", "einsum_helper"], [772, 2, 1, "", "get_first_solve_batch_matrix"], [772, 2, 1, "", "get_first_solve_matrix"], [772, 2, 1, "", "get_second_solve_batch_matrix"], [772, 2, 1, "", "get_second_solve_matrix"], [772, 2, 1, "", "list_of_size"], [772, 2, 1, "", "lists"], [772, 2, 1, "", "mutually_broadcastable_shapes"], [772, 2, 1, "", "prod"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers": [[773, 2, 1, "", "array_dtypes"], [773, 2, 1, "", "cast_filter"], [773, 2, 1, "", "cast_filter_helper"], [773, 2, 1, "", "get_castable_dtype"], [773, 2, 1, "", "get_dtypes"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers": [[774, 7, 1, "", "BroadcastError"], [774, 2, 1, "", "apply_safety_factor"], [774, 2, 1, "", "broadcast_shapes"], [774, 2, 1, "", "dims_and_offset"], [774, 2, 1, "", "embedding_helper"], [774, 2, 1, "", "general_helpers_dtype_info_helper"], [774, 2, 1, "", "get_axis"], [774, 2, 1, "", "get_bounds"], [774, 2, 1, "", "get_mean_std"], [774, 2, 1, "", "get_shape"], [774, 2, 1, "", "matrix_is_stable"], [774, 2, 1, "", "reshape_shapes"], [774, 2, 1, "", "sizes_"], [774, 2, 1, "", "subsets"], [774, 2, 1, "", "two_broadcastable_shapes"], [774, 2, 1, "", "x_and_filters"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers": [[775, 2, 1, "", "floats"], [775, 2, 1, "", "ints"], [775, 2, 1, "", "number"]], "ivy_tests.test_ivy.helpers.multiprocessing": [[776, 2, 1, "", "backend_proc"], [776, 2, 1, "", "frontend_proc"]], "ivy_tests.test_ivy.helpers.pipeline_helper": [[777, 1, 1, "", "BackendHandler"], [777, 1, 1, "", "BackendHandlerMode"], [777, 1, 1, "", "WithBackendContext"], [777, 2, 1, "", "get_frontend_config"]], "ivy_tests.test_ivy.helpers.pipeline_helper.BackendHandler": [[777, 0, 1, "", "update_backend"]], "ivy_tests.test_ivy.helpers.pipeline_helper.BackendHandlerMode": [[777, 4, 1, "", "SetBackend"], [777, 4, 1, "", "WithBackend"]], "ivy_tests.test_ivy.helpers.pipeline_helper.WithBackendContext": [[777, 0, 1, "", "__init__"]], "ivy_tests.test_ivy.helpers.structs": [[778, 1, 1, "", "FrontendMethodData"]], "ivy_tests.test_ivy.helpers.structs.FrontendMethodData": [[778, 0, 1, "", "__init__"], [778, 4, 1, "", "framework_init_module"], [778, 4, 1, "", "init_name"], [778, 4, 1, "", "ivy_init_module"], [778, 4, 1, "", "method_name"]], "ivy_tests.test_ivy.helpers.test_parameter_flags": [[779, 1, 1, "", "DynamicFlag"], [779, 1, 1, "", "FrontendFunctionTestFlags"], [779, 1, 1, "", "FrontendInitTestFlags"], [779, 1, 1, "", "FrontendMethodTestFlags"], [779, 1, 1, "", "FunctionTestFlags"], [779, 1, 1, "", "InitMethodTestFlags"], [779, 1, 1, "", "MethodTestFlags"], [779, 1, 1, "", "TestFlags"], [779, 2, 1, "", "build_flag"], [779, 2, 1, "", "frontend_function_flags"], [779, 2, 1, "", "frontend_init_flags"], [779, 2, 1, "", "frontend_method_flags"], [779, 2, 1, "", "function_flags"], [779, 2, 1, "", "init_method_flags"], [779, 2, 1, "", "method_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.DynamicFlag": [[779, 0, 1, "", "__init__"], [779, 4, 1, "", "strategy"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendFunctionTestFlags": [[779, 0, 1, "", "__init__"], [779, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendInitTestFlags": [[779, 0, 1, "", "__init__"], [779, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendMethodTestFlags": [[779, 0, 1, "", "__init__"], [779, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.FunctionTestFlags": [[779, 0, 1, "", "__init__"], [779, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.InitMethodTestFlags": [[779, 0, 1, "", "__init__"], [779, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.MethodTestFlags": [[779, 0, 1, "", "__init__"], [779, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.TestFlags": [[779, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.testing_helpers": [[780, 2, 1, "", "handle_example"], [780, 2, 1, "", "handle_frontend_method"], [780, 2, 1, "", "handle_frontend_test"], [780, 2, 1, "", "handle_method"], [780, 2, 1, "", "handle_test"], [780, 2, 1, "", "num_positional_args"], [780, 2, 1, "", "num_positional_args_helper"], [780, 2, 1, "", "num_positional_args_method"], [780, 2, 1, "", "seed"]]}, "objtypes": {"0": "py:method", "1": "py:class", "2": "py:function", "3": "py:module", "4": "py:attribute", "5": "py:property", "6": "py:data", "7": "py:exception"}, "objnames": {"0": ["py", "method", "Python method"], "1": ["py", "class", "Python class"], "2": ["py", "function", "Python function"], "3": ["py", "module", "Python module"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "property", "Python property"], "6": ["py", "data", "Python data"], "7": ["py", "exception", "Python exception"]}, "titleterms": {"demo": [0, 2, 3, 4, 16, 27, 41, 42], "creat": [0, 39, 40, 814], "notebook": 0, "TO": 1, "replac": 1, "titl": 1, "exampl": [2, 5, 8, 10, 16, 35, 808, 827, 832, 835, 838, 840, 843, 859, 860, 861], "ivi": [3, 4, 5, 8, 15, 18, 26, 27, 28, 39, 40, 42, 43, 45, 808, 814, 816, 820, 822, 824, 827, 829, 835, 837, 838, 839, 840, 841, 842, 845, 846, 847, 848, 849, 850, 852, 859, 860, 861, 872], "alexnet": 3, "instal": [3, 4, 8, 18, 39, 40, 42, 808, 852], "data": [3, 4, 5, 8, 10, 18, 27, 39, 50, 73, 104, 366, 626, 641, 745, 746, 747, 748, 825, 837, 840, 848, 851], "prepar": [3, 4, 5, 8], "infer": [3, 4, 5, 8, 834], "torch": [3, 4, 5, 8, 35, 42, 866, 867], "tensorflow": [3, 4, 5, 10, 14, 35, 42, 43, 44, 866], "jax": [3, 4, 5, 7, 9, 10, 35, 42, 866], "appendix": [3, 5], "code": [3, 18, 19, 20, 21, 28, 39, 831, 839, 841], "implement": [3, 5, 824, 835, 837, 857], "bert": 4, "dependeci": 4, "import": [4, 5, 8, 10, 18, 39, 40, 43, 800], "modul": [4, 790, 825, 826, 849, 860], "sequenc": [4, 832], "classif": 4, "model": [4, 5, 7, 8, 9, 12, 13, 14, 25, 26, 27, 28, 39, 40, 41, 42, 43, 45, 850, 851], "imag": [5, 8, 56, 79, 249, 810, 822], "segment": 5, "unet": 5, "custom": [5, 820, 822, 835, 839, 848, 851], "preprocess": 5, "load": [5, 8, 10, 765, 848], "visualis": [5, 8], "initi": [5, 8, 787, 849], "nativ": [5, 8, 820, 843], "pretrain": [5, 8], "weight": [5, 8, 848], "mask": 5, "function": [5, 18, 27, 28, 39, 40, 41, 43, 45, 105, 769, 814, 823, 825, 826, 829, 832, 833, 834, 835, 837, 838, 840, 841, 842, 843, 845, 850, 851, 860], "us": [5, 8, 15, 23, 26, 43, 45, 808, 810, 814, 815, 819, 835, 838, 848, 852, 859, 860], "your": [5, 8, 816, 840], "backend": [5, 10, 18, 27, 39, 40, 42, 43, 795, 798, 814, 821, 825, 835, 841, 845, 851], "acceler": [7, 9, 10], "mmpretrain": 7, "resnet": [8, 46], "set": [8, 35, 39, 40, 64, 87, 380, 641, 815, 821, 830, 842, 852], "label": 8, "resnet34": 8, "classifi": 8, "resnet50": 8, "pytorch": [9, 10, 12, 41, 866], "xgboost": 10, "test": [10, 41, 769, 779, 780, 783, 814, 815, 816, 819, 824, 830, 838, 840], "compar": 10, "xgb_frontend": 10, "xgbclassifi": 10, "xgb": 10, "more": [10, 815, 843, 857], "exhaust": 10, "evalu": 10, "train": [10, 39, 41, 43], "time": 10, "v": [10, 22, 32, 35, 831, 851, 856, 859], "number": [10, 775, 832], "boost": 10, "round": [10, 12, 14, 18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 41, 279, 839], "fraction": 10, "comparison": [10, 848], "metric": [10, 43], "guid": [11, 16], "transpil": [12, 13, 14, 21, 22, 23, 24, 25, 27, 28, 31, 32, 33, 34, 35, 41, 45, 808, 850, 852, 860], "build": [12, 13, 14, 43, 810, 822, 845], "top": [12, 13, 14, 817, 824, 874], "up": [12, 14, 18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 41, 815, 830, 839, 852], "haiku": 13, "develop": 15, "convolut": 15, "network": [15, 40, 43, 848, 850], "tutori": [16, 43], "And": 16, "learn": [16, 17, 866], "basic": [16, 17, 39, 40, 816, 837], "write": [18, 26, 837, 840], "content": [18, 41], "handler": [18, 27, 797, 798, 845], "structur": [18, 27, 822, 835, 851], "api": [18, 27, 28, 814, 819, 823, 824, 835, 841, 845, 847, 849, 850, 852, 856, 859, 860, 861, 863, 870, 872], "state": [18, 27, 28, 849, 851, 859], "unifi": [19, 22, 23, 29, 32, 33, 34, 39, 808, 847, 857, 861, 868, 872], "trace": [20, 22, 23, 28, 687, 829], "lazi": [22, 32, 859], "eager": [22, 32, 859], "how": [23, 814, 822, 830, 839, 840], "decor": [23, 34, 829, 834, 840], "ani": [24, 25, 27, 28, 764], "librari": [24, 27, 28, 43, 45, 860], "odsc": 27, "framework": [27, 33, 39, 768, 781, 835, 838, 846, 866, 869, 872, 873], "graph": [27, 44, 867, 872], "tracer": [27, 845, 850, 852, 859, 867, 872], "quickstart": 28, "get": [28, 808, 816, 852], "familiar": 28, "0": [29, 30, 31, 32, 36, 37], "1": [30, 32, 33, 34, 35, 38, 45, 866], "compil": [30, 32, 33, 34, 40, 859, 864, 869, 871, 872], "2": [31, 34, 36, 45, 866], "select": 33, "As": 34, "3": [35, 37, 38, 45], "dynam": [35, 43, 800, 821, 851], "static": 35, "todo": [35, 816], "explain": 35, "via": 35, "why": [35, 840, 857], "mode": [35, 825, 829, 842], "i": [35, 808, 822, 843], "true": 35, "default": [35, 540], "when": [35, 808], "from": [35, 42, 852], "numpi": [35, 42, 837, 866], "fals": 35, "kornia": 36, "perceiv": 37, "stabl": 38, "diffus": 38, "oper": [39, 832, 842, 847, 851], "ml": [39, 855, 868, 872], "chang": 39, "one": 39, "line": [39, 816], "No": [39, 815, 857], "need": [39, 840], "worri": 39, "about": 39, "type": [39, 50, 73, 366, 626, 825, 833, 837, 851], "differ": 39, "them": 39, "all": [39, 763], "standalon": [39, 833], "defin": [39, 40, 41, 43], "optim": [39, 792, 849], "input": [39, 40, 832], "target": 39, "loss": [39, 59, 82, 373, 634, 789], "loop": [39, 43], "sampl": 40, "check": [40, 831, 851], "result": 40, "simpl": 40, "neural": 40, "deepmind": [41, 42], "": [41, 43, 814, 822, 839, 852], "perceiverio": [41, 42], "tabl": [41, 822, 825, 863], "construct": [41, 848], "some": 41, "helper": [41, 771, 772, 773, 774, 775, 777, 780, 786, 796, 802, 838, 840, 841], "pipelin": [41, 43, 777, 822, 824, 840, 851], "dataset": [41, 43], "download": 41, "dataload": 41, "gpu": [42, 851], "introduct": [42, 45, 837, 838], "python3": 42, "8": 42, "setup": [42, 831], "kernel": 42, "clone": [42, 815, 824], "repo": [42, 815], "ivy_model": 42, "run": [42, 816, 819, 822, 830, 840], "end": 43, "let": 43, "we": [43, 840], "ar": 43, "mnist": 43, "thi": 43, "temporari": 43, "loader": 43, "util": [43, 67, 90, 384, 644, 782], "plot": 43, "save": [43, 766, 848], "huggingfac": 44, "deit": 44, "can": 44, "visual": 44, "displai": 44, "html": 44, "file": 44, "browser": [44, 816], "To": [45, 816], "interfac": 45, "telemetri": 45, "18": 46, "activ": [47, 69, 363, 622, 784], "convers": [48, 71, 834], "creation": [49, 72, 365, 625], "devic": [51, 74, 367, 627, 826, 832, 837], "elementwis": [52, 75, 103, 368, 628], "experiment": [53, 76, 629, 814], "gener": [54, 77, 369, 630, 774, 835, 840, 843, 859], "gradient": [55, 78, 345, 370, 631, 835], "layer": [57, 80, 371, 632, 788], "linear": [58, 81, 372, 633, 656], "algebra": [58, 81, 372, 633], "manipul": [60, 83, 374, 635], "norm": [61, 84, 377, 638, 791], "random": [62, 85, 378, 639], "search": [63, 86, 379, 640], "sort": [65, 88, 381, 642, 752], "statist": [66, 89, 383, 643], "wrap": [68, 91, 834], "base": [70, 92, 102], "cp": 93, "tensor": [93, 94, 95, 96, 97, 100], "parafac2": 94, "tr": 95, "tt": 96, "tucker": [97, 447], "arrai": [98, 101, 123, 382, 772, 819, 820, 824, 832, 847, 856, 859, 863], "contain": [99, 816, 823, 848], "factor": 100, "nest": [101, 376, 637], "class": [104, 781, 820, 829, 837, 847], "gelu": 106, "hardswish": 107, "leaky_relu": 108, "log_softmax": 109, "mish": 110, "relu": 111, "sigmoid": 112, "softmax": 113, "softplu": 114, "softsign": 115, "cmp_i": 116, "cmp_isnot": 117, "for_loop": 118, "if_els": 119, "try_except": 120, "while_loop": 121, "arang": 122, "asarrai": 124, "copy_arrai": 125, "empti": 126, "empty_lik": 127, "ey": 128, "from_dlpack": 129, "note": [129, 140, 625], "frombuff": 130, "full": [131, 838], "full_lik": 132, "linspac": 133, "logspac": 134, "meshgrid": 135, "native_arrai": 136, "one_hot": 137, "ones": 138, "ones_lik": 139, "to_dlpack": 140, "tril": 141, "triu": 142, "triu_indic": 143, "zero": 144, "zeros_lik": 145, "as_ivy_dtyp": 146, "as_native_dtyp": 147, "astyp": 148, "broadcast_arrai": 149, "broadcast_to": 150, "can_cast": 151, "check_float": 152, "closest_valid_dtyp": 153, "default_complex_dtyp": 154, "default_dtyp": 155, "default_float_dtyp": 156, "default_int_dtyp": 157, "default_uint_dtyp": 158, "dtype": [159, 773, 832], "dtype_bit": 160, "finfo": 161, "function_supported_dtyp": 162, "function_unsupported_dtyp": 163, "iinfo": 164, "infer_default_dtyp": 165, "invalid_dtyp": 166, "is_bool_dtyp": 167, "is_complex_dtyp": 168, "is_float_dtyp": 169, "is_hashable_dtyp": 170, "is_int_dtyp": 171, "is_native_dtyp": 172, "is_uint_dtyp": 173, "promote_typ": 174, "promote_types_of_input": 175, "result_typ": 176, "set_default_complex_dtyp": 177, "set_default_dtyp": 178, "set_default_float_dtyp": 179, "set_default_int_dtyp": 180, "set_default_uint_dtyp": 181, "type_promote_arrai": 182, "unset_default_complex_dtyp": 183, "unset_default_dtyp": 184, "unset_default_float_dtyp": 185, "unset_default_int_dtyp": 186, "unset_default_uint_dtyp": 187, "valid_dtyp": 188, "as_ivy_dev": 189, "as_native_dev": 190, "clear_cached_mem_on_dev": 191, "default_devic": 192, "dev": 193, "dev_util": 194, "function_supported_devic": 195, "function_unsupported_devic": 196, "get_all_ivy_arrays_on_dev": 197, "gpu_is_avail": 198, "handle_soft_device_vari": 199, "num_cpu_cor": 200, "num_gpu": 201, "num_ivy_arrays_on_dev": 202, "percent_used_mem_on_dev": 203, "print_all_ivy_arrays_on_dev": 204, "set_default_devic": 205, "set_soft_device_mod": 206, "paramet": [206, 574, 575, 580, 581, 583, 584, 627, 630, 779, 784, 842], "set_split_factor": 207, "split_factor": 208, "split_func_cal": 209, "to_devic": 210, "total_mem_on_dev": 211, "tpu_is_avail": 212, "unset_default_devic": 213, "unset_soft_device_mod": 214, "used_mem_on_dev": 215, "ab": 216, "aco": 217, "acosh": 218, "add": [219, 827, 838, 872], "angl": 220, "asin": 221, "asinh": 222, "atan": 223, "atan2": 224, "atanh": 225, "bitwise_and": 226, "bitwise_invert": 227, "bitwise_left_shift": 228, "bitwise_or": 229, "bitwise_right_shift": 230, "bitwise_xor": 231, "ceil": 232, "co": 233, "cosh": 234, "deg2rad": 235, "divid": 236, "equal": 237, "erf": 238, "exp": 239, "exp2": 240, "expm1": 241, "floor": 242, "floor_divid": 243, "fmin": 244, "fmod": 245, "gcd": 246, "greater": 247, "greater_equ": 248, "isfinit": 250, "isinf": 251, "isnan": 252, "isreal": 253, "lcm": 254, "less": 255, "less_equ": 256, "log": [257, 805, 815], "log10": 258, "log1p": 259, "log2": 260, "logaddexp": 261, "logaddexp2": 262, "logical_and": 263, "logical_not": 264, "logical_or": 265, "logical_xor": 266, "maximum": 267, "minimum": 268, "multipli": 269, "nan_to_num": 270, "neg": 271, "not_equ": 272, "posit": [273, 832], "pow": 274, "rad2deg": 275, "real": 276, "reciproc": 277, "remaind": 278, "sign": 280, "sin": 281, "sinh": 282, "sqrt": 283, "squar": 284, "subtract": 285, "tan": [286, 827, 838], "tanh": 287, "trapz": 288, "trunc": 289, "trunc_divid": 290, "celu": 291, "elu": 292, "hardshrink": 293, "hardsilu": 294, "hardtanh": 295, "logit": 296, "logsigmoid": 297, "prelu": 298, "relu6": 299, "scaled_tanh": 300, "selu": 301, "silu": 302, "softshrink": 303, "stanh": 304, "tanhshrink": 305, "threshold": 306, "thresholded_relu": 307, "blackman_window": 308, "eye_lik": 309, "hamming_window": 310, "hann_window": 311, "indic": 312, "kaiser_bessel_derived_window": 313, "kaiser_window": 314, "mel_weight_matrix": 315, "ndenumer": 316, "ndindex": 317, "polyv": 318, "random_cp": 319, "random_parafac2": 320, "random_tr": 321, "random_tt": 322, "random_tuck": 323, "tril_indic": 324, "trilu": 325, "unsorted_segment_mean": 326, "unsorted_segment_min": 327, "unsorted_segment_sum": 328, "vorbis_window": 329, "allclos": 330, "amax": 331, "amin": 332, "binar": 333, "conj": 334, "copysign": 335, "count_nonzero": 336, "diff": 337, "digamma": 338, "erfc": 339, "erfinv": 340, "fix": [341, 814, 830], "float_pow": 342, "fmax": 343, "frexp": 344, "hypot": 346, "isclos": 347, "ldexp": 348, "lerp": 349, "lgamma": 350, "modf": 351, "nansum": 352, "nextaft": 353, "signbit": 354, "sinc": 355, "sparsify_tensor": 356, "xlogi": 357, "zeta": 358, "reduc": 359, "bind_custom_gradient_funct": 360, "jvp": 361, "vjp": 362, "constant": [364, 623], "meta": [375, 636], "spars": 382, "adaptive_avg_pool1d": 385, "adaptive_avg_pool2d": 386, "adaptive_max_pool2d": 387, "adaptive_max_pool3d": 388, "area_interpol": 389, "avg_pool1d": 390, "avg_pool2d": 391, "avg_pool3d": 392, "dct": 393, "dft": 394, "dropout1d": 395, "dropout2d": 396, "dropout3d": 397, "embed": 398, "fft": 399, "fft2": 400, "generate_einsum_equ": 401, "get_interpolate_kernel": 402, "idct": 403, "ifft": 404, "ifftn": 405, "interp": 406, "interpol": 407, "max_pool1d": 408, "max_pool2d": 409, "max_pool3d": 410, "max_unpool1d": 411, "nearest_interpol": 412, "pool": 413, "reduce_window": 414, "rfft": 415, "rfftn": 416, "rnn": 417, "sliding_window": 418, "stft": 419, "adjoint": 420, "batched_out": 421, "cond": 422, "diagflat": 423, "dot": 424, "eig": [425, 668], "eigh_tridiagon": 426, "eigval": 427, "general_inner_product": 428, "higher_order_mo": 429, "initialize_tuck": 430, "khatri_rao": 431, "kron": 432, "kroneck": 433, "lu_factor": 434, "lu_solv": 435, "make_svd_non_neg": 436, "matrix_exp": 437, "mode_dot": 438, "multi_dot": 439, "multi_mode_dot": 440, "partial_tuck": 441, "solve_triangular": 442, "svd_flip": 443, "tensor_train": 444, "truncated_svd": 445, "tt_matrix_to_tensor": 446, "hinge_embedding_loss": 448, "huber_loss": 449, "kl_div": 450, "l1_loss": 451, "log_poisson_loss": 452, "poisson_nll_loss": 453, "smooth_l1_loss": 454, "soft_margin_loss": 455, "as_strid": 456, "associative_scan": 457, "atleast_1d": 458, "atleast_2d": 459, "atleast_3d": 460, "broadcast_shap": 461, "check_scalar": 462, "choos": 463, "column_stack": 464, "concat_from_sequ": 465, "dsplit": 466, "dstack": 467, "expand": 468, "fill_diagon": 469, "flatten": 470, "fliplr": 471, "flipud": 472, "fold": 473, "heavisid": 474, "hsplit": 475, "hstack": 476, "i0": 477, "matric": 478, "moveaxi": 479, "pad": 480, "partial_fold": 481, "partial_tensor_to_vec": 482, "partial_unfold": 483, "partial_vec_to_tensor": 484, "put_along_axi": 485, "rot90": 486, "soft_threshold": 487, "take": 488, "take_along_axi": 489, "top_k": 490, "trim_zero": 491, "unflatten": 492, "unfold": 493, "unique_consecut": 494, "vsplit": 495, "vstack": 496, "batch_norm": 497, "group_norm": 498, "instance_norm": 499, "l1_normal": 500, "l2_normal": 501, "local_response_norm": 502, "lp_normal": 503, "bernoulli": 504, "beta": 505, "dirichlet": 506, "gamma": 507, "poisson": 508, "unravel_index": 509, "invert_permut": 510, "lexsort": 511, "is_ivy_sparse_arrai": 512, "is_native_sparse_arrai": 513, "native_sparse_arrai": 514, "native_sparse_array_to_indices_values_and_shap": 515, "bincount": 516, "corrcoef": 517, "cov": 518, "cummax": 519, "cummin": 520, "histogram": 521, "igamma": 522, "median": 523, "nanmean": 524, "nanmedian": 525, "nanmin": 526, "nanprod": 527, "quantil": 528, "optional_get_el": 529, "all_equ": 530, "arg_info": 531, "arg_nam": 532, "array_equ": 533, "assert_supports_inplac": 534, "cache_fn": 535, "clip_matrix_norm": 536, "clip_vector_norm": 537, "container_typ": 538, "current_backend_str": 539, "einops_rearrang": 541, "einops_reduc": 542, "einops_repeat": 543, "exist": [544, 810, 839], "fourier_encod": 545, "function_supported_devices_and_dtyp": 546, "function_unsupported_devices_and_dtyp": 547, "gather": 548, "gather_nd": 549, "get_all_arrays_in_memori": 550, "get_item": 551, "get_num_dim": 552, "get_referrers_recurs": 553, "has_nan": 554, "inplace_arrays_support": 555, "inplace_decr": 556, "inplace_incr": 557, "inplace_upd": 558, "inplace_variables_support": 559, "is_arrai": 560, "is_ivy_arrai": 561, "is_ivy_contain": 562, "is_ivy_nested_arrai": 563, "is_native_arrai": 564, "isin": 565, "isscalar": 566, "items": 567, "match_kwarg": 568, "multiprocess": [569, 776], "num_arrays_in_memori": 570, "print_all_arrays_in_memori": 571, "scatter_flat": 572, "scatter_nd": 573, "set_array_mod": 574, "set_exception_trace_mod": 575, "set_inplace_mod": 576, "set_item": 577, "set_min_bas": 578, "set_min_denomin": 579, "set_nestable_mod": 580, "set_precise_mod": 581, "set_queue_timeout": 582, "set_shape_array_mod": 583, "set_show_func_wrapper_trace_mod": 584, "set_tmp_dir": 585, "shape": [586, 641, 745, 746, 747, 748, 834, 851], "size": [587, 851], "stable_divid": 588, "stable_pow": 589, "stride": 590, "supports_inplace_upd": 591, "to_ivy_shap": 592, "to_list": 593, "to_native_shap": 594, "to_numpi": 595, "to_scalar": 596, "try_else_non": 597, "unset_array_mod": 598, "unset_exception_trace_mod": 599, "unset_inplace_mod": 600, "unset_min_bas": 601, "unset_min_denomin": 602, "unset_nestable_mod": 603, "unset_precise_mod": 604, "unset_queue_timeout": 605, "unset_shape_array_mod": 606, "unset_show_func_wrapper_trace_mod": 607, "unset_tmp_dir": 608, "value_is_nan": 609, "vmap": 610, "adam_step": 611, "adam_upd": 612, "execute_with_gradi": [613, 835], "grad": 614, "gradient_descent_upd": 615, "jac": 616, "lamb_upd": 617, "lars_upd": 618, "optimizer_upd": 619, "stop_gradi": 620, "value_and_grad": 621, "control": [624, 851], "flow": [624, 851], "op": 624, "depend": [641, 745, 746, 747, 748], "output": [641, 745, 746, 747, 748], "conv": 645, "conv1d": 646, "conv1d_transpos": 647, "conv2d": 648, "conv2d_transpos": 649, "conv3d": 650, "conv3d_transpos": 651, "conv_general_dil": 652, "conv_general_transpos": 653, "depthwise_conv2d": 654, "dropout": 655, "lstm": 657, "lstm_updat": 658, "multi_head_attent": 659, "nm": 660, "roi_align": 661, "scaled_dot_product_attent": 662, "choleski": 663, "cross": 664, "det": 665, "diag": 666, "diagon": 667, "eigh": 669, "eigvalsh": 670, "inner": 671, "inv": 672, "matmul": 673, "matrix_norm": 674, "matrix_pow": 675, "matrix_rank": 676, "matrix_transpos": 677, "outer": 678, "pinv": 679, "qr": 680, "slogdet": 681, "solv": 682, "svd": 683, "svdval": 684, "tensordot": 685, "tensorsolv": 686, "vander": 688, "vecdot": 689, "vector_norm": 690, "vector_to_skew_symmetric_matrix": 691, "binary_cross_entropi": 692, "cross_entropi": 693, "sparse_cross_entropi": 694, "clip": 695, "concat": 696, "constant_pad": 697, "expand_dim": 698, "flip": 699, "permute_dim": 700, "repeat": 701, "reshap": 702, "roll": [703, 827], "split": 704, "squeez": 705, "stack": [706, 829], "swapax": 707, "tile": 708, "unstack": 709, "zero_pad": 710, "fomaml_step": 711, "maml_step": 712, "reptile_step": 713, "all_nested_indic": 714, "copy_nest": 715, "duplicate_array_index_chain": 716, "index_nest": 717, "insert_into_nest_at_index": 718, "insert_into_nest_at_indic": 719, "map": [720, 824], "map_nest_at_index": 721, "map_nest_at_indic": 722, "multi_index_nest": 723, "nested_ani": 724, "nested_argwher": 725, "nested_map": 726, "nested_multi_map": 727, "prune_empti": 728, "prune_nest_at_index": 729, "prune_nest_at_indic": 730, "set_nest_at_index": 731, "set_nest_at_indic": 732, "layer_norm": 733, "multinomi": 734, "randint": 735, "random_norm": 736, "random_uniform": 737, "seed": 738, "shuffl": 739, "argmax": 740, "argmin": 741, "argwher": 742, "nonzero": 743, "where": [744, 814, 830], "unique_al": 745, "unique_count": 746, "unique_invers": 747, "unique_valu": 748, "argsort": 749, "msort": 750, "searchsort": 751, "cumprod": 753, "cumsum": 754, "einsum": [755, 801, 802], "max": 756, "mean": 757, "min": 758, "prod": 759, "std": 760, "sum": 761, "var": 762, "assert": [767, 794, 829], "avail": 768, "global": [770, 842], "hypothesi": [771, 815, 838, 840], "struct": 778, "flag": 779, "convert": [785, 850], "sequenti": 793, "ast": 796, "sub": 798, "binari": [799, 815], "parser": 801, "path": 802, "except": [803, 829, 834], "inspect": 804, "profil": 806, "verbos": 807, "statu": 808, "ai": 808, "start": [808, 852], "pip": [808, 852], "document": 808, "dive": [808, 818], "deeper": 808, "should": 808, "contribut": [808, 809, 814, 839], "commun": 808, "citat": 808, "doc": [810, 822], "docker": [810, 815, 816, 822, 852], "conveni": [810, 822, 833], "script": [810, 822], "hub": 810, "local": [810, 816, 831], "without": [810, 838], "contributor": [811, 817, 874], "reward": 811, "badg": 811, "tier": 811, "error": [812, 829, 830], "handl": [812, 820, 826, 829, 834, 851], "help": [813, 816, 830], "resourc": 813, "open": 814, "task": 814, "fail": [814, 830, 840], "frontend": [814, 821, 837, 838, 850], "place": 814, "checklist": 814, "format": [814, 831, 865, 872], "extend": [814, 840, 843], "an": [814, 835], "issu": [814, 816, 831, 852], "github": [814, 815], "templat": 814, "fork": [815, 816], "pre": [815, 831], "commit": [815, 816, 824, 831], "pycharm": [815, 816, 831], "virtual": 815, "environ": 815, "miniconda": 815, "venv": 815, "interpret": 815, "window": 815, "maco": 815, "ubuntu": 815, "detail": 815, "free": 815, "wsl": 815, "codespac": 815, "The": [815, 816, 822, 835, 837, 847, 851, 856], "list": 816, "manag": 816, "who": 816, "ask": [816, 830], "With": 816, "command": 816, "pull": [816, 824], "request": [816, 824], "small": 816, "often": 816, "interact": 816, "most": 816, "out": [816, 832, 834, 836], "id": [816, 819], "program": 817, "core": [817, 874], "rise": [817, 874], "deep": 818, "termin": 819, "regener": 819, "failur": 819, "skip": 819, "integr": [820, 824, 831, 839, 840], "version": [821, 841, 851], "support": [821, 825, 834, 837, 851], "builder": 822, "being": 822, "option": 822, "index": 822, "rst": 822, "partial_conf": 822, "py": 822, "prebuild": 822, "sh": 822, "extens": 822, "custom_autosummari": 822, "hide": 822, "discussion_link": 822, "skippable_funct": 822, "ivy_data": 822, "instanc": [823, 837, 838, 847], "method": [823, 837, 838, 847, 848], "special": [823, 825, 837], "nestabl": [823, 832, 833, 834], "continu": [824, 831], "push": 824, "pr": 824, "trigger": 824, "A": [824, 843], "down": 824, "view": [824, 834, 836], "store": 824, "retriev": 824, "repositori": 824, "nitti": 824, "gritti": 824, "storag": 824, "space": 824, "unifyai": 824, "determin": 824, "coverag": 824, "workflow": 824, "multipl": 824, "runner": 824, "race": 824, "condit": 824, "period": 824, "manual": 824, "dispatch": 824, "ci": 824, "dashboard": 824, "promot": [825, 837], "precis": 825, "non": [825, 843], "argument": [825, 826, 832, 834, 836, 837], "other": [825, 826], "unsupport": 825, "attribut": [825, 842], "case": [825, 848], "bug": 825, "cast": [825, 837], "superset": [825, 843], "docstr": [827, 828], "configur": [829, 838, 848], "func_wrapp": 829, "prune": 829, "handle_except": 829, "consist": [829, 840], "prerequir": 830, "common": [830, 831], "lint": [831, 839], "keyword": 832, "integ": 832, "primari": 833, "composit": 833, "mix": [833, 834, 840], "partial": [833, 834, 840], "order": 834, "wrapper": [834, 872, 873], "miscellan": 834, "overview": [835, 839], "usag": [835, 839, 843, 861], "signatur": 835, "design": [835, 841, 844], "our": 835, "polici": [835, 837], "specif": [835, 870, 871, 872], "consider": 835, "inplac": 836, "updat": 836, "copi": 836, "short": 837, "unus": 837, "rule": 837, "duplic": [837, 843], "valu": 838, "alia": 838, "formatt": 839, "functionorderingformatt": 839, "work": [839, 856, 862], "own": 840, "strategi": 840, "ad": 840, "explicit": 840, "do": [840, 856], "effect": 840, "bonu": 840, "featur": 840, "self": 840, "test_array_funct": 840, "re": [840, 857], "navig": 841, "categor": 841, "submodul": 841, "unpin": 841, "properti": 842, "getter": 842, "setter": 842, "set_": 842, "unset_": 842, "behaviour": 843, "standard": [843, 856, 863, 872], "what": [843, 872], "balanc": 843, "effici": 843, "maxim": 843, "block": 845, "monkei": 847, "patch": 847, "represent": 848, "recurs": 848, "built": 848, "ins": 848, "access": 848, "compartment": 848, "role": 850, "faq": 851, "maintain": 851, "deploy": 851, "auto": 851, "differenti": 851, "replica": 851, "parallel": 851, "altern": 851, "sourc": 852, "folder": 852, "kei": 852, "question": 852, "glossari": 853, "motiv": 854, "explos": 855, "skeptic": 856, "complimentari": 856, "competit": 856, "infinit": 857, "shelf": 857, "life": 857, "One": 858, "liner": 858, "trace_graph": 859, "cach": 859, "sharp": [859, 860, 861], "bit": [859, 860, 861], "relat": 862, "infrastructur": [864, 872], "llvm": 864, "mlir": 864, "oneapi": 864, "exchang": [865, 872], "onnx": 865, "nnef": 865, "coreml": 865, "matlab": 866, "scipi": 866, "scikit": 866, "theano": 866, "panda": 866, "julia": 866, "apach": [866, 869], "spark": 866, "mllib": 866, "caff": 866, "chainer": 866, "mxnet": 866, "cntk": 866, "flux": 866, "dex": 866, "languag": 866, "tf": 867, "jaxpr": 867, "jit": 867, "fx": 867, "compani": [868, 872], "quansight": 868, "modular": 868, "octoml": 868, "multi": [869, 872], "vendor": [869, 870, 871, 872], "tvm": 869, "xla": 869, "gcc": 869, "tensorrt": 870, "cuda": 870, "icc": 871, "icx": 871, "nvcc": 871, "doe": 872, "eagerpi": 873, "kera": 873, "thinc": 873, "tensorli": 873, "neuropod": 873, "leaderboard": 874}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "nbsphinx": 4, "sphinx": 60}, "alltitles": {"default_int_dtype": [[157, "default-int-dtype"]], "can_cast": [[151, "can-cast"]], "is_int_dtype": [[171, "is-int-dtype"]], "set_default_complex_dtype": [[177, "set-default-complex-dtype"]], "set_default_float_dtype": [[179, "set-default-float-dtype"]], "zeros": [[144, "zeros"]], "is_float_dtype": [[169, "is-float-dtype"]], "unset_default_complex_dtype": [[183, "unset-default-complex-dtype"]], "is_complex_dtype": [[168, "is-complex-dtype"]], "broadcast_to": [[150, "broadcast-to"]], "promote_types": [[174, "promote-types"]], "triu": [[142, "triu"]], "check_float": [[152, "check-float"]], "default_uint_dtype": [[158, "default-uint-dtype"]], "invalid_dtype": [[166, "invalid-dtype"]], "set_default_dtype": [[178, "set-default-dtype"]], "dtype_bits": [[160, "dtype-bits"]], "infer_default_dtype": [[165, "infer-default-dtype"]], "tril": [[141, "tril"]], "broadcast_arrays": [[149, "broadcast-arrays"]], "default_float_dtype": [[156, "default-float-dtype"]], "function_supported_dtypes": [[162, "function-supported-dtypes"]], "finfo": [[161, "finfo"]], "is_bool_dtype": [[167, "is-bool-dtype"]], "promote_types_of_inputs": [[175, "promote-types-of-inputs"]], "dtype": [[159, "dtype"]], "ones": [[138, "ones"]], "default_dtype": [[155, "default-dtype"]], "set_default_uint_dtype": [[181, "set-default-uint-dtype"]], "iinfo": [[164, "iinfo"]], "result_type": [[176, "result-type"]], "set_default_int_dtype": [[180, "set-default-int-dtype"]], "closest_valid_dtype": [[153, "closest-valid-dtype"]], "function_unsupported_dtypes": [[163, "function-unsupported-dtypes"]], "type_promote_arrays": [[182, "type-promote-arrays"]], "is_uint_dtype": [[173, "is-uint-dtype"]], "is_hashable_dtype": [[170, "is-hashable-dtype"]], "ones_like": [[139, "ones-like"]], "as_ivy_dtype": [[146, "as-ivy-dtype"]], "as_native_dtype": [[147, "as-native-dtype"]], "zeros_like": [[145, "zeros-like"]], "triu_indices": [[143, "triu-indices"]], "to_dlpack": [[140, "to-dlpack"]], "Note": [[140, null], [129, null], [625, null], [625, null]], "astype": [[148, "astype"]], "is_native_dtype": [[172, "is-native-dtype"]], "default_complex_dtype": [[154, "default-complex-dtype"]], "Contributor Leaderboard": [[874, "contributor-leaderboard"]], "Top Contributors": [[874, "top-contributors"]], "Rising Contributors": [[874, "rising-contributors"]], "Core Contributors": [[874, "core-contributors"]], "Contributors": [[874, "contributors"]], "ivy.trace_graph()": [[859, "ivy-trace-graph"]], "Tracer API": [[859, "tracer-api"]], "Using the tracer": [[859, "using-the-tracer"]], "Eager vs lazy Compilation": [[859, "eager-vs-lazy-compilation"]], "Array caching": [[859, "array-caching"]], "Generators": [[859, "generators"]], "Stateful": [[859, "stateful"]], "Sharp bits": [[859, "sharp-bits"], [861, "sharp-bits"], [860, "sharp-bits"]], "Examples": [[859, "examples"], [832, "examples"], [861, "examples"], [860, "examples"], [808, "examples"]], "Function Types": [[833, "function-types"]], "Primary Functions": [[833, "primary-functions"]], "Compositional Functions": [[833, "compositional-functions"]], "Mixed Functions": [[833, "mixed-functions"]], "Partial Mixed Functions": [[833, "partial-mixed-functions"]], "Standalone Functions": [[833, "standalone-functions"]], "Nestable Functions": [[833, "nestable-functions"], [832, "nestable-functions"], [823, "nestable-functions"]], "Convenience Functions": [[833, "convenience-functions"]], "Formatting": [[831, "formatting"]], "Lint Checks": [[831, "lint-checks"], [831, "id2"]], "Setup Formatting Locally": [[831, "setup-formatting-locally"]], "Pre-commit": [[831, "pre-commit"]], "VS Code": [[831, "vs-code"]], "PyCharm": [[831, "pycharm"], [815, "pycharm"]], "Common Issues with Pre-Commit": [[831, "common-issues-with-pre-commit"]], "Continuous Integration": [[831, "continuous-integration"], [824, "continuous-integration"]], "Lint Formatting": [[831, "lint-formatting"]], "Vendor-Specific APIs": [[870, "vendor-specific-apis"], [872, "vendor-specific-apis"]], "TensorRT tensorrt": [[870, "tensorrt-tensorrt"]], "CUDA cuda": [[870, "cuda-cuda"]], "FAQ": [[851, "faq"]], "Maintaining Backend Versions": [[851, "maintaining-backend-versions"]], "Dynamic Sizes": [[851, "dynamic-sizes"]], "Type and Shape Checking": [[851, "type-and-shape-checking"]], "GPU handling": [[851, "gpu-handling"]], "Model Deployment": [[851, "model-deployment"]], "Dynamic Control Flow": [[851, "dynamic-control-flow"]], "Auto-Differentiation": [[851, "auto-differentiation"]], "Replicas, and Data vs Model Parallelism": [[851, "replicas-and-data-vs-model-parallelism"]], "Support for Functions": [[851, "support-for-functions"]], "Alternative Data Structures": [[851, "alternative-data-structures"]], "Custom Operations": [[851, "custom-operations"]], "The Pipeline": [[851, "the-pipeline"]], "State": [[851, "state"]], "ML Explosion": [[855, "ml-explosion"]], "Standardization": [[856, "standardization"]], "Skepticism": [[856, "skepticism"]], "Complimentary vs Competitive": [[856, "complimentary-vs-competitive"]], "Do Standards Work?": [[856, "do-standards-work"]], "The Array API Standard": [[856, "the-array-api-standard"]], "Function Wrapping": [[834, "function-wrapping"]], "Decorator order": [[834, "decorator-order"]], "Conversion Wrappers": [[834, "conversion-wrappers"]], "Inference Wrappers": [[834, "inference-wrappers"]], "Out Argument Support": [[834, "out-argument-support"]], "Nestable Support": [[834, "nestable-support"]], "Partial Mixed Function Support": [[834, "partial-mixed-function-support"]], "Shape Conversion": [[834, "shape-conversion"]], "View Handling": [[834, "view-handling"]], "Exception Handling": [[834, "exception-handling"], [829, "exception-handling"]], "Miscellaneous Wrappers": [[834, "miscellaneous-wrappers"]], "Related Work": [[862, "related-work"]], "Exchange Formats": [[865, "exchange-formats"], [872, "exchange-formats"]], "ONNX onnx": [[865, "onnx-onnx"]], "NNEF nnef": [[865, "nnef-nnef"]], "CoreML coreml": [[865, "coreml-coreml"]], "Graph Tracers": [[867, "graph-tracers"], [872, "graph-tracers"]], "tf.Graph": [[867, "tf-graph"]], "Jaxpr": [[867, "jaxpr"]], "torch.jit": [[867, "torch-jit"]], "torch.fx": [[867, "torch-fx"]], "Ivy Exception Class": [[829, "ivy-exception-class"]], "Configurable Mode for Stack Trace": [[829, "configurable-mode-for-stack-trace"]], "Ivy func_wrapper Pruning": [[829, "ivy-func-wrapper-pruning"]], "@handle_exceptions Decorator": [[829, "handle-exceptions-decorator"]], "Consistency in Errors": [[829, "consistency-in-errors"]], "Assertion Function": [[829, "assertion-function"]], "Operating Modes": [[842, "operating-modes"]], "Global Parameter Properties": [[842, "global-parameter-properties"]], "Getter: ivy.<setting> attribute": [[842, "getter-ivy-setting-attribute"]], "Setter: ivy.set_<setting> and ivy.unset_<setting> functions": [[842, "setter-ivy-set-setting-and-ivy-unset-setting-functions"]], "Function Arguments": [[832, "function-arguments"]], "Positional and Keyword Arguments": [[832, "positional-and-keyword-arguments"]], "Input Arrays": [[832, "input-arrays"]], "out Argument": [[832, "out-argument"]], "dtype and device arguments": [[832, "dtype-and-device-arguments"]], "Numbers in Operator Functions": [[832, "numbers-in-operator-functions"]], "Integer Sequences": [[832, "integer-sequences"]], "Ivy Container": [[848, "ivy-container"]], "Construction": [[848, "construction"]], "Representation": [[848, "representation"]], "Recursive Methods": [[848, "recursive-methods"]], "Built-ins": [[848, "built-ins"]], "Access": [[848, "access"]], "Saving and Loading": [[848, "saving-and-loading"]], "Comparisons": [[848, "comparisons"]], "Customized Representations": [[848, "customized-representations"]], "Use Cases": [[848, "use-cases"]], "Compartmentalization": [[848, "compartmentalization"]], "Configuration": [[848, "configuration"]], "Data loading": [[848, "data-loading"]], "Network weights": [[848, "network-weights"]], "Vendor-Specific Compilers": [[871, "vendor-specific-compilers"], [872, "vendor-specific-compilers"]], "ICC": [[871, "id1"]], "ICX": [[871, "icx"]], "NVCC": [[871, "nvcc"]], "Ivy Tests": [[840, "ivy-tests"], [824, "ivy-tests"]], "Testing Pipeline": [[840, "testing-pipeline"]], "Hypothesis": [[840, "id2"]], "Data Generation": [[840, "id3"]], "Writing your own strategy": [[840, "writing-your-own-strategy"]], "Writing Hypothesis Tests": [[840, "writing-hypothesis-tests"]], "Ivy Test Decorators": [[840, "ivy-test-decorators"]], "Writing Ivy Tests": [[840, "writing-ivy-tests"]], "Integration of Strategies into Ivy Tests": [[840, "integration-of-strategies-into-ivy-tests"]], "Adding Explicit Examples to tests": [[840, "adding-explicit-examples-to-tests"]], "Why do we need helper functions?": [[840, "why-do-we-need-helper-functions"]], "How to write Hypothesis Tests effectively": [[840, "how-to-write-hypothesis-tests-effectively"]], "Testing Partial Mixed Functions": [[840, "testing-partial-mixed-functions"]], "Bonus: Hypothesis\u2019 Extended Features": [[840, "bonus-hypothesis-extended-features"]], "Self-Consistent and Explicit Testing": [[840, "self-consistent-and-explicit-testing"]], "test_array_function": [[840, "id5"]], "Running Ivy Tests": [[840, "running-ivy-tests"]], "Re-Running Failed Ivy Tests": [[840, "re-running-failed-ivy-tests"]], "Fix Failing Tests:": [[830, "fix-failing-tests"]], "Prerequirement:": [[830, "prerequirement"]], "Setting Up": [[830, "setting-up"], [815, "setting-up"]], "How to run tests": [[830, "how-to-run-tests"]], "Common Errors": [[830, "common-errors"]], "Where to ask for Help": [[830, "where-to-ask-for-help"]], "Ivy Array": [[847, "ivy-array"], [820, "ivy-array"]], "The Array Class": [[847, "the-array-class"]], "Unifying Operators": [[847, "unifying-operators"]], "API Monkey Patching": [[847, "api-monkey-patching"]], "Instance Methods": [[847, "instance-methods"]], "Building Blocks": [[845, "building-blocks"]], "Backend Functional APIs \u2705": [[845, "backend-functional-apis"]], "Ivy Functional API \u2705": [[845, "ivy-functional-api"]], "Backend Handler \u2705": [[845, "backend-handler"]], "Tracer \ud83d\udea7": [[845, "tracer"]], "Glossary": [[853, "glossary"]], "Gradients": [[835, "gradients"], [631, "gradients"], [370, "gradients"], [55, "module-ivy.data_classes.array.gradients"], [78, "module-ivy.data_classes.container.gradients"]], "Overview": [[835, "overview"], [839, "overview"]], "Example Usage of the Gradient API": [[835, "example-usage-of-the-gradient-api"]], "The ivy.execute_with_gradients() function signature": [[835, "the-ivy-execute-with-gradients-function-signature"]], "An example using ivy.execute_with_gradients()": [[835, "an-example-using-ivy-execute-with-gradients"]], "Custom Gradient Functions": [[835, "custom-gradient-functions"]], "Design of the Gradient API": [[835, "design-of-the-gradient-api"]], "Our policy on gradients": [[835, "our-policy-on-gradients"]], "Gradient APIs of frameworks": [[835, "gradient-apis-of-frameworks"]], "General Structure of Backend-specific implementations": [[835, "general-structure-of-backend-specific-implementations"]], "Framework-specific Considerations": [[835, "framework-specific-considerations"]], "ivy.unify()": [[861, "ivy-unify"]], "Unify API": [[861, "unify-api"]], "Usage": [[861, "usage"]], "Why Unify?": [[857, "why-unify"]], "No More Re-implementations \ud83d\udea7": [[857, "no-more-re-implementations"]], "\u201cInfinite\u201d Shelf-Life \u2705": [[857, "infinite-shelf-life"]], "Ivy Frontend Tests": [[838, "ivy-frontend-tests"]], "Introduction": [[838, "introduction"], [837, "introduction"], [42, "Introduction"]], "Frontend Test Examples": [[838, "frontend-test-examples"]], "ivy.tan()": [[838, "ivy-tan"]], "ivy.full()": [[838, "ivy-full"]], "Testing Without Using Tests Values": [[838, "testing-without-using-tests-values"]], "Alias functions": [[838, "alias-functions"]], "Frontend Instance Method Tests": [[838, "frontend-instance-method-tests"]], "Frontend Instance Method Test Examples": [[838, "frontend-instance-method-test-examples"]], "ivy.add()": [[838, "ivy-add"]], "Hypothesis Helpers": [[838, "hypothesis-helpers"]], "Frontend Framework Testing Configuration": [[838, "frontend-framework-testing-configuration"]], "One liners": [[858, "one-liners"]], "API Standards": [[863, "api-standards"], [872, "api-standards"]], "Array API Standard": [[863, "id1"]], "Table:": [[863, "table"]], "Docstrings": [[828, "docstrings"]], "Compiler Infrastructure": [[864, "compiler-infrastructure"], [872, "compiler-infrastructure"]], "LLVM": [[864, "id1"]], "MLIR": [[864, "id2"]], "OneAPI": [[864, "id3"]], "Ivy Stateful API": [[849, "ivy-stateful-api"], [18, "Ivy-Stateful-API"], [27, "Ivy-Stateful-API"]], "Modules": [[849, "modules"]], "Initializers": [[849, "initializers"], [787, "module-ivy.stateful.initializers"]], "Optimizers": [[849, "optimizers"], [792, "module-ivy.stateful.optimizers"]], "Wrapper Frameworks": [[873, "wrapper-frameworks"], [872, "wrapper-frameworks"]], "EagerPy eagerpy": [[873, "eagerpy-eagerpy"]], "Keras keras": [[873, "keras-keras"]], "Thinc thinc": [[873, "thinc-thinc"]], "TensorLy tensorly": [[873, "tensorly-tensorly"]], "NeuroPod": [[873, "id1"]], "ivy.transpile()": [[860, "ivy-transpile"]], "Transpiler API": [[860, "transpiler-api"]], "Using the transpiler": [[860, "using-the-transpiler"]], "Transpiling functions": [[860, "transpiling-functions"]], "Transpiling Libraries": [[860, "transpiling-libraries"]], "Transpiling Modules": [[860, "transpiling-modules"]], "Superset Behaviour": [[843, "superset-behaviour"]], "Extending the Standard": [[843, "extending-the-standard"]], "What is the Superset?": [[843, "what-is-the-superset"]], "A Non-Duplicate Superset": [[843, "a-non-duplicate-superset"]], "What is not the Superset?": [[843, "what-is-not-the-superset"]], "Balancing Generalization with Efficiency": [[843, "balancing-generalization-with-efficiency"]], "More Examples": [[843, "more-examples"]], "Maximizing Usage of Native Functionality": [[843, "maximizing-usage-of-native-functionality"]], "Frameworks": [[866, "frameworks"], [872, "frameworks"]], "MATLAB matlab": [[866, "matlab-matlab"]], "SciPy scipy": [[866, "scipy-scipy"]], "Torch torch": [[866, "torch-torch"]], "NumPy numpy": [[866, "numpy-numpy"]], "SciKit Learn scikit-learn": [[866, "scikit-learn-scikit-learn"]], "Theano theano": [[866, "theano-theano"]], "Pandas pandas": [[866, "pandas-pandas"]], "Julia julia": [[866, "julia-julia"]], "Apache Spark MLlib apache-spark-mllib": [[866, "apache-spark-mllib-apache-spark-mllib"]], "Caffe caffe": [[866, "caffe-caffe"]], "Chainer chainer": [[866, "chainer-chainer"]], "TensorFlow 1 tensorflow-1": [[866, "tensorflow-1-tensorflow-1"]], "MXNet mxnet": [[866, "mxnet-mxnet"]], "CNTK cntk": [[866, "cntk-cntk"]], "PyTorch pytorch": [[866, "pytorch-pytorch"]], "Flux flux": [[866, "flux-flux"]], "JAX jax": [[866, "jax-jax"]], "TensorFlow 2 tensorflow-2": [[866, "tensorflow-2-tensorflow-2"]], "DEX Language dex-language": [[866, "dex-language-dex-language"]], "ML-Unifying Companies": [[868, "ml-unifying-companies"], [872, "ml-unifying-companies"]], "Quansight": [[868, "id1"]], "Modular": [[868, "id2"]], "OctoML": [[868, "id3"]], "What does Ivy Add?": [[872, "what-does-ivy-add"]], "Multi-Vendor Compiler Frameworks": [[872, "multi-vendor-compiler-frameworks"], [869, "multi-vendor-compiler-frameworks"]], "Get Started": [[852, "get-started"]], "Installing using pip": [[852, "installing-using-pip"], [808, "installing-using-pip"]], "Docker": [[852, "docker"]], "Installing from source": [[852, "installing-from-source"]], "Ivy\u2019s tracer and transpiler": [[852, "ivy-s-tracer-and-transpiler"]], "Ivy Folder": [[852, "ivy-folder"]], "Setting Up the API key": [[852, "setting-up-the-api-key"]], "Issues and Questions": [[852, "issues-and-questions"]], "Navigating the Code": [[841, "navigating-the-code"]], "Categorization": [[841, "categorization"]], "Submodule Design": [[841, "submodule-design"]], "Ivy API": [[841, "ivy-api"]], "Backend API": [[841, "backend-api"]], "Submodule Helper Functions": [[841, "submodule-helper-functions"]], "Version Unpinning": [[841, "version-unpinning"]], "Ivy as a Framework": [[846, "ivy-as-a-framework"], [27, "Ivy-as-a-Framework"]], "Ivy-Lint: Ivy\u2019s Custom Code Formatters": [[839, "ivy-lint-ivy-s-custom-code-formatters"]], "Existing Formatters": [[839, "existing-formatters"]], "FunctionOrderingFormatter": [[839, "functionorderingformatter"]], "How the Formatter Works:": [[839, "how-the-formatter-works"]], "Integration and Usage": [[839, "integration-and-usage"]], "Contribution": [[839, "contribution"]], "Round Up": [[839, "round-up"], [24, "Round-Up"], [34, "Round-Up"], [30, "Round-Up"], [29, "Round-Up"], [22, "Round-Up"], [33, "Round-Up"], [14, "Round-Up"], [12, "Round-Up"], [19, "Round-Up"], [28, "Round-Up"], [21, "Round-Up"], [18, "Round-Up"], [32, "Round-Up"], [41, "Round-Up"], [31, "Round-Up"], [20, "Round-Up"], [23, "Round-Up"]], "Inplace Updates": [[836, "inplace-updates"]], "out argument": [[836, "out-argument"]], "copy argument": [[836, "copy-argument"]], "Views": [[836, "views"]], "Ivy as a Transpiler": [[850, "ivy-as-a-transpiler"], [28, "Ivy-as-a-Transpiler"], [27, "Ivy-as-a-Transpiler"]], "Frontend Functional APIs \ud83d\udea7": [[850, "frontend-functional-apis"]], "Role of the Tracer \ud83d\udea7": [[850, "role-of-the-tracer"]], "Converting Network Models \ud83d\udea7": [[850, "converting-network-models"]], "Apache TVM": [[869, "apache-tvm"]], "XLA": [[869, "xla"]], "GCC": [[869, "gcc"]], "Ivy Frontends": [[837, "ivy-frontends"]], "The Frontend Basics": [[837, "the-frontend-basics"]], "Writing Frontend Functions": [[837, "writing-frontend-functions"]], "Short Frontend Implementations": [[837, "short-frontend-implementations"]], "Unused Arguments": [[837, "unused-arguments"]], "Supported Data Types and Devices": [[837, "supported-data-types-and-devices"]], "Classes and Instance Methods": [[837, "classes-and-instance-methods"]], "Frontend Data Type Promotion Rules": [[837, "frontend-data-type-promotion-rules"]], "NumPy Special Argument - Casting": [[837, "numpy-special-argument-casting"]], "Frontends Duplicate Policy": [[837, "frontends-duplicate-policy"]], "Design": [[844, "design"]], "Motivation": [[854, "motivation"]], "log_softmax": [[109, "log-softmax"]], "Tt tensor": [[96, "module-ivy.data_classes.factorized_tensor.tt_tensor"]], "full_like": [[132, "full-like"]], "gelu": [[106, "gelu"]], "frombuffer": [[130, "frombuffer"]], "Data classes": [[104, "data-classes"]], "while_loop": [[121, "while-loop"]], "asarray": [[124, "asarray"]], "for_loop": [[118, "for-loop"]], "Container": [[99, "container"]], "softmax": [[113, "softmax"]], "linspace": [[133, "linspace"]], "Parafac2 tensor": [[94, "module-ivy.data_classes.factorized_tensor.parafac2_tensor"]], "relu": [[111, "relu"]], "softplus": [[114, "softplus"]], "Functions": [[105, "functions"]], "Nested array": [[101, "nested-array"]], "copy_array": [[125, "copy-array"]], "leaky_relu": [[108, "leaky-relu"]], "from_dlpack": [[129, "from-dlpack"]], "meshgrid": [[135, "meshgrid"]], "empty_like": [[127, "empty-like"]], "Base": [[92, "module-ivy.data_classes.factorized_tensor.base"], [102, "module-ivy.data_classes.nested_array.base"], [70, "module-ivy.data_classes.container.base"]], "cmp_is": [[116, "cmp-is"]], "Array": [[98, "array"]], "mish": [[110, "mish"]], "cmp_isnot": [[117, "cmp-isnot"]], "softsign": [[115, "softsign"]], "native_array": [[136, "native-array"]], "Tr tensor": [[95, "module-ivy.data_classes.factorized_tensor.tr_tensor"]], "Tucker tensor": [[97, "module-ivy.data_classes.factorized_tensor.tucker_tensor"]], "Cp tensor": [[93, "module-ivy.data_classes.factorized_tensor.cp_tensor"]], "Elementwise": [[103, "module-ivy.data_classes.nested_array.elementwise"], [628, "elementwise"], [368, "elementwise"], [52, "module-ivy.data_classes.array.elementwise"], [75, "module-ivy.data_classes.container.elementwise"]], "hardswish": [[107, "hardswish"]], "full": [[131, "full"]], "logspace": [[134, "logspace"]], "arange": [[122, "arange"]], "one_hot": [[137, "one-hot"]], "array": [[123, "array"]], "if_else": [[119, "if-else"]], "try_except": [[120, "try-except"]], "Factorized tensor": [[100, "factorized-tensor"]], "empty": [[126, "empty"]], "sigmoid": [[112, "sigmoid"]], "eye": [[128, "eye"]], "unique_values": [[748, "unique-values"]], "Data-dependent output shape": [[748, null], [745, null], [746, null], [747, null], [641, null], [641, null], [641, null], [641, null]], "argwhere": [[742, "argwhere"]], "where": [[744, "where"]], "unique_all": [[745, "unique-all"]], "all": [[763, "all"]], "mean": [[757, "mean"]], "seed": [[738, "seed"]], "unique_counts": [[746, "unique-counts"]], "unique_inverse": [[747, "unique-inverse"]], "Assertions": [[767, "module-ivy_tests.test_ivy.helpers.assertions"], [794, "module-ivy.utils.assertions"]], "save": [[766, "save"]], "General helpers": [[774, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers"]], "min": [[758, "min"]], "any": [[764, "any"]], "Test parameter flags": [[779, "module-ivy_tests.test_ivy.helpers.test_parameter_flags"]], "argsort": [[749, "argsort"]], "sort": [[752, "sort"]], "cumsum": [[754, "cumsum"]], "sum": [[761, "sum"]], "load": [[765, "load"]], "Function testing": [[769, "module-ivy_tests.test_ivy.helpers.function_testing"]], "Array helpers": [[772, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers"]], "Structs": [[778, "module-ivy_tests.test_ivy.helpers.structs"]], "random_normal": [[736, "random-normal"]], "Dtype helpers": [[773, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers"]], "nonzero": [[743, "nonzero"]], "einsum": [[755, "einsum"]], "Hypothesis helpers": [[771, "hypothesis-helpers"]], "Available frameworks": [[768, "module-ivy_tests.test_ivy.helpers.available_frameworks"]], "Number helpers": [[775, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers"]], "prod": [[759, "prod"]], "argmax": [[740, "argmax"]], "std": [[760, "std"]], "Multiprocessing": [[776, "module-ivy_tests.test_ivy.helpers.multiprocessing"]], "shuffle": [[739, "shuffle"]], "Testing helpers": [[780, "module-ivy_tests.test_ivy.helpers.testing_helpers"]], "Framework classes": [[781, "framework-classes"]], "argmin": [[741, "argmin"]], "Pipeline helper": [[777, "module-ivy_tests.test_ivy.helpers.pipeline_helper"]], "searchsorted": [[751, "searchsorted"]], "Globals": [[770, "module-ivy_tests.test_ivy.helpers.globals"]], "random_uniform": [[737, "random-uniform"]], "cumprod": [[753, "cumprod"]], "msort": [[750, "msort"]], "var": [[762, "var"]], "max": [[756, "max"]], "Backend Setting": [[821, "backend-setting"]], "Dynamic Backend Setting": [[821, "dynamic-backend-setting"]], "Backend and Frontend Version Support": [[821, "backend-and-frontend-version-support"]], "Backend": [[795, "backend"]], "Exceptions": [[803, "module-ivy.utils.exceptions"]], "Devices": [[826, "devices"]], "Device Module": [[826, "device-module"]], "Arguments in other Functions": [[826, "arguments-in-other-functions"], [825, "arguments-in-other-functions"]], "Device handling": [[826, "device-handling"]], "Building the Docs": [[810, "building-the-docs"]], "Building the Docs using Docker": [[810, "building-the-docs-using-docker"]], "Using convenience script": [[810, "using-convenience-script"]], "Using existing image on Docker Hub": [[810, "using-existing-image-on-docker-hub"]], "Building the image locally": [[810, "building-the-image-locally"]], "Building the Docs without Docker": [[810, "building-the-docs-without-docker"]], "Verbosity": [[807, "module-ivy.utils.verbosity"]], "Commit (Push/PR) Triggered Testing": [[824, "commit-push-pr-triggered-testing"]], "Implementation": [[824, "implementation"]], "A Top-Down View": [[824, "a-top-down-view"]], "Storing (and retrieving) the Mapping": [[824, "storing-and-retrieving-the-mapping"]], "Cloning and Pushing to the Repository": [[824, "cloning-and-pushing-to-the-repository"]], "Implementational Nitty Gritties": [[824, "implementational-nitty-gritties"]], "Storage Space (unifyai/Mapping)": [[824, "storage-space-unifyai-mapping"]], "Determine Test Coverage Workflow": [[824, "determine-test-coverage-workflow"]], "Multiple Runners": [[824, "multiple-runners"]], "Race Condition": [[824, "race-condition"]], "Array API Tests": [[824, "array-api-tests"], [819, "array-api-tests"]], "Periodic Testing": [[824, "periodic-testing"]], "Manually Dispatched Workflows": [[824, "manually-dispatched-workflows"]], "CI Pipeline \u27a1\ufe0f": [[824, "ci-pipeline"]], "Push": [[824, "push"]], "Pull Request": [[824, "pull-request"]], "Dashboard": [[824, "dashboard"]], "Inspection": [[804, "module-ivy.utils.inspection"]], "Dynamic import": [[800, "module-ivy.utils.dynamic_import"]], "Einsum parser": [[801, "module-ivy.utils.einsum_parser"]], "Contributor Rewards": [[811, "contributor-rewards"]], "Badges": [[811, "badges"]], "Badge Tiers": [[811, "badge-tiers"]], "Docstring Examples": [[827, "docstring-examples"]], "ivy.tan": [[827, "ivy-tan"]], "ivy.roll": [[827, "ivy-roll"]], "ivy.add": [[827, "ivy-add"]], "Sub backend handler": [[798, "module-ivy.utils.backend.sub_backend_handler"]], "Handler": [[797, "module-ivy.utils.backend.handler"]], "Norms": [[791, "module-ivy.stateful.norms"], [638, "norms"], [377, "norms"], [84, "module-ivy.data_classes.container.norms"], [61, "module-ivy.data_classes.array.norms"]], "Module": [[790, "module-ivy.stateful.module"]], "Converters": [[785, "module-ivy.stateful.converters"]], "Error Handling": [[812, "error-handling"]], "Utils": [[782, "utils"]], "Losses": [[789, "module-ivy.stateful.losses"], [634, "losses"], [373, "losses"], [82, "module-ivy.data_classes.container.losses"], [59, "module-ivy.data_classes.array.losses"]], "Activations": [[784, "module-ivy.stateful.activations"], [622, "activations"], [363, "activations"], [47, "module-ivy.data_classes.array.activations"], [69, "module-ivy.data_classes.container.activations"]], "Parameter": [[784, "parameter"], [784, "id1"], [580, "parameter"], [574, "parameter"], [575, "parameter"], [581, "parameter"], [584, "parameter"], [583, "parameter"], [630, "parameter"], [630, "id1"], [630, "id2"], [630, "id3"], [630, "id4"], [630, "id5"], [627, "parameter"], [206, "parameter"]], "Binaries": [[799, "module-ivy.utils.binaries"]], "Contributing": [[809, "contributing"], [808, "contributing"]], "Open Tasks": [[814, "open-tasks"]], "Fixing Failing Tests": [[814, "fixing-failing-tests"]], "How to Contribute": [[814, "how-to-contribute"]], "Frontend APIs": [[814, "frontend-apis"]], "Where to place a frontend function": [[814, "where-to-place-a-frontend-function"]], "Frontend checklist": [[814, "frontend-checklist"]], "Function Formatting": [[814, "function-formatting"]], "Formatting checklist": [[814, "formatting-checklist"]], "Ivy Experimental API": [[814, "ivy-experimental-api"]], "Extending the Ivy API": [[814, "extending-the-ivy-api"]], "Where to place a backend function": [[814, "where-to-place-a-backend-function"]], "Creating an Issue on Ivy\u2019s GitHub using a Template": [[814, "creating-an-issue-on-ivy-s-github-using-a-template"]], "Running the Tests": [[819, "running-the-tests"]], "Using Terminal": [[819, "using-terminal"]], "Using the IDE": [[819, "using-the-ide"]], "Regenerating Test Failures": [[819, "regenerating-test-failures"]], "Test Skipping": [[819, "test-skipping"]], "Ast helpers": [[796, "module-ivy.utils.backend.ast_helpers"]], "Forking and cloning the repo": [[815, "forking-and-cloning-the-repo"]], "Pre-Commit": [[815, "pre-commit"]], "Virtual environments - No Docker": [[815, "virtual-environments-no-docker"]], "Using miniconda": [[815, "using-miniconda"]], "Using venv": [[815, "using-venv"]], "Docker Interpreter with PyCharm": [[815, "docker-interpreter-with-pycharm"]], "Windows": [[815, "windows"], [815, "id6"]], "MacOS": [[815, "macos"]], "Ubuntu": [[815, "ubuntu"], [815, "id8"]], "Setting Up Testing in PyCharm": [[815, "setting-up-testing-in-pycharm"]], "More Detailed Hypothesis Logs in PyCharm": [[815, "more-detailed-hypothesis-logs-in-pycharm"]], "Setting up for Free": [[815, "setting-up-for-free"]], "WSL": [[815, "wsl"]], "GitHub Codespaces": [[815, "github-codespaces"]], "The Binaries": [[815, "the-binaries"]], "Arrays": [[820, "arrays"]], "Native Array": [[820, "native-array"]], "Array Handling": [[820, "array-handling"]], "Integrating custom classes with Ivy": [[820, "integrating-custom-classes-with-ivy"]], "Building the Docs Pipeline": [[822, "building-the-docs-pipeline"]], "How the doc-builder is being run": [[822, "how-the-doc-builder-is-being-run"]], "The convenience script": [[822, "the-convenience-script"]], "Options": [[822, "options"]], "The Docker image": [[822, "the-docker-image"]], "How Ivy\u2019s docs is structured": [[822, "how-ivy-s-docs-is-structured"]], "index.rst": [[822, "index-rst"]], "partial_conf.py": [[822, "partial-conf-py"]], "prebuild.sh": [[822, "prebuild-sh"]], "Custom Extensions": [[822, "custom-extensions"]], "custom_autosummary": [[822, "custom-autosummary"]], ":hide-table:": [[822, "hide-table"]], "discussion_linker": [[822, "discussion-linker"]], "skippable_function": [[822, "skippable-function"]], "ivy_data": [[822, "ivy-data"]], "Helpers": [[786, "module-ivy.stateful.helpers"]], "Logging": [[805, "module-ivy.utils.logging"]], "Testing": [[783, "testing"], [41, "Testing"]], "Layers": [[788, "module-ivy.stateful.layers"], [632, "layers"], [371, "layers"], [57, "module-ivy.data_classes.array.layers"], [80, "module-ivy.data_classes.container.layers"]], "Contributor Program": [[817, "contributor-program"]], "Contributor": [[817, "contributor"]], "Core Contributor": [[817, "core-contributor"]], "Rising Contributor": [[817, "rising-contributor"]], "Top Contributor": [[817, "top-contributor"]], "Einsum path helpers": [[802, "module-ivy.utils.einsum_path_helpers"]], "Helpful Resources": [[813, "helpful-resources"]], "Data Types": [[825, "data-types"]], "Data Type Module": [[825, "data-type-module"]], "Data Type Promotion": [[825, "data-type-promotion"]], "Precise Mode": [[825, "precise-mode"]], "Precise Promotion Table": [[825, "precise-promotion-table"]], "Non-Precise Promotion Table": [[825, "non-precise-promotion-table"]], "Supported and Unsupported Data Types": [[825, "supported-and-unsupported-data-types"]], "Supported and Unsupported Data Types Attributes": [[825, "supported-and-unsupported-data-types-attributes"]], "Special Case": [[825, "special-case"]], "Backend Data Type Bugs": [[825, "backend-data-type-bugs"]], "Data Type Casting Modes": [[825, "data-type-casting-modes"]], "Superset Data Type Support": [[825, "superset-data-type-support"]], "Sequential": [[793, "module-ivy.stateful.sequential"]], "The Basics": [[816, "the-basics"]], "Getting Help": [[816, "getting-help"]], "ToDo List Issues": [[816, "todo-list-issues"]], "Managing Your Fork": [[816, "managing-your-fork"]], "Who To Ask": [[816, "who-to-ask"]], "With Command Line:": [[816, "with-command-line"]], "With Browser:": [[816, "with-browser"]], "Pull Requests": [[816, "pull-requests"]], "Small Commits Often": [[816, "small-commits-often"]], "Interactive Ivy Docker Container": [[816, "interactive-ivy-docker-container"]], "Running Tests Locally": [[816, "running-tests-locally"]], "With Docker": [[816, "with-docker"]], "Getting the most out of IDE": [[816, "getting-the-most-out-of-ide"]], "with PyCharm": [[816, "with-pycharm"]], "Deep Dive": [[818, "deep-dive"]], "Profiler": [[806, "module-ivy.utils.profiler"]], "Status": [[808, "status"]], "Unified AI": [[808, "unified-ai"]], "Getting started": [[808, "getting-started"]], "Installing ivy": [[808, "installing-ivy"]], "Using Ivy": [[808, "using-ivy"]], "Documentation": [[808, "documentation"]], "Diving deeper": [[808, "diving-deeper"]], "When should I use Ivy as a transpiler?": [[808, "when-should-i-use-ivy-as-a-transpiler"]], "Community": [[808, "community"]], "Citation": [[808, "citation"]], "Containers": [[823, "containers"]], "Container Instance Methods": [[823, "container-instance-methods"]], "API Instance Methods": [[823, "api-instance-methods"]], "API Special Methods": [[823, "api-special-methods"]], "sparse_cross_entropy": [[694, "sparse-cross-entropy"]], "permute_dims": [[700, "permute-dims"]], "index_nest": [[717, "index-nest"]], "insert_into_nest_at_indices": [[719, "insert-into-nest-at-indices"]], "multi_index_nest": [[723, "multi-index-nest"]], "map": [[720, "map"]], "cross_entropy": [[693, "cross-entropy"]], "duplicate_array_index_chains": [[716, "duplicate-array-index-chains"]], "tile": [[708, "tile"]], "all_nested_indices": [[714, "all-nested-indices"]], "repeat": [[701, "repeat"]], "map_nest_at_indices": [[722, "map-nest-at-indices"]], "clip": [[695, "clip"]], "nested_any": [[724, "nested-any"]], "layer_norm": [[733, "layer-norm"]], "stack": [[706, "stack"]], "maml_step": [[712, "maml-step"]], "constant_pad": [[697, "constant-pad"]], "squeeze": [[705, "squeeze"]], "nested_multi_map": [[727, "nested-multi-map"]], "prune_empty": [[728, "prune-empty"]], "insert_into_nest_at_index": [[718, "insert-into-nest-at-index"]], "nested_argwhere": [[725, "nested-argwhere"]], "vector_norm": [[690, "vector-norm"]], "set_nest_at_index": [[731, "set-nest-at-index"]], "concat": [[696, "concat"]], "reshape": [[702, "reshape"]], "multinomial": [[734, "multinomial"]], "copy_nest": [[715, "copy-nest"]], "fomaml_step": [[711, "fomaml-step"]], "roll": [[703, "roll"]], "unstack": [[709, "unstack"]], "swapaxes": [[707, "swapaxes"]], "randint": [[735, "randint"]], "prune_nest_at_index": [[729, "prune-nest-at-index"]], "vector_to_skew_symmetric_matrix": [[691, "vector-to-skew-symmetric-matrix"]], "nested_map": [[726, "nested-map"]], "map_nest_at_index": [[721, "map-nest-at-index"]], "prune_nest_at_indices": [[730, "prune-nest-at-indices"]], "binary_cross_entropy": [[692, "binary-cross-entropy"]], "set_nest_at_indices": [[732, "set-nest-at-indices"]], "reptile_step": [[713, "reptile-step"]], "zero_pad": [[710, "zero-pad"]], "split": [[704, "split"]], "expand_dims": [[698, "expand-dims"]], "flip": [[699, "flip"]], "diagonal": [[667, "diagonal"]], "qr": [[680, "qr"]], "svd": [[683, "svd"]], "depthwise_conv2d": [[654, "depthwise-conv2d"]], "conv1d_transpose": [[647, "conv1d-transpose"]], "lstm": [[657, "lstm"]], "solve": [[682, "solve"]], "eig": [[668, "eig"], [425, "eig"]], "lstm_update": [[658, "lstm-update"]], "tensordot": [[685, "tensordot"]], "cholesky": [[663, "cholesky"]], "outer": [[678, "outer"]], "conv1d": [[646, "conv1d"]], "inv": [[672, "inv"]], "cross": [[664, "cross"]], "matrix_power": [[675, "matrix-power"]], "conv3d": [[650, "conv3d"]], "diag": [[666, "diag"]], "matrix_transpose": [[677, "matrix-transpose"]], "conv": [[645, "conv"]], "dropout": [[655, "dropout"]], "Utility": [[644, "utility"], [384, "utility"], [90, "module-ivy.data_classes.container.utility"], [67, "module-ivy.data_classes.array.utility"]], "nms": [[660, "nms"]], "svdvals": [[684, "svdvals"]], "roi_align": [[661, "roi-align"]], "conv_general_dilated": [[652, "conv-general-dilated"]], "slogdet": [[681, "slogdet"]], "vander": [[688, "vander"]], "eigvalsh": [[670, "eigvalsh"]], "scaled_dot_product_attention": [[662, "scaled-dot-product-attention"]], "matrix_norm": [[674, "matrix-norm"]], "tensorsolve": [[686, "tensorsolve"]], "conv2d": [[648, "conv2d"]], "eigh": [[669, "eigh"]], "pinv": [[679, "pinv"]], "matmul": [[673, "matmul"]], "vecdot": [[689, "vecdot"]], "det": [[665, "det"]], "inner": [[671, "inner"]], "trace": [[687, "trace"]], "multi_head_attention": [[659, "multi-head-attention"]], "conv_general_transpose": [[653, "conv-general-transpose"]], "matrix_rank": [[676, "matrix-rank"]], "conv3d_transpose": [[651, "conv3d-transpose"]], "conv2d_transpose": [[649, "conv2d-transpose"]], "linear": [[656, "linear"]], "num_arrays_in_memory": [[570, "num-arrays-in-memory"]], "inplace_update": [[558, "inplace-update"]], "set_nestable_mode": [[580, "set-nestable-mode"]], "to_ivy_shape": [[592, "to-ivy-shape"]], "is_ivy_container": [[562, "is-ivy-container"]], "get_referrers_recursive": [[553, "get-referrers-recursive"]], "set_inplace_mode": [[576, "set-inplace-mode"]], "to_list": [[593, "to-list"]], "try_else_none": [[597, "try-else-none"]], "set_array_mode": [[574, "set-array-mode"]], "size": [[587, "size"]], "to_numpy": [[595, "to-numpy"]], "is_ivy_array": [[561, "is-ivy-array"]], "itemsize": [[567, "itemsize"]], "get_num_dims": [[552, "get-num-dims"]], "inplace_decrement": [[556, "inplace-decrement"]], "print_all_arrays_in_memory": [[571, "print-all-arrays-in-memory"]], "set_min_denominator": [[579, "set-min-denominator"]], "is_ivy_nested_array": [[563, "is-ivy-nested-array"]], "isscalar": [[566, "isscalar"]], "stable_divide": [[588, "stable-divide"]], "scatter_nd": [[573, "scatter-nd"]], "is_native_array": [[564, "is-native-array"]], "inplace_arrays_supported": [[555, "inplace-arrays-supported"]], "set_item": [[577, "set-item"]], "inplace_variables_supported": [[559, "inplace-variables-supported"]], "multiprocessing": [[569, "multiprocessing"]], "set_tmp_dir": [[585, "set-tmp-dir"]], "has_nans": [[554, "has-nans"]], "isin": [[565, "isin"]], "set_exception_trace_mode": [[575, "set-exception-trace-mode"]], "set_precise_mode": [[581, "set-precise-mode"]], "inplace_increment": [[557, "inplace-increment"]], "set_min_base": [[578, "set-min-base"]], "to_scalar": [[596, "to-scalar"]], "set_show_func_wrapper_trace_mode": [[584, "set-show-func-wrapper-trace-mode"]], "set_shape_array_mode": [[583, "set-shape-array-mode"]], "match_kwargs": [[568, "match-kwargs"]], "stable_pow": [[589, "stable-pow"]], "strides": [[590, "strides"]], "is_array": [[560, "is-array"]], "shape": [[586, "shape"]], "supports_inplace_updates": [[591, "supports-inplace-updates"]], "to_native_shape": [[594, "to-native-shape"]], "set_queue_timeout": [[582, "set-queue-timeout"]], "scatter_flat": [[572, "scatter-flat"]], "native_sparse_array_to_indices_values_and_shape": [[515, "native-sparse-array-to-indices-values-and-shape"]], "lexsort": [[511, "lexsort"]], "gather_nd": [[549, "gather-nd"]], "einops_repeat": [[543, "einops-repeat"]], "function_supported_devices_and_dtypes": [[546, "function-supported-devices-and-dtypes"]], "all_equal": [[530, "all-equal"]], "is_native_sparse_array": [[513, "is-native-sparse-array"]], "cummax": [[519, "cummax"]], "cache_fn": [[535, "cache-fn"]], "igamma": [[522, "igamma"]], "einops_rearrange": [[541, "einops-rearrange"]], "histogram": [[521, "histogram"]], "nanmean": [[524, "nanmean"]], "cov": [[518, "cov"]], "nanmin": [[526, "nanmin"]], "nanmedian": [[525, "nanmedian"]], "einops_reduce": [[542, "einops-reduce"]], "default": [[540, "default"]], "dirichlet": [[506, "dirichlet"]], "clip_matrix_norm": [[536, "clip-matrix-norm"]], "current_backend_str": [[539, "current-backend-str"]], "arg_names": [[532, "arg-names"]], "arg_info": [[531, "arg-info"]], "native_sparse_array": [[514, "native-sparse-array"]], "assert_supports_inplace": [[534, "assert-supports-inplace"]], "poisson": [[508, "poisson"]], "function_unsupported_devices_and_dtypes": [[547, "function-unsupported-devices-and-dtypes"]], "corrcoef": [[517, "corrcoef"]], "quantile": [[528, "quantile"]], "array_equal": [[533, "array-equal"]], "fourier_encode": [[545, "fourier-encode"]], "invert_permutation": [[510, "invert-permutation"]], "bincount": [[516, "bincount"]], "cummin": [[520, "cummin"]], "is_ivy_sparse_array": [[512, "is-ivy-sparse-array"]], "unravel_index": [[509, "unravel-index"]], "clip_vector_norm": [[537, "clip-vector-norm"]], "gather": [[548, "gather"]], "optional_get_element": [[529, "optional-get-element"]], "get_all_arrays_in_memory": [[550, "get-all-arrays-in-memory"]], "nanprod": [[527, "nanprod"]], "exists": [[544, "exists"]], "gamma": [[507, "gamma"]], "get_item": [[551, "get-item"]], "median": [[523, "median"]], "container_types": [[538, "container-types"]], "top_k": [[490, "top-k"]], "hsplit": [[475, "hsplit"]], "column_stack": [[464, "column-stack"]], "take": [[488, "take"]], "partial_vec_to_tensor": [[484, "partial-vec-to-tensor"]], "dsplit": [[466, "dsplit"]], "lp_normalize": [[503, "lp-normalize"]], "instance_norm": [[499, "instance-norm"]], "trim_zeros": [[491, "trim-zeros"]], "partial_fold": [[481, "partial-fold"]], "choose": [[463, "choose"]], "group_norm": [[498, "group-norm"]], "dstack": [[467, "dstack"]], "vstack": [[496, "vstack"]], "concat_from_sequence": [[465, "concat-from-sequence"]], "take_along_axis": [[489, "take-along-axis"]], "partial_tensor_to_vec": [[482, "partial-tensor-to-vec"]], "moveaxis": [[479, "moveaxis"]], "unique_consecutive": [[494, "unique-consecutive"]], "vsplit": [[495, "vsplit"]], "put_along_axis": [[485, "put-along-axis"]], "batch_norm": [[497, "batch-norm"]], "check_scalar": [[462, "check-scalar"]], "hstack": [[476, "hstack"]], "l2_normalize": [[501, "l2-normalize"]], "fold": [[473, "fold"]], "flatten": [[470, "flatten"]], "rot90": [[486, "rot90"]], "unfold": [[493, "unfold"]], "heaviside": [[474, "heaviside"]], "atleast_3d": [[460, "atleast-3d"]], "local_response_norm": [[502, "local-response-norm"]], "bernoulli": [[504, "bernoulli"]], "fliplr": [[471, "fliplr"]], "unflatten": [[492, "unflatten"]], "partial_unfold": [[483, "partial-unfold"]], "expand": [[468, "expand"]], "soft_thresholding": [[487, "soft-thresholding"]], "broadcast_shapes": [[461, "broadcast-shapes"]], "matricize": [[478, "matricize"]], "fill_diagonal": [[469, "fill-diagonal"]], "flipud": [[472, "flipud"]], "beta": [[505, "beta"]], "l1_normalize": [[500, "l1-normalize"]], "pad": [[480, "pad"]], "i0": [[477, "i0"]], "Meta": [[636, "meta"], [375, "module-ivy.functional.ivy.experimental.meta"]], "vmap": [[610, "vmap"]], "Nest": [[637, "nest"], [376, "module-ivy.functional.ivy.experimental.nest"]], "unset_tmp_dir": [[608, "unset-tmp-dir"]], "Set": [[641, "set"], [380, "module-ivy.functional.ivy.experimental.set"], [87, "module-ivy.data_classes.container.set"], [64, "module-ivy.data_classes.array.set"]], "lamb_update": [[617, "lamb-update"]], "Experimental": [[629, "experimental"], [53, "module-ivy.data_classes.array.experimental"], [76, "module-ivy.data_classes.container.experimental"]], "Creation": [[625, "creation"], [365, "creation"], [72, "module-ivy.data_classes.container.creation"], [49, "module-ivy.data_classes.array.creation"]], "adam_update": [[612, "adam-update"]], "stop_gradient": [[620, "stop-gradient"]], "General": [[630, "general"], [369, "general"], [77, "module-ivy.data_classes.container.general"], [54, "module-ivy.data_classes.array.general"]], "Searching": [[640, "searching"], [379, "searching"], [86, "module-ivy.data_classes.container.searching"], [63, "module-ivy.data_classes.array.searching"]], "adam_step": [[611, "adam-step"]], "Sorting": [[642, "sorting"], [381, "sorting"], [88, "module-ivy.data_classes.container.sorting"], [65, "module-ivy.data_classes.array.sorting"]], "unset_show_func_wrapper_trace_mode": [[607, "unset-show-func-wrapper-trace-mode"]], "unset_shape_array_mode": [[606, "unset-shape-array-mode"]], "Constants": [[623, "module-ivy.functional.ivy.constants"], [364, "module-ivy.functional.ivy.experimental.constants"]], "Manipulation": [[635, "manipulation"], [374, "manipulation"], [83, "module-ivy.data_classes.container.manipulation"], [60, "module-ivy.data_classes.array.manipulation"]], "value_is_nan": [[609, "value-is-nan"]], "jac": [[616, "jac"]], "Statistical": [[643, "statistical"], [383, "statistical"], [66, "module-ivy.data_classes.array.statistical"], [89, "module-ivy.data_classes.container.statistical"]], "grad": [[614, "grad"]], "execute_with_gradients": [[613, "execute-with-gradients"]], "Linear algebra": [[633, "linear-algebra"], [372, "linear-algebra"], [58, "module-ivy.data_classes.array.linear_algebra"], [81, "module-ivy.data_classes.container.linear_algebra"]], "Device": [[627, "device"], [367, "module-ivy.functional.ivy.experimental.device"], [51, "module-ivy.data_classes.array.device"], [74, "module-ivy.data_classes.container.device"]], "lars_update": [[618, "lars-update"]], "Control flow ops": [[624, "control-flow-ops"]], "unset_nestable_mode": [[603, "unset-nestable-mode"]], "unset_min_base": [[601, "unset-min-base"]], "gradient_descent_update": [[615, "gradient-descent-update"]], "unset_min_denominator": [[602, "unset-min-denominator"]], "unset_precise_mode": [[604, "unset-precise-mode"]], "value_and_grad": [[621, "value-and-grad"]], "Random": [[639, "random"], [378, "random"], [62, "module-ivy.data_classes.array.random"], [85, "module-ivy.data_classes.container.random"]], "unset_queue_timeout": [[605, "unset-queue-timeout"]], "Data type": [[626, "data-type"], [366, "module-ivy.functional.ivy.experimental.data_type"], [50, "module-ivy.data_classes.array.data_type"], [73, "module-ivy.data_classes.container.data_type"]], "unset_inplace_mode": [[600, "unset-inplace-mode"]], "unset_exception_trace_mode": [[599, "unset-exception-trace-mode"]], "unset_array_mode": [[598, "unset-array-mode"]], "optimizer_update": [[619, "optimizer-update"]], "rfftn": [[416, "rfftn"]], "atleast_2d": [[459, "atleast-2d"]], "tensor_train": [[444, "tensor-train"]], "stft": [[419, "stft"]], "poisson_nll_loss": [[453, "poisson-nll-loss"]], "make_svd_non_negative": [[436, "make-svd-non-negative"]], "soft_margin_loss": [[455, "soft-margin-loss"]], "multi_dot": [[439, "multi-dot"]], "as_strided": [[456, "as-strided"]], "l1_loss": [[451, "l1-loss"]], "multi_mode_dot": [[440, "multi-mode-dot"]], "dot": [[424, "dot"]], "tt_matrix_to_tensor": [[446, "tt-matrix-to-tensor"]], "rnn": [[417, "rnn"]], "eigvals": [[427, "eigvals"]], "kl_div": [[450, "kl-div"]], "kron": [[432, "kron"]], "matrix_exp": [[437, "matrix-exp"]], "initialize_tucker": [[430, "initialize-tucker"]], "diagflat": [[423, "diagflat"]], "eigh_tridiagonal": [[426, "eigh-tridiagonal"]], "kronecker": [[433, "kronecker"]], "lu_factor": [[434, "lu-factor"]], "general_inner_product": [[428, "general-inner-product"]], "tucker": [[447, "tucker"]], "khatri_rao": [[431, "khatri-rao"]], "smooth_l1_loss": [[454, "smooth-l1-loss"]], "log_poisson_loss": [[452, "log-poisson-loss"]], "reduce_window": [[414, "reduce-window"]], "rfft": [[415, "rfft"]], "atleast_1d": [[458, "atleast-1d"]], "partial_tucker": [[441, "partial-tucker"]], "adjoint": [[420, "adjoint"]], "associative_scan": [[457, "associative-scan"]], "sliding_window": [[418, "sliding-window"]], "cond": [[422, "cond"]], "svd_flip": [[443, "svd-flip"]], "batched_outer": [[421, "batched-outer"]], "lu_solve": [[435, "lu-solve"]], "truncated_svd": [[445, "truncated-svd"]], "hinge_embedding_loss": [[448, "hinge-embedding-loss"]], "higher_order_moment": [[429, "higher-order-moment"]], "solve_triangular": [[442, "solve-triangular"]], "huber_loss": [[449, "huber-loss"]], "mode_dot": [[438, "mode-dot"]], "allclose": [[330, "allclose"]], "amax": [[331, "amax"]], "xlogy": [[357, "xlogy"]], "random_tucker": [[323, "random-tucker"]], "amin": [[332, "amin"]], "fix": [[341, "fix"]], "isclose": [[347, "isclose"]], "nextafter": [[353, "nextafter"]], "hypot": [[346, "hypot"]], "random_tt": [[322, "random-tt"]], "unsorted_segment_mean": [[326, "unsorted-segment-mean"]], "lerp": [[349, "lerp"]], "fmax": [[343, "fmax"]], "reduce": [[359, "reduce"]], "zeta": [[358, "zeta"]], "erfinv": [[340, "erfinv"]], "gradient": [[345, "gradient"]], "sinc": [[355, "sinc"]], "vorbis_window": [[329, "vorbis-window"]], "copysign": [[335, "copysign"]], "sparsify_tensor": [[356, "sparsify-tensor"]], "digamma": [[338, "digamma"]], "unsorted_segment_min": [[327, "unsorted-segment-min"]], "tril_indices": [[324, "tril-indices"]], "modf": [[351, "modf"]], "nansum": [[352, "nansum"]], "trilu": [[325, "trilu"]], "ldexp": [[348, "ldexp"]], "signbit": [[354, "signbit"]], "bind_custom_gradient_function": [[360, "bind-custom-gradient-function"]], "unsorted_segment_sum": [[328, "unsorted-segment-sum"]], "diff": [[337, "diff"]], "erfc": [[339, "erfc"]], "jvp": [[361, "jvp"]], "count_nonzero": [[336, "count-nonzero"]], "vjp": [[362, "vjp"]], "conj": [[334, "conj"]], "frexp": [[344, "frexp"]], "binarizer": [[333, "binarizer"]], "lgamma": [[350, "lgamma"]], "float_power": [[342, "float-power"]], "dft": [[394, "dft"]], "avg_pool1d": [[390, "avg-pool1d"]], "dropout1d": [[395, "dropout1d"]], "avg_pool3d": [[392, "avg-pool3d"]], "dropout3d": [[397, "dropout3d"]], "idct": [[403, "idct"]], "adaptive_max_pool2d": [[387, "adaptive-max-pool2d"]], "Sparse array": [[382, "sparse-array"]], "adaptive_avg_pool1d": [[385, "adaptive-avg-pool1d"]], "adaptive_avg_pool2d": [[386, "adaptive-avg-pool2d"]], "dropout2d": [[396, "dropout2d"]], "adaptive_max_pool3d": [[388, "adaptive-max-pool3d"]], "max_pool3d": [[410, "max-pool3d"]], "pool": [[413, "pool"]], "ifft": [[404, "ifft"]], "fft": [[399, "fft"]], "ifftn": [[405, "ifftn"]], "avg_pool2d": [[391, "avg-pool2d"]], "nearest_interpolate": [[412, "nearest-interpolate"]], "area_interpolate": [[389, "area-interpolate"]], "interpolate": [[407, "interpolate"]], "max_pool1d": [[408, "max-pool1d"]], "embedding": [[398, "embedding"]], "max_unpool1d": [[411, "max-unpool1d"]], "max_pool2d": [[409, "max-pool2d"]], "fft2": [[400, "fft2"]], "dct": [[393, "dct"]], "generate_einsum_equation": [[401, "generate-einsum-equation"]], "get_interpolate_kernel": [[402, "get-interpolate-kernel"]], "interp": [[406, "interp"]], "remainder": [[278, "remainder"]], "sinh": [[282, "sinh"]], "trunc": [[289, "trunc"]], "elu": [[292, "elu"]], "hardtanh": [[295, "hardtanh"]], "tan": [[286, "tan"]], "prelu": [[298, "prelu"]], "sqrt": [[283, "sqrt"]], "softshrink": [[303, "softshrink"]], "threshold": [[306, "threshold"]], "sign": [[280, "sign"]], "ndindex": [[317, "ndindex"]], "trunc_divide": [[290, "trunc-divide"]], "hamming_window": [[310, "hamming-window"]], "eye_like": [[309, "eye-like"]], "round": [[279, "round"]], "mel_weight_matrix": [[315, "mel-weight-matrix"]], "hardsilu": [[294, "hardsilu"]], "random_parafac2": [[320, "random-parafac2"]], "sin": [[281, "sin"]], "subtract": [[285, "subtract"]], "hann_window": [[311, "hann-window"]], "scaled_tanh": [[300, "scaled-tanh"]], "random_tr": [[321, "random-tr"]], "trapz": [[288, "trapz"]], "blackman_window": [[308, "blackman-window"]], "stanh": [[304, "stanh"]], "random_cp": [[319, "random-cp"]], "kaiser_window": [[314, "kaiser-window"]], "thresholded_relu": [[307, "thresholded-relu"]], "selu": [[301, "selu"]], "silu": [[302, "silu"]], "logsigmoid": [[297, "logsigmoid"]], "hardshrink": [[293, "hardshrink"]], "celu": [[291, "celu"]], "real": [[276, "real"]], "kaiser_bessel_derived_window": [[313, "kaiser-bessel-derived-window"]], "ndenumerate": [[316, "ndenumerate"]], "logit": [[296, "logit"]], "tanh": [[287, "tanh"]], "square": [[284, "square"]], "reciprocal": [[277, "reciprocal"]], "polyval": [[318, "polyval"]], "indices": [[312, "indices"]], "tanhshrink": [[305, "tanhshrink"]], "relu6": [[299, "relu6"]], "percent_used_mem_on_dev": [[203, "percent-used-mem-on-dev"]], "total_mem_on_dev": [[211, "total-mem-on-dev"]], "acos": [[217, "acos"]], "angle": [[220, "angle"]], "get_all_ivy_arrays_on_dev": [[197, "get-all-ivy-arrays-on-dev"]], "num_gpus": [[201, "num-gpus"]], "used_mem_on_dev": [[215, "used-mem-on-dev"]], "unset_default_float_dtype": [[185, "unset-default-float-dtype"]], "tpu_is_available": [[212, "tpu-is-available"]], "abs": [[216, "abs"]], "unset_default_device": [[213, "unset-default-device"]], "unset_default_uint_dtype": [[187, "unset-default-uint-dtype"]], "as_native_dev": [[190, "as-native-dev"]], "bitwise_and": [[226, "bitwise-and"]], "asin": [[221, "asin"]], "add": [[219, "add"]], "default_device": [[192, "default-device"]], "bitwise_left_shift": [[228, "bitwise-left-shift"]], "as_ivy_dev": [[189, "as-ivy-dev"]], "asinh": [[222, "asinh"]], "acosh": [[218, "acosh"]], "gpu_is_available": [[198, "gpu-is-available"]], "valid_dtype": [[188, "valid-dtype"]], "split_func_call": [[209, "split-func-call"]], "bitwise_invert": [[227, "bitwise-invert"]], "num_ivy_arrays_on_dev": [[202, "num-ivy-arrays-on-dev"]], "set_default_device": [[205, "set-default-device"]], "clear_cached_mem_on_dev": [[191, "clear-cached-mem-on-dev"]], "unset_default_dtype": [[184, "unset-default-dtype"]], "set_soft_device_mode": [[206, "set-soft-device-mode"]], "atanh": [[225, "atanh"]], "dev_util": [[194, "dev-util"]], "num_cpu_cores": [[200, "num-cpu-cores"]], "function_unsupported_devices": [[196, "function-unsupported-devices"]], "atan": [[223, "atan"]], "atan2": [[224, "atan2"]], "split_factor": [[208, "split-factor"]], "print_all_ivy_arrays_on_dev": [[204, "print-all-ivy-arrays-on-dev"]], "unset_soft_device_mode": [[214, "unset-soft-device-mode"]], "dev": [[193, "dev"]], "to_device": [[210, "to-device"]], "bitwise_or": [[229, "bitwise-or"]], "handle_soft_device_variable": [[199, "handle-soft-device-variable"]], "unset_default_int_dtype": [[186, "unset-default-int-dtype"]], "set_split_factor": [[207, "set-split-factor"]], "function_supported_devices": [[195, "function-supported-devices"]], "multiply": [[269, "multiply"]], "logical_xor": [[266, "logical-xor"]], "isfinite": [[250, "isfinite"]], "logaddexp": [[261, "logaddexp"]], "cos": [[233, "cos"]], "deg2rad": [[235, "deg2rad"]], "floor_divide": [[243, "floor-divide"]], "fmin": [[244, "fmin"]], "isinf": [[251, "isinf"]], "bitwise_xor": [[231, "bitwise-xor"]], "log": [[257, "log"]], "ceil": [[232, "ceil"]], "negative": [[271, "negative"]], "imag": [[249, "imag"]], "lcm": [[254, "lcm"]], "isnan": [[252, "isnan"]], "exp": [[239, "exp"]], "positive": [[273, "positive"]], "erf": [[238, "erf"]], "cosh": [[234, "cosh"]], "logical_and": [[263, "logical-and"]], "isreal": [[253, "isreal"]], "equal": [[237, "equal"]], "divide": [[236, "divide"]], "minimum": [[268, "minimum"]], "greater_equal": [[248, "greater-equal"]], "log2": [[260, "log2"]], "logical_not": [[264, "logical-not"]], "gcd": [[246, "gcd"]], "greater": [[247, "greater"]], "fmod": [[245, "fmod"]], "bitwise_right_shift": [[230, "bitwise-right-shift"]], "pow": [[274, "pow"]], "rad2deg": [[275, "rad2deg"]], "floor": [[242, "floor"]], "exp2": [[240, "exp2"]], "log1p": [[259, "log1p"]], "log10": [[258, "log10"]], "not_equal": [[272, "not-equal"]], "logaddexp2": [[262, "logaddexp2"]], "maximum": [[267, "maximum"]], "less_equal": [[256, "less-equal"]], "logical_or": [[265, "logical-or"]], "nan_to_num": [[270, "nan-to-num"]], "less": [[255, "less"]], "expm1": [[241, "expm1"]], "Conversions": [[48, "module-ivy.data_classes.array.conversions"], [71, "module-ivy.data_classes.container.conversions"]], "Resnet 18": [[46, "Resnet-18"]], "Image": [[79, "module-ivy.data_classes.container.image"], [56, "module-ivy.data_classes.array.image"]], "Wrapping": [[68, "module-ivy.data_classes.array.wrapping"], [91, "module-ivy.data_classes.container.wrapping"]], "Transpile any library": [[24, "Transpile-any-library"]], "1.2: As a Decorator": [[34, "1.2:-As-a-Decorator"]], "Unify": [[34, "Unify"], [22, "Unify"], [33, "Unify"], [32, "Unify"], [23, "Unify"]], "Compile": [[34, "Compile"], [33, "Compile"], [32, "Compile"]], "Transpile": [[34, "Transpile"], [22, "Transpile"], [33, "Transpile"], [32, "Transpile"], [23, "Transpile"]], "Using Ivy ResNet": [[8, "Using-Ivy-ResNet"]], "Installation": [[8, "Installation"], [3, "Installation"]], "Imports": [[8, "Imports"], [5, "Imports"], [10, "Imports"]], "Data Preparation": [[8, "Data-Preparation"], [3, "Data-Preparation"], [5, "Data-Preparation"], [4, "Data-Preparation"]], "Prepare the set of labels": [[8, "Prepare-the-set-of-labels"]], "Load the image example \ud83d\uddbc\ufe0f": [[8, "Load-the-image-example-\ud83d\uddbc\ufe0f"], [5, "Load-the-image-example-\ud83d\uddbc\ufe0f"]], "Visualise image": [[8, "Visualise-image"], [5, "Visualise-image"]], "Model Inference ResNet34": [[8, "Model-Inference-ResNet34"]], "Initializing Native Torch ResNet34": [[8, "Initializing-Native-Torch-ResNet34"]], "Initializing Ivy ResNet34 with Pretrained Weights \u2b07\ufe0f": [[8, "Initializing-Ivy-ResNet34-with-Pretrained-Weights-\u2b07\ufe0f"]], "Use the model to classify your images \ud83d\ude80": [[8, "Use-the-model-to-classify-your-images-\ud83d\ude80"], [8, "id1"]], "Model Inference ResNet50": [[8, "Model-Inference-ResNet50"]], "Initializing Native Torch ResNet50": [[8, "Initializing-Native-Torch-ResNet50"]], "Initializing Ivy ResNet50 with Pretrained Weights \u2b07\ufe0f": [[8, "Initializing-Ivy-ResNet50-with-Pretrained-Weights-\u2b07\ufe0f"]], "2.0: Kornia": [[36, "2.0:-Kornia"]], "0.1: Compile": [[30, "0.1:-Compile"]], "Guides": [[11, "guides"], [16, "guides"]], "0.0: Unify": [[29, "0.0:-Unify"]], "Write a model using Ivy": [[26, "Write-a-model-using-Ivy"]], "Demos": [[0, "demos"]], "Creating a Notebook for Demo": [[0, "creating-a-notebook-for-demo"]], "Ivy AlexNet demo": [[3, "Ivy-AlexNet-demo"]], "Ivy AlexNet inference in Torch": [[3, "Ivy-AlexNet-inference-in-Torch"]], "TensorFlow inference": [[3, "TensorFlow-inference"]], "JAX inference": [[3, "JAX-inference"]], "Appendix (Ivy code for AlexNet implementation)": [[3, "Appendix-(Ivy-code-for-AlexNet-implementation)"]], "Lazy vs Eager": [[22, "Lazy-vs-Eager"]], "Trace": [[22, "Trace"], [23, "Trace"]], "Examples and Demos": [[2, "examples-and-demos"], [16, "examples-and-demos"]], "End-to-End Training Pipeline in Ivy": [[43, "End-to-End-Training-Pipeline-in-Ivy"]], "Importing libraries": [[43, "Importing-libraries"]], "Let\u2019s build the pipeline with a Tensorflow backend": [[43, "Let's-build-the-pipeline-with-a-Tensorflow-backend"]], "We are using MNIST dataset for this Tutorial": [[43, "We-are-using-MNIST-dataset-for-this-Tutorial"]], "Temporary Dataset and Dynamic loader": [[43, "Temporary-Dataset-and-Dynamic-loader"]], "Defining the Ivy Network": [[43, "Defining-the-Ivy-Network"]], "Training Loop with utility functions": [[43, "Training-Loop-with-utility-functions"]], "Plotting the training metrics": [[43, "Plotting-the-training-metrics"]], "Save the trained Model": [[43, "Save-the-trained-Model"]], "1.1: Framework Selection": [[33, "1.1:-Framework-Selection"]], "Basic Operations with Ivy": [[39, "Basic-Operations-with-Ivy"]], "Installs \ud83d\udcbe": [[39, "Installs-\ud83d\udcbe"], [40, "Installs-\ud83d\udcbe"]], "Imports \ud83d\udec3": [[39, "Imports-\ud83d\udec3"], [40, "Imports-\ud83d\udec3"]], "Ivy as a Unified ML Framework \ud83d\udd00": [[39, "Ivy-as-a-Unified-ML-Framework-\ud83d\udd00"]], "Change frameworks by one line of code \u261d": [[39, "Change-frameworks-by-one-line-of-code-\u261d"]], "No need to worry about data types \ud83c\udfa8": [[39, "No-need-to-worry-about-data-types-\ud83c\udfa8"]], "No need to worry about framework differences \ud83d\udcb1": [[39, "No-need-to-worry-about-framework-differences-\ud83d\udcb1"]], "Unifying them all! \ud83c\udf72": [[39, "Unifying-them-all!-\ud83c\udf72"]], "Ivy as a standalone ML framework \ud83c\udf00": [[39, "Ivy-as-a-standalone-ML-framework-\ud83c\udf00"]], "Set Backend Framework": [[39, "Set-Backend-Framework"]], "Define Model": [[39, "Define-Model"], [40, "Define-Model"]], "Create Model": [[39, "Create-Model"]], "Create Optimizer": [[39, "Create-Optimizer"]], "Input and Target": [[39, "Input-and-Target"]], "Loss Function": [[39, "Loss-Function"]], "Training Loop": [[39, "Training-Loop"]], "Deepmind PerceiverIO on GPU": [[42, "Deepmind-PerceiverIO-on-GPU"]], "Install Python3.8 and setup the kernel": [[42, "Install-Python3.8-and-setup-the-kernel"]], "Clone the ivy and ivy-models repo": [[42, "Clone-the-ivy-and-ivy-models-repo"]], "Install ivy and ivy_models from the repos": [[42, "Install-ivy-and-ivy_models-from-the-repos"]], "Run the demo\u2026": [[42, "Run-the-demo..."]], "\u2026with torch backend": [[42, "...with-torch-backend"]], "\u2026.with tensorflow backend": [[42, "....with-tensorflow-backend"]], "\u2026with jax backend": [[42, "...with-jax-backend"]], "\u2026with numpy backend": [[42, "...with-numpy-backend"]], "Ivy as a Transpiler Introduction": [[45, "Ivy-as-a-Transpiler-Introduction"]], "To use the transpiler:": [[45, "To-use-the-transpiler:"]], "Transpiler Interface": [[45, "Transpiler-Interface"]], "Telemetry": [[45, "Telemetry"]], "1. Transpile Functions \ud83d\udd22": [[45, "1.-Transpile-Functions-\ud83d\udd22"]], "2. Transpile Libraries \ud83d\udcda": [[45, "2.-Transpile-Libraries-\ud83d\udcda"]], "3. Transpile Models \ud83c\udf10": [[45, "3.-Transpile-Models-\ud83c\udf10"]], "Transpiling a Tensorflow model to build on top": [[14, "Transpiling-a-Tensorflow-model-to-build-on-top"]], "Tutorials And Examples": [[16, "tutorials-and-examples"]], "Learn the basics": [[16, "learn-the-basics"], [17, "learn-the-basics"]], "Transpiling a PyTorch model to build on top": [[12, "Transpiling-a-PyTorch-model-to-build-on-top"]], "Unify code": [[19, "Unify-code"]], "Accelerating PyTorch models with JAX": [[9, "Accelerating-PyTorch-models-with-JAX"]], "Quickstart": [[28, "Quickstart"]], "Get familiar with Ivy": [[28, "Get-familiar-with-Ivy"]], "Functional API": [[28, "Functional-API"]], "Stateful API": [[28, "Stateful-API"]], "Tracing code": [[28, "Tracing-code"]], "Any function": [[28, "Any-function"], [27, "Any-function"]], "Any library": [[28, "Any-library"], [27, "Any-library"]], "Any model": [[28, "Any-model"], [27, "Any-model"]], "TO REPLACE: Title": [[1, "TO-REPLACE:-Title"]], "3.0: Perceiver": [[37, "3.0:-Perceiver"]], "Transpile code": [[21, "Transpile-code"]], "Accelerating MMPreTrain models with JAX": [[7, "Accelerating-MMPreTrain-models-with-JAX"]], "HuggingFace Tensorflow DeiT": [[44, "HuggingFace-Tensorflow-DeiT"]], "Graph can be visualized and displayed as html file on browser": [[44, "Graph-can-be-visualized-and-displayed-as-html-file-on-browser"]], "Write Ivy code": [[18, "Write-Ivy-code"]], "Contents": [[18, "Contents"]], "Installing Ivy": [[18, "Installing-Ivy"]], "Importing Ivy": [[18, "Importing-Ivy"]], "Ivy Backend Handler": [[18, "Ivy-Backend-Handler"], [27, "Ivy-Backend-Handler"]], "Data Structures": [[18, "Data-Structures"], [27, "Data-Structures"]], "Ivy Functional API": [[18, "Ivy-Functional-API"], [27, "Ivy-Functional-API"]], "Transpile any model": [[25, "Transpile-any-model"]], "Round up": [[25, "Round-up"]], "1.0: Lazy vs Eager": [[32, "1.0:-Lazy-vs-Eager"]], "Demo: Transpiling DeepMind\u2019s PerceiverIO": [[41, "Demo:-Transpiling-DeepMind's-PerceiverIO"]], "Table of Contents": [[41, "Table-of-Contents"]], "Defining the model": [[41, "Defining-the-model"]], "Model construction": [[41, "Model-construction"]], "Some helper functions": [[41, "Some-helper-functions"]], "Transpiling the model": [[41, "Transpiling-the-model"]], "PyTorch pipeline": [[41, "PyTorch-pipeline"]], "Dataset download": [[41, "Dataset-download"]], "DataLoader": [[41, "DataLoader"]], "Training": [[41, "Training"]], "3.1: Stable Diffusion": [[38, "3.1:-Stable-Diffusion"]], "0.2: Transpile": [[31, "0.2:-Transpile"]], "Developing a convolutional network using Ivy": [[15, "Developing-a-convolutional-network-using-Ivy"]], "Trace code": [[20, "Trace-code"]], "ODSC Ivy Demo": [[27, "ODSC-Ivy-Demo"]], "Graph Tracer": [[27, "Graph-Tracer"]], "Image Segmentation with Ivy UNet": [[5, "Image-Segmentation-with-Ivy-UNet"]], "Custom Preprocessing": [[5, "Custom-Preprocessing"]], "Model Inference": [[5, "Model-Inference"]], "Initializing Native Torch UNet": [[5, "Initializing-Native-Torch-UNet"]], "Initializing Ivy UNet with Pretrained Weights \u2b07\ufe0f": [[5, "Initializing-Ivy-UNet-with-Pretrained-Weights-\u2b07\ufe0f"]], "Custom masking function": [[5, "Custom-masking-function"]], "Use the model to segment your images \ud83d\ude80": [[5, "Use-the-model-to-segment-your-images-\ud83d\ude80"]], "TensorFlow backend": [[5, "TensorFlow-backend"]], "JAX": [[5, "JAX"]], "Appendix: the Ivy native implementation of UNet": [[5, "Appendix:-the-Ivy-native-implementation-of-UNet"]], "Transpiling a haiku model to build on top": [[13, "Transpiling-a-haiku-model-to-build-on-top"]], "Compilation of a Basic Function": [[40, "Compilation-of-a-Basic-Function"]], "Import Ivy compiler": [[40, "Import-Ivy-compiler"]], "Function compilation \ud83d\udee0": [[40, "Function-compilation-\ud83d\udee0"]], "Set backend": [[40, "Set-backend"]], "Sample input": [[40, "Sample-input"]], "Define function to compile": [[40, "Define-function-to-compile"]], "Compile the function": [[40, "Compile-the-function"]], "Check results": [[40, "Check-results"], [40, "id1"]], "Compiling simple neural network \ud83e\udde0": [[40, "Compiling-simple-neural-network-\ud83e\udde0"]], "Create model": [[40, "Create-model"]], "Define input": [[40, "Define-input"]], "Compile network": [[40, "Compile-network"]], "1.3: Dynamic vs Static": [[35, "1.3:-Dynamic-vs-Static"]], "Dynamic": [[35, "Dynamic"]], "Static": [[35, "Static"]], "ToDo: explain via examples why dynamic mode is set to True by default when transpiling to and from numpy and torch, but set to False by default when transpiling to and from tensorflow and jax.": [[35, "ToDo:-explain-via-examples-why-dynamic-mode-is-set-to-True-by-default-when-transpiling-to-and-from-numpy-and-torch,-but-set-to-False-by-default-when-transpiling-to-and-from-tensorflow-and-jax."]], "Accelerating XGBoost with JAX": [[10, "Accelerating-XGBoost-with-JAX"]], "Tests": [[10, "Tests"]], "Loading the Data": [[10, "Loading-the-Data"]], "Comparing xgb_frontend.XGBClassifier and xgb.XGBClassifier": [[10, "Comparing-xgb_frontend.XGBClassifier-and-xgb.XGBClassifier"]], "JAX backend": [[10, "JAX-backend"]], "Tensorflow backend": [[10, "Tensorflow-backend"]], "PyTorch backend": [[10, "PyTorch-backend"]], "More exhaustive example": [[10, "More-exhaustive-example"]], "Evaluating Training Time vs. Number of Boosting Rounds": [[10, "Evaluating-Training-Time-vs.-Number-of-Boosting-Rounds"]], "Training Time vs. Fractions of Data": [[10, "Training-Time-vs.-Fractions-of-Data"]], "Comparison of Metrics": [[10, "Comparison-of-Metrics"]], "# Ivy Bert Demo": [[4, "#-Ivy-Bert-Demo"]], "Install the dependecies": [[4, "Install-the-dependecies"]], "Import the modules": [[4, "Import-the-modules"]], "Ivy inference with Sequence Classification": [[4, "Ivy-inference-with-Sequence-Classification"]], "Ivy model inference with tensorflow": [[4, "Ivy-model-inference-with-tensorflow"]], "Ivy model inference with Jax": [[4, "Ivy-model-inference-with-Jax"]], "Ivy model inference with torch": [[4, "Ivy-model-inference-with-torch"]], "How to use decorators": [[23, "How-to-use-decorators"]]}, "indexentries": {"_arraywithactivations (class in ivy.data_classes.array.activations)": [[47, "ivy.data_classes.array.activations._ArrayWithActivations"]], "_abc_impl (ivy.data_classes.array.activations._arraywithactivations attribute)": [[47, "ivy.data_classes.array.activations._ArrayWithActivations._abc_impl"]], "gelu() (ivy.data_classes.array.activations._arraywithactivations method)": [[47, "ivy.data_classes.array.activations._ArrayWithActivations.gelu"]], "hardswish() (ivy.data_classes.array.activations._arraywithactivations method)": [[47, "ivy.data_classes.array.activations._ArrayWithActivations.hardswish"]], "ivy.data_classes.array.activations": [[47, "module-ivy.data_classes.array.activations"]], "leaky_relu() (ivy.data_classes.array.activations._arraywithactivations method)": [[47, "ivy.data_classes.array.activations._ArrayWithActivations.leaky_relu"]], "log_softmax() (ivy.data_classes.array.activations._arraywithactivations method)": [[47, "ivy.data_classes.array.activations._ArrayWithActivations.log_softmax"]], "mish() (ivy.data_classes.array.activations._arraywithactivations method)": [[47, "ivy.data_classes.array.activations._ArrayWithActivations.mish"]], "module": [[47, "module-ivy.data_classes.array.activations"], [48, "module-ivy.data_classes.array.conversions"], [49, "module-ivy.data_classes.array.creation"], [50, "module-ivy.data_classes.array.data_type"], [51, "module-ivy.data_classes.array.device"], [52, "module-ivy.data_classes.array.elementwise"], [53, "module-ivy.data_classes.array.experimental"], [53, "module-ivy.data_classes.array.experimental.activations"], [53, "module-ivy.data_classes.array.experimental.conversions"], [53, "module-ivy.data_classes.array.experimental.creation"], [53, "module-ivy.data_classes.array.experimental.data_type"], [53, "module-ivy.data_classes.array.experimental.device"], [53, "module-ivy.data_classes.array.experimental.elementwise"], [53, "module-ivy.data_classes.array.experimental.general"], [53, "module-ivy.data_classes.array.experimental.gradients"], [53, "module-ivy.data_classes.array.experimental.image"], [53, "module-ivy.data_classes.array.experimental.layers"], [53, "module-ivy.data_classes.array.experimental.linear_algebra"], [53, "module-ivy.data_classes.array.experimental.losses"], [53, "module-ivy.data_classes.array.experimental.manipulation"], [53, "module-ivy.data_classes.array.experimental.norms"], [53, "module-ivy.data_classes.array.experimental.random"], [53, "module-ivy.data_classes.array.experimental.searching"], [53, "module-ivy.data_classes.array.experimental.set"], [53, "module-ivy.data_classes.array.experimental.sorting"], [53, "module-ivy.data_classes.array.experimental.statistical"], [53, "module-ivy.data_classes.array.experimental.utility"], [54, "module-ivy.data_classes.array.general"], [55, "module-ivy.data_classes.array.gradients"], [56, "module-ivy.data_classes.array.image"], [57, "module-ivy.data_classes.array.layers"], [58, "module-ivy.data_classes.array.linear_algebra"], [59, "module-ivy.data_classes.array.losses"], [60, "module-ivy.data_classes.array.manipulation"], [61, "module-ivy.data_classes.array.norms"], [62, "module-ivy.data_classes.array.random"], [63, "module-ivy.data_classes.array.searching"], [64, "module-ivy.data_classes.array.set"], [65, "module-ivy.data_classes.array.sorting"], [66, "module-ivy.data_classes.array.statistical"], [67, "module-ivy.data_classes.array.utility"], [68, "module-ivy.data_classes.array.wrapping"], [69, "module-ivy.data_classes.container.activations"], [70, "module-ivy.data_classes.container.base"], [71, "module-ivy.data_classes.container.conversions"], [72, "module-ivy.data_classes.container.creation"], [73, "module-ivy.data_classes.container.data_type"], [74, "module-ivy.data_classes.container.device"], [75, "module-ivy.data_classes.container.elementwise"], [76, "module-ivy.data_classes.container.experimental"], [76, "module-ivy.data_classes.container.experimental.activations"], [76, "module-ivy.data_classes.container.experimental.conversions"], [76, "module-ivy.data_classes.container.experimental.creation"], [76, "module-ivy.data_classes.container.experimental.data_type"], [76, "module-ivy.data_classes.container.experimental.device"], [76, "module-ivy.data_classes.container.experimental.elementwise"], [76, "module-ivy.data_classes.container.experimental.general"], [76, "module-ivy.data_classes.container.experimental.gradients"], [76, "module-ivy.data_classes.container.experimental.image"], [76, "module-ivy.data_classes.container.experimental.layers"], [76, "module-ivy.data_classes.container.experimental.linear_algebra"], [76, "module-ivy.data_classes.container.experimental.losses"], [76, "module-ivy.data_classes.container.experimental.manipulation"], [76, "module-ivy.data_classes.container.experimental.norms"], [76, "module-ivy.data_classes.container.experimental.random"], [76, "module-ivy.data_classes.container.experimental.searching"], [76, "module-ivy.data_classes.container.experimental.set"], [76, "module-ivy.data_classes.container.experimental.sorting"], [76, "module-ivy.data_classes.container.experimental.statistical"], [76, "module-ivy.data_classes.container.experimental.utility"], [77, "module-ivy.data_classes.container.general"], [78, "module-ivy.data_classes.container.gradients"], [79, "module-ivy.data_classes.container.image"], [80, "module-ivy.data_classes.container.layers"], [81, "module-ivy.data_classes.container.linear_algebra"], [82, "module-ivy.data_classes.container.losses"], [83, "module-ivy.data_classes.container.manipulation"], [84, "module-ivy.data_classes.container.norms"], [85, "module-ivy.data_classes.container.random"], [86, "module-ivy.data_classes.container.searching"], [87, "module-ivy.data_classes.container.set"], [88, "module-ivy.data_classes.container.sorting"], [89, "module-ivy.data_classes.container.statistical"], [90, "module-ivy.data_classes.container.utility"], [91, "module-ivy.data_classes.container.wrapping"], [92, "module-ivy.data_classes.factorized_tensor.base"], [93, "module-ivy.data_classes.factorized_tensor.cp_tensor"], [94, "module-ivy.data_classes.factorized_tensor.parafac2_tensor"], [95, "module-ivy.data_classes.factorized_tensor.tr_tensor"], [96, "module-ivy.data_classes.factorized_tensor.tt_tensor"], [97, "module-ivy.data_classes.factorized_tensor.tucker_tensor"], [98, "module-ivy.data_classes.array.array"], [99, "module-ivy.data_classes.container.container"], [101, "module-ivy.data_classes.nested_array.nested_array"], [102, "module-ivy.data_classes.nested_array.base"], [103, "module-ivy.data_classes.nested_array.elementwise"], [363, "module-ivy.functional.ivy.experimental.activations"], [364, "module-ivy.functional.ivy.experimental.constants"], [365, "module-ivy.functional.ivy.experimental.creation"], [366, "module-ivy.functional.ivy.experimental.data_type"], [367, "module-ivy.functional.ivy.experimental.device"], [368, "module-ivy.functional.ivy.experimental.elementwise"], [369, "module-ivy.functional.ivy.experimental.general"], [370, "module-ivy.functional.ivy.experimental.gradients"], [371, "module-ivy.functional.ivy.experimental.layers"], [372, "module-ivy.functional.ivy.experimental.linear_algebra"], [373, "module-ivy.functional.ivy.experimental.losses"], [374, "module-ivy.functional.ivy.experimental.manipulation"], [375, "module-ivy.functional.ivy.experimental.meta"], [376, "module-ivy.functional.ivy.experimental.nest"], [377, "module-ivy.functional.ivy.experimental.norms"], [378, "module-ivy.functional.ivy.experimental.random"], [379, "module-ivy.functional.ivy.experimental.searching"], [380, "module-ivy.functional.ivy.experimental.set"], [381, "module-ivy.functional.ivy.experimental.sorting"], [382, "module-ivy.functional.ivy.experimental.sparse_array"], [383, "module-ivy.functional.ivy.experimental.statistical"], [384, "module-ivy.functional.ivy.experimental.utility"], [622, "module-ivy.functional.ivy.activations"], [623, "module-ivy.functional.ivy.constants"], [624, "module-ivy.functional.ivy.control_flow_ops"], [625, "module-ivy.functional.ivy.creation"], [626, "module-ivy.functional.ivy.data_type"], [627, "module-ivy.functional.ivy.device"], [628, "module-ivy.functional.ivy.elementwise"], [629, "module-ivy.functional.ivy.experimental"], [630, "module-ivy.functional.ivy.general"], [631, "module-ivy.functional.ivy.gradients"], [632, "module-ivy.functional.ivy.layers"], [633, "module-ivy.functional.ivy.linear_algebra"], [634, "module-ivy.functional.ivy.losses"], [635, "module-ivy.functional.ivy.manipulation"], [636, "module-ivy.functional.ivy.meta"], [637, "module-ivy.functional.ivy.nest"], [638, "module-ivy.functional.ivy.norms"], [639, "module-ivy.functional.ivy.random"], [640, "module-ivy.functional.ivy.searching"], [641, "module-ivy.functional.ivy.set"], [642, "module-ivy.functional.ivy.sorting"], [643, "module-ivy.functional.ivy.statistical"], [644, "module-ivy.functional.ivy.utility"], [767, "module-ivy_tests.test_ivy.helpers.assertions"], [768, "module-ivy_tests.test_ivy.helpers.available_frameworks"], [769, "module-ivy_tests.test_ivy.helpers.function_testing"], [770, "module-ivy_tests.test_ivy.helpers.globals"], [771, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers"], [772, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers"], [773, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers"], [774, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers"], [775, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers"], [776, "module-ivy_tests.test_ivy.helpers.multiprocessing"], [777, "module-ivy_tests.test_ivy.helpers.pipeline_helper"], [778, "module-ivy_tests.test_ivy.helpers.structs"], [779, "module-ivy_tests.test_ivy.helpers.test_parameter_flags"], [780, "module-ivy_tests.test_ivy.helpers.testing_helpers"], [784, "module-ivy.stateful.activations"], [785, "module-ivy.stateful.converters"], [786, "module-ivy.stateful.helpers"], [787, "module-ivy.stateful.initializers"], [788, "module-ivy.stateful.layers"], [789, "module-ivy.stateful.losses"], [790, "module-ivy.stateful.module"], [791, "module-ivy.stateful.norms"], [792, "module-ivy.stateful.optimizers"], [793, "module-ivy.stateful.sequential"], [794, "module-ivy.utils.assertions"], [795, "module-ivy.utils.backend"], [796, "module-ivy.utils.backend.ast_helpers"], [797, "module-ivy.utils.backend.handler"], [798, "module-ivy.utils.backend.sub_backend_handler"], [799, "module-ivy.utils.binaries"], [800, "module-ivy.utils.dynamic_import"], [801, "module-ivy.utils.einsum_parser"], [802, "module-ivy.utils.einsum_path_helpers"], [803, "module-ivy.utils.exceptions"], [804, "module-ivy.utils.inspection"], [805, "module-ivy.utils.logging"], [806, "module-ivy.utils.profiler"], [807, "module-ivy.utils.verbosity"]], "relu() (ivy.data_classes.array.activations._arraywithactivations method)": [[47, "ivy.data_classes.array.activations._ArrayWithActivations.relu"]], "sigmoid() (ivy.data_classes.array.activations._arraywithactivations method)": [[47, "ivy.data_classes.array.activations._ArrayWithActivations.sigmoid"]], "softmax() (ivy.data_classes.array.activations._arraywithactivations method)": [[47, "ivy.data_classes.array.activations._ArrayWithActivations.softmax"]], "softplus() (ivy.data_classes.array.activations._arraywithactivations method)": [[47, "ivy.data_classes.array.activations._ArrayWithActivations.softplus"]], "_array_to_new_backend() (in module ivy.data_classes.array.conversions)": [[48, "ivy.data_classes.array.conversions._array_to_new_backend"]], "_to_ivy() (in module ivy.data_classes.array.conversions)": [[48, "ivy.data_classes.array.conversions._to_ivy"]], "_to_native() (in module ivy.data_classes.array.conversions)": [[48, "ivy.data_classes.array.conversions._to_native"]], "_to_new_backend() (in module ivy.data_classes.array.conversions)": [[48, "ivy.data_classes.array.conversions._to_new_backend"]], "args_to_ivy() (in module ivy.data_classes.array.conversions)": [[48, "ivy.data_classes.array.conversions.args_to_ivy"]], "args_to_native() (in module ivy.data_classes.array.conversions)": [[48, "ivy.data_classes.array.conversions.args_to_native"]], "args_to_new_backend() (in module ivy.data_classes.array.conversions)": [[48, "ivy.data_classes.array.conversions.args_to_new_backend"]], "ivy.data_classes.array.conversions": [[48, "module-ivy.data_classes.array.conversions"]], "to_ivy() (in module ivy.data_classes.array.conversions)": [[48, "ivy.data_classes.array.conversions.to_ivy"]], "to_native() (in module ivy.data_classes.array.conversions)": [[48, "ivy.data_classes.array.conversions.to_native"]], "to_new_backend() (in module ivy.data_classes.array.conversions)": [[48, "ivy.data_classes.array.conversions.to_new_backend"]], "_arraywithcreation (class in ivy.data_classes.array.creation)": [[49, "ivy.data_classes.array.creation._ArrayWithCreation"]], "_abc_impl (ivy.data_classes.array.creation._arraywithcreation attribute)": [[49, "ivy.data_classes.array.creation._ArrayWithCreation._abc_impl"]], "asarray() (ivy.data_classes.array.creation._arraywithcreation method)": [[49, "ivy.data_classes.array.creation._ArrayWithCreation.asarray"]], "copy_array() (ivy.data_classes.array.creation._arraywithcreation method)": [[49, "ivy.data_classes.array.creation._ArrayWithCreation.copy_array"]], "empty_like() (ivy.data_classes.array.creation._arraywithcreation method)": [[49, "ivy.data_classes.array.creation._ArrayWithCreation.empty_like"]], "from_dlpack() (ivy.data_classes.array.creation._arraywithcreation method)": [[49, "ivy.data_classes.array.creation._ArrayWithCreation.from_dlpack"]], "full_like() (ivy.data_classes.array.creation._arraywithcreation method)": [[49, "ivy.data_classes.array.creation._ArrayWithCreation.full_like"]], "ivy.data_classes.array.creation": [[49, "module-ivy.data_classes.array.creation"]], "linspace() (ivy.data_classes.array.creation._arraywithcreation method)": [[49, "ivy.data_classes.array.creation._ArrayWithCreation.linspace"]], "logspace() (ivy.data_classes.array.creation._arraywithcreation method)": [[49, "ivy.data_classes.array.creation._ArrayWithCreation.logspace"]], "meshgrid() (ivy.data_classes.array.creation._arraywithcreation method)": [[49, "ivy.data_classes.array.creation._ArrayWithCreation.meshgrid"]], "native_array() (ivy.data_classes.array.creation._arraywithcreation method)": [[49, "ivy.data_classes.array.creation._ArrayWithCreation.native_array"]], "one_hot() (ivy.data_classes.array.creation._arraywithcreation method)": [[49, "ivy.data_classes.array.creation._ArrayWithCreation.one_hot"]], "ones_like() (ivy.data_classes.array.creation._arraywithcreation method)": [[49, "ivy.data_classes.array.creation._ArrayWithCreation.ones_like"]], "tril() (ivy.data_classes.array.creation._arraywithcreation method)": [[49, "ivy.data_classes.array.creation._ArrayWithCreation.tril"]], "triu() (ivy.data_classes.array.creation._arraywithcreation method)": [[49, "ivy.data_classes.array.creation._ArrayWithCreation.triu"]], "zeros_like() (ivy.data_classes.array.creation._arraywithcreation method)": [[49, "ivy.data_classes.array.creation._ArrayWithCreation.zeros_like"]], "_arraywithdatatypes (class in ivy.data_classes.array.data_type)": [[50, "ivy.data_classes.array.data_type._ArrayWithDataTypes"]], "_abc_impl (ivy.data_classes.array.data_type._arraywithdatatypes attribute)": [[50, "ivy.data_classes.array.data_type._ArrayWithDataTypes._abc_impl"]], "astype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[50, "ivy.data_classes.array.data_type._ArrayWithDataTypes.astype"]], "broadcast_arrays() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[50, "ivy.data_classes.array.data_type._ArrayWithDataTypes.broadcast_arrays"]], "broadcast_to() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[50, "ivy.data_classes.array.data_type._ArrayWithDataTypes.broadcast_to"]], "can_cast() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[50, "ivy.data_classes.array.data_type._ArrayWithDataTypes.can_cast"]], "dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[50, "ivy.data_classes.array.data_type._ArrayWithDataTypes.dtype"]], "finfo() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[50, "ivy.data_classes.array.data_type._ArrayWithDataTypes.finfo"]], "iinfo() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[50, "ivy.data_classes.array.data_type._ArrayWithDataTypes.iinfo"]], "is_bool_dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[50, "ivy.data_classes.array.data_type._ArrayWithDataTypes.is_bool_dtype"]], "is_float_dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[50, "ivy.data_classes.array.data_type._ArrayWithDataTypes.is_float_dtype"]], "is_int_dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[50, "ivy.data_classes.array.data_type._ArrayWithDataTypes.is_int_dtype"]], "is_uint_dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[50, "ivy.data_classes.array.data_type._ArrayWithDataTypes.is_uint_dtype"]], "ivy.data_classes.array.data_type": [[50, "module-ivy.data_classes.array.data_type"]], "result_type() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[50, "ivy.data_classes.array.data_type._ArrayWithDataTypes.result_type"]], "_arraywithdevice (class in ivy.data_classes.array.device)": [[51, "ivy.data_classes.array.device._ArrayWithDevice"]], "_abc_impl (ivy.data_classes.array.device._arraywithdevice attribute)": [[51, "ivy.data_classes.array.device._ArrayWithDevice._abc_impl"]], "dev() (ivy.data_classes.array.device._arraywithdevice method)": [[51, "ivy.data_classes.array.device._ArrayWithDevice.dev"]], "ivy.data_classes.array.device": [[51, "module-ivy.data_classes.array.device"]], "to_device() (ivy.data_classes.array.device._arraywithdevice method)": [[51, "ivy.data_classes.array.device._ArrayWithDevice.to_device"]], "_arraywithelementwise (class in ivy.data_classes.array.elementwise)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise"]], "_abc_impl (ivy.data_classes.array.elementwise._arraywithelementwise attribute)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise._abc_impl"]], "abs() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.abs"]], "acos() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.acos"]], "acosh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.acosh"]], "add() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.add"]], "angle() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.angle"]], "asin() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.asin"]], "asinh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.asinh"]], "atan() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.atan"]], "atan2() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.atan2"]], "atanh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.atanh"]], "bitwise_and() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_and"]], "bitwise_invert() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_invert"]], "bitwise_left_shift() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_left_shift"]], "bitwise_or() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_or"]], "bitwise_right_shift() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_right_shift"]], "bitwise_xor() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_xor"]], "ceil() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.ceil"]], "cos() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.cos"]], "cosh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.cosh"]], "deg2rad() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.deg2rad"]], "divide() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.divide"]], "equal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.equal"]], "erf() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.erf"]], "exp() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.exp"]], "exp2() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.exp2"]], "expm1() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.expm1"]], "floor() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.floor"]], "floor_divide() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.floor_divide"]], "fmin() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.fmin"]], "gcd() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.gcd"]], "greater() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.greater"]], "greater_equal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.greater_equal"]], "isfinite() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.isfinite"]], "isinf() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.isinf"]], "isnan() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.isnan"]], "isreal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.isreal"]], "ivy.data_classes.array.elementwise": [[52, "module-ivy.data_classes.array.elementwise"]], "lcm() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.lcm"]], "less() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.less"]], "less_equal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.less_equal"]], "log() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.log"]], "log10() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.log10"]], "log1p() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.log1p"]], "log2() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.log2"]], "logaddexp() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logaddexp"]], "logaddexp2() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logaddexp2"]], "logical_and() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logical_and"]], "logical_not() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logical_not"]], "logical_or() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logical_or"]], "logical_xor() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logical_xor"]], "maximum() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.maximum"]], "minimum() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.minimum"]], "multiply() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.multiply"]], "nan_to_num() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.nan_to_num"]], "negative() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.negative"]], "not_equal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.not_equal"]], "positive() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.positive"]], "pow() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.pow"]], "rad2deg() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.rad2deg"]], "real() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.real"]], "reciprocal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.reciprocal"]], "remainder() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.remainder"]], "round() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.round"]], "sign() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.sign"]], "sin() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.sin"]], "sinh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.sinh"]], "sqrt() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.sqrt"]], "square() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.square"]], "subtract() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.subtract"]], "tan() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.tan"]], "tanh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.tanh"]], "trapz() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.trapz"]], "trunc() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.trunc"]], "trunc_divide() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[52, "ivy.data_classes.array.elementwise._ArrayWithElementwise.trunc_divide"]], "_arraywithactivationsexperimental (class in ivy.data_classes.array.experimental.activations)": [[53, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental"]], "_arraywithconversionsexperimental (class in ivy.data_classes.array.experimental.conversions)": [[53, "ivy.data_classes.array.experimental.conversions._ArrayWithConversionsExperimental"]], "_arraywithcreationexperimental (class in ivy.data_classes.array.experimental.creation)": [[53, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental"]], "_arraywithdata_typeexperimental (class in ivy.data_classes.array.experimental.data_type)": [[53, "ivy.data_classes.array.experimental.data_type._ArrayWithData_typeExperimental"]], "_arraywithdeviceexperimental (class in ivy.data_classes.array.experimental.device)": [[53, "ivy.data_classes.array.experimental.device._ArrayWithDeviceExperimental"]], "_arraywithelementwiseexperimental (class in ivy.data_classes.array.experimental.elementwise)": [[53, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental"]], "_arraywithgeneralexperimental (class in ivy.data_classes.array.experimental.general)": [[53, "ivy.data_classes.array.experimental.general._ArrayWithGeneralExperimental"]], "_arraywithgradientsexperimental (class in ivy.data_classes.array.experimental.gradients)": [[53, "ivy.data_classes.array.experimental.gradients._ArrayWithGradientsExperimental"]], "_arraywithimageexperimental (class in ivy.data_classes.array.experimental.image)": [[53, "ivy.data_classes.array.experimental.image._ArrayWithImageExperimental"]], "_arraywithlayersexperimental (class in ivy.data_classes.array.experimental.layers)": [[53, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental"]], "_arraywithlinearalgebraexperimental (class in ivy.data_classes.array.experimental.linear_algebra)": [[53, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental"]], "_arraywithlossesexperimental (class in ivy.data_classes.array.experimental.losses)": [[53, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental"]], "_arraywithmanipulationexperimental (class in ivy.data_classes.array.experimental.manipulation)": [[53, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental"]], "_arraywithnormsexperimental (class in ivy.data_classes.array.experimental.norms)": [[53, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental"]], "_arraywithrandomexperimental (class in ivy.data_classes.array.experimental.random)": [[53, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental"]], "_arraywithsearchingexperimental (class in ivy.data_classes.array.experimental.searching)": [[53, "ivy.data_classes.array.experimental.searching._ArrayWithSearchingExperimental"]], "_arraywithsetexperimental (class in ivy.data_classes.array.experimental.set)": [[53, "ivy.data_classes.array.experimental.set._ArrayWithSetExperimental"]], "_arraywithsortingexperimental (class in ivy.data_classes.array.experimental.sorting)": [[53, "ivy.data_classes.array.experimental.sorting._ArrayWithSortingExperimental"]], "_arraywithstatisticalexperimental (class in ivy.data_classes.array.experimental.statistical)": [[53, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental"]], "_arraywithutilityexperimental (class in ivy.data_classes.array.experimental.utility)": [[53, "ivy.data_classes.array.experimental.utility._ArrayWithUtilityExperimental"]], "_abc_impl (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental attribute)": [[53, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.conversions._arraywithconversionsexperimental attribute)": [[53, "ivy.data_classes.array.experimental.conversions._ArrayWithConversionsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental attribute)": [[53, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.data_type._arraywithdata_typeexperimental attribute)": [[53, "ivy.data_classes.array.experimental.data_type._ArrayWithData_typeExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.device._arraywithdeviceexperimental attribute)": [[53, "ivy.data_classes.array.experimental.device._ArrayWithDeviceExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental attribute)": [[53, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.general._arraywithgeneralexperimental attribute)": [[53, "ivy.data_classes.array.experimental.general._ArrayWithGeneralExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.gradients._arraywithgradientsexperimental attribute)": [[53, "ivy.data_classes.array.experimental.gradients._ArrayWithGradientsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.image._arraywithimageexperimental attribute)": [[53, "ivy.data_classes.array.experimental.image._ArrayWithImageExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental attribute)": [[53, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental attribute)": [[53, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental attribute)": [[53, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental attribute)": [[53, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental attribute)": [[53, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.random._arraywithrandomexperimental attribute)": [[53, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.searching._arraywithsearchingexperimental attribute)": [[53, "ivy.data_classes.array.experimental.searching._ArrayWithSearchingExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.set._arraywithsetexperimental attribute)": [[53, "ivy.data_classes.array.experimental.set._ArrayWithSetExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.sorting._arraywithsortingexperimental attribute)": [[53, "ivy.data_classes.array.experimental.sorting._ArrayWithSortingExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental attribute)": [[53, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.utility._arraywithutilityexperimental attribute)": [[53, "ivy.data_classes.array.experimental.utility._ArrayWithUtilityExperimental._abc_impl"]], "adaptive_avg_pool1d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[53, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.adaptive_avg_pool1d"]], "adaptive_avg_pool2d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[53, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.adaptive_avg_pool2d"]], "adaptive_max_pool2d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[53, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.adaptive_max_pool2d"]], "adaptive_max_pool3d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[53, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.adaptive_max_pool3d"]], "adjoint() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[53, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.adjoint"]], "allclose() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[53, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.allclose"]], "amax() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[53, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.amax"]], "amin() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[53, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.amin"]], "as_strided() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[53, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.as_strided"]], "associative_scan() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[53, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.associative_scan"]], "atleast_1d() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[53, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.atleast_1d"]], "atleast_2d() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[53, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.atleast_2d"]], "atleast_3d() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[53, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.atleast_3d"]], "avg_pool1d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[53, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.avg_pool1d"]], "avg_pool2d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[53, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.avg_pool2d"]], "avg_pool3d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[53, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.avg_pool3d"]], "batch_norm() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[53, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.batch_norm"]], "batched_outer() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[53, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.batched_outer"]], "bernoulli() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[53, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.bernoulli"]], "beta() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[53, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.beta"]], "binarizer() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[53, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.binarizer"]], "bincount() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[53, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.bincount"]], "blackman_window() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental method)": [[53, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.blackman_window"]], "celu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[53, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.celu"]], "column_stack() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[53, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.column_stack"]], "concat_from_sequence() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[53, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.concat_from_sequence"]], "cond() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[53, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.cond"]], "conj() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[53, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.conj"]], "copysign() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[53, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.copysign"]], "corrcoef() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[53, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.corrcoef"]], "count_nonzero() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[53, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.count_nonzero"]], "cov() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[53, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.cov"]], "cummax() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[53, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.cummax"]], "cummin() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[53, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.cummin"]], "dct() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[53, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.dct"]], "dft() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[53, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.dft"]], "diagflat() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[53, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.diagflat"]], "diff() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[53, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.diff"]], "digamma() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[53, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.digamma"]], "dirichlet() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[53, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.dirichlet"]], "dot() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[53, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.dot"]], "dsplit() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[53, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.dsplit"]], "dstack() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[53, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.dstack"]], "eig() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[53, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.eig"]], "eigh_tridiagonal() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[53, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.eigh_tridiagonal"]], "eigvals() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[53, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.eigvals"]], "elu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[53, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.elu"]], "embedding() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[53, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.embedding"]], "erfc() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[53, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.erfc"]], "erfinv() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[53, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.erfinv"]], "expand() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[53, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.expand"]], "eye_like() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental method)": [[53, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.eye_like"]], "fft() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[53, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.fft"]], "fft2() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[53, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.fft2"]], "fill_diagonal() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[53, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.fill_diagonal"]], "fix() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[53, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.fix"]], "flatten() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[53, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.flatten"]], "fliplr() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[53, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.fliplr"]], "flipud() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[53, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.flipud"]], "float_power() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[53, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.float_power"]], "fmax() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[53, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.fmax"]], "fmod() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[53, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.fmod"]], "fold() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[53, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.fold"]], "frexp() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[53, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.frexp"]], "gamma() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[53, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.gamma"]], "general_inner_product() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[53, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.general_inner_product"]], "gradient() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[53, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.gradient"]], "group_norm() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[53, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.group_norm"]], "hardshrink() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[53, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.hardshrink"]], "hardsilu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[53, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.hardsilu"]], "hardtanh() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[53, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.hardtanh"]], "heaviside() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[53, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.heaviside"]], "higher_order_moment() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[53, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.higher_order_moment"]], "hinge_embedding_loss() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[53, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.hinge_embedding_loss"]], "histogram() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[53, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.histogram"]], "hsplit() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[53, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.hsplit"]], "hstack() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[53, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.hstack"]], "huber_loss() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[53, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.huber_loss"]], "hypot() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[53, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.hypot"]], "i0() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[53, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.i0"]], "idct() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[53, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.idct"]], "ifft() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[53, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.ifft"]], "ifftn() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[53, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.ifftn"]], "igamma() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[53, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.igamma"]], "initialize_tucker() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[53, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.initialize_tucker"]], "instance_norm() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[53, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.instance_norm"]], "interpolate() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[53, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.interpolate"]], "isclose() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[53, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.isclose"]], "ivy.data_classes.array.experimental": [[53, "module-ivy.data_classes.array.experimental"]], "ivy.data_classes.array.experimental.activations": [[53, "module-ivy.data_classes.array.experimental.activations"]], "ivy.data_classes.array.experimental.conversions": [[53, "module-ivy.data_classes.array.experimental.conversions"]], "ivy.data_classes.array.experimental.creation": [[53, "module-ivy.data_classes.array.experimental.creation"]], "ivy.data_classes.array.experimental.data_type": [[53, "module-ivy.data_classes.array.experimental.data_type"]], "ivy.data_classes.array.experimental.device": [[53, "module-ivy.data_classes.array.experimental.device"]], "ivy.data_classes.array.experimental.elementwise": [[53, "module-ivy.data_classes.array.experimental.elementwise"]], "ivy.data_classes.array.experimental.general": [[53, "module-ivy.data_classes.array.experimental.general"]], "ivy.data_classes.array.experimental.gradients": [[53, "module-ivy.data_classes.array.experimental.gradients"]], "ivy.data_classes.array.experimental.image": [[53, "module-ivy.data_classes.array.experimental.image"]], "ivy.data_classes.array.experimental.layers": [[53, "module-ivy.data_classes.array.experimental.layers"]], "ivy.data_classes.array.experimental.linear_algebra": [[53, "module-ivy.data_classes.array.experimental.linear_algebra"]], "ivy.data_classes.array.experimental.losses": [[53, "module-ivy.data_classes.array.experimental.losses"]], "ivy.data_classes.array.experimental.manipulation": [[53, "module-ivy.data_classes.array.experimental.manipulation"]], "ivy.data_classes.array.experimental.norms": [[53, "module-ivy.data_classes.array.experimental.norms"]], "ivy.data_classes.array.experimental.random": [[53, "module-ivy.data_classes.array.experimental.random"]], "ivy.data_classes.array.experimental.searching": [[53, "module-ivy.data_classes.array.experimental.searching"]], "ivy.data_classes.array.experimental.set": [[53, "module-ivy.data_classes.array.experimental.set"]], "ivy.data_classes.array.experimental.sorting": [[53, "module-ivy.data_classes.array.experimental.sorting"]], "ivy.data_classes.array.experimental.statistical": [[53, "module-ivy.data_classes.array.experimental.statistical"]], "ivy.data_classes.array.experimental.utility": [[53, "module-ivy.data_classes.array.experimental.utility"]], "kl_div() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[53, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.kl_div"]], "kron() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[53, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.kron"]], "l1_loss() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[53, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.l1_loss"]], "l1_normalize() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[53, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.l1_normalize"]], "l2_normalize() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[53, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.l2_normalize"]], "ldexp() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[53, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.ldexp"]], "lerp() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[53, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.lerp"]], "lexsort() (ivy.data_classes.array.experimental.sorting._arraywithsortingexperimental method)": [[53, "ivy.data_classes.array.experimental.sorting._ArrayWithSortingExperimental.lexsort"]], "lgamma() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[53, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.lgamma"]], "log_poisson_loss() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[53, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.log_poisson_loss"]], "logit() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[53, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.logit"]], "logsigmoid() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[53, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.logsigmoid"]], "lp_normalize() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[53, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.lp_normalize"]], "make_svd_non_negative() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[53, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.make_svd_non_negative"]], "matricize() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[53, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.matricize"]], "matrix_exp() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[53, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.matrix_exp"]], "max_pool1d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[53, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.max_pool1d"]], "max_pool2d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[53, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.max_pool2d"]], "max_pool3d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[53, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.max_pool3d"]], "max_unpool1d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[53, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.max_unpool1d"]], "median() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[53, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.median"]], "mel_weight_matrix() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental static method)": [[53, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.mel_weight_matrix"]], "mode_dot() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[53, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.mode_dot"]], "modf() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[53, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.modf"]], "moveaxis() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[53, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.moveaxis"]], "multi_dot() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[53, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.multi_dot"]], "multi_mode_dot() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[53, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.multi_mode_dot"]], "nanmean() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[53, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.nanmean"]], "nanmedian() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[53, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.nanmedian"]], "nanmin() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[53, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.nanmin"]], "nanprod() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[53, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.nanprod"]], "nansum() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[53, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.nansum"]], "nextafter() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[53, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.nextafter"]], "optional_get_element() (ivy.data_classes.array.experimental.utility._arraywithutilityexperimental method)": [[53, "ivy.data_classes.array.experimental.utility._ArrayWithUtilityExperimental.optional_get_element"]], "pad() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[53, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.pad"]], "partial_fold() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[53, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.partial_fold"]], "partial_tensor_to_vec() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[53, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.partial_tensor_to_vec"]], "partial_tucker() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[53, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.partial_tucker"]], "partial_unfold() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[53, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.partial_unfold"]], "partial_vec_to_tensor() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[53, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.partial_vec_to_tensor"]], "poisson() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[53, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.poisson"]], "poisson_nll_loss() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[53, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.poisson_nll_loss"]], "polyval() (in module ivy.data_classes.array.experimental.creation)": [[53, "ivy.data_classes.array.experimental.creation.polyval"]], "prelu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[53, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.prelu"]], "put_along_axis() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[53, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.put_along_axis"]], "quantile() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[53, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.quantile"]], "reduce() (ivy.data_classes.array.experimental.general._arraywithgeneralexperimental method)": [[53, "ivy.data_classes.array.experimental.general._ArrayWithGeneralExperimental.reduce"]], "reduce_window() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[53, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.reduce_window"]], "relu6() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[53, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.relu6"]], "rfft() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[53, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.rfft"]], "rfftn() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[53, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.rfftn"]], "rot90() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[53, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.rot90"]], "scaled_tanh() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[53, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.scaled_tanh"]], "selu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[53, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.selu"]], "signbit() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[53, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.signbit"]], "silu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[53, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.silu"]], "sinc() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[53, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.sinc"]], "sliding_window() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[53, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.sliding_window"]], "smooth_l1_loss() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[53, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.smooth_l1_loss"]], "soft_margin_loss() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[53, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.soft_margin_loss"]], "soft_thresholding() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[53, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.soft_thresholding"]], "softshrink() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[53, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.softshrink"]], "sparsify_tensor() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[53, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.sparsify_tensor"]], "stft() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[53, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.stft"]], "svd_flip() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[53, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.svd_flip"]], "take() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[53, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.take"]], "take_along_axis() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[53, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.take_along_axis"]], "tanhshrink() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[53, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.tanhshrink"]], "tensor_train() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[53, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.tensor_train"]], "threshold() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[53, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.threshold"]], "thresholded_relu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[53, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.thresholded_relu"]], "top_k() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[53, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.top_k"]], "trilu() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental method)": [[53, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.trilu"]], "trim_zeros() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[53, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.trim_zeros"]], "truncated_svd() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[53, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.truncated_svd"]], "tt_matrix_to_tensor() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[53, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.tt_matrix_to_tensor"]], "tucker() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[53, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.tucker"]], "unflatten() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[53, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.unflatten"]], "unfold() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[53, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.unfold"]], "unique_consecutive() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[53, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.unique_consecutive"]], "unravel_index() (ivy.data_classes.array.experimental.searching._arraywithsearchingexperimental method)": [[53, "ivy.data_classes.array.experimental.searching._ArrayWithSearchingExperimental.unravel_index"]], "unsorted_segment_mean() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental method)": [[53, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.unsorted_segment_mean"]], "unsorted_segment_min() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental method)": [[53, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.unsorted_segment_min"]], "unsorted_segment_sum() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental method)": [[53, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.unsorted_segment_sum"]], "vsplit() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[53, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.vsplit"]], "vstack() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[53, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.vstack"]], "xlogy() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[53, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.xlogy"]], "zeta() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[53, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.zeta"]], "_arraywithgeneral (class in ivy.data_classes.array.general)": [[54, "ivy.data_classes.array.general._ArrayWithGeneral"]], "_abc_impl (ivy.data_classes.array.general._arraywithgeneral attribute)": [[54, "ivy.data_classes.array.general._ArrayWithGeneral._abc_impl"]], "all_equal() (ivy.data_classes.array.general._arraywithgeneral method)": [[54, "ivy.data_classes.array.general._ArrayWithGeneral.all_equal"]], "array_equal() (ivy.data_classes.array.general._arraywithgeneral method)": [[54, "ivy.data_classes.array.general._ArrayWithGeneral.array_equal"]], "assert_supports_inplace() (ivy.data_classes.array.general._arraywithgeneral method)": [[54, "ivy.data_classes.array.general._ArrayWithGeneral.assert_supports_inplace"]], "clip_matrix_norm() (ivy.data_classes.array.general._arraywithgeneral method)": [[54, "ivy.data_classes.array.general._ArrayWithGeneral.clip_matrix_norm"]], "clip_vector_norm() (ivy.data_classes.array.general._arraywithgeneral method)": [[54, "ivy.data_classes.array.general._ArrayWithGeneral.clip_vector_norm"]], "default() (ivy.data_classes.array.general._arraywithgeneral method)": [[54, "ivy.data_classes.array.general._ArrayWithGeneral.default"]], "einops_rearrange() (ivy.data_classes.array.general._arraywithgeneral method)": [[54, "ivy.data_classes.array.general._ArrayWithGeneral.einops_rearrange"]], "einops_reduce() (ivy.data_classes.array.general._arraywithgeneral method)": [[54, "ivy.data_classes.array.general._ArrayWithGeneral.einops_reduce"]], "einops_repeat() (ivy.data_classes.array.general._arraywithgeneral method)": [[54, "ivy.data_classes.array.general._ArrayWithGeneral.einops_repeat"]], "exists() (ivy.data_classes.array.general._arraywithgeneral method)": [[54, "ivy.data_classes.array.general._ArrayWithGeneral.exists"]], "fourier_encode() (ivy.data_classes.array.general._arraywithgeneral method)": [[54, "ivy.data_classes.array.general._ArrayWithGeneral.fourier_encode"]], "gather() (ivy.data_classes.array.general._arraywithgeneral method)": [[54, "ivy.data_classes.array.general._ArrayWithGeneral.gather"]], "gather_nd() (ivy.data_classes.array.general._arraywithgeneral method)": [[54, "ivy.data_classes.array.general._ArrayWithGeneral.gather_nd"]], "get_num_dims() (ivy.data_classes.array.general._arraywithgeneral method)": [[54, "ivy.data_classes.array.general._ArrayWithGeneral.get_num_dims"]], "has_nans() (ivy.data_classes.array.general._arraywithgeneral method)": [[54, "ivy.data_classes.array.general._ArrayWithGeneral.has_nans"]], "inplace_decrement() (ivy.data_classes.array.general._arraywithgeneral method)": [[54, "ivy.data_classes.array.general._ArrayWithGeneral.inplace_decrement"]], "inplace_increment() (ivy.data_classes.array.general._arraywithgeneral method)": [[54, "ivy.data_classes.array.general._ArrayWithGeneral.inplace_increment"]], "inplace_update() (ivy.data_classes.array.general._arraywithgeneral method)": [[54, "ivy.data_classes.array.general._ArrayWithGeneral.inplace_update"]], "is_array() (ivy.data_classes.array.general._arraywithgeneral method)": [[54, "ivy.data_classes.array.general._ArrayWithGeneral.is_array"]], "is_ivy_array() (ivy.data_classes.array.general._arraywithgeneral method)": [[54, "ivy.data_classes.array.general._ArrayWithGeneral.is_ivy_array"]], "is_ivy_container() (ivy.data_classes.array.general._arraywithgeneral method)": [[54, "ivy.data_classes.array.general._ArrayWithGeneral.is_ivy_container"]], "is_native_array() (ivy.data_classes.array.general._arraywithgeneral method)": [[54, "ivy.data_classes.array.general._ArrayWithGeneral.is_native_array"]], "isin() (ivy.data_classes.array.general._arraywithgeneral method)": [[54, "ivy.data_classes.array.general._ArrayWithGeneral.isin"]], "ivy.data_classes.array.general": [[54, "module-ivy.data_classes.array.general"]], "scatter_flat() (ivy.data_classes.array.general._arraywithgeneral method)": [[54, "ivy.data_classes.array.general._ArrayWithGeneral.scatter_flat"]], "scatter_nd() (ivy.data_classes.array.general._arraywithgeneral method)": [[54, "ivy.data_classes.array.general._ArrayWithGeneral.scatter_nd"]], "stable_divide() (ivy.data_classes.array.general._arraywithgeneral method)": [[54, "ivy.data_classes.array.general._ArrayWithGeneral.stable_divide"]], "stable_pow() (ivy.data_classes.array.general._arraywithgeneral method)": [[54, "ivy.data_classes.array.general._ArrayWithGeneral.stable_pow"]], "supports_inplace_updates() (ivy.data_classes.array.general._arraywithgeneral method)": [[54, "ivy.data_classes.array.general._ArrayWithGeneral.supports_inplace_updates"]], "to_file() (ivy.data_classes.array.general._arraywithgeneral method)": [[54, "ivy.data_classes.array.general._ArrayWithGeneral.to_file"]], "to_list() (ivy.data_classes.array.general._arraywithgeneral method)": [[54, "ivy.data_classes.array.general._ArrayWithGeneral.to_list"]], "to_numpy() (ivy.data_classes.array.general._arraywithgeneral method)": [[54, "ivy.data_classes.array.general._ArrayWithGeneral.to_numpy"]], "to_scalar() (ivy.data_classes.array.general._arraywithgeneral method)": [[54, "ivy.data_classes.array.general._ArrayWithGeneral.to_scalar"]], "value_is_nan() (ivy.data_classes.array.general._arraywithgeneral method)": [[54, "ivy.data_classes.array.general._ArrayWithGeneral.value_is_nan"]], "_arraywithgradients (class in ivy.data_classes.array.gradients)": [[55, "ivy.data_classes.array.gradients._ArrayWithGradients"]], "_abc_impl (ivy.data_classes.array.gradients._arraywithgradients attribute)": [[55, "ivy.data_classes.array.gradients._ArrayWithGradients._abc_impl"]], "adam_step() (ivy.data_classes.array.gradients._arraywithgradients method)": [[55, "ivy.data_classes.array.gradients._ArrayWithGradients.adam_step"]], "adam_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[55, "ivy.data_classes.array.gradients._ArrayWithGradients.adam_update"]], "gradient_descent_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[55, "ivy.data_classes.array.gradients._ArrayWithGradients.gradient_descent_update"]], "ivy.data_classes.array.gradients": [[55, "module-ivy.data_classes.array.gradients"]], "lamb_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[55, "ivy.data_classes.array.gradients._ArrayWithGradients.lamb_update"]], "lars_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[55, "ivy.data_classes.array.gradients._ArrayWithGradients.lars_update"]], "optimizer_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[55, "ivy.data_classes.array.gradients._ArrayWithGradients.optimizer_update"]], "stop_gradient() (ivy.data_classes.array.gradients._arraywithgradients method)": [[55, "ivy.data_classes.array.gradients._ArrayWithGradients.stop_gradient"]], "_arraywithimage (class in ivy.data_classes.array.image)": [[56, "ivy.data_classes.array.image._ArrayWithImage"]], "_abc_impl (ivy.data_classes.array.image._arraywithimage attribute)": [[56, "ivy.data_classes.array.image._ArrayWithImage._abc_impl"]], "ivy.data_classes.array.image": [[56, "module-ivy.data_classes.array.image"]], "_arraywithlayers (class in ivy.data_classes.array.layers)": [[57, "ivy.data_classes.array.layers._ArrayWithLayers"]], "_abc_impl (ivy.data_classes.array.layers._arraywithlayers attribute)": [[57, "ivy.data_classes.array.layers._ArrayWithLayers._abc_impl"]], "conv1d() (ivy.data_classes.array.layers._arraywithlayers method)": [[57, "ivy.data_classes.array.layers._ArrayWithLayers.conv1d"]], "conv1d_transpose() (ivy.data_classes.array.layers._arraywithlayers method)": [[57, "ivy.data_classes.array.layers._ArrayWithLayers.conv1d_transpose"]], "conv2d() (ivy.data_classes.array.layers._arraywithlayers method)": [[57, "ivy.data_classes.array.layers._ArrayWithLayers.conv2d"]], "conv2d_transpose() (ivy.data_classes.array.layers._arraywithlayers method)": [[57, "ivy.data_classes.array.layers._ArrayWithLayers.conv2d_transpose"]], "conv3d() (ivy.data_classes.array.layers._arraywithlayers method)": [[57, "ivy.data_classes.array.layers._ArrayWithLayers.conv3d"]], "conv3d_transpose() (ivy.data_classes.array.layers._arraywithlayers method)": [[57, "ivy.data_classes.array.layers._ArrayWithLayers.conv3d_transpose"]], "depthwise_conv2d() (ivy.data_classes.array.layers._arraywithlayers method)": [[57, "ivy.data_classes.array.layers._ArrayWithLayers.depthwise_conv2d"]], "dropout() (ivy.data_classes.array.layers._arraywithlayers method)": [[57, "ivy.data_classes.array.layers._ArrayWithLayers.dropout"]], "dropout1d() (ivy.data_classes.array.layers._arraywithlayers method)": [[57, "ivy.data_classes.array.layers._ArrayWithLayers.dropout1d"]], "dropout2d() (ivy.data_classes.array.layers._arraywithlayers method)": [[57, "ivy.data_classes.array.layers._ArrayWithLayers.dropout2d"]], "dropout3d() (ivy.data_classes.array.layers._arraywithlayers method)": [[57, "ivy.data_classes.array.layers._ArrayWithLayers.dropout3d"]], "ivy.data_classes.array.layers": [[57, "module-ivy.data_classes.array.layers"]], "linear() (ivy.data_classes.array.layers._arraywithlayers method)": [[57, "ivy.data_classes.array.layers._ArrayWithLayers.linear"]], "lstm_update() (ivy.data_classes.array.layers._arraywithlayers method)": [[57, "ivy.data_classes.array.layers._ArrayWithLayers.lstm_update"]], "multi_head_attention() (ivy.data_classes.array.layers._arraywithlayers method)": [[57, "ivy.data_classes.array.layers._ArrayWithLayers.multi_head_attention"]], "scaled_dot_product_attention() (ivy.data_classes.array.layers._arraywithlayers method)": [[57, "ivy.data_classes.array.layers._ArrayWithLayers.scaled_dot_product_attention"]], "_arraywithlinearalgebra (class in ivy.data_classes.array.linear_algebra)": [[58, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra"]], "_abc_impl (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra attribute)": [[58, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra._abc_impl"]], "cholesky() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[58, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.cholesky"]], "cross() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[58, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.cross"]], "det() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[58, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.det"]], "diag() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[58, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.diag"]], "diagonal() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[58, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.diagonal"]], "eig() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[58, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.eig"]], "eigh() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[58, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.eigh"]], "eigvalsh() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[58, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.eigvalsh"]], "inner() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[58, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.inner"]], "inv() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[58, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.inv"]], "ivy.data_classes.array.linear_algebra": [[58, "module-ivy.data_classes.array.linear_algebra"]], "matmul() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[58, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matmul"]], "matrix_norm() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[58, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matrix_norm"]], "matrix_power() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[58, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matrix_power"]], "matrix_rank() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[58, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matrix_rank"]], "matrix_transpose() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[58, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matrix_transpose"]], "outer() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[58, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.outer"]], "pinv() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[58, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.pinv"]], "qr() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[58, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.qr"]], "slogdet() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[58, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.slogdet"]], "solve() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[58, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.solve"]], "svd() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[58, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.svd"]], "svdvals() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[58, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.svdvals"]], "tensordot() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[58, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.tensordot"]], "tensorsolve() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[58, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.tensorsolve"]], "trace() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[58, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.trace"]], "vander() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[58, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.vander"]], "vecdot() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[58, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.vecdot"]], "vector_norm() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[58, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.vector_norm"]], "vector_to_skew_symmetric_matrix() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[58, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.vector_to_skew_symmetric_matrix"]], "_arraywithlosses (class in ivy.data_classes.array.losses)": [[59, "ivy.data_classes.array.losses._ArrayWithLosses"]], "_abc_impl (ivy.data_classes.array.losses._arraywithlosses attribute)": [[59, "ivy.data_classes.array.losses._ArrayWithLosses._abc_impl"]], "binary_cross_entropy() (ivy.data_classes.array.losses._arraywithlosses method)": [[59, "ivy.data_classes.array.losses._ArrayWithLosses.binary_cross_entropy"]], "cross_entropy() (ivy.data_classes.array.losses._arraywithlosses method)": [[59, "ivy.data_classes.array.losses._ArrayWithLosses.cross_entropy"]], "ivy.data_classes.array.losses": [[59, "module-ivy.data_classes.array.losses"]], "sparse_cross_entropy() (ivy.data_classes.array.losses._arraywithlosses method)": [[59, "ivy.data_classes.array.losses._ArrayWithLosses.sparse_cross_entropy"]], "_arraywithmanipulation (class in ivy.data_classes.array.manipulation)": [[60, "ivy.data_classes.array.manipulation._ArrayWithManipulation"]], "_abc_impl (ivy.data_classes.array.manipulation._arraywithmanipulation attribute)": [[60, "ivy.data_classes.array.manipulation._ArrayWithManipulation._abc_impl"]], "clip() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[60, "ivy.data_classes.array.manipulation._ArrayWithManipulation.clip"]], "concat() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[60, "ivy.data_classes.array.manipulation._ArrayWithManipulation.concat"]], "constant_pad() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[60, "ivy.data_classes.array.manipulation._ArrayWithManipulation.constant_pad"]], "expand_dims() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[60, "ivy.data_classes.array.manipulation._ArrayWithManipulation.expand_dims"]], "flip() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[60, "ivy.data_classes.array.manipulation._ArrayWithManipulation.flip"]], "ivy.data_classes.array.manipulation": [[60, "module-ivy.data_classes.array.manipulation"]], "permute_dims() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[60, "ivy.data_classes.array.manipulation._ArrayWithManipulation.permute_dims"]], "repeat() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[60, "ivy.data_classes.array.manipulation._ArrayWithManipulation.repeat"]], "reshape() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[60, "ivy.data_classes.array.manipulation._ArrayWithManipulation.reshape"]], "roll() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[60, "ivy.data_classes.array.manipulation._ArrayWithManipulation.roll"]], "split() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[60, "ivy.data_classes.array.manipulation._ArrayWithManipulation.split"]], "squeeze() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[60, "ivy.data_classes.array.manipulation._ArrayWithManipulation.squeeze"]], "stack() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[60, "ivy.data_classes.array.manipulation._ArrayWithManipulation.stack"]], "swapaxes() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[60, "ivy.data_classes.array.manipulation._ArrayWithManipulation.swapaxes"]], "tile() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[60, "ivy.data_classes.array.manipulation._ArrayWithManipulation.tile"]], "unstack() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[60, "ivy.data_classes.array.manipulation._ArrayWithManipulation.unstack"]], "view() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[60, "ivy.data_classes.array.manipulation._ArrayWithManipulation.view"]], "zero_pad() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[60, "ivy.data_classes.array.manipulation._ArrayWithManipulation.zero_pad"]], "_arraywithnorms (class in ivy.data_classes.array.norms)": [[61, "ivy.data_classes.array.norms._ArrayWithNorms"]], "_abc_impl (ivy.data_classes.array.norms._arraywithnorms attribute)": [[61, "ivy.data_classes.array.norms._ArrayWithNorms._abc_impl"]], "ivy.data_classes.array.norms": [[61, "module-ivy.data_classes.array.norms"]], "layer_norm() (ivy.data_classes.array.norms._arraywithnorms method)": [[61, "ivy.data_classes.array.norms._ArrayWithNorms.layer_norm"]], "_arraywithrandom (class in ivy.data_classes.array.random)": [[62, "ivy.data_classes.array.random._ArrayWithRandom"]], "_abc_impl (ivy.data_classes.array.random._arraywithrandom attribute)": [[62, "ivy.data_classes.array.random._ArrayWithRandom._abc_impl"]], "ivy.data_classes.array.random": [[62, "module-ivy.data_classes.array.random"]], "multinomial() (ivy.data_classes.array.random._arraywithrandom method)": [[62, "ivy.data_classes.array.random._ArrayWithRandom.multinomial"]], "randint() (ivy.data_classes.array.random._arraywithrandom method)": [[62, "ivy.data_classes.array.random._ArrayWithRandom.randint"]], "random_normal() (ivy.data_classes.array.random._arraywithrandom method)": [[62, "ivy.data_classes.array.random._ArrayWithRandom.random_normal"]], "random_uniform() (ivy.data_classes.array.random._arraywithrandom method)": [[62, "ivy.data_classes.array.random._ArrayWithRandom.random_uniform"]], "shuffle() (ivy.data_classes.array.random._arraywithrandom method)": [[62, "ivy.data_classes.array.random._ArrayWithRandom.shuffle"]], "_arraywithsearching (class in ivy.data_classes.array.searching)": [[63, "ivy.data_classes.array.searching._ArrayWithSearching"]], "_abc_impl (ivy.data_classes.array.searching._arraywithsearching attribute)": [[63, "ivy.data_classes.array.searching._ArrayWithSearching._abc_impl"]], "argmax() (ivy.data_classes.array.searching._arraywithsearching method)": [[63, "ivy.data_classes.array.searching._ArrayWithSearching.argmax"]], "argmin() (ivy.data_classes.array.searching._arraywithsearching method)": [[63, "ivy.data_classes.array.searching._ArrayWithSearching.argmin"]], "argwhere() (ivy.data_classes.array.searching._arraywithsearching method)": [[63, "ivy.data_classes.array.searching._ArrayWithSearching.argwhere"]], "ivy.data_classes.array.searching": [[63, "module-ivy.data_classes.array.searching"]], "nonzero() (ivy.data_classes.array.searching._arraywithsearching method)": [[63, "ivy.data_classes.array.searching._ArrayWithSearching.nonzero"]], "where() (ivy.data_classes.array.searching._arraywithsearching method)": [[63, "ivy.data_classes.array.searching._ArrayWithSearching.where"]], "_arraywithset (class in ivy.data_classes.array.set)": [[64, "ivy.data_classes.array.set._ArrayWithSet"]], "_abc_impl (ivy.data_classes.array.set._arraywithset attribute)": [[64, "ivy.data_classes.array.set._ArrayWithSet._abc_impl"]], "ivy.data_classes.array.set": [[64, "module-ivy.data_classes.array.set"]], "unique_all() (ivy.data_classes.array.set._arraywithset method)": [[64, "ivy.data_classes.array.set._ArrayWithSet.unique_all"]], "unique_counts() (ivy.data_classes.array.set._arraywithset method)": [[64, "ivy.data_classes.array.set._ArrayWithSet.unique_counts"]], "unique_inverse() (ivy.data_classes.array.set._arraywithset method)": [[64, "ivy.data_classes.array.set._ArrayWithSet.unique_inverse"]], "unique_values() (ivy.data_classes.array.set._arraywithset method)": [[64, "ivy.data_classes.array.set._ArrayWithSet.unique_values"]], "_arraywithsorting (class in ivy.data_classes.array.sorting)": [[65, "ivy.data_classes.array.sorting._ArrayWithSorting"]], "_abc_impl (ivy.data_classes.array.sorting._arraywithsorting attribute)": [[65, "ivy.data_classes.array.sorting._ArrayWithSorting._abc_impl"]], "argsort() (ivy.data_classes.array.sorting._arraywithsorting method)": [[65, "ivy.data_classes.array.sorting._ArrayWithSorting.argsort"]], "ivy.data_classes.array.sorting": [[65, "module-ivy.data_classes.array.sorting"]], "msort() (ivy.data_classes.array.sorting._arraywithsorting method)": [[65, "ivy.data_classes.array.sorting._ArrayWithSorting.msort"]], "searchsorted() (ivy.data_classes.array.sorting._arraywithsorting method)": [[65, "ivy.data_classes.array.sorting._ArrayWithSorting.searchsorted"]], "sort() (ivy.data_classes.array.sorting._arraywithsorting method)": [[65, "ivy.data_classes.array.sorting._ArrayWithSorting.sort"]], "_arraywithstatistical (class in ivy.data_classes.array.statistical)": [[66, "ivy.data_classes.array.statistical._ArrayWithStatistical"]], "_abc_impl (ivy.data_classes.array.statistical._arraywithstatistical attribute)": [[66, "ivy.data_classes.array.statistical._ArrayWithStatistical._abc_impl"]], "cumprod() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[66, "ivy.data_classes.array.statistical._ArrayWithStatistical.cumprod"]], "cumsum() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[66, "ivy.data_classes.array.statistical._ArrayWithStatistical.cumsum"]], "einsum() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[66, "ivy.data_classes.array.statistical._ArrayWithStatistical.einsum"]], "ivy.data_classes.array.statistical": [[66, "module-ivy.data_classes.array.statistical"]], "max() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[66, "ivy.data_classes.array.statistical._ArrayWithStatistical.max"]], "mean() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[66, "ivy.data_classes.array.statistical._ArrayWithStatistical.mean"]], "min() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[66, "ivy.data_classes.array.statistical._ArrayWithStatistical.min"]], "prod() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[66, "ivy.data_classes.array.statistical._ArrayWithStatistical.prod"]], "std() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[66, "ivy.data_classes.array.statistical._ArrayWithStatistical.std"]], "sum() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[66, "ivy.data_classes.array.statistical._ArrayWithStatistical.sum"]], "var() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[66, "ivy.data_classes.array.statistical._ArrayWithStatistical.var"]], "_arraywithutility (class in ivy.data_classes.array.utility)": [[67, "ivy.data_classes.array.utility._ArrayWithUtility"]], "_abc_impl (ivy.data_classes.array.utility._arraywithutility attribute)": [[67, "ivy.data_classes.array.utility._ArrayWithUtility._abc_impl"]], "all() (ivy.data_classes.array.utility._arraywithutility method)": [[67, "ivy.data_classes.array.utility._ArrayWithUtility.all"]], "any() (ivy.data_classes.array.utility._arraywithutility method)": [[67, "ivy.data_classes.array.utility._ArrayWithUtility.any"]], "ivy.data_classes.array.utility": [[67, "module-ivy.data_classes.array.utility"]], "_wrap_function() (in module ivy.data_classes.array.wrapping)": [[68, "ivy.data_classes.array.wrapping._wrap_function"]], "add_ivy_array_instance_methods() (in module ivy.data_classes.array.wrapping)": [[68, "ivy.data_classes.array.wrapping.add_ivy_array_instance_methods"]], "ivy.data_classes.array.wrapping": [[68, "module-ivy.data_classes.array.wrapping"]], "_containerwithactivations (class in ivy.data_classes.container.activations)": [[69, "ivy.data_classes.container.activations._ContainerWithActivations"]], "_abc_impl (ivy.data_classes.container.activations._containerwithactivations attribute)": [[69, "ivy.data_classes.container.activations._ContainerWithActivations._abc_impl"]], "_static_gelu() (ivy.data_classes.container.activations._containerwithactivations static method)": [[69, "ivy.data_classes.container.activations._ContainerWithActivations._static_gelu"]], "_static_hardswish() (ivy.data_classes.container.activations._containerwithactivations static method)": [[69, "ivy.data_classes.container.activations._ContainerWithActivations._static_hardswish"]], "_static_leaky_relu() (ivy.data_classes.container.activations._containerwithactivations static method)": [[69, "ivy.data_classes.container.activations._ContainerWithActivations._static_leaky_relu"]], "_static_log_softmax() (ivy.data_classes.container.activations._containerwithactivations static method)": [[69, "ivy.data_classes.container.activations._ContainerWithActivations._static_log_softmax"]], "_static_mish() (ivy.data_classes.container.activations._containerwithactivations static method)": [[69, "ivy.data_classes.container.activations._ContainerWithActivations._static_mish"]], "_static_relu() (ivy.data_classes.container.activations._containerwithactivations static method)": [[69, "ivy.data_classes.container.activations._ContainerWithActivations._static_relu"]], "_static_sigmoid() (ivy.data_classes.container.activations._containerwithactivations static method)": [[69, "ivy.data_classes.container.activations._ContainerWithActivations._static_sigmoid"]], "_static_softmax() (ivy.data_classes.container.activations._containerwithactivations static method)": [[69, "ivy.data_classes.container.activations._ContainerWithActivations._static_softmax"]], "_static_softplus() (ivy.data_classes.container.activations._containerwithactivations static method)": [[69, "ivy.data_classes.container.activations._ContainerWithActivations._static_softplus"]], "gelu() (ivy.data_classes.container.activations._containerwithactivations method)": [[69, "ivy.data_classes.container.activations._ContainerWithActivations.gelu"]], "hardswish() (ivy.data_classes.container.activations._containerwithactivations method)": [[69, "ivy.data_classes.container.activations._ContainerWithActivations.hardswish"]], "ivy.data_classes.container.activations": [[69, "module-ivy.data_classes.container.activations"]], "leaky_relu() (ivy.data_classes.container.activations._containerwithactivations method)": [[69, "ivy.data_classes.container.activations._ContainerWithActivations.leaky_relu"]], "log_softmax() (ivy.data_classes.container.activations._containerwithactivations method)": [[69, "ivy.data_classes.container.activations._ContainerWithActivations.log_softmax"]], "mish() (ivy.data_classes.container.activations._containerwithactivations method)": [[69, "ivy.data_classes.container.activations._ContainerWithActivations.mish"]], "relu() (ivy.data_classes.container.activations._containerwithactivations method)": [[69, "ivy.data_classes.container.activations._ContainerWithActivations.relu"]], "sigmoid() (ivy.data_classes.container.activations._containerwithactivations method)": [[69, "ivy.data_classes.container.activations._ContainerWithActivations.sigmoid"]], "softmax() (ivy.data_classes.container.activations._containerwithactivations method)": [[69, "ivy.data_classes.container.activations._ContainerWithActivations.softmax"]], "softplus() (ivy.data_classes.container.activations._containerwithactivations method)": [[69, "ivy.data_classes.container.activations._ContainerWithActivations.softplus"]], "containerbase (class in ivy.data_classes.container.base)": [[70, "ivy.data_classes.container.base.ContainerBase"]], "__getitem__() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.__getitem__"]], "__init__() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.__init__"]], "__setitem__() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.__setitem__"]], "_abc_impl (ivy.data_classes.container.base.containerbase attribute)": [[70, "ivy.data_classes.container.base.ContainerBase._abc_impl"]], "_cont_at_key_chains_input_as_dict() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase._cont_at_key_chains_input_as_dict"]], "_cont_at_key_chains_input_as_seq() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase._cont_at_key_chains_input_as_seq"]], "_cont_call_static_method_with_flexible_args() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase._cont_call_static_method_with_flexible_args"]], "_cont_concat_unify() (ivy.data_classes.container.base.containerbase static method)": [[70, "ivy.data_classes.container.base.ContainerBase._cont_concat_unify"]], "_cont_get_dev() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase._cont_get_dev"]], "_cont_get_dtype() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase._cont_get_dtype"]], "_cont_get_shape() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase._cont_get_shape"]], "_cont_get_shapes() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase._cont_get_shapes"]], "_cont_ivy (ivy.data_classes.container.base.containerbase property)": [[70, "ivy.data_classes.container.base.ContainerBase._cont_ivy"]], "_cont_mean_unify() (ivy.data_classes.container.base.containerbase static method)": [[70, "ivy.data_classes.container.base.ContainerBase._cont_mean_unify"]], "_cont_prune_key_chains_input_as_dict() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase._cont_prune_key_chains_input_as_dict"]], "_cont_prune_key_chains_input_as_seq() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase._cont_prune_key_chains_input_as_seq"]], "_cont_slice_keys() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase._cont_slice_keys"]], "_cont_sum_unify() (ivy.data_classes.container.base.containerbase static method)": [[70, "ivy.data_classes.container.base.ContainerBase._cont_sum_unify"]], "_get_queue_item() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase._get_queue_item"]], "_is_jsonable() (in module ivy.data_classes.container.base)": [[70, "ivy.data_classes.container.base._is_jsonable"]], "_repr() (in module ivy.data_classes.container.base)": [[70, "ivy.data_classes.container.base._repr"]], "cont_all_false() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_all_false"]], "cont_all_key_chains() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_all_key_chains"]], "cont_all_true() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_all_true"]], "cont_as_bools() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_as_bools"]], "cont_assert_contains_sub_container() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_assert_contains_sub_container"]], "cont_assert_contains_sub_structure() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_assert_contains_sub_structure"]], "cont_assert_identical() (ivy.data_classes.container.base.containerbase static method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_assert_identical"]], "cont_assert_identical_structure() (ivy.data_classes.container.base.containerbase static method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_assert_identical_structure"]], "cont_at_key_chain() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_at_key_chain"]], "cont_at_key_chains() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_at_key_chains"]], "cont_at_keys() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_at_keys"]], "cont_combine() (ivy.data_classes.container.base.containerbase static method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_combine"]], "cont_common_key_chains() (ivy.data_classes.container.base.containerbase static method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_common_key_chains"]], "cont_config (ivy.data_classes.container.base.containerbase property)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_config"]], "cont_contains_sub_container() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_contains_sub_container"]], "cont_contains_sub_structure() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_contains_sub_structure"]], "cont_copy() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_copy"]], "cont_create_if_absent() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_create_if_absent"]], "cont_cutoff_at_depth() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_cutoff_at_depth"]], "cont_cutoff_at_height() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_cutoff_at_height"]], "cont_deep_copy() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_deep_copy"]], "cont_dev (ivy.data_classes.container.base.containerbase property)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_dev"]], "cont_dev_str (ivy.data_classes.container.base.containerbase property)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_dev_str"]], "cont_diff() (ivy.data_classes.container.base.containerbase static method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_diff"]], "cont_dtype (ivy.data_classes.container.base.containerbase property)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_dtype"]], "cont_duplicate_array_keychains() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_duplicate_array_keychains"]], "cont_find_sub_container() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_find_sub_container"]], "cont_find_sub_structure() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_find_sub_structure"]], "cont_flatten_key_chain() (ivy.data_classes.container.base.containerbase static method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_flatten_key_chain"]], "cont_flatten_key_chains() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_flatten_key_chains"]], "cont_format_key_chains() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_format_key_chains"]], "cont_from_disk_as_hdf5() (ivy.data_classes.container.base.containerbase static method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_from_disk_as_hdf5"]], "cont_from_disk_as_json() (ivy.data_classes.container.base.containerbase static method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_from_disk_as_json"]], "cont_from_disk_as_pickled() (ivy.data_classes.container.base.containerbase static method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_from_disk_as_pickled"]], "cont_from_flat_list() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_from_flat_list"]], "cont_handle_inplace() (ivy.data_classes.container.base.containerbase static method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_handle_inplace"]], "cont_has_key() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_has_key"]], "cont_has_key_chain() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_has_key_chain"]], "cont_identical() (ivy.data_classes.container.base.containerbase static method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_identical"]], "cont_identical_array_shapes() (ivy.data_classes.container.base.containerbase static method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_identical_array_shapes"]], "cont_identical_configs() (ivy.data_classes.container.base.containerbase static method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_identical_configs"]], "cont_identical_structure() (ivy.data_classes.container.base.containerbase static method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_identical_structure"]], "cont_if_exists() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_if_exists"]], "cont_inplace_update() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_inplace_update"]], "cont_ivy (ivy.data_classes.container.base.containerbase property)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_ivy"]], "cont_key_chains_containing() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_key_chains_containing"]], "cont_list_join() (ivy.data_classes.container.base.containerbase static method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_list_join"]], "cont_list_stack() (ivy.data_classes.container.base.containerbase static method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_list_stack"]], "cont_load() (ivy.data_classes.container.base.containerbase static method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_load"]], "cont_map() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_map"]], "cont_map_sub_conts() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_map_sub_conts"]], "cont_max_depth (ivy.data_classes.container.base.containerbase property)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_max_depth"]], "cont_multi_map() (ivy.data_classes.container.base.containerbase static method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_multi_map"]], "cont_multi_map_in_function() (ivy.data_classes.container.base.containerbase static method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_multi_map_in_function"]], "cont_num_arrays() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_num_arrays"]], "cont_overwrite_at_key_chain() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_overwrite_at_key_chain"]], "cont_overwrite_at_key_chains() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_overwrite_at_key_chains"]], "cont_prune_empty() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_prune_empty"]], "cont_prune_key_chain() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_prune_key_chain"]], "cont_prune_key_chains() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_prune_key_chains"]], "cont_prune_key_from_key_chains() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_prune_key_from_key_chains"]], "cont_prune_keys() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_prune_keys"]], "cont_prune_keys_from_key_chains() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_prune_keys_from_key_chains"]], "cont_reduce() (ivy.data_classes.container.base.containerbase static method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_reduce"]], "cont_remove_key_length_limit() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_remove_key_length_limit"]], "cont_remove_print_limit() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_remove_print_limit"]], "cont_reshape_like() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_reshape_like"]], "cont_restructure() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_restructure"]], "cont_restructure_key_chains() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_restructure_key_chains"]], "cont_save() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_save"]], "cont_set_at_key_chain() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_set_at_key_chain"]], "cont_set_at_key_chains() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_set_at_key_chains"]], "cont_set_at_keys() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_set_at_keys"]], "cont_shape (ivy.data_classes.container.base.containerbase property)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_shape"]], "cont_shapes (ivy.data_classes.container.base.containerbase property)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_shapes"]], "cont_show() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_show"]], "cont_show_sub_container() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_show_sub_container"]], "cont_size_ordered_arrays() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_size_ordered_arrays"]], "cont_slice_keys() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_slice_keys"]], "cont_slice_via_key() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_slice_via_key"]], "cont_sort_by_key() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_sort_by_key"]], "cont_structural_diff() (ivy.data_classes.container.base.containerbase static method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_structural_diff"]], "cont_to_dict() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_to_dict"]], "cont_to_disk_as_hdf5() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_to_disk_as_hdf5"]], "cont_to_disk_as_json() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_to_disk_as_json"]], "cont_to_disk_as_pickled() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_to_disk_as_pickled"]], "cont_to_flat_list() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_to_flat_list"]], "cont_to_iterator() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_to_iterator"]], "cont_to_iterator_keys() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_to_iterator_keys"]], "cont_to_iterator_values() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_to_iterator_values"]], "cont_to_jsonable() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_to_jsonable"]], "cont_to_nested_list() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_to_nested_list"]], "cont_to_raw() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_to_raw"]], "cont_trim_key() (ivy.data_classes.container.base.containerbase static method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_trim_key"]], "cont_try_kc() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_try_kc"]], "cont_unify() (ivy.data_classes.container.base.containerbase static method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_unify"]], "cont_unstack_conts() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_unstack_conts"]], "cont_update_config() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_update_config"]], "cont_with_default_key_color() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_with_default_key_color"]], "cont_with_entries_as_lists() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_with_entries_as_lists"]], "cont_with_ivy_backend() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_with_ivy_backend"]], "cont_with_key_length_limit() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_with_key_length_limit"]], "cont_with_print_indent() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_with_print_indent"]], "cont_with_print_limit() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_with_print_limit"]], "cont_with_print_line_spacing() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.cont_with_print_line_spacing"]], "dynamic_backend (ivy.data_classes.container.base.containerbase property)": [[70, "ivy.data_classes.container.base.ContainerBase.dynamic_backend"]], "h5_file_size() (ivy.data_classes.container.base.containerbase static method)": [[70, "ivy.data_classes.container.base.ContainerBase.h5_file_size"]], "ivy.data_classes.container.base": [[70, "module-ivy.data_classes.container.base"]], "shuffle_h5_file() (ivy.data_classes.container.base.containerbase static method)": [[70, "ivy.data_classes.container.base.ContainerBase.shuffle_h5_file"]], "split_conts() (ivy.data_classes.container.base.containerbase method)": [[70, "ivy.data_classes.container.base.ContainerBase.split_conts"]], "_containerwithconversions (class in ivy.data_classes.container.conversions)": [[71, "ivy.data_classes.container.conversions._ContainerWithConversions"]], "_abc_impl (ivy.data_classes.container.conversions._containerwithconversions attribute)": [[71, "ivy.data_classes.container.conversions._ContainerWithConversions._abc_impl"]], "_static_to_ivy() (ivy.data_classes.container.conversions._containerwithconversions static method)": [[71, "ivy.data_classes.container.conversions._ContainerWithConversions._static_to_ivy"]], "_static_to_native() (ivy.data_classes.container.conversions._containerwithconversions static method)": [[71, "ivy.data_classes.container.conversions._ContainerWithConversions._static_to_native"]], "ivy.data_classes.container.conversions": [[71, "module-ivy.data_classes.container.conversions"]], "to_ivy() (ivy.data_classes.container.conversions._containerwithconversions method)": [[71, "ivy.data_classes.container.conversions._ContainerWithConversions.to_ivy"]], "to_native() (ivy.data_classes.container.conversions._containerwithconversions method)": [[71, "ivy.data_classes.container.conversions._ContainerWithConversions.to_native"]], "_containerwithcreation (class in ivy.data_classes.container.creation)": [[72, "ivy.data_classes.container.creation._ContainerWithCreation"]], "_abc_impl (ivy.data_classes.container.creation._containerwithcreation attribute)": [[72, "ivy.data_classes.container.creation._ContainerWithCreation._abc_impl"]], "_static_arange() (ivy.data_classes.container.creation._containerwithcreation static method)": [[72, "ivy.data_classes.container.creation._ContainerWithCreation._static_arange"]], "_static_asarray() (ivy.data_classes.container.creation._containerwithcreation static method)": [[72, "ivy.data_classes.container.creation._ContainerWithCreation._static_asarray"]], "_static_copy_array() (ivy.data_classes.container.creation._containerwithcreation static method)": [[72, "ivy.data_classes.container.creation._ContainerWithCreation._static_copy_array"]], "_static_empty() (ivy.data_classes.container.creation._containerwithcreation static method)": [[72, "ivy.data_classes.container.creation._ContainerWithCreation._static_empty"]], "_static_empty_like() (ivy.data_classes.container.creation._containerwithcreation static method)": [[72, "ivy.data_classes.container.creation._ContainerWithCreation._static_empty_like"]], "_static_eye() (ivy.data_classes.container.creation._containerwithcreation static method)": [[72, "ivy.data_classes.container.creation._ContainerWithCreation._static_eye"]], "_static_from_dlpack() (ivy.data_classes.container.creation._containerwithcreation static method)": [[72, "ivy.data_classes.container.creation._ContainerWithCreation._static_from_dlpack"]], "_static_full() (ivy.data_classes.container.creation._containerwithcreation static method)": [[72, "ivy.data_classes.container.creation._ContainerWithCreation._static_full"]], "_static_full_like() (ivy.data_classes.container.creation._containerwithcreation static method)": [[72, "ivy.data_classes.container.creation._ContainerWithCreation._static_full_like"]], "_static_linspace() (ivy.data_classes.container.creation._containerwithcreation static method)": [[72, "ivy.data_classes.container.creation._ContainerWithCreation._static_linspace"]], "_static_logspace() (ivy.data_classes.container.creation._containerwithcreation static method)": [[72, "ivy.data_classes.container.creation._ContainerWithCreation._static_logspace"]], "_static_meshgrid() (ivy.data_classes.container.creation._containerwithcreation static method)": [[72, "ivy.data_classes.container.creation._ContainerWithCreation._static_meshgrid"]], "_static_native_array() (ivy.data_classes.container.creation._containerwithcreation static method)": [[72, "ivy.data_classes.container.creation._ContainerWithCreation._static_native_array"]], "_static_one_hot() (ivy.data_classes.container.creation._containerwithcreation static method)": [[72, "ivy.data_classes.container.creation._ContainerWithCreation._static_one_hot"]], "_static_ones() (ivy.data_classes.container.creation._containerwithcreation static method)": [[72, "ivy.data_classes.container.creation._ContainerWithCreation._static_ones"]], "_static_ones_like() (ivy.data_classes.container.creation._containerwithcreation static method)": [[72, "ivy.data_classes.container.creation._ContainerWithCreation._static_ones_like"]], "_static_tril() (ivy.data_classes.container.creation._containerwithcreation static method)": [[72, "ivy.data_classes.container.creation._ContainerWithCreation._static_tril"]], "_static_triu() (ivy.data_classes.container.creation._containerwithcreation static method)": [[72, "ivy.data_classes.container.creation._ContainerWithCreation._static_triu"]], "_static_zeros() (ivy.data_classes.container.creation._containerwithcreation static method)": [[72, "ivy.data_classes.container.creation._ContainerWithCreation._static_zeros"]], "_static_zeros_like() (ivy.data_classes.container.creation._containerwithcreation static method)": [[72, "ivy.data_classes.container.creation._ContainerWithCreation._static_zeros_like"]], "asarray() (ivy.data_classes.container.creation._containerwithcreation method)": [[72, "ivy.data_classes.container.creation._ContainerWithCreation.asarray"]], "copy_array() (ivy.data_classes.container.creation._containerwithcreation method)": [[72, "ivy.data_classes.container.creation._ContainerWithCreation.copy_array"]], "empty_like() (ivy.data_classes.container.creation._containerwithcreation method)": [[72, "ivy.data_classes.container.creation._ContainerWithCreation.empty_like"]], "from_dlpack() (ivy.data_classes.container.creation._containerwithcreation method)": [[72, "ivy.data_classes.container.creation._ContainerWithCreation.from_dlpack"]], "frombuffer() (ivy.data_classes.container.creation._containerwithcreation method)": [[72, "ivy.data_classes.container.creation._ContainerWithCreation.frombuffer"]], "full_like() (ivy.data_classes.container.creation._containerwithcreation method)": [[72, "ivy.data_classes.container.creation._ContainerWithCreation.full_like"]], "ivy.data_classes.container.creation": [[72, "module-ivy.data_classes.container.creation"]], "linspace() (ivy.data_classes.container.creation._containerwithcreation method)": [[72, "ivy.data_classes.container.creation._ContainerWithCreation.linspace"]], "logspace() (ivy.data_classes.container.creation._containerwithcreation method)": [[72, "ivy.data_classes.container.creation._ContainerWithCreation.logspace"]], "meshgrid() (ivy.data_classes.container.creation._containerwithcreation method)": [[72, "ivy.data_classes.container.creation._ContainerWithCreation.meshgrid"]], "native_array() (ivy.data_classes.container.creation._containerwithcreation method)": [[72, "ivy.data_classes.container.creation._ContainerWithCreation.native_array"]], "one_hot() (ivy.data_classes.container.creation._containerwithcreation method)": [[72, "ivy.data_classes.container.creation._ContainerWithCreation.one_hot"]], "ones_like() (ivy.data_classes.container.creation._containerwithcreation method)": [[72, "ivy.data_classes.container.creation._ContainerWithCreation.ones_like"]], "static_frombuffer() (ivy.data_classes.container.creation._containerwithcreation static method)": [[72, "ivy.data_classes.container.creation._ContainerWithCreation.static_frombuffer"]], "static_triu_indices() (ivy.data_classes.container.creation._containerwithcreation static method)": [[72, "ivy.data_classes.container.creation._ContainerWithCreation.static_triu_indices"]], "tril() (ivy.data_classes.container.creation._containerwithcreation method)": [[72, "ivy.data_classes.container.creation._ContainerWithCreation.tril"]], "triu() (ivy.data_classes.container.creation._containerwithcreation method)": [[72, "ivy.data_classes.container.creation._ContainerWithCreation.triu"]], "triu_indices() (ivy.data_classes.container.creation._containerwithcreation method)": [[72, "ivy.data_classes.container.creation._ContainerWithCreation.triu_indices"]], "zeros_like() (ivy.data_classes.container.creation._containerwithcreation method)": [[72, "ivy.data_classes.container.creation._ContainerWithCreation.zeros_like"]], "_containerwithdatatypes (class in ivy.data_classes.container.data_type)": [[73, "ivy.data_classes.container.data_type._ContainerWithDataTypes"]], "_abc_impl (ivy.data_classes.container.data_type._containerwithdatatypes attribute)": [[73, "ivy.data_classes.container.data_type._ContainerWithDataTypes._abc_impl"]], "_static_astype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[73, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_astype"]], "_static_broadcast_arrays() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[73, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_broadcast_arrays"]], "_static_broadcast_to() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[73, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_broadcast_to"]], "_static_can_cast() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[73, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_can_cast"]], "_static_default_complex_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[73, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_default_complex_dtype"]], "_static_default_float_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[73, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_default_float_dtype"]], "_static_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[73, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_dtype"]], "_static_finfo() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[73, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_finfo"]], "_static_function_supported_dtypes() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[73, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_function_supported_dtypes"]], "_static_function_unsupported_dtypes() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[73, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_function_unsupported_dtypes"]], "_static_iinfo() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[73, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_iinfo"]], "_static_is_bool_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[73, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_bool_dtype"]], "_static_is_complex_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[73, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_complex_dtype"]], "_static_is_float_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[73, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_float_dtype"]], "_static_is_int_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[73, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_int_dtype"]], "_static_is_uint_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[73, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_uint_dtype"]], "_static_result_type() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[73, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_result_type"]], "astype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[73, "ivy.data_classes.container.data_type._ContainerWithDataTypes.astype"]], "broadcast_arrays() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[73, "ivy.data_classes.container.data_type._ContainerWithDataTypes.broadcast_arrays"]], "broadcast_to() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[73, "ivy.data_classes.container.data_type._ContainerWithDataTypes.broadcast_to"]], "can_cast() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[73, "ivy.data_classes.container.data_type._ContainerWithDataTypes.can_cast"]], "dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[73, "ivy.data_classes.container.data_type._ContainerWithDataTypes.dtype"]], "finfo() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[73, "ivy.data_classes.container.data_type._ContainerWithDataTypes.finfo"]], "iinfo() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[73, "ivy.data_classes.container.data_type._ContainerWithDataTypes.iinfo"]], "is_bool_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[73, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_bool_dtype"]], "is_complex_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[73, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_complex_dtype"]], "is_float_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[73, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_float_dtype"]], "is_int_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[73, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_int_dtype"]], "is_uint_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[73, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_uint_dtype"]], "ivy.data_classes.container.data_type": [[73, "module-ivy.data_classes.container.data_type"]], "result_type() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[73, "ivy.data_classes.container.data_type._ContainerWithDataTypes.result_type"]], "_containerwithdevice (class in ivy.data_classes.container.device)": [[74, "ivy.data_classes.container.device._ContainerWithDevice"]], "_abc_impl (ivy.data_classes.container.device._containerwithdevice attribute)": [[74, "ivy.data_classes.container.device._ContainerWithDevice._abc_impl"]], "_static_dev() (ivy.data_classes.container.device._containerwithdevice static method)": [[74, "ivy.data_classes.container.device._ContainerWithDevice._static_dev"]], "_static_to_device() (ivy.data_classes.container.device._containerwithdevice static method)": [[74, "ivy.data_classes.container.device._ContainerWithDevice._static_to_device"]], "dev() (ivy.data_classes.container.device._containerwithdevice method)": [[74, "ivy.data_classes.container.device._ContainerWithDevice.dev"]], "ivy.data_classes.container.device": [[74, "module-ivy.data_classes.container.device"]], "to_device() (ivy.data_classes.container.device._containerwithdevice method)": [[74, "ivy.data_classes.container.device._ContainerWithDevice.to_device"]], "_containerwithelementwise (class in ivy.data_classes.container.elementwise)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise"]], "_abc_impl (ivy.data_classes.container.elementwise._containerwithelementwise attribute)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise._abc_impl"]], "_static_abs() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_abs"]], "_static_acos() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_acos"]], "_static_acosh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_acosh"]], "_static_add() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_add"]], "_static_asin() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_asin"]], "_static_asinh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_asinh"]], "_static_atan() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_atan"]], "_static_atan2() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_atan2"]], "_static_atanh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_atanh"]], "_static_bitwise_and() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_and"]], "_static_bitwise_invert() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_invert"]], "_static_bitwise_left_shift() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_left_shift"]], "_static_bitwise_or() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_or"]], "_static_bitwise_right_shift() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_right_shift"]], "_static_bitwise_xor() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_xor"]], "_static_ceil() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_ceil"]], "_static_cos() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_cos"]], "_static_cosh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_cosh"]], "_static_deg2rad() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_deg2rad"]], "_static_divide() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_divide"]], "_static_equal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_equal"]], "_static_erf() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_erf"]], "_static_exp() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_exp"]], "_static_expm1() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_expm1"]], "_static_floor() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_floor"]], "_static_floor_divide() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_floor_divide"]], "_static_greater() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_greater"]], "_static_greater_equal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_greater_equal"]], "_static_isfinite() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_isfinite"]], "_static_isinf() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_isinf"]], "_static_isnan() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_isnan"]], "_static_isreal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_isreal"]], "_static_lcm() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_lcm"]], "_static_less() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_less"]], "_static_less_equal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_less_equal"]], "_static_log() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_log"]], "_static_log10() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_log10"]], "_static_log1p() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_log1p"]], "_static_log2() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_log2"]], "_static_logaddexp() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logaddexp"]], "_static_logical_and() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logical_and"]], "_static_logical_not() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logical_not"]], "_static_logical_or() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logical_or"]], "_static_logical_xor() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logical_xor"]], "_static_maximum() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_maximum"]], "_static_minimum() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_minimum"]], "_static_multiply() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_multiply"]], "_static_negative() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_negative"]], "_static_not_equal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_not_equal"]], "_static_positive() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_positive"]], "_static_pow() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_pow"]], "_static_rad2deg() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_rad2deg"]], "_static_reciprocal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_reciprocal"]], "_static_remainder() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_remainder"]], "_static_round() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_round"]], "_static_sign() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_sign"]], "_static_sin() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_sin"]], "_static_sinh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_sinh"]], "_static_sqrt() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_sqrt"]], "_static_square() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_square"]], "_static_subtract() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_subtract"]], "_static_tan() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_tan"]], "_static_tanh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_tanh"]], "_static_trapz() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_trapz"]], "_static_trunc() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_trunc"]], "_static_trunc_divide() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_trunc_divide"]], "abs() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.abs"]], "acos() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.acos"]], "acosh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.acosh"]], "add() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.add"]], "angle() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.angle"]], "asin() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.asin"]], "asinh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.asinh"]], "atan() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.atan"]], "atan2() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.atan2"]], "atanh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.atanh"]], "bitwise_and() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_and"]], "bitwise_invert() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_invert"]], "bitwise_left_shift() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_left_shift"]], "bitwise_or() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_or"]], "bitwise_right_shift() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_right_shift"]], "bitwise_xor() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_xor"]], "ceil() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.ceil"]], "cos() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.cos"]], "cosh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.cosh"]], "deg2rad() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.deg2rad"]], "divide() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.divide"]], "equal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.equal"]], "erf() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.erf"]], "exp() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.exp"]], "exp2() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.exp2"]], "expm1() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.expm1"]], "floor() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.floor"]], "floor_divide() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.floor_divide"]], "fmin() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.fmin"]], "gcd() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.gcd"]], "greater() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.greater"]], "greater_equal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.greater_equal"]], "imag() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.imag"]], "isfinite() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.isfinite"]], "isinf() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.isinf"]], "isnan() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.isnan"]], "isreal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.isreal"]], "ivy.data_classes.container.elementwise": [[75, "module-ivy.data_classes.container.elementwise"]], "lcm() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.lcm"]], "less() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.less"]], "less_equal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.less_equal"]], "log() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.log"]], "log10() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.log10"]], "log1p() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.log1p"]], "log2() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.log2"]], "logaddexp() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logaddexp"]], "logaddexp2() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logaddexp2"]], "logical_and() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logical_and"]], "logical_not() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logical_not"]], "logical_or() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logical_or"]], "logical_xor() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logical_xor"]], "maximum() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.maximum"]], "minimum() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.minimum"]], "multiply() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.multiply"]], "nan_to_num() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.nan_to_num"]], "negative() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.negative"]], "not_equal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.not_equal"]], "positive() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.positive"]], "pow() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.pow"]], "rad2deg() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.rad2deg"]], "real() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.real"]], "reciprocal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.reciprocal"]], "remainder() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.remainder"]], "round() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.round"]], "sign() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.sign"]], "sin() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.sin"]], "sinh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.sinh"]], "sqrt() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.sqrt"]], "square() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.square"]], "static_angle() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_angle"]], "static_exp2() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_exp2"]], "static_fmin() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_fmin"]], "static_gcd() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_gcd"]], "static_imag() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_imag"]], "static_logaddexp2() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_logaddexp2"]], "static_nan_to_num() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_nan_to_num"]], "static_real() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_real"]], "subtract() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.subtract"]], "tan() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.tan"]], "tanh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.tanh"]], "trapz() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.trapz"]], "trunc() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.trunc"]], "trunc_divide() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[75, "ivy.data_classes.container.elementwise._ContainerWithElementwise.trunc_divide"]], "_containerwithactivationexperimental (class in ivy.data_classes.container.experimental.activations)": [[76, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental"]], "_containerwithconversionexperimental (class in ivy.data_classes.container.experimental.conversions)": [[76, "ivy.data_classes.container.experimental.conversions._ContainerWithConversionExperimental"]], "_containerwithcreationexperimental (class in ivy.data_classes.container.experimental.creation)": [[76, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental"]], "_containerwithdata_typeexperimental (class in ivy.data_classes.container.experimental.data_type)": [[76, "ivy.data_classes.container.experimental.data_type._ContainerWithData_typeExperimental"]], "_containerwithdeviceexperimental (class in ivy.data_classes.container.experimental.device)": [[76, "ivy.data_classes.container.experimental.device._ContainerWithDeviceExperimental"]], "_containerwithelementwiseexperimental (class in ivy.data_classes.container.experimental.elementwise)": [[76, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental"]], "_containerwithgeneralexperimental (class in ivy.data_classes.container.experimental.general)": [[76, "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental"]], "_containerwithgradientsexperimental (class in ivy.data_classes.container.experimental.gradients)": [[76, "ivy.data_classes.container.experimental.gradients._ContainerWithGradientsExperimental"]], "_containerwithimageexperimental (class in ivy.data_classes.container.experimental.image)": [[76, "ivy.data_classes.container.experimental.image._ContainerWithImageExperimental"]], "_containerwithlayersexperimental (class in ivy.data_classes.container.experimental.layers)": [[76, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental"]], "_containerwithlinearalgebraexperimental (class in ivy.data_classes.container.experimental.linear_algebra)": [[76, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental"]], "_containerwithlossesexperimental (class in ivy.data_classes.container.experimental.losses)": [[76, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental"]], "_containerwithmanipulationexperimental (class in ivy.data_classes.container.experimental.manipulation)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental"]], "_containerwithnormsexperimental (class in ivy.data_classes.container.experimental.norms)": [[76, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental"]], "_containerwithrandomexperimental (class in ivy.data_classes.container.experimental.random)": [[76, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental"]], "_containerwithsearchingexperimental (class in ivy.data_classes.container.experimental.searching)": [[76, "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental"]], "_containerwithsetexperimental (class in ivy.data_classes.container.experimental.set)": [[76, "ivy.data_classes.container.experimental.set._ContainerWithSetExperimental"]], "_containerwithsortingexperimental (class in ivy.data_classes.container.experimental.sorting)": [[76, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental"]], "_containerwithstatisticalexperimental (class in ivy.data_classes.container.experimental.statistical)": [[76, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental"]], "_containerwithutilityexperimental (class in ivy.data_classes.container.experimental.utility)": [[76, "ivy.data_classes.container.experimental.utility._ContainerWithUtilityExperimental"]], "_abc_impl (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental attribute)": [[76, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.conversions._containerwithconversionexperimental attribute)": [[76, "ivy.data_classes.container.experimental.conversions._ContainerWithConversionExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental attribute)": [[76, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.data_type._containerwithdata_typeexperimental attribute)": [[76, "ivy.data_classes.container.experimental.data_type._ContainerWithData_typeExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.device._containerwithdeviceexperimental attribute)": [[76, "ivy.data_classes.container.experimental.device._ContainerWithDeviceExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental attribute)": [[76, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.general._containerwithgeneralexperimental attribute)": [[76, "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.gradients._containerwithgradientsexperimental attribute)": [[76, "ivy.data_classes.container.experimental.gradients._ContainerWithGradientsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.image._containerwithimageexperimental attribute)": [[76, "ivy.data_classes.container.experimental.image._ContainerWithImageExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental attribute)": [[76, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental attribute)": [[76, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental attribute)": [[76, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental attribute)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental attribute)": [[76, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.random._containerwithrandomexperimental attribute)": [[76, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.searching._containerwithsearchingexperimental attribute)": [[76, "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.set._containerwithsetexperimental attribute)": [[76, "ivy.data_classes.container.experimental.set._ContainerWithSetExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental attribute)": [[76, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental attribute)": [[76, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.utility._containerwithutilityexperimental attribute)": [[76, "ivy.data_classes.container.experimental.utility._ContainerWithUtilityExperimental._abc_impl"]], "_static_celu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[76, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_celu"]], "_static_cummax() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[76, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental._static_cummax"]], "_static_cummin() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[76, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental._static_cummin"]], "_static_elu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[76, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_elu"]], "_static_fft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[76, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental._static_fft"]], "_static_fill_diagonal() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental._static_fill_diagonal"]], "_static_hardshrink() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[76, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_hardshrink"]], "_static_hardsilu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[76, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_hardsilu"]], "_static_hardtanh() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[76, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_hardtanh"]], "_static_hinge_embedding_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[76, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_hinge_embedding_loss"]], "_static_huber_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[76, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_huber_loss"]], "_static_kl_div() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[76, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_kl_div"]], "_static_l1_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[76, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_l1_loss"]], "_static_log_poisson_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[76, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_log_poisson_loss"]], "_static_nanmin() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[76, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental._static_nanmin"]], "_static_poisson_nll_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[76, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_poisson_nll_loss"]], "_static_put_along_axis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental._static_put_along_axis"]], "_static_reduce() (ivy.data_classes.container.experimental.general._containerwithgeneralexperimental static method)": [[76, "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental._static_reduce"]], "_static_scaled_tanh() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[76, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_scaled_tanh"]], "_static_silu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[76, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_silu"]], "_static_sliding_window() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[76, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental._static_sliding_window"]], "_static_smooth_l1_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[76, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_smooth_l1_loss"]], "_static_soft_margin_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[76, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_soft_margin_loss"]], "_static_softshrink() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[76, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_softshrink"]], "_static_take() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental._static_take"]], "_static_tanhshrink() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[76, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_tanhshrink"]], "_static_threshold() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[76, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_threshold"]], "_static_trilu() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[76, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental._static_trilu"]], "_static_trim_zeros() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental._static_trim_zeros"]], "_static_unflatten() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental._static_unflatten"]], "_static_unique_consecutive() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental._static_unique_consecutive"]], "adaptive_avg_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[76, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.adaptive_avg_pool1d"]], "adaptive_avg_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[76, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.adaptive_avg_pool2d"]], "adaptive_max_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[76, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.adaptive_max_pool2d"]], "adaptive_max_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[76, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.adaptive_max_pool3d"]], "adjoint() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[76, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.adjoint"]], "allclose() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[76, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.allclose"]], "amax() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[76, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.amax"]], "amin() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[76, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.amin"]], "as_strided() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.as_strided"]], "associative_scan() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.associative_scan"]], "atleast_1d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.atleast_1d"]], "atleast_2d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.atleast_2d"]], "atleast_3d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.atleast_3d"]], "avg_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[76, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.avg_pool1d"]], "avg_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[76, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.avg_pool2d"]], "avg_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[76, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.avg_pool3d"]], "batch_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[76, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.batch_norm"]], "batched_outer() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[76, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.batched_outer"]], "bernoulli() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[76, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.bernoulli"]], "beta() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[76, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.beta"]], "binarizer() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[76, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.binarizer"]], "bincount() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[76, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.bincount"]], "blackman_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[76, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.blackman_window"]], "broadcast_shapes() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.broadcast_shapes"]], "celu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[76, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.celu"]], "column_stack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.column_stack"]], "concat_from_sequence() (in module ivy.data_classes.container.experimental.manipulation)": [[76, "ivy.data_classes.container.experimental.manipulation.concat_from_sequence"]], "concat_from_sequence() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.concat_from_sequence"]], "cond() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[76, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.cond"]], "conj() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[76, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.conj"]], "copysign() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[76, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.copysign"]], "corrcoef() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[76, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.corrcoef"]], "count_nonzero() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[76, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.count_nonzero"]], "cov() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[76, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.cov"]], "cummax() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[76, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.cummax"]], "cummin() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[76, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.cummin"]], "dct() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[76, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.dct"]], "dft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[76, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.dft"]], "diagflat() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[76, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.diagflat"]], "diff() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[76, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.diff"]], "digamma() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[76, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.digamma"]], "dirichlet() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[76, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.dirichlet"]], "dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[76, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.dot"]], "dsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.dsplit"]], "dstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.dstack"]], "eig() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[76, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.eig"]], "eigh_tridiagonal() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[76, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.eigh_tridiagonal"]], "eigvals() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[76, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.eigvals"]], "elu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[76, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.elu"]], "embedding() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[76, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.embedding"]], "erfc() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[76, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.erfc"]], "erfinv() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[76, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.erfinv"]], "expand() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.expand"]], "eye_like() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[76, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.eye_like"]], "fft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[76, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.fft"]], "fill_diagonal() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.fill_diagonal"]], "fix() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[76, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.fix"]], "flatten() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.flatten"]], "fliplr() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.fliplr"]], "flipud() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.flipud"]], "float_power() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[76, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.float_power"]], "fmax() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[76, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.fmax"]], "fmod() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[76, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.fmod"]], "fold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.fold"]], "frexp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[76, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.frexp"]], "gamma() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[76, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.gamma"]], "gradient() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[76, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.gradient"]], "group_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[76, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.group_norm"]], "hamming_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[76, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.hamming_window"]], "hann_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[76, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.hann_window"]], "hardshrink() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[76, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.hardshrink"]], "hardsilu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[76, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.hardsilu"]], "hardtanh() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[76, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.hardtanh"]], "heaviside() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.heaviside"]], "higher_order_moment() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[76, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.higher_order_moment"]], "hinge_embedding_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[76, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.hinge_embedding_loss"]], "histogram() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[76, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.histogram"]], "hsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.hsplit"]], "hstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.hstack"]], "huber_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[76, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.huber_loss"]], "hypot() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[76, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.hypot"]], "i0() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.i0"]], "idct() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[76, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.idct"]], "ifft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[76, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.ifft"]], "ifftn() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[76, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.ifftn"]], "igamma() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[76, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.igamma"]], "initialize_tucker() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[76, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.initialize_tucker"]], "instance_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[76, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.instance_norm"]], "interpolate() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[76, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.interpolate"]], "invert_permutation() (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental method)": [[76, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental.invert_permutation"]], "isclose() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[76, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.isclose"]], "ivy.data_classes.container.experimental": [[76, "module-ivy.data_classes.container.experimental"]], "ivy.data_classes.container.experimental.activations": [[76, "module-ivy.data_classes.container.experimental.activations"]], "ivy.data_classes.container.experimental.conversions": [[76, "module-ivy.data_classes.container.experimental.conversions"]], "ivy.data_classes.container.experimental.creation": [[76, "module-ivy.data_classes.container.experimental.creation"]], "ivy.data_classes.container.experimental.data_type": [[76, "module-ivy.data_classes.container.experimental.data_type"]], "ivy.data_classes.container.experimental.device": [[76, "module-ivy.data_classes.container.experimental.device"]], "ivy.data_classes.container.experimental.elementwise": [[76, "module-ivy.data_classes.container.experimental.elementwise"]], "ivy.data_classes.container.experimental.general": [[76, "module-ivy.data_classes.container.experimental.general"]], "ivy.data_classes.container.experimental.gradients": [[76, "module-ivy.data_classes.container.experimental.gradients"]], "ivy.data_classes.container.experimental.image": [[76, "module-ivy.data_classes.container.experimental.image"]], "ivy.data_classes.container.experimental.layers": [[76, "module-ivy.data_classes.container.experimental.layers"]], "ivy.data_classes.container.experimental.linear_algebra": [[76, "module-ivy.data_classes.container.experimental.linear_algebra"]], "ivy.data_classes.container.experimental.losses": [[76, "module-ivy.data_classes.container.experimental.losses"]], "ivy.data_classes.container.experimental.manipulation": [[76, "module-ivy.data_classes.container.experimental.manipulation"]], "ivy.data_classes.container.experimental.norms": [[76, "module-ivy.data_classes.container.experimental.norms"]], "ivy.data_classes.container.experimental.random": [[76, "module-ivy.data_classes.container.experimental.random"]], "ivy.data_classes.container.experimental.searching": [[76, "module-ivy.data_classes.container.experimental.searching"]], "ivy.data_classes.container.experimental.set": [[76, "module-ivy.data_classes.container.experimental.set"]], "ivy.data_classes.container.experimental.sorting": [[76, "module-ivy.data_classes.container.experimental.sorting"]], "ivy.data_classes.container.experimental.statistical": [[76, "module-ivy.data_classes.container.experimental.statistical"]], "ivy.data_classes.container.experimental.utility": [[76, "module-ivy.data_classes.container.experimental.utility"]], "kaiser_bessel_derived_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[76, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.kaiser_bessel_derived_window"]], "kaiser_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[76, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.kaiser_window"]], "kl_div() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[76, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.kl_div"]], "kron() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[76, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.kron"]], "l1_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[76, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.l1_loss"]], "l1_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[76, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.l1_normalize"]], "l2_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[76, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.l2_normalize"]], "ldexp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[76, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.ldexp"]], "lerp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[76, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.lerp"]], "lexsort() (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental method)": [[76, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental.lexsort"]], "lgamma() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[76, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.lgamma"]], "log_poisson_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[76, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.log_poisson_loss"]], "logit() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[76, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.logit"]], "logsigmoid() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[76, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.logsigmoid"]], "lp_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[76, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.lp_normalize"]], "make_svd_non_negative() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[76, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.make_svd_non_negative"]], "matricize() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.matricize"]], "matrix_exp() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[76, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.matrix_exp"]], "max_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[76, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.max_pool1d"]], "max_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[76, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.max_pool2d"]], "max_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[76, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.max_pool3d"]], "max_unpool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[76, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.max_unpool1d"]], "median() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[76, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.median"]], "mel_weight_matrix() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[76, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.mel_weight_matrix"]], "mode_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[76, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.mode_dot"]], "modf() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[76, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.modf"]], "moveaxis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.moveaxis"]], "multi_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[76, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.multi_dot"]], "multi_mode_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[76, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.multi_mode_dot"]], "nanmean() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[76, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.nanmean"]], "nanmedian() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[76, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.nanmedian"]], "nanmin() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[76, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.nanmin"]], "nanprod() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[76, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.nanprod"]], "nansum() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[76, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.nansum"]], "nextafter() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[76, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.nextafter"]], "optional_get_element() (ivy.data_classes.container.experimental.utility._containerwithutilityexperimental method)": [[76, "ivy.data_classes.container.experimental.utility._ContainerWithUtilityExperimental.optional_get_element"]], "pad() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.pad"]], "partial_fold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.partial_fold"]], "partial_tensor_to_vec() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.partial_tensor_to_vec"]], "partial_tucker() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[76, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.partial_tucker"]], "partial_unfold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.partial_unfold"]], "partial_vec_to_tensor() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.partial_vec_to_tensor"]], "poisson() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[76, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.poisson"]], "poisson_nll_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[76, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.poisson_nll_loss"]], "polyval() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[76, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.polyval"]], "prelu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[76, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.prelu"]], "put_along_axis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.put_along_axis"]], "quantile() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[76, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.quantile"]], "reduce() (ivy.data_classes.container.experimental.general._containerwithgeneralexperimental method)": [[76, "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental.reduce"]], "relu6() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[76, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.relu6"]], "rfft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[76, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.rfft"]], "rfftn() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[76, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.rfftn"]], "rot90() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.rot90"]], "scaled_tanh() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[76, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.scaled_tanh"]], "selu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[76, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.selu"]], "signbit() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[76, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.signbit"]], "silu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[76, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.silu"]], "sinc() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[76, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.sinc"]], "sliding_window() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[76, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.sliding_window"]], "smooth_l1_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[76, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.smooth_l1_loss"]], "soft_margin_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[76, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.soft_margin_loss"]], "soft_thresholding() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.soft_thresholding"]], "softshrink() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[76, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.softshrink"]], "sparsify_tensor() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[76, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.sparsify_tensor"]], "static_adaptive_avg_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[76, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_adaptive_avg_pool1d"]], "static_adaptive_avg_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[76, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_adaptive_avg_pool2d"]], "static_adaptive_max_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[76, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_adaptive_max_pool2d"]], "static_adaptive_max_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[76, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_adaptive_max_pool3d"]], "static_adjoint() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[76, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_adjoint"]], "static_allclose() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[76, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_allclose"]], "static_amax() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[76, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_amax"]], "static_amin() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[76, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_amin"]], "static_as_strided() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_as_strided"]], "static_atleast_1d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_atleast_1d"]], "static_atleast_2d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_atleast_2d"]], "static_atleast_3d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_atleast_3d"]], "static_avg_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[76, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_avg_pool1d"]], "static_avg_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[76, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_avg_pool2d"]], "static_avg_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[76, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_avg_pool3d"]], "static_batch_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[76, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_batch_norm"]], "static_batched_outer() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[76, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_batched_outer"]], "static_bernoulli() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[76, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_bernoulli"]], "static_beta() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[76, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_beta"]], "static_binarizer() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[76, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_binarizer"]], "static_bincount() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[76, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_bincount"]], "static_blackman_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[76, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_blackman_window"]], "static_broadcast_shapes() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_broadcast_shapes"]], "static_column_stack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_column_stack"]], "static_concat_from_sequence() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_concat_from_sequence"]], "static_cond() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[76, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_cond"]], "static_conj() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[76, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_conj"]], "static_copysign() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[76, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_copysign"]], "static_corrcoef() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[76, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_corrcoef"]], "static_count_nonzero() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[76, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_count_nonzero"]], "static_cov() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[76, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_cov"]], "static_dct() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[76, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_dct"]], "static_dft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[76, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_dft"]], "static_diagflat() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[76, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_diagflat"]], "static_diff() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[76, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_diff"]], "static_digamma() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[76, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_digamma"]], "static_dirichlet() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[76, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_dirichlet"]], "static_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[76, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_dot"]], "static_dsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_dsplit"]], "static_dstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_dstack"]], "static_eig() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[76, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_eig"]], "static_eigh_tridiagonal() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[76, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_eigh_tridiagonal"]], "static_eigvals() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[76, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_eigvals"]], "static_embedding() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[76, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_embedding"]], "static_erfc() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[76, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_erfc"]], "static_erfinv() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[76, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_erfinv"]], "static_expand() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_expand"]], "static_eye_like() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[76, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_eye_like"]], "static_fix() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[76, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_fix"]], "static_flatten() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_flatten"]], "static_fliplr() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_fliplr"]], "static_flipud() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_flipud"]], "static_float_power() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[76, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_float_power"]], "static_fmax() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[76, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_fmax"]], "static_fmod() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[76, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_fmod"]], "static_fold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_fold"]], "static_frexp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[76, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_frexp"]], "static_gamma() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[76, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_gamma"]], "static_gradient() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[76, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_gradient"]], "static_group_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[76, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_group_norm"]], "static_hamming_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[76, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_hamming_window"]], "static_hann_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[76, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_hann_window"]], "static_heaviside() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_heaviside"]], "static_higher_order_moment() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[76, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_higher_order_moment"]], "static_histogram() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[76, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_histogram"]], "static_hsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_hsplit"]], "static_hstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_hstack"]], "static_hypot() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[76, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_hypot"]], "static_i0() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_i0"]], "static_idct() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[76, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_idct"]], "static_ifft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[76, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_ifft"]], "static_ifftn() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[76, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_ifftn"]], "static_igamma() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[76, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_igamma"]], "static_initialize_tucker() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[76, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_initialize_tucker"]], "static_instance_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[76, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_instance_norm"]], "static_interpolate() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[76, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_interpolate"]], "static_invert_permutation() (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental static method)": [[76, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental.static_invert_permutation"]], "static_isclose() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[76, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_isclose"]], "static_kaiser_bessel_derived_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[76, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_kaiser_bessel_derived_window"]], "static_kaiser_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[76, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_kaiser_window"]], "static_kron() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[76, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_kron"]], "static_l1_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[76, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_l1_normalize"]], "static_l2_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[76, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_l2_normalize"]], "static_ldexp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[76, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_ldexp"]], "static_lerp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[76, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_lerp"]], "static_lexsort() (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental static method)": [[76, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental.static_lexsort"]], "static_lgamma() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[76, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_lgamma"]], "static_logit() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[76, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_logit"]], "static_logsigmoid() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[76, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_logsigmoid"]], "static_lp_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[76, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_lp_normalize"]], "static_make_svd_non_negative() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[76, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_make_svd_non_negative"]], "static_matricize() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_matricize"]], "static_matrix_exp() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[76, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_matrix_exp"]], "static_max_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[76, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_max_pool1d"]], "static_max_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[76, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_max_pool2d"]], "static_max_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[76, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_max_pool3d"]], "static_max_unpool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[76, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_max_unpool1d"]], "static_median() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[76, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_median"]], "static_mel_weight_matrix() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[76, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_mel_weight_matrix"]], "static_mode_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[76, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_mode_dot"]], "static_modf() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[76, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_modf"]], "static_moveaxis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_moveaxis"]], "static_multi_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[76, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_multi_dot"]], "static_multi_mode_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[76, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_multi_mode_dot"]], "static_nanmean() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[76, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_nanmean"]], "static_nanmedian() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[76, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_nanmedian"]], "static_nanprod() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[76, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_nanprod"]], "static_nansum() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[76, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_nansum"]], "static_nextafter() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[76, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_nextafter"]], "static_optional_get_element() (ivy.data_classes.container.experimental.utility._containerwithutilityexperimental static method)": [[76, "ivy.data_classes.container.experimental.utility._ContainerWithUtilityExperimental.static_optional_get_element"]], "static_pad() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_pad"]], "static_partial_fold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_partial_fold"]], "static_partial_tensor_to_vec() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_partial_tensor_to_vec"]], "static_partial_tucker() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[76, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_partial_tucker"]], "static_partial_unfold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_partial_unfold"]], "static_partial_vec_to_tensor() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_partial_vec_to_tensor"]], "static_poisson() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[76, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_poisson"]], "static_polyval() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[76, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_polyval"]], "static_prelu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[76, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_prelu"]], "static_quantile() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[76, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_quantile"]], "static_relu6() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[76, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_relu6"]], "static_rfft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[76, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_rfft"]], "static_rfftn() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[76, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_rfftn"]], "static_rnn() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[76, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_rnn"]], "static_rot90() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_rot90"]], "static_selu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[76, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_selu"]], "static_signbit() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[76, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_signbit"]], "static_sinc() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[76, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_sinc"]], "static_soft_thresholding() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_soft_thresholding"]], "static_sparsify_tensor() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[76, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_sparsify_tensor"]], "static_stft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[76, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_stft"]], "static_svd_flip() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[76, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_svd_flip"]], "static_take_along_axis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_take_along_axis"]], "static_tensor_train() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[76, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_tensor_train"]], "static_thresholded_relu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[76, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_thresholded_relu"]], "static_top_k() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_top_k"]], "static_tril_indices() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[76, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_tril_indices"]], "static_truncated_svd() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[76, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_truncated_svd"]], "static_tt_matrix_to_tensor() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[76, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_tt_matrix_to_tensor"]], "static_tucker() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[76, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_tucker"]], "static_unfold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_unfold"]], "static_unravel_index() (ivy.data_classes.container.experimental.searching._containerwithsearchingexperimental static method)": [[76, "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental.static_unravel_index"]], "static_unsorted_segment_mean() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[76, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_unsorted_segment_mean"]], "static_unsorted_segment_min() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[76, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_unsorted_segment_min"]], "static_unsorted_segment_sum() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[76, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_unsorted_segment_sum"]], "static_vorbis_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[76, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_vorbis_window"]], "static_vsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_vsplit"]], "static_vstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_vstack"]], "static_xlogy() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[76, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_xlogy"]], "static_zeta() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[76, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_zeta"]], "stft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[76, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.stft"]], "svd_flip() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[76, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.svd_flip"]], "take() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.take"]], "take_along_axis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.take_along_axis"]], "tanhshrink() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[76, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.tanhshrink"]], "tensor_train() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[76, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.tensor_train"]], "threshold() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[76, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.threshold"]], "thresholded_relu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[76, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.thresholded_relu"]], "top_k() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.top_k"]], "tril_indices() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[76, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.tril_indices"]], "trilu() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[76, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.trilu"]], "trim_zeros() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.trim_zeros"]], "truncated_svd() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[76, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.truncated_svd"]], "tt_matrix_to_tensor() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[76, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.tt_matrix_to_tensor"]], "tucker() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[76, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.tucker"]], "unflatten() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.unflatten"]], "unfold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.unfold"]], "unique_consecutive() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.unique_consecutive"]], "unravel_index() (ivy.data_classes.container.experimental.searching._containerwithsearchingexperimental method)": [[76, "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental.unravel_index"]], "unsorted_segment_mean() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[76, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.unsorted_segment_mean"]], "unsorted_segment_min() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[76, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.unsorted_segment_min"]], "unsorted_segment_sum() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[76, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.unsorted_segment_sum"]], "vorbis_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[76, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.vorbis_window"]], "vsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.vsplit"]], "vstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[76, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.vstack"]], "xlogy() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[76, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.xlogy"]], "zeta() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[76, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.zeta"]], "_containerwithgeneral (class in ivy.data_classes.container.general)": [[77, "ivy.data_classes.container.general._ContainerWithGeneral"]], "_abc_impl (ivy.data_classes.container.general._containerwithgeneral attribute)": [[77, "ivy.data_classes.container.general._ContainerWithGeneral._abc_impl"]], "_static_all_equal() (ivy.data_classes.container.general._containerwithgeneral static method)": [[77, "ivy.data_classes.container.general._ContainerWithGeneral._static_all_equal"]], "_static_array_equal() (ivy.data_classes.container.general._containerwithgeneral static method)": [[77, "ivy.data_classes.container.general._ContainerWithGeneral._static_array_equal"]], "_static_assert_supports_inplace() (ivy.data_classes.container.general._containerwithgeneral static method)": [[77, "ivy.data_classes.container.general._ContainerWithGeneral._static_assert_supports_inplace"]], "_static_clip_matrix_norm() (ivy.data_classes.container.general._containerwithgeneral static method)": [[77, "ivy.data_classes.container.general._ContainerWithGeneral._static_clip_matrix_norm"]], "_static_clip_vector_norm() (ivy.data_classes.container.general._containerwithgeneral static method)": [[77, "ivy.data_classes.container.general._ContainerWithGeneral._static_clip_vector_norm"]], "_static_einops_rearrange() (ivy.data_classes.container.general._containerwithgeneral static method)": [[77, "ivy.data_classes.container.general._ContainerWithGeneral._static_einops_rearrange"]], "_static_einops_reduce() (ivy.data_classes.container.general._containerwithgeneral static method)": [[77, "ivy.data_classes.container.general._ContainerWithGeneral._static_einops_reduce"]], "_static_einops_repeat() (ivy.data_classes.container.general._containerwithgeneral static method)": [[77, "ivy.data_classes.container.general._ContainerWithGeneral._static_einops_repeat"]], "_static_exists() (ivy.data_classes.container.general._containerwithgeneral static method)": [[77, "ivy.data_classes.container.general._ContainerWithGeneral._static_exists"]], "_static_fourier_encode() (ivy.data_classes.container.general._containerwithgeneral static method)": [[77, "ivy.data_classes.container.general._ContainerWithGeneral._static_fourier_encode"]], "_static_gather() (ivy.data_classes.container.general._containerwithgeneral static method)": [[77, "ivy.data_classes.container.general._ContainerWithGeneral._static_gather"]], "_static_gather_nd() (ivy.data_classes.container.general._containerwithgeneral static method)": [[77, "ivy.data_classes.container.general._ContainerWithGeneral._static_gather_nd"]], "_static_get_num_dims() (ivy.data_classes.container.general._containerwithgeneral static method)": [[77, "ivy.data_classes.container.general._ContainerWithGeneral._static_get_num_dims"]], "_static_has_nans() (ivy.data_classes.container.general._containerwithgeneral static method)": [[77, "ivy.data_classes.container.general._ContainerWithGeneral._static_has_nans"]], "_static_inplace_decrement() (ivy.data_classes.container.general._containerwithgeneral static method)": [[77, "ivy.data_classes.container.general._ContainerWithGeneral._static_inplace_decrement"]], "_static_inplace_increment() (ivy.data_classes.container.general._containerwithgeneral static method)": [[77, "ivy.data_classes.container.general._ContainerWithGeneral._static_inplace_increment"]], "_static_inplace_update() (ivy.data_classes.container.general._containerwithgeneral static method)": [[77, "ivy.data_classes.container.general._ContainerWithGeneral._static_inplace_update"]], "_static_is_array() (ivy.data_classes.container.general._containerwithgeneral static method)": [[77, "ivy.data_classes.container.general._ContainerWithGeneral._static_is_array"]], "_static_is_ivy_array() (ivy.data_classes.container.general._containerwithgeneral static method)": [[77, "ivy.data_classes.container.general._ContainerWithGeneral._static_is_ivy_array"]], "_static_is_native_array() (ivy.data_classes.container.general._containerwithgeneral static method)": [[77, "ivy.data_classes.container.general._ContainerWithGeneral._static_is_native_array"]], "_static_scatter_flat() (ivy.data_classes.container.general._containerwithgeneral static method)": [[77, "ivy.data_classes.container.general._ContainerWithGeneral._static_scatter_flat"]], "_static_scatter_nd() (ivy.data_classes.container.general._containerwithgeneral static method)": [[77, "ivy.data_classes.container.general._ContainerWithGeneral._static_scatter_nd"]], "_static_size() (ivy.data_classes.container.general._containerwithgeneral static method)": [[77, "ivy.data_classes.container.general._ContainerWithGeneral._static_size"]], "_static_stable_divide() (ivy.data_classes.container.general._containerwithgeneral static method)": [[77, "ivy.data_classes.container.general._ContainerWithGeneral._static_stable_divide"]], "_static_stable_pow() (ivy.data_classes.container.general._containerwithgeneral static method)": [[77, "ivy.data_classes.container.general._ContainerWithGeneral._static_stable_pow"]], "_static_supports_inplace_updates() (ivy.data_classes.container.general._containerwithgeneral static method)": [[77, "ivy.data_classes.container.general._ContainerWithGeneral._static_supports_inplace_updates"]], "_static_to_list() (ivy.data_classes.container.general._containerwithgeneral static method)": [[77, "ivy.data_classes.container.general._ContainerWithGeneral._static_to_list"]], "_static_to_numpy() (ivy.data_classes.container.general._containerwithgeneral static method)": [[77, "ivy.data_classes.container.general._ContainerWithGeneral._static_to_numpy"]], "_static_to_scalar() (ivy.data_classes.container.general._containerwithgeneral static method)": [[77, "ivy.data_classes.container.general._ContainerWithGeneral._static_to_scalar"]], "_static_value_is_nan() (ivy.data_classes.container.general._containerwithgeneral static method)": [[77, "ivy.data_classes.container.general._ContainerWithGeneral._static_value_is_nan"]], "all_equal() (ivy.data_classes.container.general._containerwithgeneral method)": [[77, "ivy.data_classes.container.general._ContainerWithGeneral.all_equal"]], "array_equal() (ivy.data_classes.container.general._containerwithgeneral method)": [[77, "ivy.data_classes.container.general._ContainerWithGeneral.array_equal"]], "assert_supports_inplace() (ivy.data_classes.container.general._containerwithgeneral method)": [[77, "ivy.data_classes.container.general._ContainerWithGeneral.assert_supports_inplace"]], "clip_matrix_norm() (ivy.data_classes.container.general._containerwithgeneral method)": [[77, "ivy.data_classes.container.general._ContainerWithGeneral.clip_matrix_norm"]], "clip_vector_norm() (ivy.data_classes.container.general._containerwithgeneral method)": [[77, "ivy.data_classes.container.general._ContainerWithGeneral.clip_vector_norm"]], "einops_rearrange() (ivy.data_classes.container.general._containerwithgeneral method)": [[77, "ivy.data_classes.container.general._ContainerWithGeneral.einops_rearrange"]], "einops_reduce() (ivy.data_classes.container.general._containerwithgeneral method)": [[77, "ivy.data_classes.container.general._ContainerWithGeneral.einops_reduce"]], "einops_repeat() (ivy.data_classes.container.general._containerwithgeneral method)": [[77, "ivy.data_classes.container.general._ContainerWithGeneral.einops_repeat"]], "exists() (ivy.data_classes.container.general._containerwithgeneral method)": [[77, "ivy.data_classes.container.general._ContainerWithGeneral.exists"]], "fourier_encode() (ivy.data_classes.container.general._containerwithgeneral method)": [[77, "ivy.data_classes.container.general._ContainerWithGeneral.fourier_encode"]], "gather() (ivy.data_classes.container.general._containerwithgeneral method)": [[77, "ivy.data_classes.container.general._ContainerWithGeneral.gather"]], "gather_nd() (ivy.data_classes.container.general._containerwithgeneral method)": [[77, "ivy.data_classes.container.general._ContainerWithGeneral.gather_nd"]], "get_num_dims() (ivy.data_classes.container.general._containerwithgeneral method)": [[77, "ivy.data_classes.container.general._ContainerWithGeneral.get_num_dims"]], "has_nans() (ivy.data_classes.container.general._containerwithgeneral method)": [[77, "ivy.data_classes.container.general._ContainerWithGeneral.has_nans"]], "inplace_decrement() (ivy.data_classes.container.general._containerwithgeneral method)": [[77, "ivy.data_classes.container.general._ContainerWithGeneral.inplace_decrement"]], "inplace_increment() (ivy.data_classes.container.general._containerwithgeneral method)": [[77, "ivy.data_classes.container.general._ContainerWithGeneral.inplace_increment"]], "inplace_update() (ivy.data_classes.container.general._containerwithgeneral method)": [[77, "ivy.data_classes.container.general._ContainerWithGeneral.inplace_update"]], "is_array() (ivy.data_classes.container.general._containerwithgeneral method)": [[77, "ivy.data_classes.container.general._ContainerWithGeneral.is_array"]], "is_ivy_array() (ivy.data_classes.container.general._containerwithgeneral method)": [[77, "ivy.data_classes.container.general._ContainerWithGeneral.is_ivy_array"]], "is_native_array() (ivy.data_classes.container.general._containerwithgeneral method)": [[77, "ivy.data_classes.container.general._ContainerWithGeneral.is_native_array"]], "isin() (ivy.data_classes.container.general._containerwithgeneral method)": [[77, "ivy.data_classes.container.general._ContainerWithGeneral.isin"]], "itemsize() (ivy.data_classes.container.general._containerwithgeneral method)": [[77, "ivy.data_classes.container.general._ContainerWithGeneral.itemsize"]], "ivy.data_classes.container.general": [[77, "module-ivy.data_classes.container.general"]], "scatter_flat() (ivy.data_classes.container.general._containerwithgeneral method)": [[77, "ivy.data_classes.container.general._ContainerWithGeneral.scatter_flat"]], "scatter_nd() (ivy.data_classes.container.general._containerwithgeneral method)": [[77, "ivy.data_classes.container.general._ContainerWithGeneral.scatter_nd"]], "size() (ivy.data_classes.container.general._containerwithgeneral method)": [[77, "ivy.data_classes.container.general._ContainerWithGeneral.size"]], "stable_divide() (ivy.data_classes.container.general._containerwithgeneral method)": [[77, "ivy.data_classes.container.general._ContainerWithGeneral.stable_divide"]], "stable_pow() (ivy.data_classes.container.general._containerwithgeneral method)": [[77, "ivy.data_classes.container.general._ContainerWithGeneral.stable_pow"]], "static_isin() (ivy.data_classes.container.general._containerwithgeneral static method)": [[77, "ivy.data_classes.container.general._ContainerWithGeneral.static_isin"]], "static_itemsize() (ivy.data_classes.container.general._containerwithgeneral static method)": [[77, "ivy.data_classes.container.general._ContainerWithGeneral.static_itemsize"]], "static_strides() (ivy.data_classes.container.general._containerwithgeneral static method)": [[77, "ivy.data_classes.container.general._ContainerWithGeneral.static_strides"]], "strides() (ivy.data_classes.container.general._containerwithgeneral method)": [[77, "ivy.data_classes.container.general._ContainerWithGeneral.strides"]], "supports_inplace_updates() (ivy.data_classes.container.general._containerwithgeneral method)": [[77, "ivy.data_classes.container.general._ContainerWithGeneral.supports_inplace_updates"]], "to_list() (ivy.data_classes.container.general._containerwithgeneral method)": [[77, "ivy.data_classes.container.general._ContainerWithGeneral.to_list"]], "to_numpy() (ivy.data_classes.container.general._containerwithgeneral method)": [[77, "ivy.data_classes.container.general._ContainerWithGeneral.to_numpy"]], "to_scalar() (ivy.data_classes.container.general._containerwithgeneral method)": [[77, "ivy.data_classes.container.general._ContainerWithGeneral.to_scalar"]], "value_is_nan() (ivy.data_classes.container.general._containerwithgeneral method)": [[77, "ivy.data_classes.container.general._ContainerWithGeneral.value_is_nan"]], "_containerwithgradients (class in ivy.data_classes.container.gradients)": [[78, "ivy.data_classes.container.gradients._ContainerWithGradients"]], "_abc_impl (ivy.data_classes.container.gradients._containerwithgradients attribute)": [[78, "ivy.data_classes.container.gradients._ContainerWithGradients._abc_impl"]], "_static_stop_gradient() (ivy.data_classes.container.gradients._containerwithgradients static method)": [[78, "ivy.data_classes.container.gradients._ContainerWithGradients._static_stop_gradient"]], "adam_step() (ivy.data_classes.container.gradients._containerwithgradients method)": [[78, "ivy.data_classes.container.gradients._ContainerWithGradients.adam_step"]], "adam_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[78, "ivy.data_classes.container.gradients._ContainerWithGradients.adam_update"]], "gradient_descent_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[78, "ivy.data_classes.container.gradients._ContainerWithGradients.gradient_descent_update"]], "ivy.data_classes.container.gradients": [[78, "module-ivy.data_classes.container.gradients"]], "lamb_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[78, "ivy.data_classes.container.gradients._ContainerWithGradients.lamb_update"]], "lars_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[78, "ivy.data_classes.container.gradients._ContainerWithGradients.lars_update"]], "optimizer_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[78, "ivy.data_classes.container.gradients._ContainerWithGradients.optimizer_update"]], "stop_gradient() (ivy.data_classes.container.gradients._containerwithgradients method)": [[78, "ivy.data_classes.container.gradients._ContainerWithGradients.stop_gradient"]], "_containerwithimage (class in ivy.data_classes.container.image)": [[79, "ivy.data_classes.container.image._ContainerWithImage"]], "_abc_impl (ivy.data_classes.container.image._containerwithimage attribute)": [[79, "ivy.data_classes.container.image._ContainerWithImage._abc_impl"]], "ivy.data_classes.container.image": [[79, "module-ivy.data_classes.container.image"]], "_containerwithlayers (class in ivy.data_classes.container.layers)": [[80, "ivy.data_classes.container.layers._ContainerWithLayers"]], "_abc_impl (ivy.data_classes.container.layers._containerwithlayers attribute)": [[80, "ivy.data_classes.container.layers._ContainerWithLayers._abc_impl"]], "_static_conv1d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[80, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv1d"]], "_static_conv1d_transpose() (ivy.data_classes.container.layers._containerwithlayers static method)": [[80, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv1d_transpose"]], "_static_conv2d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[80, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv2d"]], "_static_conv2d_transpose() (ivy.data_classes.container.layers._containerwithlayers static method)": [[80, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv2d_transpose"]], "_static_conv3d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[80, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv3d"]], "_static_conv3d_transpose() (ivy.data_classes.container.layers._containerwithlayers static method)": [[80, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv3d_transpose"]], "_static_depthwise_conv2d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[80, "ivy.data_classes.container.layers._ContainerWithLayers._static_depthwise_conv2d"]], "_static_dropout() (ivy.data_classes.container.layers._containerwithlayers static method)": [[80, "ivy.data_classes.container.layers._ContainerWithLayers._static_dropout"]], "_static_dropout1d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[80, "ivy.data_classes.container.layers._ContainerWithLayers._static_dropout1d"]], "_static_dropout2d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[80, "ivy.data_classes.container.layers._ContainerWithLayers._static_dropout2d"]], "_static_dropout3d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[80, "ivy.data_classes.container.layers._ContainerWithLayers._static_dropout3d"]], "_static_linear() (ivy.data_classes.container.layers._containerwithlayers static method)": [[80, "ivy.data_classes.container.layers._ContainerWithLayers._static_linear"]], "_static_lstm_update() (ivy.data_classes.container.layers._containerwithlayers static method)": [[80, "ivy.data_classes.container.layers._ContainerWithLayers._static_lstm_update"]], "_static_multi_head_attention() (ivy.data_classes.container.layers._containerwithlayers static method)": [[80, "ivy.data_classes.container.layers._ContainerWithLayers._static_multi_head_attention"]], "_static_reduce_window() (ivy.data_classes.container.layers._containerwithlayers static method)": [[80, "ivy.data_classes.container.layers._ContainerWithLayers._static_reduce_window"]], "_static_scaled_dot_product_attention() (ivy.data_classes.container.layers._containerwithlayers static method)": [[80, "ivy.data_classes.container.layers._ContainerWithLayers._static_scaled_dot_product_attention"]], "conv1d() (ivy.data_classes.container.layers._containerwithlayers method)": [[80, "ivy.data_classes.container.layers._ContainerWithLayers.conv1d"]], "conv1d_transpose() (ivy.data_classes.container.layers._containerwithlayers method)": [[80, "ivy.data_classes.container.layers._ContainerWithLayers.conv1d_transpose"]], "conv2d() (ivy.data_classes.container.layers._containerwithlayers method)": [[80, "ivy.data_classes.container.layers._ContainerWithLayers.conv2d"]], "conv2d_transpose() (ivy.data_classes.container.layers._containerwithlayers method)": [[80, "ivy.data_classes.container.layers._ContainerWithLayers.conv2d_transpose"]], "conv3d() (ivy.data_classes.container.layers._containerwithlayers method)": [[80, "ivy.data_classes.container.layers._ContainerWithLayers.conv3d"]], "conv3d_transpose() (ivy.data_classes.container.layers._containerwithlayers method)": [[80, "ivy.data_classes.container.layers._ContainerWithLayers.conv3d_transpose"]], "depthwise_conv2d() (ivy.data_classes.container.layers._containerwithlayers method)": [[80, "ivy.data_classes.container.layers._ContainerWithLayers.depthwise_conv2d"]], "dropout() (ivy.data_classes.container.layers._containerwithlayers method)": [[80, "ivy.data_classes.container.layers._ContainerWithLayers.dropout"]], "dropout1d() (ivy.data_classes.container.layers._containerwithlayers method)": [[80, "ivy.data_classes.container.layers._ContainerWithLayers.dropout1d"]], "dropout2d() (ivy.data_classes.container.layers._containerwithlayers method)": [[80, "ivy.data_classes.container.layers._ContainerWithLayers.dropout2d"]], "dropout3d() (ivy.data_classes.container.layers._containerwithlayers method)": [[80, "ivy.data_classes.container.layers._ContainerWithLayers.dropout3d"]], "ivy.data_classes.container.layers": [[80, "module-ivy.data_classes.container.layers"]], "linear() (ivy.data_classes.container.layers._containerwithlayers method)": [[80, "ivy.data_classes.container.layers._ContainerWithLayers.linear"]], "lstm_update() (ivy.data_classes.container.layers._containerwithlayers method)": [[80, "ivy.data_classes.container.layers._ContainerWithLayers.lstm_update"]], "multi_head_attention() (ivy.data_classes.container.layers._containerwithlayers method)": [[80, "ivy.data_classes.container.layers._ContainerWithLayers.multi_head_attention"]], "reduce_window() (ivy.data_classes.container.layers._containerwithlayers method)": [[80, "ivy.data_classes.container.layers._ContainerWithLayers.reduce_window"]], "scaled_dot_product_attention() (ivy.data_classes.container.layers._containerwithlayers method)": [[80, "ivy.data_classes.container.layers._ContainerWithLayers.scaled_dot_product_attention"]], "_containerwithlinearalgebra (class in ivy.data_classes.container.linear_algebra)": [[81, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra"]], "_abc_impl (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra attribute)": [[81, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._abc_impl"]], "_static_cholesky() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[81, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_cholesky"]], "_static_cross() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[81, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_cross"]], "_static_det() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[81, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_det"]], "_static_diag() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[81, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_diag"]], "_static_diagonal() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[81, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_diagonal"]], "_static_eigh() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[81, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_eigh"]], "_static_eigvalsh() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[81, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_eigvalsh"]], "_static_inner() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[81, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_inner"]], "_static_inv() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[81, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_inv"]], "_static_matmul() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[81, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matmul"]], "_static_matrix_norm() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[81, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matrix_norm"]], "_static_matrix_power() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[81, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matrix_power"]], "_static_matrix_rank() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[81, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matrix_rank"]], "_static_matrix_transpose() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[81, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matrix_transpose"]], "_static_outer() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[81, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_outer"]], "_static_pinv() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[81, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_pinv"]], "_static_qr() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[81, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_qr"]], "_static_slogdet() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[81, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_slogdet"]], "_static_solve() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[81, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_solve"]], "_static_svd() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[81, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_svd"]], "_static_svdvals() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[81, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_svdvals"]], "_static_tensordot() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[81, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_tensordot"]], "_static_tensorsolve() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[81, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_tensorsolve"]], "_static_trace() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[81, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_trace"]], "_static_vander() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[81, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_vander"]], "_static_vecdot() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[81, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_vecdot"]], "_static_vector_norm() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[81, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_vector_norm"]], "_static_vector_to_skew_symmetric_matrix() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[81, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_vector_to_skew_symmetric_matrix"]], "cholesky() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[81, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.cholesky"]], "cross() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[81, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.cross"]], "det() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[81, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.det"]], "diag() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[81, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.diag"]], "diagonal() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[81, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.diagonal"]], "eigh() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[81, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.eigh"]], "eigvalsh() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[81, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.eigvalsh"]], "general_inner_product() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[81, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.general_inner_product"]], "inner() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[81, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.inner"]], "inv() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[81, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.inv"]], "ivy.data_classes.container.linear_algebra": [[81, "module-ivy.data_classes.container.linear_algebra"]], "matmul() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[81, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matmul"]], "matrix_norm() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[81, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matrix_norm"]], "matrix_power() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[81, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matrix_power"]], "matrix_rank() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[81, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matrix_rank"]], "matrix_transpose() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[81, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matrix_transpose"]], "outer() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[81, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.outer"]], "pinv() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[81, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.pinv"]], "qr() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[81, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.qr"]], "slogdet() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[81, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.slogdet"]], "solve() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[81, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.solve"]], "static_general_inner_product() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[81, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.static_general_inner_product"]], "svd() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[81, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.svd"]], "svdvals() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[81, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.svdvals"]], "tensordot() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[81, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.tensordot"]], "tensorsolve() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[81, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.tensorsolve"]], "trace() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[81, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.trace"]], "vander() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[81, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.vander"]], "vecdot() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[81, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.vecdot"]], "vector_norm() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[81, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.vector_norm"]], "vector_to_skew_symmetric_matrix() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[81, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.vector_to_skew_symmetric_matrix"]], "_containerwithlosses (class in ivy.data_classes.container.losses)": [[82, "ivy.data_classes.container.losses._ContainerWithLosses"]], "_abc_impl (ivy.data_classes.container.losses._containerwithlosses attribute)": [[82, "ivy.data_classes.container.losses._ContainerWithLosses._abc_impl"]], "_static_binary_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses static method)": [[82, "ivy.data_classes.container.losses._ContainerWithLosses._static_binary_cross_entropy"]], "_static_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses static method)": [[82, "ivy.data_classes.container.losses._ContainerWithLosses._static_cross_entropy"]], "_static_sparse_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses static method)": [[82, "ivy.data_classes.container.losses._ContainerWithLosses._static_sparse_cross_entropy"]], "binary_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses method)": [[82, "ivy.data_classes.container.losses._ContainerWithLosses.binary_cross_entropy"]], "cross_entropy() (ivy.data_classes.container.losses._containerwithlosses method)": [[82, "ivy.data_classes.container.losses._ContainerWithLosses.cross_entropy"]], "ivy.data_classes.container.losses": [[82, "module-ivy.data_classes.container.losses"]], "sparse_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses method)": [[82, "ivy.data_classes.container.losses._ContainerWithLosses.sparse_cross_entropy"]], "_containerwithmanipulation (class in ivy.data_classes.container.manipulation)": [[83, "ivy.data_classes.container.manipulation._ContainerWithManipulation"]], "_abc_impl (ivy.data_classes.container.manipulation._containerwithmanipulation attribute)": [[83, "ivy.data_classes.container.manipulation._ContainerWithManipulation._abc_impl"]], "_static_clip() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[83, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_clip"]], "_static_concat() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[83, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_concat"]], "_static_constant_pad() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[83, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_constant_pad"]], "_static_expand_dims() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[83, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_expand_dims"]], "_static_flip() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[83, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_flip"]], "_static_permute_dims() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[83, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_permute_dims"]], "_static_repeat() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[83, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_repeat"]], "_static_reshape() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[83, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_reshape"]], "_static_roll() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[83, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_roll"]], "_static_split() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[83, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_split"]], "_static_squeeze() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[83, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_squeeze"]], "_static_stack() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[83, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_stack"]], "_static_swapaxes() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[83, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_swapaxes"]], "_static_tile() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[83, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_tile"]], "_static_unstack() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[83, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_unstack"]], "_static_zero_pad() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[83, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_zero_pad"]], "clip() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[83, "ivy.data_classes.container.manipulation._ContainerWithManipulation.clip"]], "concat() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[83, "ivy.data_classes.container.manipulation._ContainerWithManipulation.concat"]], "constant_pad() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[83, "ivy.data_classes.container.manipulation._ContainerWithManipulation.constant_pad"]], "expand_dims() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[83, "ivy.data_classes.container.manipulation._ContainerWithManipulation.expand_dims"]], "flip() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[83, "ivy.data_classes.container.manipulation._ContainerWithManipulation.flip"]], "ivy.data_classes.container.manipulation": [[83, "module-ivy.data_classes.container.manipulation"]], "permute_dims() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[83, "ivy.data_classes.container.manipulation._ContainerWithManipulation.permute_dims"]], "repeat() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[83, "ivy.data_classes.container.manipulation._ContainerWithManipulation.repeat"]], "reshape() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[83, "ivy.data_classes.container.manipulation._ContainerWithManipulation.reshape"]], "roll() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[83, "ivy.data_classes.container.manipulation._ContainerWithManipulation.roll"]], "split() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[83, "ivy.data_classes.container.manipulation._ContainerWithManipulation.split"]], "squeeze() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[83, "ivy.data_classes.container.manipulation._ContainerWithManipulation.squeeze"]], "stack() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[83, "ivy.data_classes.container.manipulation._ContainerWithManipulation.stack"]], "swapaxes() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[83, "ivy.data_classes.container.manipulation._ContainerWithManipulation.swapaxes"]], "tile() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[83, "ivy.data_classes.container.manipulation._ContainerWithManipulation.tile"]], "unstack() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[83, "ivy.data_classes.container.manipulation._ContainerWithManipulation.unstack"]], "zero_pad() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[83, "ivy.data_classes.container.manipulation._ContainerWithManipulation.zero_pad"]], "_containerwithnorms (class in ivy.data_classes.container.norms)": [[84, "ivy.data_classes.container.norms._ContainerWithNorms"]], "_abc_impl (ivy.data_classes.container.norms._containerwithnorms attribute)": [[84, "ivy.data_classes.container.norms._ContainerWithNorms._abc_impl"]], "ivy.data_classes.container.norms": [[84, "module-ivy.data_classes.container.norms"]], "layer_norm() (ivy.data_classes.container.norms._containerwithnorms method)": [[84, "ivy.data_classes.container.norms._ContainerWithNorms.layer_norm"]], "_containerwithrandom (class in ivy.data_classes.container.random)": [[85, "ivy.data_classes.container.random._ContainerWithRandom"]], "_abc_impl (ivy.data_classes.container.random._containerwithrandom attribute)": [[85, "ivy.data_classes.container.random._ContainerWithRandom._abc_impl"]], "_static_multinomial() (ivy.data_classes.container.random._containerwithrandom static method)": [[85, "ivy.data_classes.container.random._ContainerWithRandom._static_multinomial"]], "_static_randint() (ivy.data_classes.container.random._containerwithrandom static method)": [[85, "ivy.data_classes.container.random._ContainerWithRandom._static_randint"]], "_static_random_normal() (ivy.data_classes.container.random._containerwithrandom static method)": [[85, "ivy.data_classes.container.random._ContainerWithRandom._static_random_normal"]], "_static_random_uniform() (ivy.data_classes.container.random._containerwithrandom static method)": [[85, "ivy.data_classes.container.random._ContainerWithRandom._static_random_uniform"]], "_static_shuffle() (ivy.data_classes.container.random._containerwithrandom static method)": [[85, "ivy.data_classes.container.random._ContainerWithRandom._static_shuffle"]], "ivy.data_classes.container.random": [[85, "module-ivy.data_classes.container.random"]], "multinomial() (ivy.data_classes.container.random._containerwithrandom method)": [[85, "ivy.data_classes.container.random._ContainerWithRandom.multinomial"]], "randint() (ivy.data_classes.container.random._containerwithrandom method)": [[85, "ivy.data_classes.container.random._ContainerWithRandom.randint"]], "random_normal() (ivy.data_classes.container.random._containerwithrandom method)": [[85, "ivy.data_classes.container.random._ContainerWithRandom.random_normal"]], "random_uniform() (ivy.data_classes.container.random._containerwithrandom method)": [[85, "ivy.data_classes.container.random._ContainerWithRandom.random_uniform"]], "shuffle() (ivy.data_classes.container.random._containerwithrandom method)": [[85, "ivy.data_classes.container.random._ContainerWithRandom.shuffle"]], "_containerwithsearching (class in ivy.data_classes.container.searching)": [[86, "ivy.data_classes.container.searching._ContainerWithSearching"]], "_abc_impl (ivy.data_classes.container.searching._containerwithsearching attribute)": [[86, "ivy.data_classes.container.searching._ContainerWithSearching._abc_impl"]], "_static_argmax() (ivy.data_classes.container.searching._containerwithsearching static method)": [[86, "ivy.data_classes.container.searching._ContainerWithSearching._static_argmax"]], "_static_argmin() (ivy.data_classes.container.searching._containerwithsearching static method)": [[86, "ivy.data_classes.container.searching._ContainerWithSearching._static_argmin"]], "_static_argwhere() (ivy.data_classes.container.searching._containerwithsearching static method)": [[86, "ivy.data_classes.container.searching._ContainerWithSearching._static_argwhere"]], "_static_nonzero() (ivy.data_classes.container.searching._containerwithsearching static method)": [[86, "ivy.data_classes.container.searching._ContainerWithSearching._static_nonzero"]], "_static_where() (ivy.data_classes.container.searching._containerwithsearching static method)": [[86, "ivy.data_classes.container.searching._ContainerWithSearching._static_where"]], "argmax() (ivy.data_classes.container.searching._containerwithsearching method)": [[86, "ivy.data_classes.container.searching._ContainerWithSearching.argmax"]], "argmin() (ivy.data_classes.container.searching._containerwithsearching method)": [[86, "ivy.data_classes.container.searching._ContainerWithSearching.argmin"]], "argwhere() (ivy.data_classes.container.searching._containerwithsearching method)": [[86, "ivy.data_classes.container.searching._ContainerWithSearching.argwhere"]], "ivy.data_classes.container.searching": [[86, "module-ivy.data_classes.container.searching"]], "nonzero() (ivy.data_classes.container.searching._containerwithsearching method)": [[86, "ivy.data_classes.container.searching._ContainerWithSearching.nonzero"]], "where() (ivy.data_classes.container.searching._containerwithsearching method)": [[86, "ivy.data_classes.container.searching._ContainerWithSearching.where"]], "_containerwithset (class in ivy.data_classes.container.set)": [[87, "ivy.data_classes.container.set._ContainerWithSet"]], "_abc_impl (ivy.data_classes.container.set._containerwithset attribute)": [[87, "ivy.data_classes.container.set._ContainerWithSet._abc_impl"]], "_static_unique_all() (ivy.data_classes.container.set._containerwithset static method)": [[87, "ivy.data_classes.container.set._ContainerWithSet._static_unique_all"]], "_static_unique_counts() (ivy.data_classes.container.set._containerwithset static method)": [[87, "ivy.data_classes.container.set._ContainerWithSet._static_unique_counts"]], "_static_unique_inverse() (ivy.data_classes.container.set._containerwithset static method)": [[87, "ivy.data_classes.container.set._ContainerWithSet._static_unique_inverse"]], "_static_unique_values() (ivy.data_classes.container.set._containerwithset static method)": [[87, "ivy.data_classes.container.set._ContainerWithSet._static_unique_values"]], "ivy.data_classes.container.set": [[87, "module-ivy.data_classes.container.set"]], "unique_all() (ivy.data_classes.container.set._containerwithset method)": [[87, "ivy.data_classes.container.set._ContainerWithSet.unique_all"]], "unique_counts() (ivy.data_classes.container.set._containerwithset method)": [[87, "ivy.data_classes.container.set._ContainerWithSet.unique_counts"]], "unique_inverse() (ivy.data_classes.container.set._containerwithset method)": [[87, "ivy.data_classes.container.set._ContainerWithSet.unique_inverse"]], "unique_values() (ivy.data_classes.container.set._containerwithset method)": [[87, "ivy.data_classes.container.set._ContainerWithSet.unique_values"]], "_containerwithsorting (class in ivy.data_classes.container.sorting)": [[88, "ivy.data_classes.container.sorting._ContainerWithSorting"]], "_abc_impl (ivy.data_classes.container.sorting._containerwithsorting attribute)": [[88, "ivy.data_classes.container.sorting._ContainerWithSorting._abc_impl"]], "_static_argsort() (ivy.data_classes.container.sorting._containerwithsorting static method)": [[88, "ivy.data_classes.container.sorting._ContainerWithSorting._static_argsort"]], "_static_searchsorted() (ivy.data_classes.container.sorting._containerwithsorting static method)": [[88, "ivy.data_classes.container.sorting._ContainerWithSorting._static_searchsorted"]], "_static_sort() (ivy.data_classes.container.sorting._containerwithsorting static method)": [[88, "ivy.data_classes.container.sorting._ContainerWithSorting._static_sort"]], "argsort() (ivy.data_classes.container.sorting._containerwithsorting method)": [[88, "ivy.data_classes.container.sorting._ContainerWithSorting.argsort"]], "ivy.data_classes.container.sorting": [[88, "module-ivy.data_classes.container.sorting"]], "msort() (ivy.data_classes.container.sorting._containerwithsorting method)": [[88, "ivy.data_classes.container.sorting._ContainerWithSorting.msort"]], "searchsorted() (ivy.data_classes.container.sorting._containerwithsorting method)": [[88, "ivy.data_classes.container.sorting._ContainerWithSorting.searchsorted"]], "sort() (ivy.data_classes.container.sorting._containerwithsorting method)": [[88, "ivy.data_classes.container.sorting._ContainerWithSorting.sort"]], "static_msort() (ivy.data_classes.container.sorting._containerwithsorting static method)": [[88, "ivy.data_classes.container.sorting._ContainerWithSorting.static_msort"]], "_containerwithstatistical (class in ivy.data_classes.container.statistical)": [[89, "ivy.data_classes.container.statistical._ContainerWithStatistical"]], "_abc_impl (ivy.data_classes.container.statistical._containerwithstatistical attribute)": [[89, "ivy.data_classes.container.statistical._ContainerWithStatistical._abc_impl"]], "_static_cumprod() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[89, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_cumprod"]], "_static_cumsum() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[89, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_cumsum"]], "_static_min() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[89, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_min"]], "_static_prod() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[89, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_prod"]], "_static_sum() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[89, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_sum"]], "_static_var() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[89, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_var"]], "cumprod() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[89, "ivy.data_classes.container.statistical._ContainerWithStatistical.cumprod"]], "cumsum() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[89, "ivy.data_classes.container.statistical._ContainerWithStatistical.cumsum"]], "einsum() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[89, "ivy.data_classes.container.statistical._ContainerWithStatistical.einsum"]], "ivy.data_classes.container.statistical": [[89, "module-ivy.data_classes.container.statistical"]], "max() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[89, "ivy.data_classes.container.statistical._ContainerWithStatistical.max"]], "mean() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[89, "ivy.data_classes.container.statistical._ContainerWithStatistical.mean"]], "min() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[89, "ivy.data_classes.container.statistical._ContainerWithStatistical.min"]], "prod() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[89, "ivy.data_classes.container.statistical._ContainerWithStatistical.prod"]], "std() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[89, "ivy.data_classes.container.statistical._ContainerWithStatistical.std"]], "sum() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[89, "ivy.data_classes.container.statistical._ContainerWithStatistical.sum"]], "var() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[89, "ivy.data_classes.container.statistical._ContainerWithStatistical.var"]], "_containerwithutility (class in ivy.data_classes.container.utility)": [[90, "ivy.data_classes.container.utility._ContainerWithUtility"]], "_abc_impl (ivy.data_classes.container.utility._containerwithutility attribute)": [[90, "ivy.data_classes.container.utility._ContainerWithUtility._abc_impl"]], "_static_all() (ivy.data_classes.container.utility._containerwithutility static method)": [[90, "ivy.data_classes.container.utility._ContainerWithUtility._static_all"]], "_static_any() (ivy.data_classes.container.utility._containerwithutility static method)": [[90, "ivy.data_classes.container.utility._ContainerWithUtility._static_any"]], "all() (ivy.data_classes.container.utility._containerwithutility method)": [[90, "ivy.data_classes.container.utility._ContainerWithUtility.all"]], "any() (ivy.data_classes.container.utility._containerwithutility method)": [[90, "ivy.data_classes.container.utility._ContainerWithUtility.any"]], "ivy.data_classes.container.utility": [[90, "module-ivy.data_classes.container.utility"]], "_wrap_function() (in module ivy.data_classes.container.wrapping)": [[91, "ivy.data_classes.container.wrapping._wrap_function"]], "add_ivy_container_instance_methods() (in module ivy.data_classes.container.wrapping)": [[91, "ivy.data_classes.container.wrapping.add_ivy_container_instance_methods"]], "ivy.data_classes.container.wrapping": [[91, "module-ivy.data_classes.container.wrapping"]], "factorizedtensor (class in ivy.data_classes.factorized_tensor.base)": [[92, "ivy.data_classes.factorized_tensor.base.FactorizedTensor"]], "__init__() (ivy.data_classes.factorized_tensor.base.factorizedtensor method)": [[92, "ivy.data_classes.factorized_tensor.base.FactorizedTensor.__init__"]], "_abc_impl (ivy.data_classes.factorized_tensor.base.factorizedtensor attribute)": [[92, "ivy.data_classes.factorized_tensor.base.FactorizedTensor._abc_impl"]], "ivy.data_classes.factorized_tensor.base": [[92, "module-ivy.data_classes.factorized_tensor.base"]], "mode_dot() (ivy.data_classes.factorized_tensor.base.factorizedtensor method)": [[92, "ivy.data_classes.factorized_tensor.base.FactorizedTensor.mode_dot"]], "norm() (ivy.data_classes.factorized_tensor.base.factorizedtensor method)": [[92, "ivy.data_classes.factorized_tensor.base.FactorizedTensor.norm"]], "to_tensor() (ivy.data_classes.factorized_tensor.base.factorizedtensor method)": [[92, "ivy.data_classes.factorized_tensor.base.FactorizedTensor.to_tensor"]], "to_unfolded() (ivy.data_classes.factorized_tensor.base.factorizedtensor method)": [[92, "ivy.data_classes.factorized_tensor.base.FactorizedTensor.to_unfolded"]], "to_vec() (ivy.data_classes.factorized_tensor.base.factorizedtensor method)": [[92, "ivy.data_classes.factorized_tensor.base.FactorizedTensor.to_vec"]], "cptensor (class in ivy.data_classes.factorized_tensor.cp_tensor)": [[93, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor"]], "__init__() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[93, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.__init__"]], "_abc_impl (ivy.data_classes.factorized_tensor.cp_tensor.cptensor attribute)": [[93, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor._abc_impl"]], "cp_copy() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[93, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_copy"]], "cp_flip_sign() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[93, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_flip_sign"]], "cp_lstsq_grad() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[93, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_lstsq_grad"]], "cp_mode_dot() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[93, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_mode_dot"]], "cp_n_param() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[93, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_n_param"]], "cp_norm() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[93, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_norm"]], "cp_normalize() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[93, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_normalize"]], "cp_to_tensor() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[93, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_to_tensor"]], "cp_to_unfolded() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[93, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_to_unfolded"]], "cp_to_vec() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[93, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_to_vec"]], "ivy.data_classes.factorized_tensor.cp_tensor": [[93, "module-ivy.data_classes.factorized_tensor.cp_tensor"]], "mode_dot() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[93, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.mode_dot"]], "n_param (ivy.data_classes.factorized_tensor.cp_tensor.cptensor property)": [[93, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.n_param"]], "norm() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[93, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.norm"]], "normalize() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[93, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.normalize"]], "to_tensor() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[93, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.to_tensor"]], "to_unfolded() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[93, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.to_unfolded"]], "to_vec() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[93, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.to_vec"]], "unfolding_dot_khatri_rao() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[93, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.unfolding_dot_khatri_rao"]], "validate_cp_rank() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[93, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.validate_cp_rank"]], "validate_cp_tensor() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[93, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.validate_cp_tensor"]], "parafac2tensor (class in ivy.data_classes.factorized_tensor.parafac2_tensor)": [[94, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor"]], "__init__() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor method)": [[94, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.__init__"]], "_abc_impl (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor attribute)": [[94, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor._abc_impl"]], "apply_parafac2_projections() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor static method)": [[94, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.apply_parafac2_projections"]], "from_cptensor() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor class method)": [[94, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.from_CPTensor"]], "ivy.data_classes.factorized_tensor.parafac2_tensor": [[94, "module-ivy.data_classes.factorized_tensor.parafac2_tensor"]], "n_param (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor property)": [[94, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.n_param"]], "parafac2_normalise() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor static method)": [[94, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.parafac2_normalise"]], "parafac2_to_slice() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor static method)": [[94, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.parafac2_to_slice"]], "parafac2_to_slices() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor static method)": [[94, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.parafac2_to_slices"]], "parafac2_to_tensor() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor static method)": [[94, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.parafac2_to_tensor"]], "parafac2_to_unfolded() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor static method)": [[94, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.parafac2_to_unfolded"]], "parafac2_to_vec() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor static method)": [[94, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.parafac2_to_vec"]], "to_tensor() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor method)": [[94, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.to_tensor"]], "to_unfolded() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor method)": [[94, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.to_unfolded"]], "to_vec() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor method)": [[94, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.to_vec"]], "validate_parafac2_tensor() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor static method)": [[94, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.validate_parafac2_tensor"]], "trtensor (class in ivy.data_classes.factorized_tensor.tr_tensor)": [[95, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor"]], "__init__() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor method)": [[95, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.__init__"]], "_abc_impl (ivy.data_classes.factorized_tensor.tr_tensor.trtensor attribute)": [[95, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor._abc_impl"]], "ivy.data_classes.factorized_tensor.tr_tensor": [[95, "module-ivy.data_classes.factorized_tensor.tr_tensor"]], "n_param (ivy.data_classes.factorized_tensor.tr_tensor.trtensor property)": [[95, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.n_param"]], "to_tensor() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor method)": [[95, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.to_tensor"]], "to_unfolded() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor method)": [[95, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.to_unfolded"]], "to_vec() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor method)": [[95, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.to_vec"]], "tr_n_param() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor static method)": [[95, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.tr_n_param"]], "tr_to_tensor() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor static method)": [[95, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.tr_to_tensor"]], "tr_to_unfolded() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor static method)": [[95, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.tr_to_unfolded"]], "tr_to_vec() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor static method)": [[95, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.tr_to_vec"]], "validate_tr_rank() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor static method)": [[95, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.validate_tr_rank"]], "validate_tr_tensor() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor static method)": [[95, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.validate_tr_tensor"]], "tttensor (class in ivy.data_classes.factorized_tensor.tt_tensor)": [[96, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor"]], "__init__() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor method)": [[96, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.__init__"]], "_abc_impl (ivy.data_classes.factorized_tensor.tt_tensor.tttensor attribute)": [[96, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor._abc_impl"]], "_tt_n_param() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor static method)": [[96, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor._tt_n_param"]], "index_update() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor static method)": [[96, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.index_update"]], "ivy.data_classes.factorized_tensor.tt_tensor": [[96, "module-ivy.data_classes.factorized_tensor.tt_tensor"]], "n_param (ivy.data_classes.factorized_tensor.tt_tensor.tttensor property)": [[96, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.n_param"]], "pad_tt_rank() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor static method)": [[96, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.pad_tt_rank"]], "to_tensor() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor method)": [[96, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.to_tensor"]], "to_unfolding() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor method)": [[96, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.to_unfolding"]], "to_vec() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor method)": [[96, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.to_vec"]], "tt_to_tensor() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor static method)": [[96, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.tt_to_tensor"]], "tt_to_unfolded() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor static method)": [[96, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.tt_to_unfolded"]], "tt_to_vec() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor static method)": [[96, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.tt_to_vec"]], "validate_tt_rank() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor static method)": [[96, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.validate_tt_rank"]], "validate_tt_tensor() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor static method)": [[96, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.validate_tt_tensor"]], "tuckertensor (class in ivy.data_classes.factorized_tensor.tucker_tensor)": [[97, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor"]], "__init__() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor method)": [[97, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.__init__"]], "_abc_impl (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor attribute)": [[97, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor._abc_impl"]], "_bisection_root_finder() (in module ivy.data_classes.factorized_tensor.tucker_tensor)": [[97, "ivy.data_classes.factorized_tensor.tucker_tensor._bisection_root_finder"]], "ivy.data_classes.factorized_tensor.tucker_tensor": [[97, "module-ivy.data_classes.factorized_tensor.tucker_tensor"]], "mode_dot() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor method)": [[97, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.mode_dot"]], "n_param (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor property)": [[97, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.n_param"]], "to_tensor() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor method)": [[97, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.to_tensor"]], "to_unfolded() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor method)": [[97, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.to_unfolded"]], "to_vec() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor method)": [[97, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.to_vec"]], "tucker_copy() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor method)": [[97, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_copy"]], "tucker_mode_dot() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[97, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_mode_dot"]], "tucker_n_param() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[97, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_n_param"]], "tucker_normalize() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[97, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_normalize"]], "tucker_to_tensor() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[97, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_to_tensor"]], "tucker_to_unfolded() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[97, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_to_unfolded"]], "tucker_to_vec() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[97, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_to_vec"]], "validate_tucker_rank() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[97, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.validate_tucker_rank"]], "validate_tucker_tensor() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[97, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.validate_tucker_tensor"]], "array (class in ivy.data_classes.array.array)": [[98, "ivy.data_classes.array.array.Array"]], "t (ivy.data_classes.array.array.array property)": [[98, "ivy.data_classes.array.array.Array.T"]], "__abs__() (ivy.data_classes.array.array.array method)": [[98, "ivy.data_classes.array.array.Array.__abs__"]], "__add__() (ivy.data_classes.array.array.array method)": [[98, "ivy.data_classes.array.array.Array.__add__"]], "__eq__() (ivy.data_classes.array.array.array method)": [[98, "ivy.data_classes.array.array.Array.__eq__"]], "__ge__() (ivy.data_classes.array.array.array method)": [[98, "ivy.data_classes.array.array.Array.__ge__"]], "__gt__() (ivy.data_classes.array.array.array method)": [[98, "ivy.data_classes.array.array.Array.__gt__"]], "__init__() (ivy.data_classes.array.array.array method)": [[98, "ivy.data_classes.array.array.Array.__init__"]], "__le__() (ivy.data_classes.array.array.array method)": [[98, "ivy.data_classes.array.array.Array.__le__"]], "__lt__() (ivy.data_classes.array.array.array method)": [[98, "ivy.data_classes.array.array.Array.__lt__"]], "__ne__() (ivy.data_classes.array.array.array method)": [[98, "ivy.data_classes.array.array.Array.__ne__"]], "__pow__() (ivy.data_classes.array.array.array method)": [[98, "ivy.data_classes.array.array.Array.__pow__"]], "__radd__() (ivy.data_classes.array.array.array method)": [[98, "ivy.data_classes.array.array.Array.__radd__"]], "__rrshift__() (ivy.data_classes.array.array.array method)": [[98, "ivy.data_classes.array.array.Array.__rrshift__"]], "__rshift__() (ivy.data_classes.array.array.array method)": [[98, "ivy.data_classes.array.array.Array.__rshift__"]], "__rsub__() (ivy.data_classes.array.array.array method)": [[98, "ivy.data_classes.array.array.Array.__rsub__"]], "__sub__() (ivy.data_classes.array.array.array method)": [[98, "ivy.data_classes.array.array.Array.__sub__"]], "__truediv__() (ivy.data_classes.array.array.array method)": [[98, "ivy.data_classes.array.array.Array.__truediv__"]], "__xor__() (ivy.data_classes.array.array.array method)": [[98, "ivy.data_classes.array.array.Array.__xor__"]], "backend (ivy.data_classes.array.array.array property)": [[98, "ivy.data_classes.array.array.Array.backend"]], "base (ivy.data_classes.array.array.array property)": [[98, "ivy.data_classes.array.array.Array.base"]], "data (ivy.data_classes.array.array.array property)": [[98, "ivy.data_classes.array.array.Array.data"]], "device (ivy.data_classes.array.array.array property)": [[98, "ivy.data_classes.array.array.Array.device"]], "dtype (ivy.data_classes.array.array.array property)": [[98, "ivy.data_classes.array.array.Array.dtype"]], "dynamic_backend (ivy.data_classes.array.array.array property)": [[98, "ivy.data_classes.array.array.Array.dynamic_backend"]], "imag (ivy.data_classes.array.array.array property)": [[98, "ivy.data_classes.array.array.Array.imag"]], "itemsize (ivy.data_classes.array.array.array property)": [[98, "ivy.data_classes.array.array.Array.itemsize"]], "ivy.data_classes.array.array": [[98, "module-ivy.data_classes.array.array"]], "mt (ivy.data_classes.array.array.array property)": [[98, "ivy.data_classes.array.array.Array.mT"]], "ndim (ivy.data_classes.array.array.array property)": [[98, "ivy.data_classes.array.array.Array.ndim"]], "real (ivy.data_classes.array.array.array property)": [[98, "ivy.data_classes.array.array.Array.real"]], "shape (ivy.data_classes.array.array.array property)": [[98, "ivy.data_classes.array.array.Array.shape"]], "size (ivy.data_classes.array.array.array property)": [[98, "ivy.data_classes.array.array.Array.size"]], "strides (ivy.data_classes.array.array.array property)": [[98, "ivy.data_classes.array.array.Array.strides"]], "container (class in ivy.data_classes.container.container)": [[99, "ivy.data_classes.container.container.Container"]], "__abs__() (ivy.data_classes.container.container.container method)": [[99, "ivy.data_classes.container.container.Container.__abs__"]], "__add__() (ivy.data_classes.container.container.container method)": [[99, "ivy.data_classes.container.container.Container.__add__"]], "__eq__() (ivy.data_classes.container.container.container method)": [[99, "ivy.data_classes.container.container.Container.__eq__"]], "__ge__() (ivy.data_classes.container.container.container method)": [[99, "ivy.data_classes.container.container.Container.__ge__"]], "__gt__() (ivy.data_classes.container.container.container method)": [[99, "ivy.data_classes.container.container.Container.__gt__"]], "__init__() (ivy.data_classes.container.container.container method)": [[99, "ivy.data_classes.container.container.Container.__init__"]], "__le__() (ivy.data_classes.container.container.container method)": [[99, "ivy.data_classes.container.container.Container.__le__"]], "__lt__() (ivy.data_classes.container.container.container method)": [[99, "ivy.data_classes.container.container.Container.__lt__"]], "__ne__() (ivy.data_classes.container.container.container method)": [[99, "ivy.data_classes.container.container.Container.__ne__"]], "__pow__() (ivy.data_classes.container.container.container method)": [[99, "ivy.data_classes.container.container.Container.__pow__"]], "__radd__() (ivy.data_classes.container.container.container method)": [[99, "ivy.data_classes.container.container.Container.__radd__"]], "__rrshift__() (ivy.data_classes.container.container.container method)": [[99, "ivy.data_classes.container.container.Container.__rrshift__"]], "__rshift__() (ivy.data_classes.container.container.container method)": [[99, "ivy.data_classes.container.container.Container.__rshift__"]], "__rsub__() (ivy.data_classes.container.container.container method)": [[99, "ivy.data_classes.container.container.Container.__rsub__"]], "__sub__() (ivy.data_classes.container.container.container method)": [[99, "ivy.data_classes.container.container.Container.__sub__"]], "__truediv__() (ivy.data_classes.container.container.container method)": [[99, "ivy.data_classes.container.container.Container.__truediv__"]], "__xor__() (ivy.data_classes.container.container.container method)": [[99, "ivy.data_classes.container.container.Container.__xor__"]], "ivy.data_classes.container.container": [[99, "module-ivy.data_classes.container.container"]], "nestedarray (class in ivy.data_classes.nested_array.nested_array)": [[101, "ivy.data_classes.nested_array.nested_array.NestedArray"]], "__init__() (ivy.data_classes.nested_array.nested_array.nestedarray method)": [[101, "ivy.data_classes.nested_array.nested_array.NestedArray.__init__"]], "from_row_lengths() (ivy.data_classes.nested_array.nested_array.nestedarray class method)": [[101, "ivy.data_classes.nested_array.nested_array.NestedArray.from_row_lengths"]], "from_row_splits() (ivy.data_classes.nested_array.nested_array.nestedarray class method)": [[101, "ivy.data_classes.nested_array.nested_array.NestedArray.from_row_splits"]], "ivy.data_classes.nested_array.nested_array": [[101, "module-ivy.data_classes.nested_array.nested_array"]], "nestedarraybase (class in ivy.data_classes.nested_array.base)": [[102, "ivy.data_classes.nested_array.base.NestedArrayBase"]], "__init__() (ivy.data_classes.nested_array.base.nestedarraybase method)": [[102, "ivy.data_classes.nested_array.base.NestedArrayBase.__init__"]], "_abc_impl (ivy.data_classes.nested_array.base.nestedarraybase attribute)": [[102, "ivy.data_classes.nested_array.base.NestedArrayBase._abc_impl"]], "broadcast_shapes() (ivy.data_classes.nested_array.base.nestedarraybase static method)": [[102, "ivy.data_classes.nested_array.base.NestedArrayBase.broadcast_shapes"]], "data (ivy.data_classes.nested_array.base.nestedarraybase property)": [[102, "ivy.data_classes.nested_array.base.NestedArrayBase.data"]], "device (ivy.data_classes.nested_array.base.nestedarraybase property)": [[102, "ivy.data_classes.nested_array.base.NestedArrayBase.device"]], "dtype (ivy.data_classes.nested_array.base.nestedarraybase property)": [[102, "ivy.data_classes.nested_array.base.NestedArrayBase.dtype"]], "inner_shape (ivy.data_classes.nested_array.base.nestedarraybase property)": [[102, "ivy.data_classes.nested_array.base.NestedArrayBase.inner_shape"]], "ivy.data_classes.nested_array.base": [[102, "module-ivy.data_classes.nested_array.base"]], "ndim (ivy.data_classes.nested_array.base.nestedarraybase property)": [[102, "ivy.data_classes.nested_array.base.NestedArrayBase.ndim"]], "nested_array() (ivy.data_classes.nested_array.base.nestedarraybase class method)": [[102, "ivy.data_classes.nested_array.base.NestedArrayBase.nested_array"]], "nested_rank (ivy.data_classes.nested_array.base.nestedarraybase property)": [[102, "ivy.data_classes.nested_array.base.NestedArrayBase.nested_rank"]], "ragged_map() (ivy.data_classes.nested_array.base.nestedarraybase method)": [[102, "ivy.data_classes.nested_array.base.NestedArrayBase.ragged_map"]], "ragged_multi_map() (ivy.data_classes.nested_array.base.nestedarraybase static method)": [[102, "ivy.data_classes.nested_array.base.NestedArrayBase.ragged_multi_map"]], "ragged_multi_map_in_function() (ivy.data_classes.nested_array.base.nestedarraybase static method)": [[102, "ivy.data_classes.nested_array.base.NestedArrayBase.ragged_multi_map_in_function"]], "replace_ivy_arrays() (ivy.data_classes.nested_array.base.nestedarraybase static method)": [[102, "ivy.data_classes.nested_array.base.NestedArrayBase.replace_ivy_arrays"]], "shape (ivy.data_classes.nested_array.base.nestedarraybase property)": [[102, "ivy.data_classes.nested_array.base.NestedArrayBase.shape"]], "unbind() (ivy.data_classes.nested_array.base.nestedarraybase method)": [[102, "ivy.data_classes.nested_array.base.NestedArrayBase.unbind"]], "nestedarrayelementwise (class in ivy.data_classes.nested_array.elementwise)": [[103, "ivy.data_classes.nested_array.elementwise.NestedArrayElementwise"]], "_abc_impl (ivy.data_classes.nested_array.elementwise.nestedarrayelementwise attribute)": [[103, "ivy.data_classes.nested_array.elementwise.NestedArrayElementwise._abc_impl"]], "ivy.data_classes.nested_array.elementwise": [[103, "module-ivy.data_classes.nested_array.elementwise"]], "static_add() (ivy.data_classes.nested_array.elementwise.nestedarrayelementwise static method)": [[103, "ivy.data_classes.nested_array.elementwise.NestedArrayElementwise.static_add"]], "gelu() (in module ivy)": [[106, "ivy.gelu"], [622, "ivy.gelu"]], "gelu() (ivy.array method)": [[106, "ivy.Array.gelu"]], "gelu() (ivy.container method)": [[106, "ivy.Container.gelu"]], "hardswish() (in module ivy)": [[107, "ivy.hardswish"], [622, "ivy.hardswish"]], "hardswish() (ivy.array method)": [[107, "ivy.Array.hardswish"]], "hardswish() (ivy.container method)": [[107, "ivy.Container.hardswish"]], "leaky_relu() (in module ivy)": [[108, "ivy.leaky_relu"], [622, "ivy.leaky_relu"]], "leaky_relu() (ivy.array method)": [[108, "ivy.Array.leaky_relu"]], "leaky_relu() (ivy.container method)": [[108, "ivy.Container.leaky_relu"]], "log_softmax() (in module ivy)": [[109, "ivy.log_softmax"], [622, "ivy.log_softmax"]], "log_softmax() (ivy.array method)": [[109, "ivy.Array.log_softmax"]], "log_softmax() (ivy.container method)": [[109, "ivy.Container.log_softmax"]], "mish() (in module ivy)": [[110, "ivy.mish"], [622, "ivy.mish"]], "mish() (ivy.array method)": [[110, "ivy.Array.mish"]], "mish() (ivy.container method)": [[110, "ivy.Container.mish"]], "relu() (in module ivy)": [[111, "ivy.relu"], [622, "ivy.relu"]], "relu() (ivy.array method)": [[111, "ivy.Array.relu"]], "relu() (ivy.container method)": [[111, "ivy.Container.relu"]], "sigmoid() (in module ivy)": [[112, "ivy.sigmoid"], [622, "ivy.sigmoid"]], "sigmoid() (ivy.array method)": [[112, "ivy.Array.sigmoid"]], "sigmoid() (ivy.container method)": [[112, "ivy.Container.sigmoid"]], "softmax() (in module ivy)": [[113, "ivy.softmax"], [622, "ivy.softmax"]], "softmax() (ivy.array method)": [[113, "ivy.Array.softmax"]], "softmax() (ivy.container method)": [[113, "ivy.Container.softmax"]], "softplus() (in module ivy)": [[114, "ivy.softplus"], [622, "ivy.softplus"]], "softplus() (ivy.array method)": [[114, "ivy.Array.softplus"]], "softplus() (ivy.container method)": [[114, "ivy.Container.softplus"]], "softsign() (in module ivy)": [[115, "ivy.softsign"], [622, "ivy.softsign"]], "cmp_is() (in module ivy)": [[116, "ivy.cmp_is"], [624, "ivy.cmp_is"]], "cmp_isnot() (in module ivy)": [[117, "ivy.cmp_isnot"], [624, "ivy.cmp_isnot"]], "for_loop() (in module ivy)": [[118, "ivy.for_loop"], [624, "ivy.for_loop"]], "if_else() (in module ivy)": [[119, "ivy.if_else"], [624, "ivy.if_else"]], "try_except() (in module ivy)": [[120, "ivy.try_except"], [624, "ivy.try_except"]], "while_loop() (in module ivy)": [[121, "ivy.while_loop"], [624, "ivy.while_loop"]], "arange() (in module ivy)": [[122, "ivy.arange"], [625, "ivy.arange"]], "array() (in module ivy)": [[123, "ivy.array"], [625, "ivy.array"]], "asarray() (in module ivy)": [[124, "ivy.asarray"], [625, "ivy.asarray"]], "asarray() (ivy.array method)": [[124, "ivy.Array.asarray"]], "asarray() (ivy.container method)": [[124, "ivy.Container.asarray"]], "copy_array() (in module ivy)": [[125, "ivy.copy_array"], [625, "ivy.copy_array"]], "copy_array() (ivy.array method)": [[125, "ivy.Array.copy_array"]], "copy_array() (ivy.container method)": [[125, "ivy.Container.copy_array"]], "empty() (in module ivy)": [[126, "ivy.empty"], [625, "ivy.empty"]], "empty_like() (in module ivy)": [[127, "ivy.empty_like"], [625, "ivy.empty_like"]], "empty_like() (ivy.array method)": [[127, "ivy.Array.empty_like"]], "empty_like() (ivy.container method)": [[127, "ivy.Container.empty_like"]], "eye() (in module ivy)": [[128, "ivy.eye"], [625, "ivy.eye"]], "from_dlpack() (in module ivy)": [[129, "ivy.from_dlpack"], [625, "ivy.from_dlpack"]], "from_dlpack() (ivy.array method)": [[129, "ivy.Array.from_dlpack"]], "from_dlpack() (ivy.container method)": [[129, "ivy.Container.from_dlpack"]], "frombuffer() (in module ivy)": [[130, "ivy.frombuffer"], [625, "ivy.frombuffer"]], "frombuffer() (ivy.container method)": [[130, "ivy.Container.frombuffer"]], "full() (in module ivy)": [[131, "ivy.full"], [625, "ivy.full"]], "full_like() (in module ivy)": [[132, "ivy.full_like"], [625, "ivy.full_like"]], "full_like() (ivy.array method)": [[132, "ivy.Array.full_like"]], "full_like() (ivy.container method)": [[132, "ivy.Container.full_like"]], "linspace() (in module ivy)": [[133, "ivy.linspace"], [625, "ivy.linspace"]], "linspace() (ivy.array method)": [[133, "ivy.Array.linspace"]], "linspace() (ivy.container method)": [[133, "ivy.Container.linspace"]], "logspace() (in module ivy)": [[134, "ivy.logspace"], [625, "ivy.logspace"]], "logspace() (ivy.array method)": [[134, "ivy.Array.logspace"]], "logspace() (ivy.container method)": [[134, "ivy.Container.logspace"]], "meshgrid() (in module ivy)": [[135, "ivy.meshgrid"], [625, "ivy.meshgrid"]], "meshgrid() (ivy.array method)": [[135, "ivy.Array.meshgrid"]], "meshgrid() (ivy.container method)": [[135, "ivy.Container.meshgrid"]], "native_array() (in module ivy)": [[136, "ivy.native_array"], [625, "ivy.native_array"]], "native_array() (ivy.array method)": [[136, "ivy.Array.native_array"]], "native_array() (ivy.container method)": [[136, "ivy.Container.native_array"]], "one_hot() (in module ivy)": [[137, "ivy.one_hot"], [625, "ivy.one_hot"]], "one_hot() (ivy.array method)": [[137, "ivy.Array.one_hot"]], "one_hot() (ivy.container method)": [[137, "ivy.Container.one_hot"]], "ones() (in module ivy)": [[138, "ivy.ones"], [625, "ivy.ones"]], "ones_like() (in module ivy)": [[139, "ivy.ones_like"], [625, "ivy.ones_like"]], "ones_like() (ivy.array method)": [[139, "ivy.Array.ones_like"]], "ones_like() (ivy.container method)": [[139, "ivy.Container.ones_like"]], "to_dlpack() (in module ivy)": [[140, "ivy.to_dlpack"], [625, "ivy.to_dlpack"]], "tril() (in module ivy)": [[141, "ivy.tril"], [625, "ivy.tril"]], "tril() (ivy.array method)": [[141, "ivy.Array.tril"]], "tril() (ivy.container method)": [[141, "ivy.Container.tril"]], "triu() (in module ivy)": [[142, "ivy.triu"], [625, "ivy.triu"]], "triu() (ivy.array method)": [[142, "ivy.Array.triu"]], "triu() (ivy.container method)": [[142, "ivy.Container.triu"]], "triu_indices() (in module ivy)": [[143, "ivy.triu_indices"], [625, "ivy.triu_indices"]], "triu_indices() (ivy.container method)": [[143, "ivy.Container.triu_indices"]], "zeros() (in module ivy)": [[144, "ivy.zeros"], [625, "ivy.zeros"]], "zeros_like() (in module ivy)": [[145, "ivy.zeros_like"], [625, "ivy.zeros_like"]], "zeros_like() (ivy.array method)": [[145, "ivy.Array.zeros_like"]], "zeros_like() (ivy.container method)": [[145, "ivy.Container.zeros_like"]], "as_ivy_dtype() (in module ivy)": [[146, "ivy.as_ivy_dtype"], [626, "ivy.as_ivy_dtype"]], "as_native_dtype() (in module ivy)": [[147, "ivy.as_native_dtype"], [626, "ivy.as_native_dtype"]], "astype() (in module ivy)": [[148, "ivy.astype"], [626, "ivy.astype"]], "astype() (ivy.array method)": [[148, "ivy.Array.astype"]], "astype() (ivy.container method)": [[148, "ivy.Container.astype"]], "broadcast_arrays() (in module ivy)": [[149, "ivy.broadcast_arrays"], [626, "ivy.broadcast_arrays"]], "broadcast_arrays() (ivy.array method)": [[149, "ivy.Array.broadcast_arrays"]], "broadcast_arrays() (ivy.container method)": [[149, "ivy.Container.broadcast_arrays"]], "broadcast_to() (in module ivy)": [[150, "ivy.broadcast_to"], [626, "ivy.broadcast_to"]], "broadcast_to() (ivy.array method)": [[150, "ivy.Array.broadcast_to"]], "broadcast_to() (ivy.container method)": [[150, "ivy.Container.broadcast_to"]], "can_cast() (in module ivy)": [[151, "ivy.can_cast"], [626, "ivy.can_cast"]], "can_cast() (ivy.array method)": [[151, "ivy.Array.can_cast"]], "can_cast() (ivy.container method)": [[151, "ivy.Container.can_cast"]], "check_float() (in module ivy)": [[152, "ivy.check_float"], [626, "ivy.check_float"]], "closest_valid_dtype() (in module ivy)": [[153, "ivy.closest_valid_dtype"], [626, "ivy.closest_valid_dtype"]], "default_complex_dtype() (in module ivy)": [[154, "ivy.default_complex_dtype"], [626, "ivy.default_complex_dtype"]], "default_dtype() (in module ivy)": [[155, "ivy.default_dtype"], [626, "ivy.default_dtype"]], "default_float_dtype() (in module ivy)": [[156, "ivy.default_float_dtype"], [626, "ivy.default_float_dtype"]], "default_int_dtype() (in module ivy)": [[157, "ivy.default_int_dtype"], [626, "ivy.default_int_dtype"]], "default_uint_dtype() (in module ivy)": [[158, "ivy.default_uint_dtype"], [626, "ivy.default_uint_dtype"]], "dtype() (in module ivy)": [[159, "ivy.dtype"], [626, "ivy.dtype"]], "dtype() (ivy.array method)": [[159, "ivy.Array.dtype"]], "dtype() (ivy.container method)": [[159, "ivy.Container.dtype"]], "dtype_bits() (in module ivy)": [[160, "ivy.dtype_bits"], [626, "ivy.dtype_bits"]], "finfo() (in module ivy)": [[161, "ivy.finfo"], [626, "ivy.finfo"]], "finfo() (ivy.array method)": [[161, "ivy.Array.finfo"]], "finfo() (ivy.container method)": [[161, "ivy.Container.finfo"]], "function_supported_dtypes() (in module ivy)": [[162, "ivy.function_supported_dtypes"], [626, "ivy.function_supported_dtypes"]], "function_unsupported_dtypes() (in module ivy)": [[163, "ivy.function_unsupported_dtypes"], [626, "ivy.function_unsupported_dtypes"]], "iinfo() (in module ivy)": [[164, "ivy.iinfo"], [626, "ivy.iinfo"]], "iinfo() (ivy.array method)": [[164, "ivy.Array.iinfo"]], "iinfo() (ivy.container method)": [[164, "ivy.Container.iinfo"]], "infer_default_dtype() (in module ivy)": [[165, "ivy.infer_default_dtype"], [626, "ivy.infer_default_dtype"]], "invalid_dtype() (in module ivy)": [[166, "ivy.invalid_dtype"], [626, "ivy.invalid_dtype"]], "is_bool_dtype() (in module ivy)": [[167, "ivy.is_bool_dtype"], [626, "ivy.is_bool_dtype"]], "is_bool_dtype() (ivy.array method)": [[167, "ivy.Array.is_bool_dtype"]], "is_bool_dtype() (ivy.container method)": [[167, "ivy.Container.is_bool_dtype"]], "is_complex_dtype() (in module ivy)": [[168, "ivy.is_complex_dtype"], [626, "ivy.is_complex_dtype"]], "is_complex_dtype() (ivy.container method)": [[168, "ivy.Container.is_complex_dtype"]], "is_float_dtype() (in module ivy)": [[169, "ivy.is_float_dtype"], [626, "ivy.is_float_dtype"]], "is_float_dtype() (ivy.array method)": [[169, "ivy.Array.is_float_dtype"]], "is_float_dtype() (ivy.container method)": [[169, "ivy.Container.is_float_dtype"]], "is_hashable_dtype() (in module ivy)": [[170, "ivy.is_hashable_dtype"], [626, "ivy.is_hashable_dtype"]], "is_int_dtype() (in module ivy)": [[171, "ivy.is_int_dtype"], [626, "ivy.is_int_dtype"]], "is_int_dtype() (ivy.array method)": [[171, "ivy.Array.is_int_dtype"]], "is_int_dtype() (ivy.container method)": [[171, "ivy.Container.is_int_dtype"]], "is_native_dtype() (in module ivy)": [[172, "ivy.is_native_dtype"], [626, "ivy.is_native_dtype"]], "is_uint_dtype() (in module ivy)": [[173, "ivy.is_uint_dtype"], [626, "ivy.is_uint_dtype"]], "is_uint_dtype() (ivy.array method)": [[173, "ivy.Array.is_uint_dtype"]], "is_uint_dtype() (ivy.container method)": [[173, "ivy.Container.is_uint_dtype"]], "promote_types() (in module ivy)": [[174, "ivy.promote_types"], [626, "ivy.promote_types"]], "promote_types_of_inputs() (in module ivy)": [[175, "ivy.promote_types_of_inputs"], [626, "ivy.promote_types_of_inputs"]], "result_type() (in module ivy)": [[176, "ivy.result_type"], [626, "ivy.result_type"]], "result_type() (ivy.array method)": [[176, "ivy.Array.result_type"]], "result_type() (ivy.container method)": [[176, "ivy.Container.result_type"]], "set_default_complex_dtype() (in module ivy)": [[177, "ivy.set_default_complex_dtype"], [626, "ivy.set_default_complex_dtype"]], "set_default_dtype() (in module ivy)": [[178, "ivy.set_default_dtype"], [626, "ivy.set_default_dtype"]], "set_default_float_dtype() (in module ivy)": [[179, "ivy.set_default_float_dtype"], [626, "ivy.set_default_float_dtype"]], "set_default_int_dtype() (in module ivy)": [[180, "ivy.set_default_int_dtype"], [626, "ivy.set_default_int_dtype"]], "set_default_uint_dtype() (in module ivy)": [[181, "ivy.set_default_uint_dtype"], [626, "ivy.set_default_uint_dtype"]], "type_promote_arrays() (in module ivy)": [[182, "ivy.type_promote_arrays"], [626, "ivy.type_promote_arrays"]], "unset_default_complex_dtype() (in module ivy)": [[183, "ivy.unset_default_complex_dtype"], [626, "ivy.unset_default_complex_dtype"]], "unset_default_dtype() (in module ivy)": [[184, "ivy.unset_default_dtype"], [626, "ivy.unset_default_dtype"]], "unset_default_float_dtype() (in module ivy)": [[185, "ivy.unset_default_float_dtype"], [626, "ivy.unset_default_float_dtype"]], "unset_default_int_dtype() (in module ivy)": [[186, "ivy.unset_default_int_dtype"], [626, "ivy.unset_default_int_dtype"]], "unset_default_uint_dtype() (in module ivy)": [[187, "ivy.unset_default_uint_dtype"], [626, "ivy.unset_default_uint_dtype"]], "valid_dtype() (in module ivy)": [[188, "ivy.valid_dtype"], [626, "ivy.valid_dtype"]], "as_ivy_dev() (in module ivy)": [[189, "ivy.as_ivy_dev"], [627, "ivy.as_ivy_dev"]], "as_native_dev() (in module ivy)": [[190, "ivy.as_native_dev"], [627, "ivy.as_native_dev"]], "clear_cached_mem_on_dev() (in module ivy)": [[191, "ivy.clear_cached_mem_on_dev"], [627, "ivy.clear_cached_mem_on_dev"]], "default_device() (in module ivy)": [[192, "ivy.default_device"], [627, "ivy.default_device"]], "dev() (in module ivy)": [[193, "ivy.dev"], [627, "ivy.dev"]], "dev() (ivy.array method)": [[193, "ivy.Array.dev"]], "dev() (ivy.container method)": [[193, "ivy.Container.dev"]], "dev_util() (in module ivy)": [[194, "ivy.dev_util"], [627, "ivy.dev_util"]], "function_supported_devices() (in module ivy)": [[195, "ivy.function_supported_devices"], [627, "ivy.function_supported_devices"]], "function_unsupported_devices() (in module ivy)": [[196, "ivy.function_unsupported_devices"], [627, "ivy.function_unsupported_devices"]], "get_all_ivy_arrays_on_dev() (in module ivy)": [[197, "ivy.get_all_ivy_arrays_on_dev"], [627, "ivy.get_all_ivy_arrays_on_dev"]], "gpu_is_available() (in module ivy)": [[198, "ivy.gpu_is_available"], [627, "ivy.gpu_is_available"]], "handle_soft_device_variable() (in module ivy)": [[199, "ivy.handle_soft_device_variable"], [627, "ivy.handle_soft_device_variable"]], "num_cpu_cores() (in module ivy)": [[200, "ivy.num_cpu_cores"], [627, "ivy.num_cpu_cores"]], "num_gpus() (in module ivy)": [[201, "ivy.num_gpus"], [627, "ivy.num_gpus"]], "num_ivy_arrays_on_dev() (in module ivy)": [[202, "ivy.num_ivy_arrays_on_dev"], [627, "ivy.num_ivy_arrays_on_dev"]], "percent_used_mem_on_dev() (in module ivy)": [[203, "ivy.percent_used_mem_on_dev"], [627, "ivy.percent_used_mem_on_dev"]], "print_all_ivy_arrays_on_dev() (in module ivy)": [[204, "ivy.print_all_ivy_arrays_on_dev"], [627, "ivy.print_all_ivy_arrays_on_dev"]], "set_default_device() (in module ivy)": [[205, "ivy.set_default_device"], [627, "ivy.set_default_device"]], "set_soft_device_mode() (in module ivy)": [[206, "ivy.set_soft_device_mode"], [627, "ivy.set_soft_device_mode"]], "set_split_factor() (in module ivy)": [[207, "ivy.set_split_factor"], [627, "ivy.set_split_factor"]], "split_factor() (in module ivy)": [[208, "ivy.split_factor"], [627, "ivy.split_factor"]], "split_func_call() (in module ivy)": [[209, "ivy.split_func_call"], [627, "ivy.split_func_call"]], "to_device() (in module ivy)": [[210, "ivy.to_device"], [627, "ivy.to_device"]], "to_device() (ivy.array method)": [[210, "ivy.Array.to_device"]], "to_device() (ivy.container method)": [[210, "ivy.Container.to_device"]], "total_mem_on_dev() (in module ivy)": [[211, "ivy.total_mem_on_dev"], [627, "ivy.total_mem_on_dev"]], "tpu_is_available() (in module ivy)": [[212, "ivy.tpu_is_available"], [627, "ivy.tpu_is_available"]], "unset_default_device() (in module ivy)": [[213, "ivy.unset_default_device"], [627, "ivy.unset_default_device"]], "unset_soft_device_mode() (in module ivy)": [[214, "ivy.unset_soft_device_mode"], [627, "ivy.unset_soft_device_mode"]], "used_mem_on_dev() (in module ivy)": [[215, "ivy.used_mem_on_dev"], [627, "ivy.used_mem_on_dev"]], "abs() (in module ivy)": [[216, "ivy.abs"], [628, "ivy.abs"]], "abs() (ivy.array method)": [[216, "ivy.Array.abs"]], "abs() (ivy.container method)": [[216, "ivy.Container.abs"]], "acos() (in module ivy)": [[217, "ivy.acos"], [628, "ivy.acos"]], "acos() (ivy.array method)": [[217, "ivy.Array.acos"]], "acos() (ivy.container method)": [[217, "ivy.Container.acos"]], "acosh() (in module ivy)": [[218, "ivy.acosh"], [628, "ivy.acosh"]], "acosh() (ivy.array method)": [[218, "ivy.Array.acosh"]], "acosh() (ivy.container method)": [[218, "ivy.Container.acosh"]], "add() (in module ivy)": [[219, "ivy.add"], [628, "ivy.add"]], "add() (ivy.array method)": [[219, "ivy.Array.add"]], "add() (ivy.container method)": [[219, "ivy.Container.add"]], "angle() (in module ivy)": [[220, "ivy.angle"], [628, "ivy.angle"]], "angle() (ivy.array method)": [[220, "ivy.Array.angle"]], "angle() (ivy.container method)": [[220, "ivy.Container.angle"]], "asin() (in module ivy)": [[221, "ivy.asin"], [628, "ivy.asin"]], "asin() (ivy.array method)": [[221, "ivy.Array.asin"]], "asin() (ivy.container method)": [[221, "ivy.Container.asin"]], "asinh() (in module ivy)": [[222, "ivy.asinh"], [628, "ivy.asinh"]], "asinh() (ivy.array method)": [[222, "ivy.Array.asinh"]], "asinh() (ivy.container method)": [[222, "ivy.Container.asinh"]], "atan() (in module ivy)": [[223, "ivy.atan"], [628, "ivy.atan"]], "atan() (ivy.array method)": [[223, "ivy.Array.atan"]], "atan() (ivy.container method)": [[223, "ivy.Container.atan"]], "atan2() (in module ivy)": [[224, "ivy.atan2"], [628, "ivy.atan2"]], "atan2() (ivy.array method)": [[224, "ivy.Array.atan2"]], "atan2() (ivy.container method)": [[224, "ivy.Container.atan2"]], "atanh() (in module ivy)": [[225, "ivy.atanh"], [628, "ivy.atanh"]], "atanh() (ivy.array method)": [[225, "ivy.Array.atanh"]], "atanh() (ivy.container method)": [[225, "ivy.Container.atanh"]], "bitwise_and() (in module ivy)": [[226, "ivy.bitwise_and"], [628, "ivy.bitwise_and"]], "bitwise_and() (ivy.array method)": [[226, "ivy.Array.bitwise_and"]], "bitwise_and() (ivy.container method)": [[226, "ivy.Container.bitwise_and"]], "bitwise_invert() (in module ivy)": [[227, "ivy.bitwise_invert"], [628, "ivy.bitwise_invert"]], "bitwise_invert() (ivy.array method)": [[227, "ivy.Array.bitwise_invert"]], "bitwise_invert() (ivy.container method)": [[227, "ivy.Container.bitwise_invert"]], "bitwise_left_shift() (in module ivy)": [[228, "ivy.bitwise_left_shift"], [628, "ivy.bitwise_left_shift"]], "bitwise_left_shift() (ivy.array method)": [[228, "ivy.Array.bitwise_left_shift"]], "bitwise_left_shift() (ivy.container method)": [[228, "ivy.Container.bitwise_left_shift"]], "bitwise_or() (in module ivy)": [[229, "ivy.bitwise_or"], [628, "ivy.bitwise_or"]], "bitwise_or() (ivy.array method)": [[229, "ivy.Array.bitwise_or"]], "bitwise_or() (ivy.container method)": [[229, "ivy.Container.bitwise_or"]], "bitwise_right_shift() (in module ivy)": [[230, "ivy.bitwise_right_shift"], [628, "ivy.bitwise_right_shift"]], "bitwise_right_shift() (ivy.array method)": [[230, "ivy.Array.bitwise_right_shift"]], "bitwise_right_shift() (ivy.container method)": [[230, "ivy.Container.bitwise_right_shift"]], "bitwise_xor() (in module ivy)": [[231, "ivy.bitwise_xor"], [628, "ivy.bitwise_xor"]], "bitwise_xor() (ivy.array method)": [[231, "ivy.Array.bitwise_xor"]], "bitwise_xor() (ivy.container method)": [[231, "ivy.Container.bitwise_xor"]], "ceil() (in module ivy)": [[232, "ivy.ceil"], [628, "ivy.ceil"]], "ceil() (ivy.array method)": [[232, "ivy.Array.ceil"]], "ceil() (ivy.container method)": [[232, "ivy.Container.ceil"]], "cos() (in module ivy)": [[233, "ivy.cos"], [628, "ivy.cos"]], "cos() (ivy.array method)": [[233, "ivy.Array.cos"]], "cos() (ivy.container method)": [[233, "ivy.Container.cos"]], "cosh() (in module ivy)": [[234, "ivy.cosh"], [628, "ivy.cosh"]], "cosh() (ivy.array method)": [[234, "ivy.Array.cosh"]], "cosh() (ivy.container method)": [[234, "ivy.Container.cosh"]], "deg2rad() (in module ivy)": [[235, "ivy.deg2rad"], [628, "ivy.deg2rad"]], "deg2rad() (ivy.array method)": [[235, "ivy.Array.deg2rad"]], "deg2rad() (ivy.container method)": [[235, "ivy.Container.deg2rad"]], "divide() (in module ivy)": [[236, "ivy.divide"], [628, "ivy.divide"]], "divide() (ivy.array method)": [[236, "ivy.Array.divide"]], "divide() (ivy.container method)": [[236, "ivy.Container.divide"]], "equal() (in module ivy)": [[237, "ivy.equal"], [628, "ivy.equal"]], "equal() (ivy.array method)": [[237, "ivy.Array.equal"]], "equal() (ivy.container method)": [[237, "ivy.Container.equal"]], "erf() (in module ivy)": [[238, "ivy.erf"], [628, "ivy.erf"]], "erf() (ivy.array method)": [[238, "ivy.Array.erf"]], "erf() (ivy.container method)": [[238, "ivy.Container.erf"]], "exp() (in module ivy)": [[239, "ivy.exp"], [628, "ivy.exp"]], "exp() (ivy.array method)": [[239, "ivy.Array.exp"]], "exp() (ivy.container method)": [[239, "ivy.Container.exp"]], "exp2() (in module ivy)": [[240, "ivy.exp2"], [628, "ivy.exp2"]], "exp2() (ivy.array method)": [[240, "ivy.Array.exp2"]], "exp2() (ivy.container method)": [[240, "ivy.Container.exp2"]], "expm1() (in module ivy)": [[241, "ivy.expm1"], [628, "ivy.expm1"]], "expm1() (ivy.array method)": [[241, "ivy.Array.expm1"]], "expm1() (ivy.container method)": [[241, "ivy.Container.expm1"]], "floor() (in module ivy)": [[242, "ivy.floor"], [628, "ivy.floor"]], "floor() (ivy.array method)": [[242, "ivy.Array.floor"]], "floor() (ivy.container method)": [[242, "ivy.Container.floor"]], "floor_divide() (in module ivy)": [[243, "ivy.floor_divide"], [628, "ivy.floor_divide"]], "floor_divide() (ivy.array method)": [[243, "ivy.Array.floor_divide"]], "floor_divide() (ivy.container method)": [[243, "ivy.Container.floor_divide"]], "fmin() (in module ivy)": [[244, "ivy.fmin"], [628, "ivy.fmin"]], "fmin() (ivy.array method)": [[244, "ivy.Array.fmin"]], "fmin() (ivy.container method)": [[244, "ivy.Container.fmin"]], "fmod() (in module ivy)": [[245, "ivy.fmod"], [628, "ivy.fmod"]], "fmod() (ivy.array method)": [[245, "ivy.Array.fmod"]], "fmod() (ivy.container method)": [[245, "ivy.Container.fmod"]], "gcd() (in module ivy)": [[246, "ivy.gcd"], [628, "ivy.gcd"]], "gcd() (ivy.array method)": [[246, "ivy.Array.gcd"]], "gcd() (ivy.container method)": [[246, "ivy.Container.gcd"]], "greater() (in module ivy)": [[247, "ivy.greater"], [628, "ivy.greater"]], "greater() (ivy.array method)": [[247, "ivy.Array.greater"]], "greater() (ivy.container method)": [[247, "ivy.Container.greater"]], "greater_equal() (in module ivy)": [[248, "ivy.greater_equal"], [628, "ivy.greater_equal"]], "greater_equal() (ivy.array method)": [[248, "ivy.Array.greater_equal"]], "greater_equal() (ivy.container method)": [[248, "ivy.Container.greater_equal"]], "imag() (in module ivy)": [[249, "ivy.imag"], [628, "ivy.imag"]], "imag() (ivy.array method)": [[249, "ivy.Array.imag"]], "imag() (ivy.container method)": [[249, "ivy.Container.imag"]], "isfinite() (in module ivy)": [[250, "ivy.isfinite"], [628, "ivy.isfinite"]], "isfinite() (ivy.array method)": [[250, "ivy.Array.isfinite"]], "isfinite() (ivy.container method)": [[250, "ivy.Container.isfinite"]], "isinf() (in module ivy)": [[251, "ivy.isinf"], [628, "ivy.isinf"]], "isinf() (ivy.array method)": [[251, "ivy.Array.isinf"]], "isinf() (ivy.container method)": [[251, "ivy.Container.isinf"]], "isnan() (in module ivy)": [[252, "ivy.isnan"], [628, "ivy.isnan"]], "isnan() (ivy.array method)": [[252, "ivy.Array.isnan"]], "isnan() (ivy.container method)": [[252, "ivy.Container.isnan"]], "isreal() (in module ivy)": [[253, "ivy.isreal"], [628, "ivy.isreal"]], "isreal() (ivy.array method)": [[253, "ivy.Array.isreal"]], "isreal() (ivy.container method)": [[253, "ivy.Container.isreal"]], "lcm() (in module ivy)": [[254, "ivy.lcm"], [628, "ivy.lcm"]], "lcm() (ivy.array method)": [[254, "ivy.Array.lcm"]], "lcm() (ivy.container method)": [[254, "ivy.Container.lcm"]], "less() (in module ivy)": [[255, "ivy.less"], [628, "ivy.less"]], "less() (ivy.array method)": [[255, "ivy.Array.less"]], "less() (ivy.container method)": [[255, "ivy.Container.less"]], "less_equal() (in module ivy)": [[256, "ivy.less_equal"], [628, "ivy.less_equal"]], "less_equal() (ivy.array method)": [[256, "ivy.Array.less_equal"]], "less_equal() (ivy.container method)": [[256, "ivy.Container.less_equal"]], "log() (in module ivy)": [[257, "ivy.log"], [628, "ivy.log"]], "log() (ivy.array method)": [[257, "ivy.Array.log"]], "log() (ivy.container method)": [[257, "ivy.Container.log"]], "log10() (in module ivy)": [[258, "ivy.log10"], [628, "ivy.log10"]], "log10() (ivy.array method)": [[258, "ivy.Array.log10"]], "log10() (ivy.container method)": [[258, "ivy.Container.log10"]], "log1p() (in module ivy)": [[259, "ivy.log1p"], [628, "ivy.log1p"]], "log1p() (ivy.array method)": [[259, "ivy.Array.log1p"]], "log1p() (ivy.container method)": [[259, "ivy.Container.log1p"]], "log2() (in module ivy)": [[260, "ivy.log2"], [628, "ivy.log2"]], "log2() (ivy.array method)": [[260, "ivy.Array.log2"]], "log2() (ivy.container method)": [[260, "ivy.Container.log2"]], "logaddexp() (in module ivy)": [[261, "ivy.logaddexp"], [628, "ivy.logaddexp"]], "logaddexp() (ivy.array method)": [[261, "ivy.Array.logaddexp"]], "logaddexp() (ivy.container method)": [[261, "ivy.Container.logaddexp"]], "logaddexp2() (in module ivy)": [[262, "ivy.logaddexp2"], [628, "ivy.logaddexp2"]], "logaddexp2() (ivy.array method)": [[262, "ivy.Array.logaddexp2"]], "logaddexp2() (ivy.container method)": [[262, "ivy.Container.logaddexp2"]], "logical_and() (in module ivy)": [[263, "ivy.logical_and"], [628, "ivy.logical_and"]], "logical_and() (ivy.array method)": [[263, "ivy.Array.logical_and"]], "logical_and() (ivy.container method)": [[263, "ivy.Container.logical_and"]], "logical_not() (in module ivy)": [[264, "ivy.logical_not"], [628, "ivy.logical_not"]], "logical_not() (ivy.array method)": [[264, "ivy.Array.logical_not"]], "logical_not() (ivy.container method)": [[264, "ivy.Container.logical_not"]], "logical_or() (in module ivy)": [[265, "ivy.logical_or"], [628, "ivy.logical_or"]], "logical_or() (ivy.array method)": [[265, "ivy.Array.logical_or"]], "logical_or() (ivy.container method)": [[265, "ivy.Container.logical_or"]], "logical_xor() (in module ivy)": [[266, "ivy.logical_xor"], [628, "ivy.logical_xor"]], "logical_xor() (ivy.array method)": [[266, "ivy.Array.logical_xor"]], "logical_xor() (ivy.container method)": [[266, "ivy.Container.logical_xor"]], "maximum() (in module ivy)": [[267, "ivy.maximum"], [628, "ivy.maximum"]], "maximum() (ivy.array method)": [[267, "ivy.Array.maximum"]], "maximum() (ivy.container method)": [[267, "ivy.Container.maximum"]], "minimum() (in module ivy)": [[268, "ivy.minimum"], [628, "ivy.minimum"]], "minimum() (ivy.array method)": [[268, "ivy.Array.minimum"]], "minimum() (ivy.container method)": [[268, "ivy.Container.minimum"]], "multiply() (in module ivy)": [[269, "ivy.multiply"], [628, "ivy.multiply"]], "multiply() (ivy.array method)": [[269, "ivy.Array.multiply"]], "multiply() (ivy.container method)": [[269, "ivy.Container.multiply"]], "nan_to_num() (in module ivy)": [[270, "ivy.nan_to_num"], [628, "ivy.nan_to_num"]], "nan_to_num() (ivy.array method)": [[270, "ivy.Array.nan_to_num"]], "nan_to_num() (ivy.container method)": [[270, "ivy.Container.nan_to_num"]], "negative() (in module ivy)": [[271, "ivy.negative"], [628, "ivy.negative"]], "negative() (ivy.array method)": [[271, "ivy.Array.negative"]], "negative() (ivy.container method)": [[271, "ivy.Container.negative"]], "not_equal() (in module ivy)": [[272, "ivy.not_equal"], [628, "ivy.not_equal"]], "not_equal() (ivy.array method)": [[272, "ivy.Array.not_equal"]], "not_equal() (ivy.container method)": [[272, "ivy.Container.not_equal"]], "positive() (in module ivy)": [[273, "ivy.positive"], [628, "ivy.positive"]], "positive() (ivy.array method)": [[273, "ivy.Array.positive"]], "positive() (ivy.container method)": [[273, "ivy.Container.positive"]], "pow() (in module ivy)": [[274, "ivy.pow"], [628, "ivy.pow"]], "pow() (ivy.array method)": [[274, "ivy.Array.pow"]], "pow() (ivy.container method)": [[274, "ivy.Container.pow"]], "rad2deg() (in module ivy)": [[275, "ivy.rad2deg"], [628, "ivy.rad2deg"]], "rad2deg() (ivy.array method)": [[275, "ivy.Array.rad2deg"]], "rad2deg() (ivy.container method)": [[275, "ivy.Container.rad2deg"]], "real() (in module ivy)": [[276, "ivy.real"], [628, "ivy.real"]], "real() (ivy.array method)": [[276, "ivy.Array.real"]], "real() (ivy.container method)": [[276, "ivy.Container.real"]], "reciprocal() (in module ivy)": [[277, "ivy.reciprocal"], [628, "ivy.reciprocal"]], "reciprocal() (ivy.array method)": [[277, "ivy.Array.reciprocal"]], "reciprocal() (ivy.container method)": [[277, "ivy.Container.reciprocal"]], "remainder() (in module ivy)": [[278, "ivy.remainder"], [628, "ivy.remainder"]], "remainder() (ivy.array method)": [[278, "ivy.Array.remainder"]], "remainder() (ivy.container method)": [[278, "ivy.Container.remainder"]], "round() (in module ivy)": [[279, "ivy.round"], [628, "ivy.round"]], "round() (ivy.array method)": [[279, "ivy.Array.round"]], "round() (ivy.container method)": [[279, "ivy.Container.round"]], "sign() (in module ivy)": [[280, "ivy.sign"], [628, "ivy.sign"]], "sign() (ivy.array method)": [[280, "ivy.Array.sign"]], "sign() (ivy.container method)": [[280, "ivy.Container.sign"]], "sin() (in module ivy)": [[281, "ivy.sin"], [628, "ivy.sin"]], "sin() (ivy.array method)": [[281, "ivy.Array.sin"]], "sin() (ivy.container method)": [[281, "ivy.Container.sin"]], "sinh() (in module ivy)": [[282, "ivy.sinh"], [628, "ivy.sinh"]], "sinh() (ivy.array method)": [[282, "ivy.Array.sinh"]], "sinh() (ivy.container method)": [[282, "ivy.Container.sinh"]], "sqrt() (in module ivy)": [[283, "ivy.sqrt"], [628, "ivy.sqrt"]], "sqrt() (ivy.array method)": [[283, "ivy.Array.sqrt"]], "sqrt() (ivy.container method)": [[283, "ivy.Container.sqrt"]], "square() (in module ivy)": [[284, "ivy.square"], [628, "ivy.square"]], "square() (ivy.array method)": [[284, "ivy.Array.square"]], "square() (ivy.container method)": [[284, "ivy.Container.square"]], "subtract() (in module ivy)": [[285, "ivy.subtract"], [628, "ivy.subtract"]], "subtract() (ivy.array method)": [[285, "ivy.Array.subtract"]], "subtract() (ivy.container method)": [[285, "ivy.Container.subtract"]], "tan() (in module ivy)": [[286, "ivy.tan"], [628, "ivy.tan"]], "tan() (ivy.array method)": [[286, "ivy.Array.tan"]], "tan() (ivy.container method)": [[286, "ivy.Container.tan"]], "tanh() (in module ivy)": [[287, "ivy.tanh"], [628, "ivy.tanh"]], "tanh() (ivy.array method)": [[287, "ivy.Array.tanh"]], "tanh() (ivy.container method)": [[287, "ivy.Container.tanh"]], "trapz() (in module ivy)": [[288, "ivy.trapz"], [628, "ivy.trapz"]], "trapz() (ivy.array method)": [[288, "ivy.Array.trapz"]], "trapz() (ivy.container method)": [[288, "ivy.Container.trapz"]], "trunc() (in module ivy)": [[289, "ivy.trunc"], [628, "ivy.trunc"]], "trunc() (ivy.array method)": [[289, "ivy.Array.trunc"]], "trunc() (ivy.container method)": [[289, "ivy.Container.trunc"]], "trunc_divide() (in module ivy)": [[290, "ivy.trunc_divide"], [628, "ivy.trunc_divide"]], "trunc_divide() (ivy.array method)": [[290, "ivy.Array.trunc_divide"]], "trunc_divide() (ivy.container method)": [[290, "ivy.Container.trunc_divide"]], "celu() (in module ivy)": [[291, "ivy.celu"], [363, "ivy.celu"]], "celu() (ivy.array method)": [[291, "ivy.Array.celu"]], "celu() (ivy.container method)": [[291, "ivy.Container.celu"]], "elu() (in module ivy)": [[292, "ivy.elu"], [363, "ivy.elu"]], "elu() (ivy.array method)": [[292, "ivy.Array.elu"]], "elu() (ivy.container method)": [[292, "ivy.Container.elu"]], "hardshrink() (in module ivy)": [[293, "ivy.hardshrink"], [363, "ivy.hardshrink"]], "hardshrink() (ivy.array method)": [[293, "ivy.Array.hardshrink"]], "hardshrink() (ivy.container method)": [[293, "ivy.Container.hardshrink"]], "hardsilu() (in module ivy)": [[294, "ivy.hardsilu"], [363, "ivy.hardsilu"]], "hardsilu() (ivy.array method)": [[294, "ivy.Array.hardsilu"]], "hardsilu() (ivy.container method)": [[294, "ivy.Container.hardsilu"]], "hardtanh() (in module ivy)": [[295, "ivy.hardtanh"], [363, "ivy.hardtanh"]], "hardtanh() (ivy.array method)": [[295, "ivy.Array.hardtanh"]], "hardtanh() (ivy.container method)": [[295, "ivy.Container.hardtanh"]], "logit() (in module ivy)": [[296, "ivy.logit"], [363, "ivy.logit"]], "logit() (ivy.array method)": [[296, "ivy.Array.logit"]], "logit() (ivy.container method)": [[296, "ivy.Container.logit"]], "logsigmoid() (in module ivy)": [[297, "ivy.logsigmoid"], [363, "ivy.logsigmoid"]], "logsigmoid() (ivy.array method)": [[297, "ivy.Array.logsigmoid"]], "logsigmoid() (ivy.container method)": [[297, "ivy.Container.logsigmoid"]], "prelu() (in module ivy)": [[298, "ivy.prelu"], [363, "ivy.prelu"]], "prelu() (ivy.array method)": [[298, "ivy.Array.prelu"]], "prelu() (ivy.container method)": [[298, "ivy.Container.prelu"]], "relu6() (in module ivy)": [[299, "ivy.relu6"], [363, "ivy.relu6"]], "relu6() (ivy.array method)": [[299, "ivy.Array.relu6"]], "relu6() (ivy.container method)": [[299, "ivy.Container.relu6"]], "scaled_tanh() (in module ivy)": [[300, "ivy.scaled_tanh"], [363, "ivy.scaled_tanh"]], "scaled_tanh() (ivy.array method)": [[300, "ivy.Array.scaled_tanh"]], "scaled_tanh() (ivy.container method)": [[300, "ivy.Container.scaled_tanh"]], "selu() (in module ivy)": [[301, "ivy.selu"], [363, "ivy.selu"]], "selu() (ivy.array method)": [[301, "ivy.Array.selu"]], "selu() (ivy.container method)": [[301, "ivy.Container.selu"]], "silu() (in module ivy)": [[302, "ivy.silu"], [363, "ivy.silu"]], "silu() (ivy.array method)": [[302, "ivy.Array.silu"]], "silu() (ivy.container method)": [[302, "ivy.Container.silu"]], "softshrink() (in module ivy)": [[303, "ivy.softshrink"], [363, "ivy.softshrink"]], "softshrink() (ivy.array method)": [[303, "ivy.Array.softshrink"]], "softshrink() (ivy.container method)": [[303, "ivy.Container.softshrink"]], "stanh() (in module ivy)": [[304, "ivy.stanh"], [363, "ivy.stanh"]], "tanhshrink() (in module ivy)": [[305, "ivy.tanhshrink"], [363, "ivy.tanhshrink"]], "tanhshrink() (ivy.array method)": [[305, "ivy.Array.tanhshrink"]], "tanhshrink() (ivy.container method)": [[305, "ivy.Container.tanhshrink"]], "threshold() (in module ivy)": [[306, "ivy.threshold"], [363, "ivy.threshold"]], "threshold() (ivy.array method)": [[306, "ivy.Array.threshold"]], "threshold() (ivy.container method)": [[306, "ivy.Container.threshold"]], "thresholded_relu() (in module ivy)": [[307, "ivy.thresholded_relu"], [363, "ivy.thresholded_relu"]], "thresholded_relu() (ivy.array method)": [[307, "ivy.Array.thresholded_relu"]], "thresholded_relu() (ivy.container method)": [[307, "ivy.Container.thresholded_relu"]], "blackman_window() (in module ivy)": [[308, "ivy.blackman_window"], [365, "ivy.blackman_window"]], "blackman_window() (ivy.array method)": [[308, "ivy.Array.blackman_window"]], "blackman_window() (ivy.container method)": [[308, "ivy.Container.blackman_window"]], "eye_like() (in module ivy)": [[309, "ivy.eye_like"], [365, "ivy.eye_like"]], "eye_like() (ivy.array method)": [[309, "ivy.Array.eye_like"]], "eye_like() (ivy.container method)": [[309, "ivy.Container.eye_like"]], "hamming_window() (in module ivy)": [[310, "ivy.hamming_window"], [365, "ivy.hamming_window"]], "hamming_window() (ivy.container method)": [[310, "ivy.Container.hamming_window"]], "hann_window() (in module ivy)": [[311, "ivy.hann_window"], [365, "ivy.hann_window"]], "hann_window() (ivy.container method)": [[311, "ivy.Container.hann_window"]], "indices() (in module ivy)": [[312, "ivy.indices"], [365, "ivy.indices"]], "kaiser_bessel_derived_window() (in module ivy)": [[313, "ivy.kaiser_bessel_derived_window"], [365, "ivy.kaiser_bessel_derived_window"]], "kaiser_bessel_derived_window() (ivy.container method)": [[313, "ivy.Container.kaiser_bessel_derived_window"]], "kaiser_window() (in module ivy)": [[314, "ivy.kaiser_window"], [365, "ivy.kaiser_window"]], "kaiser_window() (ivy.container method)": [[314, "ivy.Container.kaiser_window"]], "mel_weight_matrix() (in module ivy)": [[315, "ivy.mel_weight_matrix"], [365, "ivy.mel_weight_matrix"]], "mel_weight_matrix() (ivy.array static method)": [[315, "ivy.Array.mel_weight_matrix"]], "mel_weight_matrix() (ivy.container method)": [[315, "ivy.Container.mel_weight_matrix"]], "ndenumerate() (in module ivy)": [[316, "ivy.ndenumerate"], [365, "ivy.ndenumerate"]], "ndindex() (in module ivy)": [[317, "ivy.ndindex"], [365, "ivy.ndindex"]], "polyval() (in module ivy)": [[318, "ivy.polyval"], [365, "ivy.polyval"]], "polyval() (ivy.container method)": [[318, "ivy.Container.polyval"]], "random_cp() (in module ivy)": [[319, "ivy.random_cp"], [365, "ivy.random_cp"]], "random_parafac2() (in module ivy)": [[320, "ivy.random_parafac2"], [365, "ivy.random_parafac2"]], "random_tr() (in module ivy)": [[321, "ivy.random_tr"], [365, "ivy.random_tr"]], "random_tt() (in module ivy)": [[322, "ivy.random_tt"], [365, "ivy.random_tt"]], "random_tucker() (in module ivy)": [[323, "ivy.random_tucker"], [365, "ivy.random_tucker"]], "tril_indices() (in module ivy)": [[324, "ivy.tril_indices"], [365, "ivy.tril_indices"]], "tril_indices() (ivy.container method)": [[324, "ivy.Container.tril_indices"]], "trilu() (in module ivy)": [[325, "ivy.trilu"], [365, "ivy.trilu"]], "trilu() (ivy.array method)": [[325, "ivy.Array.trilu"]], "trilu() (ivy.container method)": [[325, "ivy.Container.trilu"]], "unsorted_segment_mean() (in module ivy)": [[326, "ivy.unsorted_segment_mean"], [365, "ivy.unsorted_segment_mean"]], "unsorted_segment_mean() (ivy.array method)": [[326, "ivy.Array.unsorted_segment_mean"]], "unsorted_segment_mean() (ivy.container method)": [[326, "ivy.Container.unsorted_segment_mean"]], "unsorted_segment_min() (in module ivy)": [[327, "ivy.unsorted_segment_min"], [365, "ivy.unsorted_segment_min"]], "unsorted_segment_min() (ivy.array method)": [[327, "ivy.Array.unsorted_segment_min"]], "unsorted_segment_min() (ivy.container method)": [[327, "ivy.Container.unsorted_segment_min"]], "unsorted_segment_sum() (in module ivy)": [[328, "ivy.unsorted_segment_sum"], [365, "ivy.unsorted_segment_sum"]], "unsorted_segment_sum() (ivy.array method)": [[328, "ivy.Array.unsorted_segment_sum"]], "unsorted_segment_sum() (ivy.container method)": [[328, "ivy.Container.unsorted_segment_sum"]], "vorbis_window() (in module ivy)": [[329, "ivy.vorbis_window"], [365, "ivy.vorbis_window"]], "vorbis_window() (ivy.container method)": [[329, "ivy.Container.vorbis_window"]], "allclose() (in module ivy)": [[330, "ivy.allclose"], [368, "ivy.allclose"]], "allclose() (ivy.array method)": [[330, "ivy.Array.allclose"]], "allclose() (ivy.container method)": [[330, "ivy.Container.allclose"]], "amax() (in module ivy)": [[331, "ivy.amax"], [368, "ivy.amax"]], "amax() (ivy.array method)": [[331, "ivy.Array.amax"]], "amax() (ivy.container method)": [[331, "ivy.Container.amax"]], "amin() (in module ivy)": [[332, "ivy.amin"], [368, "ivy.amin"]], "amin() (ivy.array method)": [[332, "ivy.Array.amin"]], "amin() (ivy.container method)": [[332, "ivy.Container.amin"]], "binarizer() (in module ivy)": [[333, "ivy.binarizer"], [368, "ivy.binarizer"]], "binarizer() (ivy.array method)": [[333, "ivy.Array.binarizer"]], "binarizer() (ivy.container method)": [[333, "ivy.Container.binarizer"]], "conj() (in module ivy)": [[334, "ivy.conj"], [368, "ivy.conj"]], "conj() (ivy.array method)": [[334, "ivy.Array.conj"]], "conj() (ivy.container method)": [[334, "ivy.Container.conj"]], "copysign() (in module ivy)": [[335, "ivy.copysign"], [368, "ivy.copysign"]], "copysign() (ivy.array method)": [[335, "ivy.Array.copysign"]], "copysign() (ivy.container method)": [[335, "ivy.Container.copysign"]], "count_nonzero() (in module ivy)": [[336, "ivy.count_nonzero"], [368, "ivy.count_nonzero"]], "count_nonzero() (ivy.array method)": [[336, "ivy.Array.count_nonzero"]], "count_nonzero() (ivy.container method)": [[336, "ivy.Container.count_nonzero"]], "diff() (in module ivy)": [[337, "ivy.diff"], [368, "ivy.diff"]], "diff() (ivy.array method)": [[337, "ivy.Array.diff"]], "diff() (ivy.container method)": [[337, "ivy.Container.diff"]], "digamma() (in module ivy)": [[338, "ivy.digamma"], [368, "ivy.digamma"]], "digamma() (ivy.array method)": [[338, "ivy.Array.digamma"]], "digamma() (ivy.container method)": [[338, "ivy.Container.digamma"]], "erfc() (in module ivy)": [[339, "ivy.erfc"], [368, "ivy.erfc"]], "erfc() (ivy.array method)": [[339, "ivy.Array.erfc"]], "erfc() (ivy.container method)": [[339, "ivy.Container.erfc"]], "erfinv() (in module ivy)": [[340, "ivy.erfinv"], [368, "ivy.erfinv"]], "erfinv() (ivy.array method)": [[340, "ivy.Array.erfinv"]], "erfinv() (ivy.container method)": [[340, "ivy.Container.erfinv"]], "fix() (in module ivy)": [[341, "ivy.fix"], [368, "ivy.fix"]], "fix() (ivy.array method)": [[341, "ivy.Array.fix"]], "fix() (ivy.container method)": [[341, "ivy.Container.fix"]], "float_power() (in module ivy)": [[342, "ivy.float_power"], [368, "ivy.float_power"]], "float_power() (ivy.array method)": [[342, "ivy.Array.float_power"]], "float_power() (ivy.container method)": [[342, "ivy.Container.float_power"]], "fmax() (in module ivy)": [[343, "ivy.fmax"], [368, "ivy.fmax"]], "fmax() (ivy.array method)": [[343, "ivy.Array.fmax"]], "fmax() (ivy.container method)": [[343, "ivy.Container.fmax"]], "frexp() (in module ivy)": [[344, "ivy.frexp"], [368, "ivy.frexp"]], "frexp() (ivy.array method)": [[344, "ivy.Array.frexp"]], "frexp() (ivy.container method)": [[344, "ivy.Container.frexp"]], "gradient() (in module ivy)": [[345, "ivy.gradient"], [368, "ivy.gradient"]], "gradient() (ivy.array method)": [[345, "ivy.Array.gradient"]], "gradient() (ivy.container method)": [[345, "ivy.Container.gradient"]], "hypot() (in module ivy)": [[346, "ivy.hypot"], [368, "ivy.hypot"]], "hypot() (ivy.array method)": [[346, "ivy.Array.hypot"]], "hypot() (ivy.container method)": [[346, "ivy.Container.hypot"]], "isclose() (in module ivy)": [[347, "ivy.isclose"], [368, "ivy.isclose"]], "isclose() (ivy.array method)": [[347, "ivy.Array.isclose"]], "isclose() (ivy.container method)": [[347, "ivy.Container.isclose"]], "ldexp() (in module ivy)": [[348, "ivy.ldexp"], [368, "ivy.ldexp"]], "ldexp() (ivy.array method)": [[348, "ivy.Array.ldexp"]], "ldexp() (ivy.container method)": [[348, "ivy.Container.ldexp"]], "lerp() (in module ivy)": [[349, "ivy.lerp"], [368, "ivy.lerp"]], "lerp() (ivy.array method)": [[349, "ivy.Array.lerp"]], "lerp() (ivy.container method)": [[349, "ivy.Container.lerp"]], "lgamma() (in module ivy)": [[350, "ivy.lgamma"], [368, "ivy.lgamma"]], "lgamma() (ivy.array method)": [[350, "ivy.Array.lgamma"]], "lgamma() (ivy.container method)": [[350, "ivy.Container.lgamma"]], "modf() (in module ivy)": [[351, "ivy.modf"], [368, "ivy.modf"]], "modf() (ivy.array method)": [[351, "ivy.Array.modf"]], "modf() (ivy.container method)": [[351, "ivy.Container.modf"]], "nansum() (in module ivy)": [[352, "ivy.nansum"], [368, "ivy.nansum"]], "nansum() (ivy.array method)": [[352, "ivy.Array.nansum"]], "nansum() (ivy.container method)": [[352, "ivy.Container.nansum"]], "nextafter() (in module ivy)": [[353, "ivy.nextafter"], [368, "ivy.nextafter"]], "nextafter() (ivy.array method)": [[353, "ivy.Array.nextafter"]], "nextafter() (ivy.container method)": [[353, "ivy.Container.nextafter"]], "signbit() (in module ivy)": [[354, "ivy.signbit"], [368, "ivy.signbit"]], "signbit() (ivy.array method)": [[354, "ivy.Array.signbit"]], "signbit() (ivy.container method)": [[354, "ivy.Container.signbit"]], "sinc() (in module ivy)": [[355, "ivy.sinc"], [368, "ivy.sinc"]], "sinc() (ivy.array method)": [[355, "ivy.Array.sinc"]], "sinc() (ivy.container method)": [[355, "ivy.Container.sinc"]], "sparsify_tensor() (in module ivy)": [[356, "ivy.sparsify_tensor"], [368, "ivy.sparsify_tensor"]], "sparsify_tensor() (ivy.array method)": [[356, "ivy.Array.sparsify_tensor"]], "sparsify_tensor() (ivy.container method)": [[356, "ivy.Container.sparsify_tensor"]], "xlogy() (in module ivy)": [[357, "ivy.xlogy"], [368, "ivy.xlogy"]], "xlogy() (ivy.array method)": [[357, "ivy.Array.xlogy"]], "xlogy() (ivy.container method)": [[357, "ivy.Container.xlogy"]], "zeta() (in module ivy)": [[358, "ivy.zeta"], [368, "ivy.zeta"]], "zeta() (ivy.array method)": [[358, "ivy.Array.zeta"]], "zeta() (ivy.container method)": [[358, "ivy.Container.zeta"]], "reduce() (in module ivy)": [[359, "ivy.reduce"], [369, "ivy.reduce"]], "reduce() (ivy.array method)": [[359, "ivy.Array.reduce"]], "reduce() (ivy.container method)": [[359, "ivy.Container.reduce"]], "bind_custom_gradient_function() (in module ivy)": [[360, "ivy.bind_custom_gradient_function"], [370, "ivy.bind_custom_gradient_function"]], "jvp() (in module ivy)": [[361, "ivy.jvp"], [370, "ivy.jvp"]], "vjp() (in module ivy)": [[362, "ivy.vjp"], [370, "ivy.vjp"]], "ivy.functional.ivy.experimental.activations": [[363, "module-ivy.functional.ivy.experimental.activations"]], "ivy.functional.ivy.experimental.constants": [[364, "module-ivy.functional.ivy.experimental.constants"]], "ivy.functional.ivy.experimental.creation": [[365, "module-ivy.functional.ivy.experimental.creation"]], "ivy.functional.ivy.experimental.data_type": [[366, "module-ivy.functional.ivy.experimental.data_type"]], "ivy.functional.ivy.experimental.device": [[367, "module-ivy.functional.ivy.experimental.device"]], "ivy.functional.ivy.experimental.elementwise": [[368, "module-ivy.functional.ivy.experimental.elementwise"]], "ivy.functional.ivy.experimental.general": [[369, "module-ivy.functional.ivy.experimental.general"]], "ivy.functional.ivy.experimental.gradients": [[370, "module-ivy.functional.ivy.experimental.gradients"]], "adaptive_avg_pool1d() (in module ivy)": [[371, "ivy.adaptive_avg_pool1d"], [385, "ivy.adaptive_avg_pool1d"]], "adaptive_avg_pool2d() (in module ivy)": [[371, "ivy.adaptive_avg_pool2d"], [386, "ivy.adaptive_avg_pool2d"]], "adaptive_max_pool2d() (in module ivy)": [[371, "ivy.adaptive_max_pool2d"], [387, "ivy.adaptive_max_pool2d"]], "adaptive_max_pool3d() (in module ivy)": [[371, "ivy.adaptive_max_pool3d"], [388, "ivy.adaptive_max_pool3d"]], "area_interpolate() (in module ivy)": [[371, "ivy.area_interpolate"], [389, "ivy.area_interpolate"]], "avg_pool1d() (in module ivy)": [[371, "ivy.avg_pool1d"], [390, "ivy.avg_pool1d"]], "avg_pool2d() (in module ivy)": [[371, "ivy.avg_pool2d"], [391, "ivy.avg_pool2d"]], "avg_pool3d() (in module ivy)": [[371, "ivy.avg_pool3d"], [392, "ivy.avg_pool3d"]], "dct() (in module ivy)": [[371, "ivy.dct"], [393, "ivy.dct"]], "dft() (in module ivy)": [[371, "ivy.dft"], [394, "ivy.dft"]], "dropout1d() (in module ivy)": [[371, "ivy.dropout1d"], [395, "ivy.dropout1d"]], "dropout2d() (in module ivy)": [[371, "ivy.dropout2d"], [396, "ivy.dropout2d"]], "dropout3d() (in module ivy)": [[371, "ivy.dropout3d"], [397, "ivy.dropout3d"]], "embedding() (in module ivy)": [[371, "ivy.embedding"], [398, "ivy.embedding"]], "fft() (in module ivy)": [[371, "ivy.fft"], [399, "ivy.fft"]], "fft2() (in module ivy)": [[371, "ivy.fft2"], [400, "ivy.fft2"]], "generate_einsum_equation() (in module ivy)": [[371, "ivy.generate_einsum_equation"], [401, "ivy.generate_einsum_equation"]], "get_interpolate_kernel() (in module ivy)": [[371, "ivy.get_interpolate_kernel"], [402, "ivy.get_interpolate_kernel"]], "idct() (in module ivy)": [[371, "ivy.idct"], [403, "ivy.idct"]], "ifft() (in module ivy)": [[371, "ivy.ifft"], [404, "ivy.ifft"]], "ifftn() (in module ivy)": [[371, "ivy.ifftn"], [405, "ivy.ifftn"]], "interp() (in module ivy)": [[371, "ivy.interp"], [406, "ivy.interp"]], "interpolate() (in module ivy)": [[371, "ivy.interpolate"], [407, "ivy.interpolate"]], "ivy.functional.ivy.experimental.layers": [[371, "module-ivy.functional.ivy.experimental.layers"]], "max_pool1d() (in module ivy)": [[371, "ivy.max_pool1d"], [408, "ivy.max_pool1d"]], "max_pool2d() (in module ivy)": [[371, "ivy.max_pool2d"], [409, "ivy.max_pool2d"]], "max_pool3d() (in module ivy)": [[371, "ivy.max_pool3d"], [410, "ivy.max_pool3d"]], "max_unpool1d() (in module ivy)": [[371, "ivy.max_unpool1d"], [411, "ivy.max_unpool1d"]], "nearest_interpolate() (in module ivy)": [[371, "ivy.nearest_interpolate"], [412, "ivy.nearest_interpolate"]], "pool() (in module ivy)": [[371, "ivy.pool"], [413, "ivy.pool"]], "reduce_window() (in module ivy)": [[371, "ivy.reduce_window"], [414, "ivy.reduce_window"]], "rfft() (in module ivy)": [[371, "ivy.rfft"], [415, "ivy.rfft"]], "rfftn() (in module ivy)": [[371, "ivy.rfftn"], [416, "ivy.rfftn"]], "rnn() (in module ivy)": [[371, "ivy.rnn"], [417, "ivy.rnn"]], "sliding_window() (in module ivy)": [[371, "ivy.sliding_window"], [418, "ivy.sliding_window"]], "stft() (in module ivy)": [[371, "ivy.stft"], [419, "ivy.stft"]], "adjoint() (in module ivy)": [[372, "ivy.adjoint"], [420, "ivy.adjoint"]], "batched_outer() (in module ivy)": [[372, "ivy.batched_outer"], [421, "ivy.batched_outer"]], "cond() (in module ivy)": [[372, "ivy.cond"], [422, "ivy.cond"]], "diagflat() (in module ivy)": [[372, "ivy.diagflat"], [423, "ivy.diagflat"]], "dot() (in module ivy)": [[372, "ivy.dot"], [424, "ivy.dot"]], "eig() (in module ivy)": [[372, "ivy.eig"], [425, "ivy.eig"], [633, "ivy.eig"], [668, "ivy.eig"]], "eigh_tridiagonal() (in module ivy)": [[372, "ivy.eigh_tridiagonal"], [426, "ivy.eigh_tridiagonal"]], "eigvals() (in module ivy)": [[372, "ivy.eigvals"], [427, "ivy.eigvals"]], "general_inner_product() (in module ivy)": [[372, "ivy.general_inner_product"], [428, "ivy.general_inner_product"]], "higher_order_moment() (in module ivy)": [[372, "ivy.higher_order_moment"], [429, "ivy.higher_order_moment"]], "initialize_tucker() (in module ivy)": [[372, "ivy.initialize_tucker"], [430, "ivy.initialize_tucker"]], "ivy.functional.ivy.experimental.linear_algebra": [[372, "module-ivy.functional.ivy.experimental.linear_algebra"]], "khatri_rao() (in module ivy)": [[372, "ivy.khatri_rao"], [431, "ivy.khatri_rao"]], "kron() (in module ivy)": [[372, "ivy.kron"], [432, "ivy.kron"]], "kronecker() (in module ivy)": [[372, "ivy.kronecker"], [433, "ivy.kronecker"]], "lu_factor() (in module ivy)": [[372, "ivy.lu_factor"], [434, "ivy.lu_factor"]], "lu_solve() (in module ivy)": [[372, "ivy.lu_solve"], [435, "ivy.lu_solve"]], "make_svd_non_negative() (in module ivy)": [[372, "ivy.make_svd_non_negative"], [436, "ivy.make_svd_non_negative"]], "matrix_exp() (in module ivy)": [[372, "ivy.matrix_exp"], [437, "ivy.matrix_exp"]], "mode_dot() (in module ivy)": [[372, "ivy.mode_dot"], [438, "ivy.mode_dot"]], "multi_dot() (in module ivy)": [[372, "ivy.multi_dot"], [439, "ivy.multi_dot"]], "multi_mode_dot() (in module ivy)": [[372, "ivy.multi_mode_dot"], [440, "ivy.multi_mode_dot"]], "partial_tucker() (in module ivy)": [[372, "ivy.partial_tucker"], [441, "ivy.partial_tucker"]], "solve_triangular() (in module ivy)": [[372, "ivy.solve_triangular"], [442, "ivy.solve_triangular"]], "svd_flip() (in module ivy)": [[372, "ivy.svd_flip"], [443, "ivy.svd_flip"]], "tensor_train() (in module ivy)": [[372, "ivy.tensor_train"], [444, "ivy.tensor_train"]], "truncated_svd() (in module ivy)": [[372, "ivy.truncated_svd"], [445, "ivy.truncated_svd"]], "tt_matrix_to_tensor() (in module ivy)": [[372, "ivy.tt_matrix_to_tensor"], [446, "ivy.tt_matrix_to_tensor"]], "tucker() (in module ivy)": [[372, "ivy.tucker"], [447, "ivy.tucker"]], "hinge_embedding_loss() (in module ivy)": [[373, "ivy.hinge_embedding_loss"], [448, "ivy.hinge_embedding_loss"]], "huber_loss() (in module ivy)": [[373, "ivy.huber_loss"], [449, "ivy.huber_loss"]], "ivy.functional.ivy.experimental.losses": [[373, "module-ivy.functional.ivy.experimental.losses"]], "kl_div() (in module ivy)": [[373, "ivy.kl_div"], [450, "ivy.kl_div"]], "l1_loss() (in module ivy)": [[373, "ivy.l1_loss"], [451, "ivy.l1_loss"]], "log_poisson_loss() (in module ivy)": [[373, "ivy.log_poisson_loss"], [452, "ivy.log_poisson_loss"]], "poisson_nll_loss() (in module ivy)": [[373, "ivy.poisson_nll_loss"], [453, "ivy.poisson_nll_loss"]], "smooth_l1_loss() (in module ivy)": [[373, "ivy.smooth_l1_loss"], [454, "ivy.smooth_l1_loss"]], "soft_margin_loss() (in module ivy)": [[373, "ivy.soft_margin_loss"], [455, "ivy.soft_margin_loss"]], "as_strided() (in module ivy)": [[374, "ivy.as_strided"], [456, "ivy.as_strided"]], "associative_scan() (in module ivy)": [[374, "ivy.associative_scan"], [457, "ivy.associative_scan"]], "atleast_1d() (in module ivy)": [[374, "ivy.atleast_1d"], [458, "ivy.atleast_1d"]], "atleast_2d() (in module ivy)": [[374, "ivy.atleast_2d"], [459, "ivy.atleast_2d"]], "atleast_3d() (in module ivy)": [[374, "ivy.atleast_3d"], [460, "ivy.atleast_3d"]], "broadcast_shapes() (in module ivy)": [[374, "ivy.broadcast_shapes"], [461, "ivy.broadcast_shapes"]], "check_scalar() (in module ivy)": [[374, "ivy.check_scalar"], [462, "ivy.check_scalar"]], "choose() (in module ivy)": [[374, "ivy.choose"], [463, "ivy.choose"]], "column_stack() (in module ivy)": [[374, "ivy.column_stack"], [464, "ivy.column_stack"]], "concat_from_sequence() (in module ivy)": [[374, "ivy.concat_from_sequence"], [465, "ivy.concat_from_sequence"]], "dsplit() (in module ivy)": [[374, "ivy.dsplit"], [466, "ivy.dsplit"]], "dstack() (in module ivy)": [[374, "ivy.dstack"], [467, "ivy.dstack"]], "expand() (in module ivy)": [[374, "ivy.expand"], [468, "ivy.expand"]], "fill_diagonal() (in module ivy)": [[374, "ivy.fill_diagonal"], [469, "ivy.fill_diagonal"]], "flatten() (in module ivy)": [[374, "ivy.flatten"], [470, "ivy.flatten"]], "fliplr() (in module ivy)": [[374, "ivy.fliplr"], [471, "ivy.fliplr"]], "flipud() (in module ivy)": [[374, "ivy.flipud"], [472, "ivy.flipud"]], "fold() (in module ivy)": [[374, "ivy.fold"], [473, "ivy.fold"]], "heaviside() (in module ivy)": [[374, "ivy.heaviside"], [474, "ivy.heaviside"]], "hsplit() (in module ivy)": [[374, "ivy.hsplit"], [475, "ivy.hsplit"]], "hstack() (in module ivy)": [[374, "ivy.hstack"], [476, "ivy.hstack"]], "i0() (in module ivy)": [[374, "ivy.i0"], [477, "ivy.i0"]], "ivy.functional.ivy.experimental.manipulation": [[374, "module-ivy.functional.ivy.experimental.manipulation"]], "matricize() (in module ivy)": [[374, "ivy.matricize"], [478, "ivy.matricize"]], "moveaxis() (in module ivy)": [[374, "ivy.moveaxis"], [479, "ivy.moveaxis"]], "pad() (in module ivy)": [[374, "ivy.pad"], [480, "ivy.pad"]], "partial_fold() (in module ivy)": [[374, "ivy.partial_fold"], [481, "ivy.partial_fold"]], "partial_tensor_to_vec() (in module ivy)": [[374, "ivy.partial_tensor_to_vec"], [482, "ivy.partial_tensor_to_vec"]], "partial_unfold() (in module ivy)": [[374, "ivy.partial_unfold"], [483, "ivy.partial_unfold"]], "partial_vec_to_tensor() (in module ivy)": [[374, "ivy.partial_vec_to_tensor"], [484, "ivy.partial_vec_to_tensor"]], "put_along_axis() (in module ivy)": [[374, "ivy.put_along_axis"], [485, "ivy.put_along_axis"]], "rot90() (in module ivy)": [[374, "ivy.rot90"], [486, "ivy.rot90"]], "soft_thresholding() (in module ivy)": [[374, "ivy.soft_thresholding"], [487, "ivy.soft_thresholding"]], "take() (in module ivy)": [[374, "ivy.take"], [488, "ivy.take"]], "take_along_axis() (in module ivy)": [[374, "ivy.take_along_axis"], [489, "ivy.take_along_axis"]], "top_k() (in module ivy)": [[374, "ivy.top_k"], [490, "ivy.top_k"]], "trim_zeros() (in module ivy)": [[374, "ivy.trim_zeros"], [491, "ivy.trim_zeros"]], "unflatten() (in module ivy)": [[374, "ivy.unflatten"], [492, "ivy.unflatten"]], "unfold() (in module ivy)": [[374, "ivy.unfold"], [493, "ivy.unfold"]], "unique_consecutive() (in module ivy)": [[374, "ivy.unique_consecutive"], [494, "ivy.unique_consecutive"]], "vsplit() (in module ivy)": [[374, "ivy.vsplit"], [495, "ivy.vsplit"]], "vstack() (in module ivy)": [[374, "ivy.vstack"], [496, "ivy.vstack"]], "ivy.functional.ivy.experimental.meta": [[375, "module-ivy.functional.ivy.experimental.meta"]], "ivy.functional.ivy.experimental.nest": [[376, "module-ivy.functional.ivy.experimental.nest"]], "batch_norm() (in module ivy)": [[377, "ivy.batch_norm"], [497, "ivy.batch_norm"]], "group_norm() (in module ivy)": [[377, "ivy.group_norm"], [498, "ivy.group_norm"]], "instance_norm() (in module ivy)": [[377, "ivy.instance_norm"], [499, "ivy.instance_norm"]], "ivy.functional.ivy.experimental.norms": [[377, "module-ivy.functional.ivy.experimental.norms"]], "l1_normalize() (in module ivy)": [[377, "ivy.l1_normalize"], [500, "ivy.l1_normalize"]], "l2_normalize() (in module ivy)": [[377, "ivy.l2_normalize"], [501, "ivy.l2_normalize"]], "local_response_norm() (in module ivy)": [[377, "ivy.local_response_norm"], [502, "ivy.local_response_norm"]], "lp_normalize() (in module ivy)": [[377, "ivy.lp_normalize"], [503, "ivy.lp_normalize"]], "bernoulli() (in module ivy)": [[378, "ivy.bernoulli"], [504, "ivy.bernoulli"]], "beta() (in module ivy)": [[378, "ivy.beta"], [505, "ivy.beta"]], "dirichlet() (in module ivy)": [[378, "ivy.dirichlet"], [506, "ivy.dirichlet"]], "gamma() (in module ivy)": [[378, "ivy.gamma"], [507, "ivy.gamma"]], "ivy.functional.ivy.experimental.random": [[378, "module-ivy.functional.ivy.experimental.random"]], "poisson() (in module ivy)": [[378, "ivy.poisson"], [508, "ivy.poisson"]], "ivy.functional.ivy.experimental.searching": [[379, "module-ivy.functional.ivy.experimental.searching"]], "unravel_index() (in module ivy)": [[379, "ivy.unravel_index"], [509, "ivy.unravel_index"]], "ivy.functional.ivy.experimental.set": [[380, "module-ivy.functional.ivy.experimental.set"]], "invert_permutation() (in module ivy)": [[381, "ivy.invert_permutation"], [510, "ivy.invert_permutation"]], "ivy.functional.ivy.experimental.sorting": [[381, "module-ivy.functional.ivy.experimental.sorting"]], "lexsort() (in module ivy)": [[381, "ivy.lexsort"], [511, "ivy.lexsort"]], "nativesparsearray (class in ivy)": [[382, "ivy.NativeSparseArray"]], "sparsearray (class in ivy)": [[382, "ivy.SparseArray"]], "is_ivy_sparse_array() (in module ivy)": [[382, "ivy.is_ivy_sparse_array"], [512, "ivy.is_ivy_sparse_array"]], "is_native_sparse_array() (in module ivy)": [[382, "ivy.is_native_sparse_array"], [513, "ivy.is_native_sparse_array"]], "ivy.functional.ivy.experimental.sparse_array": [[382, "module-ivy.functional.ivy.experimental.sparse_array"]], "native_sparse_array() (in module ivy)": [[382, "ivy.native_sparse_array"], [514, "ivy.native_sparse_array"]], "native_sparse_array_to_indices_values_and_shape() (in module ivy)": [[382, "ivy.native_sparse_array_to_indices_values_and_shape"], [515, "ivy.native_sparse_array_to_indices_values_and_shape"]], "bincount() (in module ivy)": [[383, "ivy.bincount"], [516, "ivy.bincount"]], "corrcoef() (in module ivy)": [[383, "ivy.corrcoef"], [517, "ivy.corrcoef"]], "cov() (in module ivy)": [[383, "ivy.cov"], [518, "ivy.cov"]], "cummax() (in module ivy)": [[383, "ivy.cummax"], [519, "ivy.cummax"]], "cummin() (in module ivy)": [[383, "ivy.cummin"], [520, "ivy.cummin"]], "histogram() (in module ivy)": [[383, "ivy.histogram"], [521, "ivy.histogram"]], "igamma() (in module ivy)": [[383, "ivy.igamma"], [522, "ivy.igamma"]], "ivy.functional.ivy.experimental.statistical": [[383, "module-ivy.functional.ivy.experimental.statistical"]], "median() (in module ivy)": [[383, "ivy.median"], [523, "ivy.median"]], "nanmean() (in module ivy)": [[383, "ivy.nanmean"], [524, "ivy.nanmean"]], "nanmedian() (in module ivy)": [[383, "ivy.nanmedian"], [525, "ivy.nanmedian"]], "nanmin() (in module ivy)": [[383, "ivy.nanmin"], [526, "ivy.nanmin"]], "nanprod() (in module ivy)": [[383, "ivy.nanprod"], [527, "ivy.nanprod"]], "quantile() (in module ivy)": [[383, "ivy.quantile"], [528, "ivy.quantile"]], "ivy.functional.ivy.experimental.utility": [[384, "module-ivy.functional.ivy.experimental.utility"]], "optional_get_element() (in module ivy)": [[384, "ivy.optional_get_element"], [529, "ivy.optional_get_element"]], "adaptive_avg_pool1d() (ivy.array method)": [[385, "ivy.Array.adaptive_avg_pool1d"]], "adaptive_avg_pool1d() (ivy.container method)": [[385, "ivy.Container.adaptive_avg_pool1d"]], "adaptive_avg_pool2d() (ivy.array method)": [[386, "ivy.Array.adaptive_avg_pool2d"]], "adaptive_avg_pool2d() (ivy.container method)": [[386, "ivy.Container.adaptive_avg_pool2d"]], "adaptive_max_pool2d() (ivy.array method)": [[387, "ivy.Array.adaptive_max_pool2d"]], "adaptive_max_pool2d() (ivy.container method)": [[387, "ivy.Container.adaptive_max_pool2d"]], "adaptive_max_pool3d() (ivy.array method)": [[388, "ivy.Array.adaptive_max_pool3d"]], "adaptive_max_pool3d() (ivy.container method)": [[388, "ivy.Container.adaptive_max_pool3d"]], "avg_pool1d() (ivy.array method)": [[390, "ivy.Array.avg_pool1d"]], "avg_pool1d() (ivy.container method)": [[390, "ivy.Container.avg_pool1d"]], "avg_pool2d() (ivy.array method)": [[391, "ivy.Array.avg_pool2d"]], "avg_pool2d() (ivy.container method)": [[391, "ivy.Container.avg_pool2d"]], "avg_pool3d() (ivy.array method)": [[392, "ivy.Array.avg_pool3d"]], "avg_pool3d() (ivy.container method)": [[392, "ivy.Container.avg_pool3d"]], "dct() (ivy.array method)": [[393, "ivy.Array.dct"]], "dct() (ivy.container method)": [[393, "ivy.Container.dct"]], "dft() (ivy.array method)": [[394, "ivy.Array.dft"]], "dft() (ivy.container method)": [[394, "ivy.Container.dft"]], "dropout1d() (ivy.array method)": [[395, "ivy.Array.dropout1d"]], "dropout1d() (ivy.container method)": [[395, "ivy.Container.dropout1d"]], "dropout2d() (ivy.array method)": [[396, "ivy.Array.dropout2d"]], "dropout2d() (ivy.container method)": [[396, "ivy.Container.dropout2d"]], "dropout3d() (ivy.array method)": [[397, "ivy.Array.dropout3d"]], "dropout3d() (ivy.container method)": [[397, "ivy.Container.dropout3d"]], "embedding() (ivy.array method)": [[398, "ivy.Array.embedding"]], "embedding() (ivy.container method)": [[398, "ivy.Container.embedding"]], "fft() (ivy.array method)": [[399, "ivy.Array.fft"]], "fft() (ivy.container method)": [[399, "ivy.Container.fft"]], "fft2() (ivy.array method)": [[400, "ivy.Array.fft2"]], "idct() (ivy.array method)": [[403, "ivy.Array.idct"]], "idct() (ivy.container method)": [[403, "ivy.Container.idct"]], "ifft() (ivy.array method)": [[404, "ivy.Array.ifft"]], "ifft() (ivy.container method)": [[404, "ivy.Container.ifft"]], "ifftn() (ivy.array method)": [[405, "ivy.Array.ifftn"]], "ifftn() (ivy.container method)": [[405, "ivy.Container.ifftn"]], "interpolate() (ivy.array method)": [[407, "ivy.Array.interpolate"]], "interpolate() (ivy.container method)": [[407, "ivy.Container.interpolate"]], "max_pool1d() (ivy.array method)": [[408, "ivy.Array.max_pool1d"]], "max_pool1d() (ivy.container method)": [[408, "ivy.Container.max_pool1d"]], "max_pool2d() (ivy.array method)": [[409, "ivy.Array.max_pool2d"]], "max_pool2d() (ivy.container method)": [[409, "ivy.Container.max_pool2d"]], "max_pool3d() (ivy.array method)": [[410, "ivy.Array.max_pool3d"]], "max_pool3d() (ivy.container method)": [[410, "ivy.Container.max_pool3d"]], "max_unpool1d() (ivy.array method)": [[411, "ivy.Array.max_unpool1d"]], "max_unpool1d() (ivy.container method)": [[411, "ivy.Container.max_unpool1d"]], "reduce_window() (ivy.array method)": [[414, "ivy.Array.reduce_window"]], "reduce_window() (ivy.container method)": [[414, "ivy.Container.reduce_window"]], "rfft() (ivy.array method)": [[415, "ivy.Array.rfft"]], "rfft() (ivy.container method)": [[415, "ivy.Container.rfft"]], "rfftn() (ivy.array method)": [[416, "ivy.Array.rfftn"]], "rfftn() (ivy.container method)": [[416, "ivy.Container.rfftn"]], "sliding_window() (ivy.array method)": [[418, "ivy.Array.sliding_window"]], "sliding_window() (ivy.container method)": [[418, "ivy.Container.sliding_window"]], "stft() (ivy.array method)": [[419, "ivy.Array.stft"]], "stft() (ivy.container method)": [[419, "ivy.Container.stft"]], "adjoint() (ivy.array method)": [[420, "ivy.Array.adjoint"]], "adjoint() (ivy.container method)": [[420, "ivy.Container.adjoint"]], "batched_outer() (ivy.array method)": [[421, "ivy.Array.batched_outer"]], "batched_outer() (ivy.container method)": [[421, "ivy.Container.batched_outer"]], "cond() (ivy.array method)": [[422, "ivy.Array.cond"]], "cond() (ivy.container method)": [[422, "ivy.Container.cond"]], "diagflat() (ivy.array method)": [[423, "ivy.Array.diagflat"]], "diagflat() (ivy.container method)": [[423, "ivy.Container.diagflat"]], "dot() (ivy.array method)": [[424, "ivy.Array.dot"]], "dot() (ivy.container method)": [[424, "ivy.Container.dot"]], "eig() (ivy.array method)": [[425, "ivy.Array.eig"], [668, "ivy.Array.eig"]], "eig() (ivy.container method)": [[425, "ivy.Container.eig"], [668, "ivy.Container.eig"]], "eigh_tridiagonal() (ivy.array method)": [[426, "ivy.Array.eigh_tridiagonal"]], "eigh_tridiagonal() (ivy.container method)": [[426, "ivy.Container.eigh_tridiagonal"]], "eigvals() (ivy.array method)": [[427, "ivy.Array.eigvals"]], "eigvals() (ivy.container method)": [[427, "ivy.Container.eigvals"]], "general_inner_product() (ivy.array method)": [[428, "ivy.Array.general_inner_product"]], "general_inner_product() (ivy.container method)": [[428, "ivy.Container.general_inner_product"]], "higher_order_moment() (ivy.array method)": [[429, "ivy.Array.higher_order_moment"]], "higher_order_moment() (ivy.container method)": [[429, "ivy.Container.higher_order_moment"]], "initialize_tucker() (ivy.array method)": [[430, "ivy.Array.initialize_tucker"]], "initialize_tucker() (ivy.container method)": [[430, "ivy.Container.initialize_tucker"]], "kron() (ivy.array method)": [[432, "ivy.Array.kron"]], "kron() (ivy.container method)": [[432, "ivy.Container.kron"]], "make_svd_non_negative() (ivy.array method)": [[436, "ivy.Array.make_svd_non_negative"]], "make_svd_non_negative() (ivy.container method)": [[436, "ivy.Container.make_svd_non_negative"]], "matrix_exp() (ivy.array method)": [[437, "ivy.Array.matrix_exp"]], "matrix_exp() (ivy.container method)": [[437, "ivy.Container.matrix_exp"]], "mode_dot() (ivy.array method)": [[438, "ivy.Array.mode_dot"]], "mode_dot() (ivy.container method)": [[438, "ivy.Container.mode_dot"]], "multi_dot() (ivy.array method)": [[439, "ivy.Array.multi_dot"]], "multi_dot() (ivy.container method)": [[439, "ivy.Container.multi_dot"]], "multi_mode_dot() (ivy.array method)": [[440, "ivy.Array.multi_mode_dot"]], "multi_mode_dot() (ivy.container method)": [[440, "ivy.Container.multi_mode_dot"]], "partial_tucker() (ivy.array method)": [[441, "ivy.Array.partial_tucker"]], "partial_tucker() (ivy.container method)": [[441, "ivy.Container.partial_tucker"]], "svd_flip() (ivy.array method)": [[443, "ivy.Array.svd_flip"]], "svd_flip() (ivy.container method)": [[443, "ivy.Container.svd_flip"]], "tensor_train() (ivy.array method)": [[444, "ivy.Array.tensor_train"]], "tensor_train() (ivy.container method)": [[444, "ivy.Container.tensor_train"]], "truncated_svd() (ivy.array method)": [[445, "ivy.Array.truncated_svd"]], "truncated_svd() (ivy.container method)": [[445, "ivy.Container.truncated_svd"]], "tt_matrix_to_tensor() (ivy.array method)": [[446, "ivy.Array.tt_matrix_to_tensor"]], "tt_matrix_to_tensor() (ivy.container method)": [[446, "ivy.Container.tt_matrix_to_tensor"]], "tucker() (ivy.array method)": [[447, "ivy.Array.tucker"]], "tucker() (ivy.container method)": [[447, "ivy.Container.tucker"]], "hinge_embedding_loss() (ivy.array method)": [[448, "ivy.Array.hinge_embedding_loss"]], "hinge_embedding_loss() (ivy.container method)": [[448, "ivy.Container.hinge_embedding_loss"]], "huber_loss() (ivy.array method)": [[449, "ivy.Array.huber_loss"]], "huber_loss() (ivy.container method)": [[449, "ivy.Container.huber_loss"]], "kl_div() (ivy.array method)": [[450, "ivy.Array.kl_div"]], "kl_div() (ivy.container method)": [[450, "ivy.Container.kl_div"]], "l1_loss() (ivy.array method)": [[451, "ivy.Array.l1_loss"]], "l1_loss() (ivy.container method)": [[451, "ivy.Container.l1_loss"]], "log_poisson_loss() (ivy.array method)": [[452, "ivy.Array.log_poisson_loss"]], "log_poisson_loss() (ivy.container method)": [[452, "ivy.Container.log_poisson_loss"]], "poisson_nll_loss() (ivy.array method)": [[453, "ivy.Array.poisson_nll_loss"]], "poisson_nll_loss() (ivy.container method)": [[453, "ivy.Container.poisson_nll_loss"]], "smooth_l1_loss() (ivy.array method)": [[454, "ivy.Array.smooth_l1_loss"]], "smooth_l1_loss() (ivy.container method)": [[454, "ivy.Container.smooth_l1_loss"]], "soft_margin_loss() (ivy.array method)": [[455, "ivy.Array.soft_margin_loss"]], "soft_margin_loss() (ivy.container method)": [[455, "ivy.Container.soft_margin_loss"]], "as_strided() (ivy.array method)": [[456, "ivy.Array.as_strided"]], "as_strided() (ivy.container method)": [[456, "ivy.Container.as_strided"]], "associative_scan() (ivy.array method)": [[457, "ivy.Array.associative_scan"]], "associative_scan() (ivy.container method)": [[457, "ivy.Container.associative_scan"]], "atleast_1d() (ivy.array method)": [[458, "ivy.Array.atleast_1d"]], "atleast_1d() (ivy.container method)": [[458, "ivy.Container.atleast_1d"]], "atleast_2d() (ivy.array method)": [[459, "ivy.Array.atleast_2d"]], "atleast_2d() (ivy.container method)": [[459, "ivy.Container.atleast_2d"]], "atleast_3d() (ivy.array method)": [[460, "ivy.Array.atleast_3d"]], "atleast_3d() (ivy.container method)": [[460, "ivy.Container.atleast_3d"]], "broadcast_shapes() (ivy.container method)": [[461, "ivy.Container.broadcast_shapes"]], "column_stack() (ivy.array method)": [[464, "ivy.Array.column_stack"]], "column_stack() (ivy.container method)": [[464, "ivy.Container.column_stack"]], "concat_from_sequence() (ivy.array method)": [[465, "ivy.Array.concat_from_sequence"]], "concat_from_sequence() (ivy.container method)": [[465, "ivy.Container.concat_from_sequence"]], "dsplit() (ivy.array method)": [[466, "ivy.Array.dsplit"]], "dsplit() (ivy.container method)": [[466, "ivy.Container.dsplit"]], "dstack() (ivy.array method)": [[467, "ivy.Array.dstack"]], "dstack() (ivy.container method)": [[467, "ivy.Container.dstack"]], "expand() (ivy.array method)": [[468, "ivy.Array.expand"]], "expand() (ivy.container method)": [[468, "ivy.Container.expand"]], "fill_diagonal() (ivy.array method)": [[469, "ivy.Array.fill_diagonal"]], "fill_diagonal() (ivy.container method)": [[469, "ivy.Container.fill_diagonal"]], "flatten() (ivy.array method)": [[470, "ivy.Array.flatten"]], "flatten() (ivy.container method)": [[470, "ivy.Container.flatten"]], "fliplr() (ivy.array method)": [[471, "ivy.Array.fliplr"]], "fliplr() (ivy.container method)": [[471, "ivy.Container.fliplr"]], "flipud() (ivy.array method)": [[472, "ivy.Array.flipud"]], "flipud() (ivy.container method)": [[472, "ivy.Container.flipud"]], "fold() (ivy.array method)": [[473, "ivy.Array.fold"]], "fold() (ivy.container method)": [[473, "ivy.Container.fold"]], "heaviside() (ivy.array method)": [[474, "ivy.Array.heaviside"]], "heaviside() (ivy.container method)": [[474, "ivy.Container.heaviside"]], "hsplit() (ivy.array method)": [[475, "ivy.Array.hsplit"]], "hsplit() (ivy.container method)": [[475, "ivy.Container.hsplit"]], "hstack() (ivy.array method)": [[476, "ivy.Array.hstack"]], "hstack() (ivy.container method)": [[476, "ivy.Container.hstack"]], "i0() (ivy.array method)": [[477, "ivy.Array.i0"]], "i0() (ivy.container method)": [[477, "ivy.Container.i0"]], "matricize() (ivy.array method)": [[478, "ivy.Array.matricize"]], "matricize() (ivy.container method)": [[478, "ivy.Container.matricize"]], "moveaxis() (ivy.array method)": [[479, "ivy.Array.moveaxis"]], "moveaxis() (ivy.container method)": [[479, "ivy.Container.moveaxis"]], "pad() (ivy.array method)": [[480, "ivy.Array.pad"]], "pad() (ivy.container method)": [[480, "ivy.Container.pad"]], "partial_fold() (ivy.array method)": [[481, "ivy.Array.partial_fold"]], "partial_fold() (ivy.container method)": [[481, "ivy.Container.partial_fold"]], "partial_tensor_to_vec() (ivy.array method)": [[482, "ivy.Array.partial_tensor_to_vec"]], "partial_tensor_to_vec() (ivy.container method)": [[482, "ivy.Container.partial_tensor_to_vec"]], "partial_unfold() (ivy.array method)": [[483, "ivy.Array.partial_unfold"]], "partial_unfold() (ivy.container method)": [[483, "ivy.Container.partial_unfold"]], "partial_vec_to_tensor() (ivy.array method)": [[484, "ivy.Array.partial_vec_to_tensor"]], "partial_vec_to_tensor() (ivy.container method)": [[484, "ivy.Container.partial_vec_to_tensor"]], "put_along_axis() (ivy.array method)": [[485, "ivy.Array.put_along_axis"]], "put_along_axis() (ivy.container method)": [[485, "ivy.Container.put_along_axis"]], "rot90() (ivy.array method)": [[486, "ivy.Array.rot90"]], "rot90() (ivy.container method)": [[486, "ivy.Container.rot90"]], "soft_thresholding() (ivy.array method)": [[487, "ivy.Array.soft_thresholding"]], "soft_thresholding() (ivy.container method)": [[487, "ivy.Container.soft_thresholding"]], "take() (ivy.array method)": [[488, "ivy.Array.take"]], "take() (ivy.container method)": [[488, "ivy.Container.take"]], "take_along_axis() (ivy.array method)": [[489, "ivy.Array.take_along_axis"]], "take_along_axis() (ivy.container method)": [[489, "ivy.Container.take_along_axis"]], "top_k() (ivy.array method)": [[490, "ivy.Array.top_k"]], "top_k() (ivy.container method)": [[490, "ivy.Container.top_k"]], "trim_zeros() (ivy.array method)": [[491, "ivy.Array.trim_zeros"]], "trim_zeros() (ivy.container method)": [[491, "ivy.Container.trim_zeros"]], "unflatten() (ivy.array method)": [[492, "ivy.Array.unflatten"]], "unflatten() (ivy.container method)": [[492, "ivy.Container.unflatten"]], "unfold() (ivy.array method)": [[493, "ivy.Array.unfold"]], "unfold() (ivy.container method)": [[493, "ivy.Container.unfold"]], "unique_consecutive() (ivy.array method)": [[494, "ivy.Array.unique_consecutive"]], "unique_consecutive() (ivy.container method)": [[494, "ivy.Container.unique_consecutive"]], "vsplit() (ivy.array method)": [[495, "ivy.Array.vsplit"]], "vsplit() (ivy.container method)": [[495, "ivy.Container.vsplit"]], "vstack() (ivy.array method)": [[496, "ivy.Array.vstack"]], "vstack() (ivy.container method)": [[496, "ivy.Container.vstack"]], "batch_norm() (ivy.array method)": [[497, "ivy.Array.batch_norm"]], "batch_norm() (ivy.container method)": [[497, "ivy.Container.batch_norm"]], "group_norm() (ivy.array method)": [[498, "ivy.Array.group_norm"]], "group_norm() (ivy.container method)": [[498, "ivy.Container.group_norm"]], "instance_norm() (ivy.array method)": [[499, "ivy.Array.instance_norm"]], "instance_norm() (ivy.container method)": [[499, "ivy.Container.instance_norm"]], "l1_normalize() (ivy.array method)": [[500, "ivy.Array.l1_normalize"]], "l1_normalize() (ivy.container method)": [[500, "ivy.Container.l1_normalize"]], "l2_normalize() (ivy.array method)": [[501, "ivy.Array.l2_normalize"]], "l2_normalize() (ivy.container method)": [[501, "ivy.Container.l2_normalize"]], "lp_normalize() (ivy.array method)": [[503, "ivy.Array.lp_normalize"]], "lp_normalize() (ivy.container method)": [[503, "ivy.Container.lp_normalize"]], "bernoulli() (ivy.array method)": [[504, "ivy.Array.bernoulli"]], "bernoulli() (ivy.container method)": [[504, "ivy.Container.bernoulli"]], "beta() (ivy.array method)": [[505, "ivy.Array.beta"]], "beta() (ivy.container method)": [[505, "ivy.Container.beta"]], "dirichlet() (ivy.array method)": [[506, "ivy.Array.dirichlet"]], "dirichlet() (ivy.container method)": [[506, "ivy.Container.dirichlet"]], "gamma() (ivy.array method)": [[507, "ivy.Array.gamma"]], "gamma() (ivy.container method)": [[507, "ivy.Container.gamma"]], "poisson() (ivy.array method)": [[508, "ivy.Array.poisson"]], "poisson() (ivy.container method)": [[508, "ivy.Container.poisson"]], "unravel_index() (ivy.array method)": [[509, "ivy.Array.unravel_index"]], "unravel_index() (ivy.container method)": [[509, "ivy.Container.unravel_index"]], "invert_permutation() (ivy.container method)": [[510, "ivy.Container.invert_permutation"]], "lexsort() (ivy.array method)": [[511, "ivy.Array.lexsort"]], "lexsort() (ivy.container method)": [[511, "ivy.Container.lexsort"]], "bincount() (ivy.array method)": [[516, "ivy.Array.bincount"]], "bincount() (ivy.container method)": [[516, "ivy.Container.bincount"]], "corrcoef() (ivy.array method)": [[517, "ivy.Array.corrcoef"]], "corrcoef() (ivy.container method)": [[517, "ivy.Container.corrcoef"]], "cov() (ivy.array method)": [[518, "ivy.Array.cov"]], "cov() (ivy.container method)": [[518, "ivy.Container.cov"]], "cummax() (ivy.array method)": [[519, "ivy.Array.cummax"]], "cummax() (ivy.container method)": [[519, "ivy.Container.cummax"]], "cummin() (ivy.array method)": [[520, "ivy.Array.cummin"]], "cummin() (ivy.container method)": [[520, "ivy.Container.cummin"]], "histogram() (ivy.array method)": [[521, "ivy.Array.histogram"]], "histogram() (ivy.container method)": [[521, "ivy.Container.histogram"]], "igamma() (ivy.array method)": [[522, "ivy.Array.igamma"]], "igamma() (ivy.container method)": [[522, "ivy.Container.igamma"]], "median() (ivy.array method)": [[523, "ivy.Array.median"]], "median() (ivy.container method)": [[523, "ivy.Container.median"]], "nanmean() (ivy.array method)": [[524, "ivy.Array.nanmean"]], "nanmean() (ivy.container method)": [[524, "ivy.Container.nanmean"]], "nanmedian() (ivy.array method)": [[525, "ivy.Array.nanmedian"]], "nanmedian() (ivy.container method)": [[525, "ivy.Container.nanmedian"]], "nanmin() (ivy.array method)": [[526, "ivy.Array.nanmin"]], "nanmin() (ivy.container method)": [[526, "ivy.Container.nanmin"]], "nanprod() (ivy.array method)": [[527, "ivy.Array.nanprod"]], "nanprod() (ivy.container method)": [[527, "ivy.Container.nanprod"]], "quantile() (ivy.array method)": [[528, "ivy.Array.quantile"]], "quantile() (ivy.container method)": [[528, "ivy.Container.quantile"]], "optional_get_element() (ivy.array method)": [[529, "ivy.Array.optional_get_element"]], "optional_get_element() (ivy.container method)": [[529, "ivy.Container.optional_get_element"]], "all_equal() (in module ivy)": [[530, "ivy.all_equal"], [630, "ivy.all_equal"]], "all_equal() (ivy.array method)": [[530, "ivy.Array.all_equal"]], "all_equal() (ivy.container method)": [[530, "ivy.Container.all_equal"]], "arg_info() (in module ivy)": [[531, "ivy.arg_info"], [630, "ivy.arg_info"]], "arg_names() (in module ivy)": [[532, "ivy.arg_names"], [630, "ivy.arg_names"]], "array_equal() (in module ivy)": [[533, "ivy.array_equal"], [630, "ivy.array_equal"]], "array_equal() (ivy.array method)": [[533, "ivy.Array.array_equal"]], "array_equal() (ivy.container method)": [[533, "ivy.Container.array_equal"]], "assert_supports_inplace() (in module ivy)": [[534, "ivy.assert_supports_inplace"], [630, "ivy.assert_supports_inplace"]], "assert_supports_inplace() (ivy.array method)": [[534, "ivy.Array.assert_supports_inplace"]], "assert_supports_inplace() (ivy.container method)": [[534, "ivy.Container.assert_supports_inplace"]], "cache_fn() (in module ivy)": [[535, "ivy.cache_fn"], [630, "ivy.cache_fn"]], "clip_matrix_norm() (in module ivy)": [[536, "ivy.clip_matrix_norm"], [630, "ivy.clip_matrix_norm"]], "clip_matrix_norm() (ivy.array method)": [[536, "ivy.Array.clip_matrix_norm"]], "clip_matrix_norm() (ivy.container method)": [[536, "ivy.Container.clip_matrix_norm"]], "clip_vector_norm() (in module ivy)": [[537, "ivy.clip_vector_norm"], [630, "ivy.clip_vector_norm"]], "clip_vector_norm() (ivy.array method)": [[537, "ivy.Array.clip_vector_norm"]], "clip_vector_norm() (ivy.container method)": [[537, "ivy.Container.clip_vector_norm"]], "container_types() (in module ivy)": [[538, "ivy.container_types"], [630, "ivy.container_types"]], "current_backend_str() (in module ivy)": [[539, "ivy.current_backend_str"], [630, "ivy.current_backend_str"]], "default() (in module ivy)": [[540, "ivy.default"], [630, "ivy.default"]], "default() (ivy.array method)": [[540, "ivy.Array.default"]], "einops_rearrange() (in module ivy)": [[541, "ivy.einops_rearrange"], [630, "ivy.einops_rearrange"]], "einops_rearrange() (ivy.array method)": [[541, "ivy.Array.einops_rearrange"]], "einops_rearrange() (ivy.container method)": [[541, "ivy.Container.einops_rearrange"]], "einops_reduce() (in module ivy)": [[542, "ivy.einops_reduce"], [630, "ivy.einops_reduce"]], "einops_reduce() (ivy.array method)": [[542, "ivy.Array.einops_reduce"]], "einops_reduce() (ivy.container method)": [[542, "ivy.Container.einops_reduce"]], "einops_repeat() (in module ivy)": [[543, "ivy.einops_repeat"], [630, "ivy.einops_repeat"]], "einops_repeat() (ivy.array method)": [[543, "ivy.Array.einops_repeat"]], "einops_repeat() (ivy.container method)": [[543, "ivy.Container.einops_repeat"]], "exists() (in module ivy)": [[544, "ivy.exists"], [630, "ivy.exists"]], "exists() (ivy.array method)": [[544, "ivy.Array.exists"]], "exists() (ivy.container method)": [[544, "ivy.Container.exists"]], "fourier_encode() (in module ivy)": [[545, "ivy.fourier_encode"], [630, "ivy.fourier_encode"]], "fourier_encode() (ivy.array method)": [[545, "ivy.Array.fourier_encode"]], "fourier_encode() (ivy.container method)": [[545, "ivy.Container.fourier_encode"]], "function_supported_devices_and_dtypes() (in module ivy)": [[546, "ivy.function_supported_devices_and_dtypes"], [630, "ivy.function_supported_devices_and_dtypes"]], "function_unsupported_devices_and_dtypes() (in module ivy)": [[547, "ivy.function_unsupported_devices_and_dtypes"], [630, "ivy.function_unsupported_devices_and_dtypes"]], "gather() (in module ivy)": [[548, "ivy.gather"], [630, "ivy.gather"]], "gather() (ivy.array method)": [[548, "ivy.Array.gather"]], "gather() (ivy.container method)": [[548, "ivy.Container.gather"]], "gather_nd() (in module ivy)": [[549, "ivy.gather_nd"], [630, "ivy.gather_nd"]], "gather_nd() (ivy.array method)": [[549, "ivy.Array.gather_nd"]], "gather_nd() (ivy.container method)": [[549, "ivy.Container.gather_nd"]], "get_all_arrays_in_memory() (in module ivy)": [[550, "ivy.get_all_arrays_in_memory"], [630, "ivy.get_all_arrays_in_memory"]], "get_item() (in module ivy)": [[551, "ivy.get_item"], [630, "ivy.get_item"]], "get_num_dims() (in module ivy)": [[552, "ivy.get_num_dims"], [630, "ivy.get_num_dims"]], "get_num_dims() (ivy.array method)": [[552, "ivy.Array.get_num_dims"]], "get_num_dims() (ivy.container method)": [[552, "ivy.Container.get_num_dims"]], "get_referrers_recursive() (in module ivy)": [[553, "ivy.get_referrers_recursive"], [630, "ivy.get_referrers_recursive"]], "has_nans() (in module ivy)": [[554, "ivy.has_nans"], [630, "ivy.has_nans"]], "has_nans() (ivy.array method)": [[554, "ivy.Array.has_nans"]], "has_nans() (ivy.container method)": [[554, "ivy.Container.has_nans"]], "inplace_arrays_supported() (in module ivy)": [[555, "ivy.inplace_arrays_supported"], [630, "ivy.inplace_arrays_supported"]], "inplace_decrement() (in module ivy)": [[556, "ivy.inplace_decrement"], [630, "ivy.inplace_decrement"]], "inplace_decrement() (ivy.array method)": [[556, "ivy.Array.inplace_decrement"]], "inplace_decrement() (ivy.container method)": [[556, "ivy.Container.inplace_decrement"]], "inplace_increment() (in module ivy)": [[557, "ivy.inplace_increment"], [630, "ivy.inplace_increment"]], "inplace_increment() (ivy.array method)": [[557, "ivy.Array.inplace_increment"]], "inplace_increment() (ivy.container method)": [[557, "ivy.Container.inplace_increment"]], "inplace_update() (in module ivy)": [[558, "ivy.inplace_update"], [630, "ivy.inplace_update"]], "inplace_update() (ivy.array method)": [[558, "ivy.Array.inplace_update"]], "inplace_update() (ivy.container method)": [[558, "ivy.Container.inplace_update"]], "inplace_variables_supported() (in module ivy)": [[559, "ivy.inplace_variables_supported"], [630, "ivy.inplace_variables_supported"]], "is_array() (in module ivy)": [[560, "ivy.is_array"], [630, "ivy.is_array"]], "is_array() (ivy.array method)": [[560, "ivy.Array.is_array"]], "is_array() (ivy.container method)": [[560, "ivy.Container.is_array"]], "is_ivy_array() (in module ivy)": [[561, "ivy.is_ivy_array"], [630, "ivy.is_ivy_array"]], "is_ivy_array() (ivy.array method)": [[561, "ivy.Array.is_ivy_array"]], "is_ivy_array() (ivy.container method)": [[561, "ivy.Container.is_ivy_array"]], "is_ivy_container() (in module ivy)": [[562, "ivy.is_ivy_container"], [630, "ivy.is_ivy_container"]], "is_ivy_container() (ivy.array method)": [[562, "ivy.Array.is_ivy_container"]], "is_ivy_nested_array() (in module ivy)": [[563, "ivy.is_ivy_nested_array"], [630, "ivy.is_ivy_nested_array"]], "is_native_array() (in module ivy)": [[564, "ivy.is_native_array"], [630, "ivy.is_native_array"]], "is_native_array() (ivy.array method)": [[564, "ivy.Array.is_native_array"]], "is_native_array() (ivy.container method)": [[564, "ivy.Container.is_native_array"]], "isin() (in module ivy)": [[565, "ivy.isin"], [630, "ivy.isin"]], "isin() (ivy.array method)": [[565, "ivy.Array.isin"]], "isin() (ivy.container method)": [[565, "ivy.Container.isin"]], "isscalar() (in module ivy)": [[566, "ivy.isscalar"], [630, "ivy.isscalar"]], "itemsize() (in module ivy)": [[567, "ivy.itemsize"], [630, "ivy.itemsize"]], "itemsize() (ivy.array method)": [[567, "ivy.Array.itemsize"]], "itemsize() (ivy.container method)": [[567, "ivy.Container.itemsize"]], "match_kwargs() (in module ivy)": [[568, "ivy.match_kwargs"], [630, "ivy.match_kwargs"]], "multiprocessing() (in module ivy)": [[569, "ivy.multiprocessing"], [630, "ivy.multiprocessing"]], "num_arrays_in_memory() (in module ivy)": [[570, "ivy.num_arrays_in_memory"], [630, "ivy.num_arrays_in_memory"]], "print_all_arrays_in_memory() (in module ivy)": [[571, "ivy.print_all_arrays_in_memory"], [630, "ivy.print_all_arrays_in_memory"]], "scatter_flat() (in module ivy)": [[572, "ivy.scatter_flat"], [630, "ivy.scatter_flat"]], "scatter_flat() (ivy.array method)": [[572, "ivy.Array.scatter_flat"]], "scatter_flat() (ivy.container method)": [[572, "ivy.Container.scatter_flat"]], "scatter_nd() (in module ivy)": [[573, "ivy.scatter_nd"], [630, "ivy.scatter_nd"]], "scatter_nd() (ivy.array method)": [[573, "ivy.Array.scatter_nd"]], "scatter_nd() (ivy.container method)": [[573, "ivy.Container.scatter_nd"]], "set_array_mode() (in module ivy)": [[574, "ivy.set_array_mode"], [630, "ivy.set_array_mode"]], "set_exception_trace_mode() (in module ivy)": [[575, "ivy.set_exception_trace_mode"], [630, "ivy.set_exception_trace_mode"]], "set_inplace_mode() (in module ivy)": [[576, "ivy.set_inplace_mode"], [630, "ivy.set_inplace_mode"]], "set_item() (in module ivy)": [[577, "ivy.set_item"], [630, "ivy.set_item"]], "set_min_base() (in module ivy)": [[578, "ivy.set_min_base"], [630, "ivy.set_min_base"]], "set_min_denominator() (in module ivy)": [[579, "ivy.set_min_denominator"], [630, "ivy.set_min_denominator"]], "set_nestable_mode() (in module ivy)": [[580, "ivy.set_nestable_mode"], [630, "ivy.set_nestable_mode"]], "set_precise_mode() (in module ivy)": [[581, "ivy.set_precise_mode"], [630, "ivy.set_precise_mode"]], "set_queue_timeout() (in module ivy)": [[582, "ivy.set_queue_timeout"], [630, "ivy.set_queue_timeout"]], "set_shape_array_mode() (in module ivy)": [[583, "ivy.set_shape_array_mode"], [630, "ivy.set_shape_array_mode"]], "set_show_func_wrapper_trace_mode() (in module ivy)": [[584, "ivy.set_show_func_wrapper_trace_mode"], [630, "ivy.set_show_func_wrapper_trace_mode"]], "set_tmp_dir() (in module ivy)": [[585, "ivy.set_tmp_dir"], [630, "ivy.set_tmp_dir"]], "shape() (in module ivy)": [[586, "ivy.shape"], [630, "ivy.shape"]], "shape() (ivy.array method)": [[586, "ivy.Array.shape"]], "size() (in module ivy)": [[587, "ivy.size"], [630, "ivy.size"]], "size() (ivy.array method)": [[587, "ivy.Array.size"]], "size() (ivy.container method)": [[587, "ivy.Container.size"]], "stable_divide() (in module ivy)": [[588, "ivy.stable_divide"], [630, "ivy.stable_divide"]], "stable_divide() (ivy.array method)": [[588, "ivy.Array.stable_divide"]], "stable_divide() (ivy.container method)": [[588, "ivy.Container.stable_divide"]], "stable_pow() (in module ivy)": [[589, "ivy.stable_pow"], [630, "ivy.stable_pow"]], "stable_pow() (ivy.array method)": [[589, "ivy.Array.stable_pow"]], "stable_pow() (ivy.container method)": [[589, "ivy.Container.stable_pow"]], "strides() (in module ivy)": [[590, "ivy.strides"], [630, "ivy.strides"]], "strides() (ivy.array method)": [[590, "ivy.Array.strides"]], "strides() (ivy.container method)": [[590, "ivy.Container.strides"]], "supports_inplace_updates() (in module ivy)": [[591, "ivy.supports_inplace_updates"], [630, "ivy.supports_inplace_updates"]], "supports_inplace_updates() (ivy.array method)": [[591, "ivy.Array.supports_inplace_updates"]], "supports_inplace_updates() (ivy.container method)": [[591, "ivy.Container.supports_inplace_updates"]], "to_ivy_shape() (in module ivy)": [[592, "ivy.to_ivy_shape"], [630, "ivy.to_ivy_shape"]], "to_list() (in module ivy)": [[593, "ivy.to_list"], [630, "ivy.to_list"]], "to_list() (ivy.array method)": [[593, "ivy.Array.to_list"]], "to_list() (ivy.container method)": [[593, "ivy.Container.to_list"]], "to_native_shape() (in module ivy)": [[594, "ivy.to_native_shape"], [630, "ivy.to_native_shape"]], "to_numpy() (in module ivy)": [[595, "ivy.to_numpy"], [630, "ivy.to_numpy"]], "to_numpy() (ivy.array method)": [[595, "ivy.Array.to_numpy"]], "to_numpy() (ivy.container method)": [[595, "ivy.Container.to_numpy"]], "to_scalar() (in module ivy)": [[596, "ivy.to_scalar"], [630, "ivy.to_scalar"]], "to_scalar() (ivy.array method)": [[596, "ivy.Array.to_scalar"]], "to_scalar() (ivy.container method)": [[596, "ivy.Container.to_scalar"]], "try_else_none() (in module ivy)": [[597, "ivy.try_else_none"], [630, "ivy.try_else_none"]], "unset_array_mode() (in module ivy)": [[598, "ivy.unset_array_mode"], [630, "ivy.unset_array_mode"]], "unset_exception_trace_mode() (in module ivy)": [[599, "ivy.unset_exception_trace_mode"], [630, "ivy.unset_exception_trace_mode"]], "unset_inplace_mode() (in module ivy)": [[600, "ivy.unset_inplace_mode"], [630, "ivy.unset_inplace_mode"]], "unset_min_base() (in module ivy)": [[601, "ivy.unset_min_base"], [630, "ivy.unset_min_base"]], "unset_min_denominator() (in module ivy)": [[602, "ivy.unset_min_denominator"], [630, "ivy.unset_min_denominator"]], "unset_nestable_mode() (in module ivy)": [[603, "ivy.unset_nestable_mode"], [630, "ivy.unset_nestable_mode"]], "unset_precise_mode() (in module ivy)": [[604, "ivy.unset_precise_mode"], [630, "ivy.unset_precise_mode"]], "unset_queue_timeout() (in module ivy)": [[605, "ivy.unset_queue_timeout"], [630, "ivy.unset_queue_timeout"]], "unset_shape_array_mode() (in module ivy)": [[606, "ivy.unset_shape_array_mode"], [630, "ivy.unset_shape_array_mode"]], "unset_show_func_wrapper_trace_mode() (in module ivy)": [[607, "ivy.unset_show_func_wrapper_trace_mode"], [630, "ivy.unset_show_func_wrapper_trace_mode"]], "unset_tmp_dir() (in module ivy)": [[608, "ivy.unset_tmp_dir"], [630, "ivy.unset_tmp_dir"]], "value_is_nan() (in module ivy)": [[609, "ivy.value_is_nan"], [630, "ivy.value_is_nan"]], "value_is_nan() (ivy.array method)": [[609, "ivy.Array.value_is_nan"]], "value_is_nan() (ivy.container method)": [[609, "ivy.Container.value_is_nan"]], "vmap() (in module ivy)": [[610, "ivy.vmap"], [630, "ivy.vmap"]], "adam_step() (in module ivy)": [[611, "ivy.adam_step"], [631, "ivy.adam_step"]], "adam_step() (ivy.array method)": [[611, "ivy.Array.adam_step"]], "adam_step() (ivy.container method)": [[611, "ivy.Container.adam_step"]], "adam_update() (in module ivy)": [[612, "ivy.adam_update"], [631, "ivy.adam_update"]], "adam_update() (ivy.array method)": [[612, "ivy.Array.adam_update"]], "adam_update() (ivy.container method)": [[612, "ivy.Container.adam_update"]], "execute_with_gradients() (in module ivy)": [[613, "ivy.execute_with_gradients"], [631, "ivy.execute_with_gradients"]], "grad() (in module ivy)": [[614, "ivy.grad"], [631, "ivy.grad"]], "gradient_descent_update() (in module ivy)": [[615, "ivy.gradient_descent_update"], [631, "ivy.gradient_descent_update"]], "gradient_descent_update() (ivy.array method)": [[615, "ivy.Array.gradient_descent_update"]], "gradient_descent_update() (ivy.container method)": [[615, "ivy.Container.gradient_descent_update"]], "jac() (in module ivy)": [[616, "ivy.jac"], [631, "ivy.jac"]], "lamb_update() (in module ivy)": [[617, "ivy.lamb_update"], [631, "ivy.lamb_update"]], "lamb_update() (ivy.array method)": [[617, "ivy.Array.lamb_update"]], "lamb_update() (ivy.container method)": [[617, "ivy.Container.lamb_update"]], "lars_update() (in module ivy)": [[618, "ivy.lars_update"], [631, "ivy.lars_update"]], "lars_update() (ivy.array method)": [[618, "ivy.Array.lars_update"]], "lars_update() (ivy.container method)": [[618, "ivy.Container.lars_update"]], "optimizer_update() (in module ivy)": [[619, "ivy.optimizer_update"], [631, "ivy.optimizer_update"]], "optimizer_update() (ivy.array method)": [[619, "ivy.Array.optimizer_update"]], "optimizer_update() (ivy.container method)": [[619, "ivy.Container.optimizer_update"]], "stop_gradient() (in module ivy)": [[620, "ivy.stop_gradient"], [631, "ivy.stop_gradient"]], "stop_gradient() (ivy.array method)": [[620, "ivy.Array.stop_gradient"]], "stop_gradient() (ivy.container method)": [[620, "ivy.Container.stop_gradient"]], "value_and_grad() (in module ivy)": [[621, "ivy.value_and_grad"], [631, "ivy.value_and_grad"]], "ivy.functional.ivy.activations": [[622, "module-ivy.functional.ivy.activations"]], "e (in module ivy)": [[623, "ivy.e"]], "inf (in module ivy)": [[623, "ivy.inf"]], "ivy.functional.ivy.constants": [[623, "module-ivy.functional.ivy.constants"]], "nan (in module ivy)": [[623, "ivy.nan"]], "newaxis (in module ivy)": [[623, "ivy.newaxis"]], "pi (in module ivy)": [[623, "ivy.pi"]], "ivy.functional.ivy.control_flow_ops": [[624, "module-ivy.functional.ivy.control_flow_ops"]], "nestedsequence (class in ivy)": [[625, "ivy.NestedSequence"]], "ivy.functional.ivy.creation": [[625, "module-ivy.functional.ivy.creation"]], "defaultcomplexdtype (class in ivy)": [[626, "ivy.DefaultComplexDtype"]], "defaultdtype (class in ivy)": [[626, "ivy.DefaultDtype"]], "defaultfloatdtype (class in ivy)": [[626, "ivy.DefaultFloatDtype"]], "defaultintdtype (class in ivy)": [[626, "ivy.DefaultIntDtype"]], "defaultuintdtype (class in ivy)": [[626, "ivy.DefaultUintDtype"]], "ivy.functional.ivy.data_type": [[626, "module-ivy.functional.ivy.data_type"]], "defaultdevice (class in ivy)": [[627, "ivy.DefaultDevice"]], "profiler (class in ivy)": [[627, "ivy.Profiler"]], "ivy.functional.ivy.device": [[627, "module-ivy.functional.ivy.device"]], "ivy.functional.ivy.elementwise": [[628, "module-ivy.functional.ivy.elementwise"]], "ivy.functional.ivy.experimental": [[629, "module-ivy.functional.ivy.experimental"]], "arraymode (class in ivy)": [[630, "ivy.ArrayMode"]], "precisemode (class in ivy)": [[630, "ivy.PreciseMode"]], "ivy.functional.ivy.general": [[630, "module-ivy.functional.ivy.general"]], "ivy.functional.ivy.gradients": [[631, "module-ivy.functional.ivy.gradients"]], "conv() (in module ivy)": [[632, "ivy.conv"], [645, "ivy.conv"]], "conv1d() (in module ivy)": [[632, "ivy.conv1d"], [646, "ivy.conv1d"]], "conv1d_transpose() (in module ivy)": [[632, "ivy.conv1d_transpose"], [647, "ivy.conv1d_transpose"]], "conv2d() (in module ivy)": [[632, "ivy.conv2d"], [648, "ivy.conv2d"]], "conv2d_transpose() (in module ivy)": [[632, "ivy.conv2d_transpose"], [649, "ivy.conv2d_transpose"]], "conv3d() (in module ivy)": [[632, "ivy.conv3d"], [650, "ivy.conv3d"]], "conv3d_transpose() (in module ivy)": [[632, "ivy.conv3d_transpose"], [651, "ivy.conv3d_transpose"]], "conv_general_dilated() (in module ivy)": [[632, "ivy.conv_general_dilated"], [652, "ivy.conv_general_dilated"]], "conv_general_transpose() (in module ivy)": [[632, "ivy.conv_general_transpose"], [653, "ivy.conv_general_transpose"]], "depthwise_conv2d() (in module ivy)": [[632, "ivy.depthwise_conv2d"], [654, "ivy.depthwise_conv2d"]], "dropout() (in module ivy)": [[632, "ivy.dropout"], [655, "ivy.dropout"]], "ivy.functional.ivy.layers": [[632, "module-ivy.functional.ivy.layers"]], "linear() (in module ivy)": [[632, "ivy.linear"], [656, "ivy.linear"]], "lstm() (in module ivy)": [[632, "ivy.lstm"], [657, "ivy.lstm"]], "lstm_update() (in module ivy)": [[632, "ivy.lstm_update"], [658, "ivy.lstm_update"]], "multi_head_attention() (in module ivy)": [[632, "ivy.multi_head_attention"], [659, "ivy.multi_head_attention"]], "nms() (in module ivy)": [[632, "ivy.nms"], [660, "ivy.nms"]], "roi_align() (in module ivy)": [[632, "ivy.roi_align"], [661, "ivy.roi_align"]], "scaled_dot_product_attention() (in module ivy)": [[632, "ivy.scaled_dot_product_attention"], [662, "ivy.scaled_dot_product_attention"]], "cholesky() (in module ivy)": [[633, "ivy.cholesky"], [663, "ivy.cholesky"]], "cross() (in module ivy)": [[633, "ivy.cross"], [664, "ivy.cross"]], "det() (in module ivy)": [[633, "ivy.det"], [665, "ivy.det"]], "diag() (in module ivy)": [[633, "ivy.diag"], [666, "ivy.diag"]], "diagonal() (in module ivy)": [[633, "ivy.diagonal"], [667, "ivy.diagonal"]], "eigh() (in module ivy)": [[633, "ivy.eigh"], [669, "ivy.eigh"]], "eigvalsh() (in module ivy)": [[633, "ivy.eigvalsh"], [670, "ivy.eigvalsh"]], "inner() (in module ivy)": [[633, "ivy.inner"], [671, "ivy.inner"]], "inv() (in module ivy)": [[633, "ivy.inv"], [672, "ivy.inv"]], "ivy.functional.ivy.linear_algebra": [[633, "module-ivy.functional.ivy.linear_algebra"]], "matmul() (in module ivy)": [[633, "ivy.matmul"], [673, "ivy.matmul"]], "matrix_norm() (in module ivy)": [[633, "ivy.matrix_norm"], [674, "ivy.matrix_norm"]], "matrix_power() (in module ivy)": [[633, "ivy.matrix_power"], [675, "ivy.matrix_power"]], "matrix_rank() (in module ivy)": [[633, "ivy.matrix_rank"], [676, "ivy.matrix_rank"]], "matrix_transpose() (in module ivy)": [[633, "ivy.matrix_transpose"], [677, "ivy.matrix_transpose"]], "outer() (in module ivy)": [[633, "ivy.outer"], [678, "ivy.outer"]], "pinv() (in module ivy)": [[633, "ivy.pinv"], [679, "ivy.pinv"]], "qr() (in module ivy)": [[633, "ivy.qr"], [680, "ivy.qr"]], "slogdet() (in module ivy)": [[633, "ivy.slogdet"], [681, "ivy.slogdet"]], "solve() (in module ivy)": [[633, "ivy.solve"], [682, "ivy.solve"]], "svd() (in module ivy)": [[633, "ivy.svd"], [683, "ivy.svd"]], "svdvals() (in module ivy)": [[633, "ivy.svdvals"], [684, "ivy.svdvals"]], "tensordot() (in module ivy)": [[633, "ivy.tensordot"], [685, "ivy.tensordot"]], "tensorsolve() (in module ivy)": [[633, "ivy.tensorsolve"], [686, "ivy.tensorsolve"]], "trace() (in module ivy)": [[633, "ivy.trace"], [687, "ivy.trace"]], "vander() (in module ivy)": [[633, "ivy.vander"], [688, "ivy.vander"]], "vecdot() (in module ivy)": [[633, "ivy.vecdot"], [689, "ivy.vecdot"]], "vector_norm() (in module ivy)": [[633, "ivy.vector_norm"], [690, "ivy.vector_norm"]], "vector_to_skew_symmetric_matrix() (in module ivy)": [[633, "ivy.vector_to_skew_symmetric_matrix"], [691, "ivy.vector_to_skew_symmetric_matrix"]], "binary_cross_entropy() (in module ivy)": [[634, "ivy.binary_cross_entropy"], [692, "ivy.binary_cross_entropy"]], "cross_entropy() (in module ivy)": [[634, "ivy.cross_entropy"], [693, "ivy.cross_entropy"]], "ivy.functional.ivy.losses": [[634, "module-ivy.functional.ivy.losses"]], "sparse_cross_entropy() (in module ivy)": [[634, "ivy.sparse_cross_entropy"], [694, "ivy.sparse_cross_entropy"]], "clip() (in module ivy)": [[635, "ivy.clip"], [695, "ivy.clip"]], "concat() (in module ivy)": [[635, "ivy.concat"], [696, "ivy.concat"]], "constant_pad() (in module ivy)": [[635, "ivy.constant_pad"], [697, "ivy.constant_pad"]], "expand_dims() (in module ivy)": [[635, "ivy.expand_dims"], [698, "ivy.expand_dims"]], "flip() (in module ivy)": [[635, "ivy.flip"], [699, "ivy.flip"]], "ivy.functional.ivy.manipulation": [[635, "module-ivy.functional.ivy.manipulation"]], "permute_dims() (in module ivy)": [[635, "ivy.permute_dims"], [700, "ivy.permute_dims"]], "repeat() (in module ivy)": [[635, "ivy.repeat"], [701, "ivy.repeat"]], "reshape() (in module ivy)": [[635, "ivy.reshape"], [702, "ivy.reshape"]], "roll() (in module ivy)": [[635, "ivy.roll"], [703, "ivy.roll"]], "split() (in module ivy)": [[635, "ivy.split"], [704, "ivy.split"]], "squeeze() (in module ivy)": [[635, "ivy.squeeze"], [705, "ivy.squeeze"]], "stack() (in module ivy)": [[635, "ivy.stack"], [706, "ivy.stack"]], "swapaxes() (in module ivy)": [[635, "ivy.swapaxes"], [707, "ivy.swapaxes"]], "tile() (in module ivy)": [[635, "ivy.tile"], [708, "ivy.tile"]], "unstack() (in module ivy)": [[635, "ivy.unstack"], [709, "ivy.unstack"]], "zero_pad() (in module ivy)": [[635, "ivy.zero_pad"], [710, "ivy.zero_pad"]], "fomaml_step() (in module ivy)": [[636, "ivy.fomaml_step"], [711, "ivy.fomaml_step"]], "ivy.functional.ivy.meta": [[636, "module-ivy.functional.ivy.meta"]], "maml_step() (in module ivy)": [[636, "ivy.maml_step"], [712, "ivy.maml_step"]], "reptile_step() (in module ivy)": [[636, "ivy.reptile_step"], [713, "ivy.reptile_step"]], "all_nested_indices() (in module ivy)": [[637, "ivy.all_nested_indices"], [714, "ivy.all_nested_indices"]], "copy_nest() (in module ivy)": [[637, "ivy.copy_nest"], [715, "ivy.copy_nest"]], "duplicate_array_index_chains() (in module ivy)": [[637, "ivy.duplicate_array_index_chains"], [716, "ivy.duplicate_array_index_chains"]], "index_nest() (in module ivy)": [[637, "ivy.index_nest"], [717, "ivy.index_nest"]], "insert_into_nest_at_index() (in module ivy)": [[637, "ivy.insert_into_nest_at_index"], [718, "ivy.insert_into_nest_at_index"]], "insert_into_nest_at_indices() (in module ivy)": [[637, "ivy.insert_into_nest_at_indices"], [719, "ivy.insert_into_nest_at_indices"]], "ivy.functional.ivy.nest": [[637, "module-ivy.functional.ivy.nest"]], "map() (in module ivy)": [[637, "ivy.map"], [720, "ivy.map"]], "map_nest_at_index() (in module ivy)": [[637, "ivy.map_nest_at_index"], [721, "ivy.map_nest_at_index"]], "map_nest_at_indices() (in module ivy)": [[637, "ivy.map_nest_at_indices"], [722, "ivy.map_nest_at_indices"]], "multi_index_nest() (in module ivy)": [[637, "ivy.multi_index_nest"], [723, "ivy.multi_index_nest"]], "nested_any() (in module ivy)": [[637, "ivy.nested_any"], [724, "ivy.nested_any"]], "nested_argwhere() (in module ivy)": [[637, "ivy.nested_argwhere"], [725, "ivy.nested_argwhere"]], "nested_map() (in module ivy)": [[637, "ivy.nested_map"], [726, "ivy.nested_map"]], "nested_multi_map() (in module ivy)": [[637, "ivy.nested_multi_map"], [727, "ivy.nested_multi_map"]], "prune_empty() (in module ivy)": [[637, "ivy.prune_empty"], [728, "ivy.prune_empty"]], "prune_nest_at_index() (in module ivy)": [[637, "ivy.prune_nest_at_index"], [729, "ivy.prune_nest_at_index"]], "prune_nest_at_indices() (in module ivy)": [[637, "ivy.prune_nest_at_indices"], [730, "ivy.prune_nest_at_indices"]], "set_nest_at_index() (in module ivy)": [[637, "ivy.set_nest_at_index"], [731, "ivy.set_nest_at_index"]], "set_nest_at_indices() (in module ivy)": [[637, "ivy.set_nest_at_indices"], [732, "ivy.set_nest_at_indices"]], "ivy.functional.ivy.norms": [[638, "module-ivy.functional.ivy.norms"]], "layer_norm() (in module ivy)": [[638, "ivy.layer_norm"], [733, "ivy.layer_norm"]], "ivy.functional.ivy.random": [[639, "module-ivy.functional.ivy.random"]], "multinomial() (in module ivy)": [[639, "ivy.multinomial"], [734, "ivy.multinomial"]], "randint() (in module ivy)": [[639, "ivy.randint"], [735, "ivy.randint"]], "random_normal() (in module ivy)": [[639, "ivy.random_normal"], [736, "ivy.random_normal"]], "random_uniform() (in module ivy)": [[639, "ivy.random_uniform"], [737, "ivy.random_uniform"]], "seed() (in module ivy)": [[639, "ivy.seed"], [738, "ivy.seed"]], "shuffle() (in module ivy)": [[639, "ivy.shuffle"], [739, "ivy.shuffle"]], "argmax() (in module ivy)": [[640, "ivy.argmax"], [740, "ivy.argmax"]], "argmin() (in module ivy)": [[640, "ivy.argmin"], [741, "ivy.argmin"]], "argwhere() (in module ivy)": [[640, "ivy.argwhere"], [742, "ivy.argwhere"]], "ivy.functional.ivy.searching": [[640, "module-ivy.functional.ivy.searching"]], "nonzero() (in module ivy)": [[640, "ivy.nonzero"], [743, "ivy.nonzero"]], "where() (in module ivy)": [[640, "ivy.where"], [744, "ivy.where"]], "ivy.functional.ivy.set": [[641, "module-ivy.functional.ivy.set"]], "unique_all() (in module ivy)": [[641, "ivy.unique_all"], [745, "ivy.unique_all"]], "unique_counts() (in module ivy)": [[641, "ivy.unique_counts"], [746, "ivy.unique_counts"]], "unique_inverse() (in module ivy)": [[641, "ivy.unique_inverse"], [747, "ivy.unique_inverse"]], "unique_values() (in module ivy)": [[641, "ivy.unique_values"], [748, "ivy.unique_values"]], "argsort() (in module ivy)": [[642, "ivy.argsort"], [749, "ivy.argsort"]], "ivy.functional.ivy.sorting": [[642, "module-ivy.functional.ivy.sorting"]], "msort() (in module ivy)": [[642, "ivy.msort"], [750, "ivy.msort"]], "searchsorted() (in module ivy)": [[642, "ivy.searchsorted"], [751, "ivy.searchsorted"]], "sort() (in module ivy)": [[642, "ivy.sort"], [752, "ivy.sort"]], "cumprod() (in module ivy)": [[643, "ivy.cumprod"], [753, "ivy.cumprod"]], "cumsum() (in module ivy)": [[643, "ivy.cumsum"], [754, "ivy.cumsum"]], "einsum() (in module ivy)": [[643, "ivy.einsum"], [755, "ivy.einsum"]], "ivy.functional.ivy.statistical": [[643, "module-ivy.functional.ivy.statistical"]], "max() (in module ivy)": [[643, "ivy.max"], [756, "ivy.max"]], "mean() (in module ivy)": [[643, "ivy.mean"], [757, "ivy.mean"]], "min() (in module ivy)": [[643, "ivy.min"], [758, "ivy.min"]], "prod() (in module ivy)": [[643, "ivy.prod"], [759, "ivy.prod"]], "std() (in module ivy)": [[643, "ivy.std"], [760, "ivy.std"]], "sum() (in module ivy)": [[643, "ivy.sum"], [761, "ivy.sum"]], "var() (in module ivy)": [[643, "ivy.var"], [762, "ivy.var"]], "all() (in module ivy)": [[644, "ivy.all"], [763, "ivy.all"]], "any() (in module ivy)": [[644, "ivy.any"], [764, "ivy.any"]], "ivy.functional.ivy.utility": [[644, "module-ivy.functional.ivy.utility"]], "load() (in module ivy)": [[644, "ivy.load"], [765, "ivy.load"]], "save() (in module ivy)": [[644, "ivy.save"], [766, "ivy.save"]], "conv1d() (ivy.array method)": [[646, "ivy.Array.conv1d"]], "conv1d() (ivy.container method)": [[646, "ivy.Container.conv1d"]], "conv1d_transpose() (ivy.array method)": [[647, "ivy.Array.conv1d_transpose"]], "conv1d_transpose() (ivy.container method)": [[647, "ivy.Container.conv1d_transpose"]], "conv2d() (ivy.array method)": [[648, "ivy.Array.conv2d"]], "conv2d() (ivy.container method)": [[648, "ivy.Container.conv2d"]], "conv2d_transpose() (ivy.array method)": [[649, "ivy.Array.conv2d_transpose"]], "conv2d_transpose() (ivy.container method)": [[649, "ivy.Container.conv2d_transpose"]], "conv3d() (ivy.array method)": [[650, "ivy.Array.conv3d"]], "conv3d() (ivy.container method)": [[650, "ivy.Container.conv3d"]], "conv3d_transpose() (ivy.array method)": [[651, "ivy.Array.conv3d_transpose"]], "conv3d_transpose() (ivy.container method)": [[651, "ivy.Container.conv3d_transpose"]], "depthwise_conv2d() (ivy.array method)": [[654, "ivy.Array.depthwise_conv2d"]], "depthwise_conv2d() (ivy.container method)": [[654, "ivy.Container.depthwise_conv2d"]], "dropout() (ivy.array method)": [[655, "ivy.Array.dropout"]], "dropout() (ivy.container method)": [[655, "ivy.Container.dropout"]], "linear() (ivy.array method)": [[656, "ivy.Array.linear"]], "linear() (ivy.container method)": [[656, "ivy.Container.linear"]], "lstm_update() (ivy.array method)": [[658, "ivy.Array.lstm_update"]], "lstm_update() (ivy.container method)": [[658, "ivy.Container.lstm_update"]], "multi_head_attention() (ivy.array method)": [[659, "ivy.Array.multi_head_attention"]], "multi_head_attention() (ivy.container method)": [[659, "ivy.Container.multi_head_attention"]], "scaled_dot_product_attention() (ivy.array method)": [[662, "ivy.Array.scaled_dot_product_attention"]], "scaled_dot_product_attention() (ivy.container method)": [[662, "ivy.Container.scaled_dot_product_attention"]], "cholesky() (ivy.array method)": [[663, "ivy.Array.cholesky"]], "cholesky() (ivy.container method)": [[663, "ivy.Container.cholesky"]], "cross() (ivy.array method)": [[664, "ivy.Array.cross"]], "cross() (ivy.container method)": [[664, "ivy.Container.cross"]], "det() (ivy.array method)": [[665, "ivy.Array.det"]], "det() (ivy.container method)": [[665, "ivy.Container.det"]], "diag() (ivy.array method)": [[666, "ivy.Array.diag"]], "diag() (ivy.container method)": [[666, "ivy.Container.diag"]], "diagonal() (ivy.array method)": [[667, "ivy.Array.diagonal"]], "diagonal() (ivy.container method)": [[667, "ivy.Container.diagonal"]], "eigh() (ivy.array method)": [[669, "ivy.Array.eigh"]], "eigh() (ivy.container method)": [[669, "ivy.Container.eigh"]], "eigvalsh() (ivy.array method)": [[670, "ivy.Array.eigvalsh"]], "eigvalsh() (ivy.container method)": [[670, "ivy.Container.eigvalsh"]], "inner() (ivy.array method)": [[671, "ivy.Array.inner"]], "inner() (ivy.container method)": [[671, "ivy.Container.inner"]], "inv() (ivy.array method)": [[672, "ivy.Array.inv"]], "inv() (ivy.container method)": [[672, "ivy.Container.inv"]], "matmul() (ivy.array method)": [[673, "ivy.Array.matmul"]], "matmul() (ivy.container method)": [[673, "ivy.Container.matmul"]], "matrix_norm() (ivy.array method)": [[674, "ivy.Array.matrix_norm"]], "matrix_norm() (ivy.container method)": [[674, "ivy.Container.matrix_norm"]], "matrix_power() (ivy.array method)": [[675, "ivy.Array.matrix_power"]], "matrix_power() (ivy.container method)": [[675, "ivy.Container.matrix_power"]], "matrix_rank() (ivy.array method)": [[676, "ivy.Array.matrix_rank"]], "matrix_rank() (ivy.container method)": [[676, "ivy.Container.matrix_rank"]], "matrix_transpose() (ivy.array method)": [[677, "ivy.Array.matrix_transpose"]], "matrix_transpose() (ivy.container method)": [[677, "ivy.Container.matrix_transpose"]], "outer() (ivy.array method)": [[678, "ivy.Array.outer"]], "outer() (ivy.container method)": [[678, "ivy.Container.outer"]], "pinv() (ivy.array method)": [[679, "ivy.Array.pinv"]], "pinv() (ivy.container method)": [[679, "ivy.Container.pinv"]], "qr() (ivy.array method)": [[680, "ivy.Array.qr"]], "qr() (ivy.container method)": [[680, "ivy.Container.qr"]], "slogdet() (ivy.array method)": [[681, "ivy.Array.slogdet"]], "slogdet() (ivy.container method)": [[681, "ivy.Container.slogdet"]], "solve() (ivy.array method)": [[682, "ivy.Array.solve"]], "solve() (ivy.container method)": [[682, "ivy.Container.solve"]], "svd() (ivy.array method)": [[683, "ivy.Array.svd"]], "svd() (ivy.container method)": [[683, "ivy.Container.svd"]], "svdvals() (ivy.array method)": [[684, "ivy.Array.svdvals"]], "svdvals() (ivy.container method)": [[684, "ivy.Container.svdvals"]], "tensordot() (ivy.array method)": [[685, "ivy.Array.tensordot"]], "tensordot() (ivy.container method)": [[685, "ivy.Container.tensordot"]], "tensorsolve() (ivy.array method)": [[686, "ivy.Array.tensorsolve"]], "tensorsolve() (ivy.container method)": [[686, "ivy.Container.tensorsolve"]], "trace() (ivy.array method)": [[687, "ivy.Array.trace"]], "trace() (ivy.container method)": [[687, "ivy.Container.trace"]], "vander() (ivy.array method)": [[688, "ivy.Array.vander"]], "vander() (ivy.container method)": [[688, "ivy.Container.vander"]], "vecdot() (ivy.array method)": [[689, "ivy.Array.vecdot"]], "vecdot() (ivy.container method)": [[689, "ivy.Container.vecdot"]], "vector_norm() (ivy.array method)": [[690, "ivy.Array.vector_norm"]], "vector_norm() (ivy.container method)": [[690, "ivy.Container.vector_norm"]], "vector_to_skew_symmetric_matrix() (ivy.array method)": [[691, "ivy.Array.vector_to_skew_symmetric_matrix"]], "vector_to_skew_symmetric_matrix() (ivy.container method)": [[691, "ivy.Container.vector_to_skew_symmetric_matrix"]], "binary_cross_entropy() (ivy.array method)": [[692, "ivy.Array.binary_cross_entropy"]], "binary_cross_entropy() (ivy.container method)": [[692, "ivy.Container.binary_cross_entropy"]], "cross_entropy() (ivy.array method)": [[693, "ivy.Array.cross_entropy"]], "cross_entropy() (ivy.container method)": [[693, "ivy.Container.cross_entropy"]], "sparse_cross_entropy() (ivy.array method)": [[694, "ivy.Array.sparse_cross_entropy"]], "sparse_cross_entropy() (ivy.container method)": [[694, "ivy.Container.sparse_cross_entropy"]], "clip() (ivy.array method)": [[695, "ivy.Array.clip"]], "clip() (ivy.container method)": [[695, "ivy.Container.clip"]], "concat() (ivy.array method)": [[696, "ivy.Array.concat"]], "concat() (ivy.container method)": [[696, "ivy.Container.concat"]], "constant_pad() (ivy.array method)": [[697, "ivy.Array.constant_pad"]], "constant_pad() (ivy.container method)": [[697, "ivy.Container.constant_pad"]], "expand_dims() (ivy.array method)": [[698, "ivy.Array.expand_dims"]], "expand_dims() (ivy.container method)": [[698, "ivy.Container.expand_dims"]], "flip() (ivy.array method)": [[699, "ivy.Array.flip"]], "flip() (ivy.container method)": [[699, "ivy.Container.flip"]], "permute_dims() (ivy.array method)": [[700, "ivy.Array.permute_dims"]], "permute_dims() (ivy.container method)": [[700, "ivy.Container.permute_dims"]], "repeat() (ivy.array method)": [[701, "ivy.Array.repeat"]], "repeat() (ivy.container method)": [[701, "ivy.Container.repeat"]], "reshape() (ivy.array method)": [[702, "ivy.Array.reshape"]], "reshape() (ivy.container method)": [[702, "ivy.Container.reshape"]], "roll() (ivy.array method)": [[703, "ivy.Array.roll"]], "roll() (ivy.container method)": [[703, "ivy.Container.roll"]], "split() (ivy.array method)": [[704, "ivy.Array.split"]], "split() (ivy.container method)": [[704, "ivy.Container.split"]], "squeeze() (ivy.array method)": [[705, "ivy.Array.squeeze"]], "squeeze() (ivy.container method)": [[705, "ivy.Container.squeeze"]], "stack() (ivy.array method)": [[706, "ivy.Array.stack"]], "stack() (ivy.container method)": [[706, "ivy.Container.stack"]], "swapaxes() (ivy.array method)": [[707, "ivy.Array.swapaxes"]], "swapaxes() (ivy.container method)": [[707, "ivy.Container.swapaxes"]], "tile() (ivy.array method)": [[708, "ivy.Array.tile"]], "tile() (ivy.container method)": [[708, "ivy.Container.tile"]], "unstack() (ivy.array method)": [[709, "ivy.Array.unstack"]], "unstack() (ivy.container method)": [[709, "ivy.Container.unstack"]], "zero_pad() (ivy.array method)": [[710, "ivy.Array.zero_pad"]], "zero_pad() (ivy.container method)": [[710, "ivy.Container.zero_pad"]], "layer_norm() (ivy.array method)": [[733, "ivy.Array.layer_norm"]], "layer_norm() (ivy.container method)": [[733, "ivy.Container.layer_norm"]], "multinomial() (ivy.array method)": [[734, "ivy.Array.multinomial"]], "multinomial() (ivy.container method)": [[734, "ivy.Container.multinomial"]], "randint() (ivy.array method)": [[735, "ivy.Array.randint"]], "randint() (ivy.container method)": [[735, "ivy.Container.randint"]], "random_normal() (ivy.array method)": [[736, "ivy.Array.random_normal"]], "random_normal() (ivy.container method)": [[736, "ivy.Container.random_normal"]], "random_uniform() (ivy.array method)": [[737, "ivy.Array.random_uniform"]], "random_uniform() (ivy.container method)": [[737, "ivy.Container.random_uniform"]], "shuffle() (ivy.array method)": [[739, "ivy.Array.shuffle"]], "shuffle() (ivy.container method)": [[739, "ivy.Container.shuffle"]], "argmax() (ivy.array method)": [[740, "ivy.Array.argmax"]], "argmax() (ivy.container method)": [[740, "ivy.Container.argmax"]], "argmin() (ivy.array method)": [[741, "ivy.Array.argmin"]], "argmin() (ivy.container method)": [[741, "ivy.Container.argmin"]], "argwhere() (ivy.array method)": [[742, "ivy.Array.argwhere"]], "argwhere() (ivy.container method)": [[742, "ivy.Container.argwhere"]], "nonzero() (ivy.array method)": [[743, "ivy.Array.nonzero"]], "nonzero() (ivy.container method)": [[743, "ivy.Container.nonzero"]], "where() (ivy.array method)": [[744, "ivy.Array.where"]], "where() (ivy.container method)": [[744, "ivy.Container.where"]], "unique_all() (ivy.array method)": [[745, "ivy.Array.unique_all"]], "unique_all() (ivy.container method)": [[745, "ivy.Container.unique_all"]], "unique_counts() (ivy.array method)": [[746, "ivy.Array.unique_counts"]], "unique_counts() (ivy.container method)": [[746, "ivy.Container.unique_counts"]], "unique_inverse() (ivy.array method)": [[747, "ivy.Array.unique_inverse"]], "unique_inverse() (ivy.container method)": [[747, "ivy.Container.unique_inverse"]], "unique_values() (ivy.array method)": [[748, "ivy.Array.unique_values"]], "unique_values() (ivy.container method)": [[748, "ivy.Container.unique_values"]], "argsort() (ivy.array method)": [[749, "ivy.Array.argsort"]], "argsort() (ivy.container method)": [[749, "ivy.Container.argsort"]], "msort() (ivy.array method)": [[750, "ivy.Array.msort"]], "msort() (ivy.container method)": [[750, "ivy.Container.msort"]], "searchsorted() (ivy.array method)": [[751, "ivy.Array.searchsorted"]], "searchsorted() (ivy.container method)": [[751, "ivy.Container.searchsorted"]], "sort() (ivy.array method)": [[752, "ivy.Array.sort"]], "sort() (ivy.container method)": [[752, "ivy.Container.sort"]], "cumprod() (ivy.array method)": [[753, "ivy.Array.cumprod"]], "cumprod() (ivy.container method)": [[753, "ivy.Container.cumprod"]], "cumsum() (ivy.array method)": [[754, "ivy.Array.cumsum"]], "cumsum() (ivy.container method)": [[754, "ivy.Container.cumsum"]], "einsum() (ivy.array method)": [[755, "ivy.Array.einsum"]], "einsum() (ivy.container method)": [[755, "ivy.Container.einsum"]], "max() (ivy.array method)": [[756, "ivy.Array.max"]], "max() (ivy.container method)": [[756, "ivy.Container.max"]], "mean() (ivy.array method)": [[757, "ivy.Array.mean"]], "mean() (ivy.container method)": [[757, "ivy.Container.mean"]], "min() (ivy.array method)": [[758, "ivy.Array.min"]], "min() (ivy.container method)": [[758, "ivy.Container.min"]], "prod() (ivy.array method)": [[759, "ivy.Array.prod"]], "prod() (ivy.container method)": [[759, "ivy.Container.prod"]], "std() (ivy.array method)": [[760, "ivy.Array.std"]], "std() (ivy.container method)": [[760, "ivy.Container.std"]], "sum() (ivy.array method)": [[761, "ivy.Array.sum"]], "sum() (ivy.container method)": [[761, "ivy.Container.sum"]], "var() (ivy.array method)": [[762, "ivy.Array.var"]], "var() (ivy.container method)": [[762, "ivy.Container.var"]], "all() (ivy.array method)": [[763, "ivy.Array.all"]], "all() (ivy.container method)": [[763, "ivy.Container.all"]], "any() (ivy.array method)": [[764, "ivy.Array.any"]], "any() (ivy.container method)": [[764, "ivy.Container.any"]], "assert_all_close() (in module ivy_tests.test_ivy.helpers.assertions)": [[767, "ivy_tests.test_ivy.helpers.assertions.assert_all_close"]], "assert_same_type() (in module ivy_tests.test_ivy.helpers.assertions)": [[767, "ivy_tests.test_ivy.helpers.assertions.assert_same_type"]], "assert_same_type_and_shape() (in module ivy_tests.test_ivy.helpers.assertions)": [[767, "ivy_tests.test_ivy.helpers.assertions.assert_same_type_and_shape"]], "check_unsupported_device() (in module ivy_tests.test_ivy.helpers.assertions)": [[767, "ivy_tests.test_ivy.helpers.assertions.check_unsupported_device"]], "check_unsupported_device_and_dtype() (in module ivy_tests.test_ivy.helpers.assertions)": [[767, "ivy_tests.test_ivy.helpers.assertions.check_unsupported_device_and_dtype"]], "check_unsupported_dtype() (in module ivy_tests.test_ivy.helpers.assertions)": [[767, "ivy_tests.test_ivy.helpers.assertions.check_unsupported_dtype"]], "ivy_tests.test_ivy.helpers.assertions": [[767, "module-ivy_tests.test_ivy.helpers.assertions"]], "test_unsupported_function() (in module ivy_tests.test_ivy.helpers.assertions)": [[767, "ivy_tests.test_ivy.helpers.assertions.test_unsupported_function"]], "value_test() (in module ivy_tests.test_ivy.helpers.assertions)": [[767, "ivy_tests.test_ivy.helpers.assertions.value_test"]], "ivy_tests.test_ivy.helpers.available_frameworks": [[768, "module-ivy_tests.test_ivy.helpers.available_frameworks"]], "args_to_container() (in module ivy_tests.test_ivy.helpers.function_testing)": [[769, "ivy_tests.test_ivy.helpers.function_testing.args_to_container"]], "args_to_frontend() (in module ivy_tests.test_ivy.helpers.function_testing)": [[769, "ivy_tests.test_ivy.helpers.function_testing.args_to_frontend"]], "arrays_to_frontend() (in module ivy_tests.test_ivy.helpers.function_testing)": [[769, "ivy_tests.test_ivy.helpers.function_testing.arrays_to_frontend"]], "as_lists() (in module ivy_tests.test_ivy.helpers.function_testing)": [[769, "ivy_tests.test_ivy.helpers.function_testing.as_lists"]], "convtrue() (in module ivy_tests.test_ivy.helpers.function_testing)": [[769, "ivy_tests.test_ivy.helpers.function_testing.convtrue"]], "create_args_kwargs() (in module ivy_tests.test_ivy.helpers.function_testing)": [[769, "ivy_tests.test_ivy.helpers.function_testing.create_args_kwargs"]], "flatten() (in module ivy_tests.test_ivy.helpers.function_testing)": [[769, "ivy_tests.test_ivy.helpers.function_testing.flatten"]], "flatten_and_to_np() (in module ivy_tests.test_ivy.helpers.function_testing)": [[769, "ivy_tests.test_ivy.helpers.function_testing.flatten_and_to_np"]], "flatten_frontend() (in module ivy_tests.test_ivy.helpers.function_testing)": [[769, "ivy_tests.test_ivy.helpers.function_testing.flatten_frontend"]], "flatten_frontend_fw_to_np() (in module ivy_tests.test_ivy.helpers.function_testing)": [[769, "ivy_tests.test_ivy.helpers.function_testing.flatten_frontend_fw_to_np"]], "flatten_frontend_to_np() (in module ivy_tests.test_ivy.helpers.function_testing)": [[769, "ivy_tests.test_ivy.helpers.function_testing.flatten_frontend_to_np"]], "get_frontend_ret() (in module ivy_tests.test_ivy.helpers.function_testing)": [[769, "ivy_tests.test_ivy.helpers.function_testing.get_frontend_ret"]], "get_ret_and_flattened_np_array() (in module ivy_tests.test_ivy.helpers.function_testing)": [[769, "ivy_tests.test_ivy.helpers.function_testing.get_ret_and_flattened_np_array"]], "gradient_incompatible_function() (in module ivy_tests.test_ivy.helpers.function_testing)": [[769, "ivy_tests.test_ivy.helpers.function_testing.gradient_incompatible_function"]], "gradient_test() (in module ivy_tests.test_ivy.helpers.function_testing)": [[769, "ivy_tests.test_ivy.helpers.function_testing.gradient_test"]], "gradient_unsupported_dtypes() (in module ivy_tests.test_ivy.helpers.function_testing)": [[769, "ivy_tests.test_ivy.helpers.function_testing.gradient_unsupported_dtypes"]], "ivy_tests.test_ivy.helpers.function_testing": [[769, "module-ivy_tests.test_ivy.helpers.function_testing"]], "kwargs_to_args_n_kwargs() (in module ivy_tests.test_ivy.helpers.function_testing)": [[769, "ivy_tests.test_ivy.helpers.function_testing.kwargs_to_args_n_kwargs"]], "test_frontend_function() (in module ivy_tests.test_ivy.helpers.function_testing)": [[769, "ivy_tests.test_ivy.helpers.function_testing.test_frontend_function"]], "test_frontend_method() (in module ivy_tests.test_ivy.helpers.function_testing)": [[769, "ivy_tests.test_ivy.helpers.function_testing.test_frontend_method"]], "test_function() (in module ivy_tests.test_ivy.helpers.function_testing)": [[769, "ivy_tests.test_ivy.helpers.function_testing.test_function"]], "test_function_backend_computation() (in module ivy_tests.test_ivy.helpers.function_testing)": [[769, "ivy_tests.test_ivy.helpers.function_testing.test_function_backend_computation"]], "test_function_ground_truth_computation() (in module ivy_tests.test_ivy.helpers.function_testing)": [[769, "ivy_tests.test_ivy.helpers.function_testing.test_function_ground_truth_computation"]], "test_gradient_backend_computation() (in module ivy_tests.test_ivy.helpers.function_testing)": [[769, "ivy_tests.test_ivy.helpers.function_testing.test_gradient_backend_computation"]], "test_gradient_ground_truth_computation() (in module ivy_tests.test_ivy.helpers.function_testing)": [[769, "ivy_tests.test_ivy.helpers.function_testing.test_gradient_ground_truth_computation"]], "test_method() (in module ivy_tests.test_ivy.helpers.function_testing)": [[769, "ivy_tests.test_ivy.helpers.function_testing.test_method"]], "test_method_backend_computation() (in module ivy_tests.test_ivy.helpers.function_testing)": [[769, "ivy_tests.test_ivy.helpers.function_testing.test_method_backend_computation"]], "test_method_ground_truth_computation() (in module ivy_tests.test_ivy.helpers.function_testing)": [[769, "ivy_tests.test_ivy.helpers.function_testing.test_method_ground_truth_computation"]], "traced_if_required() (in module ivy_tests.test_ivy.helpers.function_testing)": [[769, "ivy_tests.test_ivy.helpers.function_testing.traced_if_required"]], "wrap_frontend_function_args() (in module ivy_tests.test_ivy.helpers.function_testing)": [[769, "ivy_tests.test_ivy.helpers.function_testing.wrap_frontend_function_args"]], "current_frontend_config (in module ivy_tests.test_ivy.helpers.globals)": [[770, "ivy_tests.test_ivy.helpers.globals.CURRENT_FRONTEND_CONFIG"]], "interruptedtest": [[770, "ivy_tests.test_ivy.helpers.globals.InterruptedTest"]], "testdata (class in ivy_tests.test_ivy.helpers.globals)": [[770, "ivy_tests.test_ivy.helpers.globals.TestData"]], "__init__() (ivy_tests.test_ivy.helpers.globals.interruptedtest method)": [[770, "ivy_tests.test_ivy.helpers.globals.InterruptedTest.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.globals.testdata method)": [[770, "ivy_tests.test_ivy.helpers.globals.TestData.__init__"]], "fn_name (ivy_tests.test_ivy.helpers.globals.testdata attribute)": [[770, "ivy_tests.test_ivy.helpers.globals.TestData.fn_name"]], "fn_tree (ivy_tests.test_ivy.helpers.globals.testdata attribute)": [[770, "ivy_tests.test_ivy.helpers.globals.TestData.fn_tree"]], "is_method (ivy_tests.test_ivy.helpers.globals.testdata attribute)": [[770, "ivy_tests.test_ivy.helpers.globals.TestData.is_method"]], "ivy_tests.test_ivy.helpers.globals": [[770, "module-ivy_tests.test_ivy.helpers.globals"]], "setup_api_test() (in module ivy_tests.test_ivy.helpers.globals)": [[770, "ivy_tests.test_ivy.helpers.globals.setup_api_test"]], "setup_frontend_test() (in module ivy_tests.test_ivy.helpers.globals)": [[770, "ivy_tests.test_ivy.helpers.globals.setup_frontend_test"]], "supported_device_dtypes (ivy_tests.test_ivy.helpers.globals.testdata attribute)": [[770, "ivy_tests.test_ivy.helpers.globals.TestData.supported_device_dtypes"]], "teardown_api_test() (in module ivy_tests.test_ivy.helpers.globals)": [[770, "ivy_tests.test_ivy.helpers.globals.teardown_api_test"]], "teardown_frontend_test() (in module ivy_tests.test_ivy.helpers.globals)": [[770, "ivy_tests.test_ivy.helpers.globals.teardown_frontend_test"]], "test_fn (ivy_tests.test_ivy.helpers.globals.testdata attribute)": [[770, "ivy_tests.test_ivy.helpers.globals.TestData.test_fn"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers": [[771, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers"]], "array_and_broadcastable_shape() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[772, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.array_and_broadcastable_shape"]], "array_bools() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[772, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.array_bools"]], "array_helpers_dtype_info_helper() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[772, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.array_helpers_dtype_info_helper"]], "array_indices_axis() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[772, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.array_indices_axis"]], "array_indices_put_along_axis() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[772, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.array_indices_put_along_axis"]], "array_values() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[772, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.array_values"]], "arrays_and_axes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[772, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.arrays_and_axes"]], "arrays_for_pooling() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[772, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.arrays_for_pooling"]], "broadcast_shapes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[772, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.broadcast_shapes"]], "cond_data_gen_helper() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[772, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.cond_data_gen_helper"]], "create_concatenable_arrays_dtypes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[772, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.create_concatenable_arrays_dtypes"]], "create_nested_input() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[772, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.create_nested_input"]], "dtype_and_values() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[772, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.dtype_and_values"]], "dtype_array_query() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[772, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.dtype_array_query"]], "dtype_array_query_val() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[772, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.dtype_array_query_val"]], "dtype_values_axis() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[772, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.dtype_values_axis"]], "einsum_helper() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[772, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.einsum_helper"]], "get_first_solve_batch_matrix() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[772, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.get_first_solve_batch_matrix"]], "get_first_solve_matrix() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[772, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.get_first_solve_matrix"]], "get_second_solve_batch_matrix() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[772, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.get_second_solve_batch_matrix"]], "get_second_solve_matrix() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[772, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.get_second_solve_matrix"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers": [[772, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers"]], "list_of_size() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[772, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.list_of_size"]], "lists() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[772, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.lists"]], "mutually_broadcastable_shapes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[772, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.mutually_broadcastable_shapes"]], "prod() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[772, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.prod"]], "array_dtypes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers)": [[773, "ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers.array_dtypes"]], "cast_filter() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers)": [[773, "ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers.cast_filter"]], "cast_filter_helper() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers)": [[773, "ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers.cast_filter_helper"]], "get_castable_dtype() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers)": [[773, "ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers.get_castable_dtype"]], "get_dtypes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers)": [[773, "ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers.get_dtypes"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers": [[773, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers"]], "broadcasterror": [[774, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.BroadcastError"]], "apply_safety_factor() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[774, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.apply_safety_factor"]], "broadcast_shapes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[774, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.broadcast_shapes"]], "dims_and_offset() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[774, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.dims_and_offset"]], "embedding_helper() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[774, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.embedding_helper"]], "general_helpers_dtype_info_helper() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[774, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.general_helpers_dtype_info_helper"]], "get_axis() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[774, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.get_axis"]], "get_bounds() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[774, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.get_bounds"]], "get_mean_std() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[774, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.get_mean_std"]], "get_shape() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[774, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.get_shape"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers": [[774, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers"]], "matrix_is_stable() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[774, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.matrix_is_stable"]], "reshape_shapes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[774, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.reshape_shapes"]], "sizes_() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[774, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.sizes_"]], "subsets() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[774, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.subsets"]], "two_broadcastable_shapes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[774, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.two_broadcastable_shapes"]], "x_and_filters() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[774, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.x_and_filters"]], "floats() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers)": [[775, "ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers.floats"]], "ints() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers)": [[775, "ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers.ints"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers": [[775, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers"]], "number() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers)": [[775, "ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers.number"]], "backend_proc() (in module ivy_tests.test_ivy.helpers.multiprocessing)": [[776, "ivy_tests.test_ivy.helpers.multiprocessing.backend_proc"]], "frontend_proc() (in module ivy_tests.test_ivy.helpers.multiprocessing)": [[776, "ivy_tests.test_ivy.helpers.multiprocessing.frontend_proc"]], "ivy_tests.test_ivy.helpers.multiprocessing": [[776, "module-ivy_tests.test_ivy.helpers.multiprocessing"]], "backendhandler (class in ivy_tests.test_ivy.helpers.pipeline_helper)": [[777, "ivy_tests.test_ivy.helpers.pipeline_helper.BackendHandler"]], "backendhandlermode (class in ivy_tests.test_ivy.helpers.pipeline_helper)": [[777, "ivy_tests.test_ivy.helpers.pipeline_helper.BackendHandlerMode"]], "setbackend (ivy_tests.test_ivy.helpers.pipeline_helper.backendhandlermode attribute)": [[777, "ivy_tests.test_ivy.helpers.pipeline_helper.BackendHandlerMode.SetBackend"]], "withbackend (ivy_tests.test_ivy.helpers.pipeline_helper.backendhandlermode attribute)": [[777, "ivy_tests.test_ivy.helpers.pipeline_helper.BackendHandlerMode.WithBackend"]], "withbackendcontext (class in ivy_tests.test_ivy.helpers.pipeline_helper)": [[777, "ivy_tests.test_ivy.helpers.pipeline_helper.WithBackendContext"]], "__init__() (ivy_tests.test_ivy.helpers.pipeline_helper.withbackendcontext method)": [[777, "ivy_tests.test_ivy.helpers.pipeline_helper.WithBackendContext.__init__"]], "get_frontend_config() (in module ivy_tests.test_ivy.helpers.pipeline_helper)": [[777, "ivy_tests.test_ivy.helpers.pipeline_helper.get_frontend_config"]], "ivy_tests.test_ivy.helpers.pipeline_helper": [[777, "module-ivy_tests.test_ivy.helpers.pipeline_helper"]], "update_backend() (ivy_tests.test_ivy.helpers.pipeline_helper.backendhandler class method)": [[777, "ivy_tests.test_ivy.helpers.pipeline_helper.BackendHandler.update_backend"]], "frontendmethoddata (class in ivy_tests.test_ivy.helpers.structs)": [[778, "ivy_tests.test_ivy.helpers.structs.FrontendMethodData"]], "__init__() (ivy_tests.test_ivy.helpers.structs.frontendmethoddata method)": [[778, "ivy_tests.test_ivy.helpers.structs.FrontendMethodData.__init__"]], "framework_init_module (ivy_tests.test_ivy.helpers.structs.frontendmethoddata attribute)": [[778, "ivy_tests.test_ivy.helpers.structs.FrontendMethodData.framework_init_module"]], "init_name (ivy_tests.test_ivy.helpers.structs.frontendmethoddata attribute)": [[778, "ivy_tests.test_ivy.helpers.structs.FrontendMethodData.init_name"]], "ivy_init_module (ivy_tests.test_ivy.helpers.structs.frontendmethoddata attribute)": [[778, "ivy_tests.test_ivy.helpers.structs.FrontendMethodData.ivy_init_module"]], "ivy_tests.test_ivy.helpers.structs": [[778, "module-ivy_tests.test_ivy.helpers.structs"]], "method_name (ivy_tests.test_ivy.helpers.structs.frontendmethoddata attribute)": [[778, "ivy_tests.test_ivy.helpers.structs.FrontendMethodData.method_name"]], "dynamicflag (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[779, "ivy_tests.test_ivy.helpers.test_parameter_flags.DynamicFlag"]], "frontendfunctiontestflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[779, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendFunctionTestFlags"]], "frontendinittestflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[779, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendInitTestFlags"]], "frontendmethodtestflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[779, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendMethodTestFlags"]], "functiontestflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[779, "ivy_tests.test_ivy.helpers.test_parameter_flags.FunctionTestFlags"]], "initmethodtestflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[779, "ivy_tests.test_ivy.helpers.test_parameter_flags.InitMethodTestFlags"]], "methodtestflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[779, "ivy_tests.test_ivy.helpers.test_parameter_flags.MethodTestFlags"]], "testflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[779, "ivy_tests.test_ivy.helpers.test_parameter_flags.TestFlags"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.dynamicflag method)": [[779, "ivy_tests.test_ivy.helpers.test_parameter_flags.DynamicFlag.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.frontendfunctiontestflags method)": [[779, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendFunctionTestFlags.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.frontendinittestflags method)": [[779, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendInitTestFlags.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.frontendmethodtestflags method)": [[779, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendMethodTestFlags.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.functiontestflags method)": [[779, "ivy_tests.test_ivy.helpers.test_parameter_flags.FunctionTestFlags.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.initmethodtestflags method)": [[779, "ivy_tests.test_ivy.helpers.test_parameter_flags.InitMethodTestFlags.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.methodtestflags method)": [[779, "ivy_tests.test_ivy.helpers.test_parameter_flags.MethodTestFlags.__init__"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.frontendfunctiontestflags method)": [[779, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendFunctionTestFlags.apply_flags"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.frontendinittestflags method)": [[779, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendInitTestFlags.apply_flags"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.frontendmethodtestflags method)": [[779, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendMethodTestFlags.apply_flags"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.functiontestflags method)": [[779, "ivy_tests.test_ivy.helpers.test_parameter_flags.FunctionTestFlags.apply_flags"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.initmethodtestflags method)": [[779, "ivy_tests.test_ivy.helpers.test_parameter_flags.InitMethodTestFlags.apply_flags"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.methodtestflags method)": [[779, "ivy_tests.test_ivy.helpers.test_parameter_flags.MethodTestFlags.apply_flags"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.testflags method)": [[779, "ivy_tests.test_ivy.helpers.test_parameter_flags.TestFlags.apply_flags"]], "build_flag() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[779, "ivy_tests.test_ivy.helpers.test_parameter_flags.build_flag"]], "frontend_function_flags() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[779, "ivy_tests.test_ivy.helpers.test_parameter_flags.frontend_function_flags"]], "frontend_init_flags() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[779, "ivy_tests.test_ivy.helpers.test_parameter_flags.frontend_init_flags"]], "frontend_method_flags() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[779, "ivy_tests.test_ivy.helpers.test_parameter_flags.frontend_method_flags"]], "function_flags() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[779, "ivy_tests.test_ivy.helpers.test_parameter_flags.function_flags"]], "init_method_flags() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[779, "ivy_tests.test_ivy.helpers.test_parameter_flags.init_method_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags": [[779, "module-ivy_tests.test_ivy.helpers.test_parameter_flags"]], "method_flags() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[779, "ivy_tests.test_ivy.helpers.test_parameter_flags.method_flags"]], "strategy (ivy_tests.test_ivy.helpers.test_parameter_flags.dynamicflag attribute)": [[779, "ivy_tests.test_ivy.helpers.test_parameter_flags.DynamicFlag.strategy"]], "handle_example() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[780, "ivy_tests.test_ivy.helpers.testing_helpers.handle_example"]], "handle_frontend_method() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[780, "ivy_tests.test_ivy.helpers.testing_helpers.handle_frontend_method"]], "handle_frontend_test() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[780, "ivy_tests.test_ivy.helpers.testing_helpers.handle_frontend_test"]], "handle_method() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[780, "ivy_tests.test_ivy.helpers.testing_helpers.handle_method"]], "handle_test() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[780, "ivy_tests.test_ivy.helpers.testing_helpers.handle_test"]], "ivy_tests.test_ivy.helpers.testing_helpers": [[780, "module-ivy_tests.test_ivy.helpers.testing_helpers"]], "num_positional_args() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[780, "ivy_tests.test_ivy.helpers.testing_helpers.num_positional_args"]], "num_positional_args_helper() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[780, "ivy_tests.test_ivy.helpers.testing_helpers.num_positional_args_helper"]], "num_positional_args_method() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[780, "ivy_tests.test_ivy.helpers.testing_helpers.num_positional_args_method"]], "seed() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[780, "ivy_tests.test_ivy.helpers.testing_helpers.seed"]], "elu (class in ivy.stateful.activations)": [[784, "ivy.stateful.activations.ELU"]], "geglu (class in ivy.stateful.activations)": [[784, "ivy.stateful.activations.GEGLU"]], "gelu (class in ivy.stateful.activations)": [[784, "ivy.stateful.activations.GELU"]], "hardswish (class in ivy.stateful.activations)": [[784, "ivy.stateful.activations.Hardswish"]], "leakyrelu (class in ivy.stateful.activations)": [[784, "ivy.stateful.activations.LeakyReLU"]], "logsigmoid (class in ivy.stateful.activations)": [[784, "ivy.stateful.activations.LogSigmoid"]], "logsoftmax (class in ivy.stateful.activations)": [[784, "ivy.stateful.activations.LogSoftmax"]], "logit (class in ivy.stateful.activations)": [[784, "ivy.stateful.activations.Logit"]], "mish (class in ivy.stateful.activations)": [[784, "ivy.stateful.activations.Mish"]], "prelu (class in ivy.stateful.activations)": [[784, "ivy.stateful.activations.PReLU"]], "relu (class in ivy.stateful.activations)": [[784, "ivy.stateful.activations.ReLU"]], "relu6 (class in ivy.stateful.activations)": [[784, "ivy.stateful.activations.ReLU6"]], "selu (class in ivy.stateful.activations)": [[784, "ivy.stateful.activations.SeLU"]], "silu (class in ivy.stateful.activations)": [[784, "ivy.stateful.activations.SiLU"]], "sigmoid (class in ivy.stateful.activations)": [[784, "ivy.stateful.activations.Sigmoid"]], "softmax (class in ivy.stateful.activations)": [[784, "ivy.stateful.activations.Softmax"]], "softplus (class in ivy.stateful.activations)": [[784, "ivy.stateful.activations.Softplus"]], "tanh (class in ivy.stateful.activations)": [[784, "ivy.stateful.activations.Tanh"]], "__init__() (ivy.stateful.activations.elu method)": [[784, "ivy.stateful.activations.ELU.__init__"]], "__init__() (ivy.stateful.activations.geglu method)": [[784, "ivy.stateful.activations.GEGLU.__init__"]], "__init__() (ivy.stateful.activations.gelu method)": [[784, "ivy.stateful.activations.GELU.__init__"]], "__init__() (ivy.stateful.activations.hardswish method)": [[784, "ivy.stateful.activations.Hardswish.__init__"]], "__init__() (ivy.stateful.activations.leakyrelu method)": [[784, "ivy.stateful.activations.LeakyReLU.__init__"]], "__init__() (ivy.stateful.activations.logsigmoid method)": [[784, "ivy.stateful.activations.LogSigmoid.__init__"]], "__init__() (ivy.stateful.activations.logsoftmax method)": [[784, "ivy.stateful.activations.LogSoftmax.__init__"]], "__init__() (ivy.stateful.activations.logit method)": [[784, "ivy.stateful.activations.Logit.__init__"]], "__init__() (ivy.stateful.activations.mish method)": [[784, "ivy.stateful.activations.Mish.__init__"]], "__init__() (ivy.stateful.activations.prelu method)": [[784, "ivy.stateful.activations.PReLU.__init__"]], "__init__() (ivy.stateful.activations.relu method)": [[784, "ivy.stateful.activations.ReLU.__init__"]], "__init__() (ivy.stateful.activations.relu6 method)": [[784, "ivy.stateful.activations.ReLU6.__init__"]], "__init__() (ivy.stateful.activations.selu method)": [[784, "ivy.stateful.activations.SeLU.__init__"]], "__init__() (ivy.stateful.activations.silu method)": [[784, "ivy.stateful.activations.SiLU.__init__"]], "__init__() (ivy.stateful.activations.sigmoid method)": [[784, "ivy.stateful.activations.Sigmoid.__init__"]], "__init__() (ivy.stateful.activations.softmax method)": [[784, "ivy.stateful.activations.Softmax.__init__"]], "__init__() (ivy.stateful.activations.softplus method)": [[784, "ivy.stateful.activations.Softplus.__init__"]], "__init__() (ivy.stateful.activations.tanh method)": [[784, "ivy.stateful.activations.Tanh.__init__"]], "ivy.stateful.activations": [[784, "module-ivy.stateful.activations"]], "moduleconverters (class in ivy.stateful.converters)": [[785, "ivy.stateful.converters.ModuleConverters"]], "from_flax_module() (ivy.stateful.converters.moduleconverters static method)": [[785, "ivy.stateful.converters.ModuleConverters.from_flax_module"]], "from_haiku_module() (ivy.stateful.converters.moduleconverters static method)": [[785, "ivy.stateful.converters.ModuleConverters.from_haiku_module"]], "from_keras_module() (ivy.stateful.converters.moduleconverters static method)": [[785, "ivy.stateful.converters.ModuleConverters.from_keras_module"]], "from_paddle_module() (ivy.stateful.converters.moduleconverters static method)": [[785, "ivy.stateful.converters.ModuleConverters.from_paddle_module"]], "from_torch_module() (ivy.stateful.converters.moduleconverters static method)": [[785, "ivy.stateful.converters.ModuleConverters.from_torch_module"]], "ivy.stateful.converters": [[785, "module-ivy.stateful.converters"]], "to_ivy_module() (in module ivy.stateful.converters)": [[785, "ivy.stateful.converters.to_ivy_module"]], "to_keras_module() (ivy.stateful.converters.moduleconverters method)": [[785, "ivy.stateful.converters.ModuleConverters.to_keras_module"]], "modulehelpers (class in ivy.stateful.helpers)": [[786, "ivy.stateful.helpers.ModuleHelpers"]], "ivy.stateful.helpers": [[786, "module-ivy.stateful.helpers"]], "constant (class in ivy.stateful.initializers)": [[787, "ivy.stateful.initializers.Constant"]], "firstlayersiren (class in ivy.stateful.initializers)": [[787, "ivy.stateful.initializers.FirstLayerSiren"]], "glorotuniform (class in ivy.stateful.initializers)": [[787, "ivy.stateful.initializers.GlorotUniform"]], "initializer (class in ivy.stateful.initializers)": [[787, "ivy.stateful.initializers.Initializer"]], "kaimingnormal (class in ivy.stateful.initializers)": [[787, "ivy.stateful.initializers.KaimingNormal"]], "ones (class in ivy.stateful.initializers)": [[787, "ivy.stateful.initializers.Ones"]], "randomnormal (class in ivy.stateful.initializers)": [[787, "ivy.stateful.initializers.RandomNormal"]], "siren (class in ivy.stateful.initializers)": [[787, "ivy.stateful.initializers.Siren"]], "uniform (class in ivy.stateful.initializers)": [[787, "ivy.stateful.initializers.Uniform"]], "zeros (class in ivy.stateful.initializers)": [[787, "ivy.stateful.initializers.Zeros"]], "__init__() (ivy.stateful.initializers.constant method)": [[787, "ivy.stateful.initializers.Constant.__init__"]], "__init__() (ivy.stateful.initializers.firstlayersiren method)": [[787, "ivy.stateful.initializers.FirstLayerSiren.__init__"]], "__init__() (ivy.stateful.initializers.glorotuniform method)": [[787, "ivy.stateful.initializers.GlorotUniform.__init__"]], "__init__() (ivy.stateful.initializers.kaimingnormal method)": [[787, "ivy.stateful.initializers.KaimingNormal.__init__"]], "__init__() (ivy.stateful.initializers.ones method)": [[787, "ivy.stateful.initializers.Ones.__init__"]], "__init__() (ivy.stateful.initializers.randomnormal method)": [[787, "ivy.stateful.initializers.RandomNormal.__init__"]], "__init__() (ivy.stateful.initializers.siren method)": [[787, "ivy.stateful.initializers.Siren.__init__"]], "__init__() (ivy.stateful.initializers.uniform method)": [[787, "ivy.stateful.initializers.Uniform.__init__"]], "__init__() (ivy.stateful.initializers.zeros method)": [[787, "ivy.stateful.initializers.Zeros.__init__"]], "create_variables() (ivy.stateful.initializers.constant method)": [[787, "ivy.stateful.initializers.Constant.create_variables"]], "create_variables() (ivy.stateful.initializers.initializer method)": [[787, "ivy.stateful.initializers.Initializer.create_variables"]], "create_variables() (ivy.stateful.initializers.kaimingnormal method)": [[787, "ivy.stateful.initializers.KaimingNormal.create_variables"]], "create_variables() (ivy.stateful.initializers.randomnormal method)": [[787, "ivy.stateful.initializers.RandomNormal.create_variables"]], "create_variables() (ivy.stateful.initializers.uniform method)": [[787, "ivy.stateful.initializers.Uniform.create_variables"]], "ivy.stateful.initializers": [[787, "module-ivy.stateful.initializers"]], "adaptiveavgpool1d (class in ivy.stateful.layers)": [[788, "ivy.stateful.layers.AdaptiveAvgPool1d"]], "adaptiveavgpool2d (class in ivy.stateful.layers)": [[788, "ivy.stateful.layers.AdaptiveAvgPool2d"]], "avgpool1d (class in ivy.stateful.layers)": [[788, "ivy.stateful.layers.AvgPool1D"]], "avgpool2d (class in ivy.stateful.layers)": [[788, "ivy.stateful.layers.AvgPool2D"]], "avgpool3d (class in ivy.stateful.layers)": [[788, "ivy.stateful.layers.AvgPool3D"]], "conv1d (class in ivy.stateful.layers)": [[788, "ivy.stateful.layers.Conv1D"]], "conv1dtranspose (class in ivy.stateful.layers)": [[788, "ivy.stateful.layers.Conv1DTranspose"]], "conv2d (class in ivy.stateful.layers)": [[788, "ivy.stateful.layers.Conv2D"]], "conv2dtranspose (class in ivy.stateful.layers)": [[788, "ivy.stateful.layers.Conv2DTranspose"]], "conv3d (class in ivy.stateful.layers)": [[788, "ivy.stateful.layers.Conv3D"]], "conv3dtranspose (class in ivy.stateful.layers)": [[788, "ivy.stateful.layers.Conv3DTranspose"]], "dct (class in ivy.stateful.layers)": [[788, "ivy.stateful.layers.Dct"]], "depthwiseconv2d (class in ivy.stateful.layers)": [[788, "ivy.stateful.layers.DepthwiseConv2D"]], "dropout (class in ivy.stateful.layers)": [[788, "ivy.stateful.layers.Dropout"]], "embedding (class in ivy.stateful.layers)": [[788, "ivy.stateful.layers.Embedding"]], "fft (class in ivy.stateful.layers)": [[788, "ivy.stateful.layers.FFT"]], "ifft (class in ivy.stateful.layers)": [[788, "ivy.stateful.layers.IFFT"]], "identity (class in ivy.stateful.layers)": [[788, "ivy.stateful.layers.Identity"]], "lstm (class in ivy.stateful.layers)": [[788, "ivy.stateful.layers.LSTM"]], "linear (class in ivy.stateful.layers)": [[788, "ivy.stateful.layers.Linear"]], "maxpool1d (class in ivy.stateful.layers)": [[788, "ivy.stateful.layers.MaxPool1D"]], "maxpool2d (class in ivy.stateful.layers)": [[788, "ivy.stateful.layers.MaxPool2D"]], "maxpool3d (class in ivy.stateful.layers)": [[788, "ivy.stateful.layers.MaxPool3D"]], "multiheadattention (class in ivy.stateful.layers)": [[788, "ivy.stateful.layers.MultiHeadAttention"]], "__init__() (ivy.stateful.layers.adaptiveavgpool1d method)": [[788, "ivy.stateful.layers.AdaptiveAvgPool1d.__init__"]], "__init__() (ivy.stateful.layers.adaptiveavgpool2d method)": [[788, "ivy.stateful.layers.AdaptiveAvgPool2d.__init__"]], "__init__() (ivy.stateful.layers.avgpool1d method)": [[788, "ivy.stateful.layers.AvgPool1D.__init__"]], "__init__() (ivy.stateful.layers.avgpool2d method)": [[788, "ivy.stateful.layers.AvgPool2D.__init__"]], "__init__() (ivy.stateful.layers.avgpool3d method)": [[788, "ivy.stateful.layers.AvgPool3D.__init__"]], "__init__() (ivy.stateful.layers.conv1d method)": [[788, "ivy.stateful.layers.Conv1D.__init__"]], "__init__() (ivy.stateful.layers.conv1dtranspose method)": [[788, "ivy.stateful.layers.Conv1DTranspose.__init__"]], "__init__() (ivy.stateful.layers.conv2d method)": [[788, "ivy.stateful.layers.Conv2D.__init__"]], "__init__() (ivy.stateful.layers.conv2dtranspose method)": [[788, "ivy.stateful.layers.Conv2DTranspose.__init__"]], "__init__() (ivy.stateful.layers.conv3d method)": [[788, "ivy.stateful.layers.Conv3D.__init__"]], "__init__() (ivy.stateful.layers.conv3dtranspose method)": [[788, "ivy.stateful.layers.Conv3DTranspose.__init__"]], "__init__() (ivy.stateful.layers.dct method)": [[788, "ivy.stateful.layers.Dct.__init__"]], "__init__() (ivy.stateful.layers.depthwiseconv2d method)": [[788, "ivy.stateful.layers.DepthwiseConv2D.__init__"]], "__init__() (ivy.stateful.layers.dropout method)": [[788, "ivy.stateful.layers.Dropout.__init__"]], "__init__() (ivy.stateful.layers.embedding method)": [[788, "ivy.stateful.layers.Embedding.__init__"]], "__init__() (ivy.stateful.layers.fft method)": [[788, "ivy.stateful.layers.FFT.__init__"]], "__init__() (ivy.stateful.layers.ifft method)": [[788, "ivy.stateful.layers.IFFT.__init__"]], "__init__() (ivy.stateful.layers.identity method)": [[788, "ivy.stateful.layers.Identity.__init__"]], "__init__() (ivy.stateful.layers.lstm method)": [[788, "ivy.stateful.layers.LSTM.__init__"]], "__init__() (ivy.stateful.layers.linear method)": [[788, "ivy.stateful.layers.Linear.__init__"]], "__init__() (ivy.stateful.layers.maxpool1d method)": [[788, "ivy.stateful.layers.MaxPool1D.__init__"]], "__init__() (ivy.stateful.layers.maxpool2d method)": [[788, "ivy.stateful.layers.MaxPool2D.__init__"]], "__init__() (ivy.stateful.layers.maxpool3d method)": [[788, "ivy.stateful.layers.MaxPool3D.__init__"]], "__init__() (ivy.stateful.layers.multiheadattention method)": [[788, "ivy.stateful.layers.MultiHeadAttention.__init__"]], "get_initial_state() (ivy.stateful.layers.lstm method)": [[788, "ivy.stateful.layers.LSTM.get_initial_state"]], "ivy.stateful.layers": [[788, "module-ivy.stateful.layers"]], "binarycrossentropyloss (class in ivy.stateful.losses)": [[789, "ivy.stateful.losses.BinaryCrossEntropyLoss"]], "crossentropyloss (class in ivy.stateful.losses)": [[789, "ivy.stateful.losses.CrossEntropyLoss"]], "logpoissonloss (class in ivy.stateful.losses)": [[789, "ivy.stateful.losses.LogPoissonLoss"]], "__init__() (ivy.stateful.losses.binarycrossentropyloss method)": [[789, "ivy.stateful.losses.BinaryCrossEntropyLoss.__init__"]], "__init__() (ivy.stateful.losses.crossentropyloss method)": [[789, "ivy.stateful.losses.CrossEntropyLoss.__init__"]], "__init__() (ivy.stateful.losses.logpoissonloss method)": [[789, "ivy.stateful.losses.LogPoissonLoss.__init__"]], "ivy.stateful.losses": [[789, "module-ivy.stateful.losses"]], "module (class in ivy.stateful.module)": [[790, "ivy.stateful.module.Module"]], "modulemeta (class in ivy.stateful.module)": [[790, "ivy.stateful.module.ModuleMeta"]], "__call__() (ivy.stateful.module.module method)": [[790, "ivy.stateful.module.Module.__call__"]], "__init__() (ivy.stateful.module.module method)": [[790, "ivy.stateful.module.Module.__init__"]], "buffers (ivy.stateful.module.module property)": [[790, "ivy.stateful.module.Module.buffers"]], "build() (ivy.stateful.module.module method)": [[790, "ivy.stateful.module.Module.build"]], "build_mode (ivy.stateful.module.module property)": [[790, "ivy.stateful.module.Module.build_mode"]], "built (ivy.stateful.module.module property)": [[790, "ivy.stateful.module.Module.built"]], "device (ivy.stateful.module.module property)": [[790, "ivy.stateful.module.Module.device"]], "dtype (ivy.stateful.module.module property)": [[790, "ivy.stateful.module.Module.dtype"]], "eval() (ivy.stateful.module.module method)": [[790, "ivy.stateful.module.Module.eval"]], "ivy.stateful.module": [[790, "module-ivy.stateful.module"]], "load() (ivy.stateful.module.module static method)": [[790, "ivy.stateful.module.Module.load"]], "module_dict (ivy.stateful.module.module property)": [[790, "ivy.stateful.module.Module.module_dict"]], "register_buffer() (ivy.stateful.module.module method)": [[790, "ivy.stateful.module.Module.register_buffer"]], "register_parameter() (ivy.stateful.module.module method)": [[790, "ivy.stateful.module.Module.register_parameter"]], "save() (ivy.stateful.module.module method)": [[790, "ivy.stateful.module.Module.save"]], "save_weights() (ivy.stateful.module.module method)": [[790, "ivy.stateful.module.Module.save_weights"]], "show_graph() (ivy.stateful.module.module method)": [[790, "ivy.stateful.module.Module.show_graph"]], "state_dict (ivy.stateful.module.module property)": [[790, "ivy.stateful.module.Module.state_dict"]], "to_device() (ivy.stateful.module.module method)": [[790, "ivy.stateful.module.Module.to_device"]], "trace_graph() (ivy.stateful.module.module method)": [[790, "ivy.stateful.module.Module.trace_graph"]], "train() (ivy.stateful.module.module method)": [[790, "ivy.stateful.module.Module.train"]], "training (ivy.stateful.module.module property)": [[790, "ivy.stateful.module.Module.training"]], "v (ivy.stateful.module.module property)": [[790, "ivy.stateful.module.Module.v"]], "batchnorm2d (class in ivy.stateful.norms)": [[791, "ivy.stateful.norms.BatchNorm2D"]], "layernorm (class in ivy.stateful.norms)": [[791, "ivy.stateful.norms.LayerNorm"]], "__init__() (ivy.stateful.norms.batchnorm2d method)": [[791, "ivy.stateful.norms.BatchNorm2D.__init__"]], "__init__() (ivy.stateful.norms.layernorm method)": [[791, "ivy.stateful.norms.LayerNorm.__init__"]], "ivy.stateful.norms": [[791, "module-ivy.stateful.norms"]], "adam (class in ivy.stateful.optimizers)": [[792, "ivy.stateful.optimizers.Adam"]], "adamw (class in ivy.stateful.optimizers)": [[792, "ivy.stateful.optimizers.AdamW"]], "lamb (class in ivy.stateful.optimizers)": [[792, "ivy.stateful.optimizers.LAMB"]], "lars (class in ivy.stateful.optimizers)": [[792, "ivy.stateful.optimizers.LARS"]], "optimizer (class in ivy.stateful.optimizers)": [[792, "ivy.stateful.optimizers.Optimizer"]], "sgd (class in ivy.stateful.optimizers)": [[792, "ivy.stateful.optimizers.SGD"]], "__init__() (ivy.stateful.optimizers.adam method)": [[792, "ivy.stateful.optimizers.Adam.__init__"]], "__init__() (ivy.stateful.optimizers.adamw method)": [[792, "ivy.stateful.optimizers.AdamW.__init__"]], "__init__() (ivy.stateful.optimizers.lamb method)": [[792, "ivy.stateful.optimizers.LAMB.__init__"]], "__init__() (ivy.stateful.optimizers.lars method)": [[792, "ivy.stateful.optimizers.LARS.__init__"]], "__init__() (ivy.stateful.optimizers.optimizer method)": [[792, "ivy.stateful.optimizers.Optimizer.__init__"]], "__init__() (ivy.stateful.optimizers.sgd method)": [[792, "ivy.stateful.optimizers.SGD.__init__"]], "ivy.stateful.optimizers": [[792, "module-ivy.stateful.optimizers"]], "set_state() (ivy.stateful.optimizers.adam method)": [[792, "ivy.stateful.optimizers.Adam.set_state"]], "set_state() (ivy.stateful.optimizers.lamb method)": [[792, "ivy.stateful.optimizers.LAMB.set_state"]], "set_state() (ivy.stateful.optimizers.lars method)": [[792, "ivy.stateful.optimizers.LARS.set_state"]], "set_state() (ivy.stateful.optimizers.optimizer method)": [[792, "ivy.stateful.optimizers.Optimizer.set_state"]], "set_state() (ivy.stateful.optimizers.sgd method)": [[792, "ivy.stateful.optimizers.SGD.set_state"]], "state (ivy.stateful.optimizers.adam property)": [[792, "ivy.stateful.optimizers.Adam.state"]], "state (ivy.stateful.optimizers.lamb property)": [[792, "ivy.stateful.optimizers.LAMB.state"]], "state (ivy.stateful.optimizers.lars property)": [[792, "ivy.stateful.optimizers.LARS.state"]], "state (ivy.stateful.optimizers.sgd property)": [[792, "ivy.stateful.optimizers.SGD.state"]], "step() (ivy.stateful.optimizers.optimizer method)": [[792, "ivy.stateful.optimizers.Optimizer.step"]], "sequential (class in ivy.stateful.sequential)": [[793, "ivy.stateful.sequential.Sequential"]], "__init__() (ivy.stateful.sequential.sequential method)": [[793, "ivy.stateful.sequential.Sequential.__init__"]], "ivy.stateful.sequential": [[793, "module-ivy.stateful.sequential"]], "check_all() (in module ivy.utils.assertions)": [[794, "ivy.utils.assertions.check_all"]], "check_all_or_any_fn() (in module ivy.utils.assertions)": [[794, "ivy.utils.assertions.check_all_or_any_fn"]], "check_any() (in module ivy.utils.assertions)": [[794, "ivy.utils.assertions.check_any"]], "check_dev_correct_formatting() (in module ivy.utils.assertions)": [[794, "ivy.utils.assertions.check_dev_correct_formatting"]], "check_dimensions() (in module ivy.utils.assertions)": [[794, "ivy.utils.assertions.check_dimensions"]], "check_elem_in_list() (in module ivy.utils.assertions)": [[794, "ivy.utils.assertions.check_elem_in_list"]], "check_equal() (in module ivy.utils.assertions)": [[794, "ivy.utils.assertions.check_equal"]], "check_exists() (in module ivy.utils.assertions)": [[794, "ivy.utils.assertions.check_exists"]], "check_false() (in module ivy.utils.assertions)": [[794, "ivy.utils.assertions.check_false"]], "check_gather_input_valid() (in module ivy.utils.assertions)": [[794, "ivy.utils.assertions.check_gather_input_valid"]], "check_gather_nd_input_valid() (in module ivy.utils.assertions)": [[794, "ivy.utils.assertions.check_gather_nd_input_valid"]], "check_greater() (in module ivy.utils.assertions)": [[794, "ivy.utils.assertions.check_greater"]], "check_inplace_sizes_valid() (in module ivy.utils.assertions)": [[794, "ivy.utils.assertions.check_inplace_sizes_valid"]], "check_isinstance() (in module ivy.utils.assertions)": [[794, "ivy.utils.assertions.check_isinstance"]], "check_kernel_padding_size() (in module ivy.utils.assertions)": [[794, "ivy.utils.assertions.check_kernel_padding_size"]], "check_less() (in module ivy.utils.assertions)": [[794, "ivy.utils.assertions.check_less"]], "check_one_way_broadcastable() (in module ivy.utils.assertions)": [[794, "ivy.utils.assertions.check_one_way_broadcastable"]], "check_same_dtype() (in module ivy.utils.assertions)": [[794, "ivy.utils.assertions.check_same_dtype"]], "check_shape() (in module ivy.utils.assertions)": [[794, "ivy.utils.assertions.check_shape"]], "check_shapes_broadcastable() (in module ivy.utils.assertions)": [[794, "ivy.utils.assertions.check_shapes_broadcastable"]], "check_true() (in module ivy.utils.assertions)": [[794, "ivy.utils.assertions.check_true"]], "check_unsorted_segment_valid_params() (in module ivy.utils.assertions)": [[794, "ivy.utils.assertions.check_unsorted_segment_valid_params"]], "ivy.utils.assertions": [[794, "module-ivy.utils.assertions"]], "ivy.utils.backend": [[795, "module-ivy.utils.backend"]], "importtransformer (class in ivy.utils.backend.ast_helpers)": [[796, "ivy.utils.backend.ast_helpers.ImportTransformer"]], "ivyloader (class in ivy.utils.backend.ast_helpers)": [[796, "ivy.utils.backend.ast_helpers.IvyLoader"]], "ivypathfinder (class in ivy.utils.backend.ast_helpers)": [[796, "ivy.utils.backend.ast_helpers.IvyPathFinder"]], "__init__() (ivy.utils.backend.ast_helpers.importtransformer method)": [[796, "ivy.utils.backend.ast_helpers.ImportTransformer.__init__"]], "__init__() (ivy.utils.backend.ast_helpers.ivyloader method)": [[796, "ivy.utils.backend.ast_helpers.IvyLoader.__init__"]], "exec_module() (ivy.utils.backend.ast_helpers.ivyloader method)": [[796, "ivy.utils.backend.ast_helpers.IvyLoader.exec_module"]], "find_spec() (ivy.utils.backend.ast_helpers.ivypathfinder method)": [[796, "ivy.utils.backend.ast_helpers.IvyPathFinder.find_spec"]], "impersonate_import() (ivy.utils.backend.ast_helpers.importtransformer method)": [[796, "ivy.utils.backend.ast_helpers.ImportTransformer.impersonate_import"]], "ivy.utils.backend.ast_helpers": [[796, "module-ivy.utils.backend.ast_helpers"]], "visit_import() (ivy.utils.backend.ast_helpers.importtransformer method)": [[796, "ivy.utils.backend.ast_helpers.ImportTransformer.visit_Import"]], "visit_importfrom() (ivy.utils.backend.ast_helpers.importtransformer method)": [[796, "ivy.utils.backend.ast_helpers.ImportTransformer.visit_ImportFrom"]], "contextmanager (class in ivy.utils.backend.handler)": [[797, "ivy.utils.backend.handler.ContextManager"]], "__init__() (ivy.utils.backend.handler.contextmanager method)": [[797, "ivy.utils.backend.handler.ContextManager.__init__"]], "choose_random_backend() (in module ivy.utils.backend.handler)": [[797, "ivy.utils.backend.handler.choose_random_backend"]], "current_backend() (in module ivy.utils.backend.handler)": [[797, "ivy.utils.backend.handler.current_backend"]], "dynamic_backend_converter() (in module ivy.utils.backend.handler)": [[797, "ivy.utils.backend.handler.dynamic_backend_converter"]], "ivy.utils.backend.handler": [[797, "module-ivy.utils.backend.handler"]], "prevent_access_locally() (in module ivy.utils.backend.handler)": [[797, "ivy.utils.backend.handler.prevent_access_locally"]], "previous_backend() (in module ivy.utils.backend.handler)": [[797, "ivy.utils.backend.handler.previous_backend"]], "set_backend() (in module ivy.utils.backend.handler)": [[797, "ivy.utils.backend.handler.set_backend"]], "set_backend_to_specific_version() (in module ivy.utils.backend.handler)": [[797, "ivy.utils.backend.handler.set_backend_to_specific_version"]], "set_jax_backend() (in module ivy.utils.backend.handler)": [[797, "ivy.utils.backend.handler.set_jax_backend"]], "set_mxnet_backend() (in module ivy.utils.backend.handler)": [[797, "ivy.utils.backend.handler.set_mxnet_backend"]], "set_numpy_backend() (in module ivy.utils.backend.handler)": [[797, "ivy.utils.backend.handler.set_numpy_backend"]], "set_paddle_backend() (in module ivy.utils.backend.handler)": [[797, "ivy.utils.backend.handler.set_paddle_backend"]], "set_tensorflow_backend() (in module ivy.utils.backend.handler)": [[797, "ivy.utils.backend.handler.set_tensorflow_backend"]], "set_torch_backend() (in module ivy.utils.backend.handler)": [[797, "ivy.utils.backend.handler.set_torch_backend"]], "unset_backend() (in module ivy.utils.backend.handler)": [[797, "ivy.utils.backend.handler.unset_backend"]], "with_backend() (in module ivy.utils.backend.handler)": [[797, "ivy.utils.backend.handler.with_backend"]], "clear_sub_backends() (in module ivy.utils.backend.sub_backend_handler)": [[798, "ivy.utils.backend.sub_backend_handler.clear_sub_backends"]], "find_available_sub_backends() (in module ivy.utils.backend.sub_backend_handler)": [[798, "ivy.utils.backend.sub_backend_handler.find_available_sub_backends"]], "fn_name_from_version_specific_fn_name() (in module ivy.utils.backend.sub_backend_handler)": [[798, "ivy.utils.backend.sub_backend_handler.fn_name_from_version_specific_fn_name"]], "fn_name_from_version_specific_fn_name_sub_backend() (in module ivy.utils.backend.sub_backend_handler)": [[798, "ivy.utils.backend.sub_backend_handler.fn_name_from_version_specific_fn_name_sub_backend"]], "ivy.utils.backend.sub_backend_handler": [[798, "module-ivy.utils.backend.sub_backend_handler"]], "set_sub_backend() (in module ivy.utils.backend.sub_backend_handler)": [[798, "ivy.utils.backend.sub_backend_handler.set_sub_backend"]], "set_sub_backend_to_specific_version() (in module ivy.utils.backend.sub_backend_handler)": [[798, "ivy.utils.backend.sub_backend_handler.set_sub_backend_to_specific_version"]], "unset_sub_backend() (in module ivy.utils.backend.sub_backend_handler)": [[798, "ivy.utils.backend.sub_backend_handler.unset_sub_backend"]], "check_for_binaries() (in module ivy.utils.binaries)": [[799, "ivy.utils.binaries.check_for_binaries"]], "cleanup_and_fetch_binaries() (in module ivy.utils.binaries)": [[799, "ivy.utils.binaries.cleanup_and_fetch_binaries"]], "ivy.utils.binaries": [[799, "module-ivy.utils.binaries"]], "import_module() (in module ivy.utils.dynamic_import)": [[800, "ivy.utils.dynamic_import.import_module"]], "ivy.utils.dynamic_import": [[800, "module-ivy.utils.dynamic_import"]], "convert_interleaved_input() (in module ivy.utils.einsum_parser)": [[801, "ivy.utils.einsum_parser.convert_interleaved_input"]], "convert_subscripts() (in module ivy.utils.einsum_parser)": [[801, "ivy.utils.einsum_parser.convert_subscripts"]], "find_output_shape() (in module ivy.utils.einsum_parser)": [[801, "ivy.utils.einsum_parser.find_output_shape"]], "find_output_str() (in module ivy.utils.einsum_parser)": [[801, "ivy.utils.einsum_parser.find_output_str"]], "gen_unused_symbols() (in module ivy.utils.einsum_parser)": [[801, "ivy.utils.einsum_parser.gen_unused_symbols"]], "get_symbol() (in module ivy.utils.einsum_parser)": [[801, "ivy.utils.einsum_parser.get_symbol"]], "has_valid_einsum_chars_only() (in module ivy.utils.einsum_parser)": [[801, "ivy.utils.einsum_parser.has_valid_einsum_chars_only"]], "is_valid_einsum_char() (in module ivy.utils.einsum_parser)": [[801, "ivy.utils.einsum_parser.is_valid_einsum_char"]], "ivy.utils.einsum_parser": [[801, "module-ivy.utils.einsum_parser"]], "legalise_einsum_expr() (in module ivy.utils.einsum_parser)": [[801, "ivy.utils.einsum_parser.legalise_einsum_expr"]], "possibly_convert_to_numpy() (in module ivy.utils.einsum_parser)": [[801, "ivy.utils.einsum_parser.possibly_convert_to_numpy"]], "can_dot() (in module ivy.utils.einsum_path_helpers)": [[802, "ivy.utils.einsum_path_helpers.can_dot"]], "compute_size_by_dict() (in module ivy.utils.einsum_path_helpers)": [[802, "ivy.utils.einsum_path_helpers.compute_size_by_dict"]], "find_contraction() (in module ivy.utils.einsum_path_helpers)": [[802, "ivy.utils.einsum_path_helpers.find_contraction"]], "flop_count() (in module ivy.utils.einsum_path_helpers)": [[802, "ivy.utils.einsum_path_helpers.flop_count"]], "greedy_path() (in module ivy.utils.einsum_path_helpers)": [[802, "ivy.utils.einsum_path_helpers.greedy_path"]], "ivy.utils.einsum_path_helpers": [[802, "module-ivy.utils.einsum_path_helpers"]], "optimal_path() (in module ivy.utils.einsum_path_helpers)": [[802, "ivy.utils.einsum_path_helpers.optimal_path"]], "parse_einsum_input() (in module ivy.utils.einsum_path_helpers)": [[802, "ivy.utils.einsum_path_helpers.parse_einsum_input"]], "parse_possible_contraction() (in module ivy.utils.einsum_path_helpers)": [[802, "ivy.utils.einsum_path_helpers.parse_possible_contraction"]], "update_other_results() (in module ivy.utils.einsum_path_helpers)": [[802, "ivy.utils.einsum_path_helpers.update_other_results"]], "inplaceupdateexception": [[803, "ivy.utils.exceptions.InplaceUpdateException"]], "ivyattributeerror": [[803, "ivy.utils.exceptions.IvyAttributeError"]], "ivybackendexception": [[803, "ivy.utils.exceptions.IvyBackendException"]], "ivybroadcastshapeerror": [[803, "ivy.utils.exceptions.IvyBroadcastShapeError"]], "ivydeviceerror": [[803, "ivy.utils.exceptions.IvyDeviceError"]], "ivydtypepromotionerror": [[803, "ivy.utils.exceptions.IvyDtypePromotionError"]], "ivyerror": [[803, "ivy.utils.exceptions.IvyError"]], "ivyexception": [[803, "ivy.utils.exceptions.IvyException"]], "ivyindexerror": [[803, "ivy.utils.exceptions.IvyIndexError"]], "ivyinvalidbackendexception": [[803, "ivy.utils.exceptions.IvyInvalidBackendException"]], "ivynotimplementedexception": [[803, "ivy.utils.exceptions.IvyNotImplementedException"]], "ivyvalueerror": [[803, "ivy.utils.exceptions.IvyValueError"]], "__init__() (ivy.utils.exceptions.inplaceupdateexception method)": [[803, "ivy.utils.exceptions.InplaceUpdateException.__init__"]], "__init__() (ivy.utils.exceptions.ivyattributeerror method)": [[803, "ivy.utils.exceptions.IvyAttributeError.__init__"]], "__init__() (ivy.utils.exceptions.ivybackendexception method)": [[803, "ivy.utils.exceptions.IvyBackendException.__init__"]], "__init__() (ivy.utils.exceptions.ivybroadcastshapeerror method)": [[803, "ivy.utils.exceptions.IvyBroadcastShapeError.__init__"]], "__init__() (ivy.utils.exceptions.ivydeviceerror method)": [[803, "ivy.utils.exceptions.IvyDeviceError.__init__"]], "__init__() (ivy.utils.exceptions.ivydtypepromotionerror method)": [[803, "ivy.utils.exceptions.IvyDtypePromotionError.__init__"]], "__init__() (ivy.utils.exceptions.ivyerror method)": [[803, "ivy.utils.exceptions.IvyError.__init__"]], "__init__() (ivy.utils.exceptions.ivyexception method)": [[803, "ivy.utils.exceptions.IvyException.__init__"]], "__init__() (ivy.utils.exceptions.ivyindexerror method)": [[803, "ivy.utils.exceptions.IvyIndexError.__init__"]], "__init__() (ivy.utils.exceptions.ivyinvalidbackendexception method)": [[803, "ivy.utils.exceptions.IvyInvalidBackendException.__init__"]], "__init__() (ivy.utils.exceptions.ivynotimplementedexception method)": [[803, "ivy.utils.exceptions.IvyNotImplementedException.__init__"]], "__init__() (ivy.utils.exceptions.ivyvalueerror method)": [[803, "ivy.utils.exceptions.IvyValueError.__init__"]], "handle_exceptions() (in module ivy.utils.exceptions)": [[803, "ivy.utils.exceptions.handle_exceptions"]], "ivy.utils.exceptions": [[803, "module-ivy.utils.exceptions"]], "add_array_specs() (in module ivy.utils.inspection)": [[804, "ivy.utils.inspection.add_array_specs"]], "fn_array_spec() (in module ivy.utils.inspection)": [[804, "ivy.utils.inspection.fn_array_spec"]], "ivy.utils.inspection": [[804, "module-ivy.utils.inspection"]], "ivy.utils.logging": [[805, "module-ivy.utils.logging"]], "set_logging_mode() (in module ivy.utils.logging)": [[805, "ivy.utils.logging.set_logging_mode"]], "unset_logging_mode() (in module ivy.utils.logging)": [[805, "ivy.utils.logging.unset_logging_mode"]], "profiler (class in ivy.utils.profiler)": [[806, "ivy.utils.profiler.Profiler"]], "__init__() (ivy.utils.profiler.profiler method)": [[806, "ivy.utils.profiler.Profiler.__init__"]], "ivy.utils.profiler": [[806, "module-ivy.utils.profiler"]], "print_stats (ivy.utils.profiler.profiler attribute)": [[806, "ivy.utils.profiler.Profiler.print_stats"]], "tensorflow_profile_start() (in module ivy.utils.profiler)": [[806, "ivy.utils.profiler.tensorflow_profile_start"]], "tensorflow_profile_stop() (in module ivy.utils.profiler)": [[806, "ivy.utils.profiler.tensorflow_profile_stop"]], "torch_profiler_init() (in module ivy.utils.profiler)": [[806, "ivy.utils.profiler.torch_profiler_init"]], "torch_profiler_start() (in module ivy.utils.profiler)": [[806, "ivy.utils.profiler.torch_profiler_start"]], "torch_profiler_stop() (in module ivy.utils.profiler)": [[806, "ivy.utils.profiler.torch_profiler_stop"]], "viz (ivy.utils.profiler.profiler attribute)": [[806, "ivy.utils.profiler.Profiler.viz"]], "cprint() (in module ivy.utils.verbosity)": [[807, "ivy.utils.verbosity.cprint"]], "ivy.utils.verbosity": [[807, "module-ivy.utils.verbosity"]], "automatic code conversions": [[853, "term-Automatic-Code-Conversions"]], "backend handler": [[853, "term-Backend-Handler"]], "compositional functions": [[853, "term-Compositional-Functions"]], "convenience functions": [[853, "term-Convenience-Functions"]], "framework": [[853, "term-Framework"]], "framework handler": [[853, "term-Framework-Handler"]], "graph compiler": [[853, "term-Graph-Compiler"]], "ivy array": [[853, "term-Ivy-Array"]], "ivy backends": [[853, "term-Ivy-Backends"]], "ivy compiler": [[853, "term-Ivy-Compiler"]], "ivy container": [[853, "term-Ivy-Container"]], "ivy frontends": [[853, "term-Ivy-Frontends"]], "ivy functional api": [[853, "term-Ivy-Functional-API"]], "ivy tracer": [[853, "term-Ivy-Tracer"]], "ivy transpiler": [[853, "term-Ivy-Transpiler"]], "mixed functions": [[853, "term-Mixed-Functions"]], "native array": [[853, "term-Native-Array"]], "nestable functions": [[853, "term-Nestable-Functions"]], "pipeline": [[853, "term-Pipeline"]], "primary functions": [[853, "term-Primary-Functions"]], "standalone functions": [[853, "term-Standalone-Functions"]], "submodule helper functions": [[853, "term-Submodule-Helper-Functions"]], "built-in function": [[859, "ivy.trace_graph"], [860, "ivy.transpile"], [861, "ivy.unify"]], "ivy.trace_graph()": [[859, "ivy.trace_graph"]], "ivy.transpile()": [[860, "ivy.transpile"]], "ivy.unify()": [[861, "ivy.unify"]]}})