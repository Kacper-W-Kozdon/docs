Search.setIndex({"docnames": ["demos/README", "demos/assets/01_template", "demos/examples_and_demos", "demos/examples_and_demos/alexnet_demo", "demos/examples_and_demos/bert_demo", "demos/examples_and_demos/dinov2_to_paddle", "demos/examples_and_demos/image_segmentation_with_ivy_unet", "demos/examples_and_demos/lstm_demo", "demos/examples_and_demos/mmpretrain_to_jax", "demos/examples_and_demos/resnet_demo", "demos/examples_and_demos/torch_to_jax", "demos/examples_and_demos/xgboost_demo", "demos/guides", "demos/guides/01_transpiling_a_torch_model", "demos/guides/02_transpiling_a_haiku_model", "demos/guides/03_transpiling_a_tf_model", "demos/guides/04_developing_a_convnet_with_ivy", "demos/index", "demos/learn_the_basics", "demos/learn_the_basics/01_write_ivy_code", "demos/learn_the_basics/02_unify_code", "demos/learn_the_basics/03_trace_code", "demos/learn_the_basics/04_transpile_code", "demos/learn_the_basics/05_lazy_vs_eager", "demos/learn_the_basics/06_how_to_use_decorators", "demos/learn_the_basics/07_transpile_any_library", "demos/learn_the_basics/08_transpile_any_model", "demos/learn_the_basics/09_write_a_model_using_ivy", "demos/misc/odsc", "demos/quickstart", "demos/wip/0_building_blocks/0_0_unify", "demos/wip/0_building_blocks/0_1_compile", "demos/wip/0_building_blocks/0_2_transpile", "demos/wip/1_the_basics/1_0_lazy_vs_eager", "demos/wip/1_the_basics/1_1_framework_selection", "demos/wip/1_the_basics/1_2_as_a_decorator", "demos/wip/1_the_basics/1_3_dynamic_vs_static", "demos/wip/2_libraries/2_0_kornia", "demos/wip/3_models/3_0_perceiver", "demos/wip/3_models/3_1_stable_diffusion", "demos/wip/basic_operations_with_ivy", "demos/wip/compilation_of_a_basic_function", "demos/wip/deepmind_perceiver_io", "demos/wip/deepmind_perceiverio", "demos/wip/end_to_end_training_pipeline_in_ivy", "demos/wip/hf_tensorflow_deit", "demos/wip/ivy_as_a_transpiler_intro", "demos/wip/resnet_18", "docs/data_classes/data_classes/array/ivy.data_classes.array.activations", "docs/data_classes/data_classes/array/ivy.data_classes.array.conversions", "docs/data_classes/data_classes/array/ivy.data_classes.array.creation", "docs/data_classes/data_classes/array/ivy.data_classes.array.data_type", "docs/data_classes/data_classes/array/ivy.data_classes.array.device", "docs/data_classes/data_classes/array/ivy.data_classes.array.elementwise", "docs/data_classes/data_classes/array/ivy.data_classes.array.experimental", "docs/data_classes/data_classes/array/ivy.data_classes.array.general", "docs/data_classes/data_classes/array/ivy.data_classes.array.gradients", "docs/data_classes/data_classes/array/ivy.data_classes.array.image", "docs/data_classes/data_classes/array/ivy.data_classes.array.layers", "docs/data_classes/data_classes/array/ivy.data_classes.array.linear_algebra", "docs/data_classes/data_classes/array/ivy.data_classes.array.losses", "docs/data_classes/data_classes/array/ivy.data_classes.array.manipulation", "docs/data_classes/data_classes/array/ivy.data_classes.array.norms", "docs/data_classes/data_classes/array/ivy.data_classes.array.random", "docs/data_classes/data_classes/array/ivy.data_classes.array.searching", "docs/data_classes/data_classes/array/ivy.data_classes.array.set", "docs/data_classes/data_classes/array/ivy.data_classes.array.sorting", "docs/data_classes/data_classes/array/ivy.data_classes.array.statistical", "docs/data_classes/data_classes/array/ivy.data_classes.array.utility", "docs/data_classes/data_classes/array/ivy.data_classes.array.wrapping", "docs/data_classes/data_classes/container/ivy.data_classes.container.activations", "docs/data_classes/data_classes/container/ivy.data_classes.container.base", "docs/data_classes/data_classes/container/ivy.data_classes.container.conversions", "docs/data_classes/data_classes/container/ivy.data_classes.container.creation", "docs/data_classes/data_classes/container/ivy.data_classes.container.data_type", "docs/data_classes/data_classes/container/ivy.data_classes.container.device", "docs/data_classes/data_classes/container/ivy.data_classes.container.elementwise", "docs/data_classes/data_classes/container/ivy.data_classes.container.experimental", "docs/data_classes/data_classes/container/ivy.data_classes.container.general", "docs/data_classes/data_classes/container/ivy.data_classes.container.gradients", "docs/data_classes/data_classes/container/ivy.data_classes.container.image", "docs/data_classes/data_classes/container/ivy.data_classes.container.layers", "docs/data_classes/data_classes/container/ivy.data_classes.container.linear_algebra", "docs/data_classes/data_classes/container/ivy.data_classes.container.losses", "docs/data_classes/data_classes/container/ivy.data_classes.container.manipulation", "docs/data_classes/data_classes/container/ivy.data_classes.container.norms", "docs/data_classes/data_classes/container/ivy.data_classes.container.random", "docs/data_classes/data_classes/container/ivy.data_classes.container.searching", "docs/data_classes/data_classes/container/ivy.data_classes.container.set", "docs/data_classes/data_classes/container/ivy.data_classes.container.sorting", "docs/data_classes/data_classes/container/ivy.data_classes.container.statistical", "docs/data_classes/data_classes/container/ivy.data_classes.container.utility", "docs/data_classes/data_classes/container/ivy.data_classes.container.wrapping", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.base", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.cp_tensor", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.parafac2_tensor", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.tr_tensor", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.tt_tensor", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.tucker_tensor", "docs/data_classes/data_classes/ivy.data_classes.array", "docs/data_classes/data_classes/ivy.data_classes.container", "docs/data_classes/data_classes/ivy.data_classes.factorized_tensor", "docs/data_classes/data_classes/ivy.data_classes.nested_array", "docs/data_classes/data_classes/nested_array/ivy.data_classes.nested_array.base", "docs/data_classes/data_classes/nested_array/ivy.data_classes.nested_array.elementwise", "docs/data_classes/ivy.data_classes", "docs/functional/ivy.functional.ivy", "docs/functional/ivy/activations/ivy.functional.ivy.activations.gelu", "docs/functional/ivy/activations/ivy.functional.ivy.activations.hardswish", "docs/functional/ivy/activations/ivy.functional.ivy.activations.leaky_relu", "docs/functional/ivy/activations/ivy.functional.ivy.activations.log_softmax", "docs/functional/ivy/activations/ivy.functional.ivy.activations.mish", "docs/functional/ivy/activations/ivy.functional.ivy.activations.relu", "docs/functional/ivy/activations/ivy.functional.ivy.activations.sigmoid", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softmax", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softplus", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softsign", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.cmp_is", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.cmp_isnot", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.for_loop", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.if_else", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.try_except", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.while_loop", "docs/functional/ivy/creation/ivy.functional.ivy.creation.arange", "docs/functional/ivy/creation/ivy.functional.ivy.creation.array", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray", "docs/functional/ivy/creation/ivy.functional.ivy.creation.copy_array", "docs/functional/ivy/creation/ivy.functional.ivy.creation.empty", "docs/functional/ivy/creation/ivy.functional.ivy.creation.empty_like", "docs/functional/ivy/creation/ivy.functional.ivy.creation.eye", "docs/functional/ivy/creation/ivy.functional.ivy.creation.from_dlpack", "docs/functional/ivy/creation/ivy.functional.ivy.creation.frombuffer", "docs/functional/ivy/creation/ivy.functional.ivy.creation.full", "docs/functional/ivy/creation/ivy.functional.ivy.creation.full_like", "docs/functional/ivy/creation/ivy.functional.ivy.creation.linspace", "docs/functional/ivy/creation/ivy.functional.ivy.creation.logspace", "docs/functional/ivy/creation/ivy.functional.ivy.creation.meshgrid", "docs/functional/ivy/creation/ivy.functional.ivy.creation.native_array", "docs/functional/ivy/creation/ivy.functional.ivy.creation.one_hot", "docs/functional/ivy/creation/ivy.functional.ivy.creation.ones", "docs/functional/ivy/creation/ivy.functional.ivy.creation.ones_like", "docs/functional/ivy/creation/ivy.functional.ivy.creation.to_dlpack", "docs/functional/ivy/creation/ivy.functional.ivy.creation.tril", "docs/functional/ivy/creation/ivy.functional.ivy.creation.triu", "docs/functional/ivy/creation/ivy.functional.ivy.creation.triu_indices", "docs/functional/ivy/creation/ivy.functional.ivy.creation.zeros", "docs/functional/ivy/creation/ivy.functional.ivy.creation.zeros_like", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.as_ivy_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.as_native_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.astype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.broadcast_arrays", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.broadcast_to", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.can_cast", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.check_float", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.closest_valid_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_complex_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_float_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_int_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_uint_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.dtype_bits", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.finfo", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.function_supported_dtypes", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.function_unsupported_dtypes", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.iinfo", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.infer_default_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.invalid_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_bool_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_complex_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_float_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_hashable_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_int_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_native_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_uint_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.promote_types", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.promote_types_of_inputs", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.result_type", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_complex_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_float_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_int_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_uint_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.type_promote_arrays", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_complex_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_float_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_int_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_uint_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.valid_dtype", "docs/functional/ivy/device/ivy.functional.ivy.device.as_ivy_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.as_native_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.clear_cached_mem_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.default_device", "docs/functional/ivy/device/ivy.functional.ivy.device.dev", "docs/functional/ivy/device/ivy.functional.ivy.device.dev_util", "docs/functional/ivy/device/ivy.functional.ivy.device.function_supported_devices", "docs/functional/ivy/device/ivy.functional.ivy.device.function_unsupported_devices", "docs/functional/ivy/device/ivy.functional.ivy.device.get_all_ivy_arrays_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.gpu_is_available", "docs/functional/ivy/device/ivy.functional.ivy.device.handle_soft_device_variable", "docs/functional/ivy/device/ivy.functional.ivy.device.num_cpu_cores", "docs/functional/ivy/device/ivy.functional.ivy.device.num_gpus", "docs/functional/ivy/device/ivy.functional.ivy.device.num_ivy_arrays_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.percent_used_mem_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.print_all_ivy_arrays_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.set_default_device", "docs/functional/ivy/device/ivy.functional.ivy.device.set_soft_device_mode", "docs/functional/ivy/device/ivy.functional.ivy.device.set_split_factor", "docs/functional/ivy/device/ivy.functional.ivy.device.split_factor", "docs/functional/ivy/device/ivy.functional.ivy.device.split_func_call", "docs/functional/ivy/device/ivy.functional.ivy.device.to_device", "docs/functional/ivy/device/ivy.functional.ivy.device.total_mem_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.tpu_is_available", "docs/functional/ivy/device/ivy.functional.ivy.device.unset_default_device", "docs/functional/ivy/device/ivy.functional.ivy.device.unset_soft_device_mode", "docs/functional/ivy/device/ivy.functional.ivy.device.used_mem_on_dev", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.abs", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.acos", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.acosh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.add", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.angle", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.asin", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.asinh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atan", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atan2", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atanh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_and", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_invert", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_left_shift", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_or", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_right_shift", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_xor", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.ceil", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.cos", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.cosh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.deg2rad", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.divide", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.equal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.erf", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.exp", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.exp2", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.expm1", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.floor", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.floor_divide", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.fmin", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.fmod", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.gcd", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.greater", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.greater_equal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.imag", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isfinite", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isinf", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isnan", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isreal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.lcm", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.less", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.less_equal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log10", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log1p", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log2", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logaddexp", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logaddexp2", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_and", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_not", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_or", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_xor", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.maximum", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.minimum", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.multiply", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.nan_to_num", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.negative", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.not_equal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.positive", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.pow", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.rad2deg", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.real", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.reciprocal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.remainder", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.round", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sign", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sin", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sinh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sqrt", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.square", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.subtract", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.tan", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.tanh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trapz", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trunc", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trunc_divide", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.celu", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.elu", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.hardshrink", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.hardsilu", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.hardtanh", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.logit", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.logsigmoid", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.prelu", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.relu6", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.scaled_tanh", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.selu", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.silu", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.softshrink", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.stanh", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.tanhshrink", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.threshold", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.thresholded_relu", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.blackman_window", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.eye_like", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.hamming_window", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.hann_window", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.indices", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.kaiser_bessel_derived_window", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.kaiser_window", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.mel_weight_matrix", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.ndenumerate", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.ndindex", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.polyval", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_cp", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_parafac2", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_tr", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_tt", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_tucker", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.tril_indices", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.trilu", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.unsorted_segment_mean", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.unsorted_segment_min", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.unsorted_segment_sum", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.vorbis_window", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.allclose", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.amax", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.amin", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.binarizer", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.conj", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.copysign", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.count_nonzero", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.diff", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.digamma", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.erfc", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.erfinv", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.fix", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.float_power", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.fmax", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.frexp", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.gradient", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.hypot", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.isclose", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.ldexp", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.lerp", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.lgamma", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.modf", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.nansum", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.nextafter", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.signbit", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.sinc", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.sparsify_tensor", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.xlogy", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.zeta", "docs/functional/ivy/experimental/general/ivy.functional.ivy.experimental.general.reduce", "docs/functional/ivy/experimental/gradients/ivy.functional.ivy.experimental.gradients.bind_custom_gradient_function", "docs/functional/ivy/experimental/gradients/ivy.functional.ivy.experimental.gradients.jvp", "docs/functional/ivy/experimental/gradients/ivy.functional.ivy.experimental.gradients.vjp", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.activations", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.constants", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.creation", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.data_type", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.device", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.elementwise", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.general", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.gradients", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.layers", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.linear_algebra", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.losses", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.manipulation", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.meta", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.nest", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.norms", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.random", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.searching", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.set", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.sorting", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.sparse_array", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.statistical", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.utility", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_avg_pool1d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_avg_pool2d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_max_pool2d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_max_pool3d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.area_interpolate", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool1d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool2d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool3d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dct", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dft", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout1d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout2d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout3d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.embedding", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.fft", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.fft2", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.generate_einsum_equation", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.get_interpolate_kernel", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.idct", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.ifft", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.ifftn", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.interp", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.interpolate", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool1d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool2d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool3d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_unpool1d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.nearest_interpolate", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.pool", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.reduce_window", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.rfft", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.rfftn", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.rnn", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.sliding_window", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.stft", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.adjoint", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.batched_outer", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.cond", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.diagflat", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.dot", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eig", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eigh_tridiagonal", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eigvals", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.general_inner_product", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.higher_order_moment", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.initialize_tucker", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.khatri_rao", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.kron", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.kronecker", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.lu_factor", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.lu_solve", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.make_svd_non_negative", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.matrix_exp", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.mode_dot", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.multi_dot", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.multi_mode_dot", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.partial_tucker", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.solve_triangular", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.svd_flip", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.tensor_train", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.truncated_svd", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.tt_matrix_to_tensor", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.tucker", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.hinge_embedding_loss", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.huber_loss", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.kl_div", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.l1_loss", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.log_poisson_loss", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.poisson_nll_loss", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.smooth_l1_loss", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.soft_margin_loss", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.as_strided", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.associative_scan", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_1d", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_2d", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_3d", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.broadcast_shapes", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.check_scalar", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.choose", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.column_stack", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.concat_from_sequence", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.dsplit", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.dstack", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.expand", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fill_diagonal", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.flatten", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fliplr", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.flipud", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fold", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.heaviside", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.hsplit", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.hstack", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.i0", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.matricize", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.moveaxis", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.pad", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_fold", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_tensor_to_vec", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_unfold", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_vec_to_tensor", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.put_along_axis", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.rot90", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.soft_thresholding", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.take", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.take_along_axis", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.top_k", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.trim_zeros", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.unflatten", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.unfold", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.unique_consecutive", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.vsplit", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.vstack", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.batch_norm", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.group_norm", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.instance_norm", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.l1_normalize", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.l2_normalize", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.local_response_norm", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.lp_normalize", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.bernoulli", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.beta", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.dirichlet", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.gamma", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.poisson", "docs/functional/ivy/experimental/searching/ivy.functional.ivy.experimental.searching.unravel_index", "docs/functional/ivy/experimental/sorting/ivy.functional.ivy.experimental.sorting.invert_permutation", "docs/functional/ivy/experimental/sorting/ivy.functional.ivy.experimental.sorting.lexsort", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.is_ivy_sparse_array", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.is_native_sparse_array", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.native_sparse_array", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.native_sparse_array_to_indices_values_and_shape", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.bincount", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.corrcoef", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cov", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cummax", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cummin", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.histogram", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.igamma", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.median", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanmean", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanmedian", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanmin", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanprod", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.quantile", "docs/functional/ivy/experimental/utility/ivy.functional.ivy.experimental.utility.optional_get_element", "docs/functional/ivy/general/ivy.functional.ivy.general.all_equal", "docs/functional/ivy/general/ivy.functional.ivy.general.arg_info", "docs/functional/ivy/general/ivy.functional.ivy.general.arg_names", "docs/functional/ivy/general/ivy.functional.ivy.general.array_equal", "docs/functional/ivy/general/ivy.functional.ivy.general.assert_supports_inplace", "docs/functional/ivy/general/ivy.functional.ivy.general.cache_fn", "docs/functional/ivy/general/ivy.functional.ivy.general.clip_matrix_norm", "docs/functional/ivy/general/ivy.functional.ivy.general.clip_vector_norm", "docs/functional/ivy/general/ivy.functional.ivy.general.container_types", "docs/functional/ivy/general/ivy.functional.ivy.general.current_backend_str", "docs/functional/ivy/general/ivy.functional.ivy.general.default", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_rearrange", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_reduce", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_repeat", "docs/functional/ivy/general/ivy.functional.ivy.general.exists", "docs/functional/ivy/general/ivy.functional.ivy.general.fourier_encode", "docs/functional/ivy/general/ivy.functional.ivy.general.function_supported_devices_and_dtypes", "docs/functional/ivy/general/ivy.functional.ivy.general.function_unsupported_devices_and_dtypes", "docs/functional/ivy/general/ivy.functional.ivy.general.gather", "docs/functional/ivy/general/ivy.functional.ivy.general.gather_nd", "docs/functional/ivy/general/ivy.functional.ivy.general.get_all_arrays_in_memory", "docs/functional/ivy/general/ivy.functional.ivy.general.get_item", "docs/functional/ivy/general/ivy.functional.ivy.general.get_num_dims", "docs/functional/ivy/general/ivy.functional.ivy.general.get_referrers_recursive", "docs/functional/ivy/general/ivy.functional.ivy.general.has_nans", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_arrays_supported", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_decrement", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_increment", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_update", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_variables_supported", "docs/functional/ivy/general/ivy.functional.ivy.general.is_array", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_array", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_container", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_nested_array", "docs/functional/ivy/general/ivy.functional.ivy.general.is_native_array", "docs/functional/ivy/general/ivy.functional.ivy.general.isin", "docs/functional/ivy/general/ivy.functional.ivy.general.isscalar", "docs/functional/ivy/general/ivy.functional.ivy.general.itemsize", "docs/functional/ivy/general/ivy.functional.ivy.general.match_kwargs", "docs/functional/ivy/general/ivy.functional.ivy.general.multiprocessing", "docs/functional/ivy/general/ivy.functional.ivy.general.num_arrays_in_memory", "docs/functional/ivy/general/ivy.functional.ivy.general.print_all_arrays_in_memory", "docs/functional/ivy/general/ivy.functional.ivy.general.scatter_flat", "docs/functional/ivy/general/ivy.functional.ivy.general.scatter_nd", "docs/functional/ivy/general/ivy.functional.ivy.general.set_array_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_exception_trace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_inplace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_item", "docs/functional/ivy/general/ivy.functional.ivy.general.set_min_base", "docs/functional/ivy/general/ivy.functional.ivy.general.set_min_denominator", "docs/functional/ivy/general/ivy.functional.ivy.general.set_nestable_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_precise_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_queue_timeout", "docs/functional/ivy/general/ivy.functional.ivy.general.set_shape_array_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_show_func_wrapper_trace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_tmp_dir", "docs/functional/ivy/general/ivy.functional.ivy.general.shape", "docs/functional/ivy/general/ivy.functional.ivy.general.size", "docs/functional/ivy/general/ivy.functional.ivy.general.stable_divide", "docs/functional/ivy/general/ivy.functional.ivy.general.stable_pow", "docs/functional/ivy/general/ivy.functional.ivy.general.strides", "docs/functional/ivy/general/ivy.functional.ivy.general.supports_inplace_updates", "docs/functional/ivy/general/ivy.functional.ivy.general.to_ivy_shape", "docs/functional/ivy/general/ivy.functional.ivy.general.to_list", "docs/functional/ivy/general/ivy.functional.ivy.general.to_native_shape", "docs/functional/ivy/general/ivy.functional.ivy.general.to_numpy", "docs/functional/ivy/general/ivy.functional.ivy.general.to_scalar", "docs/functional/ivy/general/ivy.functional.ivy.general.try_else_none", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_array_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_exception_trace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_inplace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_min_base", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_min_denominator", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_nestable_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_precise_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_queue_timeout", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_shape_array_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_show_func_wrapper_trace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_tmp_dir", "docs/functional/ivy/general/ivy.functional.ivy.general.value_is_nan", "docs/functional/ivy/general/ivy.functional.ivy.general.vmap", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.adam_step", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.adam_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.execute_with_gradients", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.grad", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.gradient_descent_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.jac", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.lamb_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.lars_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.optimizer_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.stop_gradient", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.value_and_grad", "docs/functional/ivy/ivy.functional.ivy.activations", "docs/functional/ivy/ivy.functional.ivy.constants", "docs/functional/ivy/ivy.functional.ivy.control_flow_ops", "docs/functional/ivy/ivy.functional.ivy.creation", "docs/functional/ivy/ivy.functional.ivy.data_type", "docs/functional/ivy/ivy.functional.ivy.device", "docs/functional/ivy/ivy.functional.ivy.elementwise", "docs/functional/ivy/ivy.functional.ivy.experimental", "docs/functional/ivy/ivy.functional.ivy.general", "docs/functional/ivy/ivy.functional.ivy.gradients", "docs/functional/ivy/ivy.functional.ivy.layers", "docs/functional/ivy/ivy.functional.ivy.linear_algebra", "docs/functional/ivy/ivy.functional.ivy.losses", "docs/functional/ivy/ivy.functional.ivy.manipulation", "docs/functional/ivy/ivy.functional.ivy.meta", "docs/functional/ivy/ivy.functional.ivy.nest", "docs/functional/ivy/ivy.functional.ivy.norms", "docs/functional/ivy/ivy.functional.ivy.random", "docs/functional/ivy/ivy.functional.ivy.searching", "docs/functional/ivy/ivy.functional.ivy.set", "docs/functional/ivy/ivy.functional.ivy.sorting", "docs/functional/ivy/ivy.functional.ivy.statistical", "docs/functional/ivy/ivy.functional.ivy.utility", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv1d", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv1d_transpose", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv2d", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv2d_transpose", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv3d", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv3d_transpose", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv_general_dilated", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv_general_transpose", "docs/functional/ivy/layers/ivy.functional.ivy.layers.depthwise_conv2d", "docs/functional/ivy/layers/ivy.functional.ivy.layers.dropout", "docs/functional/ivy/layers/ivy.functional.ivy.layers.linear", "docs/functional/ivy/layers/ivy.functional.ivy.layers.lstm", "docs/functional/ivy/layers/ivy.functional.ivy.layers.lstm_update", "docs/functional/ivy/layers/ivy.functional.ivy.layers.multi_head_attention", "docs/functional/ivy/layers/ivy.functional.ivy.layers.nms", "docs/functional/ivy/layers/ivy.functional.ivy.layers.roi_align", "docs/functional/ivy/layers/ivy.functional.ivy.layers.scaled_dot_product_attention", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.cholesky", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.cross", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.det", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.diag", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.diagonal", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eig", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eigh", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eigvalsh", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.inner", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.inv", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matmul", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_norm", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_power", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_rank", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_transpose", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.outer", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.pinv", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.qr", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.slogdet", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.solve", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.svd", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.svdvals", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.tensordot", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.tensorsolve", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.trace", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vander", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vecdot", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vector_norm", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vector_to_skew_symmetric_matrix", "docs/functional/ivy/losses/ivy.functional.ivy.losses.binary_cross_entropy", "docs/functional/ivy/losses/ivy.functional.ivy.losses.cross_entropy", "docs/functional/ivy/losses/ivy.functional.ivy.losses.sparse_cross_entropy", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.clip", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.concat", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.constant_pad", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.expand_dims", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.flip", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.permute_dims", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.repeat", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.reshape", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.roll", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.split", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.squeeze", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.stack", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.swapaxes", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.tile", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.unstack", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.zero_pad", "docs/functional/ivy/meta/ivy.functional.ivy.meta.fomaml_step", "docs/functional/ivy/meta/ivy.functional.ivy.meta.maml_step", "docs/functional/ivy/meta/ivy.functional.ivy.meta.reptile_step", "docs/functional/ivy/nest/ivy.functional.ivy.nest.all_nested_indices", "docs/functional/ivy/nest/ivy.functional.ivy.nest.copy_nest", "docs/functional/ivy/nest/ivy.functional.ivy.nest.duplicate_array_index_chains", "docs/functional/ivy/nest/ivy.functional.ivy.nest.index_nest", "docs/functional/ivy/nest/ivy.functional.ivy.nest.insert_into_nest_at_index", "docs/functional/ivy/nest/ivy.functional.ivy.nest.insert_into_nest_at_indices", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map_nest_at_index", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map_nest_at_indices", "docs/functional/ivy/nest/ivy.functional.ivy.nest.multi_index_nest", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_any", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_argwhere", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_map", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_multi_map", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_empty", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_nest_at_index", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_nest_at_indices", "docs/functional/ivy/nest/ivy.functional.ivy.nest.set_nest_at_index", "docs/functional/ivy/nest/ivy.functional.ivy.nest.set_nest_at_indices", "docs/functional/ivy/norms/ivy.functional.ivy.norms.layer_norm", "docs/functional/ivy/random/ivy.functional.ivy.random.multinomial", "docs/functional/ivy/random/ivy.functional.ivy.random.randint", "docs/functional/ivy/random/ivy.functional.ivy.random.random_normal", "docs/functional/ivy/random/ivy.functional.ivy.random.random_uniform", "docs/functional/ivy/random/ivy.functional.ivy.random.seed", "docs/functional/ivy/random/ivy.functional.ivy.random.shuffle", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argmax", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argmin", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argwhere", "docs/functional/ivy/searching/ivy.functional.ivy.searching.nonzero", "docs/functional/ivy/searching/ivy.functional.ivy.searching.where", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_all", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_counts", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_inverse", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_values", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.argsort", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.msort", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.searchsorted", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.sort", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.cumprod", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.cumsum", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.einsum", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.max", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.mean", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.min", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.prod", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.std", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.sum", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.var", "docs/functional/ivy/utility/ivy.functional.ivy.utility.all", "docs/functional/ivy/utility/ivy.functional.ivy.utility.any", "docs/functional/ivy/utility/ivy.functional.ivy.utility.load", "docs/functional/ivy/utility/ivy.functional.ivy.utility.save", "docs/helpers/ivy_tests.test_ivy.helpers.assertions", "docs/helpers/ivy_tests.test_ivy.helpers.available_frameworks", "docs/helpers/ivy_tests.test_ivy.helpers.function_testing", "docs/helpers/ivy_tests.test_ivy.helpers.globals", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers", "docs/helpers/ivy_tests.test_ivy.helpers.multiprocessing", "docs/helpers/ivy_tests.test_ivy.helpers.pipeline_helper", "docs/helpers/ivy_tests.test_ivy.helpers.structs", "docs/helpers/ivy_tests.test_ivy.helpers.test_parameter_flags", "docs/helpers/ivy_tests.test_ivy.helpers.testing_helpers", "docs/ivy.stateful", "docs/ivy.utils", "docs/ivy_tests.test_ivy.helpers", "docs/stateful/ivy.stateful.activations", "docs/stateful/ivy.stateful.converters", "docs/stateful/ivy.stateful.helpers", "docs/stateful/ivy.stateful.initializers", "docs/stateful/ivy.stateful.layers", "docs/stateful/ivy.stateful.losses", "docs/stateful/ivy.stateful.module", "docs/stateful/ivy.stateful.norms", "docs/stateful/ivy.stateful.optimizers", "docs/stateful/ivy.stateful.sequential", "docs/utils/ivy.utils.assertions", "docs/utils/ivy.utils.backend", "docs/utils/ivy.utils.backend/ivy.utils.backend.ast_helpers", "docs/utils/ivy.utils.backend/ivy.utils.backend.handler", "docs/utils/ivy.utils.backend/ivy.utils.backend.sub_backend_handler", "docs/utils/ivy.utils.binaries", "docs/utils/ivy.utils.dynamic_import", "docs/utils/ivy.utils.einsum_parser", "docs/utils/ivy.utils.einsum_path_helpers", "docs/utils/ivy.utils.exceptions", "docs/utils/ivy.utils.inspection", "docs/utils/ivy.utils.logging", "docs/utils/ivy.utils.profiler", "docs/utils/ivy.utils.verbosity", "index", "overview/contributing", "overview/contributing/building_the_docs", "overview/contributing/contributor_rewards", "overview/contributing/error_handling", "overview/contributing/helpful_resources", "overview/contributing/open_tasks", "overview/contributing/setting_up", "overview/contributing/the_basics", "overview/contributing/volunteer_program", "overview/deep_dive", "overview/deep_dive/array_api_tests", "overview/deep_dive/arrays", "overview/deep_dive/backend_setting", "overview/deep_dive/building_the_docs_pipeline", "overview/deep_dive/containers", "overview/deep_dive/continuous_integration", "overview/deep_dive/data_types", "overview/deep_dive/devices", "overview/deep_dive/docstring_examples", "overview/deep_dive/docstrings", "overview/deep_dive/exception_handling", "overview/deep_dive/fix_failing_tests", "overview/deep_dive/formatting", "overview/deep_dive/function_arguments", "overview/deep_dive/function_types", "overview/deep_dive/function_wrapping", "overview/deep_dive/gradients", "overview/deep_dive/inplace_updates", "overview/deep_dive/ivy_frontends", "overview/deep_dive/ivy_frontends_tests", "overview/deep_dive/ivy_lint", "overview/deep_dive/ivy_tests", "overview/deep_dive/navigating_the_code", "overview/deep_dive/operating_modes", "overview/deep_dive/superset_behaviour", "overview/design", "overview/design/building_blocks", "overview/design/ivy_as_a_framework", "overview/design/ivy_as_a_framework/ivy_array", "overview/design/ivy_as_a_framework/ivy_container", "overview/design/ivy_as_a_framework/ivy_stateful_api", "overview/design/ivy_as_a_transpiler", "overview/faq", "overview/get_started", "overview/glossary", "overview/motivation", "overview/motivation/ml_explosion", "overview/motivation/standardization", "overview/motivation/why_unify", "overview/one_liners", "overview/one_liners/trace", "overview/one_liners/transpile", "overview/one_liners/unify", "overview/related_work", "overview/related_work/api_standards", "overview/related_work/compiler_infrastructure", "overview/related_work/exchange_formats", "overview/related_work/frameworks", "overview/related_work/graph_tracers", "overview/related_work/ml_unifying_companies", "overview/related_work/multi_vendor_compiler_frameworks", "overview/related_work/vendor_specific_apis", "overview/related_work/vendor_specific_compilers", "overview/related_work/what_does_ivy_add", "overview/related_work/wrapper_frameworks", "overview/volunteer_ranks"], "filenames": ["demos/README.md", "demos/assets/01_template.ipynb", "demos/examples_and_demos.rst", "demos/examples_and_demos/alexnet_demo.ipynb", "demos/examples_and_demos/bert_demo.ipynb", "demos/examples_and_demos/dinov2_to_paddle.ipynb", "demos/examples_and_demos/image_segmentation_with_ivy_unet.ipynb", "demos/examples_and_demos/lstm_demo.ipynb", "demos/examples_and_demos/mmpretrain_to_jax.ipynb", "demos/examples_and_demos/resnet_demo.ipynb", "demos/examples_and_demos/torch_to_jax.ipynb", "demos/examples_and_demos/xgboost_demo.ipynb", "demos/guides.rst", "demos/guides/01_transpiling_a_torch_model.ipynb", "demos/guides/02_transpiling_a_haiku_model.ipynb", "demos/guides/03_transpiling_a_tf_model.ipynb", "demos/guides/04_developing_a_convnet_with_ivy.ipynb", "demos/index.rst", "demos/learn_the_basics.rst", "demos/learn_the_basics/01_write_ivy_code.ipynb", "demos/learn_the_basics/02_unify_code.ipynb", "demos/learn_the_basics/03_trace_code.ipynb", "demos/learn_the_basics/04_transpile_code.ipynb", "demos/learn_the_basics/05_lazy_vs_eager.ipynb", "demos/learn_the_basics/06_how_to_use_decorators.ipynb", "demos/learn_the_basics/07_transpile_any_library.ipynb", "demos/learn_the_basics/08_transpile_any_model.ipynb", "demos/learn_the_basics/09_write_a_model_using_ivy.ipynb", "demos/misc/odsc.ipynb", "demos/quickstart.ipynb", "demos/wip/0_building_blocks/0_0_unify.ipynb", "demos/wip/0_building_blocks/0_1_compile.ipynb", "demos/wip/0_building_blocks/0_2_transpile.ipynb", "demos/wip/1_the_basics/1_0_lazy_vs_eager.ipynb", "demos/wip/1_the_basics/1_1_framework_selection.ipynb", "demos/wip/1_the_basics/1_2_as_a_decorator.ipynb", "demos/wip/1_the_basics/1_3_dynamic_vs_static.ipynb", "demos/wip/2_libraries/2_0_kornia.ipynb", "demos/wip/3_models/3_0_perceiver.ipynb", "demos/wip/3_models/3_1_stable_diffusion.ipynb", "demos/wip/basic_operations_with_ivy.ipynb", "demos/wip/compilation_of_a_basic_function.ipynb", "demos/wip/deepmind_perceiver_io.ipynb", "demos/wip/deepmind_perceiverio.ipynb", "demos/wip/end_to_end_training_pipeline_in_ivy.ipynb", "demos/wip/hf_tensorflow_deit.ipynb", "demos/wip/ivy_as_a_transpiler_intro.ipynb", "demos/wip/resnet_18.ipynb", "docs/data_classes/data_classes/array/ivy.data_classes.array.activations.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.conversions.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.creation.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.data_type.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.device.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.elementwise.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.experimental.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.general.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.gradients.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.image.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.layers.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.linear_algebra.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.losses.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.manipulation.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.norms.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.random.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.searching.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.set.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.sorting.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.statistical.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.utility.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.wrapping.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.activations.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.base.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.conversions.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.creation.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.data_type.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.device.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.elementwise.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.experimental.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.general.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.gradients.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.image.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.layers.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.linear_algebra.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.losses.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.manipulation.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.norms.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.random.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.searching.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.set.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.sorting.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.statistical.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.utility.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.wrapping.rst", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.base.rst", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.cp_tensor.rst", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.parafac2_tensor.rst", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.tr_tensor.rst", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.tt_tensor.rst", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.tucker_tensor.rst", "docs/data_classes/data_classes/ivy.data_classes.array.rst", "docs/data_classes/data_classes/ivy.data_classes.container.rst", "docs/data_classes/data_classes/ivy.data_classes.factorized_tensor.rst", "docs/data_classes/data_classes/ivy.data_classes.nested_array.rst", "docs/data_classes/data_classes/nested_array/ivy.data_classes.nested_array.base.rst", "docs/data_classes/data_classes/nested_array/ivy.data_classes.nested_array.elementwise.rst", "docs/data_classes/ivy.data_classes.rst", "docs/functional/ivy.functional.ivy.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.gelu.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.hardswish.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.leaky_relu.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.log_softmax.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.mish.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.relu.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.sigmoid.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softmax.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softplus.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softsign.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.cmp_is.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.cmp_isnot.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.for_loop.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.if_else.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.try_except.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.while_loop.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.arange.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.array.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.copy_array.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.empty.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.empty_like.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.eye.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.from_dlpack.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.frombuffer.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.full.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.full_like.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.linspace.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.logspace.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.meshgrid.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.native_array.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.one_hot.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.ones.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.ones_like.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.to_dlpack.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.tril.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.triu.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.triu_indices.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.zeros.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.zeros_like.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.as_ivy_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.as_native_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.astype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.broadcast_arrays.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.broadcast_to.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.can_cast.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.check_float.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.closest_valid_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_complex_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_float_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_int_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_uint_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.dtype_bits.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.finfo.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.function_supported_dtypes.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.function_unsupported_dtypes.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.iinfo.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.infer_default_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.invalid_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_bool_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_complex_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_float_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_hashable_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_int_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_native_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_uint_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.promote_types.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.promote_types_of_inputs.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.result_type.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_complex_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_float_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_int_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_uint_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.type_promote_arrays.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_complex_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_float_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_int_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_uint_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.valid_dtype.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.as_ivy_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.as_native_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.clear_cached_mem_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.default_device.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.dev_util.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.function_supported_devices.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.function_unsupported_devices.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.get_all_ivy_arrays_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.gpu_is_available.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.handle_soft_device_variable.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.num_cpu_cores.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.num_gpus.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.num_ivy_arrays_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.percent_used_mem_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.print_all_ivy_arrays_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.set_default_device.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.set_soft_device_mode.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.set_split_factor.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.split_factor.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.split_func_call.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.to_device.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.total_mem_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.tpu_is_available.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.unset_default_device.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.unset_soft_device_mode.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.used_mem_on_dev.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.abs.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.acos.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.acosh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.add.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.angle.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.asin.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.asinh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atan.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atan2.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atanh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_and.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_invert.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_left_shift.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_or.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_right_shift.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_xor.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.ceil.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.cos.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.cosh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.deg2rad.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.divide.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.equal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.erf.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.exp.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.exp2.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.expm1.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.floor.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.floor_divide.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.fmin.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.fmod.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.gcd.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.greater.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.greater_equal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.imag.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isfinite.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isinf.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isnan.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isreal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.lcm.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.less.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.less_equal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log10.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log1p.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log2.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logaddexp.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logaddexp2.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_and.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_not.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_or.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_xor.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.maximum.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.minimum.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.multiply.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.nan_to_num.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.negative.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.not_equal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.positive.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.pow.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.rad2deg.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.real.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.reciprocal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.remainder.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.round.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sign.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sin.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sinh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sqrt.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.square.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.subtract.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.tan.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.tanh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trapz.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trunc.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trunc_divide.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.celu.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.elu.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.hardshrink.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.hardsilu.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.hardtanh.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.logit.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.logsigmoid.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.prelu.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.relu6.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.scaled_tanh.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.selu.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.silu.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.softshrink.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.stanh.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.tanhshrink.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.threshold.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.thresholded_relu.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.blackman_window.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.eye_like.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.hamming_window.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.hann_window.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.indices.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.kaiser_bessel_derived_window.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.kaiser_window.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.mel_weight_matrix.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.ndenumerate.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.ndindex.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.polyval.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_cp.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_parafac2.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_tr.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_tt.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_tucker.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.tril_indices.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.trilu.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.unsorted_segment_mean.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.unsorted_segment_min.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.unsorted_segment_sum.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.vorbis_window.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.allclose.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.amax.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.amin.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.binarizer.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.conj.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.copysign.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.count_nonzero.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.diff.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.digamma.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.erfc.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.erfinv.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.fix.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.float_power.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.fmax.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.frexp.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.gradient.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.hypot.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.isclose.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.ldexp.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.lerp.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.lgamma.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.modf.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.nansum.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.nextafter.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.signbit.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.sinc.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.sparsify_tensor.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.xlogy.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.zeta.rst", "docs/functional/ivy/experimental/general/ivy.functional.ivy.experimental.general.reduce.rst", "docs/functional/ivy/experimental/gradients/ivy.functional.ivy.experimental.gradients.bind_custom_gradient_function.rst", "docs/functional/ivy/experimental/gradients/ivy.functional.ivy.experimental.gradients.jvp.rst", "docs/functional/ivy/experimental/gradients/ivy.functional.ivy.experimental.gradients.vjp.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.activations.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.constants.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.creation.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.data_type.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.device.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.elementwise.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.general.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.gradients.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.layers.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.linear_algebra.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.losses.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.manipulation.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.meta.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.nest.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.norms.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.random.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.searching.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.set.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.sorting.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.sparse_array.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.statistical.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.utility.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_avg_pool1d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_avg_pool2d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_max_pool2d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_max_pool3d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.area_interpolate.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool1d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool2d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool3d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dct.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dft.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout1d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout2d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout3d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.embedding.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.fft.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.fft2.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.generate_einsum_equation.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.get_interpolate_kernel.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.idct.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.ifft.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.ifftn.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.interp.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.interpolate.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool1d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool2d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool3d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_unpool1d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.nearest_interpolate.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.pool.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.reduce_window.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.rfft.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.rfftn.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.rnn.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.sliding_window.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.stft.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.adjoint.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.batched_outer.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.cond.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.diagflat.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.dot.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eig.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eigh_tridiagonal.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eigvals.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.general_inner_product.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.higher_order_moment.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.initialize_tucker.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.khatri_rao.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.kron.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.kronecker.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.lu_factor.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.lu_solve.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.make_svd_non_negative.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.matrix_exp.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.mode_dot.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.multi_dot.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.multi_mode_dot.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.partial_tucker.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.solve_triangular.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.svd_flip.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.tensor_train.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.truncated_svd.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.tt_matrix_to_tensor.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.tucker.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.hinge_embedding_loss.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.huber_loss.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.kl_div.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.l1_loss.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.log_poisson_loss.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.poisson_nll_loss.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.smooth_l1_loss.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.soft_margin_loss.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.as_strided.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.associative_scan.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_1d.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_2d.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_3d.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.broadcast_shapes.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.check_scalar.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.choose.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.column_stack.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.concat_from_sequence.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.dsplit.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.dstack.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.expand.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fill_diagonal.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.flatten.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fliplr.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.flipud.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fold.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.heaviside.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.hsplit.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.hstack.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.i0.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.matricize.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.moveaxis.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.pad.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_fold.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_tensor_to_vec.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_unfold.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_vec_to_tensor.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.put_along_axis.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.rot90.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.soft_thresholding.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.take.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.take_along_axis.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.top_k.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.trim_zeros.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.unflatten.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.unfold.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.unique_consecutive.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.vsplit.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.vstack.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.batch_norm.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.group_norm.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.instance_norm.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.l1_normalize.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.l2_normalize.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.local_response_norm.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.lp_normalize.rst", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.bernoulli.rst", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.beta.rst", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.dirichlet.rst", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.gamma.rst", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.poisson.rst", "docs/functional/ivy/experimental/searching/ivy.functional.ivy.experimental.searching.unravel_index.rst", "docs/functional/ivy/experimental/sorting/ivy.functional.ivy.experimental.sorting.invert_permutation.rst", "docs/functional/ivy/experimental/sorting/ivy.functional.ivy.experimental.sorting.lexsort.rst", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.is_ivy_sparse_array.rst", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.is_native_sparse_array.rst", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.native_sparse_array.rst", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.native_sparse_array_to_indices_values_and_shape.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.bincount.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.corrcoef.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cov.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cummax.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cummin.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.histogram.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.igamma.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.median.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanmean.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanmedian.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanmin.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanprod.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.quantile.rst", "docs/functional/ivy/experimental/utility/ivy.functional.ivy.experimental.utility.optional_get_element.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.all_equal.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.arg_info.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.arg_names.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.array_equal.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.assert_supports_inplace.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.cache_fn.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.clip_matrix_norm.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.clip_vector_norm.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.container_types.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.current_backend_str.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.default.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_rearrange.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_reduce.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_repeat.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.exists.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.fourier_encode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.function_supported_devices_and_dtypes.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.function_unsupported_devices_and_dtypes.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.gather.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.gather_nd.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_all_arrays_in_memory.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_item.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_num_dims.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_referrers_recursive.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.has_nans.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_arrays_supported.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_decrement.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_increment.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_update.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_variables_supported.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_array.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_array.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_container.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_nested_array.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_native_array.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.isin.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.isscalar.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.itemsize.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.match_kwargs.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.multiprocessing.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.num_arrays_in_memory.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.print_all_arrays_in_memory.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.scatter_flat.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.scatter_nd.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_array_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_exception_trace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_inplace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_item.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_min_base.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_min_denominator.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_nestable_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_precise_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_queue_timeout.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_shape_array_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_show_func_wrapper_trace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_tmp_dir.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.shape.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.size.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.stable_divide.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.stable_pow.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.strides.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.supports_inplace_updates.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_ivy_shape.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_list.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_native_shape.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_numpy.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_scalar.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.try_else_none.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_array_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_exception_trace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_inplace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_min_base.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_min_denominator.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_nestable_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_precise_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_queue_timeout.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_shape_array_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_show_func_wrapper_trace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_tmp_dir.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.value_is_nan.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.vmap.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.adam_step.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.adam_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.execute_with_gradients.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.grad.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.gradient_descent_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.jac.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.lamb_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.lars_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.optimizer_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.stop_gradient.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.value_and_grad.rst", "docs/functional/ivy/ivy.functional.ivy.activations.rst", "docs/functional/ivy/ivy.functional.ivy.constants.rst", "docs/functional/ivy/ivy.functional.ivy.control_flow_ops.rst", "docs/functional/ivy/ivy.functional.ivy.creation.rst", "docs/functional/ivy/ivy.functional.ivy.data_type.rst", "docs/functional/ivy/ivy.functional.ivy.device.rst", "docs/functional/ivy/ivy.functional.ivy.elementwise.rst", "docs/functional/ivy/ivy.functional.ivy.experimental.rst", "docs/functional/ivy/ivy.functional.ivy.general.rst", "docs/functional/ivy/ivy.functional.ivy.gradients.rst", "docs/functional/ivy/ivy.functional.ivy.layers.rst", "docs/functional/ivy/ivy.functional.ivy.linear_algebra.rst", "docs/functional/ivy/ivy.functional.ivy.losses.rst", "docs/functional/ivy/ivy.functional.ivy.manipulation.rst", "docs/functional/ivy/ivy.functional.ivy.meta.rst", "docs/functional/ivy/ivy.functional.ivy.nest.rst", "docs/functional/ivy/ivy.functional.ivy.norms.rst", "docs/functional/ivy/ivy.functional.ivy.random.rst", "docs/functional/ivy/ivy.functional.ivy.searching.rst", "docs/functional/ivy/ivy.functional.ivy.set.rst", "docs/functional/ivy/ivy.functional.ivy.sorting.rst", "docs/functional/ivy/ivy.functional.ivy.statistical.rst", "docs/functional/ivy/ivy.functional.ivy.utility.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv1d.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv1d_transpose.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv2d.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv2d_transpose.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv3d.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv3d_transpose.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv_general_dilated.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv_general_transpose.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.depthwise_conv2d.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.dropout.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.linear.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.lstm.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.lstm_update.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.multi_head_attention.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.nms.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.roi_align.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.scaled_dot_product_attention.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.cholesky.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.cross.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.det.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.diag.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.diagonal.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eig.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eigh.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eigvalsh.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.inner.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.inv.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matmul.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_norm.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_power.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_rank.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_transpose.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.outer.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.pinv.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.qr.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.slogdet.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.solve.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.svd.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.svdvals.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.tensordot.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.tensorsolve.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.trace.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vander.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vecdot.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vector_norm.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vector_to_skew_symmetric_matrix.rst", "docs/functional/ivy/losses/ivy.functional.ivy.losses.binary_cross_entropy.rst", "docs/functional/ivy/losses/ivy.functional.ivy.losses.cross_entropy.rst", "docs/functional/ivy/losses/ivy.functional.ivy.losses.sparse_cross_entropy.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.clip.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.concat.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.constant_pad.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.expand_dims.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.flip.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.permute_dims.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.repeat.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.reshape.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.roll.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.split.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.squeeze.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.stack.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.swapaxes.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.tile.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.unstack.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.zero_pad.rst", "docs/functional/ivy/meta/ivy.functional.ivy.meta.fomaml_step.rst", "docs/functional/ivy/meta/ivy.functional.ivy.meta.maml_step.rst", "docs/functional/ivy/meta/ivy.functional.ivy.meta.reptile_step.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.all_nested_indices.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.copy_nest.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.duplicate_array_index_chains.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.index_nest.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.insert_into_nest_at_index.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.insert_into_nest_at_indices.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map_nest_at_index.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map_nest_at_indices.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.multi_index_nest.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_any.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_argwhere.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_map.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_multi_map.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_empty.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_nest_at_index.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_nest_at_indices.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.set_nest_at_index.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.set_nest_at_indices.rst", "docs/functional/ivy/norms/ivy.functional.ivy.norms.layer_norm.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.multinomial.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.randint.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.random_normal.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.random_uniform.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.seed.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.shuffle.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argmax.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argmin.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argwhere.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.nonzero.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.where.rst", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_all.rst", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_counts.rst", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_inverse.rst", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_values.rst", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.argsort.rst", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.msort.rst", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.searchsorted.rst", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.sort.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.cumprod.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.cumsum.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.einsum.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.max.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.mean.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.min.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.prod.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.std.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.sum.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.var.rst", "docs/functional/ivy/utility/ivy.functional.ivy.utility.all.rst", "docs/functional/ivy/utility/ivy.functional.ivy.utility.any.rst", "docs/functional/ivy/utility/ivy.functional.ivy.utility.load.rst", "docs/functional/ivy/utility/ivy.functional.ivy.utility.save.rst", "docs/helpers/ivy_tests.test_ivy.helpers.assertions.rst", "docs/helpers/ivy_tests.test_ivy.helpers.available_frameworks.rst", "docs/helpers/ivy_tests.test_ivy.helpers.function_testing.rst", "docs/helpers/ivy_tests.test_ivy.helpers.globals.rst", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.rst", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.rst", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers.rst", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.rst", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers.rst", "docs/helpers/ivy_tests.test_ivy.helpers.multiprocessing.rst", "docs/helpers/ivy_tests.test_ivy.helpers.pipeline_helper.rst", "docs/helpers/ivy_tests.test_ivy.helpers.structs.rst", "docs/helpers/ivy_tests.test_ivy.helpers.test_parameter_flags.rst", "docs/helpers/ivy_tests.test_ivy.helpers.testing_helpers.rst", "docs/ivy.stateful.rst", "docs/ivy.utils.rst", "docs/ivy_tests.test_ivy.helpers.rst", "docs/stateful/ivy.stateful.activations.rst", "docs/stateful/ivy.stateful.converters.rst", "docs/stateful/ivy.stateful.helpers.rst", "docs/stateful/ivy.stateful.initializers.rst", "docs/stateful/ivy.stateful.layers.rst", "docs/stateful/ivy.stateful.losses.rst", "docs/stateful/ivy.stateful.module.rst", "docs/stateful/ivy.stateful.norms.rst", "docs/stateful/ivy.stateful.optimizers.rst", "docs/stateful/ivy.stateful.sequential.rst", "docs/utils/ivy.utils.assertions.rst", "docs/utils/ivy.utils.backend.rst", "docs/utils/ivy.utils.backend/ivy.utils.backend.ast_helpers.rst", "docs/utils/ivy.utils.backend/ivy.utils.backend.handler.rst", "docs/utils/ivy.utils.backend/ivy.utils.backend.sub_backend_handler.rst", "docs/utils/ivy.utils.binaries.rst", "docs/utils/ivy.utils.dynamic_import.rst", "docs/utils/ivy.utils.einsum_parser.rst", "docs/utils/ivy.utils.einsum_path_helpers.rst", "docs/utils/ivy.utils.exceptions.rst", "docs/utils/ivy.utils.inspection.rst", "docs/utils/ivy.utils.logging.rst", "docs/utils/ivy.utils.profiler.rst", "docs/utils/ivy.utils.verbosity.rst", "index.rst", "overview/contributing.rst", "overview/contributing/building_the_docs.rst", "overview/contributing/contributor_rewards.rst", "overview/contributing/error_handling.rst", "overview/contributing/helpful_resources.rst", "overview/contributing/open_tasks.rst", "overview/contributing/setting_up.rst", "overview/contributing/the_basics.rst", "overview/contributing/volunteer_program.rst", "overview/deep_dive.rst", "overview/deep_dive/array_api_tests.rst", "overview/deep_dive/arrays.rst", "overview/deep_dive/backend_setting.rst", "overview/deep_dive/building_the_docs_pipeline.rst", "overview/deep_dive/containers.rst", "overview/deep_dive/continuous_integration.rst", "overview/deep_dive/data_types.rst", "overview/deep_dive/devices.rst", "overview/deep_dive/docstring_examples.rst", "overview/deep_dive/docstrings.rst", "overview/deep_dive/exception_handling.rst", "overview/deep_dive/fix_failing_tests.rst", "overview/deep_dive/formatting.rst", "overview/deep_dive/function_arguments.rst", "overview/deep_dive/function_types.rst", "overview/deep_dive/function_wrapping.rst", "overview/deep_dive/gradients.rst", "overview/deep_dive/inplace_updates.rst", "overview/deep_dive/ivy_frontends.rst", "overview/deep_dive/ivy_frontends_tests.rst", "overview/deep_dive/ivy_lint.rst", "overview/deep_dive/ivy_tests.rst", "overview/deep_dive/navigating_the_code.rst", "overview/deep_dive/operating_modes.rst", "overview/deep_dive/superset_behaviour.rst", "overview/design.rst", "overview/design/building_blocks.rst", "overview/design/ivy_as_a_framework.rst", "overview/design/ivy_as_a_framework/ivy_array.rst", "overview/design/ivy_as_a_framework/ivy_container.rst", "overview/design/ivy_as_a_framework/ivy_stateful_api.rst", "overview/design/ivy_as_a_transpiler.rst", "overview/faq.rst", "overview/get_started.rst", "overview/glossary.rst", "overview/motivation.rst", "overview/motivation/ml_explosion.rst", "overview/motivation/standardization.rst", "overview/motivation/why_unify.rst", "overview/one_liners.rst", "overview/one_liners/trace.rst", "overview/one_liners/transpile.rst", "overview/one_liners/unify.rst", "overview/related_work.rst", "overview/related_work/api_standards.rst", "overview/related_work/compiler_infrastructure.rst", "overview/related_work/exchange_formats.rst", "overview/related_work/frameworks.rst", "overview/related_work/graph_tracers.rst", "overview/related_work/ml_unifying_companies.rst", "overview/related_work/multi_vendor_compiler_frameworks.rst", "overview/related_work/vendor_specific_apis.rst", "overview/related_work/vendor_specific_compilers.rst", "overview/related_work/what_does_ivy_add.rst", "overview/related_work/wrapper_frameworks.rst", "overview/volunteer_ranks.rst"], "titles": ["Demos", "TO REPLACE: Title", "Examples and Demos", "Ivy AlexNet demo", "# Ivy Bert Demo", "How To Convert Models from PyTorch to PaddlePaddle", "Image Segmentation with Ivy UNet", "&lt;no title&gt;", "Accelerating MMPreTrain models with JAX", "Using Ivy ResNet", "Accelerating PyTorch models with JAX", "Accelerating XGBoost with JAX", "Guides", "Transpiling a PyTorch model to build on top", "Transpiling a haiku model to build on top", "Transpiling a Tensorflow model to build on top", "Developing a convolutional network using Ivy", "Tutorials And Examples", "Learn the basics", "Write Ivy code", "Unify code", "Trace code", "Transpile code", "Lazy vs Eager", "How to use decorators", "Transpile any library", "Transpile any model", "Write a model using Ivy", "ODSC Ivy Demo", "Quickstart", "0.0: Unify", "0.1: Compile", "0.2: Transpile", "1.0: Lazy vs Eager", "1.1: Framework Selection", "1.2: As a Decorator", "1.3: Dynamic vs Static", "2.0: Kornia", "3.0: Perceiver", "3.1: Stable Diffusion", "Basic Operations with Ivy", "Compilation of a Basic Function", "Demo: Transpiling DeepMind\u2019s PerceiverIO", "Deepmind PerceiverIO on GPU", "End-to-End Training Pipeline in Ivy", "HuggingFace Tensorflow DeiT", "Ivy as a Transpiler Introduction", "Resnet 18", "Activations", "Conversions", "Creation", "Data type", "Device", "Elementwise", "Experimental", "General", "Gradients", "Image", "Layers", "Linear algebra", "Losses", "Manipulation", "Norms", "Random", "Searching", "Set", "Sorting", "Statistical", "Utility", "Wrapping", "Activations", "Base", "Conversions", "Creation", "Data type", "Device", "Elementwise", "Experimental", "General", "Gradients", "Image", "Layers", "Linear algebra", "Losses", "Manipulation", "Norms", "Random", "Searching", "Set", "Sorting", "Statistical", "Utility", "Wrapping", "Base", "Cp tensor", "Parafac2 tensor", "Tr tensor", "Tt tensor", "Tucker tensor", "Array", "Container", "Factorized tensor", "Nested array", "Base", "Elementwise", "Data classes", "Functions", "gelu", "hardswish", "leaky_relu", "log_softmax", "mish", "relu", "sigmoid", "softmax", "softplus", "softsign", "cmp_is", "cmp_isnot", "for_loop", "if_else", "try_except", "while_loop", "arange", "array", "asarray", "copy_array", "empty", "empty_like", "eye", "from_dlpack", "frombuffer", "full", "full_like", "linspace", "logspace", "meshgrid", "native_array", "one_hot", "ones", "ones_like", "to_dlpack", "tril", "triu", "triu_indices", "zeros", "zeros_like", "as_ivy_dtype", "as_native_dtype", "astype", "broadcast_arrays", "broadcast_to", "can_cast", "check_float", "closest_valid_dtype", "default_complex_dtype", "default_dtype", "default_float_dtype", "default_int_dtype", "default_uint_dtype", "dtype", "dtype_bits", "finfo", "function_supported_dtypes", "function_unsupported_dtypes", "iinfo", "infer_default_dtype", "invalid_dtype", "is_bool_dtype", "is_complex_dtype", "is_float_dtype", "is_hashable_dtype", "is_int_dtype", "is_native_dtype", "is_uint_dtype", "promote_types", "promote_types_of_inputs", "result_type", "set_default_complex_dtype", "set_default_dtype", "set_default_float_dtype", "set_default_int_dtype", "set_default_uint_dtype", "type_promote_arrays", "unset_default_complex_dtype", "unset_default_dtype", "unset_default_float_dtype", "unset_default_int_dtype", "unset_default_uint_dtype", "valid_dtype", "as_ivy_dev", "as_native_dev", "clear_cached_mem_on_dev", "default_device", "dev", "dev_util", "function_supported_devices", "function_unsupported_devices", "get_all_ivy_arrays_on_dev", "gpu_is_available", "handle_soft_device_variable", "num_cpu_cores", "num_gpus", "num_ivy_arrays_on_dev", "percent_used_mem_on_dev", "print_all_ivy_arrays_on_dev", "set_default_device", "set_soft_device_mode", "set_split_factor", "split_factor", "split_func_call", "to_device", "total_mem_on_dev", "tpu_is_available", "unset_default_device", "unset_soft_device_mode", "used_mem_on_dev", "abs", "acos", "acosh", "add", "angle", "asin", "asinh", "atan", "atan2", "atanh", "bitwise_and", "bitwise_invert", "bitwise_left_shift", "bitwise_or", "bitwise_right_shift", "bitwise_xor", "ceil", "cos", "cosh", "deg2rad", "divide", "equal", "erf", "exp", "exp2", "expm1", "floor", "floor_divide", "fmin", "fmod", "gcd", "greater", "greater_equal", "imag", "isfinite", "isinf", "isnan", "isreal", "lcm", "less", "less_equal", "log", "log10", "log1p", "log2", "logaddexp", "logaddexp2", "logical_and", "logical_not", "logical_or", "logical_xor", "maximum", "minimum", "multiply", "nan_to_num", "negative", "not_equal", "positive", "pow", "rad2deg", "real", "reciprocal", "remainder", "round", "sign", "sin", "sinh", "sqrt", "square", "subtract", "tan", "tanh", "trapz", "trunc", "trunc_divide", "celu", "elu", "hardshrink", "hardsilu", "hardtanh", "logit", "logsigmoid", "prelu", "relu6", "scaled_tanh", "selu", "silu", "softshrink", "stanh", "tanhshrink", "threshold", "thresholded_relu", "blackman_window", "eye_like", "hamming_window", "hann_window", "indices", "kaiser_bessel_derived_window", "kaiser_window", "mel_weight_matrix", "ndenumerate", "ndindex", "polyval", "random_cp", "random_parafac2", "random_tr", "random_tt", "random_tucker", "tril_indices", "trilu", "unsorted_segment_mean", "unsorted_segment_min", "unsorted_segment_sum", "vorbis_window", "allclose", "amax", "amin", "binarizer", "conj", "copysign", "count_nonzero", "diff", "digamma", "erfc", "erfinv", "fix", "float_power", "fmax", "frexp", "gradient", "hypot", "isclose", "ldexp", "lerp", "lgamma", "modf", "nansum", "nextafter", "signbit", "sinc", "sparsify_tensor", "xlogy", "zeta", "reduce", "bind_custom_gradient_function", "jvp", "vjp", "Activations", "Constants", "Creation", "Data type", "Device", "Elementwise", "General", "Gradients", "Layers", "Linear algebra", "Losses", "Manipulation", "Meta", "Nest", "Norms", "Random", "Searching", "Set", "Sorting", "Sparse array", "Statistical", "Utility", "adaptive_avg_pool1d", "adaptive_avg_pool2d", "adaptive_max_pool2d", "adaptive_max_pool3d", "area_interpolate", "avg_pool1d", "avg_pool2d", "avg_pool3d", "dct", "dft", "dropout1d", "dropout2d", "dropout3d", "embedding", "fft", "fft2", "generate_einsum_equation", "get_interpolate_kernel", "idct", "ifft", "ifftn", "interp", "interpolate", "max_pool1d", "max_pool2d", "max_pool3d", "max_unpool1d", "nearest_interpolate", "pool", "reduce_window", "rfft", "rfftn", "rnn", "sliding_window", "stft", "adjoint", "batched_outer", "cond", "diagflat", "dot", "eig", "eigh_tridiagonal", "eigvals", "general_inner_product", "higher_order_moment", "initialize_tucker", "khatri_rao", "kron", "kronecker", "lu_factor", "lu_solve", "make_svd_non_negative", "matrix_exp", "mode_dot", "multi_dot", "multi_mode_dot", "partial_tucker", "solve_triangular", "svd_flip", "tensor_train", "truncated_svd", "tt_matrix_to_tensor", "tucker", "hinge_embedding_loss", "huber_loss", "kl_div", "l1_loss", "log_poisson_loss", "poisson_nll_loss", "smooth_l1_loss", "soft_margin_loss", "as_strided", "associative_scan", "atleast_1d", "atleast_2d", "atleast_3d", "broadcast_shapes", "check_scalar", "choose", "column_stack", "concat_from_sequence", "dsplit", "dstack", "expand", "fill_diagonal", "flatten", "fliplr", "flipud", "fold", "heaviside", "hsplit", "hstack", "i0", "matricize", "moveaxis", "pad", "partial_fold", "partial_tensor_to_vec", "partial_unfold", "partial_vec_to_tensor", "put_along_axis", "rot90", "soft_thresholding", "take", "take_along_axis", "top_k", "trim_zeros", "unflatten", "unfold", "unique_consecutive", "vsplit", "vstack", "batch_norm", "group_norm", "instance_norm", "l1_normalize", "l2_normalize", "local_response_norm", "lp_normalize", "bernoulli", "beta", "dirichlet", "gamma", "poisson", "unravel_index", "invert_permutation", "lexsort", "is_ivy_sparse_array", "is_native_sparse_array", "native_sparse_array", "native_sparse_array_to_indices_values_and_shape", "bincount", "corrcoef", "cov", "cummax", "cummin", "histogram", "igamma", "median", "nanmean", "nanmedian", "nanmin", "nanprod", "quantile", "optional_get_element", "all_equal", "arg_info", "arg_names", "array_equal", "assert_supports_inplace", "cache_fn", "clip_matrix_norm", "clip_vector_norm", "container_types", "current_backend_str", "default", "einops_rearrange", "einops_reduce", "einops_repeat", "exists", "fourier_encode", "function_supported_devices_and_dtypes", "function_unsupported_devices_and_dtypes", "gather", "gather_nd", "get_all_arrays_in_memory", "get_item", "get_num_dims", "get_referrers_recursive", "has_nans", "inplace_arrays_supported", "inplace_decrement", "inplace_increment", "inplace_update", "inplace_variables_supported", "is_array", "is_ivy_array", "is_ivy_container", "is_ivy_nested_array", "is_native_array", "isin", "isscalar", "itemsize", "match_kwargs", "multiprocessing", "num_arrays_in_memory", "print_all_arrays_in_memory", "scatter_flat", "scatter_nd", "set_array_mode", "set_exception_trace_mode", "set_inplace_mode", "set_item", "set_min_base", "set_min_denominator", "set_nestable_mode", "set_precise_mode", "set_queue_timeout", "set_shape_array_mode", "set_show_func_wrapper_trace_mode", "set_tmp_dir", "shape", "size", "stable_divide", "stable_pow", "strides", "supports_inplace_updates", "to_ivy_shape", "to_list", "to_native_shape", "to_numpy", "to_scalar", "try_else_none", "unset_array_mode", "unset_exception_trace_mode", "unset_inplace_mode", "unset_min_base", "unset_min_denominator", "unset_nestable_mode", "unset_precise_mode", "unset_queue_timeout", "unset_shape_array_mode", "unset_show_func_wrapper_trace_mode", "unset_tmp_dir", "value_is_nan", "vmap", "adam_step", "adam_update", "execute_with_gradients", "grad", "gradient_descent_update", "jac", "lamb_update", "lars_update", "optimizer_update", "stop_gradient", "value_and_grad", "Activations", "Constants", "Control flow ops", "Creation", "Data type", "Device", "Elementwise", "Experimental", "General", "Gradients", "Layers", "Linear algebra", "Losses", "Manipulation", "Meta", "Nest", "Norms", "Random", "Searching", "Set", "Sorting", "Statistical", "Utility", "conv", "conv1d", "conv1d_transpose", "conv2d", "conv2d_transpose", "conv3d", "conv3d_transpose", "conv_general_dilated", "conv_general_transpose", "depthwise_conv2d", "dropout", "linear", "lstm", "lstm_update", "multi_head_attention", "nms", "roi_align", "scaled_dot_product_attention", "cholesky", "cross", "det", "diag", "diagonal", "eig", "eigh", "eigvalsh", "inner", "inv", "matmul", "matrix_norm", "matrix_power", "matrix_rank", "matrix_transpose", "outer", "pinv", "qr", "slogdet", "solve", "svd", "svdvals", "tensordot", "tensorsolve", "trace", "vander", "vecdot", "vector_norm", "vector_to_skew_symmetric_matrix", "binary_cross_entropy", "cross_entropy", "sparse_cross_entropy", "clip", "concat", "constant_pad", "expand_dims", "flip", "permute_dims", "repeat", "reshape", "roll", "split", "squeeze", "stack", "swapaxes", "tile", "unstack", "zero_pad", "fomaml_step", "maml_step", "reptile_step", "all_nested_indices", "copy_nest", "duplicate_array_index_chains", "index_nest", "insert_into_nest_at_index", "insert_into_nest_at_indices", "map", "map_nest_at_index", "map_nest_at_indices", "multi_index_nest", "nested_any", "nested_argwhere", "nested_map", "nested_multi_map", "prune_empty", "prune_nest_at_index", "prune_nest_at_indices", "set_nest_at_index", "set_nest_at_indices", "layer_norm", "multinomial", "randint", "random_normal", "random_uniform", "seed", "shuffle", "argmax", "argmin", "argwhere", "nonzero", "where", "unique_all", "unique_counts", "unique_inverse", "unique_values", "argsort", "msort", "searchsorted", "sort", "cumprod", "cumsum", "einsum", "max", "mean", "min", "prod", "std", "sum", "var", "all", "any", "load", "save", "Assertions", "Available frameworks", "Function testing", "Globals", "Hypothesis helpers", "Array helpers", "Dtype helpers", "General helpers", "Number helpers", "Multiprocessing", "Pipeline helper", "Structs", "Test parameter flags", "Testing helpers", "Framework classes", "Utils", "Testing", "Activations", "Converters", "Helpers", "Initializers", "Layers", "Losses", "Module", "Norms", "Optimizers", "Sequential", "Assertions", "Backend", "Ast helpers", "Handler", "Sub backend handler", "Binaries", "Dynamic import", "Einsum parser", "Einsum path helpers", "Exceptions", "Inspection", "Logging", "Profiler", "Verbosity", "Home", "Contributing", "Building the Docs", "Contributor Rewards", "Error Handling", "Helpful Resources", "Open Tasks", "Setting Up", "The Basics", "Contributor Program", "Deep Dive", "Array API Tests", "Arrays", "Backend Setting", "Building the Docs Pipeline", "Containers", "Continuous Integration", "Data Types", "Devices", "Docstring Examples", "Docstrings", "Exception Handling", "Fix Failing Tests:", "Formatting", "Function Arguments", "Function Types", "Function Wrapping", "Gradients", "Inplace Updates", "Ivy Frontends", "Ivy Frontend Tests", "Ivy-Lint: Ivy\u2019s Custom Code Formatters", "Ivy Tests", "Navigating the Code", "Operating Modes", "Superset Behaviour", "Design", "Building Blocks", "Ivy as a Framework", "Ivy Array", "Ivy Container", "Ivy Stateful API", "Ivy as a Transpiler", "FAQ", "Get Started", "Glossary", "Motivation", "ML Explosion", "Standardization", "Why Unify?", "One liners", "<code class=\"docutils literal notranslate\"><span class=\"pre\">ivy.trace_graph()</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">ivy.transpile()</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">ivy.unify()</span></code>", "Related Work", "API Standards", "Compiler Infrastructure", "Exchange Formats", "Frameworks", "Graph Tracers", "ML-Unifying Companies", "Multi-Vendor Compiler Frameworks", "Vendor-Specific APIs", "Vendor-Specific Compilers", "What does Ivy Add?", "Wrapper Frameworks", "Contributor Leaderboard"], "terms": {"thi": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 40, 42, 43, 45, 48, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 94, 95, 97, 99, 100, 107, 108, 109, 110, 111, 112, 113, 114, 115, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 150, 151, 152, 162, 165, 168, 169, 170, 172, 176, 177, 191, 194, 204, 210, 211, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 310, 311, 312, 314, 315, 316, 319, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 376, 377, 378, 379, 381, 384, 385, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 404, 405, 406, 409, 410, 411, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 437, 438, 439, 440, 441, 442, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 504, 506, 507, 508, 509, 510, 511, 512, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 534, 535, 537, 538, 541, 542, 543, 544, 545, 546, 549, 550, 553, 554, 555, 557, 558, 559, 561, 562, 563, 565, 566, 568, 573, 574, 577, 583, 588, 589, 590, 591, 592, 594, 596, 597, 610, 611, 612, 613, 614, 616, 618, 619, 620, 621, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 655, 656, 657, 659, 660, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 717, 719, 721, 722, 727, 728, 732, 734, 735, 736, 737, 738, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 770, 771, 773, 774, 776, 785, 786, 788, 789, 791, 792, 793, 794, 803, 807, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 856, 857, 858, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875], "repo": [0, 13, 42, 814, 817, 820, 823, 825, 826, 831, 839, 841, 856], "hold": [0, 54, 55, 59, 67, 77, 82, 90, 94, 95, 331, 348, 353, 369, 384, 467, 496, 520, 521, 526, 573, 574, 631, 634, 644, 675, 755, 771, 818, 849, 868], "all": [0, 1, 3, 4, 5, 6, 9, 10, 13, 14, 15, 16, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 41, 42, 44, 45, 47, 49, 50, 54, 55, 58, 59, 61, 63, 68, 69, 71, 72, 73, 76, 77, 78, 81, 82, 84, 86, 91, 92, 94, 95, 123, 131, 138, 142, 143, 144, 198, 205, 237, 241, 269, 270, 325, 326, 338, 357, 366, 369, 372, 373, 374, 375, 384, 406, 415, 417, 418, 419, 427, 432, 442, 443, 445, 448, 449, 470, 481, 489, 495, 525, 531, 534, 551, 571, 572, 589, 596, 597, 611, 614, 626, 628, 629, 631, 632, 633, 634, 636, 637, 638, 640, 641, 645, 656, 659, 660, 665, 677, 682, 683, 686, 691, 700, 704, 706, 712, 713, 714, 715, 716, 717, 726, 727, 728, 729, 735, 738, 743, 768, 770, 773, 774, 775, 776, 788, 789, 795, 798, 803, 805, 807, 809, 810, 813, 815, 816, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 844, 845, 846, 848, 849, 850, 851, 852, 853, 854, 856, 857, 858, 860, 861, 863, 864, 865, 866, 867, 868, 870, 873, 874, 875], "jupyt": [0, 5, 857, 869], "exampl": [0, 5, 8, 10, 19, 21, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 40, 42, 43, 44, 45, 48, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 99, 100, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 119, 120, 122, 123, 124, 125, 126, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 144, 145, 146, 149, 150, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 169, 170, 172, 173, 174, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 325, 327, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 364, 366, 369, 370, 372, 373, 374, 375, 378, 379, 380, 382, 384, 391, 392, 393, 394, 396, 397, 399, 400, 401, 404, 405, 406, 409, 410, 411, 414, 415, 416, 417, 419, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 433, 438, 440, 443, 447, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 460, 461, 462, 464, 465, 466, 467, 468, 471, 472, 473, 475, 476, 477, 478, 480, 481, 486, 487, 488, 489, 490, 491, 492, 493, 495, 496, 497, 501, 502, 504, 507, 509, 510, 511, 512, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 531, 533, 534, 535, 536, 537, 538, 541, 542, 543, 544, 545, 546, 549, 550, 551, 552, 553, 554, 555, 557, 558, 559, 561, 562, 563, 565, 566, 568, 569, 570, 571, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 594, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 654, 655, 656, 657, 659, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 689, 690, 691, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 713, 714, 715, 716, 718, 719, 721, 722, 723, 724, 726, 727, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 770, 773, 774, 781, 798, 802, 803, 807, 813, 815, 816, 817, 819, 820, 821, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 834, 835, 837, 838, 842, 846, 848, 849, 850, 851, 852, 858, 864, 865, 868, 870, 873, 874], "tab": [0, 815, 816, 825, 831, 849], "ivi": [0, 1, 2, 5, 7, 8, 10, 11, 13, 15, 17, 18, 20, 21, 22, 23, 24, 25, 26, 30, 31, 32, 33, 34, 35, 36, 42, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 366, 369, 370, 371, 372, 373, 374, 375, 378, 379, 380, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 770, 781, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 810, 811, 812, 813, 814, 816, 819, 820, 822, 824, 826, 827, 829, 831, 832, 833, 834, 835, 837, 844, 845, 852, 854, 857, 858, 859, 863, 874, 875], "": [0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 40, 43, 45, 46, 47, 50, 54, 55, 56, 59, 67, 77, 79, 82, 90, 119, 136, 142, 143, 163, 164, 193, 196, 197, 209, 244, 279, 326, 331, 332, 333, 335, 346, 348, 354, 358, 360, 366, 369, 370, 372, 373, 374, 375, 378, 379, 384, 387, 388, 395, 401, 406, 417, 425, 429, 437, 446, 451, 453, 454, 470, 472, 473, 481, 498, 499, 500, 509, 519, 529, 547, 548, 554, 568, 591, 592, 613, 615, 616, 617, 618, 620, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 638, 644, 648, 650, 652, 654, 660, 667, 675, 677, 684, 685, 691, 727, 761, 763, 774, 788, 789, 790, 791, 792, 793, 794, 798, 807, 809, 810, 811, 812, 813, 816, 817, 818, 819, 820, 821, 822, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 841, 842, 843, 844, 846, 848, 849, 850, 851, 852, 854, 857, 858, 859, 860, 861, 862, 863, 866, 867, 868, 870, 871, 872, 873], "web": 0, "relev": [0, 50, 73, 135, 626, 793, 809, 815, 816, 817, 821, 824, 825, 826, 828, 831, 835, 836, 839, 840, 841, 849, 853, 857, 865, 872, 873], "link": [0, 19, 28, 29, 43, 809, 815, 816, 817, 823, 825, 826, 832, 838, 861, 863, 865], "list": [0, 4, 6, 8, 9, 11, 44, 49, 50, 51, 53, 54, 55, 58, 61, 62, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 97, 103, 107, 108, 109, 110, 111, 112, 113, 114, 115, 123, 124, 125, 131, 133, 136, 137, 138, 140, 146, 150, 152, 165, 169, 170, 177, 193, 210, 211, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 247, 248, 249, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 303, 304, 306, 307, 308, 310, 331, 332, 333, 334, 335, 337, 338, 339, 342, 343, 346, 347, 348, 354, 355, 356, 358, 359, 360, 369, 372, 373, 375, 382, 391, 392, 393, 395, 396, 397, 398, 409, 410, 411, 412, 416, 418, 422, 427, 431, 434, 441, 442, 445, 448, 449, 450, 451, 452, 453, 454, 455, 456, 459, 460, 461, 462, 465, 466, 467, 476, 487, 489, 490, 491, 493, 496, 498, 500, 501, 502, 504, 506, 511, 519, 520, 521, 522, 531, 533, 534, 535, 537, 538, 542, 543, 544, 545, 546, 549, 550, 551, 553, 555, 557, 558, 559, 561, 562, 565, 569, 573, 574, 588, 589, 590, 592, 594, 595, 596, 597, 598, 610, 611, 616, 621, 626, 627, 628, 629, 631, 633, 634, 636, 638, 639, 642, 643, 647, 648, 649, 650, 651, 652, 655, 656, 657, 660, 663, 664, 665, 670, 671, 672, 673, 674, 675, 677, 679, 681, 682, 686, 688, 693, 694, 695, 696, 697, 700, 703, 704, 705, 706, 707, 710, 711, 715, 716, 717, 718, 721, 722, 723, 724, 726, 727, 732, 733, 734, 735, 736, 737, 738, 740, 743, 746, 747, 748, 749, 750, 751, 752, 754, 755, 758, 760, 761, 763, 764, 765, 768, 770, 773, 774, 775, 776, 781, 786, 789, 795, 802, 803, 807, 812, 814, 815, 816, 818, 820, 821, 823, 824, 825, 826, 827, 828, 830, 831, 832, 833, 834, 837, 838, 839, 841, 842, 846, 849, 850, 851, 852, 860, 867, 868, 873, 875], "open": [0, 3, 5, 6, 8, 9, 10, 25, 28, 29, 42, 43, 44, 45, 55, 63, 86, 123, 626, 640, 736, 738, 809, 810, 811, 812, 816, 817, 818, 823, 826, 829, 831, 838, 839, 844, 853, 856, 857, 858, 860, 861, 865, 866, 867, 869, 870], "task": [0, 7, 45, 637, 712, 713, 714, 809, 810, 812, 816, 817, 818, 838, 839, 867, 873, 874], "avil": 0, "discuss": [0, 815, 817, 823, 826, 827, 837, 838, 840, 841, 844, 847, 848, 849, 852, 858, 863, 868], "suggest": [0, 815, 816, 817, 823, 826, 832, 836, 838, 841, 842, 843, 853], "new": [0, 5, 7, 8, 10, 12, 13, 15, 17, 20, 23, 24, 25, 26, 28, 29, 30, 44, 46, 49, 54, 55, 56, 61, 62, 71, 73, 77, 78, 79, 82, 84, 85, 127, 130, 132, 133, 138, 139, 140, 145, 146, 183, 206, 226, 272, 274, 278, 331, 336, 348, 353, 369, 372, 375, 384, 408, 457, 465, 466, 480, 486, 493, 526, 542, 543, 544, 546, 549, 550, 552, 573, 574, 577, 579, 586, 589, 590, 596, 613, 616, 618, 619, 620, 626, 627, 628, 629, 631, 632, 633, 636, 638, 639, 660, 672, 679, 699, 703, 707, 720, 732, 733, 734, 786, 789, 792, 793, 798, 803, 809, 810, 812, 815, 816, 817, 818, 819, 821, 822, 824, 825, 826, 828, 829, 831, 832, 835, 837, 838, 839, 840, 841, 842, 844, 845, 848, 851, 853, 854, 856, 857, 858, 860, 865, 869, 873, 874], "should": [0, 4, 5, 7, 10, 11, 20, 23, 24, 25, 26, 45, 48, 50, 53, 54, 55, 56, 58, 59, 61, 63, 64, 65, 67, 70, 71, 73, 76, 77, 78, 79, 81, 82, 84, 86, 87, 89, 90, 92, 94, 97, 99, 100, 110, 114, 122, 136, 138, 142, 143, 151, 176, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 240, 242, 243, 244, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 270, 272, 273, 274, 275, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 299, 310, 326, 332, 333, 345, 349, 350, 351, 352, 356, 361, 362, 363, 364, 366, 369, 371, 372, 373, 374, 375, 379, 384, 387, 396, 397, 398, 400, 405, 416, 431, 442, 448, 455, 480, 481, 505, 506, 519, 520, 521, 536, 554, 559, 611, 613, 616, 618, 619, 620, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 653, 654, 663, 664, 665, 666, 668, 670, 671, 672, 673, 674, 675, 676, 677, 679, 680, 681, 682, 683, 684, 686, 688, 690, 691, 703, 719, 740, 741, 742, 744, 745, 746, 747, 748, 749, 750, 754, 755, 756, 757, 758, 759, 760, 762, 763, 770, 771, 773, 775, 785, 786, 788, 789, 791, 792, 793, 794, 802, 803, 811, 813, 815, 816, 817, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 841, 842, 843, 844, 846, 848, 849, 850, 855, 857, 861, 863, 864, 867, 869, 874], "comprehens": [0, 17, 817, 820, 840], "possibl": [0, 3, 34, 50, 54, 73, 77, 84, 94, 125, 244, 287, 309, 332, 333, 366, 369, 372, 374, 375, 395, 450, 459, 460, 461, 467, 469, 471, 472, 473, 480, 496, 569, 629, 631, 633, 644, 656, 699, 700, 701, 703, 705, 706, 708, 710, 757, 759, 773, 789, 803, 806, 809, 810, 813, 815, 816, 817, 820, 823, 824, 826, 828, 829, 831, 832, 834, 836, 837, 838, 839, 841, 844, 846, 849, 852, 857, 865, 867, 873], "us": [0, 1, 2, 3, 4, 5, 7, 8, 10, 11, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 40, 42, 43, 45, 47, 48, 50, 51, 52, 53, 54, 55, 56, 58, 59, 61, 63, 64, 67, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 81, 82, 84, 86, 87, 92, 94, 95, 97, 100, 107, 135, 138, 149, 161, 163, 164, 175, 176, 196, 197, 199, 204, 208, 209, 210, 211, 213, 216, 222, 230, 258, 259, 261, 262, 264, 265, 266, 268, 269, 271, 280, 284, 289, 309, 311, 312, 314, 315, 316, 324, 346, 349, 350, 353, 366, 369, 372, 373, 374, 375, 378, 379, 380, 382, 384, 391, 392, 393, 395, 396, 397, 398, 399, 401, 406, 408, 409, 410, 411, 414, 416, 417, 418, 420, 425, 427, 431, 437, 439, 441, 442, 444, 445, 446, 448, 449, 454, 471, 475, 479, 481, 489, 493, 498, 500, 504, 505, 506, 507, 508, 509, 510, 511, 512, 519, 526, 529, 547, 548, 557, 558, 569, 570, 577, 579, 580, 582, 589, 590, 602, 603, 605, 612, 613, 618, 619, 623, 624, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 640, 642, 644, 657, 658, 660, 663, 668, 670, 677, 681, 685, 688, 691, 693, 702, 703, 704, 708, 712, 713, 714, 715, 717, 718, 724, 725, 726, 728, 735, 736, 737, 738, 740, 741, 742, 743, 746, 748, 756, 771, 773, 774, 775, 776, 781, 785, 786, 788, 789, 790, 791, 792, 793, 798, 802, 803, 807, 810, 812, 814, 817, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 837, 838, 841, 842, 843, 844, 845, 846, 847, 848, 850, 851, 852, 854, 858, 862, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874], "easi": [0, 28, 29, 42, 816, 817, 821, 822, 824, 834, 836, 839, 841, 844, 857, 865, 867, 873, 874], "follow": [0, 5, 7, 11, 22, 23, 24, 26, 28, 29, 32, 33, 34, 40, 43, 44, 54, 55, 56, 58, 59, 65, 71, 77, 78, 79, 81, 82, 131, 162, 165, 210, 220, 237, 244, 270, 272, 279, 280, 316, 366, 372, 374, 375, 378, 395, 408, 416, 454, 469, 481, 498, 500, 557, 558, 559, 589, 590, 613, 616, 618, 619, 620, 626, 627, 628, 629, 631, 632, 633, 634, 638, 642, 660, 663, 675, 681, 691, 721, 727, 746, 747, 748, 749, 789, 793, 809, 811, 815, 816, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 856, 857, 860, 864, 867, 870], "attract": 0, "visual": [0, 5, 11, 46, 807, 809, 816, 831, 838, 841, 852, 867, 869, 872], "graph": [0, 3, 5, 6, 9, 11, 17, 18, 21, 23, 25, 26, 29, 35, 36, 41, 46, 47, 65, 642, 746, 747, 748, 749, 781, 809, 824, 834, 838, 840, 844, 846, 851, 852, 854, 858, 859, 860, 861, 862, 863, 867, 870], "nice": [0, 841, 858, 867], "format": [0, 25, 26, 28, 29, 40, 42, 43, 44, 52, 55, 58, 67, 70, 71, 72, 75, 81, 97, 115, 160, 194, 372, 373, 383, 414, 447, 515, 542, 623, 627, 628, 631, 633, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 658, 756, 766, 767, 768, 785, 809, 816, 817, 819, 825, 826, 827, 828, 829, 830, 838, 840, 849, 861, 863, 865, 867, 868], "result": [0, 3, 6, 7, 8, 9, 10, 11, 13, 15, 23, 24, 25, 26, 28, 29, 40, 48, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 99, 100, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 138, 139, 140, 141, 142, 143, 145, 146, 149, 151, 176, 177, 211, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 319, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 364, 366, 369, 370, 372, 373, 374, 375, 378, 379, 380, 382, 384, 385, 386, 387, 388, 389, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 404, 405, 406, 408, 409, 410, 411, 412, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 429, 430, 432, 433, 437, 438, 439, 440, 441, 443, 447, 450, 451, 452, 453, 455, 456, 458, 465, 466, 469, 471, 472, 473, 474, 475, 478, 479, 480, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 512, 517, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 537, 538, 542, 543, 544, 549, 550, 554, 559, 566, 573, 574, 612, 613, 614, 616, 618, 619, 620, 621, 623, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 663, 664, 665, 666, 667, 668, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 706, 707, 708, 709, 711, 718, 721, 722, 724, 728, 732, 734, 735, 736, 737, 738, 740, 741, 742, 743, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 770, 775, 781, 795, 803, 807, 809, 813, 815, 817, 820, 821, 823, 824, 825, 826, 828, 829, 831, 833, 834, 836, 837, 838, 839, 841, 842, 846, 849, 852, 860, 861, 862, 868, 870], "etc": [0, 31, 36, 43, 50, 54, 63, 65, 69, 73, 77, 86, 92, 126, 134, 135, 138, 372, 379, 401, 406, 417, 505, 506, 508, 509, 626, 640, 642, 735, 736, 737, 738, 746, 747, 748, 749, 773, 776, 788, 789, 790, 791, 792, 793, 794, 815, 816, 817, 818, 820, 821, 822, 823, 824, 826, 828, 830, 833, 838, 839, 841, 842, 846, 848, 849, 852, 854, 858, 860, 865, 867, 873], "gener": [0, 5, 6, 17, 21, 26, 28, 29, 31, 34, 42, 44, 46, 47, 50, 53, 54, 58, 63, 69, 73, 76, 77, 81, 86, 92, 95, 123, 134, 135, 144, 152, 237, 240, 250, 251, 266, 270, 279, 309, 312, 316, 317, 318, 320, 321, 322, 323, 324, 325, 332, 333, 366, 369, 372, 373, 375, 379, 384, 416, 422, 444, 489, 507, 519, 626, 627, 629, 633, 634, 636, 640, 644, 656, 682, 683, 686, 689, 711, 735, 736, 738, 739, 761, 773, 776, 781, 793, 802, 815, 816, 817, 819, 820, 821, 823, 826, 827, 828, 829, 830, 833, 834, 837, 838, 839, 842, 845, 846, 848, 850, 851, 852, 854, 865, 866, 867, 868, 869, 870, 871, 872, 873], "tone": [0, 4], "feel": [0, 5, 43, 99, 100, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 785, 786, 788, 789, 791, 792, 793, 794, 809, 811, 813, 815, 816, 817, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 841, 842, 844, 845, 853, 860], "free": [0, 5, 6, 42, 43, 99, 100, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 785, 786, 788, 789, 791, 792, 793, 794, 809, 811, 813, 814, 815, 817, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 841, 842, 844, 845, 853, 860, 868, 870], "includ": [0, 11, 17, 21, 31, 36, 50, 53, 54, 55, 59, 64, 67, 68, 71, 73, 76, 77, 78, 82, 87, 90, 91, 123, 124, 125, 134, 135, 137, 144, 217, 241, 245, 246, 247, 250, 252, 255, 263, 271, 284, 289, 311, 314, 315, 316, 319, 325, 328, 330, 332, 333, 337, 338, 339, 342, 343, 344, 345, 347, 349, 350, 352, 353, 354, 355, 358, 359, 366, 369, 372, 375, 384, 391, 392, 393, 423, 426, 428, 472, 473, 475, 478, 480, 482, 485, 507, 509, 510, 518, 522, 524, 525, 527, 528, 529, 555, 610, 626, 629, 631, 633, 634, 638, 640, 641, 644, 645, 658, 669, 689, 691, 715, 738, 742, 757, 758, 759, 760, 761, 762, 763, 764, 765, 770, 773, 774, 776, 788, 789, 792, 805, 807, 809, 815, 817, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 833, 834, 837, 838, 839, 840, 841, 842, 844, 846, 857, 860, 861, 864, 865, 867, 869, 872, 873, 874], "emoji": [0, 815], "don": [0, 10, 11, 13, 15, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 42, 44, 69, 92, 809, 815, 816, 817, 825, 826, 827, 832, 836, 841, 844, 850, 852, 853, 858, 860], "t": [0, 4, 5, 10, 11, 13, 15, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 34, 40, 42, 43, 44, 54, 58, 69, 77, 81, 92, 94, 95, 99, 346, 361, 369, 371, 373, 427, 559, 577, 592, 614, 631, 632, 633, 638, 657, 659, 723, 768, 789, 809, 811, 812, 815, 816, 817, 819, 821, 822, 824, 825, 826, 827, 828, 831, 832, 834, 835, 836, 837, 841, 842, 844, 846, 848, 849, 850, 851, 852, 853, 857, 858, 860, 861, 862, 865, 867, 869], "keep": [0, 1, 13, 15, 19, 25, 26, 28, 54, 61, 71, 77, 84, 94, 97, 357, 373, 448, 636, 710, 814, 815, 816, 817, 820, 823, 824, 825, 830, 837, 838, 841, 842, 844, 849, 851, 853, 861], "thing": [0, 5, 26, 40, 42, 802, 814, 815, 816, 817, 822, 838, 841, 844, 848, 849, 856, 857, 858, 867], "super": [0, 3, 6, 13, 15, 28, 29, 42, 54, 77, 373, 427, 809, 830, 846, 849, 850, 851, 861], "seriou": 0, "given": [0, 3, 5, 19, 28, 41, 54, 55, 60, 61, 63, 71, 77, 78, 79, 83, 84, 86, 94, 95, 97, 99, 100, 123, 127, 134, 135, 155, 156, 157, 158, 159, 171, 176, 195, 204, 208, 209, 210, 212, 216, 289, 319, 328, 331, 337, 338, 346, 347, 348, 350, 353, 366, 369, 372, 373, 374, 375, 378, 379, 384, 391, 392, 393, 394, 399, 400, 401, 404, 405, 406, 408, 409, 410, 411, 412, 417, 427, 432, 447, 451, 452, 453, 455, 456, 457, 458, 468, 469, 470, 477, 479, 491, 497, 501, 502, 503, 504, 505, 506, 507, 508, 509, 519, 520, 521, 522, 528, 550, 554, 573, 574, 584, 612, 613, 616, 618, 619, 620, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 692, 693, 694, 695, 696, 699, 700, 701, 702, 704, 705, 709, 710, 722, 723, 732, 733, 736, 737, 738, 740, 752, 753, 754, 755, 768, 773, 774, 775, 776, 781, 785, 786, 788, 789, 791, 792, 793, 794, 795, 802, 803, 812, 813, 815, 816, 817, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 841, 842, 844, 847, 848, 850, 857, 858, 864, 869, 870, 873, 874], "an": [0, 2, 3, 5, 7, 10, 11, 17, 18, 19, 20, 21, 23, 24, 25, 26, 28, 29, 34, 40, 42, 43, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 71, 73, 74, 75, 76, 77, 78, 82, 83, 84, 86, 87, 88, 90, 91, 92, 94, 95, 99, 100, 107, 108, 109, 110, 111, 112, 113, 114, 115, 119, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 162, 165, 168, 172, 176, 177, 207, 211, 215, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 300, 301, 302, 303, 304, 306, 307, 308, 310, 311, 313, 314, 315, 317, 318, 325, 326, 327, 328, 329, 330, 332, 333, 335, 338, 342, 347, 351, 356, 364, 366, 369, 372, 373, 374, 375, 378, 379, 382, 384, 385, 386, 387, 388, 389, 391, 392, 393, 394, 395, 396, 397, 398, 404, 406, 408, 409, 410, 411, 414, 415, 416, 417, 418, 419, 420, 421, 423, 426, 427, 428, 453, 454, 458, 459, 460, 461, 465, 466, 467, 469, 476, 480, 481, 487, 489, 493, 495, 496, 498, 499, 500, 503, 505, 506, 508, 511, 512, 517, 518, 519, 520, 521, 522, 523, 526, 527, 530, 535, 537, 538, 546, 549, 553, 554, 555, 557, 558, 559, 561, 562, 563, 564, 565, 568, 574, 577, 578, 587, 588, 592, 596, 597, 598, 611, 614, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 655, 656, 657, 658, 660, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 689, 690, 691, 692, 693, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 721, 734, 736, 740, 741, 742, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 768, 770, 773, 775, 776, 778, 781, 785, 786, 788, 789, 791, 792, 793, 794, 803, 807, 809, 811, 812, 813, 816, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 837, 838, 839, 841, 842, 843, 844, 846, 848, 849, 850, 851, 852, 853, 854, 857, 858, 859, 860, 861, 862, 863, 865, 866, 867, 868, 870, 871, 873, 874], "intern": [0, 11, 71, 102, 103, 104, 638, 715, 725, 726, 788, 789, 790, 791, 792, 794, 818, 821, 824, 827, 829, 837, 839, 841, 843], "releas": [0, 43, 815, 816, 826, 842, 844, 852, 858, 867, 873], "tracer": [0, 3, 5, 6, 7, 9, 10, 20, 23, 24, 25, 26, 29, 45, 47, 809, 838, 845, 847, 852, 854, 861, 862, 863], "i": [0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 94, 95, 97, 99, 100, 107, 108, 109, 110, 111, 112, 113, 114, 115, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 177, 189, 191, 193, 194, 196, 197, 199, 201, 204, 209, 210, 211, 212, 213, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 312, 313, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 358, 359, 360, 364, 366, 369, 370, 372, 373, 374, 375, 378, 379, 382, 384, 385, 386, 388, 389, 391, 392, 393, 394, 395, 396, 397, 398, 401, 404, 406, 408, 409, 410, 411, 412, 415, 416, 417, 418, 419, 420, 424, 425, 426, 427, 429, 430, 431, 432, 434, 435, 439, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 459, 460, 461, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 479, 480, 481, 482, 484, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 511, 512, 517, 518, 519, 520, 521, 522, 524, 525, 526, 527, 528, 529, 530, 531, 534, 535, 537, 538, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 553, 554, 555, 557, 558, 559, 561, 562, 563, 564, 565, 566, 569, 570, 573, 574, 575, 577, 583, 587, 588, 589, 590, 592, 594, 596, 597, 598, 610, 611, 613, 614, 615, 616, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 721, 722, 723, 724, 725, 726, 727, 728, 732, 733, 734, 735, 736, 737, 738, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 770, 771, 773, 774, 775, 776, 781, 785, 786, 788, 789, 790, 791, 792, 793, 795, 798, 799, 802, 803, 807, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 856, 857, 858, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874], "around": [0, 12, 13, 15, 17, 54, 71, 77, 100, 375, 481, 489, 815, 817, 820, 821, 823, 827, 833, 834, 838, 841, 842, 848, 852, 854, 860, 864, 865, 867, 874], "corner": [0, 54, 77, 372, 408, 816, 817, 831, 838], "anybodi": 0, "abl": [0, 3, 5, 6, 30, 34, 45, 47, 71, 94, 816, 817, 818, 820, 826, 831, 834, 837, 838, 842, 846, 851, 860, 870, 873], "start": [0, 1, 5, 7, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 43, 44, 50, 54, 71, 73, 77, 81, 123, 131, 134, 135, 350, 360, 369, 370, 372, 375, 384, 415, 471, 474, 482, 484, 494, 528, 626, 775, 802, 807, 810, 815, 816, 817, 818, 819, 825, 826, 828, 829, 831, 832, 833, 838, 841, 844, 845, 846, 848, 849, 850, 852, 860, 861, 867, 873], "work": [0, 26, 28, 29, 40, 41, 43, 47, 49, 54, 77, 94, 384, 529, 634, 638, 685, 722, 723, 727, 732, 733, 809, 811, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 830, 831, 837, 838, 839, 841, 842, 845, 846, 848, 850, 851, 853, 858, 860, 861, 862, 865, 867, 869, 871, 874], "shortli": 0, "so": [0, 1, 5, 6, 8, 10, 11, 13, 15, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 34, 40, 42, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 94, 97, 99, 107, 108, 109, 110, 111, 112, 113, 114, 115, 125, 126, 128, 130, 131, 133, 135, 136, 137, 138, 140, 142, 143, 146, 150, 151, 152, 165, 169, 170, 177, 194, 211, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 310, 311, 312, 314, 315, 316, 319, 326, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 364, 369, 372, 375, 382, 384, 391, 392, 393, 394, 396, 397, 398, 400, 404, 405, 406, 409, 410, 411, 415, 416, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 433, 437, 438, 439, 440, 441, 442, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 504, 506, 507, 508, 509, 510, 511, 512, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 534, 535, 537, 538, 541, 542, 543, 544, 545, 546, 549, 550, 553, 555, 557, 558, 559, 561, 562, 563, 565, 566, 568, 573, 574, 588, 589, 590, 591, 592, 594, 596, 597, 610, 612, 613, 616, 618, 619, 620, 621, 633, 638, 647, 648, 649, 650, 651, 652, 654, 655, 656, 657, 659, 663, 664, 665, 667, 668, 669, 670, 671, 672, 673, 674, 675, 680, 681, 682, 684, 691, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 715, 726, 734, 735, 736, 737, 738, 740, 741, 742, 743, 744, 745, 746, 747, 748, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 763, 764, 765, 803, 809, 813, 815, 816, 817, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 841, 842, 844, 845, 846, 847, 848, 849, 850, 851, 852, 856, 857, 860, 861, 862, 867, 868, 869, 871], "worri": [0, 28, 29, 815, 816, 832], "about": [0, 17, 18, 19, 22, 24, 26, 28, 29, 32, 43, 44, 51, 74, 162, 165, 627, 807, 809, 811, 814, 815, 816, 817, 818, 819, 820, 823, 825, 826, 827, 832, 833, 837, 839, 840, 841, 842, 843, 844, 845, 846, 848, 849, 850, 851, 852, 858, 862, 868, 869, 872], "have": [0, 1, 3, 4, 5, 6, 8, 10, 11, 13, 15, 17, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 32, 40, 42, 44, 48, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 94, 95, 99, 100, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 145, 146, 149, 150, 151, 162, 211, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 326, 332, 333, 334, 335, 340, 341, 345, 347, 349, 350, 351, 352, 356, 359, 364, 366, 369, 372, 373, 374, 375, 378, 379, 380, 382, 384, 385, 386, 387, 388, 389, 391, 392, 393, 395, 396, 397, 398, 399, 400, 401, 405, 406, 408, 409, 410, 411, 414, 416, 417, 421, 423, 424, 426, 427, 432, 433, 438, 439, 440, 441, 446, 450, 451, 452, 453, 454, 455, 456, 460, 461, 466, 467, 469, 474, 482, 483, 484, 485, 487, 489, 491, 493, 494, 501, 502, 504, 505, 506, 508, 509, 510, 512, 519, 520, 521, 522, 526, 530, 537, 538, 542, 543, 544, 549, 550, 559, 573, 574, 577, 612, 613, 616, 618, 619, 620, 621, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 660, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 706, 707, 708, 709, 711, 734, 735, 736, 737, 738, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 753, 754, 755, 757, 758, 759, 760, 761, 762, 763, 764, 765, 773, 785, 786, 788, 789, 791, 792, 793, 794, 802, 803, 809, 811, 812, 813, 815, 816, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 841, 842, 844, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 860, 862, 863, 864, 865, 866, 867, 869, 873, 874, 875], "access": [0, 25, 28, 29, 71, 809, 815, 816, 817, 825, 826, 832, 837, 838, 853, 861, 867, 869, 871], "transpil": [0, 7, 8, 9, 10, 12, 17, 18, 20, 21, 31, 780, 781, 815, 816, 830, 831, 838, 845, 846, 847, 854, 859, 860, 862, 867, 873, 874], "code": [0, 4, 8, 9, 10, 17, 18, 25, 26, 28, 30, 31, 32, 33, 34, 35, 42, 43, 52, 53, 71, 75, 76, 100, 211, 257, 384, 526, 535, 543, 544, 559, 573, 577, 592, 628, 631, 633, 634, 636, 655, 676, 677, 678, 707, 807, 809, 812, 814, 815, 816, 817, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 830, 831, 833, 834, 835, 837, 838, 839, 841, 844, 845, 846, 847, 848, 849, 850, 851, 852, 854, 856, 857, 858, 859, 860, 861, 862, 863, 865, 866, 867, 868, 870, 871, 872, 873, 874], "now": [0, 4, 5, 8, 10, 11, 13, 15, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 40, 42, 44, 789, 790, 791, 809, 816, 820, 821, 822, 823, 824, 825, 826, 827, 831, 833, 835, 838, 839, 841, 842, 844, 848, 849, 851, 852, 858, 860, 861, 862, 867], "you": [0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 40, 41, 42, 43, 44, 45, 46, 47, 54, 55, 77, 78, 94, 99, 100, 375, 384, 469, 526, 549, 550, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 660, 785, 786, 788, 789, 791, 792, 793, 794, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 856, 857, 858, 860, 861, 862, 867, 875], "can": [0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 47, 50, 51, 54, 55, 59, 61, 63, 65, 73, 74, 77, 78, 82, 84, 86, 88, 94, 95, 109, 112, 124, 125, 135, 137, 152, 191, 208, 209, 210, 299, 316, 364, 366, 372, 373, 374, 375, 378, 379, 382, 384, 395, 408, 432, 439, 441, 446, 454, 466, 493, 498, 506, 507, 512, 519, 566, 577, 611, 614, 623, 626, 627, 628, 631, 632, 633, 634, 636, 640, 660, 668, 674, 684, 688, 703, 707, 736, 737, 738, 746, 770, 773, 774, 775, 776, 781, 803, 809, 810, 811, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 856, 857, 858, 860, 861, 862, 864, 865, 866, 867, 868, 870, 871, 873, 874], "style": [0, 11, 42, 44, 375, 481, 641, 744, 817, 832, 867], "stori": 0, "If": [0, 1, 3, 4, 5, 7, 10, 11, 13, 15, 17, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 34, 43, 46, 47, 49, 50, 51, 53, 54, 55, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 95, 107, 108, 109, 110, 111, 112, 113, 114, 115, 120, 123, 124, 125, 127, 128, 129, 131, 132, 133, 134, 135, 136, 138, 139, 140, 142, 143, 144, 145, 146, 149, 150, 151, 152, 177, 193, 209, 211, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 248, 249, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 300, 301, 302, 303, 304, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 325, 326, 328, 331, 332, 333, 334, 335, 337, 338, 339, 343, 347, 348, 353, 354, 356, 358, 359, 360, 366, 369, 370, 372, 373, 374, 375, 378, 379, 384, 385, 391, 392, 393, 394, 395, 396, 397, 398, 401, 404, 406, 408, 409, 410, 411, 416, 417, 418, 420, 425, 427, 429, 431, 432, 439, 441, 443, 444, 446, 447, 449, 450, 451, 452, 453, 454, 455, 456, 459, 460, 461, 465, 466, 467, 469, 470, 471, 472, 473, 476, 480, 486, 487, 488, 489, 490, 491, 493, 495, 496, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 518, 519, 520, 521, 522, 524, 525, 526, 527, 528, 529, 530, 531, 534, 535, 537, 538, 542, 543, 544, 545, 546, 549, 550, 552, 553, 554, 555, 557, 558, 559, 561, 562, 565, 566, 573, 574, 578, 588, 589, 590, 592, 594, 596, 597, 610, 611, 614, 616, 621, 623, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 640, 641, 642, 643, 644, 645, 647, 648, 649, 650, 656, 657, 660, 663, 664, 665, 667, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 686, 688, 689, 690, 691, 693, 694, 695, 696, 697, 699, 700, 701, 703, 704, 705, 706, 707, 708, 710, 711, 712, 713, 714, 727, 728, 735, 736, 737, 738, 740, 741, 742, 743, 744, 746, 747, 748, 749, 750, 752, 753, 754, 755, 757, 758, 759, 760, 761, 762, 763, 764, 765, 770, 773, 774, 775, 788, 789, 791, 792, 798, 803, 807, 809, 810, 811, 812, 813, 815, 816, 817, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 844, 845, 846, 848, 849, 851, 852, 853, 856, 860, 861, 862], "anyon": [0, 809, 810, 817, 825, 852, 857, 873], "ha": [0, 3, 5, 6, 7, 9, 10, 11, 13, 15, 19, 21, 25, 28, 29, 31, 34, 36, 40, 47, 50, 54, 59, 61, 65, 67, 71, 74, 77, 78, 82, 84, 88, 90, 94, 136, 193, 217, 237, 240, 242, 244, 254, 270, 272, 277, 280, 282, 283, 287, 327, 328, 329, 366, 373, 374, 375, 384, 408, 443, 453, 464, 488, 490, 495, 518, 520, 521, 523, 555, 626, 628, 629, 633, 634, 636, 641, 642, 644, 659, 660, 674, 675, 683, 684, 686, 688, 691, 699, 706, 744, 747, 748, 749, 754, 755, 758, 760, 761, 762, 763, 770, 773, 776, 798, 815, 817, 820, 822, 823, 824, 825, 826, 827, 828, 829, 834, 835, 836, 837, 838, 839, 841, 842, 844, 846, 847, 848, 850, 851, 852, 853, 856, 857, 858, 860, 862, 863, 866, 867, 869, 870, 873], "ani": [0, 5, 6, 9, 13, 15, 17, 18, 19, 20, 21, 30, 31, 34, 40, 41, 42, 43, 44, 46, 47, 49, 50, 52, 53, 54, 55, 59, 68, 69, 73, 75, 76, 77, 78, 91, 92, 94, 99, 100, 119, 120, 122, 123, 124, 125, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 152, 153, 168, 172, 176, 211, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 237, 238, 240, 242, 243, 244, 248, 249, 250, 251, 252, 253, 257, 259, 260, 261, 262, 264, 265, 266, 267, 270, 272, 273, 274, 275, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 310, 325, 326, 332, 333, 335, 338, 366, 369, 372, 373, 374, 375, 378, 384, 391, 392, 393, 394, 396, 397, 398, 404, 409, 410, 411, 416, 417, 418, 427, 432, 449, 470, 481, 489, 493, 498, 499, 500, 519, 522, 525, 526, 527, 531, 541, 542, 543, 544, 545, 549, 553, 555, 557, 561, 563, 564, 582, 588, 590, 597, 598, 605, 611, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 655, 656, 657, 660, 663, 664, 665, 666, 667, 668, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 690, 691, 692, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 718, 721, 722, 724, 725, 732, 734, 738, 741, 742, 744, 745, 746, 747, 748, 749, 750, 753, 757, 758, 759, 760, 761, 762, 763, 764, 768, 770, 771, 775, 785, 786, 788, 789, 791, 792, 793, 794, 798, 802, 803, 809, 810, 811, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 841, 842, 843, 844, 846, 847, 848, 849, 850, 851, 852, 853, 854, 856, 857, 858, 860, 861, 862, 864, 865, 866, 867, 868, 870, 873, 874], "question": [0, 5, 99, 100, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 785, 786, 788, 789, 791, 792, 793, 794, 809, 813, 815, 816, 817, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 841, 842, 844, 846, 847, 848, 849, 850, 851, 852, 856, 857, 858], "ping": 0, "me": [0, 817], "guillermo": 0, "commun": [0, 5, 43, 810, 815, 816, 817, 818, 852, 857, 866, 867, 869], "ux": 0, "team": [0, 809, 810, 812, 815, 816, 817, 818, 838, 853, 869], "discord": [0, 5, 43, 99, 100, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 785, 786, 788, 789, 791, 792, 793, 794, 809, 813, 815, 816, 817, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 844, 846, 847, 848, 849, 850, 851, 853, 856, 857, 858], "channel": [0, 26, 44, 54, 55, 58, 77, 78, 81, 99, 100, 372, 378, 396, 397, 398, 408, 498, 499, 500, 503, 542, 546, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 655, 785, 786, 788, 789, 791, 792, 793, 794, 817, 823, 831, 840], "To": [0, 7, 9, 10, 11, 13, 15, 19, 23, 24, 25, 26, 28, 29, 40, 43, 44, 45, 95, 244, 374, 453, 583, 629, 631, 788, 815, 816, 820, 821, 822, 823, 826, 828, 830, 831, 832, 834, 835, 838, 839, 840, 841, 842, 849, 850, 851, 853, 860, 861], "ensur": [0, 9, 10, 13, 15, 23, 24, 25, 26, 54, 55, 77, 78, 372, 373, 409, 410, 411, 444, 559, 631, 768, 809, 812, 815, 816, 817, 821, 826, 827, 828, 830, 832, 833, 835, 837, 838, 839, 840, 841, 842, 853, 867], "similar": [0, 19, 28, 29, 54, 279, 374, 449, 629, 633, 660, 789, 813, 815, 816, 824, 825, 826, 827, 830, 831, 832, 834, 835, 836, 838, 839, 841, 842, 849, 852, 856, 861, 863, 864, 865, 866, 873], "ar": [0, 1, 3, 4, 5, 7, 8, 9, 10, 11, 13, 15, 17, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 40, 42, 43, 45, 46, 49, 50, 53, 54, 55, 58, 59, 61, 63, 64, 65, 71, 73, 76, 77, 78, 81, 82, 84, 86, 87, 88, 94, 95, 99, 100, 123, 133, 135, 138, 144, 198, 203, 205, 210, 234, 236, 237, 240, 244, 265, 266, 270, 275, 276, 280, 282, 287, 288, 289, 325, 327, 328, 329, 331, 334, 336, 337, 338, 342, 343, 348, 353, 356, 360, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 376, 377, 378, 379, 381, 384, 388, 389, 395, 396, 397, 398, 401, 406, 408, 416, 417, 426, 427, 431, 441, 442, 444, 448, 449, 450, 454, 455, 459, 460, 461, 471, 472, 473, 475, 481, 484, 488, 489, 498, 500, 505, 506, 507, 508, 509, 519, 524, 525, 526, 527, 528, 529, 531, 534, 535, 536, 545, 551, 556, 560, 571, 572, 581, 592, 604, 614, 626, 628, 629, 631, 632, 633, 634, 636, 638, 640, 641, 642, 656, 657, 658, 660, 663, 665, 669, 670, 671, 674, 675, 677, 680, 681, 684, 685, 689, 690, 691, 696, 697, 700, 704, 706, 716, 721, 726, 727, 728, 736, 737, 738, 741, 742, 743, 744, 746, 748, 768, 770, 773, 774, 775, 776, 781, 788, 791, 794, 795, 802, 803, 806, 807, 809, 810, 811, 812, 813, 814, 815, 816, 817, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 856, 857, 858, 860, 861, 862, 863, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875], "across": [0, 9, 10, 11, 23, 24, 25, 26, 40, 54, 64, 71, 77, 78, 87, 99, 208, 209, 237, 244, 270, 288, 374, 378, 449, 500, 503, 534, 555, 591, 628, 629, 631, 633, 638, 641, 656, 660, 721, 741, 742, 789, 815, 820, 826, 828, 830, 833, 834, 836, 841, 844, 865, 867, 872], "templat": [0, 809, 823, 829, 841], "help": [0, 17, 44, 46, 51, 532, 577, 631, 644, 762, 788, 809, 810, 811, 815, 816, 818, 821, 822, 823, 824, 825, 826, 828, 832, 834, 835, 837, 838, 841, 842, 848, 849, 850, 853, 854, 863, 867, 869, 873], "get": [0, 3, 4, 5, 7, 8, 9, 10, 11, 13, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 42, 43, 45, 51, 52, 59, 71, 75, 82, 99, 160, 161, 162, 165, 193, 194, 195, 198, 204, 209, 212, 216, 375, 486, 533, 551, 572, 591, 627, 628, 631, 634, 638, 691, 717, 773, 788, 789, 802, 810, 812, 814, 815, 816, 818, 819, 820, 825, 826, 827, 831, 834, 835, 836, 837, 838, 839, 840, 841, 846, 847, 848, 849, 850, 854, 858, 861, 862, 867, 873], "It": [0, 3, 5, 7, 10, 11, 20, 23, 24, 25, 26, 28, 29, 30, 31, 40, 41, 42, 47, 48, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 70, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 94, 99, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 138, 139, 140, 141, 142, 143, 145, 146, 149, 151, 211, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 248, 249, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 326, 332, 333, 334, 335, 340, 341, 345, 347, 349, 350, 351, 352, 356, 364, 366, 369, 372, 373, 374, 375, 378, 379, 384, 385, 391, 392, 393, 395, 396, 397, 398, 399, 400, 401, 405, 406, 408, 409, 410, 411, 414, 416, 421, 423, 424, 432, 433, 438, 439, 440, 441, 449, 450, 451, 452, 453, 455, 456, 466, 469, 474, 482, 483, 484, 485, 487, 489, 493, 494, 498, 501, 502, 504, 505, 506, 508, 509, 519, 520, 521, 522, 530, 537, 538, 542, 543, 544, 549, 550, 559, 573, 574, 575, 612, 613, 616, 618, 619, 620, 621, 623, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 660, 663, 664, 665, 666, 667, 668, 670, 671, 672, 673, 674, 675, 677, 678, 679, 680, 683, 685, 686, 688, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 706, 707, 708, 709, 711, 714, 734, 735, 736, 737, 738, 740, 741, 742, 743, 745, 749, 750, 753, 754, 755, 758, 760, 761, 763, 764, 765, 788, 789, 809, 812, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 828, 829, 835, 837, 838, 839, 840, 841, 842, 843, 844, 846, 848, 849, 850, 859, 862, 865, 867, 868, 870, 871, 872, 873, 874], "locat": [0, 44, 138, 384, 520, 626, 638, 640, 643, 719, 735, 752, 803, 815, 817, 822, 823, 827, 838, 839, 841, 842, 853, 865], "asset": [0, 854], "01_templat": 0, "ipynb": 0, "pleas": [0, 5, 34, 43, 47, 99, 100, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 785, 786, 788, 789, 791, 792, 793, 794, 809, 813, 815, 816, 817, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 844, 846, 847, 848, 849, 850, 851, 853, 856, 857, 858], "make": [0, 3, 6, 8, 9, 10, 11, 20, 28, 29, 30, 42, 46, 54, 77, 372, 416, 798, 809, 812, 815, 816, 817, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 841, 842, 844, 846, 848, 849, 851, 853, 857, 858, 861, 865, 867, 868, 869, 870, 873, 874], "copi": [0, 44, 47, 50, 51, 52, 53, 54, 55, 61, 71, 73, 74, 75, 76, 77, 78, 84, 94, 98, 124, 125, 126, 130, 141, 149, 211, 271, 375, 457, 459, 460, 461, 467, 469, 471, 472, 473, 476, 480, 487, 496, 552, 578, 589, 596, 597, 626, 627, 628, 629, 631, 636, 638, 643, 699, 700, 701, 703, 705, 706, 708, 710, 716, 751, 753, 781, 803, 816, 817, 820, 822, 825, 826, 829, 838, 839, 846, 852, 860, 861, 862], "firstli": [0, 20, 21, 24, 30, 31, 35, 40, 821, 826, 828, 829, 830, 834, 835, 837, 844, 849, 863, 873], "updat": [0, 4, 5, 6, 7, 8, 10, 11, 20, 22, 23, 24, 25, 26, 28, 29, 42, 44, 49, 55, 56, 71, 78, 79, 94, 375, 486, 559, 573, 574, 577, 578, 601, 612, 613, 616, 618, 619, 620, 631, 632, 633, 637, 638, 656, 659, 712, 713, 714, 722, 723, 727, 732, 733, 781, 786, 792, 793, 798, 803, 809, 815, 816, 817, 819, 820, 821, 824, 825, 826, 828, 833, 835, 836, 838, 839, 841, 844, 846, 848, 849, 851, 852], "file": [0, 7, 42, 43, 44, 55, 71, 586, 609, 631, 791, 807, 811, 815, 816, 817, 820, 821, 822, 823, 824, 825, 827, 829, 830, 831, 832, 834, 838, 839, 840, 841, 842, 846, 849, 853, 863, 866, 867, 868], "name": [0, 7, 8, 28, 29, 40, 42, 43, 44, 54, 59, 65, 69, 77, 82, 88, 92, 244, 372, 373, 375, 420, 426, 435, 491, 495, 532, 533, 629, 631, 634, 642, 669, 670, 681, 682, 684, 685, 689, 746, 747, 748, 770, 774, 781, 791, 798, 799, 801, 807, 815, 816, 817, 822, 823, 824, 825, 828, 829, 830, 833, 838, 839, 841, 842, 843, 844, 846, 849, 851, 867, 875], "match": [0, 51, 54, 71, 74, 77, 149, 244, 279, 336, 338, 369, 372, 374, 375, 417, 449, 464, 486, 490, 569, 627, 629, 631, 634, 670, 671, 675, 691, 768, 813, 815, 821, 823, 824, 828, 831, 839, 868, 873], "topic": [0, 17, 20, 21, 22, 30, 31, 32, 33, 34, 35, 835, 848, 867], "your": [0, 2, 3, 4, 5, 7, 8, 10, 11, 13, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 32, 40, 42, 44, 46, 809, 810, 812, 813, 814, 815, 816, 818, 820, 822, 823, 825, 829, 831, 832, 836, 838, 840, 842, 844, 849, 850, 852, 853, 857, 858, 860, 861, 867, 875], "Then": [0, 47, 633, 660, 811, 815, 816, 817, 822, 823, 825, 831, 832, 835, 837, 841, 842, 852], "place": [0, 9, 10, 23, 24, 25, 26, 42, 49, 50, 53, 54, 55, 59, 61, 71, 73, 75, 76, 77, 78, 82, 84, 123, 124, 125, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 152, 168, 172, 211, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 237, 238, 240, 242, 243, 244, 248, 249, 250, 251, 252, 253, 254, 257, 259, 260, 261, 262, 264, 265, 266, 267, 270, 271, 272, 273, 274, 275, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 309, 310, 313, 325, 326, 331, 332, 333, 335, 338, 339, 340, 341, 345, 347, 348, 349, 350, 352, 353, 354, 358, 359, 366, 369, 372, 373, 375, 384, 391, 392, 393, 394, 396, 397, 398, 404, 409, 410, 411, 416, 418, 427, 471, 481, 486, 489, 493, 506, 519, 522, 526, 535, 543, 544, 549, 553, 555, 557, 558, 559, 573, 577, 588, 592, 597, 601, 621, 626, 627, 628, 629, 631, 632, 633, 634, 636, 639, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 655, 656, 657, 660, 663, 664, 665, 666, 667, 668, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 690, 691, 692, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 734, 741, 742, 744, 745, 746, 747, 748, 749, 750, 753, 757, 758, 759, 760, 761, 762, 763, 764, 765, 793, 809, 813, 814, 817, 819, 820, 823, 824, 825, 827, 828, 829, 831, 833, 834, 838, 839, 841, 842, 844, 851, 854, 869], "its": [0, 10, 19, 21, 28, 29, 31, 34, 41, 42, 44, 49, 51, 54, 61, 71, 74, 77, 78, 84, 97, 109, 112, 115, 120, 150, 155, 156, 157, 158, 159, 210, 237, 270, 289, 299, 364, 372, 375, 384, 412, 420, 493, 495, 522, 546, 595, 623, 625, 627, 628, 629, 631, 634, 636, 638, 674, 699, 703, 704, 708, 721, 770, 803, 809, 815, 816, 821, 824, 825, 826, 827, 829, 830, 831, 835, 836, 837, 838, 839, 841, 842, 843, 844, 846, 851, 852, 854, 860, 866, 867, 873], "folder": [0, 9, 10, 23, 24, 25, 26, 44, 809, 816, 817, 820, 823, 825, 831, 834, 838, 841, 842, 843], "next": [0, 5, 6, 20, 21, 22, 23, 24, 25, 26, 30, 31, 32, 33, 34, 35, 42, 44, 54, 77, 162, 345, 349, 354, 358, 369, 627, 788, 793, 809, 815, 816, 817, 822, 826, 828, 829, 831, 832, 835, 847, 848, 849, 858, 867, 869], "edit": [0, 815, 816, 817, 832], "titl": [0, 11, 14, 16, 27, 43, 46, 809, 815, 817, 823], "descript": [0, 1, 37, 38, 39, 44, 47, 50, 53, 54, 59, 76, 77, 82, 123, 124, 125, 127, 128, 129, 130, 132, 133, 134, 135, 136, 139, 140, 141, 142, 143, 145, 146, 152, 168, 172, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 237, 238, 240, 242, 243, 244, 248, 249, 250, 251, 252, 253, 254, 257, 259, 260, 261, 262, 264, 265, 266, 267, 270, 272, 273, 274, 275, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 310, 326, 332, 333, 335, 338, 366, 369, 372, 373, 375, 384, 391, 392, 393, 394, 396, 397, 398, 404, 409, 410, 411, 416, 418, 427, 481, 489, 493, 519, 522, 549, 553, 555, 557, 588, 597, 621, 626, 627, 629, 631, 632, 633, 634, 636, 639, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 655, 656, 657, 660, 663, 664, 665, 666, 667, 668, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 690, 691, 692, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 734, 741, 742, 744, 745, 746, 747, 748, 749, 750, 753, 757, 758, 759, 760, 761, 762, 763, 764, 765, 815, 817, 829, 836, 837], "accordingli": [0, 54, 59, 64, 65, 67, 68, 77, 82, 87, 90, 91, 136, 237, 242, 244, 260, 270, 284, 332, 333, 369, 626, 629, 634, 641, 642, 644, 645, 691, 742, 746, 747, 748, 749, 757, 758, 759, 760, 761, 762, 763, 764, 765, 838, 846, 853], "thei": [0, 11, 35, 40, 45, 54, 59, 63, 65, 71, 82, 86, 88, 175, 289, 343, 369, 627, 629, 633, 634, 637, 640, 642, 658, 689, 712, 713, 735, 746, 768, 794, 809, 814, 815, 816, 819, 820, 822, 823, 824, 825, 826, 827, 828, 830, 832, 834, 835, 837, 838, 841, 842, 844, 846, 848, 849, 850, 851, 852, 860, 864, 867, 869, 870, 873, 874], "render": [0, 823, 829], "correctli": [0, 25, 28, 29, 42, 54, 59, 64, 77, 82, 87, 337, 369, 384, 525, 526, 527, 528, 529, 634, 641, 675, 741, 815, 816, 817, 821, 824, 826, 828, 830, 832, 833, 839, 841, 844, 850, 852, 860, 861], "webpag": [0, 17], "content": [0, 1, 14, 16, 27, 28, 43, 44, 54, 71, 77, 384, 526, 815, 817, 823, 827, 837, 840, 846, 849, 853], "behind": [0, 19, 28, 809, 819, 833, 841, 845, 847], "exist": [0, 19, 28, 29, 42, 43, 44, 47, 50, 54, 55, 71, 73, 77, 78, 84, 125, 375, 459, 460, 466, 467, 469, 471, 472, 473, 480, 496, 541, 577, 631, 636, 697, 699, 700, 701, 703, 705, 706, 708, 710, 793, 795, 807, 809, 815, 816, 820, 822, 827, 828, 829, 834, 835, 837, 838, 841, 844, 846, 852, 854, 856, 857, 865, 867, 870, 873], "cell": [0, 1, 3, 4, 6, 9, 10, 11, 13, 15, 19, 20, 21, 22, 23, 24, 25, 26, 29, 43, 58, 81, 633, 658, 659, 789, 825, 846], "where": [0, 8, 21, 25, 31, 32, 36, 44, 50, 53, 54, 55, 59, 61, 63, 64, 67, 68, 71, 73, 76, 77, 78, 82, 84, 86, 87, 90, 91, 94, 95, 132, 133, 136, 138, 144, 225, 235, 237, 240, 242, 244, 245, 254, 259, 260, 261, 268, 269, 270, 275, 277, 281, 283, 287, 297, 299, 325, 327, 328, 329, 344, 348, 355, 364, 366, 369, 372, 373, 374, 375, 378, 379, 384, 386, 387, 388, 389, 395, 400, 401, 405, 420, 426, 427, 431, 432, 434, 435, 442, 448, 449, 450, 459, 460, 461, 475, 481, 498, 499, 500, 503, 505, 506, 508, 509, 519, 527, 528, 529, 559, 573, 611, 626, 629, 631, 633, 634, 636, 638, 640, 641, 644, 645, 658, 660, 665, 669, 670, 675, 677, 679, 680, 681, 684, 685, 688, 690, 696, 698, 699, 701, 707, 711, 719, 726, 735, 736, 737, 738, 743, 744, 759, 761, 763, 764, 765, 773, 788, 792, 803, 807, 809, 810, 813, 816, 817, 818, 820, 821, 822, 823, 824, 826, 827, 829, 830, 834, 835, 836, 837, 838, 839, 841, 842, 844, 846, 849, 850, 851, 852, 853, 856, 857, 858, 860, 865, 874], "The": [0, 3, 5, 6, 7, 8, 9, 10, 11, 17, 19, 20, 21, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 41, 42, 44, 45, 46, 49, 50, 51, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 94, 95, 97, 99, 100, 103, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 119, 120, 122, 123, 130, 131, 133, 135, 138, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 152, 154, 155, 156, 157, 158, 159, 161, 163, 164, 165, 167, 169, 170, 171, 174, 175, 177, 178, 180, 181, 182, 183, 189, 190, 191, 192, 193, 195, 196, 197, 198, 203, 204, 205, 206, 208, 209, 210, 211, 212, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 345, 347, 348, 349, 350, 351, 352, 353, 354, 356, 357, 358, 359, 360, 362, 363, 364, 366, 369, 370, 371, 372, 373, 374, 375, 378, 379, 380, 384, 386, 387, 388, 389, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 404, 405, 406, 408, 409, 410, 411, 412, 414, 415, 416, 417, 419, 420, 423, 424, 425, 426, 427, 429, 431, 443, 444, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 465, 466, 468, 470, 471, 472, 473, 477, 480, 481, 486, 487, 489, 490, 491, 492, 493, 497, 498, 499, 500, 501, 502, 503, 504, 506, 507, 508, 510, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 531, 532, 534, 535, 536, 537, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 553, 554, 555, 557, 558, 559, 561, 562, 563, 564, 565, 568, 570, 573, 574, 577, 579, 580, 583, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 610, 612, 613, 616, 618, 619, 620, 621, 623, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 660, 663, 664, 665, 666, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 689, 690, 691, 693, 694, 695, 696, 697, 698, 700, 701, 702, 703, 704, 705, 706, 707, 709, 710, 711, 712, 713, 714, 715, 716, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 730, 731, 732, 733, 734, 735, 736, 737, 738, 740, 741, 742, 743, 744, 746, 747, 748, 749, 750, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 768, 770, 773, 775, 776, 781, 785, 786, 788, 789, 791, 792, 793, 798, 802, 803, 809, 810, 811, 813, 815, 818, 820, 821, 822, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 837, 839, 841, 842, 844, 845, 846, 849, 850, 851, 853, 854, 855, 856, 858, 860, 861, 862, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875], "h2": [0, 1, 14, 16, 27], "tag": [0, 1, 14, 16, 27, 816, 817], "section": [0, 1, 5, 10, 11, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 33, 34, 35, 48, 54, 65, 77, 109, 372, 375, 406, 417, 467, 476, 496, 642, 746, 747, 748, 749, 809, 810, 813, 814, 815, 816, 817, 819, 820, 821, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 834, 835, 837, 838, 839, 840, 841, 842, 844, 845, 849, 850, 862, 863, 870, 873], "h3": [0, 1, 14, 16, 27], "subsect": [0, 1, 14, 16, 27, 815, 816, 817, 820, 825], "step": [0, 1, 5, 14, 15, 16, 27, 28, 29, 40, 42, 43, 44, 54, 56, 73, 77, 79, 123, 134, 372, 375, 418, 420, 475, 612, 613, 616, 618, 619, 620, 626, 632, 637, 712, 713, 714, 793, 807, 809, 815, 816, 817, 818, 821, 822, 824, 825, 826, 827, 828, 831, 836, 838, 841, 846, 849, 850, 851, 858, 867], "explan": [0, 1, 14, 16, 27, 815, 816, 817, 824, 829, 833, 838, 842, 848], "go": [0, 4, 5, 13, 15, 19, 26, 29, 34, 49, 54, 77, 81, 372, 415, 419, 638, 726, 727, 809, 810, 813, 815, 816, 817, 819, 822, 823, 826, 828, 831, 832, 838, 839, 841, 842, 845, 849, 852, 863, 867, 868, 872, 874], "default": [0, 3, 5, 6, 7, 28, 29, 42, 43, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 97, 100, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 155, 156, 157, 158, 159, 160, 163, 164, 165, 166, 169, 170, 175, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 193, 194, 196, 197, 201, 204, 205, 206, 208, 209, 210, 211, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 320, 321, 322, 323, 324, 325, 326, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 364, 366, 369, 370, 372, 373, 374, 375, 378, 379, 380, 382, 384, 385, 387, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 404, 405, 406, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 427, 429, 431, 432, 433, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483, 484, 485, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 512, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 534, 535, 537, 538, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 553, 554, 555, 557, 558, 559, 561, 562, 565, 566, 569, 570, 573, 574, 577, 578, 583, 587, 588, 589, 590, 592, 594, 596, 597, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 623, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 663, 664, 665, 666, 667, 668, 670, 671, 672, 673, 674, 675, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 721, 722, 723, 725, 726, 727, 728, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 768, 770, 773, 774, 775, 776, 781, 785, 786, 788, 789, 790, 791, 792, 793, 794, 802, 803, 807, 815, 816, 817, 822, 823, 826, 827, 828, 829, 830, 833, 834, 838, 841, 844, 846, 850, 854, 860, 867], "which": [0, 3, 5, 7, 10, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 41, 42, 43, 44, 45, 46, 48, 50, 51, 52, 53, 54, 55, 56, 59, 60, 61, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 94, 97, 100, 107, 108, 109, 110, 111, 112, 113, 114, 115, 123, 124, 125, 127, 128, 129, 131, 132, 133, 134, 135, 137, 138, 139, 140, 142, 143, 144, 145, 146, 150, 152, 154, 160, 162, 165, 167, 170, 177, 189, 194, 198, 203, 205, 208, 209, 210, 211, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 248, 249, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 300, 301, 302, 303, 304, 306, 307, 308, 309, 310, 319, 322, 325, 326, 327, 328, 329, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 345, 347, 348, 349, 350, 352, 353, 354, 356, 358, 359, 360, 361, 362, 363, 364, 366, 369, 370, 371, 372, 373, 374, 375, 378, 379, 382, 384, 395, 396, 397, 398, 400, 401, 405, 406, 415, 416, 417, 419, 424, 427, 439, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 459, 460, 461, 465, 466, 486, 487, 488, 489, 490, 491, 493, 498, 500, 501, 502, 504, 505, 506, 507, 508, 509, 511, 512, 519, 520, 521, 522, 524, 525, 526, 527, 528, 529, 531, 532, 534, 535, 537, 538, 541, 542, 543, 544, 545, 546, 549, 550, 551, 552, 553, 554, 555, 557, 558, 559, 561, 562, 565, 566, 571, 572, 573, 574, 588, 589, 590, 592, 594, 596, 597, 610, 611, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 638, 640, 641, 642, 643, 644, 645, 647, 648, 649, 650, 656, 657, 658, 660, 663, 664, 665, 667, 668, 670, 671, 672, 673, 674, 675, 677, 678, 679, 681, 682, 683, 684, 688, 690, 691, 693, 694, 695, 696, 697, 699, 700, 702, 703, 704, 705, 706, 707, 710, 711, 720, 721, 722, 723, 728, 730, 731, 732, 733, 735, 736, 737, 738, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 753, 754, 755, 757, 758, 759, 760, 761, 762, 763, 764, 765, 770, 773, 774, 775, 785, 786, 788, 789, 790, 791, 792, 793, 794, 798, 799, 805, 807, 809, 811, 813, 815, 816, 817, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 841, 842, 843, 844, 845, 846, 848, 849, 850, 851, 852, 853, 854, 856, 857, 858, 860, 861, 863, 864, 865, 866, 867, 868, 870, 872, 873, 874], "text": [0, 4, 9, 11, 42, 54, 55, 373, 374, 441, 449, 815, 817, 823, 828, 829], "paragraph": [0, 1, 14, 16, 27, 823], "p": [0, 1, 14, 16, 27, 40, 54, 55, 59, 77, 78, 82, 95, 136, 241, 373, 378, 423, 436, 504, 537, 538, 626, 629, 631, 634, 638, 675, 691, 723, 789, 809, 816, 817, 819], "without": [0, 3, 11, 31, 40, 44, 47, 65, 71, 97, 583, 598, 631, 636, 638, 642, 703, 716, 746, 747, 748, 749, 773, 776, 802, 816, 817, 821, 822, 824, 825, 826, 827, 828, 830, 833, 834, 838, 841, 842, 844, 848, 849, 850, 852, 860, 864, 867, 868, 869, 873], "path": [0, 9, 10, 11, 23, 24, 25, 26, 43, 44, 770, 781, 797, 816, 823, 837, 838, 839, 853, 867], "correspond": [0, 3, 8, 10, 15, 28, 29, 43, 51, 53, 54, 55, 58, 61, 64, 65, 67, 71, 74, 76, 77, 81, 84, 90, 94, 97, 100, 150, 162, 165, 225, 275, 289, 328, 342, 343, 366, 369, 372, 373, 375, 378, 384, 395, 401, 412, 417, 423, 426, 427, 428, 447, 472, 473, 493, 498, 499, 500, 503, 520, 521, 589, 611, 627, 629, 631, 633, 634, 636, 640, 641, 642, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 660, 665, 669, 670, 675, 682, 683, 703, 704, 735, 741, 742, 746, 747, 748, 749, 754, 755, 760, 761, 762, 763, 770, 773, 775, 802, 807, 809, 815, 817, 821, 822, 824, 825, 826, 828, 829, 830, 833, 834, 836, 838, 841, 844, 846, 860, 861, 862, 867], "toctre": [0, 823], "index": [0, 42, 43, 44, 47, 50, 54, 55, 61, 64, 65, 66, 71, 73, 77, 78, 84, 87, 88, 89, 129, 136, 310, 317, 318, 327, 328, 329, 366, 372, 373, 375, 380, 382, 384, 395, 401, 432, 434, 441, 464, 471, 474, 482, 484, 486, 489, 490, 493, 494, 510, 511, 520, 529, 532, 550, 552, 573, 574, 578, 624, 626, 631, 636, 638, 641, 642, 643, 703, 707, 717, 718, 719, 722, 723, 724, 730, 732, 741, 742, 744, 746, 747, 748, 750, 752, 774, 789, 803, 805, 824, 825, 830, 834, 835, 836, 837, 839, 841, 848, 867], "rst": [0, 834], "left": [0, 21, 31, 42, 43, 54, 59, 64, 66, 77, 82, 87, 89, 117, 118, 229, 244, 337, 353, 360, 369, 370, 372, 373, 375, 384, 407, 426, 431, 437, 444, 446, 472, 482, 524, 525, 526, 527, 528, 529, 542, 625, 629, 631, 634, 641, 643, 669, 670, 675, 684, 689, 741, 752, 773, 816, 817, 820, 823, 825, 826, 828, 831], "mai": [0, 52, 53, 54, 59, 65, 66, 75, 76, 82, 89, 99, 100, 123, 130, 141, 211, 237, 238, 244, 249, 257, 265, 266, 270, 271, 273, 288, 332, 333, 369, 401, 541, 577, 626, 628, 629, 631, 634, 642, 643, 644, 682, 691, 746, 747, 748, 749, 750, 753, 757, 758, 759, 761, 773, 803, 814, 815, 816, 817, 820, 824, 825, 826, 830, 831, 834, 835, 836, 838, 839, 841, 844, 847, 848, 850, 858, 874], "need": [0, 3, 5, 8, 10, 17, 19, 25, 26, 28, 29, 42, 43, 44, 54, 55, 61, 77, 78, 84, 372, 373, 384, 395, 400, 401, 405, 426, 526, 537, 538, 559, 631, 633, 634, 636, 638, 660, 669, 696, 699, 726, 774, 809, 811, 815, 816, 817, 820, 821, 822, 823, 824, 825, 826, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 842, 844, 846, 848, 849, 852, 853, 858, 860, 861, 863, 867, 868, 869, 873], "add": [0, 21, 31, 44, 46, 53, 54, 62, 69, 71, 76, 77, 85, 92, 99, 100, 360, 370, 372, 374, 415, 454, 569, 598, 629, 631, 633, 634, 639, 644, 660, 688, 734, 762, 770, 781, 789, 792, 807, 809, 815, 816, 817, 819, 820, 821, 822, 823, 824, 825, 826, 827, 829, 831, 832, 833, 834, 835, 837, 838, 841, 842, 844, 846, 848, 852, 853, 863, 864, 865, 867], "grid": [0, 44, 50, 136, 313, 366, 626, 828, 841], "item": [0, 4, 5, 28, 29, 40, 42, 44, 49, 55, 69, 71, 73, 76, 77, 78, 131, 156, 193, 247, 263, 271, 338, 342, 355, 539, 549, 550, 554, 589, 590, 626, 627, 628, 631, 638, 645, 720, 721, 722, 723, 727, 732, 733, 767, 809, 815, 824, 826, 846, 848, 849, 851, 860], "card": [0, 54, 77, 357, 369, 872], "refer": [0, 6, 54, 61, 67, 68, 77, 79, 84, 90, 91, 129, 144, 242, 260, 310, 325, 355, 366, 369, 372, 373, 375, 401, 406, 417, 424, 448, 471, 612, 613, 626, 629, 632, 634, 636, 644, 645, 665, 667, 690, 703, 761, 763, 764, 765, 789, 809, 814, 815, 816, 817, 820, 821, 823, 825, 826, 833, 834, 835, 836, 837, 838, 839, 840, 841, 852, 853, 854, 867], "also": [0, 3, 4, 5, 7, 8, 10, 11, 13, 15, 19, 21, 23, 24, 26, 28, 29, 31, 33, 34, 35, 42, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 95, 97, 99, 107, 108, 109, 110, 111, 112, 113, 114, 115, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 150, 151, 152, 165, 168, 169, 170, 172, 177, 194, 211, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 300, 301, 302, 303, 304, 306, 307, 308, 309, 310, 311, 312, 314, 315, 316, 319, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 366, 369, 372, 373, 375, 382, 384, 391, 392, 393, 394, 396, 397, 398, 400, 404, 405, 406, 409, 410, 411, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 433, 437, 438, 439, 440, 441, 442, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 504, 506, 507, 508, 509, 510, 511, 512, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 534, 535, 537, 538, 541, 542, 543, 544, 545, 546, 549, 550, 553, 555, 557, 558, 559, 561, 562, 563, 565, 566, 568, 573, 574, 588, 589, 590, 591, 592, 594, 596, 597, 610, 612, 613, 616, 618, 619, 620, 621, 626, 627, 629, 631, 632, 633, 634, 636, 637, 638, 639, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 655, 656, 657, 659, 660, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 725, 726, 727, 734, 735, 736, 737, 738, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 773, 788, 789, 798, 809, 810, 811, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 837, 838, 839, 841, 842, 844, 846, 849, 850, 851, 852, 853, 856, 857, 860, 861, 863, 864, 865, 866, 867, 868, 870, 872, 873, 874], "look": [0, 5, 6, 19, 28, 29, 42, 44, 47, 809, 813, 815, 816, 817, 822, 823, 824, 826, 827, 828, 830, 831, 832, 833, 834, 838, 839, 841, 842, 843, 844, 846, 848, 850, 851, 853, 856, 860, 863, 867], "document": [0, 5, 19, 28, 61, 244, 332, 333, 369, 611, 629, 631, 707, 810, 811, 814, 817, 823, 825, 826, 828, 837, 838, 839, 841, 849, 851], "sphinx": [0, 811, 823], "design": [0, 11, 19, 28, 77, 244, 309, 314, 315, 366, 629, 809, 812, 819, 823, 825, 826, 837, 838, 839, 840, 844, 846, 848, 852, 856, 857, 863, 865, 867, 870, 871, 872], "websit": [0, 46, 816, 820, 857], "alreadi": [1, 5, 7, 10, 20, 23, 24, 25, 26, 28, 29, 34, 42, 44, 47, 54, 59, 71, 77, 82, 233, 243, 270, 280, 290, 375, 384, 460, 461, 481, 517, 526, 629, 634, 672, 679, 802, 803, 809, 815, 816, 817, 822, 824, 826, 827, 833, 837, 838, 844, 852, 853, 867, 869, 874], "instal": [1, 6, 7, 8, 10, 11, 13, 15, 20, 21, 22, 23, 24, 25, 26, 28, 29, 42, 44, 45, 46, 47, 811, 816, 817, 822, 823, 831, 832], "skip": [1, 4, 44, 54, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 107, 108, 109, 110, 111, 112, 113, 114, 115, 131, 133, 138, 140, 146, 150, 152, 177, 211, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 248, 249, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 300, 301, 302, 303, 304, 306, 307, 308, 310, 331, 332, 333, 334, 335, 337, 339, 347, 348, 354, 356, 358, 359, 360, 373, 375, 396, 397, 398, 416, 432, 434, 441, 449, 450, 451, 452, 453, 454, 455, 456, 459, 460, 461, 465, 466, 482, 485, 487, 489, 490, 491, 493, 498, 500, 501, 502, 504, 506, 519, 520, 521, 522, 531, 534, 535, 537, 538, 542, 543, 544, 545, 546, 549, 550, 553, 555, 557, 558, 559, 561, 562, 565, 573, 574, 588, 589, 590, 592, 594, 596, 597, 610, 616, 621, 638, 647, 648, 649, 650, 656, 657, 663, 664, 665, 670, 671, 672, 673, 674, 675, 677, 679, 681, 682, 688, 693, 694, 695, 696, 700, 703, 704, 705, 706, 707, 710, 711, 728, 735, 736, 737, 738, 740, 743, 746, 747, 748, 749, 750, 754, 755, 758, 760, 761, 763, 764, 765, 774, 802, 823, 834, 841], "colab": [1, 4, 10, 11, 13, 15, 19, 20, 21, 22, 23, 24, 25, 26, 29, 42, 44, 46, 47], "manual": [1, 5, 10, 11, 13, 15, 19, 20, 21, 22, 23, 24, 25, 26, 29, 638, 715, 725, 726, 815, 816, 817, 826, 832, 841, 850, 853], "do": [1, 3, 5, 6, 7, 8, 9, 10, 11, 13, 15, 19, 20, 21, 22, 23, 24, 25, 26, 29, 40, 42, 44, 54, 55, 71, 77, 78, 237, 270, 279, 372, 374, 375, 384, 418, 454, 466, 526, 529, 559, 629, 631, 638, 715, 722, 725, 726, 727, 732, 775, 803, 809, 813, 815, 816, 817, 820, 821, 822, 824, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 842, 844, 846, 848, 849, 850, 851, 852, 854, 858, 868, 873, 874], "run": [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 42, 44, 45, 46, 54, 56, 77, 79, 378, 498, 500, 612, 613, 618, 632, 633, 637, 658, 712, 713, 714, 770, 771, 789, 790, 791, 792, 802, 809, 811, 815, 816, 819, 821, 822, 825, 827, 828, 830, 832, 833, 835, 838, 839, 846, 847, 848, 849, 850, 851, 852, 853, 860, 861, 862, 865, 867, 868, 869, 870, 872, 873, 874], "below": [1, 9, 10, 11, 13, 15, 19, 20, 21, 22, 23, 24, 25, 26, 29, 33, 34, 35, 40, 43, 44, 45, 50, 54, 59, 77, 82, 90, 142, 143, 144, 244, 254, 277, 325, 326, 335, 366, 369, 375, 489, 626, 629, 634, 668, 688, 763, 810, 813, 815, 816, 819, 820, 824, 825, 826, 827, 828, 830, 831, 834, 837, 838, 839, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 860, 861, 862, 863, 865, 870, 872], "mind": [1, 13, 15, 19, 25, 28, 32, 815, 816, 821, 824, 841, 853, 861], "packag": [1, 3, 5, 6, 7, 9, 10, 13, 23, 24, 25, 26, 29, 42, 43, 44, 47, 801, 809, 813, 816, 825, 838, 852, 853, 867, 869], "avail": [1, 3, 6, 7, 9, 23, 24, 26, 28, 29, 44, 55, 78, 193, 199, 201, 202, 213, 543, 628, 631, 634, 685, 774, 807, 809, 816, 817, 824, 825, 826, 827, 829, 830, 838, 841, 844, 852, 853, 856, 860, 861, 862, 872, 873], "click": [1, 3, 44, 815, 816, 817, 825, 829, 831, 832, 847], "runtim": [1, 3, 4, 5, 6, 8, 9, 10, 21, 28, 31, 42, 43, 819, 834, 841, 844, 867], "restart": [1, 3, 4, 6, 9, 42, 43, 816, 831], "pip": [1, 3, 4, 6, 7, 8, 9, 10, 11, 13, 15, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 40, 41, 42, 43, 44, 45, 46, 47, 813, 816, 823, 832], "q": [1, 3, 4, 6, 7, 8, 9, 10, 11, 42, 43, 44, 54, 58, 59, 77, 81, 82, 359, 369, 373, 384, 426, 529, 633, 634, 638, 660, 663, 669, 670, 681, 723, 816, 817, 819, 839, 852], "git": [1, 3, 4, 6, 9, 28, 42, 43, 44, 45, 809, 811, 814, 816, 817, 820, 823, 825, 831, 832, 841, 853], "clone": [1, 3, 6, 9, 28, 42, 44, 45, 809, 811, 817, 831, 853], "http": [1, 3, 4, 5, 6, 7, 8, 9, 10, 15, 23, 24, 25, 26, 28, 29, 42, 43, 44, 45, 46, 47, 53, 54, 76, 77, 79, 144, 152, 240, 250, 251, 266, 325, 332, 333, 366, 369, 372, 375, 384, 416, 489, 519, 612, 613, 626, 627, 629, 632, 634, 636, 644, 682, 683, 711, 761, 809, 811, 816, 817, 820, 823, 825, 826, 829, 831, 853, 861], "github": [1, 3, 4, 6, 8, 9, 10, 28, 42, 43, 44, 45, 46, 809, 811, 812, 814, 817, 818, 820, 823, 825, 826, 828, 829, 831, 832, 840, 841, 853, 856, 875], "com": [1, 3, 4, 6, 8, 9, 10, 15, 28, 42, 43, 44, 45, 46, 809, 811, 816, 817, 820, 823, 825, 826, 831, 853], "unifyai": [1, 3, 6, 9, 28, 42, 43, 44, 45, 46, 809, 811, 816, 817, 823, 831, 853], "model": [1, 2, 3, 11, 12, 17, 18, 19, 45, 47, 237, 270, 374, 450, 629, 786, 790, 791, 807, 809, 849, 850, 854, 860, 861, 865, 866, 867, 868, 869, 870, 871, 873, 874], "depth": [1, 3, 6, 9, 43, 50, 54, 58, 73, 77, 81, 138, 372, 375, 408, 468, 542, 554, 626, 631, 633, 651, 652, 817, 825, 849, 850, 851, 853], "1": [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 40, 41, 42, 43, 44, 45, 47, 48, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 94, 95, 97, 99, 100, 107, 109, 110, 111, 112, 113, 114, 115, 116, 119, 120, 122, 123, 124, 125, 126, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 144, 146, 149, 150, 151, 152, 156, 160, 161, 162, 165, 170, 172, 177, 193, 194, 198, 202, 203, 205, 206, 211, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 319, 322, 323, 325, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 364, 366, 369, 370, 372, 373, 374, 375, 378, 379, 380, 382, 384, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 404, 405, 406, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 437, 438, 439, 442, 443, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 531, 534, 535, 537, 538, 541, 542, 543, 544, 545, 546, 549, 550, 551, 552, 553, 554, 555, 557, 558, 559, 561, 562, 563, 565, 566, 568, 569, 571, 573, 574, 578, 587, 588, 589, 590, 591, 592, 594, 596, 597, 598, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 689, 690, 691, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 713, 714, 715, 716, 718, 719, 721, 722, 723, 724, 726, 727, 732, 733, 734, 735, 736, 737, 738, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 770, 773, 774, 775, 776, 778, 781, 785, 788, 789, 790, 791, 792, 793, 794, 798, 802, 803, 807, 809, 812, 813, 816, 817, 820, 822, 823, 824, 825, 826, 827, 828, 830, 831, 832, 833, 834, 836, 837, 838, 839, 841, 844, 845, 846, 848, 849, 850, 851, 852, 857, 858, 860, 861, 862, 875], "from": [1, 3, 4, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 40, 41, 42, 44, 45, 46, 47, 49, 50, 51, 53, 54, 55, 56, 58, 59, 61, 63, 64, 67, 68, 69, 71, 72, 73, 74, 76, 77, 78, 79, 81, 82, 84, 86, 87, 90, 91, 92, 94, 95, 97, 100, 123, 125, 128, 130, 131, 132, 133, 136, 137, 140, 144, 146, 152, 170, 176, 177, 193, 198, 203, 209, 210, 236, 244, 245, 272, 276, 277, 284, 288, 309, 310, 316, 319, 325, 327, 328, 329, 336, 339, 343, 344, 346, 347, 359, 363, 366, 369, 371, 372, 373, 374, 375, 379, 384, 396, 397, 398, 412, 417, 418, 437, 444, 449, 450, 454, 464, 467, 476, 481, 487, 489, 490, 492, 493, 495, 496, 505, 506, 507, 508, 509, 520, 521, 541, 549, 550, 552, 572, 583, 594, 611, 613, 614, 618, 626, 627, 628, 629, 631, 632, 633, 634, 636, 637, 638, 640, 641, 642, 644, 645, 647, 655, 656, 665, 668, 684, 688, 689, 690, 697, 700, 703, 706, 712, 713, 714, 716, 727, 728, 729, 735, 736, 737, 738, 742, 745, 746, 748, 754, 755, 760, 761, 762, 763, 764, 765, 768, 770, 773, 774, 775, 776, 781, 786, 788, 789, 790, 791, 793, 798, 803, 807, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 837, 838, 839, 841, 842, 844, 846, 847, 848, 849, 850, 851, 852, 854, 856, 857, 858, 859, 860, 861, 862, 863, 865, 866, 867, 868, 869, 871, 872, 873, 874], "repositori": [1, 3, 6, 9, 811, 815, 816, 817, 819, 820, 823, 831, 840, 858], "cd": [1, 3, 6, 9, 28, 45, 809, 811, 816, 817, 831, 853], "here": [1, 3, 5, 11, 14, 16, 19, 24, 27, 28, 29, 40, 42, 43, 44, 45, 47, 77, 280, 456, 629, 809, 813, 814, 815, 816, 817, 820, 822, 823, 824, 825, 826, 828, 831, 832, 833, 835, 836, 837, 838, 839, 841, 842, 846, 847, 848, 849, 850, 851, 852, 860, 861, 862, 867, 868, 875], "normal": [1, 3, 5, 9, 13, 14, 15, 16, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 42, 43, 54, 62, 63, 77, 85, 86, 94, 95, 356, 369, 372, 378, 384, 394, 395, 400, 401, 404, 405, 406, 416, 417, 498, 499, 500, 501, 502, 503, 504, 519, 522, 636, 639, 640, 697, 707, 734, 735, 737, 788, 789, 792, 809, 815, 837, 838, 844, 849, 860, 862, 865], "resnet": [2, 10, 17, 28, 860, 861], "imag": [2, 3, 5, 8, 10, 13, 17, 25, 28, 29, 42, 43, 44, 45, 46, 47, 54, 58, 76, 77, 81, 99, 217, 218, 219, 220, 223, 226, 235, 238, 240, 242, 251, 252, 253, 258, 260, 273, 280, 281, 283, 284, 288, 372, 391, 392, 408, 409, 410, 412, 542, 629, 631, 633, 646, 647, 648, 649, 650, 653, 654, 655, 789, 809, 816, 831, 844, 846, 847, 849, 851, 853, 860, 861, 867], "classif": [2, 3, 9, 11, 17, 42, 809, 867], "acceler": [2, 17, 809, 826, 838, 865, 869, 870, 871, 872], "pytorch": [2, 3, 4, 6, 8, 9, 12, 14, 15, 17, 18, 26, 28, 29, 40, 47, 280, 332, 333, 369, 629, 793, 809, 814, 815, 821, 826, 827, 830, 833, 834, 837, 838, 839, 844, 846, 851, 852, 854, 857, 858, 860, 861, 864, 868, 870, 871, 873, 874], "jax": [2, 5, 9, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 34, 40, 42, 46, 48, 53, 54, 55, 65, 70, 76, 77, 78, 107, 108, 109, 110, 111, 112, 113, 114, 115, 206, 288, 292, 297, 298, 300, 346, 364, 369, 384, 529, 559, 592, 611, 623, 628, 629, 631, 642, 746, 747, 748, 749, 781, 785, 798, 809, 813, 814, 815, 816, 817, 820, 822, 826, 827, 830, 831, 833, 836, 837, 838, 839, 841, 842, 844, 846, 848, 851, 852, 857, 858, 860, 861, 862, 868, 870, 873, 874], "convert": [2, 6, 8, 10, 11, 13, 15, 17, 18, 20, 22, 25, 26, 28, 29, 30, 32, 34, 42, 45, 47, 49, 50, 53, 71, 72, 73, 76, 94, 124, 125, 137, 147, 148, 190, 191, 192, 193, 204, 212, 216, 236, 276, 375, 380, 459, 460, 461, 510, 575, 593, 595, 596, 597, 599, 626, 627, 628, 629, 631, 634, 638, 692, 716, 727, 728, 770, 798, 802, 809, 815, 821, 822, 835, 836, 838, 841, 843, 846, 852, 854, 858, 861, 865, 866, 873], "them": [2, 3, 8, 10, 13, 15, 17, 28, 29, 34, 373, 443, 536, 572, 631, 773, 789, 809, 811, 815, 817, 818, 820, 821, 822, 823, 824, 825, 826, 830, 832, 835, 837, 838, 839, 841, 843, 846, 848, 849, 850, 852, 854, 855, 856, 857, 858, 859, 860, 861, 862, 864, 865, 867, 869, 873], "faster": [2, 3, 8, 10, 11, 17, 28, 29, 45, 47, 54, 59, 77, 82, 373, 446, 634, 684, 811, 814, 823, 854, 869, 872], "infer": [2, 5, 8, 10, 11, 17, 21, 31, 33, 34, 43, 45, 47, 50, 54, 55, 58, 61, 73, 77, 78, 81, 84, 123, 125, 128, 132, 133, 137, 140, 146, 155, 156, 157, 158, 159, 309, 310, 372, 375, 379, 408, 493, 507, 553, 587, 588, 626, 627, 631, 633, 636, 656, 703, 798, 799, 819, 822, 826, 827, 841, 846, 851, 861, 865, 866, 869, 871], "mmpretrain": [2, 17], "segment": [2, 17, 54, 77, 327, 328, 329, 366, 823, 828], "unet": [2, 17], "alexnet": [2, 17], "In": [2, 3, 4, 13, 15, 17, 19, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 40, 42, 47, 52, 54, 55, 61, 75, 77, 78, 84, 94, 95, 204, 211, 212, 216, 220, 237, 238, 244, 252, 253, 270, 273, 279, 281, 372, 375, 378, 396, 397, 398, 418, 459, 460, 461, 467, 469, 471, 472, 473, 474, 476, 480, 486, 487, 496, 498, 500, 532, 552, 559, 577, 628, 629, 631, 634, 636, 640, 682, 699, 700, 701, 703, 705, 706, 708, 710, 738, 809, 815, 816, 817, 820, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 837, 838, 839, 841, 842, 843, 844, 848, 849, 850, 851, 852, 856, 858, 860, 861, 862, 863, 865, 867, 868, 870, 873], "we": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 40, 41, 42, 45, 46, 47, 54, 59, 60, 61, 69, 77, 82, 83, 92, 94, 95, 115, 361, 371, 375, 459, 460, 461, 467, 469, 471, 472, 473, 476, 480, 487, 491, 496, 542, 552, 592, 614, 615, 617, 622, 623, 631, 632, 634, 635, 636, 677, 693, 699, 700, 701, 703, 705, 706, 708, 710, 785, 791, 798, 803, 809, 810, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 842, 844, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 867, 868, 872, 873, 875], "show": [2, 3, 4, 5, 9, 17, 23, 28, 29, 30, 31, 33, 40, 42, 44, 45, 576, 585, 608, 631, 809, 815, 816, 817, 823, 825, 828, 832, 837, 838, 841, 843, 852, 860, 867], "how": [2, 3, 4, 6, 8, 10, 13, 15, 17, 18, 19, 20, 21, 23, 25, 26, 28, 29, 30, 31, 33, 34, 35, 36, 40, 43, 46, 47, 48, 53, 54, 70, 76, 77, 97, 107, 108, 109, 110, 111, 112, 113, 114, 115, 237, 270, 288, 292, 297, 298, 300, 364, 374, 375, 449, 464, 489, 490, 623, 629, 785, 788, 789, 790, 791, 809, 810, 811, 813, 814, 816, 817, 819, 820, 821, 822, 824, 825, 826, 827, 828, 829, 830, 832, 833, 835, 836, 837, 838, 839, 842, 843, 844, 845, 847, 848, 849, 850, 851, 852, 856, 858, 863, 867], "written": [2, 3, 4, 17, 19, 28, 29, 42, 55, 375, 470, 816, 820, 821, 829, 832, 833, 837, 838, 842, 846, 848, 851, 852, 856, 861, 865, 867, 871, 873, 874], "xgboost": [2, 17], "paddlepaddl": [2, 17, 332, 333, 369, 816], "dinov2": [2, 5, 17], "video": [3, 6, 8, 9, 10, 13, 15, 19, 20, 21, 22, 23, 24, 25, 26, 29, 809, 810, 815, 816, 817, 820, 821, 822, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 841, 842, 844, 853, 865], "tutori": [3, 5, 6, 8, 9, 10, 13, 15, 19, 20, 21, 22, 23, 24, 25, 26, 29, 809, 817, 838, 853], "nativ": [3, 4, 5, 7, 10, 19, 20, 23, 24, 25, 26, 28, 29, 49, 50, 51, 52, 55, 72, 75, 78, 99, 103, 137, 147, 148, 154, 155, 156, 157, 158, 159, 173, 176, 191, 192, 193, 194, 204, 212, 216, 559, 561, 565, 572, 577, 595, 626, 627, 628, 631, 770, 781, 786, 798, 809, 813, 815, 826, 827, 830, 831, 834, 835, 837, 838, 839, 841, 846, 848, 849, 854, 860, 861, 862, 865, 874], "integr": [3, 4, 13, 15, 22, 29, 32, 51, 53, 54, 74, 76, 77, 149, 289, 352, 369, 384, 522, 627, 629, 809, 814, 816, 818, 819, 835, 861, 865, 867, 869, 870, 871], "three": [3, 4, 17, 23, 33, 34, 44, 54, 136, 309, 366, 375, 461, 626, 816, 817, 824, 825, 826, 828, 838, 841, 844, 845, 846, 868, 873], "major": [3, 4, 641, 744, 826, 827, 839, 841, 852, 857, 864, 867], "ml": [3, 4, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 42, 44, 47, 809, 810, 814, 838, 845, 846, 847, 849, 850, 851, 855, 857, 858, 861, 863, 864, 865, 866, 867, 870, 872, 874], "framework": [3, 4, 5, 13, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 35, 42, 44, 46, 49, 55, 167, 189, 199, 202, 213, 540, 556, 560, 592, 595, 627, 628, 631, 638, 717, 768, 770, 774, 781, 786, 793, 798, 799, 809, 812, 813, 815, 816, 819, 820, 821, 822, 823, 825, 826, 827, 828, 830, 831, 833, 834, 835, 837, 838, 841, 842, 844, 845, 846, 848, 851, 852, 853, 854, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 868, 871], "sinc": [3, 6, 9, 25, 26, 28, 29, 42, 44, 54, 77, 95, 369, 809, 811, 816, 817, 820, 821, 822, 823, 824, 825, 826, 827, 830, 837, 838, 852, 857, 867, 873], "want": [3, 5, 6, 7, 9, 10, 11, 13, 15, 17, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 41, 42, 44, 54, 69, 77, 92, 237, 270, 375, 469, 629, 791, 809, 810, 811, 815, 816, 817, 823, 825, 827, 830, 832, 834, 835, 836, 837, 841, 844, 849, 850, 851, 852, 853, 857, 861], "after": [3, 4, 5, 6, 8, 9, 10, 28, 29, 43, 54, 55, 56, 58, 62, 71, 77, 78, 79, 81, 85, 183, 284, 301, 305, 354, 364, 369, 372, 373, 375, 395, 396, 397, 398, 415, 419, 440, 470, 481, 559, 613, 616, 618, 619, 620, 627, 629, 631, 632, 633, 638, 639, 646, 647, 648, 649, 651, 653, 655, 656, 726, 734, 793, 798, 809, 815, 816, 817, 820, 822, 823, 825, 826, 828, 830, 833, 836, 839, 841, 845, 853, 860, 861, 867], "first": [3, 4, 5, 6, 9, 13, 19, 21, 22, 23, 25, 28, 29, 31, 32, 33, 42, 45, 46, 47, 50, 53, 54, 59, 61, 63, 64, 65, 67, 73, 76, 77, 78, 82, 84, 86, 88, 90, 94, 95, 99, 100, 119, 120, 134, 135, 144, 175, 183, 193, 220, 225, 227, 229, 230, 231, 232, 238, 244, 245, 246, 247, 248, 249, 255, 256, 257, 262, 263, 264, 266, 267, 270, 273, 275, 286, 287, 299, 309, 310, 325, 327, 328, 329, 331, 344, 346, 347, 348, 354, 358, 359, 364, 366, 369, 372, 373, 374, 375, 382, 384, 395, 425, 426, 427, 429, 433, 455, 465, 467, 471, 478, 481, 483, 484, 487, 495, 506, 508, 512, 520, 521, 522, 529, 534, 625, 626, 627, 628, 629, 631, 633, 634, 636, 637, 638, 641, 642, 643, 644, 660, 665, 668, 669, 670, 672, 674, 679, 681, 682, 684, 686, 688, 690, 703, 704, 707, 708, 712, 713, 714, 715, 716, 725, 726, 728, 740, 741, 742, 746, 747, 748, 751, 752, 754, 755, 770, 788, 789, 790, 791, 793, 798, 809, 811, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 827, 828, 832, 833, 834, 835, 837, 838, 841, 844, 846, 848, 849, 851, 853, 856, 857, 860, 861, 865, 867, 868, 872], "notebook": [3, 4, 6, 9, 10, 11, 13, 15, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 31, 32, 34, 43, 791, 809], "automat": [3, 6, 9, 26, 28, 29, 34, 809, 815, 816, 817, 819, 822, 823, 825, 826, 832, 834, 837, 841, 844, 845, 847, 850, 851, 853, 854, 858, 867, 870, 874], "sure": [3, 6, 8, 9, 10, 11, 28, 42, 812, 815, 816, 817, 820, 825, 830, 831, 838, 839, 841, 844, 853], "gpu": [3, 4, 5, 6, 7, 8, 9, 10, 11, 42, 44, 46, 47, 193, 195, 196, 199, 202, 204, 206, 208, 209, 212, 214, 216, 628, 807, 809, 816, 817, 825, 827, 848, 853, 865, 867, 870, 871, 872], "enabl": [3, 4, 6, 7, 8, 9, 10, 11, 23, 24, 26, 43, 54, 59, 71, 82, 100, 372, 374, 395, 453, 577, 631, 634, 677, 791, 807, 809, 816, 817, 818, 821, 824, 826, 834, 835, 836, 837, 838, 841, 842, 845, 847, 849, 851, 852, 854, 857, 860, 865, 866, 867, 868, 869, 870, 873, 874], "dm": [3, 4, 6, 8, 10, 28, 29, 40, 42], "haiku": [3, 4, 6, 8, 10, 26, 28, 29, 40, 42, 46, 786, 809, 851, 858, 861, 867], "exit": [3, 6, 9, 28, 29, 827], "download": [3, 9, 13, 15, 28, 29, 43, 44, 47, 811, 816, 823, 841, 860, 861], "imagenet": [3, 15, 43, 45, 809], "class": [3, 5, 6, 9, 11, 13, 15, 19, 28, 29, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 131, 140, 146, 162, 165, 178, 180, 181, 240, 277, 335, 357, 369, 383, 384, 392, 393, 426, 525, 526, 533, 542, 546, 559, 569, 592, 626, 627, 628, 629, 631, 633, 634, 635, 638, 639, 654, 659, 663, 669, 679, 683, 684, 686, 693, 709, 716, 727, 734, 749, 756, 760, 761, 770, 771, 778, 779, 780, 781, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 797, 798, 802, 807, 809, 815, 822, 823, 824, 826, 827, 828, 829, 833, 835, 836, 839, 840, 841, 844, 846, 847, 849, 850, 851, 854, 860, 861, 865, 867, 868, 874], "preprocess": [3, 9, 11, 28, 29, 42, 45, 860], "wget": [3, 6, 9, 42, 43, 46, 816], "raw": [3, 5, 6, 8, 9, 10, 25, 28, 29, 42, 45, 46, 71, 809, 829, 861, 868], "githubusercont": [3, 6, 9, 42, 46], "hub": [3, 6, 9, 42, 45, 47], "master": [3, 6, 9, 20, 21, 22, 30, 31, 32, 33, 34, 35, 42, 44, 45, 46, 812, 825, 867, 875], "imagenet_class": [3, 9], "txt": [3, 9, 43, 55, 816, 820, 823], "r": [3, 9, 42, 43, 54, 59, 71, 77, 82, 94, 95, 346, 361, 369, 371, 614, 632, 634, 636, 681, 710, 816, 817, 819, 836, 839, 875], "f": [3, 4, 5, 7, 8, 9, 28, 29, 41, 42, 44, 54, 61, 77, 84, 299, 316, 364, 366, 375, 471, 492, 636, 638, 703, 718, 722, 723, 724, 727, 732, 733, 809, 810, 817, 819, 824, 825, 830, 842, 846, 848, 849, 858, 863], "categori": [3, 9, 815, 820, 821, 824, 826, 830, 838, 842, 845], "strip": [3, 9, 21, 31, 857], "readlin": [3, 9, 43], "cat": [3, 5, 9, 43, 839, 844, 846, 851, 860, 861], "jpg": [3, 5, 6, 8, 9, 10, 25, 28, 29, 44, 45, 809, 861], "filenam": [3, 6, 9, 28, 29, 42, 44, 47, 55, 791, 797, 849], "3": [3, 5, 6, 7, 8, 9, 10, 11, 13, 15, 19, 20, 22, 23, 24, 25, 26, 28, 29, 40, 41, 42, 43, 44, 45, 47, 48, 50, 51, 52, 53, 54, 55, 56, 58, 59, 61, 63, 64, 65, 67, 68, 70, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 99, 100, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 120, 122, 123, 124, 125, 129, 131, 133, 134, 136, 137, 138, 139, 140, 144, 145, 146, 149, 150, 151, 152, 156, 160, 162, 170, 172, 177, 191, 193, 194, 205, 208, 211, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 300, 301, 302, 303, 304, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 325, 327, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 364, 366, 369, 370, 372, 373, 374, 375, 378, 379, 380, 382, 384, 389, 391, 392, 393, 394, 396, 399, 400, 401, 404, 405, 409, 410, 411, 414, 415, 416, 417, 419, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 433, 440, 443, 445, 448, 449, 450, 451, 452, 453, 454, 455, 457, 459, 460, 461, 462, 464, 465, 466, 467, 468, 471, 472, 473, 475, 476, 477, 478, 480, 481, 486, 487, 488, 489, 490, 491, 492, 493, 495, 496, 497, 501, 502, 503, 504, 507, 509, 510, 511, 512, 517, 518, 519, 520, 521, 522, 524, 525, 526, 527, 528, 529, 531, 534, 535, 536, 537, 538, 541, 542, 543, 544, 545, 546, 549, 550, 553, 554, 555, 557, 558, 559, 561, 562, 563, 565, 566, 568, 569, 573, 574, 587, 588, 589, 590, 594, 597, 598, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 716, 718, 719, 721, 722, 723, 724, 726, 727, 732, 733, 734, 735, 736, 737, 738, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 770, 773, 776, 789, 802, 803, 807, 809, 813, 815, 816, 820, 821, 822, 824, 825, 826, 828, 830, 831, 834, 836, 839, 841, 846, 848, 849, 850, 851, 860, 861, 874], "import": [3, 5, 7, 8, 10, 13, 15, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 42, 43, 45, 46, 47, 54, 65, 69, 73, 77, 92, 191, 192, 196, 208, 304, 384, 519, 554, 570, 628, 631, 637, 642, 713, 714, 749, 781, 798, 799, 809, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 826, 827, 828, 829, 832, 835, 836, 837, 838, 839, 840, 841, 842, 846, 848, 849, 851, 852, 853, 857, 860, 861, 862, 863, 865, 867, 870, 871, 873], "devic": [3, 5, 6, 7, 8, 9, 10, 43, 44, 47, 50, 54, 63, 71, 73, 77, 86, 99, 102, 103, 104, 123, 124, 125, 127, 128, 129, 132, 133, 134, 135, 137, 138, 139, 140, 142, 143, 144, 145, 146, 190, 191, 192, 193, 194, 195, 196, 197, 198, 203, 204, 205, 206, 208, 209, 210, 211, 212, 214, 216, 309, 310, 325, 326, 366, 379, 469, 505, 506, 508, 509, 533, 547, 548, 626, 631, 640, 735, 736, 737, 738, 768, 770, 771, 786, 788, 789, 790, 791, 792, 793, 794, 795, 807, 809, 817, 819, 822, 826, 830, 834, 835, 839, 841, 842, 844, 846, 851, 852, 853, 854, 857, 866, 867, 869, 870, 871, 872], "torchvis": [3, 8, 9, 42, 858], "transform": [3, 4, 5, 8, 9, 10, 25, 28, 29, 42, 43, 45, 54, 58, 77, 81, 372, 373, 394, 395, 400, 401, 404, 405, 406, 416, 417, 420, 437, 633, 657, 773, 776, 789, 809, 835, 841, 851, 854, 860, 861, 865, 867, 868, 869], "pil": [3, 5, 6, 8, 9, 10, 25, 28, 29, 43, 44, 45, 809, 861], "numpi": [3, 4, 5, 6, 7, 8, 10, 13, 15, 20, 23, 24, 25, 26, 28, 29, 30, 31, 33, 34, 35, 40, 41, 42, 44, 45, 46, 47, 53, 54, 55, 67, 76, 77, 78, 144, 173, 191, 196, 221, 281, 304, 325, 366, 384, 519, 526, 535, 559, 589, 592, 596, 626, 627, 628, 629, 631, 634, 644, 682, 756, 768, 770, 781, 798, 802, 803, 809, 814, 815, 816, 817, 820, 821, 822, 825, 826, 827, 830, 831, 833, 837, 839, 841, 842, 844, 846, 848, 851, 853, 854, 856, 857, 860, 861, 862, 864, 869, 874], "np": [3, 4, 5, 6, 7, 8, 10, 13, 15, 20, 23, 24, 25, 26, 28, 29, 30, 33, 34, 35, 40, 41, 42, 43, 44, 45, 47, 50, 54, 76, 77, 78, 124, 125, 126, 137, 173, 250, 254, 304, 372, 373, 400, 405, 421, 589, 626, 627, 629, 631, 638, 721, 770, 798, 802, 803, 809, 815, 821, 826, 827, 830, 833, 837, 838, 839, 841, 842, 844, 846, 848, 849, 851, 854, 862], "warn": [3, 4, 5, 6, 7, 9, 10, 11, 20, 23, 24, 25, 26, 42, 43, 44, 47, 806, 816, 817, 843, 860, 861, 862], "time": [3, 4, 5, 7, 8, 10, 26, 28, 29, 34, 42, 44, 45, 46, 54, 56, 59, 65, 77, 79, 88, 94, 95, 131, 338, 369, 372, 373, 375, 384, 401, 406, 418, 420, 441, 448, 481, 487, 519, 613, 618, 626, 632, 633, 634, 636, 637, 641, 642, 656, 659, 674, 709, 712, 713, 714, 741, 742, 746, 747, 789, 790, 791, 807, 815, 816, 817, 820, 822, 824, 825, 826, 828, 831, 833, 834, 835, 837, 838, 841, 842, 846, 849, 851, 852, 853, 856, 857, 858, 860, 861, 865, 867, 868, 871, 872, 873], "filterwarn": [3, 4], "ignor": [3, 4, 41, 49, 50, 54, 71, 77, 136, 372, 373, 375, 384, 396, 397, 398, 427, 435, 443, 483, 484, 488, 527, 626, 633, 638, 660, 726, 727, 793, 816, 823, 825, 828, 841, 852, 873], "compos": [3, 5, 8, 9, 28, 29, 42, 54, 77, 372, 386, 387, 388, 389, 816, 824, 838, 841, 860, 862, 867, 874], "resiz": [3, 5, 6, 8, 9, 42, 43, 54, 77, 372, 408, 844], "256": [3, 6, 9, 53, 78, 280, 281, 590, 633, 648, 650, 773], "centercrop": [3, 9], "224": [3, 5, 9, 13, 15, 28, 29, 42, 43, 45, 809, 861], "totensor": [3, 5, 8, 9, 42], "meanstd": [3, 5, 8, 9, 10, 11, 20, 21, 22, 23, 24, 28, 29, 30, 31, 32, 33, 34, 35, 43, 58, 63, 67, 81, 86, 90, 379, 506, 633, 640, 644, 648, 650, 651, 652, 654, 655, 736, 737, 809, 828, 862, 864], "229": [3, 9, 42, 276, 629], "225": [3, 9, 42, 44, 231, 629], "torch_img": [3, 6, 9], "unsqueez": [3, 6, 8, 9], "img": [3, 6, 9, 25, 28, 29, 42, 43, 44, 46, 809, 849, 861], "4": [3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 19, 20, 21, 22, 23, 24, 25, 26, 28, 40, 41, 42, 43, 44, 47, 48, 50, 51, 52, 53, 54, 55, 56, 58, 59, 61, 63, 64, 65, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 99, 100, 107, 108, 109, 110, 111, 112, 114, 115, 123, 124, 125, 126, 129, 131, 133, 134, 135, 136, 137, 138, 140, 144, 146, 150, 151, 152, 160, 162, 165, 170, 172, 177, 194, 195, 203, 208, 211, 217, 218, 219, 220, 221, 222, 223, 224, 225, 227, 228, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 317, 318, 325, 327, 332, 333, 335, 337, 338, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 356, 360, 364, 366, 369, 370, 372, 373, 374, 375, 378, 379, 380, 382, 384, 391, 392, 393, 394, 396, 397, 399, 400, 401, 404, 405, 409, 410, 411, 414, 415, 416, 417, 419, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 433, 437, 443, 449, 450, 451, 452, 453, 454, 455, 457, 459, 460, 461, 464, 465, 466, 467, 468, 471, 472, 473, 476, 477, 478, 480, 481, 486, 487, 488, 489, 490, 491, 493, 495, 496, 497, 501, 502, 503, 504, 507, 509, 510, 512, 517, 518, 519, 520, 521, 522, 524, 525, 526, 527, 528, 529, 537, 538, 541, 542, 543, 544, 545, 546, 549, 550, 552, 555, 557, 558, 559, 566, 573, 574, 589, 590, 591, 592, 594, 598, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 663, 664, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 689, 690, 691, 693, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 714, 716, 718, 719, 721, 722, 723, 724, 726, 727, 732, 733, 734, 735, 736, 737, 738, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 770, 773, 774, 776, 788, 789, 793, 802, 803, 809, 813, 815, 816, 822, 823, 824, 825, 826, 828, 831, 836, 839, 841, 844, 846, 848, 849, 850, 851, 858, 860, 867, 873, 874], "ipython": [3, 6, 9, 23, 24, 25, 26, 28, 29, 47], "displai": [3, 6, 9, 25, 28, 29, 42, 43, 44, 46, 47, 816, 823, 825, 830, 841, 849], "end": [3, 6, 42, 43, 54, 77, 123, 225, 281, 350, 369, 372, 374, 375, 420, 449, 471, 481, 483, 484, 626, 629, 803, 809, 816, 817, 822, 825, 831, 837, 842, 844, 845, 852, 865, 870], "seeset_default_devic": [3, 4, 5, 6, 8, 9, 10, 214, 628, 827], "set_soft_device_mod": [3, 11, 15, 215, 628, 827], "true": [3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 19, 22, 23, 25, 26, 28, 29, 33, 34, 35, 42, 43, 44, 45, 47, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 97, 99, 100, 107, 108, 109, 110, 111, 112, 113, 114, 115, 120, 122, 125, 126, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 142, 143, 144, 146, 149, 150, 151, 152, 153, 160, 162, 163, 164, 165, 168, 169, 170, 171, 172, 173, 174, 177, 189, 193, 194, 196, 197, 201, 204, 205, 207, 211, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 248, 249, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 320, 321, 322, 323, 324, 325, 326, 330, 331, 332, 333, 334, 335, 337, 339, 347, 348, 353, 354, 355, 356, 357, 358, 359, 360, 366, 369, 370, 372, 373, 374, 375, 378, 384, 386, 387, 388, 389, 391, 392, 393, 395, 396, 397, 398, 399, 400, 408, 409, 410, 411, 415, 416, 418, 419, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 433, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 459, 460, 461, 465, 466, 467, 468, 469, 471, 472, 473, 476, 477, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 506, 511, 512, 518, 519, 520, 521, 522, 524, 525, 526, 527, 528, 529, 531, 534, 535, 537, 538, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 553, 555, 557, 558, 559, 561, 562, 563, 565, 566, 573, 574, 575, 578, 581, 582, 584, 585, 587, 588, 589, 590, 592, 594, 596, 597, 599, 604, 605, 607, 608, 610, 613, 614, 616, 618, 619, 620, 621, 623, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 655, 656, 657, 658, 659, 660, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 721, 722, 723, 725, 726, 727, 728, 732, 733, 735, 736, 737, 738, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 768, 770, 773, 774, 775, 776, 778, 789, 790, 791, 792, 793, 795, 798, 800, 802, 803, 807, 809, 813, 816, 822, 824, 825, 826, 827, 828, 830, 831, 833, 834, 835, 837, 838, 839, 841, 843, 844, 846, 849, 850, 851, 860, 861], "set_backend": [3, 4, 6, 9, 11, 19, 20, 21, 22, 23, 24, 28, 29, 31, 32, 33, 34, 35, 41, 43, 44, 45, 53, 55, 69, 76, 78, 164, 173, 191, 192, 196, 206, 208, 213, 221, 535, 559, 627, 628, 631, 634, 637, 682, 713, 714, 798, 809, 820, 822, 826, 827, 834, 835, 836, 846, 848, 851, 860, 861, 862], "ivy_model": [3, 4, 6, 9, 45], "ivy_alexnet": 3, "order": [3, 22, 32, 34, 42, 45, 47, 50, 54, 55, 58, 59, 61, 65, 66, 71, 77, 81, 82, 84, 88, 89, 94, 99, 100, 124, 125, 136, 144, 225, 244, 287, 325, 346, 366, 369, 372, 373, 375, 378, 382, 418, 423, 426, 427, 428, 429, 430, 434, 440, 442, 445, 448, 471, 472, 473, 478, 479, 491, 498, 499, 500, 503, 512, 626, 629, 633, 634, 636, 637, 641, 642, 643, 647, 648, 649, 650, 651, 652, 655, 669, 670, 675, 684, 685, 689, 691, 700, 703, 712, 713, 744, 746, 747, 748, 749, 750, 752, 753, 770, 792, 794, 803, 809, 815, 816, 817, 821, 822, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 838, 839, 840, 841, 842, 843, 844, 849, 851, 852, 856, 863, 866, 867, 868, 870, 873], "quick": [3, 17, 29, 817, 819, 839, 850], "call": [3, 8, 13, 15, 19, 21, 22, 23, 24, 25, 28, 29, 31, 32, 33, 34, 35, 42, 46, 54, 69, 74, 77, 92, 94, 100, 119, 169, 170, 210, 373, 384, 440, 526, 577, 583, 598, 614, 615, 617, 625, 628, 631, 632, 634, 638, 682, 715, 721, 725, 726, 770, 781, 789, 790, 791, 793, 798, 803, 807, 809, 815, 816, 817, 821, 822, 824, 825, 826, 827, 828, 829, 830, 831, 833, 834, 835, 837, 838, 839, 841, 842, 844, 846, 848, 849, 850, 851, 852, 857, 860, 861, 862, 867, 868, 871], "trace_graph": [3, 4, 6, 9, 21, 22, 23, 24, 28, 29, 31, 32, 33, 34, 35, 36, 45, 791, 809, 846, 851, 859], "take": [3, 9, 19, 26, 28, 29, 34, 40, 42, 45, 54, 59, 61, 67, 77, 84, 94, 119, 120, 122, 138, 277, 284, 299, 364, 372, 373, 375, 392, 400, 405, 410, 420, 429, 443, 464, 471, 490, 520, 521, 625, 626, 629, 633, 634, 636, 637, 660, 674, 678, 703, 714, 754, 773, 781, 788, 789, 802, 807, 809, 810, 815, 816, 817, 820, 821, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 834, 837, 838, 839, 841, 844, 846, 848, 850, 851, 852, 853, 858, 860, 861, 864, 865, 873], "moment": [3, 54, 56, 77, 79, 373, 430, 612, 613, 618, 632, 793, 807, 815, 822, 852, 860, 861], "one": [3, 5, 7, 8, 10, 13, 15, 17, 18, 21, 22, 25, 26, 28, 29, 31, 32, 44, 45, 46, 50, 54, 55, 58, 59, 61, 64, 65, 67, 71, 73, 76, 77, 78, 79, 81, 82, 84, 85, 87, 88, 89, 90, 94, 123, 126, 136, 138, 139, 140, 150, 152, 210, 231, 237, 244, 245, 262, 268, 269, 270, 289, 299, 309, 312, 313, 331, 337, 340, 341, 344, 345, 348, 349, 350, 352, 353, 360, 364, 366, 369, 370, 372, 373, 374, 375, 378, 379, 384, 394, 396, 400, 401, 404, 405, 408, 416, 421, 423, 432, 441, 455, 459, 460, 461, 465, 471, 472, 473, 478, 480, 485, 488, 498, 499, 500, 505, 510, 520, 521, 524, 525, 526, 527, 528, 529, 531, 569, 573, 574, 576, 594, 596, 597, 610, 612, 613, 616, 618, 619, 620, 621, 626, 627, 628, 629, 631, 632, 633, 634, 636, 639, 641, 642, 644, 647, 648, 649, 650, 651, 652, 655, 672, 674, 675, 679, 681, 690, 691, 699, 700, 701, 704, 706, 710, 734, 741, 744, 746, 747, 748, 749, 754, 756, 773, 775, 792, 795, 798, 803, 806, 809, 815, 816, 817, 818, 820, 821, 822, 823, 824, 826, 827, 828, 831, 832, 833, 834, 835, 836, 837, 838, 839, 841, 843, 844, 845, 848, 849, 851, 852, 853, 854, 857, 858, 861, 867, 868, 870, 873], "cost": [3, 56, 79, 612, 613, 616, 618, 619, 620, 632, 637, 712, 713, 714, 803, 826, 844, 865], "arg": [3, 6, 7, 8, 9, 13, 15, 23, 24, 26, 28, 29, 33, 34, 35, 46, 49, 71, 93, 103, 119, 200, 210, 598, 625, 626, 628, 631, 768, 770, 785, 786, 789, 790, 791, 795, 798, 802, 807, 809, 821, 826, 827, 830, 836, 837, 838, 844, 846, 850, 860, 861, 862], "asarrai": [3, 4, 6, 8, 9, 43, 50, 54, 55, 66, 73, 77, 78, 89, 124, 382, 511, 512, 542, 553, 557, 558, 588, 589, 590, 626, 631, 633, 642, 643, 647, 747, 751, 830, 835, 838, 839], "cuda": [3, 4, 5, 6, 7, 8, 9, 10, 11, 19, 28, 43, 44, 47, 50, 54, 63, 73, 77, 86, 134, 135, 138, 190, 191, 192, 208, 379, 505, 506, 508, 509, 626, 628, 634, 640, 685, 735, 736, 737, 738, 788, 789, 790, 791, 792, 793, 794, 807, 809, 846, 852, 854, 872], "7": [3, 5, 6, 7, 8, 9, 10, 11, 13, 15, 21, 23, 24, 25, 26, 40, 42, 43, 44, 46, 47, 48, 50, 51, 53, 54, 55, 56, 58, 59, 60, 61, 63, 64, 65, 66, 67, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 99, 100, 109, 110, 111, 112, 123, 124, 125, 134, 137, 138, 156, 162, 165, 195, 217, 220, 223, 227, 228, 230, 231, 232, 233, 235, 237, 238, 239, 240, 241, 243, 244, 247, 248, 249, 254, 255, 256, 257, 258, 259, 260, 261, 262, 265, 267, 268, 269, 270, 272, 273, 274, 276, 277, 280, 281, 282, 284, 287, 288, 290, 291, 293, 294, 296, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 315, 316, 327, 331, 335, 337, 338, 346, 347, 348, 350, 352, 353, 360, 364, 366, 369, 370, 372, 373, 374, 375, 380, 384, 391, 392, 393, 394, 399, 400, 404, 405, 409, 414, 415, 416, 417, 419, 422, 425, 438, 450, 451, 452, 453, 455, 456, 459, 460, 461, 465, 467, 471, 476, 477, 480, 481, 486, 487, 489, 490, 492, 493, 496, 497, 507, 509, 510, 517, 520, 521, 523, 524, 529, 535, 537, 538, 542, 543, 546, 557, 558, 559, 566, 573, 574, 589, 592, 612, 613, 615, 616, 617, 618, 619, 620, 623, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 647, 648, 650, 652, 654, 655, 656, 657, 663, 665, 666, 667, 668, 670, 671, 672, 674, 676, 679, 681, 682, 684, 685, 686, 688, 689, 690, 693, 694, 695, 696, 699, 700, 705, 707, 708, 710, 715, 716, 723, 727, 734, 735, 736, 737, 738, 740, 745, 746, 748, 750, 751, 753, 754, 755, 756, 758, 760, 762, 763, 773, 816, 817, 822, 824, 825, 828, 834, 837, 841], "output": [3, 4, 5, 6, 7, 9, 19, 25, 26, 28, 29, 41, 42, 43, 45, 48, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 99, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 145, 146, 149, 151, 176, 210, 211, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 314, 315, 319, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 366, 369, 371, 372, 373, 374, 375, 378, 379, 380, 382, 384, 385, 386, 387, 388, 389, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 404, 405, 406, 408, 409, 410, 411, 414, 416, 417, 418, 420, 421, 423, 424, 425, 427, 429, 432, 433, 435, 438, 439, 440, 441, 443, 444, 447, 449, 450, 451, 452, 453, 454, 455, 456, 457, 464, 465, 466, 469, 471, 472, 473, 474, 475, 478, 479, 480, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 512, 517, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 536, 537, 538, 542, 543, 544, 546, 550, 559, 566, 573, 574, 575, 599, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 663, 664, 665, 666, 667, 668, 670, 671, 672, 673, 674, 675, 677, 678, 679, 680, 681, 682, 683, 685, 686, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 706, 707, 708, 709, 711, 728, 734, 735, 736, 737, 738, 740, 741, 742, 743, 744, 745, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 768, 773, 788, 789, 802, 803, 809, 811, 816, 817, 819, 820, 821, 823, 824, 826, 827, 828, 829, 832, 833, 834, 835, 836, 837, 838, 839, 841, 842, 843, 846, 848, 850, 851, 852, 854, 860, 861, 868], "softmax": [3, 5, 9, 13, 26, 28, 29, 44, 48, 58, 69, 70, 81, 374, 451, 623, 633, 660, 663, 785, 809], "pass": [3, 5, 6, 8, 9, 10, 11, 13, 15, 19, 26, 28, 29, 35, 41, 42, 44, 46, 47, 53, 54, 69, 71, 76, 77, 92, 100, 119, 120, 122, 154, 176, 191, 210, 225, 271, 372, 374, 375, 378, 379, 384, 418, 451, 471, 498, 500, 505, 525, 526, 559, 625, 627, 628, 629, 631, 637, 712, 713, 768, 770, 774, 781, 786, 790, 791, 793, 794, 798, 802, 807, 809, 813, 815, 817, 820, 821, 822, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 841, 844, 852, 860, 861, 862, 865], "argsort": [3, 9, 66, 89, 643, 752, 838], "descend": [3, 9, 66, 89, 634, 643, 684, 685, 750, 753], "top": [3, 9, 12, 17, 26, 28, 29, 42, 43, 54, 61, 77, 316, 366, 374, 375, 449, 491, 542, 631, 697, 809, 816, 817, 826, 831, 838, 840, 841, 844, 849, 850, 867, 871], "logit": [3, 4, 5, 6, 9, 42, 43, 44, 45, 54, 60, 77, 83, 364, 379, 505, 508, 635, 693, 695, 785, 809, 860], "gather": [3, 9, 42, 54, 55, 77, 78, 327, 328, 329, 366, 550, 552, 631, 874], "print": [3, 4, 5, 7, 8, 9, 11, 13, 15, 19, 20, 22, 26, 28, 29, 30, 40, 41, 42, 43, 44, 45, 47, 48, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 99, 100, 107, 109, 110, 111, 112, 113, 114, 115, 116, 119, 120, 122, 123, 126, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 144, 145, 146, 149, 150, 151, 152, 154, 160, 161, 162, 163, 164, 167, 169, 170, 172, 177, 189, 190, 194, 196, 197, 198, 199, 201, 202, 203, 204, 205, 208, 209, 211, 212, 213, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 248, 249, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 300, 302, 303, 304, 306, 307, 308, 310, 317, 318, 325, 327, 331, 332, 333, 335, 350, 351, 356, 360, 364, 366, 369, 372, 373, 374, 375, 378, 384, 391, 392, 393, 394, 396, 397, 399, 401, 404, 406, 409, 410, 411, 414, 416, 417, 422, 425, 427, 429, 430, 440, 447, 450, 451, 452, 453, 454, 455, 456, 462, 464, 466, 477, 481, 486, 487, 489, 490, 491, 493, 497, 501, 502, 504, 519, 520, 521, 522, 529, 531, 533, 534, 535, 536, 537, 538, 541, 542, 543, 544, 545, 546, 549, 550, 552, 553, 554, 555, 557, 558, 559, 561, 562, 563, 565, 569, 570, 572, 573, 574, 578, 579, 580, 583, 586, 587, 588, 589, 590, 592, 594, 596, 597, 598, 602, 603, 606, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 654, 655, 656, 657, 663, 664, 665, 666, 668, 670, 671, 672, 673, 674, 675, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 690, 691, 693, 694, 695, 696, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 713, 714, 715, 716, 718, 719, 721, 722, 723, 724, 726, 727, 732, 733, 734, 735, 736, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 798, 802, 803, 807, 809, 816, 817, 824, 826, 828, 839, 841, 843, 846, 848, 849, 850, 860, 862], "indic": [3, 9, 50, 54, 55, 58, 59, 61, 62, 64, 65, 66, 71, 73, 74, 77, 78, 81, 82, 84, 85, 87, 88, 89, 94, 97, 124, 125, 138, 142, 144, 165, 169, 170, 281, 325, 326, 327, 346, 366, 369, 372, 373, 374, 375, 380, 382, 391, 392, 393, 395, 399, 400, 401, 405, 406, 409, 410, 411, 412, 416, 417, 427, 448, 451, 459, 460, 461, 464, 467, 469, 471, 472, 473, 476, 480, 486, 487, 489, 490, 491, 493, 495, 496, 510, 511, 512, 534, 549, 550, 552, 573, 574, 578, 611, 614, 615, 626, 629, 631, 632, 633, 634, 636, 638, 639, 640, 641, 642, 643, 647, 649, 650, 651, 652, 655, 660, 677, 691, 699, 700, 701, 703, 704, 705, 706, 708, 710, 715, 718, 720, 722, 723, 724, 726, 730, 731, 732, 733, 734, 735, 741, 742, 743, 744, 746, 748, 750, 752, 753, 770, 771, 773, 775, 789, 795, 802, 803, 805, 816, 825, 833, 836, 838, 851, 860], "to_list": [3, 9, 55, 78, 631], "arrai": [3, 4, 5, 7, 9, 10, 11, 19, 20, 21, 23, 24, 25, 26, 28, 29, 30, 31, 33, 34, 35, 40, 41, 42, 43, 44, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 94, 95, 97, 100, 103, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 119, 120, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 155, 156, 157, 158, 159, 160, 162, 165, 166, 168, 169, 170, 172, 174, 175, 176, 177, 183, 193, 194, 198, 203, 205, 207, 210, 211, 215, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 364, 366, 369, 370, 372, 373, 374, 375, 378, 379, 380, 382, 384, 385, 386, 387, 388, 389, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 404, 405, 406, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 534, 535, 537, 538, 541, 542, 543, 544, 545, 546, 549, 550, 551, 552, 553, 555, 556, 557, 558, 559, 561, 562, 563, 564, 565, 566, 568, 569, 571, 572, 573, 574, 575, 577, 578, 584, 585, 587, 588, 589, 590, 591, 592, 594, 595, 596, 597, 598, 599, 607, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 721, 722, 723, 724, 727, 728, 732, 733, 734, 735, 736, 737, 738, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 768, 770, 775, 781, 788, 789, 790, 791, 794, 798, 802, 803, 805, 809, 813, 815, 816, 817, 819, 822, 823, 824, 826, 827, 828, 829, 830, 831, 834, 835, 836, 837, 838, 839, 841, 842, 843, 844, 845, 846, 847, 849, 850, 851, 852, 854, 861, 862, 865, 866, 867, 869, 873, 874], "282": [3, 9], "281": [3, 9, 42, 44], "285": [3, 9, 77], "dev": [3, 8, 9, 10, 11, 21, 42, 44, 47, 52, 71, 75, 198, 205, 628, 816, 827, 831, 834, 848, 850], "64773697": 3, "29496649": 3, "04526037": 3, "39": [3, 4, 5, 7, 8, 9, 10, 11, 13, 15, 19, 20, 23, 24, 25, 26, 40, 42, 43, 44, 45, 47, 48, 53, 54, 59, 63, 70, 76, 77, 79, 82, 86, 109, 223, 258, 260, 262, 292, 293, 296, 364, 372, 384, 392, 394, 411, 414, 520, 612, 623, 629, 632, 634, 644, 672, 679, 737, 756], "tiger": [3, 9], "tabbi": [3, 5, 9], "egyptian": [3, 9], "check": [3, 4, 8, 10, 11, 13, 15, 17, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 40, 45, 47, 49, 51, 55, 59, 71, 74, 78, 82, 115, 153, 154, 163, 164, 167, 169, 170, 171, 174, 189, 196, 197, 204, 216, 535, 545, 547, 548, 555, 561, 562, 563, 564, 565, 581, 592, 604, 610, 623, 627, 628, 631, 634, 638, 670, 671, 677, 715, 725, 726, 727, 768, 775, 802, 803, 809, 810, 811, 814, 815, 816, 817, 818, 820, 824, 825, 827, 828, 830, 835, 837, 838, 839, 840, 841, 842, 843, 845, 846, 848, 849, 850, 853, 860], "confirm": [3, 43, 812, 815], "same": [3, 4, 5, 6, 7, 8, 9, 10, 15, 20, 21, 23, 24, 25, 26, 28, 31, 33, 35, 40, 41, 44, 45, 47, 48, 49, 50, 51, 53, 54, 55, 56, 58, 59, 61, 63, 65, 66, 67, 71, 73, 74, 76, 77, 78, 79, 81, 82, 84, 86, 88, 90, 94, 95, 96, 97, 98, 99, 113, 123, 128, 133, 135, 136, 138, 140, 142, 143, 144, 146, 149, 150, 151, 162, 165, 210, 217, 218, 219, 220, 222, 224, 228, 230, 233, 237, 243, 244, 250, 270, 272, 274, 277, 279, 280, 281, 290, 298, 310, 324, 325, 326, 327, 328, 329, 332, 333, 335, 343, 359, 364, 366, 369, 372, 373, 374, 375, 378, 380, 382, 384, 391, 392, 393, 409, 410, 411, 412, 414, 415, 416, 417, 419, 426, 431, 432, 442, 443, 444, 445, 446, 448, 449, 451, 454, 464, 466, 481, 489, 490, 493, 498, 500, 510, 512, 517, 518, 519, 520, 521, 522, 523, 529, 566, 621, 626, 627, 628, 629, 631, 632, 633, 634, 636, 637, 638, 640, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 660, 663, 664, 665, 666, 668, 669, 670, 671, 673, 674, 676, 678, 679, 680, 681, 682, 683, 684, 685, 688, 690, 697, 700, 701, 703, 704, 706, 707, 712, 713, 728, 738, 746, 747, 748, 749, 750, 751, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 768, 770, 773, 774, 775, 781, 789, 802, 809, 816, 817, 821, 822, 824, 825, 826, 827, 828, 830, 832, 833, 834, 835, 836, 837, 838, 839, 841, 842, 844, 846, 848, 850, 851, 852, 856, 858, 860, 862, 864, 866, 873, 874], "8": [3, 5, 8, 9, 10, 11, 21, 23, 24, 25, 26, 40, 42, 44, 47, 51, 53, 54, 55, 56, 58, 59, 60, 61, 63, 64, 65, 66, 67, 74, 76, 77, 78, 79, 81, 82, 83, 84, 86, 87, 88, 89, 90, 99, 100, 107, 122, 132, 133, 137, 140, 146, 155, 157, 158, 159, 162, 170, 195, 212, 220, 222, 223, 227, 228, 231, 232, 233, 235, 241, 244, 248, 249, 255, 256, 257, 261, 262, 265, 266, 268, 269, 270, 275, 276, 279, 280, 281, 284, 285, 288, 289, 290, 294, 300, 302, 303, 304, 306, 307, 309, 310, 327, 331, 343, 346, 348, 349, 350, 353, 360, 364, 366, 369, 372, 373, 374, 375, 384, 391, 392, 393, 394, 399, 400, 404, 405, 409, 410, 414, 415, 419, 422, 425, 433, 450, 451, 452, 454, 455, 456, 457, 459, 460, 461, 465, 467, 471, 476, 477, 486, 487, 490, 491, 492, 493, 496, 497, 507, 509, 521, 524, 525, 529, 535, 536, 542, 543, 546, 549, 553, 557, 558, 559, 561, 562, 565, 568, 573, 574, 578, 588, 589, 590, 591, 592, 612, 615, 617, 619, 620, 622, 623, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 638, 640, 641, 642, 643, 644, 647, 651, 652, 654, 655, 656, 657, 660, 666, 667, 668, 670, 671, 672, 674, 675, 676, 679, 681, 682, 684, 685, 686, 688, 689, 690, 691, 693, 694, 695, 696, 700, 707, 708, 710, 716, 723, 727, 735, 736, 737, 738, 740, 745, 746, 748, 750, 751, 753, 755, 756, 758, 760, 762, 763, 773, 776, 789, 816, 824, 825, 828, 841, 845, 849], "torch_alexnet": 3, "alexnet_weight": 3, "weight": [3, 11, 13, 15, 28, 29, 42, 43, 54, 56, 58, 60, 77, 79, 81, 83, 94, 95, 312, 316, 350, 366, 369, 372, 373, 384, 399, 432, 517, 519, 522, 612, 613, 616, 618, 619, 620, 632, 633, 635, 637, 657, 658, 659, 660, 663, 693, 714, 775, 788, 789, 791, 793, 807, 809, 824, 834, 841, 846, 850, 851, 866], "imagenet1k_v1": [3, 9], "dropout": [3, 58, 81, 372, 396, 397, 398, 633, 658, 660, 663, 789, 849], "9": [3, 4, 5, 6, 8, 9, 10, 11, 21, 23, 24, 25, 26, 40, 42, 44, 47, 50, 51, 53, 54, 55, 56, 58, 59, 61, 63, 65, 66, 67, 70, 74, 76, 77, 78, 79, 81, 82, 84, 86, 88, 89, 90, 99, 100, 107, 123, 124, 125, 137, 155, 156, 157, 158, 159, 162, 165, 218, 220, 222, 223, 226, 227, 228, 231, 232, 237, 238, 239, 244, 251, 257, 258, 259, 261, 265, 266, 268, 269, 270, 273, 275, 276, 280, 281, 284, 285, 286, 291, 297, 300, 301, 302, 339, 342, 346, 352, 353, 360, 364, 369, 370, 372, 374, 375, 382, 384, 391, 392, 393, 394, 399, 400, 404, 405, 409, 410, 414, 415, 419, 433, 450, 452, 454, 455, 459, 460, 461, 467, 471, 476, 486, 487, 488, 489, 491, 493, 496, 507, 509, 512, 521, 538, 542, 543, 544, 546, 549, 557, 558, 561, 562, 565, 573, 574, 588, 589, 591, 612, 613, 614, 618, 619, 623, 626, 627, 629, 631, 632, 633, 634, 636, 638, 640, 641, 642, 643, 644, 647, 648, 649, 655, 656, 657, 665, 666, 668, 670, 671, 672, 674, 675, 676, 679, 681, 682, 684, 685, 686, 688, 689, 690, 696, 700, 704, 705, 707, 708, 710, 715, 716, 721, 723, 726, 727, 735, 736, 737, 738, 740, 745, 746, 748, 750, 751, 753, 755, 756, 758, 760, 762, 763, 773, 793, 824, 826, 828, 836, 841, 849, 850, 863], "torch_output": [3, 6, 9], "dim": [3, 9, 44, 54, 71, 73, 77, 138, 310, 366, 372, 375, 390, 400, 401, 402, 405, 413, 471, 493, 626, 633, 646, 653, 654, 659, 775, 789, 809, 826, 838, 839, 844], "torch_class": [3, 9], "torch_logit": [3, 9], "tensor": [3, 4, 8, 9, 10, 13, 15, 19, 20, 23, 24, 26, 28, 29, 30, 34, 40, 42, 50, 53, 54, 55, 58, 60, 61, 63, 71, 73, 76, 77, 78, 81, 82, 83, 84, 86, 93, 126, 134, 135, 138, 144, 160, 176, 268, 269, 299, 316, 320, 321, 322, 323, 324, 325, 334, 357, 364, 366, 369, 372, 373, 374, 375, 384, 385, 391, 392, 395, 399, 408, 409, 410, 411, 418, 420, 422, 429, 430, 431, 432, 435, 437, 439, 441, 442, 445, 447, 448, 449, 451, 454, 455, 471, 474, 479, 482, 483, 484, 485, 488, 493, 494, 525, 530, 573, 574, 626, 627, 629, 631, 633, 634, 635, 636, 640, 656, 659, 660, 675, 686, 693, 703, 705, 735, 789, 798, 803, 807, 809, 821, 822, 826, 827, 831, 833, 834, 837, 838, 839, 841, 842, 844, 846, 848, 849, 851, 852, 854, 856, 860, 861, 862, 864, 865, 868, 870, 871, 874], "6477": 3, "2950": 3, "0453": 3, "grad_fn": [3, 9, 26, 40, 615, 622, 632, 849], "lt": [3, 5, 9, 13, 15, 19, 23, 24, 25, 26, 40, 42, 44, 100], "takebackward0": [3, 9], "gt": [3, 5, 7, 9, 13, 15, 19, 23, 24, 25, 26, 40, 42, 44, 47, 100, 839, 846], "great": [3, 5, 6, 809, 817, 841, 846, 848, 857, 858, 873], "With": [3, 21, 31, 40, 48, 50, 51, 53, 54, 55, 56, 58, 59, 61, 64, 67, 73, 74, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 99, 100, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 124, 125, 126, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 145, 146, 149, 150, 151, 152, 154, 160, 161, 162, 165, 172, 177, 178, 179, 180, 181, 191, 194, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 248, 249, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 332, 333, 335, 337, 340, 341, 345, 348, 349, 350, 352, 353, 356, 364, 366, 369, 372, 373, 374, 375, 384, 394, 396, 397, 404, 416, 423, 424, 425, 427, 428, 429, 440, 443, 455, 471, 472, 473, 475, 478, 480, 481, 487, 489, 491, 493, 495, 510, 519, 520, 521, 522, 524, 525, 526, 527, 528, 529, 531, 535, 536, 537, 538, 541, 542, 543, 544, 545, 549, 550, 553, 555, 557, 558, 559, 573, 574, 588, 589, 590, 592, 594, 596, 597, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 654, 655, 656, 657, 663, 664, 665, 666, 667, 668, 670, 671, 673, 674, 675, 676, 677, 678, 681, 682, 683, 684, 685, 686, 688, 689, 690, 693, 695, 696, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 713, 714, 715, 716, 718, 721, 722, 723, 724, 726, 727, 732, 733, 734, 735, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 816, 826, 828, 838, 841, 844, 846, 857, 858, 860, 867, 870], "simpl": [3, 5, 13, 17, 18, 20, 23, 25, 26, 27, 28, 29, 30, 31, 33, 34, 40, 42, 44, 47, 54, 77, 384, 519, 775, 789, 803, 809, 815, 816, 817, 821, 823, 824, 826, 827, 828, 829, 834, 837, 838, 841, 842, 844, 848, 850, 851, 852, 854, 856, 860, 861, 866, 867, 868, 869], "chang": [3, 4, 11, 19, 29, 42, 43, 44, 48, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 97, 99, 107, 108, 109, 110, 111, 112, 113, 114, 115, 125, 126, 128, 130, 131, 133, 135, 136, 137, 138, 140, 142, 143, 146, 150, 151, 152, 165, 169, 170, 177, 194, 211, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 300, 301, 302, 303, 304, 306, 307, 308, 309, 310, 311, 312, 314, 315, 316, 319, 326, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 369, 372, 375, 384, 391, 392, 393, 394, 396, 397, 398, 400, 404, 405, 406, 409, 410, 411, 415, 416, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 433, 437, 438, 439, 440, 441, 442, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 504, 506, 507, 508, 509, 510, 511, 512, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 534, 535, 537, 538, 541, 542, 543, 544, 545, 546, 549, 550, 553, 555, 557, 558, 559, 561, 562, 563, 565, 566, 568, 573, 574, 588, 589, 590, 591, 592, 594, 596, 597, 610, 612, 613, 616, 618, 619, 620, 621, 623, 629, 636, 638, 647, 648, 649, 650, 651, 652, 655, 656, 657, 659, 663, 664, 665, 667, 668, 669, 670, 671, 672, 673, 674, 675, 680, 681, 682, 684, 691, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 716, 727, 732, 734, 735, 736, 737, 738, 740, 741, 742, 743, 744, 745, 746, 747, 748, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 763, 764, 765, 770, 809, 815, 816, 817, 818, 820, 822, 823, 824, 825, 826, 828, 829, 831, 832, 838, 839, 840, 841, 842, 843, 844, 846, 850, 852, 853, 858, 860, 870, 873], "backend": [3, 5, 7, 10, 20, 21, 22, 23, 24, 25, 26, 29, 31, 32, 34, 49, 50, 54, 55, 59, 71, 77, 78, 82, 99, 126, 163, 164, 167, 189, 196, 197, 199, 202, 213, 332, 333, 369, 373, 425, 427, 526, 535, 547, 548, 556, 559, 560, 570, 577, 592, 595, 626, 627, 628, 631, 634, 682, 684, 768, 770, 771, 773, 774, 775, 778, 780, 781, 786, 790, 791, 793, 797, 798, 809, 813, 814, 816, 817, 819, 820, 821, 825, 827, 828, 829, 830, 831, 833, 834, 835, 837, 838, 839, 841, 843, 844, 845, 847, 848, 851, 854, 856, 860, 861, 862, 867, 870, 873, 874], "let": [3, 4, 5, 6, 8, 10, 11, 13, 15, 19, 20, 21, 23, 24, 25, 26, 28, 29, 30, 31, 33, 34, 35, 40, 42, 43, 45, 47, 55, 67, 78, 217, 218, 219, 220, 223, 226, 235, 238, 240, 242, 251, 252, 253, 258, 260, 273, 281, 283, 284, 288, 549, 550, 629, 631, 634, 644, 688, 758, 760, 761, 762, 763, 809, 815, 818, 821, 823, 824, 825, 826, 827, 828, 829, 830, 831, 838, 839, 841, 842, 843, 844, 846, 848, 849, 850, 851, 858, 860, 861, 874], "u": [3, 8, 42, 44, 46, 47, 54, 59, 73, 77, 82, 94, 95, 135, 373, 437, 444, 446, 634, 638, 664, 670, 671, 684, 723, 809, 810, 816, 817, 819, 824, 825, 832, 835, 837, 838, 839, 840, 841, 842, 844, 850, 852, 857], "differ": [3, 4, 8, 10, 11, 13, 17, 18, 22, 23, 24, 28, 29, 32, 33, 34, 35, 53, 54, 55, 59, 67, 71, 77, 78, 90, 99, 100, 109, 112, 162, 220, 237, 244, 245, 270, 286, 331, 338, 343, 344, 348, 369, 372, 373, 375, 384, 406, 417, 442, 448, 465, 472, 473, 487, 520, 521, 529, 549, 550, 623, 627, 629, 631, 633, 634, 636, 644, 656, 657, 672, 682, 697, 707, 754, 755, 760, 762, 763, 768, 773, 781, 790, 791, 809, 813, 814, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 833, 834, 836, 837, 838, 839, 841, 842, 844, 846, 847, 848, 849, 850, 851, 852, 853, 856, 857, 858, 860, 861, 862, 864, 865, 866, 867, 870, 873, 874], "ll": [3, 5, 6, 8, 10, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 43, 809, 810, 812, 813, 815, 816, 817, 818, 823, 828, 831, 832, 836, 837, 849, 853, 858, 860, 861], "try": [3, 5, 20, 30, 40, 43, 47, 71, 598, 631, 788, 798, 809, 815, 816, 817, 820, 821, 824, 825, 826, 830, 832, 837, 839, 846, 848, 852, 855, 857, 858, 862], "10": [3, 5, 6, 9, 10, 11, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 33, 34, 35, 40, 42, 44, 46, 47, 50, 53, 54, 55, 56, 58, 59, 63, 65, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 100, 123, 133, 134, 135, 219, 227, 228, 231, 232, 235, 242, 247, 249, 255, 257, 259, 270, 276, 283, 284, 289, 298, 331, 332, 333, 336, 340, 341, 343, 345, 346, 348, 349, 350, 352, 353, 357, 360, 369, 372, 375, 384, 391, 392, 393, 394, 404, 409, 410, 414, 415, 416, 417, 419, 449, 461, 464, 467, 471, 476, 486, 487, 496, 517, 520, 521, 524, 526, 529, 542, 543, 544, 546, 549, 550, 552, 557, 558, 566, 574, 578, 583, 589, 591, 603, 606, 618, 626, 629, 631, 632, 633, 634, 636, 638, 639, 640, 641, 642, 643, 644, 647, 648, 650, 656, 666, 668, 672, 673, 674, 675, 676, 679, 684, 685, 686, 688, 690, 700, 705, 706, 707, 708, 710, 721, 723, 726, 734, 735, 736, 737, 738, 744, 746, 752, 754, 755, 756, 757, 759, 760, 762, 763, 773, 775, 793, 809, 813, 816, 820, 824, 825, 826, 828, 831, 836, 839, 841, 846, 848, 849, 857, 862, 872], "tf": [3, 5, 6, 7, 10, 13, 15, 20, 23, 24, 26, 28, 29, 30, 31, 33, 35, 40, 45, 46, 786, 809, 821, 826, 827, 833, 837, 838, 841, 842, 844, 846, 851, 852, 854, 860, 861, 862, 867], "onc": [3, 6, 28, 29, 40, 42, 59, 63, 82, 86, 210, 373, 426, 628, 634, 640, 669, 670, 671, 684, 735, 809, 815, 816, 817, 824, 825, 826, 827, 828, 831, 832, 837, 838, 841, 844, 846, 849, 852, 853, 858, 860], "set": [3, 5, 13, 15, 21, 28, 29, 31, 34, 42, 43, 44, 45, 46, 49, 54, 55, 58, 59, 64, 66, 67, 71, 77, 78, 81, 82, 87, 89, 90, 112, 115, 122, 142, 144, 178, 179, 180, 181, 182, 193, 206, 207, 208, 209, 210, 225, 325, 337, 353, 355, 360, 366, 369, 370, 372, 373, 374, 375, 384, 395, 416, 420, 424, 428, 431, 449, 454, 455, 471, 481, 484, 491, 519, 524, 525, 526, 527, 528, 529, 531, 535, 542, 554, 559, 575, 576, 577, 579, 580, 581, 582, 583, 584, 585, 586, 592, 600, 623, 625, 626, 627, 628, 629, 631, 633, 634, 638, 640, 641, 643, 644, 656, 663, 665, 675, 677, 680, 683, 684, 715, 722, 725, 726, 727, 732, 733, 739, 741, 742, 746, 748, 749, 750, 753, 761, 763, 770, 773, 774, 775, 776, 781, 788, 789, 791, 793, 798, 803, 806, 807, 809, 810, 817, 819, 820, 821, 823, 824, 825, 826, 827, 828, 830, 832, 834, 835, 837, 838, 839, 841, 842, 844, 846, 848, 849, 856, 859, 860, 861, 865, 866, 867, 868, 869, 871, 874], "our": [3, 5, 8, 10, 11, 13, 15, 17, 20, 21, 23, 24, 25, 28, 29, 30, 31, 33, 34, 35, 40, 42, 43, 46, 69, 92, 99, 100, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 775, 785, 786, 788, 789, 791, 792, 793, 794, 809, 810, 811, 812, 814, 815, 816, 817, 818, 819, 820, 821, 823, 824, 825, 826, 828, 830, 831, 832, 835, 838, 839, 840, 841, 842, 844, 845, 846, 848, 849, 850, 851, 852, 856, 857, 860, 872, 873, 875], "post": [3, 6, 42, 62, 85, 639, 734, 816, 831, 836, 851, 853], "process": [3, 6, 7, 23, 28, 29, 33, 42, 204, 216, 628, 810, 816, 817, 823, 824, 825, 831, 832, 834, 836, 838, 839, 840, 841, 844, 846, 851, 857, 858, 860, 865, 866, 867, 870, 871, 873, 874], "11": [3, 5, 6, 7, 9, 10, 19, 21, 23, 24, 25, 26, 40, 42, 43, 44, 47, 53, 54, 55, 58, 59, 63, 67, 76, 77, 78, 81, 82, 84, 86, 90, 100, 220, 224, 227, 232, 242, 279, 280, 286, 350, 369, 372, 373, 375, 391, 392, 404, 409, 410, 414, 415, 419, 428, 464, 465, 467, 471, 476, 478, 496, 520, 521, 536, 542, 543, 549, 558, 574, 629, 631, 633, 634, 635, 636, 638, 640, 641, 642, 644, 647, 648, 656, 657, 668, 671, 672, 673, 674, 675, 679, 683, 684, 685, 686, 688, 690, 693, 700, 705, 706, 708, 710, 721, 723, 733, 736, 737, 738, 745, 746, 754, 755, 756, 763, 824, 825, 826, 828, 836], "st": [3, 4, 8, 773, 820, 839, 841], "perf_count": [3, 7, 8], "raw_logit": 3, "latenc": [3, 8], "nn": [3, 5, 6, 7, 15, 26, 28, 29, 42, 46, 136, 626, 809, 834, 839, 844, 851, 861, 868], "axi": [3, 5, 6, 11, 43, 44, 45, 48, 50, 53, 54, 55, 59, 60, 61, 63, 64, 65, 66, 67, 68, 70, 71, 73, 76, 77, 78, 82, 83, 84, 86, 87, 88, 89, 90, 91, 94, 110, 114, 134, 135, 138, 210, 284, 289, 332, 333, 337, 338, 346, 353, 369, 372, 374, 375, 378, 382, 384, 394, 395, 401, 404, 406, 416, 417, 453, 458, 466, 467, 468, 471, 472, 473, 476, 481, 486, 487, 489, 490, 491, 493, 495, 496, 501, 502, 504, 512, 517, 520, 521, 522, 524, 525, 526, 527, 528, 529, 542, 549, 611, 623, 626, 628, 629, 631, 633, 634, 635, 636, 637, 640, 641, 642, 643, 644, 645, 655, 665, 668, 675, 688, 690, 691, 693, 694, 695, 697, 698, 699, 700, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 713, 714, 740, 741, 742, 746, 748, 750, 751, 753, 754, 755, 757, 758, 759, 760, 761, 762, 763, 764, 765, 773, 775, 785, 789, 790, 795, 824, 826, 828, 830, 833, 834, 837, 838, 841, 844, 846, 848, 851], "direct": [3, 54, 77, 338, 345, 349, 354, 358, 369, 372, 375, 406, 417, 472, 473, 487, 643, 753, 815, 821, 823, 838, 844, 850, 851, 863, 867, 868, 871], "tolist": 3, "652289830999962": 3, "shape": [3, 4, 6, 11, 13, 15, 21, 22, 23, 24, 28, 29, 34, 40, 42, 43, 44, 47, 48, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 94, 95, 97, 98, 99, 103, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 149, 150, 151, 205, 211, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 313, 314, 315, 316, 318, 320, 321, 322, 323, 324, 325, 326, 332, 333, 334, 335, 336, 338, 340, 341, 343, 345, 347, 349, 350, 351, 352, 356, 357, 359, 364, 366, 369, 372, 373, 374, 375, 378, 379, 380, 382, 384, 386, 387, 388, 389, 391, 392, 393, 395, 396, 397, 398, 399, 400, 401, 405, 406, 408, 409, 410, 411, 414, 416, 417, 418, 421, 422, 423, 424, 426, 427, 428, 431, 432, 433, 434, 435, 438, 439, 440, 441, 442, 443, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 461, 462, 464, 466, 469, 474, 479, 480, 481, 482, 483, 484, 485, 487, 488, 489, 490, 491, 493, 494, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 512, 517, 518, 519, 520, 521, 522, 537, 538, 542, 543, 544, 546, 549, 550, 553, 559, 566, 573, 574, 584, 593, 595, 607, 611, 612, 613, 616, 618, 619, 620, 621, 623, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 706, 707, 708, 709, 711, 734, 735, 736, 737, 738, 740, 741, 742, 743, 744, 745, 750, 751, 753, 754, 755, 756, 758, 760, 761, 763, 764, 765, 770, 773, 775, 788, 789, 792, 802, 807, 809, 817, 818, 824, 826, 827, 828, 829, 830, 831, 833, 837, 838, 839, 841, 842, 843, 846, 848, 849, 850, 851, 860, 861], "dtype": [3, 6, 9, 11, 15, 21, 23, 24, 25, 26, 40, 43, 50, 51, 54, 55, 58, 59, 63, 64, 67, 71, 73, 74, 76, 77, 78, 81, 82, 86, 87, 90, 99, 102, 103, 104, 123, 124, 125, 127, 128, 129, 131, 132, 133, 134, 135, 137, 138, 139, 140, 145, 146, 147, 148, 149, 150, 152, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 205, 232, 236, 268, 269, 271, 309, 310, 311, 312, 313, 314, 315, 320, 321, 322, 323, 324, 330, 335, 337, 353, 366, 369, 372, 373, 374, 375, 379, 384, 394, 404, 416, 417, 420, 443, 449, 454, 465, 489, 505, 506, 507, 508, 509, 519, 520, 521, 522, 525, 528, 529, 546, 547, 548, 550, 559, 568, 596, 626, 627, 628, 629, 631, 633, 634, 637, 640, 641, 643, 644, 645, 649, 656, 675, 691, 713, 714, 736, 737, 738, 741, 742, 743, 752, 753, 754, 755, 760, 762, 764, 765, 768, 770, 773, 775, 776, 788, 789, 790, 791, 792, 794, 809, 813, 820, 822, 826, 827, 828, 830, 831, 834, 835, 837, 838, 839, 841, 842, 846, 848, 861], "int32": [3, 40, 42, 51, 54, 55, 63, 64, 67, 74, 77, 78, 86, 87, 129, 134, 138, 140, 146, 149, 152, 154, 156, 158, 160, 163, 165, 166, 170, 173, 177, 181, 185, 187, 205, 232, 268, 269, 380, 384, 510, 520, 521, 522, 550, 559, 596, 626, 627, 628, 629, 631, 640, 641, 644, 736, 737, 738, 742, 754, 755, 760, 762, 773, 774, 826, 838, 841, 846], "6477362": 3, "29496726": 3, "04526032": 3, "float32": [3, 6, 9, 11, 13, 15, 20, 21, 40, 42, 43, 44, 50, 51, 54, 55, 58, 73, 74, 77, 78, 81, 90, 135, 138, 140, 146, 147, 148, 152, 156, 157, 160, 161, 162, 163, 166, 169, 170, 172, 177, 180, 186, 236, 250, 277, 330, 343, 366, 369, 372, 373, 374, 384, 394, 404, 417, 443, 449, 454, 522, 559, 596, 626, 627, 629, 631, 633, 634, 637, 649, 651, 652, 655, 682, 684, 685, 691, 713, 714, 770, 773, 774, 809, 826, 828, 839, 841, 842, 861, 862], "As": [3, 5, 6, 8, 10, 11, 13, 15, 21, 25, 26, 28, 29, 31, 34, 40, 41, 65, 69, 92, 634, 642, 682, 746, 747, 748, 749, 809, 813, 815, 816, 817, 818, 821, 823, 824, 825, 826, 827, 830, 831, 832, 833, 834, 837, 838, 839, 840, 841, 844, 848, 849, 850, 852, 856, 860, 861, 862, 867, 872], "expect": [3, 6, 8, 10, 21, 25, 28, 29, 31, 44, 45, 47, 54, 59, 60, 77, 83, 176, 244, 288, 372, 374, 395, 417, 454, 533, 627, 629, 631, 633, 635, 658, 679, 693, 788, 789, 809, 816, 817, 820, 826, 827, 830, 832, 835, 837, 839, 841, 844, 852, 853, 858, 860, 861, 862], "ident": [3, 11, 26, 43, 45, 59, 71, 129, 198, 552, 578, 626, 628, 631, 634, 638, 672, 676, 728, 789, 824, 834, 835, 838, 839, 842, 844, 848, 849, 852, 854, 856, 858], "had": [3, 824, 825, 837, 842, 846, 867, 868], "anoth": [3, 19, 21, 22, 25, 26, 28, 29, 31, 32, 44, 45, 130, 150, 152, 626, 627, 809, 815, 816, 817, 822, 824, 826, 827, 830, 832, 834, 837, 838, 841, 846, 848, 851, 854, 857, 859, 860, 861, 867, 873], "postprocess": 3, "routin": [3, 825, 837, 838, 844, 852, 867], "feed": [3, 210, 628, 860, 867, 868], "other": [3, 5, 7, 8, 10, 13, 15, 20, 21, 22, 23, 24, 26, 28, 29, 30, 31, 32, 33, 34, 35, 42, 44, 51, 53, 54, 55, 61, 67, 71, 74, 76, 77, 78, 84, 90, 94, 99, 100, 123, 138, 150, 176, 237, 242, 244, 260, 269, 270, 334, 338, 369, 375, 465, 466, 474, 531, 532, 626, 627, 629, 631, 640, 644, 697, 707, 738, 761, 763, 770, 775, 809, 813, 815, 816, 817, 818, 820, 821, 824, 825, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 841, 842, 844, 846, 848, 850, 851, 852, 853, 854, 857, 860, 861, 863, 865, 866, 867, 873, 874], "carefulli": [3, 275, 629, 788, 838, 865, 870], "rewrit": 3, "easili": [3, 25, 28, 29, 40, 809, 816, 821, 825, 831, 838, 841, 844, 849, 850, 851, 852, 857, 867, 873, 874], "out": [3, 6, 10, 11, 13, 15, 17, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 40, 43, 46, 48, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 99, 100, 104, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 149, 151, 160, 211, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 314, 315, 326, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 364, 366, 369, 372, 373, 374, 375, 378, 379, 380, 382, 384, 385, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 404, 405, 406, 408, 409, 410, 411, 414, 416, 417, 420, 421, 422, 423, 424, 425, 426, 429, 430, 432, 433, 434, 435, 436, 438, 439, 440, 441, 443, 447, 450, 451, 452, 453, 455, 456, 462, 464, 465, 466, 468, 469, 471, 472, 473, 474, 475, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 512, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 533, 537, 538, 542, 543, 544, 546, 549, 550, 559, 569, 573, 574, 612, 613, 616, 618, 619, 620, 621, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 706, 707, 708, 709, 711, 734, 735, 736, 737, 738, 740, 741, 742, 743, 745, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 773, 781, 785, 786, 788, 789, 791, 792, 793, 794, 809, 810, 813, 814, 815, 816, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 834, 836, 838, 839, 840, 841, 842, 844, 845, 846, 847, 848, 849, 850, 851, 853, 856, 857, 858, 860, 861, 867, 874], "quickest": 3, "particular": [3, 28, 29, 265, 629, 774, 816, 817, 820, 822, 825, 826, 828, 835, 837, 838, 841, 842, 863, 867, 873], "hardwar": [3, 42, 99, 103, 809, 816, 844, 857, 863, 865, 866, 867, 868, 869, 870, 871, 872, 873], "again": [3, 6, 22, 23, 31, 32, 33, 34, 634, 682, 817, 821, 822, 823, 824, 828, 830, 832, 837, 838, 841, 842, 844, 849, 851, 852, 857, 858, 872, 873], "speed": [3, 8, 10, 11, 28, 29, 42, 47, 55, 78, 566, 631, 841, 856, 870], "up": [3, 5, 6, 8, 10, 11, 28, 54, 55, 77, 78, 372, 375, 395, 408, 465, 473, 554, 566, 631, 633, 656, 658, 809, 810, 813, 815, 817, 818, 820, 821, 822, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 841, 842, 844, 846, 847, 848, 849, 850, 851, 852, 856, 857, 858, 860, 868, 873, 874], "12": [3, 5, 6, 8, 9, 11, 19, 21, 23, 24, 25, 26, 40, 42, 43, 44, 51, 53, 54, 55, 58, 59, 63, 67, 74, 76, 77, 78, 81, 82, 84, 85, 86, 90, 99, 100, 165, 220, 222, 227, 231, 232, 235, 237, 238, 239, 257, 270, 273, 280, 283, 290, 291, 314, 315, 346, 349, 350, 366, 369, 372, 375, 384, 391, 392, 393, 394, 396, 400, 401, 409, 410, 414, 415, 416, 417, 419, 464, 465, 467, 471, 476, 493, 496, 509, 520, 526, 527, 528, 538, 542, 543, 574, 580, 589, 603, 629, 631, 633, 634, 636, 638, 639, 640, 641, 642, 644, 647, 651, 656, 657, 668, 670, 672, 675, 679, 683, 685, 686, 688, 690, 700, 704, 706, 708, 710, 727, 734, 736, 737, 738, 745, 746, 754, 755, 756, 760, 762, 773, 816, 822, 824, 826, 828, 836], "repeat": [3, 4, 22, 32, 54, 55, 61, 77, 78, 84, 372, 375, 384, 401, 406, 470, 519, 544, 631, 636, 637, 709, 713, 714, 802, 817, 821, 822, 828, 829, 837, 841], "previou": [3, 11, 21, 22, 23, 25, 31, 32, 33, 35, 56, 77, 79, 184, 185, 186, 187, 188, 361, 371, 372, 418, 599, 601, 602, 603, 604, 606, 607, 609, 613, 618, 627, 631, 632, 788, 806, 816, 817, 820, 822, 825, 827, 833, 838, 841, 844, 851, 852, 870], "trace": [3, 4, 6, 8, 9, 10, 17, 18, 22, 25, 28, 31, 33, 34, 46, 55, 59, 71, 78, 82, 561, 562, 565, 576, 585, 600, 608, 631, 634, 770, 781, 791, 793, 807, 809, 820, 824, 826, 838, 843, 844, 846, 851, 852, 859, 860, 861, 868, 873], "befor": [3, 4, 6, 20, 21, 22, 23, 24, 30, 31, 32, 33, 34, 35, 42, 54, 58, 59, 61, 65, 67, 71, 77, 81, 82, 207, 210, 215, 372, 375, 384, 400, 405, 415, 419, 465, 472, 473, 474, 481, 520, 521, 628, 633, 634, 636, 637, 638, 642, 644, 646, 647, 648, 649, 651, 653, 655, 659, 660, 663, 674, 675, 691, 697, 712, 713, 727, 746, 747, 748, 749, 754, 755, 760, 762, 770, 789, 798, 802, 815, 816, 817, 820, 821, 823, 826, 827, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 841, 846, 849, 852, 860, 861, 867], "13": [3, 5, 6, 8, 9, 19, 23, 24, 25, 26, 40, 42, 44, 48, 53, 54, 58, 59, 63, 67, 76, 77, 78, 79, 81, 84, 86, 90, 99, 115, 165, 195, 220, 235, 244, 255, 275, 284, 346, 353, 360, 369, 372, 375, 393, 394, 404, 415, 419, 464, 465, 467, 471, 476, 496, 509, 520, 521, 537, 542, 543, 558, 580, 589, 612, 623, 627, 628, 629, 631, 632, 633, 634, 636, 637, 638, 641, 642, 644, 647, 648, 656, 657, 668, 672, 679, 683, 685, 688, 710, 714, 727, 736, 737, 738, 745, 746, 754, 755, 756, 824, 826, 828, 838], "026875037000081647": 3, "14": [3, 6, 8, 9, 24, 40, 42, 43, 44, 51, 53, 54, 58, 59, 63, 67, 74, 76, 77, 78, 81, 82, 84, 86, 149, 162, 165, 218, 223, 225, 232, 236, 262, 266, 270, 276, 283, 291, 342, 372, 373, 375, 384, 391, 392, 393, 394, 404, 409, 411, 414, 415, 416, 419, 423, 429, 430, 465, 467, 471, 476, 496, 520, 589, 612, 627, 629, 631, 632, 633, 634, 636, 638, 642, 644, 647, 648, 650, 652, 654, 656, 668, 670, 672, 679, 686, 688, 690, 710, 727, 736, 737, 738, 746, 755, 756, 824, 828, 841], "overrid": [3, 6, 34, 43, 50, 54, 73, 77, 138, 384, 519, 626, 821, 823], "behavior": [3, 6, 54, 65, 237, 244, 270, 279, 385, 530, 577, 601, 629, 631, 642, 746, 747, 748, 749, 815, 823, 824, 825, 826, 837, 838, 839, 841, 844, 846, 852, 864], "prealloc": [3, 6], "75": [3, 6, 40, 53, 54, 76, 77, 78, 81, 86, 116, 134, 223, 225, 237, 239, 250, 312, 345, 346, 366, 369, 415, 529, 544, 557, 589, 623, 626, 629, 631, 634, 638, 640, 647, 673, 679, 723, 738], "memori": [3, 5, 6, 7, 10, 20, 23, 24, 25, 26, 50, 54, 61, 73, 77, 84, 125, 136, 192, 204, 210, 212, 216, 375, 384, 459, 460, 467, 469, 471, 472, 473, 480, 496, 526, 572, 577, 601, 626, 628, 631, 633, 636, 658, 659, 699, 700, 701, 703, 705, 706, 708, 710, 803, 807, 825, 826, 827, 837, 838, 844, 846, 852, 860, 867, 869, 870, 871], "temporari": [3, 6, 586, 609, 631, 803, 826, 843], "fix": [3, 6, 44, 54, 77, 94, 95, 369, 372, 373, 418, 448, 633, 660, 809, 813, 816, 817, 820, 826, 832, 841, 842], "until": [3, 6, 803, 817, 837, 846, 852, 857, 860, 874], "handl": [3, 6, 40, 42, 48, 52, 53, 54, 70, 71, 75, 76, 77, 100, 107, 108, 109, 110, 111, 112, 113, 114, 115, 190, 191, 192, 193, 194, 198, 203, 204, 212, 216, 222, 234, 259, 261, 275, 281, 282, 287, 288, 292, 297, 298, 300, 364, 375, 464, 490, 623, 628, 629, 634, 644, 688, 760, 762, 785, 793, 810, 812, 819, 824, 825, 826, 832, 833, 834, 836, 837, 838, 839, 840, 841, 843, 844, 850, 864, 874], "o": [3, 6, 41, 42, 43, 44, 46, 569, 631, 633, 660, 809, 816, 819, 825, 846, 853], "environ": [3, 6, 7, 10, 23, 24, 25, 26, 43, 46, 809, 810, 817, 853, 867, 869], "xla_python_client_alloc": [3, 6], "platform": [3, 6, 7, 11, 23, 24, 26, 811, 814, 816, 823, 865, 869, 871], "jit": [3, 5, 8, 10, 28, 31, 846, 852, 860, 867], "img_jax": [3, 6], "device_put": [3, 8], "15": [3, 6, 7, 9, 10, 11, 24, 40, 42, 43, 44, 47, 53, 54, 55, 59, 63, 67, 73, 74, 76, 77, 78, 81, 82, 84, 86, 90, 100, 133, 162, 220, 227, 231, 237, 239, 248, 255, 256, 261, 262, 270, 279, 280, 281, 346, 360, 369, 370, 372, 373, 375, 384, 391, 392, 409, 411, 414, 415, 419, 425, 467, 471, 476, 496, 520, 538, 542, 543, 546, 557, 558, 583, 589, 606, 626, 627, 629, 631, 633, 634, 636, 638, 640, 641, 642, 644, 647, 657, 668, 671, 672, 673, 679, 685, 686, 704, 710, 715, 736, 737, 744, 746, 755, 756, 770, 812, 816, 825, 828, 836, 870], "warm": 3, "_": [3, 7, 8, 10, 11, 28, 41, 42, 53, 54, 71, 76, 77, 79, 95, 152, 240, 242, 250, 251, 266, 332, 333, 369, 372, 375, 384, 416, 445, 448, 489, 519, 542, 612, 613, 627, 629, 631, 632, 634, 636, 638, 644, 682, 683, 685, 711, 722, 761, 817, 825, 826, 829, 837, 841, 849], "rang": [3, 5, 7, 11, 28, 29, 40, 41, 42, 44, 50, 54, 67, 73, 77, 123, 134, 135, 284, 296, 304, 316, 364, 366, 373, 375, 384, 427, 439, 474, 482, 484, 489, 494, 520, 521, 522, 542, 611, 626, 629, 631, 642, 644, 746, 754, 755, 760, 762, 773, 775, 776, 788, 809, 812, 815, 826, 830, 834, 841, 846, 849, 850, 851, 867, 873], "16": [3, 6, 7, 11, 23, 24, 25, 26, 40, 42, 44, 53, 54, 55, 58, 59, 63, 67, 74, 76, 77, 78, 81, 82, 84, 86, 99, 100, 165, 231, 260, 280, 287, 343, 346, 350, 369, 372, 375, 384, 391, 392, 394, 400, 404, 405, 409, 410, 415, 419, 454, 471, 520, 526, 543, 546, 568, 589, 590, 622, 627, 629, 631, 632, 633, 634, 636, 638, 640, 641, 644, 655, 657, 664, 668, 671, 672, 679, 681, 685, 710, 723, 736, 737, 738, 745, 755, 756, 773, 776, 809, 817, 826, 828, 849], "0022192720000475674": 3, "64773613": 3, "29496723": 3, "exact": [3, 54, 70, 71, 107, 372, 374, 408, 413, 453, 454, 642, 746, 748, 775, 785, 816, 817, 820, 828, 846], "note": [3, 5, 6, 11, 24, 28, 29, 34, 43, 44, 45, 54, 55, 59, 61, 65, 77, 82, 84, 94, 131, 144, 176, 244, 279, 280, 287, 325, 326, 346, 366, 369, 372, 373, 375, 395, 426, 431, 441, 442, 448, 471, 489, 627, 629, 633, 634, 636, 642, 644, 660, 669, 670, 681, 682, 684, 703, 707, 747, 749, 758, 789, 803, 807, 813, 815, 816, 817, 821, 826, 828, 829, 832, 837, 838, 839, 841, 842, 844], "were": [3, 6, 45, 71, 74, 165, 169, 170, 244, 629, 633, 660, 815, 816, 817, 826, 830, 832, 836, 837, 839, 841, 842, 844, 846, 860, 867, 868, 873], "function": [3, 5, 7, 11, 13, 15, 17, 18, 20, 21, 22, 23, 24, 25, 26, 30, 31, 32, 33, 34, 35, 36, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 99, 100, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 150, 151, 152, 162, 163, 164, 165, 168, 169, 170, 172, 176, 177, 194, 196, 197, 206, 210, 211, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 314, 315, 316, 319, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 381, 384, 391, 392, 393, 394, 396, 397, 398, 400, 404, 405, 406, 409, 410, 411, 415, 416, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 433, 437, 438, 439, 440, 441, 442, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 504, 506, 507, 508, 509, 510, 511, 512, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 553, 554, 555, 557, 558, 559, 561, 562, 563, 565, 566, 568, 569, 572, 573, 574, 577, 578, 581, 583, 585, 588, 589, 590, 591, 592, 594, 596, 597, 598, 604, 608, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 655, 656, 657, 659, 660, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 717, 719, 721, 722, 723, 725, 726, 727, 728, 734, 735, 736, 737, 738, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 768, 771, 773, 774, 775, 776, 781, 785, 788, 791, 798, 799, 805, 807, 809, 813, 816, 817, 819, 820, 821, 822, 823, 825, 828, 829, 831, 837, 840, 845, 847, 848, 849, 850, 854, 856, 860, 862, 864, 865, 866, 867, 868, 873, 874], "calcul": [3, 11, 42, 53, 54, 55, 60, 67, 71, 76, 77, 78, 82, 83, 90, 100, 217, 218, 219, 220, 221, 222, 223, 224, 225, 234, 235, 237, 240, 241, 242, 258, 259, 260, 261, 262, 263, 268, 269, 270, 275, 282, 283, 284, 286, 287, 288, 294, 304, 332, 333, 346, 356, 369, 372, 373, 374, 375, 378, 384, 391, 392, 393, 427, 449, 454, 481, 498, 500, 526, 566, 629, 631, 634, 635, 644, 671, 679, 682, 693, 694, 695, 757, 758, 759, 760, 761, 762, 763, 773, 775, 788, 789, 792, 815, 829, 846, 857, 860], "dog": 3, "18": [3, 10, 11, 23, 24, 25, 26, 40, 42, 44, 53, 54, 63, 76, 77, 78, 81, 82, 86, 90, 110, 232, 237, 279, 283, 292, 293, 346, 364, 369, 372, 375, 394, 400, 404, 405, 409, 415, 419, 471, 588, 623, 629, 634, 640, 644, 651, 668, 674, 679, 686, 736, 737, 738, 755, 756, 760, 824, 826, 828], "19": [3, 10, 23, 24, 25, 26, 40, 42, 43, 44, 47, 53, 54, 63, 76, 77, 81, 82, 86, 223, 232, 260, 270, 287, 372, 373, 375, 384, 393, 394, 405, 409, 415, 419, 425, 430, 471, 520, 629, 634, 638, 640, 643, 668, 675, 688, 726, 736, 737, 738, 753, 828], "006431100999861883": 3, "258": [3, 633, 648, 650], "104": [3, 67, 634, 644, 679, 756], "259": 3, "72447652": 3, "13937832": 3, "05874982": 3, "samoi": 3, "wallabi": 3, "pomeranian": 3, "incorrect": [3, 825], "predict": [3, 5, 6, 9, 11, 42, 43, 44, 45, 54, 60, 77, 83, 374, 450, 453, 456, 635, 693, 694, 695, 809, 826], "down": [3, 21, 31, 45, 54, 77, 372, 375, 408, 473, 816, 841, 854, 867, 873], "itself": [3, 5, 23, 33, 53, 94, 271, 532, 598, 629, 631, 638, 727, 803, 813, 816, 817, 820, 823, 824, 825, 826, 827, 830, 831, 832, 837, 838, 850, 852, 856, 860, 866, 867, 868, 873], "version": [3, 5, 7, 11, 25, 26, 31, 42, 43, 44, 47, 48, 54, 77, 94, 107, 288, 337, 339, 369, 384, 524, 529, 611, 629, 631, 634, 670, 671, 770, 798, 799, 809, 816, 817, 823, 825, 826, 829, 837, 839, 846, 856, 857, 858, 861, 873, 874], "return": [3, 6, 8, 9, 10, 11, 13, 15, 19, 20, 21, 22, 23, 24, 26, 28, 29, 30, 31, 32, 33, 34, 35, 40, 41, 42, 43, 44, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 97, 99, 100, 104, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 183, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 366, 369, 370, 371, 372, 373, 374, 375, 378, 379, 380, 382, 384, 385, 386, 387, 388, 389, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 404, 405, 406, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 768, 770, 773, 774, 775, 776, 780, 781, 786, 788, 789, 791, 793, 798, 799, 802, 803, 804, 805, 806, 807, 809, 816, 817, 821, 824, 826, 827, 828, 829, 830, 831, 833, 834, 835, 836, 837, 838, 839, 841, 842, 843, 844, 846, 848, 849, 850, 851, 852, 860, 861, 862, 868], "20": [3, 7, 11, 15, 40, 42, 43, 44, 47, 53, 54, 55, 58, 63, 67, 76, 77, 78, 81, 82, 86, 90, 232, 236, 240, 276, 280, 284, 301, 346, 348, 350, 369, 372, 375, 391, 393, 409, 415, 419, 464, 486, 542, 549, 550, 552, 574, 578, 589, 629, 631, 634, 640, 641, 644, 647, 648, 659, 668, 673, 675, 679, 686, 736, 744, 745, 754, 755, 756, 760, 762, 809, 825, 844, 848], "004749261999904775": 3, "7245": 3, "1394": 3, "0587": 3, "promis": [3, 5, 857], "sourc": [3, 5, 7, 9, 15, 20, 21, 22, 23, 24, 25, 26, 28, 29, 34, 35, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 366, 369, 370, 371, 372, 373, 374, 375, 378, 379, 380, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 770, 771, 773, 774, 775, 777, 778, 779, 780, 781, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 815, 816, 817, 820, 821, 823, 824, 825, 838, 840, 856, 857, 858, 859, 861, 862, 866, 867, 868, 869, 870], "21": [3, 5, 11, 40, 42, 44, 47, 53, 54, 55, 63, 73, 76, 77, 81, 82, 86, 90, 99, 135, 165, 220, 223, 225, 231, 255, 270, 301, 353, 372, 373, 374, 375, 384, 391, 394, 404, 409, 415, 417, 419, 423, 449, 464, 520, 574, 626, 627, 629, 631, 634, 638, 644, 668, 679, 683, 721, 736, 737, 754, 755, 756, 830, 836], "modul": [3, 6, 8, 10, 13, 15, 17, 18, 19, 23, 24, 25, 26, 28, 29, 30, 34, 40, 41, 42, 44, 45, 46, 69, 71, 92, 100, 365, 367, 368, 376, 377, 381, 570, 631, 645, 766, 770, 785, 786, 787, 789, 790, 792, 794, 797, 798, 807, 809, 811, 816, 821, 822, 823, 830, 834, 837, 838, 840, 841, 846, 847, 849, 851, 852, 858, 860, 862, 867, 868, 870], "def": [3, 6, 8, 10, 11, 13, 15, 19, 20, 21, 22, 23, 24, 28, 29, 30, 31, 32, 33, 34, 35, 40, 41, 42, 43, 44, 46, 53, 76, 119, 221, 536, 625, 631, 637, 638, 713, 714, 721, 802, 809, 813, 815, 816, 820, 821, 824, 826, 827, 828, 830, 831, 833, 834, 836, 837, 838, 839, 841, 842, 844, 846, 848, 849, 850, 851, 860, 861, 862], "__init__": [3, 6, 13, 15, 28, 29, 40, 41, 42, 44, 71, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 771, 778, 779, 780, 785, 788, 789, 790, 791, 792, 793, 794, 797, 798, 802, 804, 807, 809, 815, 821, 822, 826, 830, 838, 842, 846, 848, 849, 850, 851, 861], "self": [3, 5, 6, 13, 15, 28, 29, 40, 41, 42, 44, 46, 48, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 99, 100, 103, 107, 108, 109, 110, 111, 112, 113, 114, 115, 125, 126, 128, 130, 131, 133, 134, 135, 136, 137, 138, 140, 142, 143, 144, 146, 149, 150, 151, 152, 160, 162, 165, 168, 169, 170, 172, 174, 177, 194, 211, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 310, 311, 312, 314, 315, 316, 319, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 384, 386, 387, 388, 389, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 404, 405, 406, 408, 409, 410, 411, 412, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 433, 437, 438, 439, 440, 441, 442, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 504, 505, 506, 507, 508, 509, 510, 511, 512, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 534, 535, 537, 538, 541, 542, 543, 544, 545, 546, 549, 550, 553, 555, 557, 558, 559, 561, 562, 563, 565, 566, 568, 573, 574, 588, 589, 590, 591, 592, 594, 596, 597, 610, 612, 613, 616, 618, 619, 620, 621, 633, 647, 648, 649, 650, 651, 652, 655, 656, 657, 659, 660, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 734, 735, 736, 737, 738, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 793, 802, 809, 817, 821, 824, 830, 838, 839, 846, 848, 849, 850, 851, 861], "num_class": [3, 13, 15, 28, 29, 42, 44, 46, 809, 851, 861], "1000": [3, 7, 8, 9, 13, 28, 29, 42, 43, 44, 45, 47, 50, 73, 135, 626, 809, 849, 861], "v": [3, 4, 6, 17, 18, 21, 28, 29, 31, 34, 35, 40, 43, 44, 54, 58, 66, 73, 77, 81, 89, 135, 235, 240, 242, 283, 373, 375, 427, 437, 444, 445, 470, 629, 633, 637, 643, 660, 663, 713, 714, 752, 770, 789, 790, 791, 792, 793, 794, 809, 811, 816, 817, 819, 823, 831, 846, 849, 850, 851, 875], "none": [3, 6, 8, 10, 11, 28, 40, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 94, 98, 99, 100, 103, 104, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 155, 156, 157, 158, 159, 160, 162, 165, 167, 168, 169, 170, 172, 174, 177, 189, 192, 193, 205, 206, 207, 208, 209, 210, 211, 214, 215, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 314, 315, 320, 321, 322, 323, 324, 325, 326, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 364, 366, 369, 372, 373, 374, 375, 378, 379, 380, 382, 383, 384, 385, 386, 387, 388, 389, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 534, 535, 537, 538, 541, 542, 543, 544, 545, 546, 549, 550, 552, 553, 554, 555, 557, 558, 559, 561, 562, 565, 570, 573, 574, 575, 576, 577, 579, 580, 581, 582, 584, 585, 586, 588, 589, 590, 592, 594, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 618, 619, 620, 621, 623, 624, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 719, 720, 721, 722, 726, 727, 728, 730, 731, 732, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 770, 771, 773, 774, 775, 776, 781, 785, 786, 788, 789, 790, 791, 792, 793, 794, 797, 798, 801, 803, 807, 809, 813, 816, 820, 821, 822, 824, 825, 826, 827, 828, 830, 831, 833, 834, 837, 838, 839, 841, 842, 844, 846, 848, 850, 851, 860, 861, 862], "_build": [3, 6, 790, 791, 809], "kwarg": [3, 4, 5, 6, 10, 11, 28, 42, 46, 49, 54, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 100, 103, 200, 375, 481, 569, 598, 626, 628, 631, 768, 770, 785, 786, 789, 790, 791, 798, 807, 809, 821, 826, 827, 830, 834, 837, 838, 844, 846, 850, 860, 861, 862], "featur": [3, 5, 10, 11, 13, 15, 17, 19, 28, 29, 42, 46, 54, 77, 372, 386, 388, 389, 396, 397, 398, 788, 789, 807, 809, 815, 816, 817, 821, 822, 825, 826, 833, 842, 844, 849, 852, 861, 867, 868, 869, 873], "sequenti": [3, 6, 9, 26, 28, 29, 44, 809, 823, 824, 850, 861], "conv2d": [3, 6, 9, 26, 28, 29, 44, 47, 58, 81, 633, 650, 789, 809], "64": [3, 6, 9, 40, 42, 43, 44, 47, 53, 54, 58, 76, 77, 78, 81, 82, 86, 90, 100, 161, 231, 241, 275, 284, 285, 343, 369, 372, 394, 404, 542, 543, 590, 618, 627, 629, 631, 632, 633, 634, 638, 644, 648, 650, 652, 654, 655, 676, 679, 689, 723, 727, 737, 756, 760, 809, 816, 826, 849, 850, 864, 872], "2": [3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 19, 21, 22, 23, 24, 25, 26, 28, 29, 40, 41, 42, 43, 44, 47, 48, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 94, 97, 99, 100, 107, 109, 110, 111, 112, 113, 114, 115, 116, 120, 122, 123, 124, 125, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 144, 146, 149, 150, 151, 152, 156, 160, 162, 170, 172, 177, 193, 194, 195, 198, 201, 203, 205, 208, 211, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 316, 317, 318, 325, 327, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 364, 366, 369, 370, 372, 373, 374, 375, 378, 379, 382, 384, 388, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 404, 405, 406, 409, 410, 411, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 433, 438, 440, 443, 447, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 460, 461, 462, 464, 465, 466, 467, 468, 471, 472, 473, 475, 476, 477, 478, 480, 481, 486, 487, 488, 489, 490, 491, 493, 495, 496, 497, 501, 502, 504, 507, 509, 510, 511, 512, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 531, 534, 535, 536, 537, 538, 541, 542, 543, 544, 545, 546, 549, 550, 551, 552, 553, 554, 555, 557, 558, 559, 561, 562, 563, 565, 566, 568, 569, 571, 573, 574, 578, 587, 588, 589, 590, 591, 592, 594, 598, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 713, 714, 715, 716, 718, 719, 721, 722, 723, 724, 726, 727, 732, 733, 734, 735, 736, 737, 738, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 773, 775, 776, 785, 788, 789, 798, 802, 803, 807, 809, 813, 816, 817, 820, 822, 823, 824, 825, 826, 828, 830, 831, 833, 834, 836, 837, 838, 839, 841, 845, 846, 848, 849, 850, 851, 852, 860, 861, 862, 873, 874], "data_format": [3, 44, 54, 58, 77, 81, 372, 378, 387, 391, 392, 393, 396, 397, 398, 409, 410, 411, 412, 414, 498, 499, 500, 503, 633, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 773, 789, 792, 809], "nchw": [3, 44, 54, 58, 77, 81, 372, 378, 387, 392, 397, 410, 414, 503, 633, 646, 649, 650, 653, 654, 655, 789, 809], "relu": [3, 6, 9, 26, 28, 29, 40, 47, 48, 54, 69, 70, 77, 109, 299, 300, 308, 364, 623, 785, 809, 839, 849, 850], "maxpool2d": [3, 6, 9, 42, 789, 809], "192": [3, 44, 773, 802], "384": [3, 79, 612, 632, 638, 715], "avgpool": [3, 9], "adaptiveavgpool2d": [3, 9, 789], "6": [3, 5, 8, 9, 10, 11, 13, 21, 23, 24, 25, 26, 28, 29, 40, 42, 43, 44, 47, 48, 50, 51, 53, 54, 55, 56, 58, 59, 61, 63, 64, 66, 67, 73, 74, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 95, 99, 100, 107, 109, 114, 119, 124, 125, 132, 133, 136, 137, 140, 146, 150, 151, 152, 160, 162, 170, 216, 217, 219, 220, 222, 223, 224, 225, 227, 228, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 247, 248, 249, 250, 252, 253, 254, 255, 256, 257, 260, 261, 262, 263, 265, 267, 268, 269, 270, 272, 273, 274, 276, 277, 279, 280, 281, 282, 284, 285, 286, 287, 288, 289, 291, 293, 294, 296, 298, 300, 302, 303, 304, 306, 307, 308, 309, 310, 316, 327, 332, 333, 335, 337, 346, 347, 349, 350, 351, 353, 360, 364, 366, 369, 370, 372, 373, 374, 375, 380, 382, 384, 394, 396, 399, 400, 404, 405, 409, 415, 416, 417, 419, 422, 425, 428, 429, 433, 451, 452, 453, 454, 455, 456, 457, 459, 460, 461, 465, 467, 471, 472, 476, 477, 480, 481, 486, 487, 489, 490, 493, 496, 497, 507, 509, 510, 512, 517, 519, 520, 521, 522, 524, 526, 528, 529, 535, 537, 538, 541, 542, 543, 549, 550, 557, 558, 559, 574, 588, 589, 590, 591, 592, 594, 598, 612, 613, 614, 615, 616, 617, 618, 619, 620, 622, 623, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 647, 648, 649, 650, 651, 652, 654, 655, 656, 657, 659, 663, 665, 666, 667, 668, 670, 671, 672, 674, 675, 676, 679, 681, 682, 683, 684, 685, 686, 688, 689, 690, 691, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 704, 705, 706, 707, 708, 709, 710, 711, 715, 716, 726, 727, 733, 734, 735, 736, 737, 738, 740, 741, 742, 745, 746, 747, 748, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 773, 788, 809, 813, 816, 820, 822, 824, 825, 826, 828, 831, 836, 841, 844, 846, 848, 849, 850], "classifi": [3, 5, 11, 13, 15, 28, 29, 42, 44, 45, 809, 815, 860, 861], "prob": [3, 5, 44, 54, 58, 77, 81, 86, 372, 379, 396, 397, 398, 505, 633, 640, 656, 735, 789, 809], "linear": [3, 9, 15, 27, 28, 29, 40, 41, 42, 44, 47, 54, 55, 58, 70, 77, 78, 81, 107, 109, 111, 112, 115, 292, 296, 300, 302, 303, 304, 308, 350, 364, 369, 372, 375, 384, 408, 443, 481, 529, 546, 569, 623, 631, 633, 638, 660, 683, 722, 773, 775, 776, 788, 789, 809, 824, 829, 834, 835, 837, 838, 841, 844, 846, 849, 850, 851, 861, 865, 866, 867, 870], "4096": 3, "_forward": [3, 6, 8, 10, 28, 29, 40, 41, 44, 809, 829, 846, 849, 850], "x": [3, 6, 7, 11, 13, 15, 19, 20, 21, 22, 23, 24, 28, 29, 30, 31, 32, 33, 34, 35, 40, 41, 42, 44, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 94, 95, 99, 100, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 120, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 149, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 169, 170, 172, 177, 193, 194, 196, 198, 203, 204, 205, 209, 211, 212, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 271, 272, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 314, 315, 316, 317, 319, 325, 326, 330, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 345, 346, 347, 348, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 364, 366, 369, 370, 372, 373, 374, 375, 378, 382, 383, 384, 385, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 419, 421, 423, 424, 426, 428, 430, 431, 432, 433, 434, 437, 438, 439, 440, 441, 442, 443, 446, 447, 448, 449, 450, 452, 453, 454, 455, 456, 457, 458, 462, 463, 465, 466, 468, 469, 471, 474, 477, 478, 479, 480, 481, 482, 483, 484, 485, 488, 489, 491, 493, 494, 495, 497, 498, 499, 500, 501, 502, 503, 504, 511, 512, 513, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 533, 534, 535, 536, 537, 538, 541, 542, 543, 544, 545, 546, 549, 550, 551, 552, 553, 555, 557, 558, 559, 561, 562, 563, 564, 565, 566, 567, 568, 569, 571, 578, 579, 580, 583, 586, 587, 588, 589, 590, 591, 592, 594, 596, 597, 598, 610, 611, 613, 614, 615, 617, 621, 622, 623, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 689, 691, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 713, 714, 715, 718, 721, 722, 723, 724, 725, 726, 727, 732, 733, 734, 736, 737, 738, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 770, 773, 774, 775, 789, 792, 795, 798, 802, 807, 809, 813, 815, 819, 821, 822, 824, 826, 827, 828, 829, 830, 831, 833, 834, 836, 837, 838, 839, 841, 842, 844, 846, 848, 849, 850, 851, 860, 861, 862], "reshap": [3, 28, 29, 44, 45, 54, 58, 59, 61, 71, 77, 81, 82, 84, 357, 369, 372, 373, 375, 391, 392, 393, 396, 409, 410, 411, 414, 423, 440, 465, 471, 611, 631, 633, 634, 636, 649, 651, 655, 675, 691, 809, 837, 838, 841, 844, 846, 848, 851, 864], "bidirect": [4, 633, 658], "encod": [4, 13, 15, 28, 29, 42, 44, 55, 60, 78, 83, 546, 631, 635, 693, 809, 849, 857, 861], "mlm": 4, "support": [4, 5, 7, 10, 11, 19, 20, 23, 24, 25, 26, 28, 31, 43, 52, 54, 55, 59, 75, 77, 78, 82, 144, 163, 167, 189, 196, 211, 220, 237, 244, 265, 266, 270, 280, 299, 325, 346, 364, 366, 369, 373, 375, 408, 426, 435, 489, 535, 547, 556, 559, 560, 577, 592, 626, 627, 628, 629, 631, 633, 634, 657, 669, 670, 671, 675, 684, 691, 768, 774, 781, 793, 798, 799, 802, 807, 809, 811, 813, 815, 816, 817, 820, 821, 823, 827, 828, 829, 831, 833, 834, 836, 837, 839, 841, 842, 844, 845, 846, 848, 849, 851, 853, 854, 856, 857, 858, 861, 864, 866, 867, 870, 872, 873, 874], "googl": [4, 23, 24, 25, 26, 42, 43, 44, 46, 825, 857], "type": [4, 8, 13, 15, 19, 25, 28, 29, 34, 42, 43, 44, 47, 48, 49, 50, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 99, 100, 103, 104, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 364, 366, 369, 370, 372, 373, 374, 375, 378, 379, 380, 382, 384, 385, 386, 387, 388, 389, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 404, 405, 406, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 534, 535, 536, 537, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 571, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 768, 770, 773, 774, 775, 776, 780, 781, 785, 788, 789, 790, 791, 795, 798, 802, 803, 804, 807, 809, 815, 816, 817, 819, 820, 821, 824, 827, 828, 829, 830, 833, 835, 837, 839, 841, 842, 844, 846, 848, 849, 860, 861, 862, 867, 868, 871], "choos": [4, 42, 44, 52, 64, 65, 75, 211, 237, 244, 265, 266, 270, 332, 333, 369, 375, 628, 629, 641, 642, 644, 745, 746, 747, 748, 749, 757, 758, 759, 761, 773, 809, 815, 816, 817, 835, 841, 847, 851, 860], "librari": [4, 5, 8, 10, 17, 18, 24, 26, 40, 42, 52, 65, 75, 211, 242, 244, 260, 265, 266, 288, 332, 333, 369, 628, 629, 634, 642, 644, 670, 671, 746, 747, 748, 749, 757, 758, 759, 761, 807, 809, 815, 816, 820, 826, 851, 852, 856, 857, 858, 860, 863, 864, 865, 867, 871, 874], "pretrain": [4, 8, 13, 14, 15, 28, 29, 47, 809, 861], "save": [4, 9, 42, 54, 71, 77, 384, 526, 586, 609, 628, 631, 645, 791, 807, 816, 825, 832, 841, 852, 858, 866], "some": [4, 6, 7, 10, 11, 13, 15, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 33, 34, 40, 44, 45, 71, 79, 242, 244, 260, 372, 396, 397, 398, 612, 613, 616, 618, 619, 620, 628, 629, 632, 638, 726, 789, 809, 813, 815, 816, 817, 820, 821, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 841, 842, 843, 844, 848, 849, 850, 852, 853, 854, 857, 858, 860, 861, 863, 864, 866, 867, 868, 873, 874], "mohame54": 4, "automodel": [4, 10, 28], "autotoken": 4, "load": [4, 5, 7, 8, 10, 25, 28, 42, 43, 44, 45, 46, 47, 71, 373, 444, 645, 791, 809, 841, 852, 866, 873], "token": [4, 44, 818], "bert_bas": 4, "from_pretrain": [4, 5, 10, 28, 45, 860, 861], "base": [4, 5, 11, 42, 45, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 102, 104, 135, 144, 176, 240, 241, 258, 259, 260, 261, 275, 316, 325, 327, 334, 337, 343, 350, 366, 369, 372, 373, 374, 382, 415, 419, 444, 449, 511, 579, 590, 602, 626, 627, 629, 631, 634, 636, 642, 644, 675, 699, 746, 747, 748, 749, 756, 771, 774, 775, 778, 779, 780, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 797, 798, 803, 804, 807, 809, 816, 817, 818, 820, 824, 825, 826, 830, 833, 835, 836, 837, 839, 840, 841, 842, 843, 844, 846, 867, 872, 874, 875], "uncas": 4, "eval": [4, 6, 9, 15, 23, 24, 25, 26, 633, 658, 791], "evalu": [4, 53, 54, 71, 76, 77, 240, 242, 258, 259, 260, 261, 265, 272, 274, 281, 285, 319, 351, 362, 363, 366, 371, 373, 374, 375, 440, 449, 454, 478, 622, 629, 632, 638, 645, 725, 726, 764, 765, 790, 791, 817, 824, 826, 834, 835, 867], "bert_token": 4, "sampl": [4, 5, 8, 10, 13, 15, 25, 28, 29, 43, 50, 53, 54, 63, 67, 73, 76, 77, 86, 90, 134, 135, 289, 316, 366, 372, 374, 375, 379, 396, 397, 398, 408, 418, 420, 449, 454, 484, 505, 506, 507, 508, 509, 626, 629, 640, 644, 735, 736, 737, 738, 761, 763, 789, 839, 841], "test": [4, 5, 20, 21, 23, 24, 30, 31, 33, 34, 35, 43, 44, 53, 55, 68, 76, 78, 91, 122, 168, 172, 251, 252, 253, 254, 277, 372, 396, 397, 398, 566, 625, 627, 629, 631, 645, 764, 765, 768, 771, 774, 803, 809, 811, 813, 814, 819, 823, 826, 828, 830, 832, 835, 838, 840, 842, 852, 853, 858, 860, 861, 862, 867], "did": [4, 42, 815, 823, 851, 857, 873], "realli": [4, 40, 816, 824, 831, 852, 860, 872, 873], "like": [4, 5, 8, 10, 20, 21, 22, 28, 30, 31, 32, 33, 34, 35, 45, 47, 50, 53, 54, 61, 73, 76, 77, 81, 84, 89, 135, 153, 176, 221, 241, 247, 250, 263, 281, 338, 343, 355, 369, 372, 373, 374, 375, 382, 384, 415, 417, 426, 451, 460, 461, 470, 471, 511, 512, 529, 626, 627, 629, 634, 636, 640, 643, 669, 703, 738, 751, 803, 809, 813, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 841, 842, 844, 845, 846, 848, 849, 850, 851, 852, 857, 860, 861, 867, 872], "input": [4, 5, 6, 7, 10, 13, 15, 25, 26, 28, 33, 34, 42, 43, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 95, 99, 100, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 161, 162, 165, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 191, 193, 194, 207, 210, 211, 215, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 314, 315, 316, 317, 319, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 364, 366, 369, 370, 371, 372, 373, 374, 375, 378, 379, 380, 382, 384, 385, 386, 387, 388, 389, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 404, 405, 406, 408, 409, 410, 411, 412, 414, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 431, 432, 433, 438, 440, 441, 442, 443, 444, 445, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 460, 461, 464, 465, 466, 467, 469, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 512, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 534, 535, 537, 538, 541, 542, 543, 544, 545, 546, 549, 550, 552, 553, 555, 557, 558, 559, 561, 562, 563, 564, 565, 566, 568, 573, 574, 575, 581, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 604, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 718, 721, 722, 723, 724, 726, 727, 728, 732, 733, 734, 735, 736, 737, 738, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 768, 770, 774, 781, 785, 788, 789, 790, 791, 792, 802, 803, 807, 820, 821, 822, 824, 826, 827, 828, 829, 834, 835, 836, 837, 838, 839, 841, 842, 843, 844, 846, 848, 849, 850, 851, 852, 860, 861, 868, 871], "pad": [4, 9, 42, 44, 54, 58, 61, 77, 81, 84, 95, 97, 372, 375, 391, 392, 393, 394, 395, 400, 401, 404, 405, 406, 408, 409, 410, 411, 412, 414, 415, 416, 417, 419, 420, 546, 631, 633, 636, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 698, 711, 775, 789, 809], "longest": 4, "return_tensor": [4, 5, 10, 28, 45, 860, 861], "pt": [4, 5, 10, 28, 860], "max_length": [4, 71], "512": [4, 6, 9, 42, 44, 82, 633, 648, 689, 809], "input_id": 4, "101": [4, 11, 43, 633, 634, 638, 657, 673, 721], "1045": 4, "2106": 4, "1005": 4, "1056": 4, "2428": 4, "2066": 4, "2115": 4, "4309": 4, "1012": 4, "102": [4, 11, 54, 77, 86, 394, 736], "token_type_id": 4, "attention_mask": [4, 58, 81, 633, 660], "pooler": 4, "compar": [4, 7, 8, 10, 28, 41, 45, 47, 54, 55, 65, 66, 67, 71, 77, 78, 89, 90, 331, 348, 369, 384, 527, 531, 534, 631, 633, 642, 643, 644, 658, 746, 747, 748, 749, 750, 753, 759, 770, 809, 822, 828, 830, 839, 841, 844, 849, 863, 865, 867, 873, 874], "no_grad": [4, 42, 860], "bert_output": 4, "pooler_output": 4, "ivy_bert": 4, "bert_base_uncas": 4, "ivy_input": 4, "k": [4, 8, 41, 44, 50, 54, 55, 58, 59, 63, 73, 76, 77, 81, 82, 86, 94, 95, 119, 129, 142, 143, 144, 264, 310, 325, 326, 366, 373, 375, 379, 382, 384, 424, 439, 443, 445, 447, 487, 491, 505, 506, 507, 508, 509, 512, 522, 534, 625, 626, 631, 633, 634, 638, 640, 641, 660, 663, 667, 674, 675, 681, 683, 684, 685, 688, 723, 736, 737, 738, 744, 809, 819, 820, 838, 839, 846, 860, 863, 867], "ivy_output": [4, 45], "logits_clos": 4, "allclos": [4, 5, 7, 8, 10, 13, 15, 28, 45, 47, 54, 77, 369], "detach": [4, 5, 7, 8, 10, 13, 15, 28, 836], "rtol": [4, 5, 13, 15, 54, 59, 77, 82, 331, 348, 369, 634, 677, 680, 768, 770, 813, 831, 839], "005": [4, 9, 54, 77, 331, 348, 369, 450], "atol": [4, 5, 7, 8, 10, 28, 54, 59, 77, 82, 331, 348, 369, 634, 677, 768, 770, 813, 831, 839], "equal": [4, 50, 51, 53, 54, 55, 59, 60, 61, 63, 65, 66, 67, 71, 74, 76, 77, 78, 82, 83, 84, 86, 89, 95, 99, 100, 129, 131, 132, 133, 139, 140, 149, 229, 231, 235, 240, 242, 251, 252, 273, 275, 280, 283, 284, 288, 327, 328, 329, 331, 348, 366, 369, 372, 373, 375, 378, 384, 395, 416, 443, 467, 476, 489, 493, 496, 501, 502, 504, 522, 531, 534, 611, 626, 627, 629, 631, 634, 635, 636, 640, 641, 642, 643, 644, 668, 676, 677, 680, 682, 688, 693, 696, 698, 703, 705, 711, 738, 744, 746, 747, 748, 749, 750, 753, 758, 760, 761, 762, 763, 781, 788, 789, 823, 824, 826, 828, 830, 839, 841, 864], "els": [4, 5, 6, 8, 11, 43, 44, 46, 47, 54, 55, 63, 76, 77, 86, 155, 156, 157, 158, 159, 171, 277, 281, 372, 373, 379, 418, 431, 442, 446, 448, 506, 541, 545, 627, 629, 631, 633, 638, 640, 659, 725, 728, 736, 737, 738, 768, 802, 803, 809, 815, 816, 817, 820, 822, 826, 827, 830, 834, 837, 838, 839, 841, 842, 844, 846, 848, 850, 851, 852, 868], "768": 4, "fn": [4, 45, 47, 54, 71, 74, 77, 103, 163, 164, 196, 197, 200, 375, 458, 532, 547, 548, 598, 627, 628, 631, 638, 721, 722, 723, 725, 726, 727, 768, 770, 795, 798, 804, 805, 807, 827, 830, 837, 838, 846, 860], "finish": [4, 17, 28, 29, 40, 43, 809, 810, 815, 816, 819], "2f": [4, 8], "sec": 4, "89": [4, 11, 40, 53, 63, 74, 76, 77, 86, 100, 165, 232, 627, 634, 644, 686, 737, 738, 762], "43": [4, 11, 40, 42, 44, 54, 77, 86, 100, 231, 372, 373, 384, 393, 425, 520, 629, 640, 641, 737, 738, 745], "procedur": [4, 823, 825, 828, 839], "60": [4, 40, 44, 53, 67, 76, 78, 86, 90, 221, 255, 375, 486, 550, 558, 574, 589, 611, 629, 631, 634, 638, 644, 679, 718, 736, 754, 756, 760, 803, 825], "big": [4, 788, 810, 852, 867], "jnp": [4, 20, 25, 28, 29, 30, 31, 34, 40, 42, 46, 809, 826, 827, 830, 833, 837, 842, 846, 851, 861, 862], "config": [4, 5, 6, 8, 10, 11, 22, 25, 28, 29, 42, 43, 45, 71, 638, 728, 809, 816, 820, 823, 825, 832, 839, 849, 860, 868], "jax_enable_x64": [4, 6, 8, 10, 11, 22, 25, 28, 29, 809], "ref": [4, 6, 8, 10, 78, 82, 256, 270, 273, 279, 286, 629, 636, 707, 816, 837], "initi": [4, 28, 29, 45, 54, 58, 67, 71, 77, 81, 90, 100, 373, 384, 431, 442, 448, 527, 528, 633, 644, 658, 659, 759, 786, 789, 790, 791, 793, 794, 807, 809, 812, 817, 818, 822, 826, 827, 831, 839, 841, 846, 857, 860, 861, 862, 867, 873, 874], "fast": [4, 23, 33, 54, 372, 395, 867], "valu": [4, 11, 40, 41, 43, 44, 50, 51, 53, 54, 55, 56, 58, 59, 61, 62, 63, 64, 65, 66, 67, 70, 71, 73, 74, 76, 77, 78, 79, 81, 82, 84, 85, 86, 87, 88, 89, 90, 97, 99, 100, 102, 115, 119, 120, 122, 123, 129, 132, 133, 134, 135, 138, 144, 149, 166, 170, 176, 209, 210, 217, 218, 219, 220, 222, 224, 225, 226, 233, 237, 238, 240, 242, 243, 244, 248, 249, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 267, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 296, 299, 304, 307, 308, 310, 317, 319, 325, 327, 328, 329, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 345, 346, 348, 349, 351, 354, 356, 357, 358, 359, 360, 362, 363, 364, 366, 369, 370, 371, 372, 373, 374, 375, 378, 379, 383, 384, 395, 408, 415, 416, 418, 420, 424, 427, 431, 437, 442, 444, 446, 448, 449, 450, 452, 453, 454, 455, 464, 470, 475, 481, 486, 488, 489, 490, 491, 493, 495, 498, 500, 505, 506, 508, 509, 515, 517, 520, 521, 522, 525, 526, 527, 528, 529, 535, 537, 538, 539, 541, 546, 549, 550, 552, 557, 558, 559, 566, 573, 574, 578, 579, 580, 583, 592, 597, 602, 603, 606, 609, 610, 611, 612, 613, 614, 618, 623, 625, 626, 627, 628, 629, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 659, 660, 663, 667, 670, 671, 675, 676, 677, 680, 681, 682, 683, 684, 685, 688, 691, 696, 697, 698, 702, 703, 711, 712, 713, 717, 719, 720, 721, 722, 723, 728, 732, 733, 734, 735, 736, 737, 738, 739, 741, 742, 744, 745, 746, 747, 748, 749, 750, 752, 753, 754, 755, 757, 758, 759, 760, 761, 762, 763, 768, 770, 773, 774, 775, 776, 778, 780, 785, 788, 789, 790, 791, 792, 793, 807, 813, 816, 817, 820, 823, 824, 826, 827, 828, 829, 830, 831, 833, 834, 837, 838, 841, 843, 844, 846, 848, 852, 860, 867, 868], "whenev": [5, 7, 10, 20, 23, 24, 25, 26, 789, 817, 822, 825, 826, 830, 837, 840, 841, 843, 849], "sota": 5, "come": [5, 19, 42, 812, 815, 816, 817, 821, 825, 838, 843, 844, 850, 854, 867], "onto": [5, 638, 721, 727, 855, 856, 867], "scene": [5, 809, 819, 845, 847, 855, 856, 867], "almost": [5, 42, 814, 824, 839, 847, 849, 856], "alwai": [5, 50, 51, 54, 55, 61, 73, 74, 77, 84, 107, 125, 149, 220, 270, 343, 369, 373, 375, 444, 459, 460, 461, 467, 469, 471, 472, 473, 476, 480, 487, 496, 552, 559, 623, 627, 629, 631, 636, 699, 700, 701, 703, 705, 706, 708, 710, 775, 809, 815, 816, 817, 821, 822, 824, 826, 829, 832, 833, 834, 837, 838, 839, 840, 841, 842, 844, 846, 852, 860], "huggingfac": [5, 42, 860, 861], "implement": [5, 11, 19, 20, 28, 30, 34, 42, 45, 51, 52, 54, 65, 66, 74, 75, 77, 82, 89, 94, 149, 163, 164, 177, 196, 197, 211, 217, 218, 219, 222, 223, 224, 225, 234, 235, 237, 240, 242, 244, 258, 259, 260, 261, 270, 272, 275, 279, 282, 283, 287, 288, 332, 333, 356, 369, 373, 384, 425, 426, 525, 526, 547, 548, 627, 628, 629, 631, 633, 634, 642, 643, 644, 660, 669, 670, 671, 679, 688, 746, 747, 748, 749, 750, 753, 757, 758, 759, 760, 761, 762, 774, 776, 798, 809, 813, 815, 819, 820, 821, 822, 824, 826, 827, 829, 830, 831, 833, 834, 835, 837, 839, 841, 842, 844, 846, 848, 849, 850, 851, 852, 854, 864, 865, 866, 867, 870, 873, 874], "while": [5, 11, 28, 29, 36, 54, 58, 71, 77, 81, 94, 95, 100, 122, 138, 176, 244, 245, 265, 266, 344, 369, 372, 373, 375, 417, 418, 440, 483, 484, 518, 625, 626, 627, 629, 633, 642, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 746, 758, 761, 771, 813, 815, 816, 817, 821, 822, 823, 825, 826, 827, 828, 831, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 844, 848, 850, 851, 852, 853, 856, 857, 860, 867, 873, 874], "conveni": [5, 22, 32, 815, 826, 827, 833, 839, 847, 849, 850, 854, 873], "non": [5, 21, 31, 51, 53, 54, 59, 63, 64, 67, 68, 74, 76, 77, 82, 86, 87, 90, 91, 131, 149, 167, 176, 245, 265, 266, 271, 332, 333, 337, 344, 357, 369, 372, 373, 375, 384, 416, 427, 431, 437, 460, 461, 522, 525, 626, 627, 629, 634, 638, 640, 641, 644, 645, 665, 666, 675, 677, 684, 686, 690, 691, 728, 737, 741, 742, 743, 744, 757, 758, 759, 760, 761, 763, 764, 765, 773, 788, 790, 791, 793, 821, 824, 828, 846, 860, 861, 862, 867], "user": [5, 7, 10, 17, 23, 24, 25, 26, 28, 43, 44, 46, 271, 288, 375, 481, 577, 629, 631, 789, 790, 791, 802, 809, 816, 817, 819, 821, 822, 824, 825, 826, 827, 830, 835, 836, 837, 838, 841, 843, 844, 845, 846, 852, 853, 856, 857, 865, 867, 873, 874], "who": [5, 17, 812, 818, 819, 830, 845, 852, 867, 869, 875], "must": [5, 34, 42, 48, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 94, 95, 97, 99, 100, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 145, 146, 149, 150, 151, 210, 211, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 322, 323, 326, 327, 328, 329, 332, 333, 334, 335, 336, 338, 340, 341, 343, 345, 347, 349, 350, 351, 352, 356, 359, 364, 366, 369, 372, 373, 374, 375, 378, 379, 382, 384, 386, 388, 389, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 404, 405, 406, 408, 409, 410, 411, 414, 416, 417, 419, 421, 423, 424, 426, 432, 433, 438, 439, 440, 441, 446, 450, 451, 452, 453, 455, 456, 459, 460, 461, 466, 467, 469, 471, 472, 473, 474, 476, 480, 482, 483, 484, 485, 487, 489, 490, 491, 493, 494, 496, 501, 502, 504, 505, 506, 508, 509, 512, 519, 520, 521, 522, 529, 537, 538, 542, 543, 544, 549, 550, 552, 559, 573, 574, 611, 612, 613, 616, 618, 619, 620, 621, 623, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 660, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 752, 753, 754, 755, 757, 758, 759, 760, 761, 762, 763, 764, 765, 770, 788, 789, 793, 795, 814, 815, 816, 817, 820, 821, 825, 826, 827, 828, 829, 830, 833, 834, 835, 837, 838, 841, 842, 843, 844, 846, 850, 851, 856, 858, 861, 862, 868, 874], "reimplement": 5, "choic": [5, 11, 29, 46, 54, 67, 77, 90, 373, 375, 444, 464, 644, 761, 763, 809, 816, 825, 837, 838, 849, 858, 861, 867, 874], "veri": [5, 13, 21, 28, 29, 31, 53, 76, 271, 331, 348, 369, 629, 634, 682, 775, 814, 815, 816, 817, 823, 824, 826, 827, 828, 830, 831, 833, 834, 837, 838, 839, 841, 842, 844, 847, 849, 850, 851, 852, 856, 857, 863, 864, 865, 867, 868, 869, 872, 873, 874], "popular": [5, 820, 867], "machin": [5, 9, 10, 23, 24, 25, 26, 31, 32, 40, 46, 54, 59, 77, 82, 162, 165, 373, 427, 627, 634, 677, 680, 809, 816, 820, 834, 854, 857, 865, 867, 869, 870, 871, 872, 873], "learn": [5, 11, 13, 15, 19, 20, 21, 22, 24, 26, 28, 29, 30, 31, 32, 33, 40, 42, 54, 56, 79, 373, 374, 444, 449, 542, 613, 616, 618, 619, 620, 631, 632, 637, 712, 713, 714, 793, 809, 810, 814, 815, 816, 819, 820, 826, 831, 832, 834, 836, 845, 854, 856, 857, 865, 869, 870, 871, 872, 873, 874], "thousand": [5, 852], "practition": [5, 867, 871, 872, 873], "especi": [5, 816, 822, 832, 856, 867], "china": 5, "howev": [5, 11, 19, 20, 21, 22, 23, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 59, 82, 244, 287, 288, 375, 378, 489, 498, 500, 577, 629, 631, 634, 682, 684, 798, 815, 816, 820, 821, 822, 824, 826, 827, 828, 829, 830, 832, 833, 834, 837, 838, 839, 841, 844, 846, 848, 849, 850, 851, 852, 857, 860, 866, 867, 873], "suffer": 5, "problem": [5, 809, 812, 815, 817, 820, 821, 827, 838, 848, 857, 863, 869, 873], "describ": [5, 54, 67, 77, 95, 220, 237, 238, 270, 273, 275, 374, 379, 382, 454, 509, 512, 629, 633, 644, 660, 756, 760, 762, 811, 812, 815, 816, 817, 823, 825, 837, 838, 841, 846, 851, 867], "abov": [5, 19, 24, 28, 29, 34, 35, 50, 53, 54, 59, 63, 70, 76, 77, 82, 86, 95, 115, 123, 124, 125, 127, 128, 129, 130, 132, 133, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 152, 168, 172, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 237, 238, 240, 242, 243, 244, 248, 249, 250, 251, 252, 253, 254, 257, 259, 260, 261, 262, 264, 265, 266, 267, 270, 272, 273, 274, 275, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 308, 310, 325, 326, 332, 333, 335, 338, 364, 366, 369, 372, 373, 375, 384, 391, 392, 393, 394, 396, 397, 398, 404, 406, 409, 410, 411, 416, 417, 418, 426, 427, 481, 489, 493, 519, 522, 549, 553, 555, 557, 559, 588, 597, 621, 623, 626, 627, 629, 631, 632, 633, 634, 636, 639, 640, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 655, 656, 657, 660, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 690, 691, 692, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 734, 736, 741, 742, 744, 745, 746, 747, 748, 749, 750, 753, 757, 758, 759, 760, 761, 762, 763, 764, 765, 809, 813, 815, 816, 817, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 833, 834, 836, 837, 838, 839, 841, 844, 846, 848, 849, 850, 851, 867, 872], "demo": [5, 6, 8, 9, 10, 11, 29, 36, 40, 44, 809], "specif": [5, 19, 20, 25, 26, 28, 29, 30, 32, 34, 42, 52, 54, 55, 75, 77, 78, 177, 208, 211, 244, 265, 266, 275, 319, 332, 333, 366, 369, 375, 379, 489, 509, 542, 543, 544, 570, 627, 628, 629, 631, 634, 636, 637, 640, 643, 644, 670, 671, 686, 707, 712, 713, 714, 735, 752, 757, 758, 759, 761, 768, 770, 790, 791, 798, 799, 805, 807, 809, 812, 813, 815, 816, 817, 820, 821, 822, 823, 824, 826, 827, 830, 832, 833, 834, 837, 838, 839, 840, 841, 842, 844, 846, 847, 848, 850, 851, 852, 853, 854, 856, 860, 861, 862, 863, 865, 866, 868, 869, 870, 874], "second": [5, 53, 54, 56, 59, 61, 65, 76, 77, 78, 79, 82, 84, 88, 95, 99, 100, 120, 144, 175, 183, 220, 225, 227, 229, 230, 231, 232, 238, 244, 245, 246, 247, 248, 249, 255, 256, 257, 262, 263, 264, 266, 267, 270, 273, 275, 286, 316, 325, 331, 344, 346, 347, 348, 354, 358, 359, 366, 369, 373, 374, 375, 382, 384, 425, 426, 427, 429, 433, 455, 487, 495, 506, 508, 512, 519, 522, 534, 583, 606, 612, 613, 618, 625, 626, 627, 629, 631, 632, 634, 636, 637, 638, 642, 665, 668, 669, 670, 672, 674, 679, 681, 682, 684, 686, 688, 690, 707, 708, 713, 716, 746, 747, 748, 793, 816, 820, 823, 826, 828, 832, 837, 838, 841, 843, 848, 858, 872], "iter": [5, 42, 44, 49, 54, 55, 61, 69, 71, 77, 78, 84, 92, 97, 100, 119, 210, 317, 318, 366, 372, 373, 375, 418, 431, 442, 448, 465, 481, 531, 569, 625, 628, 631, 636, 638, 698, 702, 709, 711, 716, 717, 718, 719, 720, 721, 723, 724, 725, 726, 727, 730, 731, 733, 802, 803, 807, 820, 822, 824, 846, 849, 858, 860], "dino": 5, "develop": [5, 13, 27, 28, 29, 809, 810, 811, 812, 813, 814, 815, 816, 817, 820, 823, 825, 831, 840, 842, 852, 854, 856, 857, 858, 860, 861, 865, 866, 867, 868, 869, 872, 873, 874], "meta": [5, 42, 712, 713, 714, 821, 842, 867], "supervis": [5, 54, 374, 449], "vision": [5, 28, 29, 47, 863, 873], "vit": 5, "produc": [5, 41, 54, 55, 58, 77, 81, 299, 309, 312, 364, 366, 372, 420, 633, 663, 773, 803, 815, 826, 831, 832, 837, 839, 841, 842, 860, 868, 870], "purpos": [5, 21, 28, 29, 31, 42, 44, 144, 242, 260, 325, 366, 626, 629, 634, 682, 817, 819, 821, 824, 825, 827, 828, 830, 833, 834, 835, 838, 840, 841, 844, 845, 848, 854, 866, 868, 871, 872, 873], "abund": [5, 858], "literatur": 5, "mainli": [5, 809, 815, 819, 836, 838, 841, 847, 849, 854, 867], "focus": [5, 809, 826, 842, 865, 866, 867, 873, 874], "being": [5, 28, 29, 40, 54, 71, 77, 92, 99, 103, 123, 373, 375, 437, 465, 481, 583, 626, 631, 633, 634, 658, 671, 770, 776, 788, 809, 816, 817, 820, 821, 822, 824, 826, 827, 828, 831, 833, 835, 837, 838, 839, 841, 842, 844, 846, 849, 852, 857, 858, 863, 865, 866, 867, 868, 873, 874], "rather": [5, 34, 55, 71, 78, 123, 210, 561, 562, 565, 626, 628, 631, 633, 658, 813, 817, 820, 824, 826, 829, 831, 838, 839, 841, 842, 851, 852, 857, 863, 866, 867], "than": [5, 7, 11, 28, 29, 31, 34, 53, 54, 55, 58, 59, 61, 63, 64, 65, 67, 71, 76, 77, 78, 81, 82, 84, 86, 87, 88, 90, 99, 100, 123, 131, 162, 210, 218, 219, 222, 223, 225, 226, 229, 231, 233, 237, 243, 244, 258, 259, 260, 261, 268, 270, 275, 279, 281, 283, 284, 288, 289, 290, 299, 309, 331, 334, 348, 355, 366, 369, 372, 373, 374, 375, 384, 394, 395, 400, 401, 404, 405, 406, 416, 417, 421, 423, 442, 448, 449, 472, 473, 520, 521, 522, 561, 562, 565, 582, 605, 626, 627, 628, 629, 631, 633, 634, 636, 640, 641, 642, 644, 658, 663, 665, 674, 675, 676, 677, 680, 691, 696, 700, 706, 738, 744, 747, 748, 749, 754, 755, 760, 761, 762, 763, 789, 803, 813, 815, 817, 820, 824, 825, 826, 828, 830, 831, 837, 838, 839, 841, 842, 843, 844, 846, 849, 850, 851, 852, 853, 857, 864, 865, 866, 867, 873, 874], "granular": 5, "detail": [5, 21, 31, 44, 48, 53, 54, 59, 61, 65, 70, 76, 77, 78, 82, 84, 88, 107, 108, 109, 110, 111, 112, 113, 114, 115, 130, 141, 288, 292, 297, 298, 300, 364, 373, 423, 466, 545, 623, 626, 629, 642, 668, 674, 680, 684, 707, 746, 747, 748, 749, 785, 809, 815, 817, 820, 822, 823, 824, 825, 832, 833, 834, 835, 838, 839, 840, 841, 842, 843, 846, 848, 849, 850, 869, 873], "interest": [5, 26, 28, 40, 237, 270, 629, 815, 817], "reader": 5, "might": [5, 9, 34, 55, 95, 176, 541, 627, 631, 813, 815, 816, 817, 825, 826, 828, 831, 832, 835, 838, 841, 842, 844, 846, 848, 849, 854], "through": [5, 29, 34, 42, 54, 77, 97, 225, 384, 525, 526, 629, 638, 718, 724, 791, 802, 809, 810, 813, 814, 815, 817, 818, 819, 822, 823, 824, 825, 827, 828, 830, 831, 832, 834, 835, 837, 838, 839, 841, 843, 844, 845, 846, 849, 850, 851, 860, 865, 867, 868, 869], "blog": [5, 817], "necessari": [5, 34, 50, 54, 73, 77, 84, 125, 237, 270, 374, 375, 449, 459, 460, 461, 467, 469, 470, 471, 472, 473, 480, 496, 582, 605, 629, 631, 699, 700, 701, 703, 705, 706, 708, 710, 809, 815, 816, 821, 822, 824, 826, 828, 837, 838, 841, 843, 844, 860, 861], "request": [5, 8, 9, 10, 23, 24, 25, 26, 28, 29, 42, 45, 54, 201, 379, 509, 628, 807, 809, 810, 812, 815, 828, 832, 842, 844, 858, 861], "tqdm": [5, 11, 23, 24, 25, 26, 42, 44, 809], "torch": [5, 7, 8, 10, 11, 12, 13, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 40, 42, 45, 46, 47, 50, 55, 59, 69, 78, 82, 126, 164, 191, 192, 196, 206, 208, 213, 280, 332, 333, 369, 375, 493, 535, 559, 592, 626, 627, 628, 629, 631, 634, 637, 684, 713, 714, 770, 781, 786, 798, 807, 809, 813, 816, 817, 820, 821, 822, 823, 825, 826, 827, 830, 831, 833, 834, 835, 836, 837, 838, 839, 841, 842, 844, 846, 848, 849, 851, 852, 854, 860, 861, 862, 873], "paddl": [5, 23, 24, 25, 26, 206, 332, 333, 369, 628, 786, 798, 815, 816, 826, 831], "autoimageprocessor": [5, 860, 861], "automodelforimageclassif": 5, "manual_se": [5, 26], "seed": [5, 20, 23, 24, 44, 45, 54, 58, 63, 65, 71, 77, 81, 86, 320, 321, 322, 323, 324, 366, 373, 379, 431, 442, 448, 505, 506, 507, 508, 509, 633, 640, 642, 656, 735, 736, 737, 738, 740, 746, 781, 786, 788, 803, 835, 839, 841], "opt": [5, 23, 24, 25, 26, 46, 816, 822, 826, 837, 841, 844], "miniconda": [5, 23, 24, 25, 26], "env": [5, 23, 24, 25, 26], "multienv": [5, 23, 24, 25, 26], "lib": [5, 6, 11, 23, 24, 25, 26, 42, 43, 44, 47], "python3": [5, 6, 9, 23, 24, 25, 26, 28, 42, 44, 47, 809, 816, 817], "site": [5, 23, 24, 25, 26, 868], "auto": [5, 821, 823, 824, 832, 849], "py": [5, 6, 7, 9, 10, 20, 23, 24, 25, 26, 42, 44, 47, 90, 373, 444, 756, 798, 802, 809, 815, 816, 817, 820, 822, 825, 826, 827, 829, 830, 831, 832, 833, 834, 838, 839, 841, 842, 846, 848, 850, 851], "tqdmwarn": 5, "iprogress": 5, "found": [5, 42, 44, 45, 47, 59, 61, 65, 71, 77, 82, 84, 88, 100, 198, 384, 466, 520, 628, 638, 668, 674, 707, 726, 746, 803, 812, 815, 816, 817, 821, 822, 823, 824, 826, 827, 829, 832, 835, 837, 838, 853, 869], "ipywidget": 5, "readthedoc": [5, 825], "io": [5, 7, 10, 23, 24, 25, 26, 43, 46, 816, 825], "en": [5, 79, 612, 613, 632, 825], "stabl": [5, 55, 66, 78, 89, 144, 325, 332, 333, 366, 369, 382, 512, 579, 580, 589, 590, 602, 603, 626, 631, 643, 750, 753, 775, 816, 822, 826, 838, 843, 846, 852], "user_instal": 5, "html": [5, 28, 29, 43, 53, 54, 76, 77, 144, 152, 240, 250, 251, 266, 325, 332, 333, 366, 369, 372, 375, 384, 416, 489, 519, 626, 627, 629, 634, 636, 644, 682, 683, 711, 761, 809, 829, 857], "autonotebook": 5, "notebook_tqdm": 5, "2024": [5, 7], "03": [5, 11, 24, 43, 50, 53, 55, 56, 76, 77, 79, 86, 135, 235, 260, 340, 341, 589, 590, 613, 618, 626, 629, 631, 632, 634, 673, 737], "07": [5, 24, 42, 44, 56, 60, 76, 79, 83, 86, 225, 258, 261, 262, 281, 372, 404, 602, 612, 613, 615, 616, 617, 618, 629, 631, 632, 635, 694, 695, 737, 790, 793, 850], "09": [5, 42, 48, 53, 79, 86, 115, 275, 285, 612, 623, 629, 632, 737], "38": [5, 7, 10, 11, 24, 40, 42, 44, 47, 51, 54, 76, 77, 86, 162, 287, 354, 369, 372, 384, 392, 411, 414, 415, 520, 627, 629, 634, 676, 773, 828], "30": [5, 7, 11, 23, 24, 25, 26, 40, 42, 53, 54, 55, 77, 78, 86, 90, 100, 270, 301, 346, 354, 369, 372, 375, 394, 404, 415, 464, 486, 510, 542, 544, 549, 550, 557, 558, 574, 583, 589, 629, 631, 634, 638, 644, 673, 679, 724, 736, 737, 755, 756, 760, 775, 788, 803, 812, 825], "908692": 5, "e": [5, 7, 10, 28, 45, 46, 50, 54, 59, 63, 65, 66, 67, 69, 76, 77, 82, 86, 89, 90, 92, 94, 95, 99, 126, 135, 136, 139, 140, 144, 148, 177, 190, 217, 218, 219, 223, 225, 226, 229, 231, 233, 237, 238, 240, 243, 244, 250, 251, 258, 259, 260, 261, 268, 269, 270, 271, 273, 277, 279, 280, 283, 284, 288, 298, 325, 332, 333, 366, 369, 372, 373, 374, 375, 379, 384, 385, 391, 392, 395, 409, 410, 411, 412, 416, 429, 432, 440, 454, 489, 493, 505, 506, 507, 508, 509, 520, 521, 530, 624, 626, 627, 628, 629, 633, 634, 636, 638, 640, 642, 643, 644, 660, 665, 670, 671, 674, 675, 677, 680, 683, 684, 685, 688, 691, 699, 707, 718, 722, 723, 724, 727, 732, 733, 736, 737, 738, 746, 747, 748, 749, 750, 753, 754, 755, 757, 758, 759, 760, 761, 762, 763, 789, 802, 803, 807, 809, 810, 813, 815, 816, 817, 819, 820, 822, 824, 826, 830, 831, 836, 838, 841, 846, 849, 852, 853, 854, 857, 858, 860, 863, 875], "extern": [5, 7, 824, 833, 838, 841, 842], "local_xla": [5, 7], "xla": [5, 7, 10, 838, 852, 854, 867], "stream_executor": [5, 7, 10], "cuda_dnn": [5, 7, 10], "cc": [5, 7, 10, 23, 24, 26, 43, 831], "9261": [5, 7], "unabl": [5, 7, 10, 817, 844], "regist": [5, 7, 10, 791, 817, 853, 860], "cudnn": [5, 7, 10], "factori": [5, 7, 10, 54, 374, 453, 454, 803], "attempt": [5, 7, 10, 20, 23, 24, 25, 26, 42, 44, 47, 816, 843, 852], "plugin": [5, 7, 10, 816], "when": [5, 6, 7, 9, 10, 11, 19, 20, 21, 23, 24, 25, 26, 28, 29, 31, 33, 34, 35, 43, 45, 49, 50, 51, 53, 54, 59, 60, 63, 64, 67, 71, 73, 74, 76, 77, 82, 83, 86, 87, 90, 100, 138, 149, 220, 237, 242, 244, 260, 270, 288, 289, 297, 332, 333, 364, 369, 372, 373, 374, 378, 379, 384, 395, 408, 420, 427, 431, 442, 448, 449, 454, 498, 500, 506, 526, 529, 559, 575, 583, 590, 626, 627, 629, 631, 633, 634, 635, 636, 638, 640, 641, 644, 646, 658, 660, 677, 682, 693, 694, 695, 703, 726, 727, 736, 737, 738, 741, 742, 744, 745, 757, 759, 761, 763, 773, 776, 788, 789, 790, 791, 792, 798, 807, 810, 814, 815, 816, 817, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 837, 838, 839, 841, 842, 843, 844, 846, 848, 849, 851, 852, 853, 856, 857, 860, 861, 865, 867, 870, 871, 872, 873], "been": [5, 7, 10, 13, 15, 23, 25, 28, 29, 54, 55, 63, 77, 78, 86, 193, 280, 375, 488, 542, 543, 544, 628, 629, 631, 640, 735, 802, 803, 815, 817, 820, 822, 824, 825, 826, 827, 829, 830, 833, 834, 837, 841, 846, 848, 852, 853, 860, 867, 874], "908781": 5, "cuda_fft": [5, 7, 10], "607": [5, 7], "cufft": [5, 7, 10], "31": [5, 11, 23, 24, 25, 26, 40, 42, 43, 47, 48, 53, 54, 76, 77, 78, 81, 86, 110, 115, 135, 231, 262, 270, 372, 375, 384, 393, 394, 464, 520, 537, 623, 626, 629, 631, 737, 738, 849], "271672": 5, "cuda_bla": [5, 7, 10], "1515": [5, 7], "cubla": [5, 7, 10], "35": [5, 11, 40, 48, 58, 59, 70, 76, 77, 81, 82, 86, 110, 225, 284, 372, 394, 404, 629, 633, 634, 641, 644, 657, 665, 672, 737, 745, 756], "751074": 5, "w": [5, 6, 7, 10, 43, 44, 54, 55, 56, 58, 71, 76, 77, 78, 79, 81, 94, 264, 346, 361, 369, 371, 372, 373, 378, 391, 392, 393, 395, 409, 410, 411, 412, 428, 448, 503, 518, 542, 544, 589, 612, 613, 614, 616, 618, 619, 620, 631, 632, 633, 638, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 721, 809, 819, 836, 846, 849, 850, 861, 875], "tensorflow": [5, 7, 10, 12, 13, 17, 19, 20, 23, 24, 25, 26, 28, 29, 30, 33, 34, 35, 40, 46, 53, 54, 55, 76, 77, 144, 191, 206, 221, 325, 366, 373, 427, 592, 626, 628, 631, 768, 781, 798, 809, 813, 814, 815, 816, 817, 820, 825, 826, 827, 831, 833, 837, 838, 839, 841, 842, 844, 846, 851, 852, 854, 857, 858, 861, 862, 864, 865, 868, 870, 871, 873, 874], "compil": [5, 7, 8, 9, 10, 11, 23, 24, 26, 28, 29, 32, 45, 47, 288, 629, 781, 809, 816, 838, 842, 846, 852, 854, 861, 863, 866, 867, 868, 871, 874], "tf2tensorrt": [5, 7, 10], "util": [5, 6, 7, 10, 20, 23, 24, 25, 26, 42, 45, 54, 77, 195, 373, 444, 628, 795, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 816, 823, 827, 830, 831, 834, 837, 841, 842, 846, 861, 865, 873, 874], "py_util": [5, 7, 10], "trt": [5, 7, 10], "could": [5, 7, 10, 28, 29, 34, 65, 642, 746, 747, 748, 749, 815, 816, 817, 820, 825, 826, 828, 835, 837, 838, 839, 841, 846, 848, 849, 850, 857, 858, 867, 872, 873], "find": [5, 7, 10, 17, 43, 44, 47, 59, 65, 71, 82, 634, 638, 642, 677, 717, 746, 747, 748, 749, 802, 803, 809, 810, 811, 812, 814, 815, 816, 817, 820, 823, 825, 831, 836, 841, 844, 846, 849, 853, 854, 856, 860], "tensorrt": [5, 7, 10], "libpaddl": 5, "0x7f525ead53b0": 5, "isn": [5, 592, 631, 812, 817, 835, 837, 841, 849, 852, 869], "requir": [5, 23, 24, 25, 26, 33, 42, 43, 44, 47, 53, 54, 71, 76, 77, 271, 284, 288, 373, 375, 426, 427, 481, 629, 634, 636, 669, 670, 671, 707, 773, 781, 786, 803, 811, 815, 816, 821, 823, 825, 826, 827, 828, 829, 830, 832, 833, 835, 838, 839, 840, 841, 842, 844, 846, 848, 852, 861, 867, 873], "re": [5, 11, 17, 20, 21, 22, 28, 29, 30, 31, 32, 33, 34, 35, 42, 44, 45, 47, 54, 55, 64, 77, 87, 97, 210, 316, 366, 373, 375, 447, 482, 483, 542, 628, 631, 634, 636, 641, 686, 704, 743, 745, 810, 811, 815, 816, 817, 818, 819, 820, 823, 826, 831, 836, 837, 838, 839, 840, 842, 844, 848, 851, 852, 855, 856, 857, 867], "cpu": [5, 6, 7, 8, 10, 23, 24, 25, 26, 28, 42, 43, 44, 46, 47, 50, 52, 54, 63, 73, 75, 77, 86, 123, 129, 132, 134, 135, 138, 139, 140, 146, 190, 191, 193, 194, 195, 196, 201, 204, 206, 208, 211, 212, 214, 216, 373, 379, 435, 505, 506, 508, 509, 626, 628, 640, 735, 736, 737, 738, 770, 788, 789, 790, 791, 792, 793, 794, 807, 809, 813, 816, 817, 823, 826, 827, 831, 838, 841, 852, 865, 867, 870, 872], "is_avail": [5, 11], "url": [5, 8, 10, 25, 28, 29, 42, 45, 809, 861], "cocodataset": [5, 8, 10, 25, 28, 29, 45, 809, 861], "org": [5, 8, 9, 10, 25, 28, 29, 42, 44, 45, 47, 53, 54, 76, 77, 79, 144, 152, 240, 250, 251, 266, 325, 332, 333, 366, 369, 372, 375, 384, 416, 489, 519, 612, 613, 626, 627, 629, 632, 634, 636, 644, 682, 683, 711, 761, 809, 829, 861], "val2017": [5, 8, 10, 28, 45], "000000039769": [5, 8, 10, 28, 45], "stream": [5, 8, 10, 25, 28, 29, 42, 45, 52, 75, 211, 628, 809, 861, 871], "creat": [5, 6, 7, 10, 19, 20, 21, 23, 24, 25, 26, 28, 29, 30, 31, 33, 34, 35, 42, 43, 44, 46, 47, 50, 53, 54, 63, 71, 73, 76, 77, 82, 86, 95, 123, 124, 125, 127, 128, 129, 132, 133, 134, 135, 137, 138, 139, 140, 144, 145, 146, 271, 309, 310, 320, 322, 324, 325, 366, 372, 373, 375, 379, 391, 392, 393, 414, 431, 442, 448, 457, 465, 481, 486, 505, 506, 507, 508, 509, 577, 594, 611, 622, 626, 629, 631, 632, 640, 679, 735, 736, 737, 738, 740, 770, 781, 786, 788, 789, 790, 791, 792, 793, 794, 810, 812, 816, 817, 818, 821, 822, 823, 825, 826, 827, 830, 834, 835, 837, 838, 839, 841, 844, 846, 847, 850, 853, 854, 857, 860, 861, 862, 867, 868, 873], "processor": [5, 872], "facebook": [5, 45], "imagenet1k": 5, "layer": [5, 7, 13, 15, 19, 25, 26, 28, 29, 40, 45, 54, 62, 77, 85, 639, 658, 659, 660, 734, 786, 788, 790, 791, 792, 793, 794, 809, 829, 838, 842, 844, 846, 847, 850, 856, 861, 865, 867, 871, 874], "id2label": [5, 45, 860], "origin": [5, 7, 8, 10, 11, 26, 28, 29, 30, 31, 32, 34, 41, 42, 43, 47, 54, 59, 61, 67, 71, 77, 82, 84, 90, 94, 97, 99, 100, 225, 250, 277, 316, 366, 372, 373, 375, 384, 416, 442, 474, 480, 482, 485, 520, 521, 525, 526, 527, 528, 529, 629, 634, 636, 644, 675, 703, 704, 755, 770, 775, 798, 799, 809, 811, 815, 816, 817, 822, 823, 825, 826, 831, 835, 837, 838, 839, 846, 858, 860, 861, 867, 868], "logits_np": 5, "predicted_class_idx": [5, 45], "argmax": [5, 6, 43, 44, 45, 64, 87, 375, 486, 641, 809, 838, 860, 864], "explain": [5, 34, 54, 77, 372, 406, 417, 809, 815, 816, 817, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 836, 837, 838, 841, 842, 844, 846, 847, 848, 849, 850, 851, 863, 870, 873], "usag": [5, 210, 628, 826, 834, 837, 841, 846, 852, 857, 870], "spec": [5, 828, 829], "flags_fraction_of_gpu_memory_to_us": 5, "auto_growth": 5, "By": [5, 20, 40, 47, 54, 60, 61, 67, 68, 77, 83, 84, 90, 91, 284, 330, 332, 333, 346, 353, 366, 369, 372, 374, 375, 382, 384, 395, 453, 454, 489, 493, 512, 519, 522, 577, 629, 631, 634, 635, 636, 644, 645, 665, 690, 693, 702, 754, 757, 758, 759, 760, 761, 762, 763, 764, 765, 816, 822, 826, 828, 830, 834, 836, 837, 838, 846, 850, 851, 860], "backend_compil": [5, 28, 29], "appli": [5, 7, 8, 10, 20, 23, 24, 25, 26, 28, 29, 42, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 94, 95, 99, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 125, 126, 128, 130, 131, 133, 135, 136, 137, 138, 140, 142, 143, 146, 150, 151, 152, 165, 169, 170, 177, 194, 211, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 314, 315, 316, 319, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 364, 369, 370, 372, 373, 374, 375, 378, 384, 386, 387, 388, 389, 391, 392, 393, 394, 396, 397, 398, 400, 404, 405, 406, 408, 409, 410, 411, 415, 416, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 433, 437, 438, 439, 440, 441, 442, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 506, 507, 508, 509, 510, 511, 512, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 534, 535, 537, 538, 541, 542, 543, 544, 545, 546, 549, 550, 553, 555, 557, 558, 559, 561, 562, 563, 565, 566, 568, 573, 574, 588, 589, 590, 591, 592, 594, 596, 597, 610, 612, 613, 616, 618, 619, 620, 621, 623, 627, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 642, 644, 646, 647, 648, 649, 650, 651, 652, 653, 655, 656, 657, 658, 659, 660, 663, 664, 665, 667, 668, 669, 670, 671, 672, 673, 674, 675, 677, 679, 680, 681, 682, 684, 688, 691, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 721, 724, 727, 728, 734, 735, 736, 737, 738, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 763, 764, 765, 775, 776, 785, 789, 792, 809, 815, 816, 817, 821, 824, 826, 827, 828, 829, 830, 832, 833, 834, 835, 837, 838, 841, 842, 844, 848, 849, 850, 851, 852, 860, 861, 868], "api": [5, 16, 21, 26, 27, 31, 44, 46, 53, 54, 59, 76, 77, 123, 124, 125, 127, 128, 129, 130, 132, 133, 134, 136, 139, 140, 141, 142, 143, 145, 146, 152, 162, 165, 175, 177, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 237, 238, 240, 242, 243, 244, 248, 249, 250, 251, 252, 253, 257, 259, 260, 261, 262, 264, 265, 266, 267, 270, 272, 273, 274, 275, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 332, 333, 335, 369, 372, 375, 384, 416, 489, 493, 519, 626, 627, 629, 634, 636, 641, 642, 643, 644, 645, 664, 665, 666, 667, 668, 670, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 690, 691, 697, 699, 700, 701, 703, 704, 706, 707, 711, 741, 742, 744, 745, 746, 747, 748, 749, 750, 753, 757, 758, 759, 760, 761, 762, 763, 764, 765, 809, 813, 816, 817, 819, 821, 823, 826, 827, 828, 829, 830, 831, 833, 835, 837, 838, 839, 841, 844, 845, 847, 849, 852, 854, 855, 856, 863, 865, 867, 869, 872, 874], "dygraph_to_static_func": 5, "transpiled_model": 5, "476": 5, "24": [5, 11, 21, 40, 42, 53, 54, 59, 67, 76, 77, 78, 81, 82, 86, 99, 232, 240, 255, 257, 270, 280, 281, 284, 346, 349, 369, 372, 384, 391, 393, 394, 404, 409, 410, 411, 415, 419, 520, 542, 543, 629, 631, 634, 638, 644, 647, 668, 675, 679, 716, 727, 736, 737, 738, 754, 756, 770, 830, 849], "doe": [5, 7, 10, 11, 19, 20, 23, 24, 25, 26, 28, 41, 43, 53, 54, 55, 61, 71, 76, 77, 84, 94, 144, 271, 273, 281, 325, 366, 373, 374, 384, 385, 426, 453, 454, 525, 526, 530, 559, 626, 629, 631, 634, 636, 669, 705, 768, 803, 813, 815, 817, 819, 822, 825, 826, 828, 829, 831, 832, 833, 834, 837, 838, 839, 841, 844, 846, 848, 849, 852, 854, 857, 860, 863, 867, 868, 874], "placement": [5, 10, 815], "consid": [5, 7, 10, 11, 20, 23, 24, 25, 26, 33, 34, 54, 59, 65, 77, 82, 115, 144, 265, 266, 325, 331, 336, 348, 366, 369, 373, 384, 427, 431, 442, 519, 623, 626, 629, 634, 642, 667, 677, 746, 747, 748, 749, 775, 788, 821, 825, 826, 834, 836, 842, 844, 847, 848, 849, 856, 857, 860, 864, 868, 872, 874], "instead": [5, 7, 10, 13, 15, 19, 23, 24, 25, 26, 28, 35, 42, 47, 53, 54, 59, 76, 77, 82, 95, 191, 279, 313, 366, 372, 384, 409, 410, 411, 519, 522, 628, 629, 634, 677, 773, 815, 816, 817, 820, 823, 825, 826, 828, 829, 830, 833, 834, 835, 837, 838, 839, 841, 844, 846, 848, 849, 852, 860, 861, 862, 865, 867, 873, 874], "workspac": [5, 7, 9, 10, 20, 23, 24, 25, 26, 816, 831], "ivy_repo": [5, 7, 20], "except": [5, 7, 10, 20, 23, 24, 25, 26, 43, 44, 47, 54, 55, 61, 63, 68, 71, 77, 78, 82, 86, 91, 151, 332, 333, 338, 357, 369, 375, 379, 384, 465, 489, 493, 506, 525, 526, 541, 559, 576, 592, 598, 627, 631, 634, 636, 640, 641, 645, 680, 697, 699, 707, 736, 737, 738, 744, 764, 765, 768, 771, 775, 809, 817, 818, 819, 820, 821, 825, 826, 827, 829, 831, 833, 837, 838, 842, 843, 844, 848, 852], "383": [5, 7, 20], "userwarn": [5, 6, 7, 9, 10, 20, 23, 24, 25, 26, 47], "current": [5, 7, 10, 19, 20, 23, 24, 25, 26, 28, 29, 42, 43, 49, 54, 55, 71, 77, 100, 119, 163, 164, 167, 184, 185, 186, 187, 188, 189, 195, 196, 197, 198, 203, 205, 373, 375, 425, 426, 481, 489, 547, 548, 551, 554, 556, 560, 571, 572, 592, 625, 627, 628, 631, 634, 638, 669, 715, 725, 726, 770, 774, 790, 791, 798, 799, 803, 806, 807, 809, 811, 815, 816, 817, 820, 822, 824, 825, 826, 827, 830, 831, 832, 834, 837, 838, 839, 840, 841, 844, 846, 851, 852, 858, 860, 867, 873, 874], "inplac": [5, 6, 7, 9, 10, 11, 20, 23, 24, 25, 26, 49, 55, 71, 78, 94, 97, 533, 535, 556, 559, 560, 577, 578, 631, 638, 722, 723, 727, 732, 733, 780, 781, 786, 793, 819, 821, 828, 831, 833, 835, 838, 844, 848, 850], "would": [5, 6, 7, 10, 11, 20, 22, 23, 24, 25, 26, 28, 29, 32, 34, 36, 44, 50, 52, 54, 73, 75, 77, 84, 110, 114, 125, 211, 372, 375, 400, 405, 459, 460, 467, 469, 471, 472, 473, 480, 484, 496, 623, 628, 699, 700, 701, 703, 705, 706, 708, 710, 775, 785, 789, 809, 810, 813, 815, 816, 817, 818, 819, 820, 821, 822, 824, 825, 826, 828, 829, 831, 833, 835, 837, 838, 839, 841, 842, 844, 845, 846, 848, 850, 851, 852, 853, 857, 860, 867, 873], "quietli": [5, 7, 10, 20, 23, 24, 25, 26], "lead": [5, 6, 7, 10, 20, 23, 24, 25, 26, 59, 71, 82, 100, 244, 373, 437, 577, 629, 631, 634, 681, 684, 775, 825, 826, 828, 840, 842, 852, 857, 858], "overhead": [5, 6, 7, 10, 20, 21, 23, 24, 25, 26, 28, 29, 31, 852, 860, 870], "view": [5, 6, 7, 10, 20, 23, 24, 25, 26, 54, 61, 77, 99, 130, 141, 375, 459, 460, 461, 467, 469, 471, 472, 473, 476, 480, 487, 493, 496, 552, 626, 631, 636, 699, 700, 701, 703, 705, 706, 708, 710, 816, 817, 830, 867], "control": [5, 7, 10, 20, 23, 24, 25, 26, 36, 54, 77, 144, 293, 325, 364, 366, 372, 375, 396, 397, 398, 464, 490, 577, 626, 631, 634, 667, 824, 826, 827, 836, 837, 838, 839, 844, 848, 849, 854, 860, 867, 873], "manag": [5, 7, 10, 19, 20, 23, 24, 25, 26, 28, 577, 601, 631, 809, 810, 818, 822, 826, 827, 837, 840, 852, 858, 869, 871], "set_inplace_mod": [5, 7, 10, 20, 23, 24, 25, 26, 601, 631], "strict": [5, 7, 10, 20, 23, 24, 25, 26, 577, 601, 631], "rais": [5, 7, 10, 20, 23, 24, 25, 26, 43, 44, 50, 54, 55, 63, 65, 68, 71, 73, 77, 78, 84, 86, 88, 91, 125, 151, 240, 275, 332, 333, 343, 369, 372, 374, 375, 379, 384, 406, 417, 454, 459, 460, 467, 469, 471, 472, 473, 480, 489, 496, 506, 525, 526, 535, 559, 577, 579, 590, 592, 598, 602, 627, 629, 631, 634, 636, 640, 641, 642, 644, 645, 674, 676, 690, 699, 700, 701, 703, 705, 706, 707, 708, 710, 736, 737, 738, 744, 749, 757, 759, 764, 765, 768, 775, 793, 809, 817, 820, 822, 826, 827, 830, 837, 838, 842, 843, 846, 848, 853, 857], "error": [5, 7, 10, 11, 20, 23, 24, 25, 26, 34, 45, 47, 53, 54, 58, 71, 76, 77, 81, 107, 239, 287, 332, 333, 340, 341, 369, 373, 374, 375, 384, 385, 442, 448, 450, 452, 489, 526, 530, 577, 623, 629, 631, 633, 634, 644, 663, 682, 685, 757, 759, 775, 793, 806, 810, 814, 815, 816, 817, 820, 821, 822, 825, 826, 827, 828, 832, 833, 838, 841, 842, 843, 848, 852, 858, 867], "w0307": 5, "25": [5, 11, 40, 42, 43, 44, 53, 54, 55, 59, 60, 63, 67, 70, 76, 77, 78, 81, 82, 85, 86, 90, 99, 100, 115, 134, 220, 221, 231, 237, 239, 250, 255, 270, 275, 278, 280, 283, 284, 285, 290, 312, 366, 374, 384, 415, 450, 453, 520, 529, 557, 558, 574, 589, 626, 629, 631, 634, 635, 638, 639, 644, 647, 664, 668, 673, 689, 694, 716, 723, 727, 734, 736, 737, 738, 755, 756, 758, 763, 818, 824, 836], "919163": 5, "3811": 5, "gpu_resourc": 5, "119": [5, 51, 165], "comput": [5, 7, 25, 26, 28, 29, 35, 36, 41, 42, 44, 48, 53, 54, 55, 56, 58, 59, 60, 65, 67, 70, 71, 76, 77, 78, 79, 81, 82, 83, 90, 94, 95, 97, 110, 114, 210, 220, 227, 230, 232, 237, 238, 239, 244, 245, 246, 248, 249, 255, 256, 257, 264, 265, 266, 267, 269, 270, 273, 278, 279, 297, 301, 305, 311, 314, 315, 327, 328, 329, 332, 333, 335, 339, 341, 344, 346, 347, 351, 353, 358, 359, 360, 361, 362, 363, 364, 366, 369, 370, 371, 372, 373, 374, 375, 378, 382, 384, 391, 392, 393, 394, 395, 400, 401, 404, 405, 406, 408, 409, 410, 411, 412, 415, 416, 417, 420, 421, 423, 425, 426, 427, 428, 430, 431, 433, 435, 438, 440, 442, 445, 446, 448, 450, 451, 452, 453, 454, 455, 456, 475, 478, 491, 498, 500, 511, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 536, 537, 538, 582, 605, 612, 614, 615, 617, 621, 622, 628, 629, 631, 632, 633, 634, 635, 636, 638, 642, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 664, 665, 669, 670, 671, 674, 675, 677, 679, 681, 683, 684, 686, 688, 690, 691, 693, 694, 695, 699, 721, 746, 747, 748, 749, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 770, 775, 789, 792, 803, 809, 816, 824, 825, 826, 834, 836, 838, 841, 843, 844, 846, 849, 852, 854, 857, 858, 860, 861, 863, 865, 867, 868, 870, 871, 873], "capabl": [5, 7, 17, 25, 29, 841, 844], "driver": [5, 634, 685, 852], "997113": 5, "164": 5, "paddle_input": 5, "pixel_valu": 5, "to_tensor": [5, 93, 94, 95, 96, 97, 98], "stop_gradi": [5, 56, 79, 210, 533, 613, 616, 618, 619, 620, 628, 631, 632, 637, 712, 713, 714, 793, 850], "fals": [5, 6, 8, 9, 10, 15, 19, 20, 28, 31, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 97, 98, 99, 100, 102, 103, 104, 107, 108, 109, 110, 111, 112, 113, 114, 115, 120, 125, 126, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 142, 143, 144, 146, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 162, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 193, 194, 199, 201, 204, 205, 207, 210, 211, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 248, 249, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 320, 321, 322, 323, 324, 325, 326, 330, 331, 332, 333, 334, 335, 337, 339, 347, 348, 353, 354, 355, 356, 357, 358, 359, 360, 366, 369, 370, 372, 373, 374, 375, 378, 384, 386, 387, 388, 389, 391, 392, 393, 395, 396, 397, 398, 399, 400, 408, 409, 410, 411, 414, 415, 416, 418, 419, 420, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 433, 434, 435, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 465, 466, 467, 468, 469, 470, 471, 472, 473, 476, 477, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 506, 511, 512, 518, 519, 520, 521, 522, 524, 525, 526, 527, 528, 529, 531, 534, 535, 537, 538, 541, 542, 543, 544, 545, 546, 549, 550, 552, 553, 555, 557, 558, 559, 561, 562, 563, 565, 566, 569, 573, 574, 575, 578, 581, 582, 584, 585, 587, 588, 589, 590, 592, 594, 596, 597, 599, 604, 605, 607, 608, 610, 613, 614, 616, 620, 621, 623, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 721, 725, 726, 727, 728, 735, 736, 737, 738, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 768, 770, 771, 773, 774, 775, 776, 781, 785, 786, 789, 790, 791, 793, 795, 798, 802, 803, 804, 807, 809, 813, 816, 820, 822, 825, 826, 827, 828, 830, 831, 837, 838, 839, 841, 843, 844, 846, 849, 850, 851, 860, 861], "logits_np_transpil": 5, "int": [5, 6, 42, 45, 48, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 94, 97, 99, 103, 110, 114, 115, 124, 125, 129, 131, 132, 133, 134, 135, 138, 142, 143, 144, 151, 158, 161, 162, 165, 172, 187, 201, 202, 203, 210, 211, 220, 227, 228, 229, 230, 231, 232, 244, 247, 271, 275, 280, 286, 289, 297, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 332, 333, 337, 338, 342, 346, 353, 355, 357, 360, 364, 366, 369, 370, 372, 373, 374, 375, 378, 379, 380, 382, 384, 386, 387, 388, 389, 391, 392, 393, 394, 395, 399, 400, 401, 404, 405, 406, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 423, 427, 429, 430, 431, 432, 434, 439, 441, 442, 445, 446, 448, 453, 457, 458, 462, 466, 467, 470, 471, 474, 476, 479, 480, 481, 482, 483, 484, 485, 486, 487, 489, 490, 491, 493, 494, 495, 496, 499, 501, 502, 504, 505, 506, 507, 508, 509, 510, 512, 517, 519, 520, 521, 522, 524, 525, 526, 527, 528, 529, 532, 542, 543, 544, 546, 549, 550, 553, 554, 568, 571, 573, 588, 589, 590, 591, 595, 611, 612, 613, 614, 615, 618, 623, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 658, 660, 665, 667, 668, 675, 676, 681, 686, 688, 689, 690, 691, 693, 694, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 718, 721, 722, 724, 726, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 744, 746, 748, 750, 752, 753, 754, 755, 757, 758, 759, 760, 761, 762, 763, 764, 765, 773, 774, 775, 776, 785, 788, 789, 802, 803, 807, 824, 826, 827, 828, 830, 833, 834, 837, 839, 841, 842, 844, 846, 851, 860], "But": [5, 28, 29, 775, 824, 825, 829, 832, 835, 844, 851], "more": [5, 13, 16, 17, 19, 20, 21, 24, 26, 28, 29, 30, 31, 40, 42, 43, 44, 48, 53, 54, 59, 61, 65, 70, 76, 77, 82, 84, 88, 107, 108, 109, 110, 111, 112, 113, 114, 115, 123, 150, 242, 244, 260, 275, 288, 292, 297, 298, 300, 360, 364, 370, 373, 374, 375, 421, 423, 435, 437, 440, 453, 459, 460, 461, 466, 487, 577, 623, 626, 627, 629, 631, 634, 636, 642, 668, 674, 677, 680, 682, 684, 691, 700, 707, 746, 747, 748, 749, 775, 785, 803, 809, 811, 814, 815, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 828, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 861, 862, 865, 866, 867, 868, 869, 870, 873, 874], "level": [5, 19, 28, 29, 31, 54, 77, 78, 373, 445, 534, 803, 807, 809, 810, 815, 816, 817, 818, 824, 826, 830, 834, 836, 837, 838, 840, 843, 844, 845, 846, 849, 850, 851, 852, 854, 858, 863, 864, 865, 866, 867, 868, 869, 871, 872, 873, 874, 875], "close": [5, 44, 59, 242, 260, 280, 309, 366, 629, 634, 636, 684, 699, 812, 813, 815, 816, 817, 818, 826, 829, 831, 838, 844, 867], "1e": [5, 7, 8, 9, 10, 13, 15, 28, 40, 44, 51, 54, 56, 59, 60, 62, 74, 77, 79, 82, 83, 85, 98, 162, 331, 348, 369, 374, 378, 454, 498, 499, 500, 579, 580, 589, 602, 603, 612, 613, 618, 620, 627, 631, 632, 634, 635, 639, 684, 693, 694, 695, 734, 768, 770, 790, 792, 793, 809, 813, 824, 831, 834, 837, 839, 850, 851], "within": [5, 11, 13, 15, 19, 28, 29, 49, 54, 77, 123, 331, 348, 369, 372, 378, 409, 410, 411, 416, 419, 459, 460, 461, 503, 626, 640, 738, 803, 812, 815, 817, 818, 821, 825, 826, 838, 839, 840, 841, 850, 852, 861, 863, 864, 868], "4th": 5, "decim": [5, 53, 76, 280, 629, 843], "inde": [5, 833, 844, 852, 865], "consist": [5, 9, 10, 11, 23, 24, 25, 26, 28, 29, 67, 71, 237, 244, 270, 372, 373, 416, 426, 629, 634, 644, 669, 670, 756, 790, 791, 812, 820, 821, 825, 826, 832, 837, 846, 856, 868], "One": [5, 44, 54, 55, 61, 63, 77, 78, 84, 86, 97, 375, 459, 460, 461, 464, 481, 490, 493, 543, 631, 636, 640, 703, 736, 821, 824, 826, 828, 834, 839, 841, 846, 848, 849], "kei": [5, 8, 21, 22, 28, 29, 44, 46, 49, 54, 58, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 100, 107, 108, 109, 110, 111, 112, 113, 114, 115, 131, 133, 138, 140, 146, 150, 152, 165, 169, 170, 177, 211, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 248, 249, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 296, 300, 301, 302, 303, 304, 306, 307, 308, 310, 331, 332, 333, 335, 337, 339, 347, 348, 354, 356, 358, 359, 360, 382, 396, 397, 398, 416, 449, 450, 451, 452, 453, 454, 455, 456, 465, 466, 487, 489, 491, 493, 498, 500, 501, 502, 504, 506, 512, 519, 520, 521, 522, 531, 532, 534, 535, 537, 538, 539, 542, 543, 544, 545, 546, 549, 550, 553, 555, 557, 558, 559, 561, 562, 565, 573, 574, 588, 589, 590, 592, 594, 596, 597, 610, 616, 621, 631, 633, 637, 638, 647, 648, 649, 650, 656, 657, 660, 663, 664, 665, 670, 671, 672, 673, 674, 675, 677, 679, 681, 682, 688, 693, 694, 695, 696, 700, 703, 704, 705, 706, 707, 710, 711, 712, 713, 718, 724, 728, 735, 736, 737, 738, 740, 743, 746, 747, 748, 749, 750, 754, 755, 758, 760, 761, 763, 764, 765, 773, 774, 780, 786, 789, 793, 809, 812, 823, 824, 825, 834, 837, 838, 839, 841, 849, 861, 867, 870, 874], "benefit": [5, 29, 809, 816, 821, 824, 837, 844, 848, 849, 852, 857, 858, 865, 869, 872], "trainabl": [5, 13, 15, 19, 25, 26, 28, 29, 46, 786, 790, 791, 794, 809, 829, 847, 849, 850, 861, 862], "further": [5, 19, 71, 100, 775, 817, 820, 821, 825, 828, 830, 833, 834, 837, 838, 840, 841, 845, 846, 849, 850, 857, 858, 872, 873], "train": [5, 13, 15, 26, 28, 29, 45, 54, 56, 58, 77, 79, 81, 97, 372, 373, 378, 396, 397, 398, 445, 498, 500, 612, 613, 618, 632, 633, 656, 658, 660, 663, 788, 789, 790, 791, 792, 809, 824, 827, 834, 849, 850, 851, 852, 858, 861, 865, 866, 871, 873, 874], "few": [5, 814, 815, 817, 824, 826, 827, 833, 834, 836, 837, 839, 841, 844, 846, 847, 848, 849, 850, 858, 867, 869], "cifar": 5, "dataset": [5, 11, 28, 71, 809, 849, 860, 861], "cifar10": 5, "dataload": [5, 849], "optim": [5, 7, 8, 10, 11, 19, 23, 24, 26, 28, 29, 42, 44, 45, 47, 54, 56, 77, 79, 309, 366, 374, 453, 454, 533, 620, 631, 632, 637, 712, 713, 714, 788, 803, 809, 826, 837, 844, 847, 849, 851, 858, 861, 865, 866, 867, 868, 869, 870, 871, 874], "sgd": [5, 42, 793, 867], "to_rgb": 5, "mode": [5, 6, 34, 46, 54, 59, 71, 77, 82, 93, 94, 95, 96, 97, 98, 207, 210, 215, 220, 237, 270, 324, 362, 363, 366, 371, 372, 373, 375, 403, 408, 416, 417, 429, 431, 439, 441, 442, 448, 464, 474, 479, 481, 482, 484, 486, 489, 490, 494, 575, 576, 577, 581, 582, 584, 585, 599, 600, 604, 605, 607, 608, 628, 629, 631, 633, 634, 658, 681, 781, 789, 790, 791, 806, 807, 816, 817, 819, 824, 827, 828, 831, 844, 852, 867, 870], "cv2": [5, 42, 44, 46, 849], "data": [5, 15, 23, 24, 25, 26, 29, 34, 42, 44, 47, 48, 50, 53, 54, 55, 58, 59, 61, 63, 64, 65, 66, 67, 68, 70, 71, 73, 76, 77, 78, 81, 82, 84, 86, 87, 88, 89, 90, 91, 99, 100, 102, 103, 104, 107, 108, 109, 110, 111, 112, 113, 114, 115, 123, 124, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 151, 152, 154, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 178, 179, 180, 181, 183, 189, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 240, 242, 243, 244, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 270, 272, 273, 274, 275, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 297, 298, 299, 300, 309, 310, 311, 312, 313, 314, 315, 326, 327, 328, 329, 330, 332, 333, 334, 351, 356, 364, 366, 369, 372, 373, 375, 379, 383, 384, 387, 396, 397, 398, 414, 416, 418, 424, 426, 446, 464, 486, 489, 490, 492, 493, 505, 506, 507, 508, 509, 515, 519, 520, 521, 525, 528, 529, 546, 559, 561, 562, 565, 592, 623, 626, 628, 629, 631, 633, 634, 636, 638, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 656, 657, 658, 664, 665, 666, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 690, 691, 697, 700, 701, 703, 704, 706, 707, 711, 719, 736, 737, 738, 740, 741, 742, 744, 745, 750, 752, 754, 755, 757, 758, 759, 760, 761, 762, 763, 764, 765, 768, 770, 771, 773, 774, 775, 776, 781, 785, 788, 789, 790, 791, 795, 803, 807, 809, 816, 819, 820, 821, 822, 823, 824, 827, 829, 833, 834, 835, 837, 839, 842, 844, 846, 848, 854, 855, 857, 867, 868, 869, 871, 872, 873], "100": [5, 8, 9, 10, 11, 40, 42, 44, 50, 53, 54, 73, 76, 77, 78, 81, 98, 135, 144, 231, 271, 284, 325, 348, 357, 366, 369, 372, 373, 375, 396, 397, 442, 448, 486, 550, 558, 574, 626, 629, 631, 634, 638, 673, 721, 809, 825, 826, 841, 849, 850, 851, 852, 857, 858, 860], "batch_siz": [5, 42, 44, 47, 54, 58, 63, 77, 81, 86, 372, 374, 391, 392, 393, 409, 410, 411, 412, 456, 633, 640, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 658, 660, 735, 809, 849], "shuffl": [5, 44, 54, 63, 71, 77, 86, 507, 640], "drop_last": 5, "num_work": 5, "learning_r": [5, 11], "paramet": [5, 11, 15, 26, 28, 29, 42, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 97, 99, 100, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 177, 178, 179, 180, 181, 182, 183, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 201, 203, 204, 205, 206, 208, 209, 210, 211, 212, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 366, 369, 370, 371, 372, 373, 374, 375, 378, 379, 380, 382, 384, 385, 386, 387, 388, 389, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 404, 405, 406, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 553, 554, 555, 557, 558, 559, 561, 562, 563, 564, 565, 566, 568, 569, 570, 573, 574, 577, 578, 579, 580, 583, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 629, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 768, 770, 773, 774, 775, 776, 781, 786, 788, 789, 790, 791, 792, 793, 794, 798, 799, 802, 803, 805, 807, 809, 815, 821, 829, 830, 833, 838, 839, 841, 842, 846, 848, 849, 860, 861, 862, 868], "loop": [5, 8, 10, 11, 21, 36, 69, 77, 92, 119, 122, 372, 418, 625, 637, 712, 713, 714, 809, 822, 852, 860], "epoch": [5, 28, 29, 42, 44, 809], "loss_epoch_arr": 5, "loss_arr": 5, "label": [5, 11, 42, 43, 44, 54, 60, 77, 83, 374, 449, 450, 452, 453, 454, 455, 456, 635, 693, 694, 695, 809, 815, 820, 838, 845, 846, 847, 851, 853, 867], "enumer": [5, 6, 42, 44, 778, 809], "loss": [5, 28, 29, 42, 44, 54, 77, 94, 449, 450, 451, 452, 453, 454, 455, 456, 582, 605, 631, 693, 694, 695, 809, 825, 826, 834, 838, 842, 843, 849, 850, 851, 867, 874], "cross_entropi": [5, 44, 60, 83, 635, 695, 809, 824, 834, 837], "backward": [5, 42, 54, 68, 77, 91, 279, 372, 395, 400, 401, 405, 406, 416, 417, 629, 634, 645, 665, 690, 764, 765, 789, 807, 842, 852], "append": [5, 11, 43, 44, 54, 59, 71, 77, 229, 338, 369, 629, 634, 636, 668, 674, 699, 803, 809, 825, 841, 846, 849, 864], "avg_loss": [5, 42], "sum": [5, 42, 44, 53, 54, 55, 58, 59, 60, 67, 71, 76, 77, 78, 81, 82, 83, 90, 94, 99, 100, 210, 220, 262, 286, 329, 353, 366, 369, 373, 374, 375, 378, 384, 415, 425, 449, 450, 451, 452, 453, 454, 455, 456, 486, 503, 525, 526, 543, 573, 574, 628, 629, 631, 633, 634, 635, 644, 656, 663, 675, 684, 688, 691, 693, 755, 756, 788, 790, 802, 809, 824, 826, 834, 836, 837, 838, 846, 860, 861, 862, 864], "len": [5, 6, 11, 42, 44, 50, 54, 59, 77, 82, 136, 313, 322, 323, 366, 372, 373, 384, 406, 417, 429, 432, 442, 448, 529, 626, 634, 670, 689, 809, 824, 825, 830, 837, 838, 841, 848, 851, 860], "00": [5, 7, 9, 11, 42, 44, 47, 54, 55, 59, 77, 78, 82, 242, 309, 340, 341, 366, 372, 394, 400, 404, 405, 546, 590, 629, 631, 634, 671, 681, 773, 832, 841], "23": [5, 10, 11, 23, 24, 25, 26, 40, 42, 44, 53, 54, 59, 63, 73, 76, 77, 78, 81, 86, 133, 232, 235, 252, 253, 254, 277, 279, 280, 281, 283, 290, 335, 336, 369, 372, 375, 384, 391, 392, 394, 404, 409, 410, 411, 415, 419, 464, 520, 526, 626, 629, 633, 634, 638, 641, 652, 654, 668, 672, 675, 683, 685, 686, 716, 723, 727, 736, 737, 738, 745, 809, 825, 841, 846], "79": [5, 40, 42, 54, 55, 77, 78, 81, 86, 99, 237, 372, 394, 404, 415, 537, 538, 629, 631, 738], "averag": [5, 42, 44, 54, 56, 60, 77, 79, 83, 372, 374, 378, 384, 386, 387, 391, 392, 393, 451, 452, 453, 454, 455, 456, 503, 519, 612, 613, 618, 632, 633, 635, 637, 660, 693, 712, 713, 788, 789], "over": [5, 19, 26, 29, 31, 42, 54, 59, 67, 68, 69, 74, 77, 81, 82, 90, 91, 92, 94, 119, 317, 318, 332, 333, 346, 353, 366, 369, 372, 373, 374, 375, 382, 384, 386, 387, 388, 389, 392, 401, 406, 410, 414, 415, 416, 417, 418, 419, 441, 449, 458, 471, 486, 489, 490, 493, 512, 522, 528, 577, 611, 625, 631, 634, 639, 640, 644, 645, 665, 675, 686, 688, 690, 691, 734, 738, 757, 758, 759, 760, 761, 762, 763, 764, 765, 789, 792, 798, 802, 809, 816, 817, 822, 828, 829, 836, 837, 839, 842, 846, 848, 852, 856, 858, 865, 867], "ve": [5, 6, 11, 17, 26, 28, 63, 86, 640, 735, 815, 816, 817, 818, 831, 841, 844, 845, 848, 854], "matplotlib": [5, 11, 23, 24, 25, 26, 42, 43, 44, 47], "pyplot": [5, 11, 42, 43, 44, 47], "plt": [5, 11, 42, 43, 44, 47], "plot": [5, 11, 43, 809, 867], "And": [5, 8, 10, 11, 13, 15, 20, 23, 28, 29, 30, 43, 74, 362, 363, 371, 809, 820, 823, 832, 834, 841, 860], "successfulli": [5, 42, 44, 47, 791, 812, 816, 821], "demonstr": [5, 11, 25, 28, 29, 43, 818, 826, 828, 830, 848], "bring": [5, 28, 29, 820, 840, 841, 846, 847, 854, 857], "pipelin": [5, 809, 811, 819, 820, 821, 839, 842, 851, 854, 856, 861, 867, 868, 873], "hope": [5, 40, 852, 857, 873, 875], "head": [5, 45, 46, 633, 660, 789, 809, 814, 816, 825, 838, 864], "d": [5, 43, 54, 55, 58, 59, 61, 73, 77, 78, 81, 82, 84, 97, 113, 135, 144, 177, 220, 237, 238, 270, 273, 325, 366, 372, 373, 375, 378, 379, 382, 391, 392, 393, 400, 405, 409, 410, 411, 412, 414, 418, 424, 440, 461, 467, 469, 472, 476, 490, 492, 496, 503, 505, 511, 534, 545, 623, 626, 627, 629, 633, 634, 636, 638, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 667, 668, 672, 675, 679, 688, 689, 705, 718, 722, 723, 724, 727, 732, 733, 774, 803, 809, 810, 816, 819, 822, 823, 824, 831, 836, 841, 844, 849, 857, 858, 863], "explor": [5, 11, 13, 15, 19, 23, 24, 25, 28, 29, 34, 35, 36, 815, 816, 817, 826, 831, 844, 847, 851, 867, 870], "local": [5, 6, 8, 10, 11, 13, 15, 17, 19, 20, 21, 22, 23, 24, 25, 26, 29, 33, 34, 35, 42, 43, 44, 47, 378, 503, 554, 631, 810, 816, 820, 823, 831, 834, 839, 841], "own": [5, 7, 13, 15, 19, 28, 29, 34, 809, 816, 820, 825, 826, 829, 830, 837, 838, 842, 846, 852, 854, 857, 858, 863, 866, 867, 872, 873], "sign": [5, 53, 54, 59, 65, 67, 76, 77, 82, 94, 123, 217, 218, 219, 220, 223, 225, 226, 231, 235, 237, 240, 242, 244, 270, 272, 279, 283, 284, 288, 336, 369, 373, 375, 384, 444, 488, 489, 520, 521, 626, 629, 634, 642, 644, 682, 746, 747, 748, 749, 754, 755, 760, 762, 809, 816, 818, 826, 846, 851, 857], "ask": [5, 809, 815, 816, 828, 846, 848, 852, 853, 858], "server": [5, 42, 809, 816, 817, 823, 831, 853, 867], "forward": [5, 6, 9, 15, 28, 29, 42, 44, 54, 77, 362, 371, 372, 395, 400, 401, 405, 406, 416, 417, 786, 788, 789, 791, 793, 807, 809, 816, 822, 829, 836, 841, 842, 844, 851, 852, 860, 867, 868], "milesi": 6, "blob": [6, 42, 44], "2f62e6b1c8e98022a6418d31a76f6abd800e5ae7": 6, "data_load": 6, "l65": 6, "mask_valu": 6, "pil_img": 6, "scale": [6, 8, 42, 54, 58, 62, 77, 79, 81, 85, 109, 208, 209, 301, 302, 305, 316, 346, 364, 366, 369, 372, 373, 378, 390, 396, 397, 398, 406, 408, 413, 417, 433, 498, 499, 500, 619, 623, 628, 632, 633, 639, 656, 660, 663, 734, 773, 775, 776, 788, 789, 793, 803, 867, 869], "is_mask": 6, "h": [6, 54, 55, 58, 77, 78, 81, 372, 378, 392, 393, 410, 411, 503, 542, 544, 631, 633, 638, 646, 649, 650, 651, 652, 653, 654, 655, 718, 722, 724, 727, 732, 810, 819, 823, 824, 825, 861, 863], "size": [6, 11, 13, 15, 20, 23, 24, 30, 31, 33, 34, 35, 42, 44, 47, 54, 55, 58, 59, 61, 63, 64, 71, 77, 78, 81, 82, 84, 86, 87, 94, 95, 99, 100, 131, 134, 208, 209, 210, 309, 312, 316, 327, 328, 329, 330, 337, 353, 360, 366, 369, 370, 372, 373, 374, 375, 378, 379, 382, 384, 386, 387, 388, 389, 390, 391, 392, 408, 409, 410, 412, 413, 419, 420, 427, 430, 442, 448, 449, 451, 465, 467, 479, 489, 491, 493, 499, 500, 503, 507, 512, 524, 525, 526, 527, 528, 529, 568, 573, 626, 628, 631, 633, 634, 636, 640, 641, 645, 658, 660, 663, 665, 668, 672, 675, 679, 681, 684, 690, 699, 704, 705, 706, 735, 741, 744, 764, 765, 773, 775, 776, 789, 803, 809, 837, 839, 841, 844, 849, 860, 862], "neww": 6, "newh": 6, "assert": [6, 11, 43, 45, 47, 71, 535, 631, 781, 813, 819, 820, 831, 834, 837, 838, 839, 841, 842, 848, 849], "too": [6, 54, 77, 220, 237, 244, 270, 375, 489, 629, 788, 815, 816, 817, 820, 826, 830, 842, 852], "small": [6, 11, 44, 53, 54, 59, 62, 76, 77, 82, 85, 237, 244, 270, 271, 331, 348, 369, 373, 374, 378, 437, 454, 498, 499, 500, 629, 634, 639, 677, 680, 682, 734, 788, 792, 809, 816, 825, 828, 834, 839, 844, 846, 850, 852, 860, 861, 868], "pixel": [6, 42, 54, 77, 372, 408], "resampl": 6, "nearest": [6, 54, 77, 220, 237, 270, 280, 342, 369, 372, 384, 408, 529, 629, 844], "bicub": [6, 54, 77, 372, 408, 844], "zero": [6, 42, 50, 51, 53, 54, 55, 56, 58, 59, 61, 64, 65, 67, 68, 73, 74, 76, 77, 79, 81, 82, 86, 87, 90, 91, 95, 109, 111, 112, 113, 115, 126, 127, 129, 131, 136, 138, 139, 140, 142, 143, 146, 149, 150, 218, 219, 220, 222, 223, 224, 225, 226, 229, 231, 232, 234, 235, 236, 237, 239, 242, 243, 244, 251, 252, 253, 254, 260, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 279, 280, 282, 283, 284, 285, 287, 288, 290, 291, 293, 295, 296, 300, 302, 308, 310, 319, 326, 332, 333, 336, 337, 338, 342, 350, 353, 355, 356, 357, 358, 364, 366, 369, 372, 373, 375, 382, 384, 394, 395, 396, 397, 398, 400, 401, 404, 405, 406, 415, 416, 417, 418, 419, 420, 425, 427, 435, 440, 443, 465, 475, 480, 481, 492, 493, 511, 520, 521, 538, 542, 549, 569, 574, 612, 613, 618, 619, 620, 621, 623, 626, 627, 629, 631, 632, 633, 634, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 655, 656, 657, 660, 663, 664, 666, 670, 671, 673, 674, 675, 676, 677, 678, 680, 682, 688, 690, 691, 698, 699, 700, 701, 703, 704, 711, 734, 736, 737, 738, 741, 742, 743, 744, 746, 747, 748, 749, 753, 754, 755, 757, 758, 759, 760, 761, 762, 763, 764, 765, 773, 788, 789, 793, 807, 821, 824, 826, 827, 828, 833, 835, 836, 839, 846, 849, 850, 858, 866], "int64": [6, 54, 63, 64, 66, 67, 74, 86, 87, 89, 90, 139, 152, 158, 161, 163, 165, 169, 170, 174, 181, 313, 366, 382, 384, 512, 520, 521, 626, 627, 641, 643, 644, 736, 741, 742, 743, 752, 754, 755, 760, 762, 773, 774, 826, 838, 841, 846], "ndim": [6, 54, 59, 64, 77, 82, 87, 99, 103, 373, 375, 441, 442, 448, 459, 460, 461, 474, 482, 484, 494, 611, 631, 634, 641, 681, 684, 744, 824, 834, 841], "newaxi": [6, 624], "transpos": [6, 25, 28, 29, 46, 54, 58, 59, 71, 77, 81, 82, 99, 373, 421, 439, 441, 443, 518, 633, 634, 646, 648, 650, 652, 653, 654, 658, 674, 678, 680, 686, 775, 789, 809, 831, 837, 848, 851, 861], "255": [6, 25, 28, 29, 42, 43, 44, 46, 58, 77, 81, 231, 629, 655, 809, 861], "car": 6, "full_img": 6, "from_numpi": [6, 849], "permut": [6, 9, 42, 61, 84, 99, 382, 511, 636, 701, 708, 861], "img_numpi": 6, "torch_unet": 6, "unet_carvana": 6, "ivy_unet": 6, "n_channel": 6, "n_class": 6, "effici": [6, 8, 9, 10, 17, 18, 20, 21, 28, 29, 30, 31, 54, 59, 77, 82, 373, 374, 437, 453, 582, 605, 631, 634, 677, 809, 816, 817, 824, 834, 835, 837, 841, 843, 846, 849, 852, 861, 867, 869, 870], "l62": 6, "mask_to_imag": 6, "ndarrai": [6, 50, 54, 55, 73, 77, 95, 124, 125, 137, 372, 373, 375, 384, 417, 442, 486, 525, 526, 596, 626, 631, 798, 802, 815, 821, 826, 827, 830, 833, 837, 838, 839, 842, 844, 846, 848, 851, 854], "isinst": [6, 11, 26, 28, 29, 830, 838, 841, 842, 850, 851], "uint8": [6, 25, 28, 29, 44, 152, 159, 163, 174, 177, 182, 188, 627, 773, 774, 826, 841], "elif": [6, 8, 825, 830, 837, 838, 839], "bool": [6, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 99, 100, 107, 108, 109, 110, 111, 112, 113, 114, 115, 124, 125, 126, 131, 132, 133, 134, 135, 136, 138, 140, 146, 149, 150, 152, 153, 155, 156, 157, 158, 159, 160, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 177, 179, 185, 189, 193, 194, 196, 197, 199, 201, 204, 205, 210, 211, 213, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 248, 249, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 320, 321, 322, 323, 324, 326, 331, 332, 333, 334, 335, 337, 339, 347, 348, 353, 354, 356, 358, 359, 360, 366, 369, 370, 372, 373, 374, 375, 378, 384, 391, 392, 393, 395, 396, 397, 398, 408, 409, 410, 411, 414, 416, 418, 420, 427, 431, 434, 435, 439, 441, 442, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 465, 466, 467, 469, 470, 471, 472, 473, 476, 480, 484, 487, 489, 490, 491, 493, 496, 498, 500, 501, 502, 503, 504, 506, 518, 519, 520, 521, 522, 524, 525, 526, 527, 528, 529, 531, 534, 535, 537, 538, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 569, 573, 574, 578, 587, 588, 589, 590, 592, 594, 596, 597, 610, 613, 614, 616, 618, 619, 620, 621, 623, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 656, 657, 658, 659, 660, 663, 664, 665, 670, 671, 672, 673, 674, 675, 677, 678, 679, 681, 682, 683, 684, 688, 689, 691, 693, 694, 695, 696, 699, 700, 701, 703, 704, 705, 706, 707, 708, 710, 711, 712, 713, 714, 715, 716, 721, 722, 723, 725, 726, 727, 732, 733, 735, 736, 737, 738, 740, 741, 742, 743, 744, 746, 747, 748, 749, 750, 753, 754, 755, 757, 758, 759, 760, 761, 762, 763, 764, 765, 770, 771, 773, 774, 775, 785, 789, 792, 793, 802, 803, 807, 826, 828, 830, 837, 838, 841, 842, 844, 846, 851, 860, 861], "fromarrai": [6, 25, 28, 29, 44], "interpol": [6, 42, 54, 77, 350, 369, 372, 384, 529, 633, 660, 844, 867], "bilinear": [6, 54, 77, 372, 408, 844], "torch_mask": 6, "squeez": [6, 42, 61, 84, 636, 867], "torch_result": 6, "to_numpi": [6, 11, 28, 29, 40, 43, 44, 47, 55, 78, 631, 809, 831, 839, 849, 864], "give": [6, 20, 30, 40, 54, 58, 77, 81, 176, 362, 371, 372, 415, 419, 627, 633, 636, 646, 647, 648, 649, 651, 653, 655, 703, 788, 809, 816, 817, 819, 822, 825, 826, 828, 829, 831, 832, 833, 841, 858, 867, 871], "img_tf": 6, "math": [6, 45, 95, 287, 629, 826, 837, 838, 839, 851, 865], "lot": [6, 825, 826, 835, 841, 852, 857, 858, 866], "far": [6, 28, 29, 638, 715, 726, 803, 827, 828, 847, 872, 873], "space": [6, 50, 53, 54, 55, 73, 76, 77, 78, 123, 134, 135, 289, 346, 369, 374, 451, 542, 546, 626, 629, 631, 844, 857], "del": [6, 825], "empty_cach": 6, "permute_dim": [6, 61, 84, 636, 831], "usr": [6, 8, 10, 42, 43, 44, 47, 816], "dist": [6, 42, 43, 44, 47], "func_wrapp": [6, 48, 53, 54, 70, 76, 77, 107, 108, 109, 110, 111, 112, 113, 114, 115, 288, 292, 297, 298, 300, 364, 623, 629, 785, 827, 838, 843], "242": [6, 77], "mani": [6, 28, 29, 32, 61, 71, 84, 144, 325, 366, 626, 636, 705, 809, 815, 816, 817, 821, 822, 824, 825, 826, 827, 828, 829, 833, 834, 835, 837, 838, 839, 841, 844, 846, 848, 849, 852, 856, 857, 858, 863, 867, 870, 873, 874], "perform": [6, 7, 11, 21, 23, 24, 25, 26, 28, 29, 31, 33, 40, 42, 50, 54, 58, 59, 67, 68, 73, 77, 78, 81, 82, 90, 91, 110, 114, 134, 135, 207, 215, 237, 270, 291, 338, 360, 369, 370, 372, 373, 375, 382, 384, 395, 396, 397, 398, 400, 401, 405, 406, 414, 416, 442, 458, 512, 520, 521, 542, 543, 544, 557, 558, 559, 575, 585, 623, 626, 628, 629, 631, 633, 634, 637, 638, 644, 645, 656, 659, 675, 684, 686, 691, 712, 713, 714, 722, 723, 754, 755, 764, 765, 768, 785, 789, 803, 807, 820, 821, 822, 824, 826, 827, 828, 833, 834, 835, 837, 838, 839, 841, 842, 844, 846, 849, 852, 858, 860, 861, 864, 867, 868, 869, 870, 871, 872, 874], "17": [6, 10, 11, 23, 24, 25, 26, 40, 42, 44, 47, 48, 54, 59, 70, 76, 77, 78, 79, 81, 82, 86, 100, 109, 110, 135, 220, 237, 262, 270, 301, 309, 360, 366, 372, 375, 391, 392, 400, 401, 404, 405, 409, 410, 415, 419, 471, 543, 558, 612, 614, 623, 626, 629, 631, 632, 633, 634, 638, 640, 647, 656, 657, 668, 672, 723, 736, 737, 738, 740, 824], "factor": [6, 11, 54, 56, 58, 59, 77, 79, 81, 82, 93, 94, 95, 96, 97, 208, 209, 210, 372, 373, 378, 406, 417, 431, 432, 442, 445, 447, 448, 503, 612, 613, 618, 619, 628, 632, 633, 634, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 664, 773, 775, 776, 788, 789, 793, 830, 857], "inc": 6, "unetdoubleconv": 6, "down1": 6, "unetdown": 6, "128": [6, 9, 28, 29, 42, 51, 53, 58, 74, 76, 81, 100, 165, 241, 372, 394, 404, 542, 552, 627, 629, 631, 633, 634, 648, 650, 655, 679, 809], "down2": 6, "down3": 6, "down4": 6, "1024": [6, 9, 42, 43, 809], "up1": 6, "unetup": 6, "up2": 6, "up3": 6, "up4": 6, "outc": 6, "unetoutconv": 6, "x1": [6, 19, 28, 29, 47, 51, 53, 54, 55, 59, 64, 74, 76, 77, 78, 82, 87, 89, 99, 100, 104, 150, 160, 176, 183, 203, 220, 225, 227, 229, 230, 231, 232, 237, 238, 244, 245, 246, 247, 248, 249, 255, 256, 257, 262, 263, 264, 266, 267, 268, 269, 270, 273, 275, 279, 286, 291, 310, 331, 336, 343, 344, 345, 347, 349, 354, 358, 366, 369, 373, 375, 384, 443, 475, 519, 531, 534, 627, 628, 629, 631, 634, 641, 643, 665, 672, 674, 679, 683, 686, 687, 690, 745, 752, 770, 795, 809, 820, 826, 828, 830, 833, 837, 838, 861, 862], "x2": [6, 19, 28, 29, 51, 53, 54, 55, 59, 64, 74, 76, 77, 78, 82, 87, 99, 100, 104, 150, 176, 183, 203, 220, 225, 227, 229, 230, 231, 232, 237, 238, 244, 245, 246, 247, 248, 249, 255, 256, 257, 262, 263, 264, 266, 267, 268, 269, 270, 273, 275, 279, 286, 291, 331, 336, 343, 344, 345, 347, 349, 354, 358, 369, 373, 375, 384, 429, 443, 475, 519, 531, 534, 627, 628, 629, 631, 634, 641, 665, 672, 674, 679, 683, 686, 687, 690, 745, 770, 795, 820, 826, 828, 830, 833, 837, 838], "x3": [6, 51, 55, 150, 531, 627, 631], "x4": 6, "x5": 6, "in_channel": 6, "out_channel": 6, "mid_channel": 6, "double_conv": 6, "with_bia": [6, 789, 809, 850, 861], "batchnorm2d": [6, 9, 792], "downscal": [6, 55, 78, 537, 538, 559, 631], "maxpool": [6, 9], "doubl": 6, "conv": [6, 633, 789, 844], "maxpool_conv": 6, "upscal": 6, "scale_factor": [6, 54, 77, 372, 408, 844], "align_corn": [6, 54, 77, 372, 408, 844], "conv2dtranspos": [6, 789], "valid": [6, 42, 44, 54, 58, 68, 77, 81, 91, 94, 95, 154, 372, 373, 391, 392, 393, 409, 410, 411, 412, 414, 415, 419, 440, 448, 562, 627, 631, 633, 636, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 699, 707, 764, 765, 773, 774, 789, 802, 816, 822, 826, 828, 832, 836, 839, 841, 860, 868], "bhwc": 6, "diff_h": 6, "diff_w": 6, "pad_width": [6, 54, 61, 77, 84, 375, 481, 636, 698, 711], "constant_pad": [6, 61, 84, 636], "concat": [6, 40, 45, 55, 61, 71, 84, 210, 546, 628, 631, 636, 711, 839, 844, 846, 860], "root": [7, 9, 10, 23, 24, 25, 26, 42, 43, 44, 47, 53, 76, 284, 629, 811, 815, 816, 817, 823, 831, 838, 849], "broken": [7, 10, 23, 24, 25, 26, 863, 867], "permiss": [7, 10, 23, 24, 25, 26, 816, 825], "conflict": [7, 10, 23, 24, 25, 26, 34, 816, 817, 825, 838, 849], "behaviour": [7, 10, 23, 24, 25, 26, 109, 112, 271, 623, 629, 814, 817, 819, 820, 821, 824, 826, 827, 829, 830, 833, 834, 835, 837, 838, 841, 842, 848], "system": [7, 10, 23, 24, 25, 26, 44, 373, 443, 634, 683, 773, 809, 816, 817, 818, 822, 825, 826, 852, 861, 865, 867, 870, 872, 874], "recommend": [7, 10, 23, 24, 25, 26, 265, 266, 279, 374, 451, 629, 644, 758, 761, 811, 816, 822, 823, 832, 835, 836, 860], "virtual": [7, 10, 23, 24, 25, 26, 817, 838, 857, 870, 871], "pypa": [7, 10, 23, 24, 25, 26], "venv": [7, 10, 23, 24, 25, 26], "01": [7, 9, 23, 24, 26, 44, 50, 54, 55, 56, 59, 77, 78, 79, 82, 86, 135, 262, 280, 281, 309, 315, 340, 341, 348, 366, 372, 394, 404, 405, 546, 589, 590, 612, 613, 618, 626, 629, 631, 632, 634, 637, 640, 671, 681, 713, 714, 737, 738, 773, 822, 851], "22": [7, 11, 23, 24, 25, 26, 40, 42, 44, 47, 48, 53, 54, 55, 63, 67, 70, 77, 78, 81, 86, 110, 115, 232, 240, 301, 305, 364, 372, 373, 374, 375, 380, 384, 391, 392, 394, 409, 410, 411, 415, 419, 425, 449, 464, 510, 520, 543, 574, 610, 623, 629, 633, 634, 638, 641, 644, 656, 657, 668, 673, 679, 683, 723, 733, 736, 737, 738, 745, 755, 756, 816, 824, 830], "50": [7, 10, 11, 28, 29, 40, 44, 54, 67, 76, 77, 78, 236, 276, 354, 369, 372, 373, 375, 401, 425, 433, 486, 544, 550, 557, 558, 574, 589, 629, 631, 634, 638, 641, 644, 673, 679, 690, 716, 718, 744, 756, 773, 776, 836, 848, 860, 861], "099601": 7, "099643": 7, "100960": 7, "108768": 7, "core": [7, 23, 24, 26, 42, 43, 44, 46, 47, 54, 77, 94, 97, 201, 373, 431, 442, 447, 448, 628, 816, 827, 831, 841, 851, 856, 865, 866, 867, 868, 872, 874], "cpu_feature_guard": [7, 23, 24, 26], "182": [7, 23, 24, 26, 77], "binari": [7, 11, 23, 24, 26, 54, 55, 58, 60, 77, 81, 83, 227, 230, 232, 267, 287, 372, 374, 418, 453, 456, 629, 633, 635, 656, 660, 693], "instruct": [7, 23, 24, 26, 71, 100, 809, 815, 816, 820, 830, 832, 839, 841, 853, 865, 868, 871, 873], "critic": [7, 23, 24, 26, 28, 29, 807, 867, 873], "oper": [7, 19, 20, 23, 24, 25, 26, 28, 29, 30, 34, 41, 44, 50, 51, 53, 54, 55, 58, 71, 73, 74, 76, 77, 78, 81, 100, 115, 134, 135, 177, 207, 215, 220, 222, 231, 234, 237, 244, 259, 261, 270, 271, 275, 279, 282, 287, 299, 307, 327, 328, 329, 361, 364, 366, 371, 372, 374, 375, 386, 387, 388, 389, 391, 392, 393, 399, 400, 401, 405, 409, 410, 411, 412, 414, 415, 417, 419, 420, 449, 486, 488, 535, 542, 543, 544, 592, 623, 626, 627, 628, 629, 631, 633, 634, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 660, 675, 686, 688, 760, 762, 773, 776, 789, 803, 807, 809, 815, 816, 819, 820, 821, 824, 826, 827, 828, 829, 830, 834, 837, 838, 841, 844, 846, 849, 850, 854, 856, 860, 863, 864, 865, 866, 867, 868, 870, 871, 872, 873, 874], "avx2": [7, 23, 24, 26], "fma": [7, 23, 24, 26], "rebuild": [7, 23, 24, 26, 71, 100], "appropri": [7, 8, 19, 23, 24, 26, 28, 29, 55, 64, 69, 87, 92, 220, 237, 244, 270, 331, 348, 369, 629, 641, 741, 809, 815, 816, 817, 830, 835, 841], "flag": [7, 23, 24, 26, 71, 193, 374, 384, 451, 519, 628, 633, 660, 770, 781, 792, 817, 826, 827, 837, 838, 839, 841, 860, 861], "332076": 7, "lstm": [7, 633, 659, 789, 846, 867], "torch_lstm": 7, "rand": [7, 26, 28, 29, 44, 802, 803, 809, 860], "tf_lstm": 7, "26": [7, 23, 24, 25, 26, 40, 42, 44, 47, 53, 54, 62, 63, 77, 78, 79, 86, 232, 237, 283, 372, 373, 394, 430, 440, 557, 612, 629, 631, 632, 633, 634, 638, 639, 644, 655, 668, 679, 686, 716, 734, 736, 737, 756], "221321": 7, "common_runtim": [7, 43], "gpu_devic": 7, "1929": 7, "job": [7, 28, 29, 809, 823, 825, 861], "localhost": 7, "replica": 7, "14699": 7, "mb": [7, 9, 42, 44, 47, 825], "tesla": 7, "v100": [7, 8], "pcie": [7, 857], "16gb": 7, "pci": 7, "bu": [7, 82, 857], "id": [7, 11, 43, 54, 77, 193, 327, 328, 329, 366, 554, 628, 631, 809, 814, 816, 821, 823, 824, 832, 836, 841, 853, 875], "0001": [7, 53, 54, 77, 280, 281, 373, 442, 448, 773, 776, 793], "625856": 7, "454": 7, "8902": 7, "32": [7, 11, 26, 28, 29, 40, 42, 43, 44, 53, 54, 63, 76, 77, 81, 82, 86, 99, 100, 109, 161, 219, 231, 232, 241, 255, 261, 277, 280, 281, 335, 369, 372, 373, 375, 384, 392, 393, 394, 404, 414, 415, 425, 429, 464, 520, 542, 558, 623, 627, 629, 631, 633, 634, 640, 641, 644, 648, 650, 651, 655, 657, 674, 679, 690, 736, 737, 738, 745, 756, 773, 776, 809, 825, 826, 836, 849, 872], "original_output": 7, "constant": [7, 13, 15, 20, 23, 24, 30, 33, 35, 40, 54, 61, 62, 77, 84, 85, 94, 95, 319, 366, 372, 374, 375, 418, 453, 454, 481, 636, 638, 639, 698, 721, 734, 788, 792, 809, 834, 839, 842, 850, 851, 852, 860, 862], "transpiled_output": 7, "verifi": [7, 11, 25, 322, 323, 366, 815, 826, 827, 838, 841, 842], "toler": [7, 54, 59, 77, 82, 331, 348, 369, 373, 427, 442, 448, 634, 677, 680, 768, 770, 820, 839, 867], "benchmark": [7, 869], "n_run": 7, "original_torch_tim": 7, "autograph": 7, "experiment": [7, 807, 813, 817, 826, 838, 842, 846, 867], "do_not_convert": 7, "compiled_tf_lstm": 7, "transpiled_tf_tim": 7, "comparison": [7, 9, 54, 77, 238, 273, 334, 369, 374, 453, 454, 629, 634, 685, 768, 830], "original_tf_lstm": 7, "kera": [7, 12, 13, 15, 17, 18, 26, 28, 29, 45, 46, 786, 809, 858, 861, 873], "time_major": [7, 77, 372, 418, 633, 659], "return_sequ": [7, 789], "original_tf_tim": 7, "slower": [7, 21, 838], "698440": 7, "local_tsl": 7, "tsl": 7, "subprocess": 7, "304": 7, "cannot": [7, 42, 43, 44, 47, 54, 287, 459, 460, 461, 629, 817, 820, 822, 826, 838, 846, 851, 873], "spawn": [7, 570, 631], "child": 7, "No": [7, 28, 29, 42, 54, 60, 77, 83, 374, 451, 452, 453, 455, 456, 635, 693, 817, 825, 826, 867], "directori": [7, 42, 43, 44, 47, 586, 609, 628, 631, 807, 811, 815, 816, 817, 823, 825, 831, 838, 841, 853], "725307350738295x": 7, "440824652724787x": 7, "openmim": 8, "mim": 8, "0rc8": 8, "get_model": 8, "list_model": 8, "mmengin": 8, "configdict": 8, "saniti": [8, 10, 11, 28, 838], "checkpoint": [8, 9, 45, 852], "correct": [8, 13, 15, 24, 34, 40, 42, 44, 67, 90, 183, 373, 444, 627, 636, 644, 696, 761, 763, 770, 773, 809, 813, 815, 817, 819, 824, 825, 826, 827, 830, 831, 833, 834, 837, 839, 841, 861], "against": [8, 51, 54, 55, 59, 64, 74, 76, 77, 78, 82, 87, 150, 269, 288, 331, 334, 337, 348, 369, 384, 525, 526, 527, 528, 529, 566, 627, 629, 631, 634, 641, 674, 675, 677, 680, 741, 841, 846, 852, 856, 867], "zoo": 8, "checkpoint_nam": [8, 10, 28], "convnext": 8, "tiny_32xb128": 8, "noema_in1k": 8, "openmmlab": 8, "dure": [8, 10, 21, 23, 28, 31, 33, 34, 52, 56, 67, 71, 75, 79, 90, 211, 372, 396, 397, 398, 577, 598, 612, 613, 618, 628, 631, 632, 633, 634, 637, 644, 656, 674, 712, 713, 714, 761, 763, 781, 792, 793, 807, 816, 824, 826, 827, 830, 834, 835, 837, 838, 839, 840, 841, 844, 852, 860, 867, 868, 873], "get_scal": 8, "cfg": [8, 832], "input_shap": [8, 15, 26, 28, 29, 809], "block": [8, 28, 29, 32, 33, 34, 35, 373, 433, 809, 817, 824, 826, 830, 834, 841, 845, 847, 851, 852, 854, 861, 872, 874], "_config": 8, "train_pipelin": 8, "tensor_imag": 8, "final": [8, 10, 13, 15, 17, 25, 28, 29, 34, 40, 41, 50, 54, 55, 77, 78, 94, 122, 134, 135, 319, 366, 372, 417, 546, 625, 626, 631, 633, 658, 659, 660, 803, 815, 817, 818, 820, 821, 823, 825, 826, 828, 829, 834, 836, 837, 838, 840, 844, 845, 849, 860, 861, 863, 873], "transpiled_graph": [8, 10, 28], "what": [8, 10, 17, 22, 28, 29, 32, 33, 36, 41, 42, 372, 406, 417, 775, 803, 809, 815, 817, 819, 824, 825, 828, 829, 832, 833, 835, 836, 837, 838, 839, 841, 845, 846, 848, 849, 850, 851, 852, 857, 858, 863, 868, 869, 872], "improv": [8, 10, 11, 28, 31, 812, 817, 826, 833, 834, 844, 846, 854, 858, 860, 865, 867, 869, 870], "For": [8, 9, 10, 11, 19, 21, 28, 29, 31, 34, 36, 50, 54, 59, 65, 77, 82, 123, 136, 217, 218, 219, 220, 222, 223, 224, 225, 226, 233, 234, 235, 237, 238, 240, 242, 243, 244, 251, 252, 253, 258, 259, 260, 261, 262, 265, 270, 272, 273, 275, 279, 280, 281, 282, 283, 284, 287, 288, 290, 327, 328, 329, 332, 333, 335, 356, 366, 369, 373, 375, 439, 441, 461, 481, 484, 626, 629, 634, 636, 642, 644, 682, 684, 688, 696, 707, 746, 747, 748, 749, 757, 759, 760, 762, 774, 786, 815, 816, 817, 819, 821, 822, 824, 825, 826, 827, 828, 829, 830, 831, 833, 834, 835, 837, 838, 839, 840, 841, 842, 844, 846, 848, 849, 850, 851, 852, 853, 856, 857, 858, 860, 864, 865, 868, 873, 874], "issu": [8, 10, 374, 451, 788, 810, 811, 812, 813, 814, 816, 818, 820, 822, 823, 825, 826, 827, 828, 830, 831, 838, 841, 842, 844, 846, 850, 852, 858, 860], "107960": [8, 10], "export": [8, 10, 43, 825, 866, 873], "lc_all": [8, 10], "en_u": [8, 10], "utf": [8, 10], "ld_library_path": [8, 10], "lib64": [8, 10], "nvidia": [8, 10, 23, 24, 25, 26, 42, 44, 47, 871, 872], "library_path": [8, 10], "stub": [8, 10, 823], "ldconfig": [8, 10], "_f": [8, 10, 28], "comp_model": [8, 10, 28], "equival": [8, 10, 28, 59, 82, 94, 95, 123, 231, 244, 265, 266, 279, 280, 375, 465, 489, 495, 626, 629, 634, 677, 680, 683, 691, 798, 837, 838, 844, 849, 851, 853, 861], "just": [8, 10, 11, 13, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 40, 42, 44, 54, 59, 67, 82, 94, 97, 144, 325, 366, 373, 441, 626, 634, 644, 677, 756, 781, 789, 809, 813, 816, 817, 818, 820, 822, 825, 826, 827, 828, 829, 831, 834, 835, 837, 838, 839, 841, 846, 848, 849, 852, 857, 858, 861, 867, 868, 873], "np_imag": [8, 25, 28, 29], "jax_imag": 8, "hk": [8, 10, 28, 42, 46, 809, 851, 861], "rng_kei": [8, 10, 28, 809, 861], "random": [8, 10, 13, 15, 20, 21, 22, 23, 24, 26, 28, 29, 30, 31, 33, 34, 35, 42, 44, 45, 54, 58, 71, 77, 81, 320, 321, 322, 323, 324, 366, 373, 374, 431, 442, 448, 454, 505, 506, 507, 508, 509, 633, 656, 735, 736, 737, 738, 739, 740, 773, 775, 788, 802, 803, 809, 815, 827, 839, 841, 842, 851, 861, 862, 867], "prngkei": [8, 10, 21, 22, 28, 29, 42, 809, 851, 861], "42": [8, 10, 11, 21, 22, 26, 28, 29, 40, 42, 43, 48, 63, 70, 79, 86, 115, 231, 372, 394, 404, 612, 616, 623, 629, 632, 634, 639, 640, 644, 675, 679, 734, 735, 736, 737, 738, 739, 756, 809, 846, 851, 861], "jax_mlp_forward": 8, "param": [8, 10, 11, 28, 42, 43, 44, 46, 71, 77, 78, 100, 532, 549, 550, 631, 795, 809, 851, 861], "init": [8, 10, 28, 42, 44, 54, 77, 373, 431, 442, 448, 809, 820, 851, 861], "rng": [8, 10, 28, 42, 809, 851, 861], "both": [8, 9, 10, 11, 13, 15, 23, 25, 28, 29, 33, 34, 41, 43, 50, 53, 54, 55, 58, 59, 73, 76, 77, 78, 81, 82, 123, 124, 125, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 145, 146, 152, 168, 172, 175, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 237, 238, 240, 242, 243, 244, 248, 249, 250, 251, 252, 253, 257, 259, 260, 261, 262, 264, 265, 266, 267, 270, 272, 273, 274, 275, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 310, 326, 332, 333, 335, 336, 338, 343, 348, 366, 369, 372, 373, 375, 379, 384, 391, 392, 393, 394, 396, 397, 398, 404, 409, 410, 411, 416, 418, 427, 475, 481, 489, 492, 493, 505, 519, 522, 549, 553, 555, 557, 566, 588, 597, 621, 622, 626, 627, 629, 631, 632, 633, 634, 636, 639, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 655, 656, 657, 659, 660, 663, 664, 665, 666, 667, 668, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 690, 691, 692, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 734, 741, 742, 744, 745, 746, 747, 748, 749, 750, 753, 757, 758, 759, 760, 761, 762, 763, 764, 765, 768, 789, 809, 813, 815, 817, 822, 824, 825, 826, 827, 828, 829, 830, 831, 833, 834, 837, 838, 841, 844, 846, 848, 849, 850, 851, 852, 860, 861, 867, 870, 872, 873, 874], "each": [8, 10, 11, 21, 22, 23, 28, 29, 31, 32, 33, 35, 42, 48, 50, 51, 53, 54, 55, 56, 58, 59, 61, 64, 65, 67, 71, 74, 76, 77, 78, 79, 81, 82, 84, 87, 88, 90, 94, 95, 97, 99, 100, 108, 109, 111, 112, 113, 115, 119, 136, 150, 162, 165, 210, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 242, 243, 244, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 270, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 292, 294, 295, 300, 302, 303, 304, 306, 307, 308, 313, 324, 327, 328, 329, 335, 343, 347, 351, 356, 359, 364, 366, 369, 372, 373, 375, 378, 379, 382, 384, 391, 392, 393, 396, 397, 398, 401, 409, 410, 411, 412, 415, 417, 418, 419, 426, 427, 432, 441, 442, 446, 448, 459, 460, 461, 465, 466, 467, 472, 473, 475, 476, 478, 480, 481, 484, 486, 495, 496, 503, 505, 512, 517, 518, 519, 520, 521, 522, 531, 534, 542, 549, 550, 566, 591, 611, 613, 614, 616, 618, 619, 620, 623, 625, 626, 627, 628, 629, 631, 632, 633, 634, 636, 638, 640, 641, 642, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 658, 660, 664, 665, 666, 669, 670, 671, 674, 676, 677, 678, 680, 682, 683, 684, 689, 698, 702, 704, 705, 707, 709, 711, 721, 728, 735, 744, 746, 747, 749, 755, 756, 763, 770, 773, 775, 781, 789, 792, 793, 794, 803, 807, 812, 813, 815, 816, 817, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 837, 838, 839, 841, 842, 843, 844, 846, 848, 849, 851, 852, 856, 857, 858, 860, 861, 863, 864, 868, 870, 873], "timeit": [8, 10, 11, 21, 28, 29, 45, 47], "06": [8, 11, 23, 44, 51, 63, 76, 79, 98, 107, 162, 219, 235, 372, 394, 404, 618, 623, 627, 632, 738, 768, 770, 841, 849], "m": [8, 9, 10, 11, 28, 41, 43, 45, 47, 50, 54, 59, 63, 76, 77, 82, 86, 99, 136, 142, 143, 144, 264, 325, 326, 366, 372, 373, 374, 375, 379, 395, 426, 431, 432, 434, 435, 450, 461, 472, 473, 487, 505, 506, 507, 508, 509, 626, 634, 638, 640, 664, 666, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 688, 723, 736, 737, 738, 809, 816, 817, 819, 825, 846], "per": [8, 10, 11, 21, 42, 44, 54, 58, 77, 81, 316, 366, 372, 373, 375, 391, 392, 393, 409, 410, 411, 412, 441, 488, 633, 647, 649, 650, 651, 652, 655, 660, 789, 817, 825, 835, 838, 849], "block_until_readi": 8, "08": [8, 54, 67, 77, 86, 223, 331, 348, 369, 372, 374, 394, 404, 454, 629, 737, 738, 763, 768, 773, 832], "\u00b5": [8, 10, 11, 21], "made": [8, 10, 28, 54, 61, 77, 373, 375, 433, 459, 460, 461, 707, 815, 817, 818, 820, 821, 824, 825, 830, 832, 834, 836, 837, 838, 842, 844, 846, 848, 857, 867], "significantli": [8, 10, 28, 54, 59, 77, 82, 373, 446, 634, 684, 825, 856, 865], "line": [8, 10, 11, 17, 18, 21, 22, 25, 28, 29, 31, 32, 43, 44, 287, 629, 807, 809, 816, 820, 821, 825, 827, 828, 830, 838, 841, 844, 847, 848, 849, 850, 858, 861, 870], "even": [8, 25, 28, 29, 54, 77, 94, 237, 270, 275, 280, 375, 384, 481, 519, 629, 816, 817, 818, 820, 822, 825, 826, 827, 829, 833, 834, 837, 838, 839, 844, 848, 849, 850, 851, 852, 857, 858, 873], "better": [8, 11, 31, 40, 46, 47, 815, 819, 838, 839, 842, 844, 845, 848, 849, 850, 858, 870], "3x": 8, "increas": [8, 10, 11, 21, 28, 31, 54, 59, 61, 77, 82, 84, 97, 375, 384, 481, 522, 634, 636, 689, 698, 711, 775, 826, 830, 838, 842, 844, 856, 860, 867], "execut": [8, 10, 19, 20, 21, 23, 24, 25, 26, 28, 29, 31, 33, 36, 43, 45, 47, 120, 122, 598, 625, 628, 631, 816, 817, 823, 824, 825, 826, 827, 828, 830, 834, 835, 837, 841, 844, 846, 848, 851, 852, 854, 860, 863, 867, 868, 869, 870, 871, 873], "train2017": [8, 10, 25, 28, 29, 809, 861], "000000283921": [8, 10, 28], "out_torch": [8, 10, 28], "et": [8, 633, 634, 660, 684], "took": [8, 76, 277], "out_jax": [8, 10, 28], "66m": 8, "53m": 8, "That": [8, 10, 13, 15, 20, 21, 22, 23, 24, 28, 29, 30, 31, 32, 33, 34, 35, 42, 279, 374, 453, 629, 802, 816, 817, 821, 841, 848, 849, 850, 868], "pretti": [8, 10, 28, 29, 42, 813, 831, 849, 873], "much": [8, 10, 11, 19, 20, 26, 28, 29, 30, 31, 42, 97, 331, 348, 369, 788, 815, 816, 817, 821, 824, 826, 834, 837, 838, 839, 842, 843, 844, 846, 848, 849, 857, 865, 867, 873, 874], "achiev": [8, 10, 11, 28, 809, 810, 812, 818, 825, 826, 834, 835, 841, 844, 849, 851, 854], "solid": [8, 10, 28], "associ": [9, 54, 59, 77, 82, 220, 270, 375, 384, 458, 522, 629, 634, 677, 680, 692, 770, 817, 826, 834, 835, 838, 839, 841, 852], "python": [9, 13, 19, 31, 36, 40, 42, 43, 44, 46, 47, 54, 63, 77, 86, 123, 204, 216, 244, 279, 372, 379, 418, 505, 506, 507, 508, 509, 611, 626, 628, 629, 631, 640, 735, 736, 737, 738, 740, 798, 802, 803, 807, 814, 816, 817, 820, 823, 824, 825, 830, 831, 838, 840, 841, 846, 848, 849, 852, 854, 855, 856, 857, 860, 864, 867, 868, 869, 873, 874], "2023": [9, 10, 23, 24, 25, 26, 42], "02": [9, 10, 42, 50, 55, 56, 62, 63, 76, 79, 86, 135, 222, 223, 262, 372, 394, 404, 405, 589, 590, 612, 613, 618, 626, 629, 631, 632, 639, 640, 734, 737, 738, 839], "52": [9, 11, 40, 53, 76, 78, 79, 86, 225, 235, 237, 384, 520, 542, 543, 558, 612, 629, 631, 632, 633, 634, 644, 657, 679, 738, 756, 802], "resolv": [9, 42, 44, 54, 67, 244, 384, 520, 521, 629, 636, 644, 699, 754, 755, 760, 762, 817, 823, 826, 832, 846], "185": [9, 42, 70], "199": [9, 42, 223, 629], "110": [9, 42], "133": [9, 42, 58, 657], "111": [9, 42, 638, 733], "108": [9, 11, 23, 24, 25, 26, 42, 633, 644, 657, 756], "connect": [9, 42, 789, 809, 811, 816, 823, 840, 850, 851, 857, 865], "443": [9, 42, 282, 629], "sent": [9, 42], "await": [9, 42], "respons": [9, 42, 378, 503, 817, 825, 826], "200": [9, 11, 42, 78, 81, 231, 372, 396, 397, 550, 574, 629, 631, 802, 849], "ok": [9, 42, 816], "length": [9, 42, 43, 50, 54, 60, 61, 71, 77, 83, 84, 94, 95, 100, 123, 131, 136, 311, 314, 315, 330, 338, 366, 369, 372, 373, 375, 379, 382, 394, 395, 400, 401, 404, 405, 406, 416, 417, 418, 420, 432, 441, 481, 490, 507, 512, 611, 626, 631, 633, 634, 635, 636, 642, 660, 684, 685, 693, 703, 746, 773, 789, 841, 849], "10472": 9, "10k": 9, "plain": [9, 42], "tx": 9, "23k": 9, "kb": [9, 42, 44, 47], "57": [9, 11, 40, 42, 53, 54, 76, 77, 195, 218, 219, 222, 223, 225, 235, 236, 276, 292, 293, 364, 628, 629], "109": [9, 42, 59, 634, 672], "634575": 9, "620k": 9, "jpeg": [9, 43, 44], "619": 9, "70k": 9, "113": 9, "resnet34_weight": 9, "torch_resnet_34": 9, "conv1": 9, "kernel_s": [9, 26, 28, 29, 44, 54, 77, 372, 391, 392, 393, 412, 419, 789, 795], "stride": [9, 54, 58, 77, 78, 81, 99, 372, 375, 391, 392, 393, 409, 410, 411, 412, 414, 415, 419, 457, 631, 633, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 789, 837, 842, 867], "bia": [9, 54, 58, 77, 81, 85, 378, 384, 503, 519, 569, 631, 633, 639, 646, 647, 648, 649, 650, 651, 652, 653, 654, 657, 658, 659, 660, 734, 789, 834, 841, 846, 850], "bn1": 9, "ep": [9, 54, 59, 62, 77, 82, 85, 162, 297, 364, 373, 374, 378, 427, 454, 498, 499, 500, 627, 634, 639, 677, 680, 734, 785, 792], "05": [9, 11, 44, 50, 53, 54, 56, 62, 76, 77, 79, 85, 135, 262, 315, 331, 340, 341, 348, 366, 369, 378, 498, 499, 500, 557, 579, 602, 612, 613, 618, 626, 629, 631, 632, 634, 639, 675, 734, 768, 773, 788, 792, 839, 841], "momentum": [9, 42, 54, 77, 378, 498, 500, 792, 857], "affin": [9, 792], "track_running_stat": [9, 792], "dilat": [9, 46, 54, 58, 77, 81, 372, 375, 409, 410, 411, 414, 415, 419, 481, 633, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 789], "ceil_mod": [9, 54, 77, 372, 391, 392, 393, 409, 410, 411, 414, 789], "layer1": 9, "basicblock": 9, "conv2": 9, "bn2": 9, "layer2": 9, "downsampl": [9, 54, 77, 408], "layer3": 9, "layer4": 9, "output_s": [9, 54, 77, 372, 386, 387, 388, 389, 633, 662, 789, 809, 861], "fc": [9, 15, 42, 809, 850, 861], "in_featur": [9, 58, 81, 633, 657, 841], "out_featur": [9, 58, 81, 633, 657, 841], "resnet_34": 9, "ivy_resnet_34": 9, "34": [9, 11, 40, 42, 76, 77, 78, 86, 165, 235, 262, 283, 372, 384, 415, 526, 542, 543, 627, 629, 631, 633, 634, 640, 657, 676, 737, 738, 827], "333f7ec4": 9, "pth": 9, "cach": [9, 10, 23, 24, 25, 26, 42, 44, 47, 192, 536, 628, 631, 778, 798, 832, 834, 837, 841], "83": [9, 11, 40, 59, 81, 86, 284, 372, 384, 394, 404, 415, 520, 629, 633, 634, 657, 672, 737], "3m": 9, "56": [9, 11, 40, 42, 53, 54, 58, 63, 76, 77, 81, 135, 270, 284, 287, 290, 372, 394, 404, 612, 626, 629, 632, 633, 634, 638, 644, 648, 650, 652, 654, 657, 679, 715, 737, 756, 828], "4mb": 9, "preserv": [9, 10, 23, 24, 25, 26, 54, 55, 56, 71, 77, 78, 79, 100, 372, 373, 375, 384, 408, 442, 459, 460, 461, 472, 473, 492, 526, 559, 621, 631, 632, 636, 700, 773, 840, 841, 851, 852, 861], "multipl": [9, 10, 19, 23, 24, 25, 26, 28, 53, 54, 59, 62, 67, 68, 71, 76, 77, 78, 79, 82, 84, 85, 90, 91, 131, 231, 255, 262, 268, 269, 270, 272, 332, 333, 369, 372, 373, 375, 378, 382, 394, 401, 404, 406, 440, 467, 476, 493, 496, 503, 512, 531, 538, 569, 612, 613, 616, 618, 619, 620, 621, 626, 629, 631, 632, 633, 634, 636, 639, 641, 644, 645, 648, 649, 650, 651, 664, 673, 674, 675, 688, 696, 699, 704, 705, 734, 741, 742, 757, 758, 759, 760, 761, 762, 763, 764, 765, 789, 803, 807, 809, 815, 817, 821, 822, 824, 828, 830, 832, 834, 837, 838, 839, 841, 844, 846, 852, 858, 860, 865, 866, 867, 874], "rel": [9, 10, 23, 24, 25, 26, 54, 56, 59, 61, 66, 73, 77, 79, 82, 84, 89, 99, 133, 331, 348, 369, 374, 384, 453, 454, 519, 613, 616, 618, 619, 620, 632, 634, 636, 643, 668, 677, 680, 688, 700, 704, 750, 753, 768, 770, 817, 825, 839, 844, 867, 869], "project": [9, 10, 17, 22, 23, 24, 25, 26, 28, 29, 32, 95, 633, 660, 789, 809, 811, 812, 815, 816, 817, 818, 821, 822, 823, 841, 850, 852, 856, 857, 858, 861, 863, 865, 867, 870, 874, 875], "ad": [9, 10, 11, 23, 24, 25, 26, 54, 61, 77, 84, 92, 237, 270, 331, 348, 369, 378, 498, 499, 500, 589, 590, 629, 631, 633, 634, 636, 660, 670, 671, 699, 789, 794, 809, 813, 814, 815, 816, 817, 820, 821, 823, 824, 825, 826, 828, 829, 830, 831, 833, 834, 835, 836, 837, 838, 839, 842, 844, 846, 850, 852, 857, 860, 866, 867], "home": [9, 10, 23, 24, 25, 26, 825], "95": [9, 11, 40, 54, 56, 59, 63, 70, 79, 81, 86, 107, 357, 369, 415, 612, 616, 620, 623, 632, 634, 640, 672, 737, 738], "builtin": [9, 816, 848, 850], "callabl": [9, 46, 54, 55, 69, 77, 78, 81, 92, 119, 120, 122, 163, 164, 196, 197, 210, 360, 362, 363, 370, 371, 372, 375, 415, 418, 420, 458, 481, 532, 536, 541, 543, 547, 548, 569, 598, 611, 615, 617, 622, 625, 627, 628, 631, 632, 637, 638, 712, 713, 714, 721, 722, 723, 725, 726, 727, 728, 768, 771, 781, 793, 804, 807, 824, 830, 836, 838, 846, 859, 860, 861, 862], "track": [9, 19, 28, 29, 41, 42, 807, 816, 817, 820, 836, 837, 860, 867], "properli": [9, 816, 819, 830, 832, 838, 841], "_trace_graph": 9, "shown": [9, 26, 28, 69, 71, 92, 254, 277, 335, 369, 629, 815, 816, 817, 820, 823, 825, 826, 828, 830, 832, 833, 838, 839, 841, 842, 843, 846, 848, 852], "8507": 9, "1351": 9, "0069": 9, "85072625": 9, "13506091": 9, "00688289": 9, "resnet50_weight": 9, "torch_resnet_50": 9, "imagenet1k_v2": 9, "11ad3fa6": 9, "97": [9, 11, 40, 54, 56, 76, 79, 86, 223, 357, 369, 616, 629, 632, 737], "8m": 9, "8mb": 9, "bottleneck": [9, 856], "conv3": 9, "bn3": 9, "2048": [9, 590, 631], "resnet_50": 9, "ivy_resnet_50": 9, "3429": 9, "0408": 9, "0121": 9, "34288204": 9, "04077014": 9, "01212029": 9, "depend": [10, 11, 13, 15, 19, 20, 21, 22, 23, 24, 25, 26, 28, 30, 33, 50, 51, 54, 55, 59, 65, 66, 74, 77, 82, 89, 90, 120, 126, 149, 217, 218, 219, 222, 223, 224, 225, 234, 235, 237, 240, 242, 258, 259, 260, 261, 270, 272, 275, 282, 283, 287, 288, 356, 369, 372, 373, 418, 426, 444, 592, 625, 626, 627, 629, 631, 633, 634, 641, 643, 658, 669, 670, 681, 682, 683, 684, 745, 750, 753, 763, 809, 811, 813, 815, 816, 817, 823, 826, 827, 829, 831, 835, 837, 838, 839, 840, 841, 844, 846, 852, 853, 857, 860, 865, 867, 868], "yet": [10, 11, 13, 15, 19, 20, 21, 22, 23, 24, 25, 26, 29, 44, 365, 367, 368, 376, 377, 381, 815, 816, 831, 852, 853, 860, 861, 862], "doc": [10, 11, 13, 15, 17, 19, 20, 21, 22, 23, 24, 25, 26, 29, 43, 44, 77, 144, 325, 332, 333, 366, 369, 521, 626, 809, 810, 814, 815, 819, 828, 829, 832, 833, 841, 846, 849, 850, 860, 861, 862], "autofeatureextractor": [10, 28], "extractor": [10, 13, 15, 28, 44, 809], "hug": [10, 28, 860], "face": [10, 28, 810, 816, 820, 831, 832, 836, 844, 846, 860, 867, 873], "arch_nam": [10, 28], "microsoft": [10, 28, 857, 860, 861, 867, 872, 874], "feature_extractor": [10, 28], "980130": 10, "9342": 10, "980177": 10, "609": 10, "980207": 10, "1518": 10, "351203": 10, "390": [10, 23, 24, 25, 26], "inputs_jax": [10, 28], "last_hidden_st": [10, 28], "jax_forward": [10, 28], "jit_appli": 10, "63": [10, 11, 40, 44, 53, 70, 76, 81, 82, 115, 276, 283, 284, 372, 384, 394, 404, 415, 520, 629, 634, 638, 644, 664, 679, 716, 727, 756], "122": [10, 51, 165, 235, 629], "134": [10, 58, 634, 657, 676], "2x": [10, 28], "ipytest": 11, "panda": [11, 42, 44, 857, 864], "scikit": [11, 373, 444, 857], "cryptographi": 11, "frontend": [11, 576, 631, 770, 771, 774, 778, 781, 809, 814, 817, 819, 825, 826, 830, 831, 836, 840, 841, 844, 845, 847, 854, 861, 867], "sklearn": 11, "classification_report": 11, "model_select": 11, "train_test_split": 11, "load_breast_canc": 11, "pd": [11, 44], "functool": [11, 42, 830, 838, 848], "autoconfig": 11, "tqdm_notebook": 11, "These": [11, 35, 54, 77, 373, 375, 384, 426, 480, 519, 633, 634, 660, 669, 670, 809, 812, 814, 815, 816, 817, 820, 824, 826, 828, 829, 833, 834, 837, 838, 841, 846, 847, 849, 850, 851, 852, 854, 856, 857, 858, 861, 867, 871, 873, 874], "sole": [11, 40, 833, 842, 866, 867, 868], "test_jax_gpu": 11, "xla_bridg": [11, 42], "get_backend": [11, 834], "test_torch_gpu": 11, "test_xgboost_gpu": 11, "capsi": 11, "load_diabet": 11, "y": [11, 28, 29, 40, 41, 43, 44, 48, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 70, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 99, 100, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 126, 129, 131, 133, 134, 135, 136, 137, 138, 139, 140, 146, 149, 150, 151, 160, 162, 165, 177, 190, 194, 198, 203, 204, 205, 209, 211, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 248, 249, 251, 253, 254, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 331, 332, 333, 339, 347, 348, 349, 350, 351, 356, 358, 360, 364, 366, 369, 372, 373, 374, 375, 378, 384, 392, 394, 396, 397, 401, 404, 406, 410, 416, 423, 427, 433, 440, 447, 449, 450, 452, 453, 454, 455, 456, 466, 468, 477, 481, 489, 490, 491, 493, 497, 501, 502, 504, 512, 518, 519, 520, 521, 522, 525, 527, 528, 529, 531, 534, 537, 538, 541, 542, 544, 545, 546, 549, 550, 551, 555, 557, 558, 559, 561, 562, 565, 566, 571, 578, 579, 580, 583, 586, 587, 589, 590, 592, 594, 596, 597, 598, 602, 603, 606, 609, 610, 611, 621, 623, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 648, 650, 652, 654, 655, 656, 657, 664, 665, 666, 670, 671, 672, 673, 674, 675, 677, 678, 679, 680, 682, 684, 685, 686, 688, 690, 691, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 715, 718, 721, 722, 724, 732, 734, 735, 736, 737, 738, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 807, 809, 822, 824, 827, 828, 836, 838, 839, 841, 842, 844, 846, 848, 860], "target": [11, 13, 15, 21, 23, 24, 26, 28, 29, 31, 32, 33, 34, 35, 44, 54, 77, 192, 374, 449, 450, 451, 452, 453, 454, 455, 456, 628, 768, 789, 791, 797, 809, 813, 816, 819, 822, 831, 832, 839, 840, 845, 849, 850, 851, 861, 862, 863, 865, 866, 867, 870, 872, 873], "xgb_model": 11, "xgbregressor": 11, "tree_method": 11, "caus": [11, 374, 451, 816, 817, 820, 822, 824, 825, 826, 828, 837, 839, 841, 852], "either": [11, 23, 24, 33, 34, 35, 36, 40, 46, 53, 54, 55, 58, 67, 71, 76, 77, 78, 81, 82, 109, 112, 115, 120, 130, 131, 141, 217, 218, 219, 220, 225, 235, 237, 238, 240, 242, 244, 251, 252, 258, 259, 260, 261, 262, 270, 279, 281, 282, 284, 287, 288, 334, 356, 369, 372, 378, 384, 394, 404, 414, 415, 419, 503, 520, 521, 541, 561, 569, 570, 578, 598, 623, 625, 626, 629, 631, 633, 634, 637, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 660, 674, 679, 682, 686, 712, 713, 714, 754, 755, 760, 762, 775, 789, 790, 791, 798, 811, 815, 816, 817, 822, 823, 824, 826, 827, 828, 829, 830, 832, 834, 837, 838, 839, 840, 841, 844, 846, 849, 852, 853, 861, 867], "fit": [11, 61, 84, 636, 702, 815, 838, 846, 863, 864, 867], "consol": [11, 572, 631, 809, 817, 832, 841, 848, 853], "gpu_hist": 11, "captur": [11, 836, 841, 851, 868], "readouterr": 11, "err": 11, "99": [11, 40, 53, 54, 56, 74, 76, 86, 132, 219, 234, 357, 369, 589, 616, 626, 629, 631, 632, 638, 644, 719, 727, 737, 756], "tabular": 11, "pulsar": 11, "emploi": [11, 873], "remov": [11, 17, 18, 21, 26, 28, 29, 31, 59, 71, 82, 634, 636, 637, 638, 668, 674, 688, 706, 712, 713, 729, 803, 806, 809, 815, 822, 823, 825, 826, 829, 834, 840, 841, 844, 851, 860, 861, 867], "column": [11, 44, 54, 59, 77, 82, 94, 95, 129, 144, 325, 366, 373, 375, 382, 384, 426, 432, 444, 465, 470, 472, 473, 477, 479, 512, 518, 519, 626, 634, 669, 670, 675, 681, 683, 684, 689, 773, 788], "well": [11, 28, 29, 42, 43, 44, 78, 374, 453, 555, 631, 634, 683, 775, 809, 811, 815, 817, 823, 825, 826, 830, 837, 838, 839, 841, 850, 851, 861, 866, 867, 868, 872], "standard": [11, 53, 59, 62, 63, 67, 76, 85, 86, 90, 123, 124, 125, 127, 128, 129, 130, 132, 133, 134, 136, 139, 140, 141, 142, 143, 145, 146, 152, 162, 165, 177, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 237, 238, 240, 242, 243, 244, 248, 249, 250, 251, 252, 253, 257, 259, 260, 261, 262, 264, 265, 266, 267, 270, 272, 273, 274, 275, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 332, 333, 335, 369, 372, 373, 375, 384, 416, 446, 489, 493, 519, 611, 626, 627, 629, 631, 634, 636, 639, 640, 641, 642, 643, 644, 645, 664, 665, 666, 667, 668, 670, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 690, 691, 697, 699, 700, 701, 703, 704, 706, 707, 711, 734, 737, 741, 742, 744, 745, 746, 747, 748, 749, 750, 753, 757, 758, 759, 760, 761, 762, 763, 764, 765, 775, 788, 792, 802, 803, 809, 812, 819, 820, 821, 824, 826, 829, 833, 837, 840, 841, 842, 852, 855, 861, 863, 865, 866, 869, 870, 872], "extra": [11, 29, 71, 100, 119, 611, 625, 631, 821, 826, 828, 835, 837, 838, 839, 844, 846, 860, 861, 864, 869], "dimens": [11, 50, 54, 55, 58, 59, 60, 61, 63, 64, 65, 67, 68, 71, 73, 77, 78, 81, 82, 83, 84, 86, 87, 88, 90, 91, 97, 99, 100, 103, 110, 114, 138, 142, 143, 313, 324, 326, 327, 328, 329, 332, 333, 337, 338, 346, 353, 360, 366, 369, 370, 372, 373, 374, 375, 378, 379, 382, 384, 386, 388, 389, 391, 392, 393, 395, 400, 401, 405, 409, 410, 411, 412, 415, 416, 418, 419, 421, 423, 426, 435, 444, 449, 453, 459, 460, 461, 465, 471, 482, 483, 484, 485, 487, 489, 493, 498, 499, 500, 503, 507, 509, 512, 522, 524, 525, 526, 527, 528, 529, 542, 543, 544, 546, 553, 587, 591, 611, 623, 626, 631, 633, 634, 635, 636, 637, 641, 642, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 659, 660, 664, 665, 666, 668, 669, 670, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 688, 690, 691, 694, 695, 697, 699, 700, 701, 702, 703, 704, 705, 706, 707, 710, 712, 713, 714, 740, 741, 742, 744, 746, 747, 748, 749, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 773, 775, 785, 789, 792, 828, 830, 836, 838, 839, 841, 844, 846, 849], "load_data": 11, "standardscal": 11, "df": [11, 44], "read_csv": [11, 44], "delimit": [11, 849], "drop": [11, 44, 54, 77, 328, 366, 374, 375, 453, 490, 788, 789, 816, 852], "sc": 11, "fit_transform": 11, "prepare_data": 11, "tupl": [11, 46, 49, 50, 51, 53, 54, 55, 58, 59, 61, 64, 65, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 97, 103, 107, 108, 109, 110, 111, 112, 113, 114, 115, 119, 124, 125, 131, 133, 137, 138, 140, 144, 146, 150, 151, 152, 163, 164, 165, 169, 170, 176, 177, 183, 193, 196, 197, 211, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 247, 248, 249, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 300, 301, 302, 303, 304, 306, 307, 308, 310, 313, 318, 322, 325, 331, 332, 333, 334, 335, 337, 338, 339, 342, 343, 345, 346, 347, 348, 352, 353, 354, 355, 356, 358, 359, 360, 361, 366, 369, 371, 372, 373, 375, 378, 379, 380, 382, 384, 391, 392, 393, 395, 396, 397, 398, 400, 405, 406, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 426, 427, 431, 435, 437, 442, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 459, 460, 461, 462, 465, 466, 476, 481, 487, 489, 490, 491, 493, 495, 498, 500, 501, 502, 503, 504, 506, 507, 509, 510, 511, 519, 520, 521, 522, 524, 525, 526, 527, 528, 531, 534, 535, 537, 538, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 553, 555, 557, 558, 559, 561, 562, 565, 573, 574, 578, 588, 589, 590, 591, 592, 594, 595, 596, 597, 610, 611, 612, 613, 614, 616, 618, 621, 625, 626, 627, 628, 629, 631, 632, 633, 634, 636, 637, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 663, 664, 665, 669, 670, 671, 672, 673, 674, 675, 677, 679, 680, 681, 682, 684, 686, 687, 688, 691, 693, 694, 695, 696, 697, 698, 700, 701, 703, 704, 705, 706, 707, 710, 711, 712, 713, 714, 715, 716, 718, 719, 720, 722, 723, 724, 726, 727, 730, 731, 732, 733, 735, 736, 737, 738, 740, 743, 744, 746, 747, 748, 749, 750, 751, 754, 755, 757, 758, 759, 760, 761, 762, 763, 764, 765, 773, 774, 775, 788, 789, 791, 802, 803, 821, 826, 833, 834, 837, 839, 841, 846, 849, 850, 852, 860, 861, 862], "expand_dim": [11, 25, 28, 29, 44, 46, 61, 84, 633, 636, 655, 809, 838, 846, 849, 861], "astyp": [11, 13, 15, 20, 42, 43, 44, 51, 58, 74, 81, 627, 633, 649, 651, 652, 655, 809, 826, 837, 838, 844, 862], "csv": [11, 44, 809], "instanc": [11, 19, 25, 28, 29, 42, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 99, 100, 107, 108, 109, 110, 111, 112, 113, 114, 115, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 162, 165, 168, 169, 170, 172, 177, 194, 211, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 300, 301, 302, 303, 304, 306, 307, 308, 309, 310, 311, 312, 314, 315, 316, 319, 325, 326, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 366, 369, 372, 373, 374, 375, 378, 384, 391, 392, 393, 394, 396, 397, 398, 400, 404, 405, 409, 410, 411, 415, 416, 418, 419, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 433, 437, 438, 439, 440, 441, 442, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 504, 506, 507, 508, 509, 510, 511, 512, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 534, 535, 537, 538, 541, 542, 543, 544, 545, 546, 549, 550, 553, 555, 557, 558, 559, 561, 562, 563, 565, 566, 568, 573, 574, 584, 588, 589, 590, 591, 592, 594, 596, 597, 610, 612, 613, 616, 618, 619, 620, 621, 626, 627, 629, 631, 632, 633, 634, 635, 636, 639, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 655, 656, 657, 659, 660, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 734, 735, 736, 737, 738, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 781, 786, 807, 815, 816, 817, 820, 821, 822, 826, 828, 829, 830, 831, 833, 834, 835, 836, 837, 841, 849, 850, 851, 854, 860, 868], "117564": 11, "variou": [11, 22, 32, 34, 40, 809, 812, 815, 816, 817, 820, 825, 826, 829, 830, 833, 835, 836, 838, 839, 840, 841, 853, 863, 865, 866, 867, 870, 873], "structur": [11, 29, 71, 74, 100, 162, 165, 539, 631, 638, 719, 728, 809, 815, 817, 818, 821, 824, 834, 839, 840, 841, 842, 849, 850, 866, 867], "allow": [11, 26, 28, 29, 40, 54, 67, 77, 90, 134, 275, 373, 384, 445, 522, 526, 569, 626, 629, 631, 643, 644, 752, 759, 773, 774, 775, 776, 790, 791, 803, 807, 809, 815, 817, 818, 821, 822, 825, 826, 830, 832, 834, 835, 836, 837, 838, 839, 841, 844, 846, 848, 852, 854, 857, 860, 861, 862, 865, 867, 871, 872], "navig": [11, 813, 816, 817, 819, 831], "rerun": [11, 42], "most": [11, 19, 28, 29, 71, 73, 94, 97, 138, 373, 426, 582, 605, 626, 631, 634, 669, 670, 806, 809, 814, 815, 816, 821, 824, 825, 826, 827, 831, 833, 834, 836, 837, 838, 839, 841, 842, 843, 844, 846, 848, 849, 850, 852, 857, 867, 868, 870, 871, 873, 874], "method": [11, 19, 28, 44, 48, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 99, 100, 107, 108, 109, 110, 111, 112, 113, 114, 115, 125, 126, 128, 130, 131, 133, 135, 136, 137, 138, 140, 142, 143, 146, 149, 150, 151, 152, 162, 165, 169, 170, 177, 194, 211, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 300, 301, 302, 303, 304, 306, 307, 308, 309, 310, 311, 312, 314, 315, 316, 319, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 369, 372, 373, 374, 375, 384, 391, 392, 393, 394, 396, 397, 398, 400, 404, 405, 406, 409, 410, 411, 415, 416, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 433, 437, 438, 439, 440, 441, 442, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 504, 506, 507, 508, 509, 510, 511, 512, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 534, 535, 537, 538, 539, 541, 542, 543, 544, 545, 546, 549, 550, 553, 555, 557, 558, 559, 561, 562, 563, 565, 566, 568, 573, 574, 588, 589, 590, 591, 592, 594, 596, 597, 610, 612, 613, 616, 618, 619, 620, 621, 626, 627, 629, 631, 632, 634, 635, 638, 641, 644, 645, 647, 648, 649, 650, 651, 652, 655, 656, 657, 659, 663, 664, 665, 667, 668, 669, 670, 671, 672, 673, 674, 675, 677, 678, 679, 680, 681, 682, 684, 685, 688, 689, 691, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 726, 727, 728, 734, 735, 736, 737, 738, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 763, 764, 765, 770, 781, 787, 788, 789, 790, 791, 815, 817, 820, 821, 825, 826, 827, 828, 829, 833, 841, 842, 846, 847, 850, 851, 852, 860, 861, 862, 868, 874], "signific": [11, 54, 374, 454, 843, 852, 856, 857, 867], "object": [11, 19, 24, 26, 28, 42, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 100, 103, 104, 126, 130, 131, 141, 153, 162, 165, 173, 176, 211, 269, 506, 554, 570, 614, 626, 627, 628, 631, 632, 638, 640, 718, 719, 720, 722, 723, 724, 730, 731, 732, 733, 740, 768, 770, 771, 778, 779, 780, 786, 787, 789, 790, 791, 798, 802, 809, 821, 822, 824, 825, 834, 835, 838, 839, 841, 844, 848, 851, 859, 860, 861, 862, 867, 873], "logist": 11, "booster": 11, "gblinear": 11, "n_estim": 11, "reg_lambda": 11, "reg_alpha": 11, "base_margin": 11, "xgb_cl": 11, "ivy_cl": 11, "n": [11, 40, 43, 44, 45, 47, 50, 53, 54, 58, 59, 61, 63, 64, 67, 68, 76, 77, 81, 82, 84, 86, 87, 90, 91, 94, 99, 136, 142, 143, 144, 217, 287, 289, 325, 326, 338, 366, 369, 372, 373, 374, 375, 378, 379, 382, 384, 386, 387, 388, 389, 394, 395, 400, 401, 404, 405, 406, 414, 415, 416, 417, 419, 427, 428, 435, 439, 441, 443, 448, 449, 461, 467, 470, 474, 476, 487, 496, 498, 499, 500, 503, 505, 506, 507, 508, 509, 512, 519, 529, 626, 629, 633, 634, 636, 638, 640, 641, 644, 645, 646, 647, 648, 649, 651, 653, 655, 660, 665, 668, 672, 674, 675, 676, 677, 678, 679, 680, 681, 684, 685, 688, 689, 690, 691, 698, 699, 701, 707, 711, 723, 736, 737, 738, 744, 758, 760, 761, 762, 763, 764, 765, 789, 792, 802, 809, 819, 823, 825, 841, 853, 861], "436": 11, "48": [11, 40, 44, 53, 54, 76, 77, 78, 79, 86, 109, 219, 242, 284, 372, 392, 393, 394, 404, 410, 411, 414, 557, 612, 616, 623, 629, 631, 632, 634, 638, 644, 679, 716, 737, 756], "wai": [11, 17, 18, 19, 22, 24, 28, 32, 34, 40, 94, 97, 809, 811, 814, 815, 816, 820, 821, 822, 823, 825, 826, 827, 837, 838, 839, 841, 844, 848, 849, 850, 851, 852, 853, 856, 857, 862, 869, 873, 874], "t4": 11, "higher": [11, 54, 77, 373, 375, 384, 430, 442, 448, 459, 460, 461, 529, 788, 826, 837, 845, 846, 851, 852, 864, 867, 868, 871, 873, 874], "tier": [11, 818], "reduc": [11, 54, 55, 59, 64, 67, 68, 71, 77, 78, 82, 87, 90, 91, 210, 332, 333, 353, 369, 370, 384, 524, 525, 526, 527, 528, 529, 543, 628, 631, 634, 641, 644, 645, 681, 741, 742, 757, 758, 759, 760, 761, 762, 763, 764, 765, 802, 803, 825, 830, 838, 844, 846, 848, 860, 865, 869, 870, 871], "lower": [11, 44, 50, 53, 54, 59, 63, 76, 77, 82, 86, 129, 142, 268, 304, 310, 316, 325, 326, 364, 366, 384, 522, 523, 529, 626, 629, 634, 640, 664, 670, 671, 677, 738, 775, 788, 809, 817, 826, 828, 838, 841, 846, 852, 854, 863, 864, 865, 867, 868, 873, 874], "although": [11, 634, 682, 809, 811, 821, 823, 824, 838, 844, 865, 867], "experi": [11, 17, 44, 816, 830, 841, 847, 849, 852], "still": [11, 22, 24, 25, 28, 29, 31, 32, 35, 59, 71, 82, 634, 684, 773, 815, 816, 817, 821, 822, 826, 829, 830, 832, 834, 837, 838, 841, 844, 850, 852, 857, 860, 861, 864, 867, 873], "substanti": [11, 812, 817, 821, 826, 841, 857, 867], "dive": [11, 17, 19, 28, 40, 810, 811, 814, 815, 817, 820, 824, 826, 832, 839, 845, 848, 849, 852, 873], "stuff": 11, "tool": [11, 19, 28, 29, 809, 816, 817, 828, 832, 847, 851, 852, 855, 858, 861, 865, 866, 867, 868, 870, 873, 874], "201": [11, 76, 77, 222, 394, 629], "20x": 11, "ivy_pr": 11, "xgb_pred": 11, "ivyclassifi": 11, "nxgbclassifi": 11, "precis": [11, 54, 59, 77, 82, 162, 250, 270, 277, 284, 343, 369, 373, 384, 427, 519, 582, 605, 627, 629, 631, 634, 670, 671, 675, 682, 684, 685, 691, 781, 825, 838, 843, 844, 871], "recal": 11, "f1": [11, 826], "score": [11, 58, 81, 374, 456, 633, 661, 663, 809], "94": [11, 40, 53, 54, 56, 63, 76, 77, 79, 86, 204, 280, 281, 357, 369, 404, 616, 628, 632, 738], "106597": 11, "33": [11, 40, 42, 43, 53, 63, 67, 76, 77, 78, 79, 81, 223, 224, 231, 280, 372, 373, 375, 384, 392, 414, 415, 445, 464, 520, 538, 589, 616, 629, 631, 632, 633, 634, 638, 644, 656, 657, 679, 733, 736, 756, 763, 773, 776], "10967": 11, "accuraci": [11, 42, 44, 47, 372, 416, 826], "macro": 11, "avg": [11, 372, 391, 393, 414], "96": [11, 40, 54, 56, 76, 77, 78, 86, 234, 255, 287, 357, 369, 372, 394, 542, 543, 616, 629, 631, 632, 634, 644, 679, 738, 756], "67": [11, 40, 53, 54, 55, 59, 76, 77, 78, 81, 86, 99, 235, 240, 280, 281, 283, 290, 301, 305, 364, 384, 415, 520, 542, 543, 589, 615, 617, 629, 631, 632, 634, 672, 738], "73": [11, 40, 53, 82, 284, 384, 520, 634, 640, 664, 737, 841], "92": [11, 40, 44, 54, 55, 86, 357, 369, 610, 620, 632, 634, 666, 737, 738], "28": [11, 26, 28, 29, 40, 42, 44, 47, 53, 54, 58, 62, 76, 77, 78, 81, 82, 86, 90, 236, 239, 260, 276, 372, 373, 394, 404, 425, 526, 557, 612, 629, 631, 632, 633, 634, 639, 644, 648, 650, 652, 654, 655, 657, 679, 734, 736, 737, 738, 756, 760, 809], "27": [11, 40, 42, 47, 53, 54, 59, 63, 76, 77, 78, 81, 82, 86, 90, 231, 232, 235, 275, 283, 284, 343, 369, 372, 394, 404, 558, 588, 629, 631, 634, 638, 644, 674, 679, 689, 716, 723, 737, 756, 760, 773, 875], "852": [11, 633, 657], "449": 11, "47": [11, 40, 44, 53, 54, 59, 63, 76, 77, 78, 79, 81, 86, 226, 284, 372, 384, 392, 410, 411, 520, 542, 543, 616, 629, 631, 632, 633, 634, 640, 657, 672, 737, 738], "29": [11, 40, 42, 44, 47, 59, 76, 78, 79, 81, 86, 225, 384, 415, 520, 542, 543, 614, 618, 629, 631, 632, 634, 672, 736, 737, 738], "82": [11, 40, 42, 47, 48, 53, 79, 86, 110, 223, 384, 520, 612, 632, 737, 738, 813, 831], "68": [11, 40, 44, 47, 53, 86, 110, 132, 225, 372, 394, 404, 623, 626, 629, 634, 639, 690, 734, 737, 738], "nevertheless": 11, "fall": [11, 42, 793, 815, 826, 845], "short": [11, 40, 54, 77, 420, 633, 658, 659, 815, 817, 826, 846, 850], "blaze": 11, "62": [11, 40, 42, 48, 70, 76, 77, 86, 110, 255, 283, 629, 639, 640, 734, 736, 738], "36": [11, 40, 44, 53, 54, 58, 67, 77, 78, 82, 225, 280, 281, 346, 369, 372, 373, 384, 394, 404, 430, 520, 542, 543, 590, 629, 631, 634, 638, 644, 657, 676, 679, 689, 726, 756], "37": [11, 23, 24, 25, 26, 40, 48, 53, 54, 70, 76, 77, 81, 99, 110, 223, 231, 280, 283, 287, 380, 415, 510, 629, 633, 634, 638, 640, 657, 676, 723, 737, 825], "surpass": 11, "remark": [11, 852], "artifici": 11, "simpli": [11, 19, 28, 29, 31, 40, 48, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 99, 107, 108, 109, 110, 111, 112, 113, 114, 115, 125, 126, 128, 130, 131, 133, 135, 136, 137, 138, 140, 142, 143, 146, 150, 151, 152, 165, 169, 170, 177, 194, 211, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 300, 301, 302, 303, 304, 306, 307, 308, 309, 310, 311, 312, 314, 315, 316, 319, 326, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 372, 375, 384, 391, 392, 393, 394, 396, 397, 398, 400, 404, 405, 406, 409, 410, 411, 415, 416, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 433, 437, 438, 439, 440, 441, 442, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 504, 506, 507, 508, 509, 510, 511, 512, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 534, 535, 537, 538, 541, 542, 543, 544, 545, 546, 549, 550, 553, 555, 557, 559, 561, 562, 563, 565, 566, 568, 573, 574, 588, 589, 590, 591, 592, 594, 596, 597, 610, 612, 613, 616, 618, 619, 620, 621, 629, 647, 648, 649, 650, 651, 652, 655, 656, 657, 659, 663, 664, 665, 667, 668, 669, 670, 671, 672, 673, 674, 675, 680, 681, 682, 684, 691, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 734, 735, 736, 737, 738, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 763, 764, 765, 809, 815, 816, 817, 821, 822, 823, 825, 826, 827, 828, 829, 831, 833, 834, 837, 838, 839, 841, 844, 846, 850, 851, 852, 854, 868, 873], "stack": [11, 21, 23, 24, 25, 26, 31, 40, 44, 54, 59, 61, 71, 77, 82, 84, 99, 142, 143, 326, 366, 373, 375, 426, 465, 466, 468, 477, 497, 576, 585, 608, 626, 631, 634, 636, 638, 666, 668, 669, 670, 671, 673, 674, 676, 677, 678, 680, 681, 682, 684, 685, 688, 715, 725, 726, 789, 809, 814, 820, 837, 846, 863, 865, 872, 873], "x_doubl": 11, "vstack": [11, 54, 77, 375, 477], "y_doubl": 11, "235128": 11, "41": [11, 23, 24, 25, 26, 40, 42, 47, 53, 54, 59, 76, 77, 78, 81, 82, 110, 224, 232, 239, 270, 284, 372, 373, 380, 384, 392, 410, 415, 437, 510, 520, 537, 623, 629, 631, 634, 644, 664, 672, 762], "315": [11, 276, 629], "40": [11, 40, 42, 44, 54, 55, 76, 77, 78, 86, 90, 100, 231, 235, 255, 284, 346, 369, 372, 375, 392, 394, 404, 410, 486, 542, 544, 549, 550, 574, 589, 611, 614, 629, 631, 632, 634, 638, 644, 673, 679, 724, 737, 756, 760, 809, 825], "879": 11, "65": [11, 40, 42, 44, 47, 76, 79, 86, 231, 270, 557, 612, 629, 631, 632, 634, 644, 679, 737, 738, 756, 825], "380": 11, "seem": [11, 815, 816, 844, 850, 851, 852, 867], "observ": [11, 54, 77, 384, 518, 519, 817, 826, 830, 846, 860, 869], "examin": 11, "600": [11, 44, 78, 81, 372, 396, 397, 550, 825], "conduct": [11, 871], "num_boosting_round": 11, "300": [11, 76, 78, 81, 280, 372, 396, 397, 550, 574, 629, 631, 634, 673, 841], "400": [11, 78, 81, 372, 396, 397, 550, 574, 631, 634, 673], "500": [11, 54, 77, 78, 81, 372, 373, 396, 397, 448, 550, 631], "ivy_elapsed_tim": 11, "xgb_elapsed_tim": 11, "ivy_tim": 11, "partial": [11, 54, 71, 77, 163, 164, 196, 197, 346, 369, 372, 373, 375, 384, 420, 435, 442, 482, 483, 484, 485, 526, 547, 548, 617, 627, 628, 631, 632, 774, 776, 790, 791, 817, 823, 844], "xgb_time": 11, "fivethirtyeight": 11, "legend": [11, 44, 815], "loc": [11, 864], "best": [11, 42, 569, 631, 803, 807, 809, 810, 813, 814, 815, 816, 817, 819, 825, 826, 830, 831, 840, 841, 842, 853, 870, 871], "xlabel": 11, "ylabel": 11, "obviou": [11, 849, 867], "trend": 11, "longer": [11, 816, 826, 837, 841, 867], "gap": 11, "between": [11, 17, 18, 23, 33, 34, 35, 40, 53, 54, 55, 58, 59, 60, 61, 65, 71, 76, 77, 81, 82, 83, 84, 100, 123, 162, 225, 238, 273, 289, 331, 348, 350, 369, 372, 373, 374, 375, 384, 396, 397, 398, 409, 410, 411, 419, 425, 429, 450, 451, 452, 453, 454, 455, 456, 481, 529, 626, 627, 629, 633, 635, 636, 638, 640, 642, 656, 679, 693, 694, 695, 699, 707, 721, 736, 747, 748, 749, 774, 781, 793, 809, 821, 822, 826, 828, 833, 834, 835, 837, 838, 839, 840, 841, 844, 845, 847, 848, 849, 851, 856, 860, 861, 863, 864, 866, 867, 868, 873], "slightli": [11, 309, 366, 824, 838, 841, 846, 850], "x_train": 11, "y_train": [11, 44, 809], "train_siz": [11, 42], "random_st": [11, 373, 431], "51": [11, 40, 44, 53, 54, 76, 77, 78, 86, 232, 270, 283, 373, 394, 448, 629, 738, 773], "clear": [11, 192, 628, 815, 817, 822, 826, 827, 828, 838, 844, 846, 848, 856, 857, 858, 867], "amount": [11, 60, 83, 212, 628, 635, 693, 694, 695, 803, 816, 825, 827, 839], "widen": 11, "impress": 11, "outcom": [11, 54, 77, 334, 346, 369, 803], "tend": 11, "outperform": 11, "proce": [11, 815, 816], "95933": 11, "9874": 11, "105807": 11, "70": [11, 40, 42, 54, 77, 78, 372, 394, 404, 550, 574, 634, 644, 679, 756, 857], "77": [11, 40, 44, 78, 590, 634, 644, 679, 756], "93": [11, 40, 54, 76, 78, 86, 195, 284, 357, 369, 542, 543, 628, 631, 737, 738], "wrap": [11, 19, 21, 28, 29, 31, 42, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 99, 100, 103, 107, 108, 109, 110, 111, 112, 113, 114, 115, 125, 126, 128, 130, 131, 133, 135, 136, 137, 138, 140, 142, 143, 146, 150, 151, 152, 165, 169, 170, 177, 194, 211, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 300, 301, 302, 303, 304, 306, 307, 308, 309, 310, 311, 312, 314, 315, 316, 319, 326, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 372, 375, 384, 391, 392, 393, 394, 396, 397, 398, 400, 404, 405, 406, 409, 410, 411, 415, 416, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 433, 437, 438, 439, 440, 441, 442, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 504, 506, 507, 508, 509, 510, 511, 512, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 534, 535, 536, 537, 538, 541, 542, 543, 544, 545, 546, 549, 550, 553, 555, 557, 558, 559, 561, 562, 563, 565, 566, 568, 573, 574, 585, 588, 589, 590, 591, 592, 594, 596, 597, 608, 610, 612, 613, 616, 618, 619, 620, 621, 631, 647, 648, 649, 650, 651, 652, 655, 656, 657, 659, 663, 664, 665, 667, 668, 669, 670, 671, 672, 673, 674, 675, 680, 681, 682, 684, 691, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 734, 735, 736, 737, 738, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 763, 764, 765, 770, 809, 819, 820, 821, 822, 824, 825, 826, 827, 829, 830, 833, 834, 837, 838, 841, 846, 848, 851, 852, 854, 860, 861, 863, 867, 868, 873, 874], "balanc": 11, "breast": 11, "cancer": 11, "53": [11, 23, 40, 59, 63, 76, 81, 156, 212, 242, 415, 615, 617, 627, 628, 632, 634, 639, 672, 734, 738], "return_x_i": 11, "x_test": 11, "y_test": 11, "test_siz": [11, 42], "76": [11, 21, 40, 53, 54, 67, 74, 76, 77, 86, 165, 219, 235, 283, 319, 366, 404, 627, 629, 634, 638, 644, 686, 723, 737, 756], "87": [11, 40, 79, 81, 231, 260, 384, 415, 520, 612, 629, 632, 773, 831], "171": [11, 59, 634, 672, 773], "90": [11, 40, 42, 44, 53, 54, 76, 77, 236, 276, 280, 357, 369, 375, 384, 487, 520, 629, 634, 644, 679, 756, 803, 857], "86": [11, 40, 63, 77, 86, 372, 384, 404, 520, 612, 632, 737, 738], "88": [11, 40, 79, 86, 109, 384, 520, 616, 623, 632, 634, 640, 644, 679, 738, 756], "perfectli": [11, 775, 858], "align": [11, 54, 71, 77, 372, 373, 408, 424, 633, 662, 803, 812, 816, 825, 838, 840, 846, 848, 854, 873], "gain": [11, 788, 817, 818, 820, 845, 850, 867], "combin": [11, 34, 54, 71, 77, 100, 372, 384, 406, 417, 519, 547, 548, 631, 634, 665, 674, 817, 821, 824, 825, 826, 828, 830, 834, 841, 851, 867], "build": [12, 16, 17, 19, 26, 28, 29, 32, 33, 34, 35, 40, 42, 47, 65, 71, 100, 642, 746, 747, 748, 749, 789, 790, 791, 809, 810, 816, 819, 825, 826, 834, 836, 845, 847, 850, 851, 852, 854, 857, 861, 865, 867, 869, 872, 873, 874], "timm": [12, 13, 17, 28, 29, 809, 861], "seen": [13, 15, 20, 26, 28, 373, 379, 432, 507, 554, 631, 798, 825, 826, 828, 830, 838, 841, 846, 848, 849, 856, 857, 873], "guid": [13, 26, 809, 810, 815, 816, 817, 823, 832, 838, 840, 873], "focu": [13, 26, 815, 836, 865, 866, 869, 874], "involv": [13, 16, 17, 24, 26, 51, 74, 177, 220, 237, 244, 270, 275, 627, 629, 803, 810, 818, 819, 825, 826, 828, 839, 844, 851, 857, 867, 873], "usual": [13, 15, 45, 237, 270, 629, 802, 816, 820, 826, 838, 841, 844], "directli": [13, 15, 19, 22, 26, 28, 29, 32, 372, 373, 408, 432, 638, 727, 809, 815, 816, 817, 818, 820, 821, 824, 825, 826, 827, 829, 832, 834, 835, 837, 838, 839, 842, 843, 846, 848, 850, 851, 852, 853, 858, 860, 861, 862, 871, 872, 873], "case": [13, 15, 21, 23, 28, 29, 31, 32, 33, 34, 42, 49, 50, 54, 55, 61, 67, 71, 73, 77, 78, 84, 94, 95, 100, 125, 136, 163, 164, 191, 196, 197, 204, 212, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 233, 234, 235, 237, 238, 240, 242, 243, 244, 245, 251, 252, 253, 258, 259, 260, 261, 262, 265, 270, 273, 275, 279, 280, 281, 282, 283, 284, 287, 288, 290, 332, 333, 344, 346, 356, 369, 372, 374, 375, 378, 379, 385, 396, 397, 398, 418, 449, 459, 460, 461, 467, 469, 471, 472, 473, 476, 480, 486, 487, 493, 496, 498, 500, 507, 530, 547, 548, 552, 559, 573, 574, 575, 626, 627, 628, 629, 631, 634, 636, 638, 644, 682, 688, 699, 700, 701, 703, 705, 706, 708, 710, 718, 724, 757, 758, 759, 760, 761, 762, 763, 773, 774, 793, 803, 809, 813, 815, 816, 817, 820, 821, 822, 823, 824, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 837, 838, 839, 841, 842, 844, 846, 848, 850, 851, 852, 857, 860, 861, 862, 866, 870], "mlp": 13, "mixer": 13, "onli": [13, 15, 28, 29, 34, 40, 42, 44, 46, 49, 50, 53, 54, 59, 61, 63, 71, 73, 76, 77, 82, 84, 86, 94, 97, 99, 115, 135, 175, 176, 205, 265, 266, 271, 277, 309, 339, 346, 366, 369, 372, 373, 375, 379, 384, 395, 408, 418, 427, 432, 446, 448, 459, 460, 461, 471, 505, 506, 522, 536, 623, 626, 627, 628, 629, 631, 633, 634, 636, 638, 640, 641, 643, 644, 660, 674, 681, 684, 685, 700, 703, 715, 716, 722, 723, 725, 726, 727, 732, 733, 736, 737, 738, 741, 742, 752, 758, 761, 771, 773, 774, 776, 789, 793, 802, 807, 809, 810, 811, 815, 816, 817, 820, 821, 822, 823, 824, 825, 826, 827, 828, 830, 833, 834, 836, 837, 838, 839, 841, 842, 843, 844, 846, 848, 849, 850, 851, 852, 856, 860, 861, 866, 867, 868, 873, 874], "retriev": [13, 15, 19, 532, 554, 579, 631, 817, 838], "mlp_encod": [13, 28, 29, 809, 861], "create_model": [13, 28, 29, 809, 861], "mixer_b16_224": [13, 28, 29, 809, 861], "nois": [13, 15, 28, 29, 809, 860, 861], "randn": [13, 15, 28, 29, 375, 493, 809, 861], "tf_mlp_encod": [13, 28, 29], "output_torch": [13, 15], "output_tf": [13, 15], "output_dens": [13, 28, 29, 809], "dens": [13, 26, 28, 29, 313, 366, 789, 809], "unit": [13, 28, 29, 54, 70, 77, 94, 95, 107, 109, 110, 111, 112, 113, 114, 115, 292, 293, 296, 300, 302, 303, 306, 307, 308, 364, 501, 502, 623, 809, 816, 820, 826, 838, 839, 841, 852, 868, 871], "activ": [13, 26, 28, 29, 54, 55, 58, 69, 77, 81, 92, 107, 108, 109, 110, 111, 112, 113, 114, 115, 292, 293, 294, 296, 300, 301, 302, 303, 304, 305, 306, 307, 308, 592, 633, 660, 663, 788, 789, 807, 809, 816, 817, 826, 832, 842, 843, 850, 861, 867, 870], "mention": [13, 15, 28, 29, 34, 815, 816, 817, 821, 828, 833, 834, 837, 838, 841, 844, 857, 862, 867], "basic": [13, 15, 19, 22, 26, 28, 29, 32, 35, 375, 488, 809, 810, 815, 828, 841], "fulli": [13, 15, 17, 18, 21, 26, 28, 29, 42, 54, 77, 384, 526, 789, 809, 821, 826, 833, 836, 844, 846, 847, 848, 849, 850, 851, 852, 858, 862, 865, 866, 867, 873, 874], "fine": [13, 15, 28, 29, 816, 817, 826, 828, 838, 848, 851, 873], "tune": [13, 15, 28, 29, 872, 873], "ground": [13, 15, 374, 450, 768, 770, 781, 813, 831, 838, 841, 856], "ret": [13, 15, 28, 29, 48, 49, 50, 51, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 99, 100, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 177, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 206, 209, 210, 211, 212, 213, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 366, 369, 370, 371, 372, 373, 374, 375, 378, 379, 380, 382, 384, 385, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 404, 405, 406, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 428, 433, 435, 438, 440, 443, 446, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 487, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 569, 570, 571, 573, 574, 578, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 718, 721, 722, 723, 724, 725, 726, 727, 732, 733, 734, 735, 736, 737, 738, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 770, 773, 774, 775, 776, 786, 791, 793, 798, 803, 805, 809, 826, 827, 829, 830, 836, 837, 838, 839, 842, 846, 851, 861], "op": [13, 19, 40, 785, 798, 807, 842, 846, 852], "eagertensor": [13, 19, 40, 798, 839], "readi": [13, 15, 20, 21, 22, 30, 31, 32, 33, 34, 35, 42, 44, 815, 816], "deepmind": [14, 858], "perceiverio": [14, 858], "backbon": [14, 42, 809, 846, 849], "TO": [14, 16, 27], "replac": [14, 16, 27, 43, 53, 54, 55, 61, 63, 71, 76, 77, 78, 84, 86, 129, 271, 307, 310, 364, 366, 375, 486, 489, 493, 573, 574, 578, 626, 629, 631, 636, 640, 696, 735, 773, 817, 823, 824, 826, 827, 835, 838, 841, 848, 851, 852, 857, 861, 874], "efficientnet": 15, "include_top": [15, 809], "eff_encod": [15, 809], "applic": [15, 17, 42, 44, 47, 54, 58, 77, 81, 97, 373, 448, 633, 634, 638, 644, 660, 663, 688, 721, 722, 723, 727, 728, 760, 762, 809, 816, 825, 826, 827, 835, 850, 864, 865, 867, 869, 871, 873], "efficientnet_v2": [15, 809], "efficientnetv2b0": [15, 809], "storag": [15, 42, 43, 849, 857], "googleapi": [15, 42, 43], "efficientnetv2": 15, "b0_notop": 15, "h5": [15, 71], "24274472": 15, "0u": 15, "torch_eff_encod": [15, 809], "modes_to_trac": 15, "1280": [15, 542, 631, 809], "state": [16, 27, 42, 58, 77, 81, 97, 184, 185, 186, 187, 188, 270, 372, 418, 599, 601, 604, 606, 607, 627, 629, 631, 633, 658, 659, 771, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 809, 813, 816, 823, 826, 827, 829, 830, 831, 832, 833, 838, 841, 845, 846, 847, 849, 857, 861, 873, 874], "welcom": [17, 43, 809, 810, 816, 817, 818, 840], "goal": [17, 42, 244, 629, 809, 815, 818, 857, 867, 873], "provid": [17, 19, 23, 26, 28, 29, 33, 34, 40, 46, 50, 54, 55, 59, 61, 64, 67, 68, 71, 73, 77, 78, 82, 84, 87, 90, 91, 119, 136, 138, 155, 156, 157, 158, 159, 167, 177, 189, 193, 206, 289, 372, 373, 375, 378, 384, 408, 416, 420, 425, 429, 442, 443, 447, 448, 465, 467, 476, 496, 498, 500, 529, 541, 573, 574, 625, 626, 627, 628, 629, 631, 633, 634, 636, 638, 641, 644, 645, 660, 676, 679, 690, 699, 700, 707, 719, 741, 761, 763, 764, 765, 774, 789, 793, 798, 799, 809, 815, 816, 817, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 836, 837, 838, 839, 841, 842, 844, 848, 850, 852, 856, 860, 861, 862, 865, 866, 867, 868, 869, 870, 871, 874], "varieti": [17, 820, 825, 826, 827, 841, 843, 863, 865, 869, 870, 873, 874], "organ": [17, 821, 824, 834, 838, 840, 842, 854, 857], "main": [17, 29, 50, 54, 59, 77, 82, 129, 142, 143, 144, 310, 325, 326, 366, 373, 375, 424, 470, 626, 634, 667, 668, 688, 809, 812, 815, 816, 817, 818, 820, 823, 824, 831, 835, 837, 865, 867, 868, 873], "exactli": [17, 21, 31, 40, 41, 45, 287, 629, 815, 824, 825, 826, 827, 828, 830, 841, 844, 856, 858], "rush": [17, 858], "jump": [17, 839], "straight": [17, 809, 825, 838, 841, 848], "quickstart": 17, "introduct": [17, 19, 26, 28, 29, 867], "point": [17, 26, 51, 53, 54, 59, 63, 65, 67, 74, 76, 77, 82, 86, 90, 123, 124, 125, 127, 129, 132, 139, 140, 145, 149, 162, 166, 170, 177, 217, 218, 219, 220, 222, 223, 224, 225, 226, 233, 234, 235, 237, 238, 240, 242, 243, 244, 250, 251, 252, 253, 258, 259, 260, 261, 262, 270, 272, 273, 275, 277, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 309, 310, 312, 332, 333, 350, 351, 354, 356, 366, 369, 372, 373, 374, 379, 384, 387, 396, 397, 398, 416, 426, 446, 450, 505, 506, 507, 508, 509, 519, 520, 521, 529, 624, 626, 627, 629, 634, 640, 641, 642, 643, 644, 664, 666, 669, 670, 671, 673, 675, 676, 677, 680, 681, 682, 683, 684, 685, 686, 688, 691, 737, 738, 744, 746, 747, 748, 749, 752, 754, 755, 757, 758, 759, 760, 761, 762, 763, 798, 799, 807, 809, 813, 815, 816, 817, 820, 821, 823, 825, 826, 828, 829, 831, 833, 837, 838, 841, 842, 844, 846, 848, 849, 858, 860, 873], "those": [17, 41, 42, 59, 61, 71, 77, 82, 84, 123, 176, 237, 270, 490, 611, 626, 627, 629, 631, 634, 636, 638, 641, 681, 684, 696, 717, 744, 812, 815, 816, 817, 818, 821, 824, 825, 826, 835, 837, 838, 839, 841, 844, 856, 864], "deeper": [17, 19, 29, 49, 638, 726, 727, 817, 819, 841, 845, 856], "showcas": [17, 809], "real": [17, 25, 53, 54, 67, 76, 77, 90, 99, 109, 112, 115, 139, 140, 217, 218, 219, 220, 222, 223, 224, 225, 226, 235, 237, 238, 240, 242, 244, 248, 249, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 267, 270, 272, 273, 275, 279, 280, 281, 283, 284, 285, 286, 287, 288, 290, 291, 332, 333, 339, 340, 341, 351, 369, 372, 373, 395, 416, 417, 426, 427, 623, 626, 629, 634, 641, 644, 669, 670, 671, 675, 682, 684, 685, 688, 691, 744, 757, 759, 760, 761, 762, 824, 869], "world": [17, 25, 817, 869], "whether": [17, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 63, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 95, 100, 107, 108, 109, 110, 111, 112, 113, 114, 115, 122, 124, 125, 131, 133, 138, 140, 146, 149, 150, 152, 155, 156, 157, 158, 159, 160, 163, 164, 165, 167, 168, 169, 170, 172, 173, 174, 175, 177, 189, 193, 194, 196, 197, 199, 201, 204, 205, 207, 210, 211, 213, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 248, 249, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 300, 301, 302, 303, 304, 306, 307, 308, 310, 326, 331, 332, 333, 334, 335, 337, 339, 347, 348, 354, 356, 358, 359, 360, 366, 369, 372, 373, 374, 375, 384, 391, 392, 393, 395, 396, 397, 398, 414, 416, 418, 420, 435, 437, 443, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 465, 466, 467, 469, 471, 472, 473, 476, 480, 487, 489, 490, 491, 493, 496, 498, 500, 501, 502, 504, 506, 519, 520, 521, 522, 531, 534, 535, 537, 538, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 569, 573, 574, 575, 576, 578, 581, 582, 584, 585, 587, 588, 589, 590, 592, 594, 596, 597, 604, 605, 608, 610, 613, 614, 616, 618, 619, 620, 621, 623, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 640, 644, 645, 647, 648, 649, 650, 656, 657, 658, 659, 660, 663, 664, 665, 670, 671, 672, 673, 674, 675, 677, 679, 681, 682, 683, 688, 693, 694, 695, 696, 699, 700, 701, 703, 704, 705, 706, 707, 708, 710, 711, 712, 713, 714, 715, 716, 721, 722, 723, 725, 726, 727, 728, 732, 733, 735, 736, 737, 738, 740, 743, 746, 747, 748, 749, 750, 754, 755, 758, 760, 761, 763, 764, 765, 768, 770, 773, 785, 786, 789, 790, 791, 792, 793, 802, 809, 810, 815, 816, 821, 824, 826, 828, 833, 837, 838, 841, 843, 844, 860, 861], "beginn": [17, 810, 867], "advanc": [17, 40, 816, 818, 866], "got": [17, 40, 830], "cover": [17, 28, 54, 77, 372, 409, 410, 411, 815, 820, 821, 823, 826, 828, 829, 834, 835, 841, 844, 845], "write": [17, 18, 28, 29, 40, 44, 48, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 94, 99, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 138, 139, 140, 141, 142, 143, 145, 146, 149, 151, 211, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 314, 315, 326, 330, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 355, 356, 357, 364, 366, 369, 372, 373, 374, 375, 378, 379, 380, 382, 384, 385, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 404, 405, 406, 408, 409, 410, 411, 414, 416, 417, 420, 421, 423, 424, 432, 433, 435, 438, 439, 440, 441, 447, 450, 451, 452, 453, 455, 456, 465, 466, 469, 470, 471, 472, 473, 474, 475, 478, 479, 480, 482, 483, 484, 485, 487, 488, 489, 490, 491, 493, 494, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 512, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 537, 538, 542, 543, 544, 549, 550, 559, 573, 574, 612, 613, 616, 618, 619, 620, 621, 623, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 660, 663, 664, 665, 666, 667, 668, 670, 671, 672, 673, 674, 675, 677, 678, 679, 680, 681, 683, 685, 686, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 706, 707, 708, 709, 711, 734, 735, 736, 737, 738, 740, 742, 743, 745, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 771, 809, 814, 815, 817, 819, 820, 822, 823, 825, 826, 828, 829, 830, 834, 837, 839, 842, 846, 848, 851, 858, 867, 874], "familiar": [17, 18, 19, 809, 815, 816], "concept": [17, 18, 19], "agnost": [17, 18, 19, 20, 28, 29, 30, 34, 40, 809, 821, 826, 833, 846, 848, 851, 852, 873, 874], "unifi": [17, 18, 19, 21, 22, 28, 31, 32, 36, 43, 71, 210, 628, 818, 819, 820, 821, 825, 826, 830, 835, 836, 838, 844, 846, 852, 855, 857, 859, 861, 863, 864, 865, 867, 871, 874], "alongsid": [17, 18, 19, 20, 30, 633, 660, 857], "turn": [17, 18, 21, 31, 58, 81, 94, 95, 396, 397, 398, 633, 656, 789, 816, 823, 824, 827, 828, 838, 841, 858], "wrapper": [17, 18, 21, 54, 77, 295, 781, 821, 823, 824, 826, 830, 834, 837, 838, 841, 848, 854, 863, 867], "unus": [17, 18, 21, 828, 837], "part": [17, 18, 21, 50, 53, 54, 76, 77, 82, 99, 109, 112, 115, 142, 143, 144, 250, 254, 277, 325, 326, 352, 366, 369, 372, 373, 375, 384, 416, 427, 481, 529, 623, 626, 629, 634, 670, 671, 770, 809, 815, 816, 817, 818, 820, 823, 826, 832, 834, 837, 838, 841, 842, 844, 846, 847, 851, 852, 860, 861, 862, 865, 867, 872, 873, 874], "lazi": [17, 18, 21, 24, 31, 34, 35, 46], "eager": [17, 18, 21, 24, 26, 31, 34, 35, 46, 807, 824, 852, 867], "understand": [17, 18, 19, 23, 40, 46, 813, 814, 815, 816, 817, 819, 820, 823, 828, 829, 833, 839, 840, 845, 858, 863, 873], "decor": [17, 18, 23, 25, 26, 34, 46, 536, 631, 773, 775, 781, 813, 820, 821, 824, 826, 827, 831, 834, 837, 838, 839, 844], "kornia": [17, 18, 25, 28, 29, 42, 46, 809, 861], "roundup": 19, "indep": [19, 28], "futur": [19, 26, 28, 42, 634, 670, 671, 809, 816, 817, 818, 825, 826, 841, 842, 844, 848, 852, 856, 858, 873], "proof": [19, 28], "delv": [19, 29, 809], "theori": [19, 811, 823], "deep": [19, 26, 28, 40, 71, 542, 631, 809, 810, 811, 814, 815, 817, 820, 823, 824, 826, 832, 836, 839, 845, 848, 849, 856, 865, 867, 870, 871, 873, 874], "esenti": [19, 28], "abstract": [19, 28, 29, 788, 793, 809, 824, 826, 837, 838, 841, 844, 850, 856, 865, 867, 869, 870, 874], "quirk": [19, 28], "perk": [19, 28, 809, 821, 824], "under": [19, 28, 29, 54, 374, 453, 454, 802, 809, 815, 816, 819, 820, 827, 828, 829, 832, 838, 839, 841, 844, 845, 846, 849, 851, 852, 860, 861, 867, 870, 874], "hood": [19, 28, 29, 809, 819, 827, 828, 832, 838, 841, 844, 845, 846, 849, 851, 860, 861, 874], "appropi": 19, "string": [19, 28, 29, 44, 54, 55, 58, 71, 77, 81, 147, 148, 160, 167, 189, 190, 191, 192, 193, 195, 204, 211, 212, 216, 372, 373, 375, 415, 419, 427, 481, 492, 521, 540, 627, 628, 631, 633, 634, 646, 647, 648, 649, 651, 653, 655, 671, 768, 770, 774, 802, 803, 822, 823, 825, 826, 827, 830, 838, 846, 849], "simplest": [19, 816, 828, 841, 844], "interact": [19, 28, 43, 46, 815, 866, 867, 872], "submodul": [19, 28, 42, 44, 99, 100, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 785, 786, 788, 789, 791, 792, 793, 794, 815, 816, 817, 820, 823, 825, 827, 831, 834, 835, 841, 845, 846, 850, 854], "ones": [19, 26, 28, 40, 46, 50, 54, 56, 58, 63, 71, 73, 77, 81, 86, 129, 133, 138, 140, 146, 196, 197, 233, 310, 366, 384, 528, 612, 626, 628, 629, 632, 633, 651, 652, 736, 737, 738, 774, 809, 815, 821, 825, 828, 833, 834, 840, 841, 848, 849, 867], "likewis": [19, 24, 28, 35, 809, 817, 824, 826, 829, 833, 834, 838, 844, 849, 860, 861, 873], "nativearrai": [19, 28, 29, 49, 50, 51, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 65, 67, 70, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 99, 103, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 119, 120, 122, 124, 125, 126, 128, 133, 134, 135, 136, 137, 138, 140, 142, 143, 146, 149, 150, 151, 152, 155, 156, 157, 158, 159, 160, 162, 165, 168, 169, 170, 172, 174, 176, 177, 183, 193, 194, 210, 211, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 314, 315, 319, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 364, 366, 369, 370, 372, 373, 374, 375, 378, 379, 380, 382, 384, 386, 387, 388, 389, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 404, 405, 406, 408, 409, 410, 411, 412, 414, 415, 416, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 464, 465, 466, 467, 469, 470, 471, 472, 473, 475, 476, 478, 479, 480, 481, 482, 483, 484, 485, 487, 488, 489, 490, 491, 493, 494, 495, 496, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 519, 520, 521, 522, 523, 531, 534, 535, 537, 538, 542, 543, 544, 546, 549, 550, 551, 552, 553, 555, 557, 558, 559, 562, 565, 566, 568, 573, 574, 575, 578, 587, 588, 589, 590, 591, 592, 594, 596, 597, 599, 610, 612, 613, 614, 616, 618, 619, 620, 621, 623, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 715, 716, 717, 718, 722, 723, 724, 727, 732, 733, 734, 735, 736, 737, 738, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 794, 821, 824, 828, 830, 833, 834, 835, 837, 838, 842, 843, 846, 848, 854], "alia": [19, 28, 332, 333, 369, 624, 815, 838, 859, 862], "select": [19, 28, 33, 46, 54, 67, 77, 90, 373, 375, 384, 427, 440, 489, 490, 493, 520, 521, 644, 754, 755, 815, 816, 817, 825, 831, 837, 841, 846, 848, 851, 852, 867, 870, 871], "lastli": [19, 28, 821], "contain": [19, 28, 29, 43, 48, 49, 50, 51, 53, 54, 55, 58, 59, 60, 61, 64, 65, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 95, 99, 107, 108, 109, 110, 111, 112, 113, 114, 115, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 160, 162, 163, 164, 165, 168, 169, 170, 172, 174, 177, 194, 196, 197, 198, 203, 211, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 314, 315, 316, 319, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 364, 366, 369, 371, 372, 373, 374, 375, 378, 384, 386, 387, 388, 389, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 404, 405, 406, 408, 409, 410, 411, 412, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 433, 437, 438, 439, 440, 441, 442, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 504, 505, 506, 507, 508, 509, 510, 511, 512, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 537, 538, 542, 543, 544, 545, 546, 547, 548, 549, 550, 553, 554, 555, 557, 558, 559, 561, 562, 563, 565, 566, 568, 573, 574, 578, 581, 583, 588, 589, 590, 591, 592, 594, 596, 597, 604, 610, 611, 612, 613, 614, 616, 618, 619, 620, 621, 623, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 654, 655, 656, 657, 659, 660, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 718, 722, 723, 724, 727, 728, 732, 733, 734, 735, 736, 737, 738, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 768, 770, 773, 780, 781, 789, 790, 791, 793, 794, 798, 802, 803, 807, 809, 811, 813, 815, 816, 819, 820, 821, 822, 823, 825, 826, 828, 829, 831, 833, 834, 835, 836, 837, 839, 841, 843, 844, 845, 846, 847, 850, 852, 853, 854, 856, 860, 867, 868, 873], "subclass": [19, 28, 29, 835, 838, 844, 861], "dict": [19, 28, 29, 42, 46, 49, 55, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 100, 107, 108, 109, 110, 111, 112, 113, 114, 115, 120, 122, 131, 133, 138, 140, 146, 150, 152, 163, 164, 165, 169, 170, 177, 193, 196, 197, 211, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 248, 249, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 303, 304, 306, 307, 308, 310, 322, 331, 332, 333, 334, 335, 337, 339, 347, 348, 354, 356, 358, 359, 360, 366, 375, 395, 396, 397, 398, 416, 449, 450, 451, 452, 453, 454, 455, 456, 459, 460, 461, 465, 466, 481, 487, 489, 490, 491, 493, 498, 500, 501, 502, 504, 506, 519, 520, 521, 522, 531, 532, 534, 535, 537, 538, 542, 543, 544, 545, 546, 547, 548, 549, 550, 553, 555, 557, 558, 559, 561, 562, 565, 569, 573, 574, 588, 589, 590, 592, 594, 596, 597, 610, 621, 625, 627, 628, 631, 638, 647, 648, 649, 650, 656, 657, 663, 664, 665, 670, 671, 672, 673, 674, 675, 677, 679, 681, 682, 688, 693, 694, 695, 696, 700, 703, 704, 705, 706, 707, 710, 711, 715, 716, 718, 721, 722, 723, 724, 726, 727, 728, 732, 733, 735, 736, 737, 738, 740, 743, 746, 747, 748, 749, 750, 754, 755, 758, 760, 761, 763, 764, 765, 770, 771, 786, 789, 791, 798, 803, 821, 824, 849, 850, 854, 860, 861, 862], "recurs": [19, 28, 29, 42, 44, 49, 71, 72, 163, 164, 196, 197, 373, 445, 547, 548, 554, 627, 628, 631, 638, 715, 716, 719, 725, 726, 727, 768, 816, 820, 823, 824, 831, 834, 837, 850, 852], "fashion": [19, 775, 841, 861], "native_arrai": [19, 28, 29, 50, 51, 53, 73, 75, 76, 77, 78, 82, 89, 107, 110, 133, 136, 138, 140, 146, 149, 150, 151, 152, 160, 165, 172, 194, 203, 211, 227, 231, 236, 237, 238, 240, 244, 248, 256, 257, 265, 270, 273, 276, 279, 284, 332, 333, 360, 369, 374, 375, 455, 481, 487, 491, 531, 534, 561, 562, 565, 596, 623, 626, 627, 628, 629, 631, 633, 634, 635, 636, 640, 641, 644, 645, 647, 648, 655, 663, 666, 670, 671, 676, 677, 681, 685, 686, 688, 691, 693, 695, 696, 703, 735, 744, 753, 759, 762, 764, 770, 780, 798, 813, 831, 839, 841], "data_class": [19, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 392, 393, 542, 546, 684, 709], "low": [19, 28, 31, 47, 54, 58, 63, 77, 81, 86, 372, 415, 419, 633, 640, 646, 647, 648, 649, 651, 653, 655, 736, 738, 775, 824, 830, 837, 838, 844, 846, 863, 865, 867, 868, 869, 871, 873], "c": [19, 28, 34, 43, 44, 50, 54, 55, 56, 58, 61, 67, 73, 74, 76, 77, 78, 79, 81, 82, 84, 88, 90, 94, 95, 113, 124, 125, 135, 138, 162, 165, 220, 231, 237, 238, 258, 259, 261, 270, 273, 281, 288, 372, 373, 375, 378, 384, 386, 387, 388, 389, 400, 405, 421, 423, 425, 426, 428, 440, 459, 460, 461, 471, 489, 493, 498, 499, 500, 503, 521, 534, 542, 543, 544, 545, 553, 557, 558, 588, 597, 612, 613, 616, 618, 619, 620, 623, 626, 627, 629, 631, 632, 633, 634, 636, 638, 641, 642, 644, 647, 648, 649, 650, 651, 652, 654, 669, 671, 673, 703, 707, 715, 718, 722, 723, 724, 726, 727, 732, 733, 744, 749, 755, 756, 761, 763, 792, 802, 803, 810, 816, 819, 822, 823, 824, 828, 834, 836, 845, 846, 847, 849, 852, 854, 855, 857, 858, 861, 863, 867, 871, 872, 874], "fundament": [19, 28, 825, 838, 844, 846, 856, 867], "common": [19, 22, 28, 32, 53, 54, 71, 76, 176, 247, 255, 336, 343, 369, 627, 629, 810, 813, 815, 816, 823, 826, 827, 828, 834, 835, 838, 842, 844, 852, 856, 864, 867, 874], "signatur": [19, 28, 375, 384, 481, 519, 826, 827, 828, 829, 833, 837, 841, 842, 844, 857, 864, 873], "matmul": [19, 28, 29, 45, 59, 82, 373, 443, 611, 631, 634, 684, 822, 841, 842, 846], "to_n": [19, 28, 29, 40, 49, 72, 846], "jaxlib": [19, 25, 43, 798, 816, 821, 826, 827, 833, 842, 846, 848], "xla_extens": [19, 25, 798, 821, 826, 827, 833, 842, 846, 848], "arrayimpl": [19, 25, 798], "why": [19, 809, 817, 837, 848, 855, 857], "underli": [19, 28, 29, 40, 54, 61, 77, 84, 97, 227, 230, 232, 267, 374, 375, 454, 471, 629, 634, 636, 682, 703, 824, 837, 844, 860, 867], "disabl": [19, 28, 54, 77, 375, 489, 791, 807, 823], "array_mod": [19, 28, 575, 599, 631, 843], "set_array_mod": [19, 28, 599, 631, 843], "composit": [19, 28, 163, 164, 196, 197, 289, 373, 433, 547, 548, 627, 628, 629, 631, 774, 776, 815, 819, 821, 822, 824, 826, 827, 835, 837, 838, 839, 841, 844, 846, 850, 851, 852, 854, 860, 868], "ultim": [19, 28, 860], "sigmoid": [19, 28, 29, 40, 48, 54, 70, 77, 298, 364, 379, 505, 623, 785, 846, 849, 850], "z": [19, 28, 29, 41, 42, 50, 53, 54, 55, 59, 60, 63, 65, 67, 73, 76, 77, 78, 82, 83, 84, 86, 90, 99, 100, 134, 135, 137, 138, 198, 220, 221, 225, 227, 230, 232, 237, 248, 249, 252, 253, 254, 256, 257, 262, 264, 266, 267, 268, 269, 277, 286, 297, 298, 332, 333, 335, 364, 369, 374, 384, 450, 452, 453, 454, 455, 456, 462, 466, 477, 518, 519, 522, 529, 534, 546, 549, 550, 557, 558, 574, 587, 589, 590, 598, 611, 626, 628, 629, 631, 634, 635, 636, 638, 640, 641, 642, 644, 665, 674, 679, 680, 684, 691, 693, 694, 695, 696, 718, 722, 724, 732, 736, 737, 738, 741, 746, 756, 757, 759, 760, 761, 788, 809, 822, 824, 827, 828, 846, 848, 860], "divid": [19, 24, 28, 29, 45, 53, 54, 55, 61, 71, 76, 77, 84, 99, 100, 244, 378, 451, 498, 499, 500, 503, 589, 629, 631, 636, 705, 821, 824, 828, 832, 841], "exp": [19, 28, 29, 53, 54, 76, 77, 113, 115, 242, 262, 275, 298, 364, 372, 374, 400, 405, 454, 623, 629, 634, 682, 836, 838], "high": [19, 28, 29, 47, 54, 58, 63, 77, 81, 86, 372, 415, 419, 582, 631, 633, 640, 646, 647, 648, 649, 651, 653, 655, 736, 738, 775, 812, 815, 830, 836, 838, 849, 854, 858, 863, 864, 865, 866, 867, 871, 873, 874], "network": [19, 26, 28, 29, 40, 42, 47, 633, 657, 785, 788, 789, 809, 824, 834, 846, 850, 857, 861, 863, 865, 866, 867, 871, 873, 874], "entir": [19, 28, 29, 31, 44, 54, 67, 68, 71, 77, 78, 90, 91, 210, 240, 242, 282, 283, 332, 333, 369, 372, 375, 384, 396, 397, 398, 481, 522, 555, 628, 629, 644, 645, 757, 758, 759, 760, 761, 762, 763, 764, 765, 789, 803, 815, 816, 817, 820, 821, 824, 826, 828, 830, 837, 838, 839, 841, 844, 846, 849, 850, 851, 852, 857, 858, 861, 867, 873, 874], "congratul": [19, 25], "There": [19, 26, 29, 34, 94, 365, 367, 368, 376, 377, 381, 775, 809, 815, 816, 817, 820, 821, 823, 824, 826, 827, 828, 830, 832, 834, 836, 838, 839, 843, 846, 849, 852, 856, 860, 868, 869, 873, 874], "independ": [19, 29, 54, 63, 77, 86, 220, 237, 270, 280, 378, 379, 503, 505, 629, 634, 640, 665, 683, 735, 809, 820, 826, 828, 835, 846, 851, 861, 865], "good": [19, 28, 29, 809, 814, 815, 816, 817, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 839, 841, 842, 844, 846, 847, 850], "foundat": [19, 857, 870], "power": [19, 28, 29, 53, 54, 55, 59, 76, 77, 78, 82, 99, 100, 231, 240, 241, 275, 330, 343, 366, 369, 372, 420, 579, 590, 602, 629, 631, 634, 638, 676, 689, 721, 788, 843, 848, 849, 850, 867, 869, 873], "defin": [20, 26, 28, 29, 30, 50, 54, 55, 59, 73, 77, 78, 82, 97, 113, 138, 142, 143, 144, 220, 237, 244, 270, 271, 279, 281, 284, 297, 301, 305, 311, 314, 315, 316, 325, 326, 327, 328, 329, 332, 333, 335, 364, 366, 369, 372, 373, 375, 384, 408, 425, 481, 487, 522, 557, 558, 578, 623, 626, 629, 631, 633, 634, 644, 658, 665, 670, 671, 683, 757, 758, 759, 761, 809, 815, 816, 821, 822, 825, 826, 829, 833, 836, 838, 839, 841, 842, 848, 850, 852, 854, 862, 864, 865, 866, 867, 868, 871, 873, 874], "div": [20, 21, 22, 23, 24, 28, 29, 30, 31, 32, 33, 34, 35, 862], "sub": [20, 21, 22, 23, 24, 28, 29, 30, 31, 32, 33, 34, 35, 54, 59, 61, 71, 72, 76, 77, 78, 82, 84, 100, 269, 373, 375, 384, 427, 467, 476, 496, 525, 526, 554, 631, 634, 636, 637, 668, 688, 705, 712, 713, 714, 815, 817, 819, 824, 830, 838, 839, 841, 848, 849, 850, 862, 863], "with_numpi": 20, "123": [20, 73, 74, 77, 133, 165, 453, 545, 626, 631, 803, 841], "reproduc": [20, 45, 58, 81, 633, 656, 773, 774, 775, 776, 781, 813, 820, 831], "uniform": [20, 21, 22, 23, 24, 28, 29, 30, 31, 33, 34, 35, 42, 54, 63, 77, 86, 384, 522, 640, 735, 736, 738, 788, 809, 840, 850, 861, 862, 874], "x_": [20, 30, 95, 281, 629, 862], "66391283": 20, "12516928": 20, "38367081": 20, "03102401": 20, "76419425": 20, "52797794": 20, "90346956": 20, "61316347": 20, "27585283": 20, "66309303": 20, "compat": [20, 26, 30, 34, 40, 47, 53, 54, 59, 61, 64, 67, 68, 76, 77, 82, 84, 87, 90, 91, 99, 100, 151, 220, 225, 227, 229, 230, 231, 232, 237, 238, 244, 248, 249, 256, 257, 262, 264, 266, 267, 270, 273, 275, 279, 286, 291, 332, 333, 369, 627, 629, 634, 636, 641, 644, 645, 665, 677, 680, 683, 686, 690, 691, 703, 742, 757, 758, 759, 760, 761, 762, 763, 764, 765, 807, 809, 816, 822, 833, 838, 839, 842, 846, 852, 857], "sever": [20, 21, 30, 31, 33, 34, 35, 54, 77, 94, 372, 373, 386, 387, 388, 389, 441, 773, 816, 817, 842, 852, 865, 871], "pro": [20, 21, 22, 30, 31, 32, 33, 34, 35], "pick": [21, 31, 788], "off": [21, 31, 58, 59, 81, 82, 396, 397, 398, 633, 634, 656, 668, 688, 788, 789, 816, 831, 845, 858, 860, 873], "last": [21, 26, 28, 31, 50, 54, 58, 59, 60, 61, 64, 66, 67, 68, 71, 73, 77, 81, 82, 83, 84, 89, 90, 91, 95, 99, 134, 135, 138, 193, 310, 338, 366, 369, 372, 373, 374, 375, 382, 384, 401, 406, 416, 417, 418, 429, 453, 471, 481, 483, 489, 493, 512, 520, 521, 626, 628, 633, 634, 635, 636, 641, 643, 644, 645, 659, 660, 665, 668, 679, 688, 690, 694, 695, 697, 700, 703, 704, 705, 707, 741, 742, 750, 752, 753, 754, 755, 764, 765, 789, 798, 809, 817, 820, 822, 823, 826, 828, 837, 839, 841, 844, 846, 852, 858, 861, 867], "illustr": [21, 31, 822, 846], "trigger": [21, 31, 791, 815, 832], "unif": [21, 23, 24, 31, 33, 810, 848, 857, 863, 873], "55563945": 21, "65538704": 21, "14150524": 21, "46951997": 21, "30220294": 21, "14739668": 21, "57017946": 21, "91962677": 21, "51029003": 21, "59644395": 21, "arbitrari": [21, 31, 50, 51, 54, 71, 74, 77, 136, 150, 177, 319, 374, 451, 459, 460, 461, 614, 626, 627, 632, 833, 834, 836, 837, 838, 841, 850, 852, 860, 862, 868, 873], "constitu": [21, 31, 71, 851], "due": [21, 28, 29, 31, 45, 47, 270, 280, 375, 489, 629, 816, 820, 825, 830, 837, 838, 857, 860, 861, 867], "manner": [21, 29, 31, 41, 49, 72, 638, 727, 816, 826, 827, 829, 834, 838, 842, 849, 852, 856, 863, 865, 873, 874], "5556394": 21, "655387": 21, "1415051": 21, "4695197": 21, "3022028": 21, "1473966": 21, "5701794": 21, "91962665": 21, "51028997": 21, "5964439": 21, "assess": [21, 31, 815, 844], "985": 21, "000": [21, 76, 271, 773, 813, 825, 831], "69": [21, 40, 47, 53, 79, 86, 218, 260, 372, 394, 404, 616, 629, 632, 634, 675, 676, 737, 841, 849], "On": [21, 28, 29, 816, 826, 827, 832, 838, 841, 844, 847, 851], "hand": [21, 53, 373, 443, 773, 809, 820, 826, 827, 832, 834, 841, 852], "singl": [21, 31, 40, 45, 53, 63, 71, 76, 86, 95, 289, 348, 369, 373, 379, 440, 506, 597, 610, 614, 629, 631, 632, 633, 640, 642, 660, 736, 737, 738, 746, 773, 789, 807, 815, 816, 817, 820, 825, 828, 833, 834, 835, 836, 837, 838, 839, 841, 842, 844, 846, 849, 850, 851, 852, 858], "learnt": [22, 32], "two": [22, 32, 34, 40, 50, 54, 59, 65, 77, 78, 82, 99, 100, 120, 123, 129, 136, 142, 143, 144, 175, 183, 231, 245, 246, 280, 325, 326, 331, 344, 345, 347, 348, 350, 352, 359, 366, 369, 372, 373, 374, 375, 384, 401, 424, 425, 426, 435, 440, 449, 451, 455, 460, 481, 487, 491, 519, 529, 534, 625, 626, 627, 629, 631, 633, 634, 636, 642, 658, 664, 666, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 688, 690, 708, 746, 747, 748, 749, 773, 775, 781, 789, 815, 816, 820, 821, 826, 827, 828, 829, 834, 838, 839, 841, 844, 845, 849, 851, 858, 864, 872], "workflow": [22, 32, 43, 815, 817, 818, 822, 826, 836, 838, 849, 854, 858, 866, 873, 874], "ivy_norm": 22, "jax_norm": [22, 28, 29], "wider": [22, 32, 582, 605, 631, 826, 843, 873], "avoid": [22, 32, 34, 54, 61, 77, 237, 242, 244, 260, 270, 374, 375, 378, 451, 459, 460, 461, 467, 469, 471, 472, 473, 476, 480, 487, 496, 498, 499, 500, 536, 552, 554, 577, 582, 605, 629, 631, 636, 699, 700, 701, 703, 705, 706, 708, 710, 775, 776, 816, 817, 822, 823, 824, 825, 826, 830, 835, 838, 841, 842, 843, 844, 867], "act": [22, 32, 54, 77, 295, 360, 370, 817, 828, 843, 852, 874], "shorthand": [22, 32, 34, 841], "pair": [22, 32, 42, 54, 58, 77, 81, 225, 244, 317, 359, 366, 369, 372, 406, 415, 417, 419, 629, 633, 634, 646, 647, 648, 649, 651, 653, 655, 663, 665, 803], "93968587": 22, "26075466": 22, "22723222": 22, "06276492": 22, "47426987": 22, "72835908": 22, "71737559": 22, "50411096": 22, "65419174": 22, "15576624": 22, "implic": [22, 32, 33, 36, 824], "satisfi": [23, 24, 25, 26, 42, 44, 47, 54, 372, 373, 395, 427, 826, 828], "fw": [23, 24, 25, 26, 58, 81, 384, 519, 633, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 770, 816, 841], "mxnet": [23, 24, 25, 26, 206, 628, 798, 815, 816, 857, 874], "einop": [23, 24, 25, 26, 42, 44, 47, 55, 78, 542, 543, 544, 631, 826, 857], "psutil": [23, 24, 25, 26, 42, 44, 47], "termcolor": [23, 24, 25, 26, 42, 44, 47, 71, 100], "colorama": [23, 24, 25, 26, 42, 44], "535": [23, 24, 25, 26, 48, 70, 115, 623, 830], "diskcach": [23, 24, 25, 26, 42], "auth": [23, 24, 25, 26], "urllib3": [23, 24, 25, 26, 42], "pyvi": [23, 24, 25, 26, 28, 29], "dill": [23, 24, 25, 26, 42], "astunpars": [23, 24, 25, 26], "cloudpickl": [23, 24, 25, 26], "gast": [23, 24, 25, 26], "66": [23, 24, 25, 26, 40, 42, 44, 67, 77, 78, 79, 372, 404, 542, 543, 616, 631, 632, 634, 644, 679, 756], "wheel": [23, 24, 25, 26, 42, 44, 47, 856], "six": [23, 24, 25, 26, 42, 47, 816, 844], "cachetool": [23, 24, 25, 26], "pyasn1": [23, 24, 25, 26], "rsa": [23, 24, 25, 26], "jinja2": [23, 24, 25, 26], "jsonpickl": [23, 24, 25, 26], "networkx": [23, 24, 25, 26, 47], "charset": [23, 24, 25, 26, 42], "idna": [23, 24, 25, 26, 42], "certifi": [23, 24, 25, 26, 42], "2017": [23, 24, 25, 26, 42, 633, 660], "jedi": [23, 24, 25, 26], "inlin": [23, 24, 25, 26, 823], "prompt": [23, 24, 25, 26, 815, 817], "toolkit": [23, 24, 25, 26, 867, 868, 874], "pygment": [23, 24, 25, 26], "traitlet": [23, 24, 25, 26], "exceptiongroup": [23, 24, 25, 26], "pexpect": [23, 24, 25, 26], "markupsaf": [23, 24, 25, 26], "parso": [23, 24, 25, 26], "ptyprocess": [23, 24, 25, 26], "wcwidth": [23, 24, 25, 26], "asttoken": [23, 24, 25, 26], "pure": [23, 24, 25, 26, 34, 44, 809, 829, 833, 838, 844, 848, 851, 852, 867, 873, 874], "eagerli": [23, 24, 28, 29, 33, 34, 35, 42, 809, 860, 861, 862], "lazili": [23, 24, 25, 28, 29, 33, 35, 46, 809, 860, 861, 862], "actual": [23, 33, 813, 817, 819, 825, 831, 834, 835, 837, 838, 839, 841, 844, 845, 850, 852, 868, 873], "occur": [23, 28, 29, 33, 46, 51, 53, 65, 74, 76, 88, 152, 271, 287, 627, 629, 641, 642, 741, 742, 746, 747, 748, 749, 820, 825, 827, 830, 843], "becaus": [23, 31, 33, 43, 54, 372, 395, 768, 816, 817, 820, 821, 822, 823, 824, 826, 827, 829, 830, 831, 833, 834, 835, 836, 837, 838, 839, 841, 844, 846, 850, 851, 852, 867, 870, 873], "argument": [23, 25, 26, 28, 29, 31, 33, 34, 35, 40, 42, 44, 46, 49, 50, 53, 54, 55, 59, 71, 72, 76, 77, 78, 94, 95, 100, 123, 124, 125, 127, 128, 129, 130, 132, 133, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 152, 168, 172, 177, 206, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 237, 238, 240, 242, 243, 244, 248, 249, 250, 251, 252, 253, 257, 259, 260, 261, 262, 264, 265, 266, 267, 270, 272, 273, 274, 275, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 310, 325, 326, 332, 333, 335, 338, 340, 341, 366, 369, 372, 373, 375, 384, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 404, 405, 406, 409, 410, 411, 416, 418, 420, 427, 481, 489, 493, 519, 522, 526, 532, 533, 535, 536, 541, 543, 544, 549, 553, 555, 557, 559, 569, 573, 574, 588, 592, 597, 598, 611, 621, 626, 627, 628, 629, 631, 632, 633, 634, 636, 637, 638, 639, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 655, 656, 657, 658, 660, 663, 664, 665, 666, 667, 668, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 690, 691, 692, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 714, 721, 734, 741, 742, 744, 745, 746, 747, 748, 749, 750, 753, 757, 758, 759, 760, 761, 762, 763, 764, 765, 768, 770, 773, 774, 781, 786, 789, 790, 791, 798, 802, 805, 809, 815, 819, 820, 821, 822, 823, 824, 828, 829, 832, 834, 839, 841, 842, 844, 846, 848, 849, 854, 856, 860, 861, 862, 867], "altern": [23, 33, 43, 54, 77, 82, 94, 95, 331, 339, 340, 341, 345, 347, 348, 349, 350, 352, 353, 354, 358, 359, 369, 809, 815, 816, 823, 837, 849, 870], "dummi": [23, 24, 33, 34, 35, 41, 817], "assum": [23, 24, 33, 34, 35, 50, 53, 54, 55, 58, 59, 60, 76, 77, 78, 81, 82, 83, 123, 124, 125, 127, 128, 129, 130, 132, 133, 134, 135, 136, 139, 140, 141, 142, 143, 145, 146, 152, 168, 172, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 237, 238, 240, 242, 243, 244, 248, 249, 250, 251, 252, 253, 254, 257, 259, 260, 261, 262, 264, 265, 266, 267, 270, 272, 273, 274, 275, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 310, 326, 332, 333, 335, 338, 356, 366, 369, 372, 373, 375, 384, 391, 392, 393, 394, 396, 397, 398, 404, 409, 410, 411, 416, 418, 427, 441, 443, 481, 489, 493, 519, 522, 549, 553, 555, 557, 566, 588, 597, 621, 626, 627, 629, 631, 632, 633, 634, 635, 636, 639, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 655, 656, 657, 660, 663, 664, 665, 666, 667, 668, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 690, 691, 692, 693, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 734, 741, 742, 744, 745, 746, 747, 748, 749, 750, 753, 757, 758, 759, 760, 761, 762, 763, 764, 765, 789, 802, 809, 816, 820, 822, 825, 826, 829, 839, 841, 844, 848, 849, 852], "201733": 23, "slowli": [23, 33], "norm": [23, 33, 34, 54, 55, 59, 77, 78, 82, 93, 94, 372, 373, 394, 395, 399, 400, 401, 404, 405, 406, 416, 417, 423, 427, 501, 502, 504, 537, 538, 559, 631, 634, 675, 691, 734, 789, 793, 842], "slow": [23, 33, 811, 816, 823], "34431235": [23, 24], "51129461": [23, 24], "06686894": [23, 24], "36452447": [23, 24], "98795534": [23, 24], "15493582": [23, 24], "91630631": [23, 24], "41939619": [23, 24], "78909753": [23, 24], "19475674": [23, 24], "norm_trac": 23, "float64": [23, 24, 51, 54, 63, 67, 73, 74, 76, 77, 78, 86, 90, 123, 131, 132, 149, 152, 156, 157, 162, 163, 166, 167, 172, 173, 177, 179, 180, 186, 189, 271, 343, 369, 374, 384, 449, 454, 519, 568, 626, 627, 631, 634, 640, 670, 671, 675, 691, 737, 738, 755, 770, 773, 774, 826, 839, 841], "norm_tran": [23, 33], "know": [23, 24, 33, 34, 35, 65, 642, 746, 747, 748, 749, 811, 815, 817, 827, 835, 839, 841, 844, 858, 862, 868], "981554": 24, "happen": [24, 28, 29, 289, 629, 809, 816, 817, 818, 827, 837, 841, 849, 858, 860, 861], "wherea": [24, 35, 77, 372, 418, 817, 821, 824, 826, 827, 828, 833, 834, 841, 851, 864], "subtract": [24, 28, 29, 53, 76, 99, 100, 131, 375, 481, 626, 629, 821, 824, 828], "begin": [24, 54, 77, 281, 374, 375, 449, 465, 481, 482, 483, 484, 485, 629, 638, 715, 726, 773, 816, 820, 825, 839], "filelock": [25, 42], "extens": [25, 42, 53, 59, 76, 123, 124, 125, 127, 128, 129, 130, 132, 133, 134, 136, 139, 140, 141, 142, 143, 145, 146, 152, 162, 165, 177, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 237, 238, 240, 242, 243, 244, 248, 249, 250, 251, 252, 253, 257, 259, 260, 261, 262, 264, 265, 266, 267, 270, 272, 273, 274, 275, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 332, 333, 335, 369, 372, 375, 384, 416, 489, 493, 519, 626, 627, 629, 634, 636, 641, 642, 643, 644, 645, 664, 665, 666, 667, 668, 670, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 690, 691, 697, 699, 700, 701, 703, 704, 706, 707, 711, 741, 742, 744, 745, 746, 747, 748, 749, 750, 753, 757, 758, 759, 760, 761, 762, 763, 764, 765, 814, 816, 817, 829, 831, 832, 841, 864, 867, 874], "sympi": [25, 857], "fsspec": [25, 42], "mpmath": 25, "scenario": [25, 826, 836], "often": [25, 54, 374, 449, 814, 820, 830, 833, 834, 838, 841, 852, 858, 868, 871, 874], "fortun": [25, 26, 820], "everyth": [25, 43, 802, 809, 815, 816, 817, 818, 819, 825, 828, 837, 838, 839, 841, 847, 852, 853, 858], "practic": [25, 817, 822, 825, 838, 840, 870], "specifi": [25, 26, 28, 29, 33, 34, 35, 46, 48, 50, 51, 53, 54, 55, 58, 59, 60, 61, 63, 64, 65, 67, 68, 70, 71, 74, 76, 77, 78, 81, 82, 83, 84, 86, 87, 90, 91, 94, 107, 108, 109, 110, 111, 112, 113, 114, 115, 123, 127, 132, 134, 139, 142, 143, 145, 149, 151, 198, 203, 205, 209, 210, 211, 279, 288, 292, 297, 298, 300, 326, 331, 348, 353, 364, 366, 369, 372, 373, 374, 375, 379, 384, 391, 392, 393, 395, 401, 406, 416, 417, 418, 419, 427, 439, 441, 446, 449, 453, 454, 455, 457, 471, 474, 483, 484, 486, 487, 489, 493, 506, 517, 519, 520, 521, 524, 525, 529, 532, 549, 550, 552, 554, 555, 568, 570, 578, 611, 623, 626, 627, 628, 629, 631, 633, 634, 635, 636, 638, 640, 641, 642, 643, 644, 645, 658, 660, 663, 665, 667, 668, 670, 671, 675, 683, 686, 688, 689, 690, 691, 693, 694, 695, 696, 697, 698, 699, 700, 704, 706, 707, 710, 711, 719, 720, 722, 723, 730, 731, 732, 733, 736, 737, 738, 740, 741, 742, 744, 747, 748, 749, 750, 754, 755, 756, 760, 762, 764, 765, 773, 776, 785, 789, 790, 791, 803, 807, 816, 819, 823, 826, 827, 833, 834, 835, 837, 838, 839, 841, 846, 849, 850, 860, 861, 862, 873], "everi": [25, 28, 29, 34, 42, 50, 54, 55, 77, 78, 132, 133, 298, 332, 333, 346, 364, 369, 372, 375, 409, 410, 411, 418, 495, 531, 626, 631, 815, 817, 820, 822, 823, 825, 826, 828, 832, 833, 834, 835, 837, 838, 839, 841, 846, 848, 850, 860, 861, 862, 867], "jax_kornia": [25, 28, 29, 809, 861], "though": [25, 814, 815, 817, 826, 827, 829, 834, 837, 838, 844, 849, 852], "000000000034": [25, 28, 29, 809, 861], "raw_img": [25, 28, 29, 809, 861], "enhanc": [25, 28, 29, 809, 840, 861], "sharp": [25, 28, 29, 809], "prefer": [25, 28, 29, 244, 629, 809, 816, 824, 830, 831, 835, 838, 853, 867], "leverag": [25, 28, 29, 809, 816, 837, 861, 865, 867], "whole": [26, 54, 77, 375, 378, 488, 501, 502, 504, 817, 823, 832], "full": [26, 54, 59, 77, 81, 82, 94, 95, 97, 162, 249, 257, 320, 321, 322, 323, 324, 366, 373, 374, 375, 446, 447, 453, 454, 482, 485, 576, 585, 600, 608, 626, 627, 629, 631, 633, 634, 648, 650, 651, 652, 654, 677, 681, 683, 684, 774, 781, 809, 816, 817, 823, 826, 829, 830, 833, 834, 838, 841, 844, 846, 852, 857, 858, 865, 867, 873], "advantag": [26, 28, 29, 809, 816, 817, 826, 837, 838, 853, 861, 867], "complex": [26, 28, 29, 42, 48, 53, 54, 59, 67, 70, 74, 76, 77, 82, 90, 107, 108, 109, 110, 111, 112, 113, 114, 115, 139, 140, 155, 169, 178, 184, 217, 218, 219, 220, 221, 222, 223, 226, 234, 235, 237, 238, 240, 242, 250, 251, 252, 253, 254, 258, 259, 260, 261, 270, 272, 273, 275, 277, 280, 281, 282, 283, 284, 287, 288, 292, 297, 298, 300, 335, 340, 341, 364, 369, 372, 373, 384, 395, 406, 416, 417, 421, 426, 427, 428, 439, 441, 527, 528, 589, 590, 623, 626, 627, 629, 631, 634, 641, 644, 669, 670, 671, 675, 682, 684, 686, 688, 691, 744, 759, 760, 762, 774, 785, 803, 812, 815, 818, 823, 826, 828, 835, 838, 841, 842, 844, 849, 850, 851, 852, 854, 861, 863, 865, 867, 869, 873, 874], "neccessari": 26, "set_random_se": [26, 45], "301436": 26, "_c": 26, "0x7f252c392390": 26, "convolut": [26, 54, 58, 77, 81, 372, 393, 411, 633, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 775, 789, 807, 861, 865, 867], "flatten": [26, 28, 29, 42, 44, 47, 54, 55, 59, 61, 64, 65, 77, 78, 82, 84, 87, 88, 337, 353, 369, 373, 375, 384, 424, 470, 480, 484, 489, 490, 493, 495, 517, 524, 525, 526, 527, 528, 529, 542, 546, 631, 634, 636, 641, 642, 672, 679, 691, 697, 702, 704, 741, 742, 746, 747, 748, 749, 768, 770, 809, 837, 844], "keyword": [26, 28, 29, 44, 46, 49, 50, 54, 71, 77, 100, 136, 271, 372, 375, 384, 420, 481, 519, 533, 536, 569, 598, 626, 629, 631, 634, 638, 644, 685, 721, 762, 768, 770, 774, 790, 791, 802, 815, 821, 824, 826, 827, 835, 837, 838, 839, 841, 842, 844, 849, 860, 861, 862], "input_arrai": [26, 28, 29, 837], "torch_model": [26, 28, 29, 46], "159": [26, 70, 107, 623, 633, 657], "state_upd": 26, "properti": [26, 71, 94, 95, 96, 97, 98, 99, 103, 791, 793, 820, 824, 834, 839, 841, 848, 849, 850, 873], "_transpil": 26, "thank": [26, 849, 857], "fledg": [26, 816, 846, 847], "output_arrai": [26, 28, 29, 54, 451], "0893": 26, "1504": 26, "1372": 26, "0991": 26, "0867": 26, "0851": 26, "0911": 26, "0804": 26, "0926": 26, "0881": 26, "softmaxbackward0": 26, "furthermor": 26, "relat": [26, 244, 629, 809, 811, 814, 815, 816, 817, 823, 830, 838, 841, 842, 843, 844, 861, 870], "continu": [26, 28, 29, 44, 122, 284, 292, 364, 625, 629, 809, 814, 815, 816, 819, 820, 831, 837, 840, 841, 852, 857, 858, 867], "regress": [27, 867, 874], "checkout": [28, 43, 817, 820, 841], "f705efe7cb5d18df17ce6c1e20f04d0eb4933f48": 28, "theoret": 28, "aspect": [28, 29, 810, 836, 849, 867], "switch": [28, 40, 781, 822, 830, 834, 835, 874], "easiest": [28, 809, 811, 816, 853], "defer": [28, 29, 815, 821, 826, 827, 834, 837, 838, 841, 873], "similarli": [28, 41, 136, 144, 220, 325, 332, 333, 366, 369, 626, 629, 822, 826, 838, 844, 848, 873], "obtain": [28, 29, 47, 54, 77, 316, 366, 372, 412, 633, 660, 775, 838, 860], "essenc": [28, 868, 873], "becom": [28, 54, 77, 94, 343, 369, 375, 461, 636, 696, 798, 817, 818, 824, 826, 828, 830, 837, 852, 856, 858, 860], "regardless": [28, 29, 40, 71, 810, 826, 830, 848, 851, 858], "slide": [28, 54, 58, 77, 81, 372, 391, 392, 393, 409, 410, 411, 412, 415, 419, 633, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 789], "A": [28, 29, 43, 50, 51, 54, 55, 61, 63, 67, 68, 71, 74, 76, 77, 78, 81, 82, 84, 86, 88, 91, 94, 95, 100, 119, 120, 122, 129, 137, 144, 150, 191, 210, 272, 274, 278, 310, 321, 325, 327, 328, 329, 331, 345, 348, 352, 353, 366, 369, 372, 373, 374, 375, 378, 379, 384, 387, 401, 415, 418, 420, 427, 435, 440, 443, 451, 455, 466, 469, 487, 491, 492, 498, 499, 500, 501, 505, 506, 507, 508, 509, 517, 526, 529, 534, 536, 545, 554, 557, 558, 589, 590, 591, 594, 622, 625, 626, 627, 628, 629, 631, 632, 633, 634, 636, 638, 640, 644, 645, 656, 660, 668, 670, 673, 678, 679, 683, 684, 696, 699, 701, 705, 707, 715, 718, 720, 722, 723, 724, 725, 726, 730, 731, 732, 733, 735, 736, 737, 738, 740, 746, 756, 764, 765, 768, 770, 771, 773, 774, 775, 776, 781, 788, 803, 807, 809, 814, 815, 816, 819, 824, 826, 827, 830, 833, 834, 838, 839, 841, 846, 849, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 867, 868], "regressor": [28, 29, 809], "input_dim": [28, 29, 43, 809], "output_dim": [28, 29, 43, 809], "linear0": [28, 29, 40, 809, 849, 850], "linear1": [28, 29, 40, 809, 849, 850], "instanti": [28, 29, 781, 829], "adam": [28, 29, 40, 44, 56, 79, 533, 612, 613, 618, 631, 632, 793, 809, 849, 850, 851, 867], "n_training_exampl": [28, 29, 809], "2000": [28, 29, 77, 311, 366, 809], "random_norm": [28, 29, 58, 59, 63, 81, 82, 86, 542, 631, 633, 634, 640, 648, 650, 651, 652, 654, 655, 659, 684, 809], "linspac": [28, 29, 50, 73, 123, 626, 809, 833, 844, 846, 874], "loss_fn": [28, 29, 40, 42, 44, 809, 849, 850, 851], "pred": [28, 29, 43, 44, 54, 60, 77, 83, 374, 450, 453, 635, 693, 694, 695, 809, 824, 834, 837], "gradient": [28, 29, 42, 44, 54, 77, 94, 210, 361, 369, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 628, 637, 712, 713, 714, 770, 781, 793, 809, 819, 842, 849, 850, 852, 867], "grad": [28, 29, 40, 44, 612, 632, 793, 809, 836, 849, 850, 851], "execute_with_gradi": [28, 29, 40, 44, 632, 809, 849, 850, 851, 852], "lambda": [28, 29, 45, 47, 77, 120, 122, 294, 304, 541, 554, 614, 615, 617, 622, 625, 631, 632, 634, 638, 670, 722, 723, 727, 809, 815, 834, 835, 836, 839, 844, 846, 849], "2d": [28, 29, 44, 54, 77, 94, 310, 366, 372, 373, 375, 384, 387, 388, 396, 397, 439, 446, 460, 470, 519, 789, 807, 809, 838, 844], "5f": [28, 29, 809], "nonetheless": [28, 29], "slight": [28, 29, 826, 841, 850], "introduc": [28, 29, 244, 629, 636, 642, 704, 746, 815, 824, 825, 826, 835, 839, 841, 844, 849, 856], "address": [28, 29, 54, 55, 77, 375, 489, 596, 631, 815, 817, 820, 821, 833, 840, 846, 858, 863, 865, 867, 873], "extract": [28, 29, 36, 43, 54, 77, 95, 375, 464, 490, 838, 840, 842, 863, 867, 868, 873], "gc": [28, 29, 554, 631], "decompos": [28, 29, 54, 77, 94, 97, 320, 321, 322, 323, 324, 345, 352, 366, 369, 373, 437, 442, 445, 448, 838, 851], "said": [28, 29, 775, 842, 858, 860], "otherwis": [28, 29, 46, 49, 50, 51, 53, 54, 55, 58, 59, 64, 65, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 94, 107, 108, 109, 110, 111, 112, 113, 114, 115, 120, 123, 125, 126, 131, 133, 134, 135, 138, 140, 146, 149, 150, 152, 153, 155, 156, 157, 158, 159, 168, 172, 176, 177, 193, 211, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 248, 249, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 300, 301, 302, 303, 304, 306, 307, 308, 310, 320, 321, 322, 323, 324, 331, 332, 333, 334, 335, 337, 338, 339, 347, 348, 354, 356, 358, 359, 360, 364, 366, 369, 372, 373, 375, 378, 391, 392, 393, 396, 397, 398, 416, 429, 444, 446, 449, 450, 451, 452, 453, 454, 455, 456, 459, 460, 461, 465, 466, 467, 469, 471, 472, 473, 480, 487, 489, 490, 491, 493, 496, 498, 500, 501, 502, 504, 506, 518, 519, 520, 521, 522, 531, 534, 535, 537, 538, 542, 543, 544, 545, 546, 549, 550, 553, 555, 557, 558, 559, 561, 562, 565, 566, 573, 574, 588, 589, 590, 592, 594, 596, 597, 598, 610, 614, 616, 621, 625, 626, 627, 628, 629, 631, 632, 633, 634, 637, 638, 641, 642, 643, 644, 645, 647, 648, 649, 650, 656, 657, 658, 660, 663, 664, 665, 666, 670, 671, 672, 673, 674, 675, 677, 679, 681, 682, 684, 688, 690, 691, 693, 694, 695, 696, 699, 700, 701, 703, 704, 705, 706, 707, 708, 710, 711, 712, 713, 728, 735, 736, 737, 738, 740, 741, 742, 743, 745, 746, 747, 748, 749, 750, 752, 754, 755, 757, 758, 759, 760, 761, 762, 763, 764, 765, 768, 773, 774, 789, 791, 792, 798, 809, 817, 821, 824, 826, 827, 828, 834, 835, 837, 841, 846, 853, 860, 861], "x0": [28, 29, 47, 78, 534, 631, 828], "normalize_trac": [28, 29], "fname": [28, 29, 45, 47, 791, 849], "anticip": [28, 29], "addition": [28, 29, 824, 837, 838, 873], "normalize_native_comp": [28, 29], "return_backend_compiled_fn": 28, "immedi": [28, 29, 807, 815, 816], "built": [28, 29, 34, 42, 44, 47, 123, 626, 789, 790, 791, 809, 816, 817, 823, 824, 841, 847, 853, 860, 866, 867, 871], "summar": [28, 29, 94, 841], "eager_graph": [28, 29, 809, 860, 861], "lazy_graph": [28, 29, 809, 860, 861], "codebas": [28, 29, 208, 209, 628, 810, 812, 819, 826, 832, 837, 838, 840, 841, 842, 845, 858], "thought": [28, 29, 816, 817, 833, 857, 865], "research": [28, 29, 42, 809, 856, 861, 867, 874], "wa": [28, 29, 34, 43, 54, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 97, 107, 108, 109, 110, 111, 112, 113, 114, 115, 131, 133, 138, 140, 146, 150, 152, 177, 211, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 248, 249, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 300, 301, 302, 303, 304, 306, 307, 308, 309, 310, 331, 332, 333, 334, 335, 337, 339, 347, 348, 354, 355, 356, 358, 359, 360, 366, 369, 373, 396, 397, 398, 416, 447, 449, 450, 451, 452, 453, 454, 455, 456, 459, 460, 461, 465, 466, 487, 489, 490, 491, 493, 498, 500, 501, 502, 504, 506, 519, 520, 521, 522, 531, 534, 535, 537, 538, 542, 543, 544, 545, 546, 549, 550, 553, 555, 557, 558, 559, 561, 562, 565, 573, 574, 588, 589, 590, 592, 594, 596, 597, 598, 610, 616, 621, 629, 631, 638, 644, 645, 647, 648, 649, 650, 656, 657, 663, 664, 665, 670, 671, 672, 673, 674, 675, 677, 679, 681, 682, 688, 693, 694, 695, 696, 700, 703, 704, 705, 706, 707, 710, 711, 728, 735, 736, 737, 738, 740, 743, 746, 747, 748, 749, 750, 754, 755, 757, 758, 759, 760, 761, 762, 763, 764, 765, 798, 809, 811, 817, 820, 822, 823, 825, 828, 834, 836, 838, 846, 848, 857, 860, 861, 866, 867, 869], "matter": [28, 29, 34, 828, 856], "haven": [28, 29, 34, 853, 867], "jax_out": [28, 29], "ideal": [28, 29, 825, 826, 838, 844, 849], "wise": [28, 48, 53, 54, 59, 70, 76, 77, 82, 99, 100, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 217, 218, 220, 221, 222, 224, 225, 227, 228, 229, 230, 231, 232, 236, 237, 238, 239, 241, 244, 245, 246, 247, 248, 249, 255, 256, 257, 262, 263, 264, 265, 266, 267, 268, 269, 270, 273, 275, 276, 278, 279, 286, 291, 292, 293, 294, 295, 296, 298, 300, 302, 303, 304, 306, 307, 308, 331, 334, 339, 342, 343, 344, 347, 348, 349, 350, 354, 355, 358, 359, 364, 369, 372, 373, 375, 396, 397, 398, 425, 432, 468, 475, 477, 478, 497, 623, 629, 636, 665, 696, 793, 844], "worth": [28, 29], "differenti": [28, 29, 292, 362, 363, 364, 371, 867], "chosen": [28, 29, 47, 97, 123, 225, 626, 629, 641, 745, 815, 825, 838], "plai": [28, 29, 374, 453, 809, 812, 816, 818, 821, 827, 831, 838, 841, 851, 867, 870], "role": [28, 29, 809, 812, 817, 818, 827, 838, 847, 868, 870, 874], "dl": [28, 29], "cnn": [28, 29, 867], "effortlessli": [28, 29], "previous": [28, 29, 600, 631, 798, 815, 816, 822, 834, 836, 841, 846], "pre": [28, 29, 809, 813, 815, 840, 841, 851, 852, 853, 867], "default_devic": [28, 29, 203, 206, 207, 208, 214, 215, 628, 827, 830, 831], "as_n": [28, 29, 51, 52, 71, 74, 75, 155, 156, 157, 158, 159, 160, 166, 193, 194, 627, 628, 826], "certainli": [28, 29, 809, 857, 873], "upon": [28, 29, 46, 807, 817, 818, 828, 837, 841, 844, 852, 866, 867], "unnecessari": [28, 29, 838], "extend": [28, 29, 54, 77, 375, 384, 481, 522, 822, 823, 826, 829, 830, 833, 838, 842, 852, 864, 867, 873], "infrastructur": [28, 29, 809, 863, 869, 870], "least": [28, 53, 54, 59, 76, 77, 237, 255, 270, 372, 375, 384, 400, 405, 459, 460, 461, 470, 472, 519, 629, 634, 641, 674, 744, 809, 817, 821, 825, 826, 827, 828, 834, 837, 841, 861], "coco": 28, "seamlessli": [29, 841], "therefor": [29, 34, 50, 53, 54, 59, 76, 77, 123, 124, 125, 127, 128, 129, 130, 132, 133, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 152, 168, 172, 176, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 237, 238, 240, 242, 243, 244, 248, 249, 250, 251, 252, 253, 257, 259, 260, 261, 262, 264, 265, 266, 267, 270, 272, 273, 274, 275, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 310, 325, 326, 332, 333, 335, 338, 366, 369, 372, 373, 375, 384, 391, 392, 393, 394, 396, 397, 398, 404, 409, 410, 411, 416, 418, 427, 474, 481, 482, 484, 489, 493, 494, 519, 522, 526, 535, 543, 544, 549, 553, 555, 557, 559, 573, 588, 592, 597, 621, 626, 627, 629, 631, 632, 633, 634, 636, 639, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 655, 656, 657, 660, 663, 664, 665, 666, 667, 668, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 690, 691, 692, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 734, 741, 742, 744, 745, 746, 747, 748, 749, 750, 753, 757, 758, 759, 760, 761, 762, 763, 764, 765, 815, 817, 820, 821, 824, 825, 826, 827, 828, 829, 830, 833, 834, 835, 837, 838, 839, 841, 842, 844, 846, 848, 850, 852, 856, 864, 867, 873], "wide": [29, 809, 817, 841, 865, 867], "prepar": [29, 42, 44, 47, 809, 825], "plenti": 29, "resourc": [29, 810, 815, 816, 825], "visit": [29, 815, 816, 817, 825], "page": [29, 809, 815, 816, 817, 823, 825, 831, 847, 848, 851, 853, 862, 875], "newli": [30, 31, 43, 45, 51, 74, 149, 536, 627, 631, 817, 825, 837, 841], "randon": [30, 31, 33, 34, 35], "mean_": 30, "std_": 30, "detect": [30, 34, 53, 71, 76, 252, 629, 638, 715, 726, 815, 816, 822, 824, 825, 832, 841, 849, 850], "inspect": [30, 34, 532, 631], "__": [30, 31, 32, 33, 34, 35, 71, 828, 849], "exhibit": [31, 873], "via": [31, 34, 244, 373, 375, 442, 445, 448, 489, 629, 638, 725, 726, 817, 820, 824, 826, 827, 837, 842, 844, 846, 848, 849, 867], "script": [31, 809, 816, 817, 820, 825, 828, 846, 852, 867], "comp": 31, "low_level": 31, "chain": [31, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 94, 107, 108, 109, 110, 111, 112, 113, 114, 115, 131, 133, 138, 140, 146, 150, 152, 165, 169, 170, 177, 211, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 248, 249, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 296, 300, 301, 302, 303, 304, 306, 307, 308, 310, 331, 332, 333, 335, 337, 339, 347, 348, 354, 356, 358, 359, 360, 396, 397, 398, 416, 449, 450, 451, 452, 453, 454, 455, 456, 465, 466, 487, 489, 491, 493, 498, 500, 501, 502, 504, 506, 519, 520, 521, 522, 531, 534, 535, 537, 538, 542, 543, 544, 545, 546, 549, 550, 553, 555, 557, 558, 559, 561, 562, 565, 573, 574, 588, 589, 590, 592, 594, 596, 597, 610, 616, 621, 637, 638, 647, 648, 649, 650, 656, 657, 663, 664, 665, 670, 671, 672, 673, 674, 675, 677, 679, 681, 682, 688, 693, 694, 695, 696, 700, 703, 704, 705, 706, 707, 710, 711, 712, 713, 717, 728, 735, 736, 737, 738, 740, 743, 746, 747, 748, 749, 750, 754, 755, 758, 760, 761, 763, 764, 765, 794, 821, 824, 836, 838, 850, 851, 852, 867], "un": [31, 167, 627, 826, 846], "partial_comp": 31, "time_funct": 31, "slowest": [31, 54, 61, 77, 84, 375, 471, 636, 703], "express": [31, 53, 54, 76, 77, 95, 218, 222, 224, 225, 234, 236, 276, 282, 287, 356, 369, 629, 795, 803, 829, 838, 846, 851, 867, 868], "fastest": [31, 54, 61, 77, 84, 373, 375, 440, 471, 636, 703], "maxim": [31, 834, 837, 846, 864, 865, 869, 870, 871], "conclud": [32, 842], "collect": [32, 42, 44, 46, 47, 49, 71, 72, 623, 628, 631, 632, 633, 635, 638, 639, 640, 728, 785, 789, 790, 791, 792, 793, 816, 825, 830, 831, 835, 836, 839, 841, 865, 867, 870], "norm_comp": [33, 34], "global": [33, 34, 44, 55, 71, 78, 100, 155, 156, 157, 158, 159, 208, 209, 210, 579, 580, 583, 589, 590, 602, 603, 606, 627, 628, 631, 781, 792, 798, 816, 821, 822, 825, 826, 827, 830, 834, 838, 846, 867], "approach": [33, 813, 815, 816, 817, 821, 824, 826, 827, 831, 834, 838, 841, 842, 844, 848, 849, 852, 864, 871, 873], "b": [34, 48, 53, 54, 55, 58, 59, 67, 70, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 94, 95, 98, 99, 100, 107, 108, 109, 110, 111, 112, 113, 114, 124, 125, 126, 131, 132, 133, 135, 138, 140, 146, 149, 150, 151, 152, 160, 170, 172, 177, 194, 211, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 314, 315, 327, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 358, 359, 360, 364, 366, 369, 372, 373, 374, 375, 379, 382, 384, 391, 392, 393, 394, 396, 397, 400, 404, 405, 406, 409, 410, 411, 415, 416, 419, 422, 425, 427, 429, 433, 436, 440, 443, 448, 449, 450, 452, 453, 454, 455, 459, 460, 461, 462, 465, 466, 467, 468, 471, 472, 473, 475, 476, 477, 478, 480, 481, 487, 489, 490, 491, 492, 493, 496, 497, 502, 504, 506, 507, 509, 510, 512, 519, 520, 521, 522, 524, 526, 529, 531, 534, 535, 537, 538, 541, 542, 543, 544, 545, 546, 549, 550, 553, 555, 557, 558, 559, 561, 562, 565, 566, 573, 574, 588, 589, 590, 592, 596, 597, 610, 612, 613, 614, 616, 618, 619, 620, 621, 623, 626, 627, 629, 631, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 654, 655, 656, 657, 659, 663, 664, 665, 666, 668, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 682, 683, 684, 685, 686, 688, 689, 690, 691, 693, 694, 695, 696, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 715, 718, 721, 722, 723, 724, 726, 727, 732, 733, 734, 736, 737, 738, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 773, 802, 803, 807, 809, 810, 813, 817, 819, 820, 822, 824, 825, 828, 831, 834, 836, 839, 845, 846, 847, 849, 850, 851, 855, 858, 860, 863], "option": [34, 43, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 94, 99, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 154, 155, 156, 157, 158, 159, 165, 167, 177, 189, 193, 205, 208, 209, 210, 211, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 314, 315, 316, 320, 321, 322, 323, 324, 325, 326, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 364, 366, 369, 372, 373, 374, 375, 378, 379, 380, 382, 384, 385, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 404, 405, 406, 408, 409, 410, 411, 412, 414, 416, 417, 418, 420, 421, 423, 424, 425, 427, 429, 431, 432, 433, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 459, 460, 461, 464, 465, 466, 467, 469, 471, 472, 473, 474, 475, 476, 478, 479, 480, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 512, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 534, 535, 537, 538, 540, 542, 543, 544, 545, 546, 549, 550, 552, 553, 554, 555, 557, 558, 559, 561, 562, 565, 570, 573, 574, 578, 588, 589, 590, 592, 594, 596, 597, 598, 610, 612, 613, 616, 618, 619, 620, 621, 623, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 663, 664, 665, 666, 667, 668, 670, 671, 672, 673, 674, 675, 677, 678, 679, 680, 681, 682, 683, 685, 686, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 721, 722, 726, 727, 732, 734, 735, 736, 737, 738, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 768, 770, 774, 781, 785, 786, 788, 789, 791, 793, 794, 802, 807, 815, 816, 817, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 837, 838, 839, 841, 842, 844, 846, 851, 852, 860, 861, 862, 867, 873], "prioriti": [34, 71, 798, 812, 815, 817, 818, 827, 837], "normalize_via_oper": 34, "determin": [34, 53, 54, 59, 61, 65, 68, 71, 76, 77, 78, 82, 89, 91, 94, 97, 99, 100, 129, 152, 154, 161, 167, 168, 169, 170, 172, 173, 174, 189, 199, 201, 202, 213, 218, 219, 220, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 234, 235, 237, 240, 242, 244, 250, 251, 252, 253, 254, 258, 259, 260, 261, 262, 267, 270, 275, 279, 282, 283, 284, 285, 286, 287, 288, 291, 301, 305, 351, 356, 364, 369, 372, 373, 374, 375, 384, 408, 416, 427, 449, 450, 489, 493, 519, 531, 534, 555, 556, 560, 561, 562, 563, 564, 565, 592, 610, 626, 627, 628, 629, 631, 634, 636, 637, 642, 645, 664, 665, 666, 668, 672, 673, 674, 676, 677, 679, 680, 682, 683, 688, 690, 691, 697, 712, 713, 714, 746, 747, 748, 749, 750, 764, 765, 775, 781, 788, 792, 824, 826, 827, 829, 834, 838, 841, 843, 844, 856], "think": [34, 815, 817, 825, 828, 844, 868], "uniqu": [34, 44, 54, 55, 65, 77, 78, 88, 372, 373, 375, 420, 443, 480, 481, 495, 566, 631, 637, 638, 642, 712, 713, 714, 717, 721, 746, 747, 748, 749, 775, 809, 820, 824, 834, 838, 839, 840, 844, 852, 856, 870], "rule": [34, 51, 53, 54, 59, 74, 76, 77, 82, 149, 152, 175, 176, 177, 226, 237, 270, 272, 279, 281, 289, 291, 372, 375, 384, 416, 469, 519, 627, 629, 634, 636, 664, 665, 672, 676, 679, 683, 697, 775, 802, 820, 821, 824, 825, 826, 828, 832, 833, 834, 836, 841, 844, 868], "broadcast": [34, 48, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 70, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 94, 99, 100, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 138, 139, 140, 141, 142, 143, 145, 146, 149, 150, 151, 211, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 248, 249, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 326, 332, 333, 334, 335, 336, 337, 340, 341, 343, 345, 347, 349, 350, 351, 352, 356, 364, 366, 369, 372, 373, 374, 375, 378, 379, 384, 391, 392, 393, 395, 396, 397, 398, 399, 400, 401, 405, 406, 408, 409, 410, 411, 414, 416, 421, 423, 424, 432, 433, 438, 439, 441, 450, 451, 452, 453, 455, 456, 462, 466, 469, 474, 482, 483, 484, 485, 487, 489, 491, 493, 494, 498, 501, 502, 504, 505, 506, 508, 509, 519, 520, 521, 522, 525, 526, 527, 528, 529, 537, 538, 542, 543, 544, 549, 550, 559, 573, 574, 612, 613, 616, 618, 619, 620, 621, 623, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 639, 640, 641, 642, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 660, 663, 664, 665, 666, 667, 668, 670, 671, 672, 673, 674, 675, 677, 678, 679, 680, 681, 683, 685, 686, 688, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 706, 707, 708, 709, 711, 734, 735, 736, 737, 738, 740, 741, 742, 743, 745, 749, 750, 754, 755, 757, 758, 759, 760, 761, 762, 763, 764, 765, 773, 775, 802, 824, 826, 828, 829, 830, 841, 842, 846], "elementwis": [34, 54, 62, 77, 85, 297, 299, 359, 364, 634, 639, 689, 734, 834, 842, 846], "taken": [34, 54, 59, 77, 82, 338, 369, 372, 417, 634, 668, 688, 815, 825, 838, 842, 851, 868], "account": [34, 44, 46, 54, 61, 77, 84, 284, 375, 471, 629, 636, 703, 788, 802, 816, 825, 829, 838, 842, 860], "fact": [34, 94, 817, 820, 825, 838, 841, 846, 849], "consum": [34, 770, 824, 825, 833, 839, 841], "thrown": [34, 559, 631, 816, 821, 827, 830, 832, 852], "doesn": [34, 559, 577, 631, 768, 789, 815, 816, 822, 824, 825, 826, 827, 828, 831, 832, 834, 836, 841, 844, 846, 852, 860, 865], "consider": [34, 815, 828, 833, 844, 856, 864, 865], "effect": [34, 50, 54, 56, 67, 77, 79, 90, 136, 374, 408, 453, 612, 620, 626, 632, 633, 644, 660, 761, 763, 773, 776, 815, 821, 824, 825, 829, 833, 837, 839, 844, 852, 857], "standalon": [35, 815, 821, 841, 854, 863, 868, 873, 874], "dynam": [35, 636, 703, 791, 798, 819, 825, 826, 827, 837, 838, 843, 846, 860, 867, 871], "static": [35, 54, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 103, 104, 126, 316, 372, 393, 406, 411, 420, 442, 448, 487, 499, 592, 626, 633, 660, 679, 786, 791, 838, 843, 852, 866, 867, 868], "flow": [36, 824, 860, 867, 868], "statement": [36, 41, 825, 837, 841, 844, 852, 860, 861], "opposit": 36, "exclud": [36, 67, 77, 90, 123, 144, 325, 366, 520, 521, 626, 640, 738, 754, 773, 776, 798, 828, 846, 860], "todo": [37, 38, 39, 44, 47, 77, 521, 815, 826, 838], "aim": [40, 813, 817, 820, 831, 835, 838, 841, 845, 865, 867, 870], "interfac": [40, 73, 131, 626, 848, 851, 852, 854, 857, 863, 864, 865, 866, 867, 871, 874], "set_framework": [40, 47], "44": [40, 44, 53, 54, 63, 76, 77, 86, 223, 270, 280, 284, 285, 336, 369, 372, 393, 394, 629, 633, 634, 638, 641, 644, 656, 679, 723, 736, 737, 745, 756], "45": [40, 42, 44, 53, 54, 67, 76, 77, 79, 81, 86, 100, 221, 225, 237, 280, 281, 340, 341, 354, 369, 372, 384, 394, 404, 415, 520, 526, 612, 618, 629, 632, 634, 636, 644, 679, 705, 737, 738, 756, 773], "46": [40, 42, 44, 54, 63, 77, 81, 86, 135, 260, 281, 311, 366, 372, 392, 410, 411, 626, 629, 638, 716, 736, 737], "underneath": [40, 825, 865], "sai": [40, 815, 816, 831, 835, 848, 858, 875], "clip": [40, 53, 54, 61, 76, 77, 78, 84, 268, 269, 375, 464, 489, 490, 537, 538, 629, 631, 636, 824, 834, 836, 837, 849, 851, 864], "a_min": 40, "a_max": 40, "tensforflow": 40, "clip_by_valu": [40, 851, 864], "clip_value_min": 40, "clip_value_max": 40, "clamp": [40, 54, 77, 297, 364, 851], "min": [40, 44, 51, 54, 55, 59, 67, 74, 77, 78, 82, 90, 142, 144, 162, 165, 269, 325, 328, 333, 366, 369, 373, 375, 427, 486, 527, 543, 573, 574, 589, 626, 627, 629, 631, 634, 644, 675, 681, 684, 685, 691, 809, 864], "max": [40, 42, 51, 54, 55, 59, 67, 74, 77, 78, 82, 90, 162, 165, 268, 332, 369, 372, 373, 374, 375, 391, 392, 393, 409, 410, 411, 412, 414, 416, 427, 449, 486, 488, 489, 537, 538, 543, 559, 573, 574, 627, 629, 631, 634, 644, 675, 677, 680, 773, 789, 793, 825, 838, 864], "49": [40, 44, 54, 63, 77, 81, 82, 284, 372, 373, 384, 394, 404, 415, 440, 520, 629, 644, 689, 737, 756], "devicearrai": [40, 821, 838, 846, 848], "concaten": [40, 54, 55, 61, 77, 82, 375, 466, 542, 546, 631, 633, 636, 660, 679, 697, 773, 839, 844, 846, 849], "accept": [40, 49, 50, 53, 54, 59, 72, 76, 77, 123, 124, 125, 127, 128, 129, 130, 132, 133, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 152, 168, 172, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 237, 238, 240, 242, 243, 244, 248, 249, 250, 251, 252, 253, 254, 257, 259, 260, 261, 262, 264, 265, 266, 267, 270, 272, 273, 274, 275, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 310, 325, 326, 332, 333, 335, 338, 339, 361, 366, 369, 371, 372, 373, 375, 384, 391, 392, 393, 394, 396, 397, 398, 404, 409, 410, 411, 416, 418, 427, 481, 489, 493, 519, 522, 526, 535, 543, 544, 549, 553, 555, 557, 559, 573, 588, 592, 597, 621, 626, 627, 629, 631, 632, 633, 634, 636, 639, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 655, 656, 657, 660, 663, 664, 665, 666, 667, 668, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 690, 691, 692, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 734, 741, 742, 744, 745, 746, 747, 748, 749, 750, 753, 757, 758, 759, 760, 761, 762, 763, 764, 765, 809, 815, 816, 817, 821, 824, 826, 827, 828, 829, 833, 834, 835, 836, 837, 838, 839, 841, 842, 844, 848, 854, 865], "jax_concat": 40, "tf_concat": 40, "np_concat": 40, "torch_concat": 40, "85": [40, 48, 54, 63, 70, 76, 77, 79, 81, 86, 100, 109, 222, 231, 232, 276, 292, 293, 296, 364, 384, 520, 589, 616, 623, 629, 631, 632, 633, 640, 657, 736, 737, 738], "mymodel": [40, 849], "x_in": [40, 849, 850, 851], "reduce_mean": [40, 809, 849, 850, 851], "91": [40, 54, 81, 86, 357, 369, 415, 633, 634, 640, 644, 657, 679, 737, 756], "49040043354034424": 40, "48975786566734314": 40, "4892795979976654": 40, "48886892199516296": 40, "4884953498840332": 40, "4881443977355957": 40, "4878086447715759": 40, "48748287558555603": 40, "48716384172439575": 40, "48684927821159363": 40, "48653748631477356": 40, "48622724413871765": 40, "4859171509742737": 40, "48560672998428345": 40, "48529526591300964": 40, "4849821627140045": 40, "48466697335243225": 40, "4843493402004242": 40, "4840289056301117": 40, "4837053418159485": 40, "4833785891532898": 40, "4830484390258789": 40, "48271444439888": 40, "48237672448158264": 40, "48203518986701965": 40, "48168954253196716": 40, "4813397228717804": 40, "4809857904911041": 40, "48062753677368164": 40, "48026490211486816": 40, "479898065328598": 40, "47952669858932495": 40, "4791509211063385": 40, "4787706732749939": 40, "47838595509529114": 40, "4779967665672302": 40, "47760307788848877": 40, "4772048890590668": 40, "47680220007896423": 40, "47639501094818115": 40, "47598329186439514": 40, "4755673110485077": 40, "4751465618610382": 40, "4747215211391449": 40, "4742920398712158": 40, "47385817766189575": 40, "47341999411582947": 40, "47297725081443787": 40, "4725303053855896": 40, "47207894921302795": 40, "47162333130836487": 40, "47116345167160034": 40, "470699280500412": 40, "47023090720176697": 40, "54": [40, 51, 53, 58, 76, 77, 81, 86, 165, 234, 235, 240, 255, 284, 290, 311, 366, 372, 384, 394, 404, 520, 629, 633, 634, 644, 657, 676, 679, 736, 737, 738, 756, 825, 828], "4697583019733429": 40, "55": [40, 48, 77, 86, 115, 231, 290, 384, 520, 557, 629, 631, 634, 640, 644, 673, 679, 737, 738, 756, 820], "46928152441978455": 40, "46880054473876953": 40, "4683155119419098": 40, "58": [40, 261, 537, 629, 631], "4678264260292053": 40, "59": [40, 53, 232, 384, 520], "46733325719833374": 40, "46683603525161743": 40, "61": [40, 42, 53, 54, 59, 76, 77, 79, 83, 86, 223, 258, 260, 285, 394, 612, 629, 632, 633, 634, 655, 672, 738, 831], "4663347601890564": 40, "4658295214176178": 40, "465320348739624": 40, "4648073613643646": 40, "46429020166397095": 40, "4637692868709564": 40, "46324464678764343": 40, "4627160429954529": 40, "4621836841106415": 40, "4616474211215973": 40, "71": [40, 53, 76, 81, 236, 276, 415, 629], "46110764145851135": 40, "72": [40, 54, 63, 77, 79, 242, 346, 369, 372, 394, 404, 616, 629, 632, 634, 644, 679, 737, 756], "460563987493515": 40, "4600166976451874": 40, "74": [40, 42, 53, 86, 232, 262, 629, 634, 676], "45946577191352844": 40, "45891112089157104": 40, "45835286378860474": 40, "4577910006046295": 40, "78": [40, 56, 281, 618, 629, 632, 634, 640, 644, 679, 737, 756], "45722562074661255": 40, "45665669441223145": 40, "80": [40, 54, 77, 346, 369, 373, 384, 440, 520, 634, 638, 644, 679, 726, 756, 857], "4560841917991638": 40, "81": [40, 44, 53, 59, 74, 76, 82, 86, 165, 235, 260, 261, 285, 384, 520, 627, 629, 634, 638, 640, 644, 672, 676, 689, 723, 738, 756, 841], "4555082619190216": 40, "45492875576019287": 40, "45434585213661194": 40, "84": [40, 58, 67, 76, 86, 165, 195, 260, 627, 628, 634, 639, 644, 657, 679, 734, 737, 738, 756], "45375964045524597": 40, "4531698524951935": 40, "4525766670703888": 40, "45198020339012146": 40, "4513803720474243": 40, "4507772624492645": 40, "4501707851886749": 40, "4495610296726227": 40, "4489481747150421": 40, "44833192229270935": 40, "4477125108242035": 40, "44708991050720215": 40, "44646409153938293": 40, "44583529233932495": 40, "98": [40, 48, 54, 56, 63, 70, 76, 79, 86, 110, 235, 283, 357, 369, 616, 623, 632, 634, 638, 641, 644, 679, 716, 727, 736, 738, 745, 756], "4452032148838043": 40, "44456806778907776": 40, "4439": 40, "selectbackward0": 40, "ivy_compil": 41, "ic": 41, "numer": [41, 50, 51, 53, 54, 55, 59, 63, 64, 67, 74, 76, 77, 78, 82, 86, 87, 89, 99, 100, 136, 149, 217, 220, 233, 237, 242, 243, 244, 251, 252, 253, 256, 265, 266, 270, 272, 273, 274, 275, 279, 280, 281, 285, 286, 290, 291, 372, 374, 379, 384, 416, 451, 506, 519, 579, 580, 589, 590, 602, 603, 626, 627, 629, 631, 634, 640, 641, 644, 665, 672, 674, 679, 682, 684, 686, 688, 690, 736, 737, 738, 740, 741, 742, 744, 745, 750, 757, 760, 762, 773, 774, 775, 776, 788, 813, 826, 831, 836, 838, 839, 841, 842, 843, 844, 846, 850, 864, 867, 873], "anyth": [41, 54, 77, 384, 525, 526, 817, 830, 841, 842, 867, 868], "affect": [41, 47, 54, 374, 454, 825, 838], "intermedi": [41, 865, 866, 867, 868, 873], "variabl": [41, 43, 44, 46, 54, 55, 56, 62, 71, 77, 78, 79, 85, 119, 120, 122, 319, 366, 372, 373, 379, 384, 418, 444, 507, 518, 519, 535, 559, 560, 561, 562, 565, 592, 613, 614, 616, 618, 619, 620, 625, 631, 632, 634, 637, 639, 683, 712, 713, 714, 734, 770, 781, 786, 788, 789, 790, 791, 792, 793, 794, 817, 822, 826, 829, 833, 836, 837, 841, 842, 846, 849, 850, 851, 852, 853, 860, 868], "original_fn": 41, "100000": 41, "var": [41, 67, 90, 92, 119, 120, 121, 122, 625, 637, 644, 712, 713, 795, 816, 828, 846, 864], "co": [41, 42, 53, 55, 76, 235, 240, 242, 283, 546, 629, 631, 814, 826, 846, 857], "sin": [41, 53, 55, 76, 235, 240, 242, 283, 546, 629, 631, 821, 846], "tan": [41, 53, 76, 533, 629, 631, 829, 833, 834, 837, 838, 846], "comp_fn": 41, "compile_graph": [41, 47], "expected_result": 41, "compiled_result": 41, "irrelev": [41, 825, 826, 828], "opeat": 41, "_layer": [41, 846], "net": [41, 46, 47, 846, 851, 857, 858], "compiled_net": 41, "proceed": 42, "latest": [42, 44, 53, 54, 76, 77, 152, 240, 250, 251, 266, 332, 333, 369, 372, 375, 384, 416, 418, 489, 519, 627, 629, 634, 636, 644, 682, 683, 711, 761, 789, 809, 815, 816, 817, 820, 822, 825, 829, 831, 842, 852, 853, 861, 872], "pypi": [42, 44, 47, 815, 816, 842, 852], "pkg": [42, 44, 47], "public": [42, 44, 47, 539, 631, 825, 836, 848, 870], "revis": [42, 44, 817], "tmp": [42, 44, 586, 609, 631], "req": [42, 44], "tabqrujw": 42, "command": [42, 44, 809, 811, 816, 820, 823, 825, 831, 832, 853], "filter": [42, 44, 46, 54, 58, 77, 81, 314, 315, 366, 372, 393, 411, 633, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 775, 789, 809, 822, 825], "quiet": [42, 44], "commit": [42, 44, 812, 813, 815, 818, 820, 828, 840, 841], "f3be3702c9fab1c9fa97c743813a4bdb39525705": 42, "metadata": [42, 44, 47, 837], "setup": [42, 44, 47, 816, 817, 823, 825, 831], "done": [42, 44, 47, 634, 671, 814, 815, 816, 817, 820, 823, 825, 827, 828, 831, 832, 837, 838, 841, 849, 860, 861, 867], "py3": [42, 44, 47], "whl": [42, 43, 44, 47], "cp39": [42, 44], "manylinux_2_12_x86_64": [42, 44], "manylinux2010_x86_64": [42, 44], "manylinux_2_17_x86_64": [42, 44, 816], "manylinux2014_x86_64": [42, 43, 44], "eta": [42, 44, 47], "tar": [42, 43, 44, 47], "gz": [42, 43, 44, 47], "py2": [42, 44], "495": [42, 44], "nvidia_ml_pi": [42, 44], "pypars": [42, 44, 47], "ivy_cor": [42, 44, 47, 816], "1338326": 42, "sha256": [42, 44, 47], "e5c4205c80116b781373daf4502d61881235c5e3eb0d55096ab07dcc6eb66bec": 42, "store": [42, 44, 47, 51, 54, 55, 59, 61, 71, 74, 77, 78, 82, 84, 151, 372, 373, 417, 425, 429, 443, 447, 546, 631, 634, 636, 688, 705, 770, 771, 789, 790, 791, 811, 817, 821, 822, 824, 829, 835, 837, 838, 839, 846, 848, 849, 850, 854, 860], "ephem": [42, 44], "njrc_e6b": 42, "2e": [42, 44], "ae2d7c5ce8708e605368a33e08d57d1de8e107e3db157c3063": [42, 44], "4845": [42, 44], "a8cde63eca203d3bd7f900fa32f44dbd038476606a3836de14caf2b0a5ff7460": 42, "b6": [42, 44], "0d": [42, 44], "0d1bbd99855f99cb2f6c2e5ff96f8023fad8ec367695f7d72d": [42, 44], "uninstal": [42, 44, 47], "vnd": [42, 44, 47], "json": [42, 44, 47, 71, 816, 831, 849], "psst": 42, "pickl": [42, 43, 71, 791, 824, 849], "imageio": 42, "urllib": [42, 47], "_src": 42, "tpu": [42, 191, 197, 206, 208, 213, 628, 807, 827, 867, 870], "back": [42, 54, 61, 77, 84, 375, 471, 492, 575, 599, 631, 633, 636, 660, 703, 788, 793, 803, 816, 821, 826, 827, 830, 835, 836, 843, 845, 852, 853, 857, 865, 869], "tf_cpp_min_log_level": 42, "info": [42, 806, 807, 809, 823, 829, 832], "mkdir": [42, 43, 44, 816, 825], "perceiv": [42, 43], "touch": 42, "io_processor": 42, "position_encod": 42, "absl": 42, "jmp": 42, "tabul": 42, "04": [42, 43, 50, 56, 70, 74, 77, 79, 109, 110, 135, 162, 242, 579, 612, 613, 618, 623, 626, 627, 629, 631, 632, 773, 816, 841], "29359": 42, "29k": 42, "67k": 42, "002": 42, "30179": 42, "47k": 42, "8107": 42, "9k": 42, "92k": 42, "itertool": 42, "preprocessor": 42, "vector": [42, 50, 54, 55, 58, 59, 77, 78, 81, 82, 94, 95, 97, 136, 362, 363, 371, 372, 373, 375, 378, 379, 384, 395, 426, 431, 439, 441, 446, 481, 483, 485, 503, 507, 519, 538, 542, 559, 611, 626, 631, 633, 634, 657, 660, 665, 669, 670, 672, 674, 679, 684, 685, 689, 690, 691, 692, 773, 789, 867], "perceiverbackbon": 42, "input_preprocessor": 42, "_input_preprocessor": 42, "_encod": 42, "__call__": [42, 770, 789, 790, 791, 809, 861], "is_train": 42, "po": [42, 803], "input_mask": 42, "network_input_is_1d": 42, "_input_is_1d": 42, "queri": [42, 43, 58, 71, 81, 195, 209, 552, 578, 628, 631, 633, 660, 663, 789, 824, 826, 831, 848, 867], "decod": [42, 849], "cross": [42, 44, 59, 60, 82, 83, 95, 634, 635, 693, 694, 695, 809, 825, 826], "attend": [42, 633, 660], "encoder_queri": 42, "latent": [42, 637, 713, 714], "imagepreprocessor": 42, "deal": [42, 791, 813, 827, 834, 836, 838, 841, 852], "image_s": 42, "fourier_pos_config": 42, "position_encoding_typ": 42, "fourier": [42, 54, 77, 372, 395, 400, 401, 405, 406, 416, 417, 420, 546, 631], "fourier_position_encoding_kwarg": 42, "concat_po": 42, "max_resolut": 42, "num_band": [42, 55, 78, 546, 631], "sine_onli": 42, "prep_typ": 42, "spatial_downsampl": 42, "cross_attend_widening_factor": 42, "cross_attention_shape_for_attn": 42, "kv": 42, "dropout_prob": 42, "num_block": 42, "num_cross_attend_head": 42, "num_self_attend_head": 42, "num_self_attends_per_block": 42, "num_z_channel": 42, "self_attend_widening_factor": 42, "use_query_residu": 42, "z_index_dim": 42, "z_pos_enc_init_scal": 42, "perceiver_backbon": [42, 809], "perceiverencod": 42, "At": [42, 815, 816, 817, 820, 831, 841, 842, 857, 867], "publish": [42, 809, 852, 858, 861], "thankfulli": [42, 841], "perceiver_io": [42, 43], "imagenet_fourier_position_encod": 42, "pystat": 42, "imagenet_checkpoint": 42, "rb": 42, "ckpt": 42, "read": [42, 44, 54, 61, 71, 73, 77, 84, 131, 375, 471, 626, 636, 703, 815, 816, 823, 825, 831, 841, 843, 844, 867], "173": [42, 59, 634, 672], "194": 42, "217": [42, 830], "125": [42, 54, 59, 82, 231, 343, 369, 374, 450, 629, 634, 689], "177": [42, 44], "193776248": 42, "185m": 42, "octet": 42, "184": 42, "80m": 42, "144mb": 42, "144": 42, "mean_rgb": 42, "stddev_rgb": 42, "im": 42, "denorm": 42, "resize_and_center_crop": 42, "crop": [42, 54, 77, 372, 401, 406, 417], "center": [42, 788], "image_height": [42, 44, 809], "image_width": [42, 809], "padded_center_crop_s": 42, "minimum": [42, 53, 54, 55, 61, 64, 67, 76, 77, 78, 84, 87, 90, 217, 245, 272, 296, 328, 332, 333, 343, 364, 366, 369, 375, 384, 481, 517, 521, 527, 579, 580, 589, 590, 602, 603, 629, 631, 636, 641, 644, 696, 742, 757, 759, 773, 775, 776, 781, 826, 843, 864, 870, 874], "offset_height": 42, "offset_width": 42, "crop_window": 42, "inter_cub": 42, "ye": [42, 852], "dummy_input": [42, 809], "transpili": 42, "torch_perceiver_backbon": 42, "quicker": 42, "params_v": [42, 809, 861], "perceiverioclassifi": [42, 809], "max_pool": [42, 809], "Of": [42, 821, 837, 838, 849, 872, 873], "cours": [42, 816, 817, 820, 821, 828, 837, 838, 844, 849, 852, 872, 873], "468": 42, "huggingface_hub": 42, "multiprocess": [42, 71, 100, 631, 849, 852], "py39": 42, "132": [42, 77], "pyarrow": 42, "xxhash": 42, "212": [42, 54, 58, 77, 356, 369, 657], "pyyaml": 42, "2021": [42, 54, 77, 359, 369, 809], "aiohttp": 42, "async": 42, "timeout": [42, 71, 100, 583, 606, 631, 843], "0a3": 42, "async_timeout": 42, "frozenlist": 42, "manylinux_2_5_x86_64": [42, 47], "manylinux1_x86_64": [42, 47], "158": 42, "attr": [42, 826], "aiosign": 42, "multidict": 42, "114": [42, 372, 394, 404], "yarl": 42, "264": [42, 638, 715], "2022": [42, 43], "pytz": 42, "2020": [42, 820, 867], "dateutil": [42, 47], "wikiart": 42, "paint": [42, 809, 846, 856], "load_dataset": [42, 860, 861], "n_sampl": [42, 54, 77, 373, 375, 422, 430, 484], "10000": [42, 44, 50, 73, 135, 626], "huggan": 42, "split": [42, 43, 44, 48, 53, 54, 61, 70, 71, 76, 77, 84, 107, 108, 109, 110, 111, 112, 113, 114, 115, 208, 209, 210, 288, 292, 297, 298, 300, 345, 352, 364, 375, 467, 476, 496, 542, 569, 623, 628, 629, 631, 633, 636, 646, 653, 654, 708, 770, 785, 789, 809, 810, 817, 825, 845, 846, 852, 874], "wiki_art": 42, "gib": 42, "unknown": [42, 773], "total": [42, 44, 54, 67, 71, 77, 90, 100, 131, 212, 327, 328, 329, 337, 366, 369, 374, 449, 626, 628, 641, 644, 744, 761, 763, 803, 809, 810, 816, 817, 826, 827, 828, 841, 844, 849, 850, 852, 858], "huggan___parquet": 42, "36ee951979f9b56c": 42, "2a3b91fbd88a2c90d1dbbb32b460cf621d31bd5b05b934492fdef7d8d6f236ec": 42, "parquet": 42, "subsequ": [42, 798, 816, 821, 825, 826, 828, 833, 834, 837, 841, 850, 868], "reus": [42, 50, 73, 77, 84, 125, 459, 460, 467, 469, 471, 472, 473, 480, 496, 699, 700, 701, 703, 705, 706, 708, 710, 830, 841, 872], "curl": [42, 816], "row": [42, 54, 77, 95, 129, 144, 325, 366, 373, 375, 382, 384, 432, 444, 473, 479, 497, 512, 518, 519, 626, 634, 640, 641, 675, 683, 684, 689, 735, 744, 788], "2fwikiart": 42, "receiv": [42, 46, 94, 533, 569, 631, 637, 712, 713, 714, 789, 807, 812, 816, 817, 826, 827, 841, 844], "xferd": 42, "dload": 42, "upload": [42, 841], "spent": [42, 858], "25936": 42, "278k": 42, "number": [42, 44, 45, 46, 47, 50, 51, 53, 54, 55, 58, 59, 60, 61, 63, 64, 65, 67, 68, 71, 73, 74, 76, 77, 78, 81, 82, 83, 84, 86, 87, 88, 90, 91, 94, 95, 97, 99, 100, 103, 123, 129, 131, 133, 134, 135, 136, 137, 138, 139, 140, 144, 150, 155, 156, 157, 158, 159, 161, 162, 165, 168, 169, 170, 172, 174, 177, 201, 202, 203, 217, 218, 219, 220, 221, 223, 225, 226, 233, 235, 237, 238, 240, 242, 243, 244, 250, 251, 252, 254, 258, 260, 268, 269, 270, 271, 272, 273, 275, 277, 279, 280, 281, 283, 284, 288, 290, 316, 320, 321, 322, 323, 324, 325, 327, 328, 329, 331, 332, 333, 335, 336, 337, 338, 348, 353, 357, 366, 369, 372, 373, 374, 375, 378, 384, 406, 417, 420, 423, 426, 430, 431, 432, 442, 446, 448, 449, 459, 460, 461, 481, 482, 483, 484, 485, 487, 489, 491, 493, 495, 498, 499, 500, 517, 519, 520, 521, 522, 528, 546, 553, 571, 588, 589, 590, 597, 610, 611, 624, 626, 627, 628, 629, 631, 633, 634, 635, 636, 637, 640, 641, 642, 644, 645, 646, 653, 654, 656, 658, 660, 665, 669, 670, 671, 677, 682, 684, 688, 689, 690, 693, 696, 698, 699, 701, 702, 704, 705, 707, 709, 711, 712, 713, 714, 735, 739, 744, 746, 747, 754, 755, 757, 758, 759, 760, 761, 762, 763, 764, 765, 770, 773, 774, 775, 781, 788, 789, 792, 803, 807, 809, 816, 817, 824, 825, 826, 827, 828, 835, 836, 837, 841, 842, 843, 844, 846, 849, 855, 856, 860], "abstract_expression": 42, "action_paint": 42, "analytical_cub": 42, "art_nouveau": 42, "baroqu": 42, "color_field_paint": 42, "contemporary_r": 42, "cubism": 42, "early_renaiss": 42, "expression": 42, "fauvism": 42, "high_renaiss": 42, "impression": 42, "mannerism_late_renaiss": 42, "minim": [42, 48, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 99, 107, 108, 109, 110, 111, 112, 113, 114, 115, 125, 126, 128, 130, 131, 133, 135, 136, 137, 138, 140, 142, 143, 146, 150, 151, 152, 165, 169, 170, 177, 194, 211, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 300, 301, 302, 303, 304, 306, 307, 308, 309, 310, 311, 312, 314, 315, 316, 319, 326, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 366, 372, 374, 375, 384, 391, 392, 393, 394, 396, 397, 398, 400, 404, 405, 406, 409, 410, 411, 415, 416, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 433, 437, 438, 439, 440, 441, 442, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 504, 506, 507, 508, 509, 510, 511, 512, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 534, 535, 537, 538, 541, 542, 543, 544, 545, 546, 549, 550, 553, 555, 557, 558, 559, 561, 562, 563, 565, 566, 568, 573, 574, 588, 589, 590, 591, 592, 594, 596, 597, 610, 612, 613, 616, 618, 619, 620, 621, 647, 648, 649, 650, 651, 652, 655, 656, 657, 659, 663, 664, 665, 667, 668, 669, 670, 671, 672, 673, 674, 675, 680, 681, 682, 684, 691, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 734, 735, 736, 737, 738, 740, 741, 742, 743, 744, 745, 746, 747, 748, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 763, 764, 765, 803, 829, 837, 839, 844, 846, 860, 865, 873], "naive_art_primitiv": 42, "new_real": 42, "northern_renaiss": 42, "pointil": 42, "pop_art": 42, "post_impression": 42, "realism": 42, "rococo": 42, "romantic": 42, "symbol": [42, 802, 815, 816, 867, 868], "synthetic_cub": 42, "ukiyo_": 42, "custom": [42, 54, 77, 296, 308, 361, 364, 371, 773, 802, 811, 819, 825, 830, 835, 839, 841, 844, 850, 857, 867, 871, 872, 873], "hugginfac": 42, "customdataset": 42, "__len__": [42, 824], "__getitem__": [42, 71, 824], "idx": [42, 43, 44, 532, 631, 809, 827, 848], "random_split": 42, "224x224": 42, "val_siz": 42, "dataset_train": 42, "dataset_v": 42, "dataset_test": 42, "dataloader_train": 42, "dataloader_v": 42, "dataloader_test": 42, "batch": [42, 43, 44, 54, 55, 59, 71, 77, 78, 82, 208, 209, 372, 373, 374, 378, 386, 388, 389, 395, 408, 418, 435, 449, 451, 498, 499, 500, 503, 546, 549, 550, 611, 628, 631, 633, 634, 637, 639, 657, 658, 659, 660, 691, 712, 713, 714, 734, 773, 789, 792, 809, 824, 834, 839, 849, 865], "train_featur": 42, "train_label": 42, "imshow": [42, 43], "crossentropyloss": [42, 790], "lr": [42, 56, 79, 533, 613, 616, 618, 619, 620, 631, 632, 793, 849, 850], "001": [42, 53, 54, 62, 74, 77, 79, 162, 260, 277, 335, 348, 369, 613, 627, 629, 632, 639, 734, 773, 849, 850], "train_step": 42, "running_loss": [42, 44, 809], "last_loss": 42, "training_load": 42, "intra": 42, "report": [42, 812, 815, 841], "zero_grad": 42, "adjust": [42, 67, 90, 373, 444, 644, 761, 763, 798, 807], "999": [42, 56, 76, 79, 288, 612, 613, 618, 620, 629, 632, 793, 850], "epoch_numb": 42, "best_vloss": 42, "1_000_000": 42, "running_vloss": 42, "vdata": 42, "vinput": 42, "vlabel": 42, "voutput": 42, "vloss": 42, "avg_vloss": 42, "model_path": 42, "model_": 42, "state_dict": [42, 790, 791], "highest": [42, 54, 63, 77, 86, 316, 319, 366, 640, 736, 826], "energi": 42, "augment": 42, "mayb": [42, 43, 49, 809, 816, 825, 846, 848], "finetun": 42, "deploi": [42, 809, 825, 854, 861, 865, 866, 867, 869, 873], "present": [43, 54, 67, 71, 77, 90, 335, 369, 378, 498, 499, 500, 644, 759, 815, 816, 817, 824, 826, 827, 833, 837, 846, 856, 864, 865, 874], "percieverio": 43, "ai": [43, 825, 865, 869], "contribut": [43, 54, 77, 384, 522, 812, 814, 816, 817, 818, 823, 831, 832, 838, 839, 846, 853, 860, 871, 875], "highli": [43, 809, 815, 867], "invit": [43, 815, 818, 838, 844], "g4ar9q7dtn": 43, "step1": 43, "printf": 43, "8packag": 43, "share": [43, 71, 183, 627, 773, 774, 809, 822, 824, 828, 834, 836, 838, 839, 841, 844, 846, 857, 865, 866, 873], "googledr": 43, "10_wfp1u4rmzc20eignrdqa9v2s9byjwv": 43, "file_id": 43, "drive": [43, 44], "uc": 43, "tee": [43, 816], "file_id_wget_cmd": 43, "perl": 43, "pe": 43, "g": [43, 45, 46, 54, 63, 65, 67, 69, 77, 86, 92, 94, 148, 177, 190, 237, 250, 270, 277, 280, 332, 333, 369, 372, 373, 375, 379, 384, 409, 411, 448, 489, 505, 506, 507, 508, 509, 520, 521, 627, 628, 629, 634, 638, 640, 642, 644, 670, 671, 675, 682, 684, 685, 691, 718, 722, 724, 727, 732, 736, 737, 738, 746, 747, 748, 749, 754, 755, 757, 759, 760, 762, 788, 807, 810, 815, 816, 819, 820, 822, 823, 824, 836, 838, 841, 846, 852, 854, 858, 863], "uuid": 43, "anywai": [43, 821, 835, 838], "bin": [43, 54, 77, 384, 517, 522, 816, 817, 820, 824], "bash": [43, 816, 817, 820], "step2": 43, "interpret": [43, 50, 54, 73, 77, 124, 125, 131, 137, 374, 384, 451, 519, 626, 825, 868], "sudo": [43, 816], "apt": [43, 816], "yf": 43, "step3": 43, "delet": [43, 817, 825], "xvzf": 43, "rm": [43, 45, 811, 817], "step4": 43, "symlink": 43, "unzip": [43, 44], "fr": 43, "l": [43, 54, 59, 76, 82, 264, 373, 374, 426, 449, 633, 634, 660, 664, 669, 670, 671, 674, 688, 817, 819], "ln": 43, "sf": 43, "la": 43, "step5": 43, "regular": [43, 77, 373, 384, 435, 440, 523, 816, 838, 867], "step6": 43, "ipkykernel": 43, "step7": 43, "engbjapanpython3": 43, "separ": [43, 54, 55, 77, 378, 499, 546, 631, 633, 660, 770, 781, 816, 817, 821, 824, 825, 828, 839, 840, 841, 846, 848, 849, 868, 872], "ipykernel": 43, "reconnect": 43, "sy": [43, 875], "oct": 43, "gcc": [43, 865, 872], "lf": 43, "upgrad": 43, "cuda11": 43, "cudnn805": 43, "cp38": [43, 47, 816], "helper": [43, 768, 770, 771, 777, 779, 780, 809, 813, 823, 826, 830, 831, 840, 849, 854], "feedforward": 43, "prenorm": 43, "perceiveriospec": 43, "fetch": [43, 554, 631, 816, 817, 820, 825], "ogbanugot": [43, 875], "xmartlab": 43, "caffeflow": 43, "fetch_class": 43, "class_label": 43, "ground_truth": 43, "127": [43, 51, 54, 59, 74, 77, 165, 356, 369, 627, 634, 672], "path_to_imag": 43, "get_imag": 43, "ax": [43, 48, 54, 59, 61, 64, 67, 68, 70, 77, 82, 84, 87, 90, 91, 99, 103, 110, 114, 210, 332, 333, 337, 338, 353, 360, 369, 370, 372, 373, 375, 378, 384, 401, 406, 417, 443, 480, 481, 487, 501, 524, 525, 526, 527, 528, 529, 542, 611, 628, 631, 634, 636, 641, 644, 645, 665, 675, 683, 686, 687, 691, 698, 700, 701, 704, 706, 708, 711, 741, 742, 757, 758, 759, 760, 761, 762, 763, 764, 765, 773, 775, 789, 826, 828, 841, 842, 846, 848], "fig": [43, 44], "subplot": [43, 44], "spine": 43, "set_vis": 43, "right": [43, 54, 59, 71, 77, 82, 100, 117, 118, 229, 231, 284, 347, 369, 372, 373, 375, 407, 437, 443, 444, 446, 472, 542, 625, 629, 631, 634, 643, 684, 689, 752, 773, 810, 815, 816, 817, 819, 820, 828, 831, 844, 849, 860], "bottom": [43, 542, 631, 815, 816, 825, 831, 873], "tick_param": 43, "set_xticklabel": 43, "set_yticklabel": 43, "show_result": 43, "along": [43, 48, 50, 53, 54, 55, 59, 60, 61, 63, 64, 66, 67, 68, 70, 71, 73, 76, 77, 78, 82, 83, 84, 86, 87, 89, 90, 91, 94, 95, 97, 110, 114, 119, 134, 135, 210, 284, 287, 289, 327, 328, 329, 332, 333, 337, 338, 353, 360, 366, 369, 370, 372, 373, 374, 375, 378, 384, 394, 400, 401, 404, 405, 406, 416, 417, 442, 453, 466, 467, 468, 470, 472, 473, 481, 486, 489, 491, 493, 501, 502, 503, 504, 520, 521, 522, 524, 525, 526, 527, 528, 529, 542, 549, 625, 626, 628, 629, 631, 634, 635, 636, 637, 640, 641, 643, 644, 645, 665, 679, 688, 690, 691, 693, 694, 695, 697, 700, 701, 702, 704, 705, 707, 709, 710, 712, 713, 714, 740, 741, 742, 750, 751, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 770, 773, 789, 809, 815, 818, 819, 828, 837, 840, 842, 844, 846, 867], "figur": [43, 843], "figsiz": [43, 44], "listdir": [43, 44], "endswith": 43, "this_dir": 43, "dirnam": 43, "join": [43, 44, 61, 71, 77, 84, 465, 466, 636, 697, 707, 809, 818], "add_subplot": 43, "xtick": 43, "ytick": 43, "set_titl": [43, 44], "color": [43, 71, 100, 808], "green": [43, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 100, 808, 815, 816, 817], "red": 43, "perceiver_io_img_classif": 43, "normalize_imag": 43, "batch_shap": [43, 58, 63, 73, 81, 86, 129, 138, 626, 633, 634, 640, 659, 663, 692, 735, 789, 844, 846, 848], "img_dim": 43, "queries_dim": 43, "learn_queri": 43, "load_weight": 43, "num_input_ax": 43, "network_depth": 43, "num_lat_att_per_lay": 43, "query_shap": 43, "num_fourier_freq_band": 43, "weight_fpath": 43, "pretrained_weight": 43, "isfil": 43, "noinspect": [43, 848], "pybroadexcept": 43, "from_disk_as_pickl": 43, "larg": [43, 53, 54, 76, 77, 220, 237, 244, 270, 271, 375, 384, 489, 519, 629, 634, 682, 811, 816, 817, 823, 825, 831, 849, 860, 867], "action": [43, 807, 814, 825, 828, 832, 841], "fail": [43, 768, 813, 816, 817, 820, 825, 826, 828, 832, 835, 837, 838, 839], "placehold": [43, 638, 722, 727, 732, 789, 817, 821, 833, 854], "pyunboundlocalvari": 43, "max_fourier_freq": 43, "random_uniform": [43, 47, 63, 86, 640, 827, 830, 841, 846, 850], "817437": 43, "gpu_bfc_alloc": 43, "orig_valu": 43, "tf_force_gpu_allow_growth": 43, "autograd": [43, 852], "declar": [43, 817, 840], "_3r2_73j": 44, "0edf8c1e8ea835f4c456bdf89737d89032f50b5a": 44, "1297564": 44, "05fcafac1e19fec835a9ac61270b3ac6039a5095f6b0f9fde20bacc2a5abba45": 44, "le3bu3_v": 44, "cc6508f5d7e25538c5df5fdae52a41d2bf17b9a517aedd125cfca913bb5b259b": 44, "third": [44, 94, 95, 375, 468, 495, 634, 642, 684, 746, 823, 826, 837, 852, 866, 867, 873], "parti": [44, 823, 826, 852, 857, 866, 867, 873], "mount": [44, 811, 817], "mydriv": 44, "chdir": 44, "kaggl": 44, "medium": 44, "articl": [44, 809, 832], "insert": [44, 54, 64, 77, 87, 375, 456, 466, 636, 638, 641, 643, 699, 719, 720, 741, 752, 825, 832], "www": [44, 332, 333, 369], "your_kaggle_usernam": 44, "competit": 44, "digit": 44, "recogn": [44, 812, 818], "zip": [44, 846], "readabl": [44, 821, 824, 830, 832, 833, 841, 842, 848, 849], "chmod": [44, 816, 825], "recent": [44, 806, 816, 817, 841, 856, 857], "modifi": [44, 54, 71, 77, 94, 375, 384, 478, 481, 486, 526, 773, 803, 815, 816, 817, 820, 822, 823, 826, 827, 829, 831, 832, 834, 837, 839, 841, 842, 846], "forc": [44, 823, 825, 827], "archiv": [44, 816], "inflat": [44, 826], "sample_submiss": 44, "frame": [44, 54, 77, 316, 366, 372, 420, 857, 867], "later": [44, 71, 536, 631, 815, 832, 837, 841, 842, 867], "my": [44, 825], "label_df": 44, "mod_train": 44, "data_valu": 44, "test_data_valu": 44, "correct_label": 44, "train_path": 44, "str": [44, 46, 49, 50, 54, 55, 58, 59, 60, 61, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 107, 108, 109, 110, 111, 112, 113, 114, 115, 120, 122, 131, 133, 136, 138, 140, 146, 147, 150, 152, 154, 155, 156, 157, 161, 162, 165, 166, 167, 168, 169, 170, 172, 174, 177, 178, 179, 180, 181, 182, 189, 190, 210, 211, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 248, 249, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 303, 304, 306, 307, 308, 310, 331, 332, 333, 334, 335, 337, 339, 347, 348, 354, 356, 358, 359, 360, 372, 373, 374, 375, 378, 384, 387, 391, 392, 393, 395, 396, 397, 398, 400, 401, 405, 406, 409, 410, 411, 412, 414, 415, 416, 417, 419, 420, 423, 427, 442, 448, 449, 450, 451, 452, 453, 454, 455, 456, 459, 460, 461, 464, 465, 466, 471, 487, 489, 490, 491, 492, 493, 498, 499, 500, 501, 502, 504, 506, 508, 519, 520, 521, 522, 529, 531, 532, 534, 535, 537, 538, 540, 542, 543, 544, 545, 546, 549, 550, 553, 555, 557, 558, 559, 561, 562, 565, 570, 573, 574, 576, 577, 586, 588, 589, 590, 592, 594, 596, 597, 610, 614, 621, 625, 626, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 663, 664, 665, 670, 671, 672, 673, 674, 675, 677, 679, 681, 682, 685, 688, 693, 694, 695, 696, 700, 703, 704, 705, 706, 707, 710, 711, 712, 713, 714, 721, 722, 727, 732, 735, 736, 737, 738, 740, 743, 746, 747, 748, 750, 754, 755, 756, 758, 760, 761, 763, 764, 765, 770, 771, 773, 774, 779, 781, 789, 791, 792, 802, 803, 807, 826, 827, 830, 834, 837, 838, 842, 846, 851, 860, 861, 862], "makedir": 44, "valid_path": 44, "28x28": 44, "pic": 44, "pictur": [44, 809, 815, 846, 856], "int8": [44, 51, 63, 73, 74, 86, 131, 158, 163, 165, 166, 170, 626, 627, 736, 773, 774, 826, 841], "new_img": [44, 46], "builder": [44, 811], "batchwis": 44, "subset": [44, 775, 821, 825, 829, 833, 836, 838, 841, 846, 867], "goe": [44, 375, 464, 819, 832, 837, 844], "seed_valu": [44, 71, 640, 739], "randomize_dataset": 44, "create_dataset": 44, "num_examples_per_class": 44, "img_arrai": 44, "class_nam": [44, 770], "dir": [44, 849], "img_path": 44, "imread": [44, 46, 849], "imread_grayscal": 44, "generate_batch": [44, 809], "dataset_s": [44, 809], "ivyerror": [44, 804, 809, 830], "smaller": [44, 54, 61, 67, 77, 84, 299, 331, 348, 364, 369, 372, 374, 384, 401, 406, 417, 449, 519, 520, 521, 542, 631, 636, 644, 696, 704, 754, 755, 760, 762, 809, 817, 830, 846], "yield": [44, 64, 317, 318, 366, 375, 481, 641, 745, 809, 825], "x_batch_inst": 44, "form": [44, 46, 49, 50, 54, 59, 71, 73, 82, 93, 94, 95, 124, 125, 137, 142, 143, 309, 312, 326, 335, 366, 369, 373, 375, 426, 437, 468, 477, 481, 497, 532, 593, 595, 626, 631, 633, 634, 638, 664, 666, 668, 669, 670, 671, 673, 675, 676, 677, 678, 680, 681, 682, 683, 684, 685, 688, 716, 727, 773, 788, 810, 815, 816, 834, 841, 844, 850, 851, 857, 867, 868, 873], "intialis": 44, "num_epoch": [44, 809], "inherit": [44, 821, 824, 830, 848, 852, 854], "creation": [44, 54, 71, 77, 100, 823, 826, 827, 833, 835, 838, 839, 841, 842, 846, 860, 867, 869, 873], "inform": [44, 46, 51, 54, 56, 74, 79, 162, 165, 316, 366, 532, 621, 627, 631, 632, 637, 714, 807, 809, 814, 815, 816, 817, 818, 820, 824, 825, 830, 834, 835, 837, 839, 841, 870], "insid": [44, 59, 82, 100, 375, 491, 634, 677, 771, 816, 817, 821, 824, 826, 827, 831, 834, 835, 841, 842, 860, 873], "ivynet": [44, 809], "h_w": [44, 809], "input_channel": [44, 789, 809, 846, 850], "output_channel": [44, 789, 809, 850], "gelu": [44, 45, 48, 70, 623, 785, 809], "image_widht": 44, "start_dim": [44, 54, 77, 375, 471, 809], "end_dim": [44, 54, 77, 375, 471, 809], "gpu_is_avail": [44, 628, 809], "120": [44, 67, 90, 100, 634, 679, 754, 809], "model_nam": [44, 809], "__name__": [44, 45, 47, 598, 631, 809, 830], "heavi": [44, 775, 816, 838, 839, 844, 868], "lift": [44, 839, 868], "num_correct": [44, 809], "y_pred": [44, 809], "epoch_loss": [44, 809], "field": [44, 59, 65, 82, 88, 373, 375, 426, 495, 634, 642, 669, 670, 681, 682, 684, 746, 747, 748, 809, 825, 865, 873], "training_accuraci": [44, 809], "train_loss": [44, 809], "train_correct": [44, 809], "train_loop": [44, 809], "posit": [44, 46, 49, 53, 54, 55, 59, 60, 61, 76, 77, 78, 82, 83, 84, 94, 129, 131, 144, 162, 217, 218, 219, 223, 226, 237, 244, 251, 252, 258, 260, 270, 271, 278, 279, 283, 284, 288, 310, 325, 331, 336, 348, 366, 369, 373, 375, 424, 444, 455, 480, 489, 536, 546, 611, 624, 626, 627, 629, 631, 634, 635, 636, 640, 641, 645, 664, 667, 688, 693, 699, 704, 739, 744, 764, 765, 770, 773, 781, 786, 790, 791, 803, 809, 815, 817, 820, 824, 838, 841, 842, 849, 860, 869], "leav": [44, 49, 54, 72, 74, 76, 77, 78, 81, 82, 84, 90, 100, 162, 165, 237, 294, 297, 298, 304, 375, 465, 466, 471, 483, 484, 485, 501, 502, 504, 520, 521, 526, 546, 594, 636, 638, 652, 663, 668, 684, 698, 702, 707, 709, 710, 715, 716, 725, 726, 727, 728, 754, 755, 802, 809, 815, 824, 825, 826, 828, 829, 833, 834, 837, 838, 841, 849, 850], "xbatch": [44, 809], "ybatch": [44, 809], "to_devic": [44, 52, 75, 193, 628, 791, 809], "entropi": [44, 60, 83, 635, 693, 694, 695, 809], "hot": [44, 50, 73, 138, 626, 809], "ybatch_encod": [44, 809], "one_hot": [44, 50, 73, 626, 809, 851], "loss_prob": [44, 809], "ret_grad_idx": [44, 614, 632, 770, 836], "xs_grad_idx": [44, 614, 632, 770, 836], "batch_loss": [44, 809], "set_descript": [44, 809], "set_postfix": [44, 809], "accuracy_percentag": [44, 809], "naverag": [44, 809], "6f": [44, 809], "_train_summari": [44, 809], "writer": [44, 809], "writerow": [44, 809], "157it": 44, "06it": 44, "475401": 44, "11it": 44, "081436": 44, "13it": 44, "0187": 44, "029279": 44, "0324": 44, "008382": 44, "07it": 44, "00456": 44, "003816": 44, "82it": 44, "00277": 44, "002179": 44, "05it": 44, "00175": 44, "001569": 44, "00147": 44, "001235": 44, "09it": 44, "00128": 44, "001005": 44, "106": 44, "10it": 44, "00112": 44, "000837": 44, "129": [44, 633, 652, 654], "12it": 44, "000989": 44, "000709": 44, "145": 44, "000873": 44, "000606": 44, "168": [44, 537, 631, 638, 715], "08it": 44, "000774": 44, "000524": 44, "000688": 44, "000455": 44, "000613": 44, "000398": 44, "000547": 44, "000350": 44, "205": 44, "000488": 44, "000308": 44, "218": 44, "000437": 44, "000273": 44, "000391": 44, "000243": 44, "238": [44, 244, 629], "98it": 44, "000351": 44, "000216": 44, "260": 44, "plot_summari": 44, "seaborn": 44, "whitegrid": 44, "ax1": 44, "ax2": 44, "nrow": 44, "ncol": 44, "fontweight": 44, "bold": 44, "set_xlabel": 44, "set_ylabel": 44, "tight_layout": 44, "savefig": 44, "summary_plot": 44, "png": [44, 46, 47, 849], "save_weight": [44, 791], "model_param": 44, "ivynet_weight": 44, "hdf5": [44, 71, 791, 849], "deitimageprocessor": 45, "tfdeitforimageclassif": 45, "tfdeitforimageclassificationwithteach": 45, "distillation_classifi": 45, "cls_classifi": 45, "randomli": [45, 372, 396, 397, 398, 633, 656, 773, 774, 775, 776, 781, 789], "henc": [45, 65, 220, 335, 369, 629, 636, 642, 699, 746, 747, 748, 749, 798, 816, 824, 825, 826, 837, 841], "image_processor": [45, 860, 861], "distil": [45, 868], "patch16": 45, "outputs_from_original_model": 45, "architectur": [45, 809, 816, 851, 852, 865, 866, 867, 870, 871, 872], "bertforsequenceclassif": 45, "bertforpretrain": 45, "NOT": [45, 265, 629, 802, 815], "probabl": [45, 54, 58, 60, 63, 77, 81, 83, 86, 372, 374, 379, 384, 396, 397, 398, 451, 505, 519, 522, 526, 633, 635, 640, 656, 660, 663, 693, 735, 775, 788, 789, 809, 841, 853, 858], "ptarmigan": 45, "rf": [45, 817], "branch": [45, 225, 237, 240, 242, 270, 282, 283, 284, 287, 629, 816, 817, 820, 825, 832, 852, 860, 867], "moduleconvert": [45, 786, 791], "mc": 45, "from_keras_modul": [45, 786], "compiled_func": 45, "return_graph": [45, 47], "compiled_output": 45, "diverg": [45, 54, 77, 244, 374, 451, 629], "_all_funct": [45, 47], "convert_to_tensor_v2_with_dispatch": 45, "transpose_v2": 45, "convolution_v2": 45, "bias_add": 45, "binary_op_wrapp": 45, "cast": [45, 51, 53, 54, 59, 67, 74, 76, 82, 149, 152, 177, 271, 384, 520, 521, 627, 629, 634, 644, 675, 691, 754, 755, 760, 762, 774, 834, 839, 846, 864], "moments_v2": 45, "batch_norm": [45, 47, 54, 77, 378], "tensordot": [45, 59, 82, 634, 803, 826], "softmax_v2": 45, "_slice_help": 45, "save_to_disk": [45, 47, 791], "12265048989200113": 45, "11038777417100028": 45, "1167045795539998": 45, "ivy_api_kei": 46, "obj": [46, 124, 125, 554, 626, 631, 860, 861, 862], "combo": [46, 849], "permit": [46, 821, 833, 838, 841, 844], "usabl": [46, 833, 842], "neither": [46, 220, 237, 244, 270, 629, 634, 686, 825, 838, 844], "nor": [46, 220, 237, 244, 270, 629, 825, 838, 871], "specifc": 46, "invoc": 46, "represent": [46, 54, 55, 71, 77, 78, 100, 147, 148, 162, 165, 190, 191, 217, 220, 227, 230, 232, 237, 244, 267, 270, 272, 287, 313, 345, 349, 354, 358, 366, 369, 532, 594, 624, 627, 628, 629, 631, 773, 775, 776, 789, 826, 865, 866, 868, 872, 873], "externally_link": 46, "logo": 46, "patch": [46, 288, 629, 826, 867], "cv2_imshow": 46, "envrion": 46, "canni": 46, "original_img": 46, "fn_arg": 46, "dilate_edg": 46, "edg": [46, 54, 61, 77, 84, 316, 366, 372, 375, 384, 408, 481, 522, 636, 696, 698, 711, 776, 820, 841, 861, 867, 869, 873], "morphologi": 46, "hk_model": 46, "resnet18": [46, 47], "keras_model": 46, "count": [46, 54, 61, 65, 68, 73, 77, 84, 88, 91, 131, 203, 337, 369, 375, 384, 489, 493, 495, 517, 522, 626, 628, 634, 636, 642, 645, 665, 690, 697, 700, 746, 747, 764, 765, 823, 824, 828, 849], "odsc": 46, "talk": [46, 872], "228": 47, "352": [47, 81, 633, 657, 830], "nvidia_ml_py3": 47, "19190": 47, "241af6b4a51197474b0da3ee7bfa32d847756c8f0d93b51448655d6458312714": 47, "b9": 47, "b1": [47, 634, 683], "cb4feab29709d4155310d29a421389665dcab9eb3b679b527b": 47, "cycler": 47, "fonttool": 47, "965": 47, "pillow": 47, "kiwisolv": 47, "show_graph": [47, 791], "to_ivy_modul": [47, 786, 851], "image_dim": 47, "v0": [47, 850], "urlerror": 47, "dev_str": 47, "comp_network": 47, "time_chronolog": 47, "ret0_nc": 47, "ret1_nc": 47, "ret0_c": 47, "ret1_c": 47, "pytorch_vision_v0": 47, "distribut": [47, 54, 60, 63, 77, 83, 86, 372, 373, 374, 379, 396, 397, 398, 431, 442, 448, 451, 453, 454, 456, 505, 506, 507, 508, 509, 635, 640, 693, 694, 695, 735, 736, 737, 738, 740, 788, 789, 815, 816, 825, 827, 852, 867, 870], "distributed_c10d": 47, "262": 47, "reduce_op": 47, "deprec": 47, "reduceop": 47, "004645566477999864": 47, "0044566806820000695": 47, "attribut": [47, 71, 162, 163, 164, 165, 196, 197, 205, 547, 548, 627, 628, 631, 771, 822, 823, 824, 829, 830, 834, 835, 837, 838, 844, 847, 848, 849, 850], "definit": [47, 53, 59, 76, 82, 289, 629, 634, 664, 809, 813, 817, 821, 826, 831, 834, 848, 861], "max_pool2d": [47, 54, 77, 372, 392], "__iadd__": 47, "adaptive_avg_pool2d": [47, 54, 77, 372], "_arraywithactiv": [48, 99], "abc": [48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 103, 545, 631, 638, 733, 788, 793, 802, 803, 848], "_abc_impl": [48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 103, 104], "_abc": [48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 103, 104], "_abc_data": [48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 103, 104], "approxim": [48, 53, 54, 59, 70, 76, 77, 82, 94, 97, 107, 218, 219, 222, 223, 224, 225, 234, 235, 240, 242, 244, 258, 259, 260, 261, 275, 282, 283, 287, 288, 289, 346, 356, 369, 374, 453, 454, 623, 629, 634, 677, 680, 785, 829, 838], "complex_mod": [48, 53, 54, 70, 76, 77, 107, 108, 109, 110, 111, 112, 113, 114, 115, 288, 292, 297, 298, 300, 364, 623, 629, 785, 835], "variant": [48, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 99, 107, 108, 109, 110, 111, 112, 113, 114, 115, 125, 126, 128, 130, 131, 133, 135, 136, 137, 138, 140, 142, 143, 146, 150, 151, 152, 162, 165, 169, 170, 177, 194, 211, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 300, 301, 302, 303, 304, 306, 307, 308, 309, 310, 311, 312, 314, 315, 316, 319, 326, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 372, 375, 384, 391, 392, 393, 394, 396, 397, 398, 400, 404, 405, 406, 409, 410, 411, 415, 416, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 433, 437, 438, 439, 440, 441, 442, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 504, 506, 507, 508, 509, 510, 511, 512, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 534, 535, 537, 538, 541, 542, 543, 544, 545, 546, 549, 550, 553, 555, 557, 558, 559, 561, 562, 563, 565, 566, 568, 573, 574, 588, 589, 590, 591, 592, 594, 596, 597, 610, 612, 613, 616, 618, 619, 620, 621, 647, 648, 649, 650, 651, 652, 655, 656, 657, 659, 663, 664, 665, 667, 668, 669, 670, 671, 672, 673, 674, 675, 677, 680, 681, 682, 684, 688, 689, 691, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 734, 735, 736, 737, 738, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 763, 764, 765, 821, 828, 829, 844], "docstr": [48, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 99, 107, 108, 109, 110, 111, 112, 113, 114, 115, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 150, 151, 152, 162, 165, 169, 170, 177, 194, 211, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 300, 301, 302, 303, 304, 306, 307, 308, 309, 310, 311, 312, 314, 315, 316, 319, 326, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 369, 372, 375, 384, 391, 392, 393, 394, 396, 397, 398, 400, 404, 405, 406, 409, 410, 411, 415, 416, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 433, 437, 438, 439, 440, 441, 442, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 504, 506, 507, 508, 509, 510, 511, 512, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 534, 535, 537, 538, 541, 542, 543, 544, 545, 546, 549, 550, 553, 555, 557, 558, 559, 561, 562, 563, 565, 566, 568, 573, 574, 588, 589, 590, 591, 592, 594, 596, 597, 610, 611, 612, 613, 616, 618, 619, 620, 621, 626, 627, 629, 631, 634, 636, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 655, 656, 657, 659, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 690, 691, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 734, 735, 736, 737, 738, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 814, 815, 819, 823, 832, 833, 834, 835, 838, 840, 842], "liter": [48, 53, 54, 59, 70, 76, 77, 82, 107, 108, 109, 110, 111, 112, 113, 114, 115, 288, 292, 297, 298, 300, 364, 372, 373, 375, 378, 394, 404, 408, 416, 431, 437, 442, 445, 448, 481, 503, 623, 629, 634, 643, 675, 691, 752, 785, 844], "magnitud": [48, 53, 54, 70, 76, 77, 107, 108, 109, 110, 111, 112, 113, 114, 115, 217, 220, 237, 244, 270, 288, 292, 297, 298, 300, 364, 623, 629, 634, 684, 685, 785, 826], "handle_complex_input": [48, 53, 54, 70, 76, 77, 107, 108, 109, 110, 111, 112, 113, 114, 115, 288, 292, 297, 298, 300, 364, 623, 629, 785, 835], "elementhardswish": [48, 54, 70, 77, 295, 364, 623, 785], "leaky_relu": [48, 70, 77, 292, 623, 774], "alpha": [48, 53, 54, 70, 76, 77, 104, 109, 220, 286, 292, 293, 301, 305, 311, 364, 366, 373, 378, 379, 427, 503, 506, 507, 508, 623, 629, 785, 833, 838, 839], "float": [48, 50, 51, 53, 54, 55, 56, 58, 59, 60, 62, 63, 65, 67, 70, 73, 74, 76, 77, 78, 79, 81, 82, 83, 85, 86, 90, 94, 97, 99, 109, 115, 123, 124, 125, 127, 129, 131, 132, 133, 134, 135, 139, 140, 145, 149, 153, 157, 162, 166, 170, 176, 177, 180, 186, 195, 204, 208, 209, 212, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 233, 234, 235, 237, 238, 240, 241, 242, 243, 244, 248, 250, 251, 252, 253, 254, 256, 258, 259, 260, 261, 262, 263, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 299, 301, 304, 305, 307, 308, 309, 310, 311, 312, 314, 315, 316, 331, 332, 333, 334, 342, 343, 348, 350, 351, 354, 355, 356, 359, 360, 364, 366, 369, 370, 372, 373, 374, 375, 378, 379, 384, 387, 396, 397, 398, 415, 416, 423, 426, 427, 429, 442, 446, 448, 449, 450, 454, 455, 470, 488, 498, 499, 500, 503, 504, 505, 506, 507, 508, 509, 519, 520, 521, 522, 527, 528, 529, 536, 537, 538, 546, 555, 579, 580, 583, 589, 590, 610, 612, 613, 616, 618, 619, 620, 623, 624, 626, 627, 628, 629, 631, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 644, 656, 658, 660, 663, 664, 666, 669, 670, 671, 673, 675, 676, 677, 680, 681, 682, 683, 684, 685, 686, 688, 691, 693, 694, 695, 712, 713, 714, 721, 734, 737, 738, 744, 746, 747, 748, 749, 754, 755, 757, 758, 759, 760, 761, 762, 763, 770, 773, 774, 776, 785, 788, 789, 792, 793, 807, 813, 820, 824, 826, 829, 830, 831, 833, 834, 836, 837, 839, 841, 842, 844, 846, 848, 850], "slope": [48, 54, 70, 77, 109, 292, 293, 299, 301, 305, 364, 623, 785], "neg": [48, 53, 54, 59, 61, 63, 68, 70, 76, 77, 82, 84, 86, 91, 94, 109, 112, 115, 123, 129, 131, 144, 237, 244, 251, 252, 270, 271, 279, 284, 292, 310, 325, 328, 364, 366, 373, 374, 375, 379, 424, 431, 437, 454, 489, 493, 509, 623, 626, 629, 634, 636, 640, 645, 665, 667, 684, 688, 690, 691, 697, 699, 700, 704, 737, 764, 765, 773, 775, 785, 824, 837], "leaki": [48, 70, 109, 623, 785], "log_softmax": [48, 70, 623, 785], "0719": [48, 70, 110], "221": [48, 110], "mish": [48, 70, 623, 785], "30340147": [48, 111, 623], "86509842": [48, 70, 111, 623], "269": [48, 113], "731": [48, 113], "881": [48, 53, 76, 113, 223, 236, 276, 629], "422": [48, 114, 623], "155": [48, 81, 114, 623, 633, 657], "softplu": [48, 70, 623, 785, 844], "beta": [48, 54, 62, 70, 77, 85, 115, 301, 305, 311, 314, 315, 364, 366, 373, 374, 378, 379, 427, 455, 503, 507, 508, 623, 639, 734, 785, 844], "threshold": [48, 53, 54, 70, 76, 77, 115, 268, 269, 308, 334, 364, 369, 374, 375, 450, 455, 488, 623, 629, 785, 844], "union": [48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 177, 178, 179, 180, 181, 182, 183, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 203, 204, 205, 206, 208, 209, 210, 211, 212, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 364, 366, 369, 370, 372, 373, 374, 375, 378, 379, 380, 382, 384, 386, 387, 388, 389, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 404, 405, 406, 408, 409, 410, 411, 412, 414, 415, 416, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483, 484, 485, 487, 488, 489, 490, 491, 493, 494, 495, 496, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 531, 534, 535, 537, 538, 542, 543, 544, 545, 546, 549, 550, 551, 552, 553, 555, 557, 558, 559, 561, 562, 565, 566, 568, 569, 573, 574, 578, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 623, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 722, 723, 724, 726, 727, 732, 733, 734, 735, 736, 737, 738, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 770, 773, 788, 793, 794, 821, 824, 826, 827, 828, 830, 833, 834, 837, 842, 844, 846, 851, 860, 861, 862], "3461": [48, 70, 115, 623], "6491": [48, 70, 115, 623], "_array_to_new_backend": 49, "_to_ivi": 49, "_to_n": 49, "to_ignor": [49, 69, 92, 638, 726, 727], "_to_new_backend": 49, "args_to_ivi": 49, "include_deriv": [49, 72, 638, 716, 727, 770], "nest": [49, 71, 72, 100, 103, 240, 564, 594, 611, 614, 629, 631, 632, 637, 712, 713, 715, 716, 717, 718, 719, 720, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 793, 821, 823, 824, 834, 836, 842, 849, 850, 852, 854, 867], "unchang": [49, 53, 372, 375, 417, 471, 633, 656], "deriv": [49, 50, 54, 56, 72, 73, 77, 79, 128, 133, 140, 146, 310, 314, 339, 366, 369, 612, 613, 616, 617, 618, 619, 620, 626, 632, 637, 638, 714, 716, 727, 791, 793, 794, 826, 827, 848, 850], "word": [49, 123, 375, 474, 626, 640, 738, 786, 789, 824, 837, 838, 854], "args_to_n": [49, 837], "cont_inplac": 49, "decid": [49, 71, 638, 726, 727, 809, 815, 816, 826, 844], "args_to_new_backend": 49, "shallow": [49, 638, 722, 723, 727, 732, 733], "nativevari": 49, "mutabl": [49, 638, 716, 722, 723, 727, 732, 733, 822], "to_ivi": [49, 72, 638, 728, 837], "leaf": [49, 71, 78, 90, 100, 545, 638, 725, 726, 728, 755, 824, 834, 849], "travers": [49, 72, 638, 719, 727, 824, 826, 830, 846], "lowest": [49, 54, 63, 72, 77, 86, 384, 522, 638, 640, 727, 736, 803, 834, 852, 854, 864, 868, 872], "search": [49, 54, 72, 77, 741, 742, 781, 814, 816, 824, 828, 831, 841, 842, 856], "to_new_backend": 49, "_arraywithcr": [50, 99], "boolean": [50, 51, 53, 54, 55, 61, 64, 67, 71, 73, 74, 76, 77, 78, 84, 87, 90, 99, 100, 120, 122, 124, 125, 126, 132, 149, 165, 167, 169, 170, 173, 189, 199, 207, 213, 227, 228, 229, 230, 231, 232, 264, 265, 266, 267, 332, 333, 348, 369, 373, 375, 431, 442, 448, 459, 460, 461, 467, 469, 471, 472, 473, 476, 480, 487, 489, 496, 531, 534, 545, 552, 555, 556, 560, 561, 562, 563, 564, 565, 566, 575, 578, 581, 582, 584, 585, 610, 625, 626, 627, 628, 629, 631, 633, 636, 637, 638, 641, 644, 660, 699, 700, 701, 703, 705, 706, 708, 710, 712, 713, 725, 743, 744, 745, 757, 759, 773, 774, 775, 776, 781, 792, 824, 826, 834, 838, 841, 844], "never": [50, 54, 61, 73, 77, 84, 125, 375, 459, 460, 461, 467, 469, 471, 472, 473, 476, 480, 487, 496, 552, 631, 636, 699, 700, 701, 703, 705, 706, 708, 710, 817, 826, 837, 838, 841], "valueerror": [50, 54, 61, 73, 77, 84, 88, 125, 372, 374, 406, 417, 454, 459, 460, 467, 469, 471, 472, 473, 480, 496, 636, 699, 700, 701, 703, 705, 706, 708, 710, 749, 775, 804, 830], "buffer": [50, 73, 77, 84, 125, 131, 459, 460, 467, 469, 471, 472, 473, 480, 496, 626, 699, 700, 701, 703, 705, 706, 708, 710, 790, 791, 837, 852], "nativedtyp": [50, 51, 54, 58, 59, 63, 64, 67, 73, 77, 82, 86, 87, 90, 123, 124, 125, 127, 128, 129, 131, 132, 133, 134, 135, 137, 138, 139, 140, 145, 146, 148, 149, 154, 155, 156, 157, 158, 159, 160, 161, 166, 167, 171, 173, 175, 179, 189, 309, 310, 311, 312, 313, 314, 315, 330, 337, 353, 366, 369, 379, 384, 505, 506, 507, 508, 509, 519, 520, 521, 522, 525, 528, 626, 627, 633, 634, 640, 641, 643, 644, 656, 675, 691, 736, 737, 738, 741, 742, 752, 754, 755, 760, 762, 788, 826, 827, 833, 842, 846], "datatyp": [50, 54, 71, 73, 77, 125, 133, 137, 154, 175, 179, 372, 420, 626, 627, 768, 842, 860], "nativedevic": [50, 52, 54, 63, 73, 75, 77, 86, 123, 124, 125, 127, 128, 129, 132, 133, 134, 135, 137, 138, 139, 140, 144, 145, 146, 191, 192, 193, 194, 195, 198, 203, 204, 205, 206, 208, 209, 210, 211, 212, 216, 309, 310, 325, 366, 379, 505, 506, 508, 509, 626, 628, 640, 735, 736, 737, 738, 788, 793, 794, 826, 827, 830, 833, 842], "39999998": [50, 124, 125, 626, 642, 747], "5999999": [50, 54, 77, 81, 124, 125, 294, 364, 373, 422, 626, 633, 656, 663], "0999999": [50, 67, 124, 125, 294, 304, 307, 350, 364, 369, 626, 758], "10000038": [50, 124, 125, 626], "90786433e": [50, 124, 125, 626], "310": [50, 124, 125, 626], "copy_arrai": [50, 73, 626], "to_ivy_arrai": [50, 73, 126, 626], "empty_lik": [50, 54, 73, 77, 261, 373, 425, 626, 629], "uniniti": [50, 127, 128, 626, 832], "from_dlpack": [50, 73, 626], "full_lik": [50, 73, 626, 842], "fill_valu": [50, 54, 64, 73, 77, 87, 132, 133, 249, 257, 375, 379, 489, 509, 626, 629, 641, 744, 826, 839, 842], "scalar": [50, 53, 54, 55, 59, 70, 73, 76, 77, 78, 82, 94, 109, 133, 138, 220, 241, 286, 292, 335, 336, 338, 343, 346, 348, 350, 355, 369, 372, 373, 374, 375, 420, 427, 449, 459, 460, 461, 470, 475, 597, 610, 626, 629, 631, 634, 691, 826, 836, 838, 852, 867], "fill": [50, 53, 54, 63, 64, 71, 73, 76, 77, 86, 87, 127, 132, 133, 135, 138, 139, 140, 145, 146, 271, 310, 366, 373, 375, 379, 431, 437, 442, 448, 470, 489, 490, 506, 508, 509, 626, 629, 640, 641, 736, 744, 788, 815, 839], "000123": [50, 133, 626], "stop": [50, 54, 56, 73, 77, 79, 123, 134, 135, 210, 373, 442, 448, 575, 613, 616, 618, 619, 620, 621, 626, 628, 631, 632, 637, 638, 712, 713, 714, 726, 793, 807, 833, 836, 844, 846, 852, 867], "num": [50, 73, 134, 135, 626, 773, 817, 833, 846], "endpoint": [50, 73, 134, 135, 626, 788, 833], "logspac": [50, 73, 626, 846], "log": [50, 53, 54, 59, 73, 76, 77, 82, 115, 135, 260, 262, 275, 297, 298, 351, 358, 364, 369, 374, 379, 451, 453, 454, 505, 623, 626, 629, 682, 773, 775, 776, 785, 817, 824, 825, 828, 834, 837, 838, 839, 841, 843, 844, 846, 849], "sequenc": [50, 54, 58, 59, 61, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 100, 107, 108, 109, 110, 111, 112, 113, 114, 115, 129, 131, 133, 135, 138, 140, 146, 150, 152, 165, 169, 170, 177, 211, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 248, 249, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 300, 301, 302, 303, 304, 306, 307, 308, 310, 313, 320, 321, 322, 323, 324, 331, 332, 333, 334, 335, 337, 339, 347, 348, 354, 356, 358, 359, 360, 362, 363, 366, 369, 370, 371, 372, 373, 375, 379, 384, 385, 387, 388, 389, 396, 397, 398, 400, 401, 405, 406, 408, 415, 416, 417, 418, 419, 422, 430, 431, 432, 434, 440, 441, 442, 445, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 460, 461, 465, 466, 467, 468, 474, 476, 477, 479, 480, 482, 485, 487, 489, 490, 491, 493, 496, 497, 498, 500, 501, 502, 504, 506, 507, 519, 520, 521, 522, 529, 530, 531, 534, 535, 537, 538, 542, 543, 544, 545, 546, 549, 550, 553, 555, 557, 558, 559, 561, 562, 565, 569, 573, 574, 588, 589, 590, 592, 594, 596, 597, 610, 611, 614, 615, 616, 621, 626, 629, 631, 632, 633, 634, 636, 638, 644, 645, 646, 647, 648, 649, 650, 651, 653, 655, 656, 657, 658, 660, 663, 664, 665, 670, 671, 672, 673, 674, 675, 677, 679, 681, 682, 688, 691, 693, 694, 695, 696, 697, 699, 700, 702, 703, 704, 705, 706, 707, 710, 711, 715, 722, 732, 735, 736, 737, 738, 740, 743, 746, 747, 748, 749, 750, 754, 755, 757, 758, 759, 760, 761, 762, 763, 764, 765, 789, 792, 794, 817, 825, 826, 827, 828, 830, 841, 842, 844, 846, 851, 870], "on_valu": [50, 73, 135, 138, 626], "off_valu": [50, 73, 135, 138, 626], "evenli": [50, 53, 54, 58, 61, 71, 73, 76, 77, 81, 84, 123, 134, 135, 289, 372, 415, 419, 626, 629, 633, 636, 646, 647, 648, 649, 651, 653, 655, 705], "hint": [50, 53, 54, 59, 76, 77, 123, 124, 125, 127, 128, 129, 130, 132, 133, 134, 135, 136, 139, 140, 141, 142, 143, 145, 146, 152, 168, 172, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 237, 238, 240, 242, 243, 244, 248, 249, 250, 251, 252, 253, 254, 257, 259, 260, 261, 262, 264, 265, 266, 267, 270, 272, 273, 274, 275, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 310, 326, 332, 333, 335, 338, 366, 369, 372, 373, 375, 384, 391, 392, 393, 394, 396, 397, 398, 404, 409, 410, 411, 416, 418, 427, 481, 489, 493, 519, 522, 549, 553, 555, 557, 588, 597, 621, 626, 627, 629, 631, 632, 633, 634, 636, 639, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 655, 656, 657, 660, 663, 664, 665, 666, 667, 668, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 690, 691, 692, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 734, 741, 742, 744, 745, 746, 747, 748, 749, 750, 753, 757, 758, 759, 760, 761, 762, 763, 764, 765, 815, 821, 829, 831, 833, 834, 837, 838, 842], "simplic": [50, 53, 54, 59, 76, 77, 123, 124, 125, 127, 128, 129, 130, 132, 133, 134, 135, 136, 139, 140, 141, 142, 143, 145, 146, 152, 168, 172, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 237, 238, 240, 242, 243, 244, 248, 249, 250, 251, 252, 253, 254, 257, 259, 260, 261, 262, 264, 265, 266, 267, 270, 272, 273, 274, 275, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 310, 326, 332, 333, 335, 338, 366, 369, 372, 373, 375, 384, 391, 392, 393, 394, 396, 397, 398, 404, 409, 410, 411, 416, 418, 427, 481, 489, 493, 519, 522, 549, 553, 555, 557, 588, 597, 621, 626, 627, 629, 631, 632, 633, 634, 636, 639, 641, 642, 643, 644, 647, 648, 649, 650, 651, 655, 656, 657, 660, 663, 664, 665, 666, 667, 668, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 690, 691, 692, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 734, 741, 742, 744, 745, 746, 747, 748, 749, 750, 753, 757, 758, 759, 760, 761, 762, 763, 829, 844, 850], "nestabl": [50, 53, 54, 59, 76, 77, 123, 124, 125, 127, 128, 129, 130, 132, 133, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 152, 168, 172, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 237, 238, 240, 242, 243, 244, 248, 249, 250, 251, 252, 253, 257, 259, 260, 261, 262, 264, 265, 266, 267, 270, 272, 273, 274, 275, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 310, 325, 326, 332, 333, 335, 338, 366, 369, 372, 373, 375, 384, 391, 392, 393, 394, 396, 397, 398, 404, 409, 410, 411, 416, 418, 427, 481, 489, 493, 519, 522, 526, 535, 543, 544, 549, 553, 555, 557, 559, 573, 588, 592, 597, 621, 626, 627, 629, 631, 632, 633, 634, 636, 639, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 655, 656, 657, 660, 663, 664, 665, 666, 667, 668, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 690, 691, 692, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 734, 741, 742, 744, 745, 746, 747, 748, 749, 750, 753, 757, 758, 759, 760, 761, 762, 763, 764, 765, 815, 819, 828, 829, 837, 841, 854], "464": [50, 53, 86, 135, 224, 225, 629], "15888336": [50, 135], "2154": [50, 135], "43469003": [50, 135], "meshgrid": [50, 73, 626], "spars": [50, 54, 60, 73, 77, 83, 136, 313, 366, 373, 431, 442, 448, 626, 635, 695], "xy": [50, 73, 136, 626], "dimension": [50, 53, 54, 59, 61, 64, 67, 68, 71, 73, 76, 77, 82, 84, 90, 91, 99, 123, 129, 131, 136, 144, 289, 325, 332, 333, 366, 369, 372, 373, 375, 384, 400, 401, 405, 406, 416, 417, 424, 459, 460, 461, 465, 470, 471, 517, 529, 626, 629, 634, 636, 641, 644, 645, 665, 666, 672, 674, 677, 679, 680, 690, 691, 705, 741, 742, 744, 757, 758, 759, 760, 761, 762, 763, 764, 765, 834, 836, 841, 844, 846, 864, 867, 874], "repres": [50, 53, 54, 58, 59, 76, 77, 81, 82, 97, 122, 136, 138, 161, 219, 220, 223, 226, 235, 237, 244, 270, 283, 287, 288, 313, 327, 328, 329, 346, 363, 366, 369, 371, 372, 373, 374, 375, 378, 379, 382, 415, 419, 433, 447, 449, 454, 481, 492, 498, 499, 500, 505, 511, 518, 554, 625, 626, 627, 629, 631, 633, 634, 656, 657, 658, 672, 679, 682, 683, 775, 788, 792, 803, 816, 821, 826, 844, 848, 864, 865, 868], "coordin": [50, 53, 64, 76, 77, 87, 136, 144, 225, 287, 317, 318, 325, 346, 366, 380, 510, 626, 629, 641, 744], "conserv": [50, 136, 626], "cartesian": [50, 136, 626], "matrix": [50, 54, 55, 58, 59, 77, 78, 81, 82, 94, 95, 97, 99, 136, 142, 143, 144, 325, 326, 366, 373, 375, 384, 423, 426, 427, 430, 431, 432, 434, 437, 438, 439, 440, 441, 442, 443, 444, 447, 448, 479, 519, 531, 537, 626, 631, 633, 634, 657, 664, 666, 668, 669, 670, 671, 673, 674, 675, 676, 677, 678, 680, 681, 682, 683, 684, 685, 686, 688, 689, 692, 773, 775, 788, 789, 803, 807, 815, 826, 838, 865, 867], "ij": [50, 67, 136, 626, 644, 756, 803], "respect": [50, 53, 54, 56, 59, 76, 77, 79, 82, 94, 136, 217, 220, 225, 227, 229, 230, 231, 232, 237, 238, 244, 248, 249, 256, 257, 262, 264, 266, 267, 270, 273, 279, 283, 286, 287, 297, 346, 361, 364, 369, 371, 373, 375, 378, 429, 446, 458, 498, 500, 554, 612, 613, 614, 615, 616, 617, 618, 619, 620, 622, 626, 629, 631, 632, 633, 634, 637, 646, 653, 654, 660, 665, 681, 684, 712, 713, 714, 770, 773, 788, 803, 814, 815, 816, 817, 821, 822, 824, 825, 826, 827, 828, 833, 834, 836, 837, 838, 841, 842, 843, 863, 873], "rank": [50, 54, 59, 61, 68, 77, 82, 84, 91, 94, 95, 96, 97, 98, 103, 136, 320, 321, 322, 323, 324, 366, 373, 375, 384, 431, 432, 442, 445, 448, 481, 489, 493, 529, 626, 634, 636, 641, 645, 665, 667, 675, 677, 681, 683, 688, 690, 691, 698, 699, 707, 710, 711, 744, 764, 765, 810, 875], "ni": [50, 136, 626], "xi": [50, 136, 626], "scatter": [50, 55, 73, 78, 138, 573, 574, 626, 631, 823, 837, 844, 874], "j": [50, 53, 54, 55, 59, 67, 73, 76, 77, 82, 94, 122, 138, 218, 219, 220, 221, 223, 226, 235, 237, 240, 242, 250, 258, 260, 264, 270, 281, 283, 284, 287, 288, 335, 369, 372, 373, 384, 400, 401, 405, 416, 417, 421, 426, 428, 439, 445, 529, 534, 625, 626, 629, 631, 634, 644, 669, 688, 756, 803, 817, 819, 823, 860, 863], "unless": [50, 54, 59, 73, 77, 138, 270, 331, 348, 353, 369, 626, 629, 634, 677, 822, 827, 837, 852, 861, 862], "ones_lik": [50, 73, 626, 822, 851, 864], "tril": [50, 73, 626], "whose": [50, 53, 54, 55, 59, 61, 65, 67, 73, 76, 77, 78, 82, 84, 88, 90, 95, 97, 99, 133, 142, 143, 219, 223, 226, 234, 235, 236, 275, 276, 282, 283, 287, 288, 289, 326, 340, 341, 345, 349, 350, 352, 356, 366, 373, 375, 426, 447, 480, 489, 495, 536, 592, 626, 629, 631, 634, 636, 642, 644, 664, 666, 668, 669, 670, 671, 672, 673, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 688, 691, 700, 704, 746, 747, 748, 755, 756, 775, 812, 829, 841], "innermost": [50, 54, 59, 82, 142, 143, 326, 366, 373, 426, 626, 634, 664, 666, 668, 669, 670, 671, 673, 675, 676, 677, 678, 680, 681, 682, 683, 684, 685, 688], "mxn": [50, 54, 59, 82, 142, 143, 326, 366, 626, 634, 668, 675, 677, 678, 680, 681, 685, 688], "matric": [50, 54, 59, 77, 82, 94, 95, 99, 136, 142, 143, 326, 366, 373, 375, 426, 431, 432, 434, 440, 441, 446, 470, 626, 633, 634, 657, 664, 666, 668, 669, 670, 671, 672, 673, 675, 676, 677, 678, 680, 681, 682, 683, 684, 685, 688, 689, 775, 813, 831, 867], "diagon": [50, 54, 59, 77, 82, 95, 129, 142, 143, 144, 310, 325, 326, 366, 373, 375, 424, 427, 437, 443, 470, 626, 634, 667, 688], "triangular": [50, 54, 59, 82, 142, 143, 144, 325, 326, 366, 373, 443, 626, 634, 664, 670, 671, 677, 681], "alloc": [50, 51, 54, 74, 142, 143, 149, 326, 366, 626, 627, 807, 815, 817, 852], "triu": [50, 73, 626], "upper": [50, 54, 59, 63, 77, 82, 86, 129, 143, 144, 310, 326, 366, 373, 384, 443, 522, 626, 634, 640, 664, 670, 671, 681, 738, 826, 837, 841], "zeros_lik": [50, 54, 73, 149, 266, 375, 489, 612, 613, 616, 618, 619, 620, 626, 627, 629, 632, 634, 636, 681, 696, 838, 844], "data_typ": [51, 54, 74, 77, 179, 627, 823, 826, 841, 842], "_arraywithdatatyp": [51, 99], "irrespect": [51, 59, 74, 82, 149, 627, 634, 684, 824, 837, 848, 874], "promot": [51, 53, 54, 59, 74, 76, 77, 82, 89, 99, 100, 149, 152, 175, 176, 177, 183, 218, 219, 220, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 234, 235, 237, 240, 242, 244, 258, 259, 260, 261, 262, 267, 270, 275, 279, 282, 283, 284, 285, 286, 287, 288, 291, 343, 351, 356, 369, 372, 384, 416, 519, 582, 605, 627, 629, 631, 634, 636, 644, 664, 665, 672, 673, 674, 675, 676, 677, 679, 680, 682, 683, 690, 691, 697, 707, 750, 758, 761, 773, 774, 818, 820, 829, 830, 834, 843], "nan": [51, 53, 54, 55, 65, 67, 74, 76, 77, 78, 149, 217, 218, 219, 220, 222, 223, 224, 225, 226, 233, 234, 235, 236, 237, 238, 240, 242, 243, 244, 245, 246, 251, 252, 253, 258, 259, 260, 261, 262, 265, 270, 271, 273, 275, 276, 279, 280, 281, 282, 283, 284, 287, 288, 290, 297, 331, 332, 333, 344, 348, 353, 356, 364, 369, 375, 384, 489, 517, 518, 525, 526, 527, 528, 555, 610, 624, 627, 629, 631, 642, 644, 645, 746, 747, 748, 749, 757, 758, 759, 761, 762, 763, 764, 765, 773, 776, 820, 826, 829, 836, 842, 843], "infin": [51, 53, 55, 59, 74, 76, 82, 149, 217, 218, 219, 220, 223, 224, 225, 226, 233, 234, 235, 237, 238, 240, 242, 243, 244, 251, 252, 258, 259, 260, 261, 262, 265, 270, 271, 273, 275, 279, 280, 282, 283, 284, 287, 288, 290, 332, 333, 356, 369, 555, 624, 627, 629, 631, 634, 644, 645, 682, 691, 757, 759, 764, 765, 820, 829], "desir": [51, 52, 54, 64, 71, 74, 75, 77, 87, 94, 149, 151, 152, 211, 316, 357, 366, 369, 375, 384, 479, 525, 528, 529, 627, 628, 634, 641, 686, 743, 788, 789, 817, 822, 825, 826, 827, 838, 846, 856, 860, 867], "broadcast_arrai": [51, 74, 627], "mix": [51, 53, 74, 76, 77, 78, 83, 86, 99, 100, 150, 163, 164, 177, 196, 197, 227, 230, 231, 232, 237, 238, 244, 248, 256, 257, 267, 270, 273, 279, 374, 384, 455, 526, 545, 547, 548, 549, 550, 559, 594, 597, 627, 628, 629, 631, 633, 634, 635, 636, 639, 644, 647, 649, 652, 654, 655, 657, 663, 664, 686, 693, 695, 696, 734, 756, 758, 761, 774, 776, 815, 819, 826, 827, 828, 837, 844, 846, 854, 867, 871, 873], "broadcast_to": [51, 74, 627, 826], "can_cast": [51, 74, 627, 826, 834, 838], "accord": [51, 54, 55, 61, 67, 74, 84, 90, 152, 162, 220, 231, 237, 244, 270, 281, 316, 366, 372, 375, 417, 481, 549, 552, 573, 574, 627, 629, 631, 634, 636, 644, 690, 698, 711, 761, 763, 768, 775, 795, 802, 815, 816, 820, 826, 832, 834, 838, 841], "finfo": [51, 74, 627, 841], "resolut": [51, 74, 162, 627, 817], "4028235e": [51, 162, 627], "iinfo": [51, 74, 627], "integ": [51, 53, 54, 58, 59, 61, 63, 67, 68, 71, 76, 77, 78, 81, 82, 84, 86, 90, 91, 99, 100, 123, 132, 165, 166, 172, 176, 177, 181, 217, 227, 228, 229, 230, 231, 232, 233, 243, 244, 255, 267, 272, 275, 279, 280, 290, 291, 327, 328, 329, 332, 333, 337, 342, 343, 366, 369, 372, 375, 379, 382, 384, 400, 405, 415, 418, 419, 420, 467, 476, 481, 489, 493, 496, 505, 506, 507, 508, 509, 511, 512, 517, 519, 520, 521, 526, 529, 552, 568, 578, 611, 626, 627, 629, 631, 633, 634, 636, 640, 643, 644, 645, 646, 647, 648, 649, 651, 653, 655, 665, 667, 676, 690, 691, 705, 735, 736, 737, 738, 739, 740, 752, 754, 755, 757, 758, 759, 760, 761, 762, 763, 764, 765, 773, 774, 775, 776, 781, 789, 803, 817, 824, 826, 836, 839, 841, 846, 848], "1220": [51, 165], "int16": [51, 54, 63, 67, 74, 86, 152, 156, 158, 163, 165, 172, 187, 384, 520, 521, 627, 644, 736, 754, 755, 760, 762, 773, 774, 826, 838, 841, 846], "32768": [51, 74, 165, 590, 631], "32767": [51, 74, 165], "is_bool_dtyp": [51, 74, 627], "is_float_dtyp": [51, 74, 627, 842], "is_int_dtyp": [51, 74, 627, 839, 842], "is_uint_dtyp": [51, 74, 627, 839, 842], "result_typ": [51, 74, 627, 826], "arrays_and_dtyp": [51, 74, 177, 627], "_arraywithdevic": [52, 99], "move": [52, 54, 75, 77, 144, 207, 211, 215, 325, 366, 375, 480, 626, 628, 791, 809, 817, 827, 842], "addit": [52, 54, 55, 62, 75, 77, 78, 85, 120, 122, 211, 220, 280, 374, 378, 384, 449, 503, 518, 523, 542, 543, 544, 611, 625, 628, 629, 631, 633, 637, 639, 660, 714, 734, 789, 803, 815, 816, 817, 822, 826, 828, 829, 832, 834, 836, 837, 838, 841, 842, 844, 848, 849, 851, 860, 867, 868, 869, 873], "__dlpack__": [52, 75, 130, 211, 626, 628], "caveat": [52, 75, 211, 374, 453, 628], "portabl": [52, 75, 211, 628, 809, 865], "_arraywithelementwis": [53, 99], "ab": [53, 59, 69, 76, 92, 99, 100, 275, 331, 348, 369, 375, 488, 629, 634, 638, 675, 685, 691, 723, 726, 770, 802, 803, 813, 821, 826, 831, 835, 838, 841, 864], "absolut": [53, 54, 59, 69, 71, 76, 77, 82, 99, 217, 281, 331, 348, 351, 357, 369, 373, 374, 427, 444, 450, 452, 629, 634, 675, 676, 677, 682, 768, 770, 773, 775, 776, 810, 816], "aco": [53, 76, 629], "invers": [53, 54, 59, 76, 77, 82, 218, 219, 222, 223, 224, 225, 226, 341, 369, 372, 382, 395, 404, 406, 416, 511, 629, 634, 673, 676, 680, 795, 826], "cosin": [53, 76, 218, 219, 234, 235, 309, 312, 366, 372, 394, 404, 629, 789], "acosh": [53, 76, 163, 164, 627, 629, 813, 831], "area": [53, 54, 76, 77, 81, 219, 223, 226, 372, 408, 415, 419, 629, 812, 837, 844, 857, 863], "hyperbol": [53, 76, 219, 223, 226, 235, 283, 287, 288, 301, 305, 364, 629], "sector": [53, 76, 219, 223, 226, 629, 857], "multipli": [53, 54, 58, 67, 76, 77, 81, 94, 220, 286, 349, 372, 373, 408, 439, 440, 520, 521, 629, 633, 644, 656, 754, 760, 817, 821, 822, 824, 828], "angl": [53, 76, 225, 235, 283, 288, 347, 369, 629], "deg": [53, 76, 221, 629], "radian": [53, 54, 76, 77, 218, 221, 222, 224, 225, 234, 236, 276, 282, 287, 356, 369, 629, 829], "degre": [53, 54, 67, 76, 77, 90, 221, 236, 276, 319, 366, 375, 487, 629, 644, 761, 763, 866], "1j": [53, 76, 77, 221, 222, 234, 235, 240, 242, 254, 277, 282, 283, 287, 335, 589, 629, 631], "2j": [53, 54, 76, 77, 221, 250, 335, 372, 400, 405, 590, 629, 631], "3j": [53, 54, 76, 77, 221, 254, 277, 335, 369, 629], "35619449": [53, 221, 629], "78539816": [53, 221, 629], "135": [53, 221, 537, 629, 631], "asin": [53, 76, 629], "sine": [53, 76, 222, 223, 282, 283, 629], "927": [53, 76, 222], "asinh": [53, 76, 222, 629], "atan": [53, 76, 629], "tangent": [53, 76, 224, 225, 226, 287, 288, 301, 305, 362, 364, 371, 629, 829], "785": [53, 76, 224, 225, 629], "atan2": [53, 76, 629], "quotient": [53, 76, 225, 237, 244, 629], "245": [53, 81, 225, 633, 656, 657], "588": [53, 225, 629], "inf": [53, 54, 55, 59, 76, 77, 78, 82, 225, 242, 251, 252, 253, 254, 258, 259, 261, 271, 297, 341, 351, 364, 369, 373, 384, 423, 522, 555, 610, 624, 629, 631, 633, 634, 661, 675, 691, 773, 776, 813, 826, 831, 836], "719": [53, 225, 629], "197": [53, 225, 629], "atanh": [53, 76, 629], "549": [53, 76, 81, 226, 629, 633, 657], "bitwise_and": [53, 76, 629], "bitwise_invert": [53, 76, 629], "bitiwse_invert": [53, 228], "bitwise_left_shift": [53, 76, 629], "bitwise_or": [53, 76, 629], "bitwise_right_shift": [53, 76, 99, 629], "bitwise_xor": [53, 76, 99, 629], "ceil": [53, 54, 76, 77, 94, 97, 123, 372, 391, 392, 393, 409, 410, 411, 414, 626, 629, 789, 837], "round": [53, 54, 76, 77, 94, 96, 97, 98, 220, 233, 237, 243, 244, 270, 284, 290, 291, 342, 369, 629, 813, 815, 816, 817, 820, 821, 822, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 841, 842, 844, 846, 847, 848, 849, 850, 851, 856, 857, 858, 864], "416": [53, 234, 629], "540": [53, 234], "990": [53, 234], "cosh": [53, 76, 234, 629], "deg2rad": [53, 76, 629], "convers": [53, 54, 77, 236, 276, 575, 585, 631, 790, 791, 815, 845, 847, 851, 852, 854, 858, 866, 873], "180": [53, 76, 236, 276, 629], "270": [53, 76, 236, 276, 629], "360": [53, 76, 236, 276, 629, 825], "dividend": [53, 76, 237, 244, 279, 291, 629], "divisor": [53, 54, 56, 67, 76, 77, 79, 90, 237, 244, 247, 248, 279, 291, 372, 375, 391, 392, 393, 467, 476, 496, 612, 613, 618, 629, 632, 644, 761, 763, 789, 793], "375": [53, 238, 273], "erf": [53, 76, 340, 369, 629], "exponenti": [53, 54, 76, 77, 239, 240, 242, 262, 275, 292, 302, 364, 373, 438, 629], "gauss": [53, 76, 239, 629], "328": [53, 239, 287, 629], "677": [53, 239], "842": [53, 239, 287, 629], "71828198": [53, 76, 240], "38905573": [53, 76, 240], "08553696": [53, 76, 240, 629], "exp2": [53, 76, 629], "expm1": [53, 76, 629, 826], "244": [53, 242, 809], "918": [53, 242], "147": [53, 242, 629], "floor": [53, 54, 76, 77, 94, 97, 231, 244, 372, 391, 392, 393, 395, 409, 410, 411, 414, 629, 789, 837], "floor_divid": [53, 76, 629, 781, 826], "fmin": [53, 76, 629, 826], "gcd": [53, 76, 629, 826], "greater": [53, 54, 58, 61, 63, 76, 77, 81, 86, 99, 100, 131, 218, 219, 222, 223, 225, 226, 229, 231, 237, 243, 244, 258, 260, 275, 279, 281, 283, 284, 288, 289, 290, 334, 369, 372, 395, 400, 405, 416, 626, 629, 633, 634, 636, 640, 663, 665, 676, 706, 738, 775, 789, 817, 818, 839, 864], "greater_equ": [53, 76, 99, 100, 262, 629, 864], "isfinit": [53, 76, 629, 838], "out_i": [53, 76, 251, 252, 253, 254, 277, 629], "self_i": [53, 76, 251, 252, 253, 254, 277], "finit": [53, 76, 217, 218, 219, 220, 223, 225, 226, 235, 237, 238, 240, 242, 244, 251, 252, 258, 260, 270, 271, 273, 275, 279, 283, 284, 288, 629], "isinf": [53, 76, 629], "detect_posit": [53, 76, 252, 629], "detect_neg": [53, 76, 252, 629], "isnan": [53, 76, 629], "isreal": [53, 76, 629], "5j": [53, 76, 77, 254, 277, 335, 369, 629], "6j": [53, 54, 76, 250, 254, 335, 629], "lcm": [53, 76, 629, 826], "less": [53, 54, 59, 63, 67, 76, 77, 82, 86, 99, 100, 218, 219, 222, 225, 226, 233, 237, 244, 258, 259, 260, 261, 275, 279, 281, 284, 355, 369, 372, 373, 384, 394, 395, 404, 416, 442, 448, 519, 522, 629, 634, 640, 644, 675, 676, 677, 680, 691, 738, 761, 763, 789, 816, 817, 824, 826, 828, 830, 833, 838, 841, 844, 845, 846, 857, 864, 867, 869], "less_equ": [53, 76, 99, 100, 629, 830, 864], "log10": [53, 54, 76, 316, 366, 629], "logarithm": [53, 76, 240, 258, 259, 260, 261, 262, 339, 351, 369, 629, 634, 682], "602": [53, 259, 629], "699": [53, 259, 629], "log1p": [53, 76, 629, 836], "693": [53, 76, 114, 223, 260, 623, 629], "0953": [53, 76, 258, 260, 629], "log2": [53, 76, 263, 629], "logaddexp": [53, 76, 629], "logaddexp2": [53, 76, 629, 813, 831], "169925": [53, 76, 263, 629], "logical_and": [53, 76, 629, 838, 844, 874], "logical_not": [53, 76, 629, 826], "logical_or": [53, 76, 629, 874], "conform": [53, 59, 76, 123, 124, 125, 127, 128, 129, 130, 132, 133, 134, 136, 139, 140, 141, 142, 143, 145, 146, 152, 162, 165, 177, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 237, 238, 240, 242, 243, 244, 248, 249, 250, 251, 252, 253, 257, 259, 260, 261, 262, 264, 265, 266, 267, 270, 272, 273, 274, 275, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 332, 333, 335, 369, 372, 375, 384, 416, 489, 493, 519, 626, 627, 629, 634, 636, 641, 642, 643, 644, 645, 664, 665, 666, 667, 668, 670, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 690, 691, 697, 699, 700, 701, 703, 704, 706, 707, 711, 741, 742, 744, 745, 746, 747, 748, 749, 750, 753, 757, 758, 759, 760, 761, 762, 763, 764, 765, 829, 832], "api_specif": [53, 54, 76, 77, 152, 240, 250, 251, 266, 332, 333, 369, 372, 375, 416, 489, 627, 629, 636, 644, 711, 761, 829], "array_api": [53, 76, 152, 240, 250, 251, 266, 372, 375, 416, 489, 627, 629, 634, 636, 644, 682, 683, 711, 761, 829], "logical_xor": [53, 76, 629], "maximum": [53, 54, 55, 56, 61, 64, 67, 71, 76, 77, 78, 79, 84, 87, 90, 100, 210, 296, 332, 333, 344, 357, 364, 369, 372, 373, 375, 384, 388, 389, 399, 442, 445, 448, 481, 520, 522, 527, 537, 538, 546, 554, 618, 628, 629, 631, 632, 634, 636, 641, 644, 675, 696, 741, 742, 757, 759, 773, 775, 776, 781, 803, 817, 826, 828, 837, 849, 864, 874], "use_wher": [53, 76, 268, 269, 629], "formula": [53, 54, 76, 237, 259, 261, 268, 269, 270, 316, 350, 366, 369, 378, 498, 500, 629, 807], "exce": [53, 54, 77, 269, 375, 491, 629], "product": [53, 54, 58, 59, 67, 76, 77, 81, 82, 90, 94, 95, 97, 270, 362, 363, 371, 373, 375, 384, 422, 425, 429, 432, 433, 434, 439, 440, 441, 493, 520, 521, 528, 629, 633, 634, 644, 660, 663, 665, 672, 674, 679, 686, 690, 754, 755, 756, 760, 761, 803, 815, 846, 867, 869], "nan_to_num": [53, 76, 629], "posinf": [53, 76, 271, 629], "neginf": [53, 76, 271, 629], "5e": [53, 56, 76, 77, 271, 354, 618, 629, 632], "not_equ": [53, 76, 99, 100, 629, 864], "pow": [53, 76, 99, 100, 629, 820, 864], "expon": [53, 54, 55, 77, 78, 275, 343, 345, 349, 369, 378, 503, 590, 629, 631, 634, 676], "rad2deg": [53, 76, 629], "286": [53, 77, 276], "458": [53, 276], "573": [53, 276, 629], "reciproc": [53, 76, 629], "333": [53, 76, 237, 278, 629], "remaind": [53, 54, 61, 71, 76, 77, 84, 246, 629, 636, 705, 820, 837], "modulu": [53, 76, 279, 629, 837], "x2_i": [53, 76, 220, 225, 227, 229, 230, 231, 232, 237, 238, 244, 248, 249, 256, 257, 262, 264, 266, 267, 270, 273, 275, 279, 286, 629, 820], "678": [53, 280, 281], "np_variant": [53, 76, 281, 629], "841": [53, 70, 76, 107, 282, 623, 629], "909": [53, 76, 78, 282, 629], "141": [53, 76, 149, 282, 627, 629], "sinh": [53, 76, 282, 629], "232": [53, 76, 283, 629], "sqrt": [53, 54, 76, 77, 372, 395, 400, 401, 405, 406, 416, 629, 788, 789, 809], "squar": [53, 54, 59, 76, 77, 82, 284, 373, 374, 378, 384, 426, 438, 450, 503, 519, 614, 615, 617, 622, 629, 632, 634, 638, 664, 666, 667, 669, 670, 671, 673, 676, 682, 683, 684, 689, 721, 809], "tanh": [53, 54, 76, 77, 287, 301, 305, 364, 629, 785, 846], "762": [53, 76, 288, 629], "964": [53, 76, 288, 629], "trapz": [53, 76, 629], "dx": [53, 76, 289, 629], "apart": [53, 76, 289, 629], "trapezoid": [53, 76, 289, 629], "trunc": [53, 76, 629], "025": [53, 290, 374, 455, 629, 637, 714], "trunc_divid": [53, 76, 629], "_arraywithactivationsexperiment": [54, 99], "celu": [54, 77, 364], "formul": [54, 70, 77, 95, 107, 292, 294, 364, 785], "elu": [54, 77, 296, 364, 785], "scaler": [54, 77, 293, 364, 773, 776, 841], "hardshrink": [54, 77, 364], "lambd": [54, 77, 294, 304, 364], "hardsilu": [54, 77, 364], "66666667": [54, 116, 295, 384, 519, 623], "hardtanh": [54, 77, 364], "max_val": [54, 77, 296, 364], "min_val": [54, 77, 296, 364], "region": [54, 77, 296, 304, 364, 816], "19722438": [54, 77, 297, 364], "38629448": [54, 77, 297, 364], "38629436": [54, 77, 297, 364], "logsigmoid": [54, 77, 364, 785], "31326175": [54, 70, 298, 364], "126928": [54, 77, 298], "01814993": [54, 298], "00004578": [54, 298], "57888985": [54, 298], "31326169": [54, 77, 298, 364], "69314718": [54, 59, 70, 77, 82, 298, 351, 364, 369, 634, 682], "01104775": [54, 298], "prelu": [54, 77, 364, 785], "unidirect": [54, 299, 364, 633, 658], "relu6": [54, 77, 364, 785], "rectifi": [54, 70, 77, 109, 111, 112, 300, 303, 308, 364, 623], "scaled_tanh": [54, 77, 305, 364], "7159": [54, 77, 301, 305, 364], "amplitud": [54, 77, 301, 305, 364], "65537548": [54, 77, 301], "49570239": [54, 77, 301], "77637792": [54, 301], "selu": [54, 77, 364, 785], "11133075": [54, 302, 364], "05070102": [54, 77, 302, 364], "10140204": [54, 302, 364], "15210295": [54, 302, 364], "20280409": [54, 302, 364], "25350523": [54, 302, 364], "30420589": [54, 302, 364], "35490704": [54, 302, 364], "silu": [54, 77, 364, 785], "26894143": [54, 303], "73105854": [54, 77, 303], "softshrink": [54, 77, 364], "bound": [54, 77, 304, 316, 364, 366, 375, 464, 489, 490, 773, 826, 830, 838, 841, 846, 873], "tanhshrink": [54, 77, 364], "23840582": [54, 77, 306, 364], "condit": [54, 64, 77, 87, 120, 307, 322, 323, 366, 373, 423, 625, 638, 641, 725, 726, 745, 775, 820, 826, 828, 830, 834, 835, 837, 841, 860], "met": [54, 77, 307, 830], "hreshold": [54, 307], "thresholded_relu": [54, 77, 364], "_arraywithconversionsexperiment": [54, 99], "_arraywithcreationexperiment": [54, 99], "blackman_window": [54, 77, 366], "period": [54, 77, 283, 287, 309, 311, 312, 314, 315, 366, 372, 407, 629, 817], "window": [54, 58, 77, 81, 309, 311, 312, 314, 315, 330, 366, 372, 378, 391, 392, 393, 395, 409, 410, 411, 412, 414, 415, 419, 420, 503, 633, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 789, 811, 817, 823, 831, 872], "symmetr": [54, 59, 77, 82, 94, 95, 309, 311, 312, 314, 315, 366, 373, 375, 426, 481, 634, 664, 669, 670, 671, 692, 824], "38777878e": [54, 77, 309, 366], "40000000e": [54, 309, 366], "00000000e": [54, 59, 77, 78, 309, 340, 341, 366, 372, 394, 400, 404, 405, 634, 681, 813, 831], "30000000e": [54, 77, 309, 366], "eye_lik": [54, 77, 366], "elsewher": [54, 77, 129, 310, 366, 626, 641, 745, 816], "mel_weight_matrix": [54, 77, 366], "num_mel_bin": [54, 77, 316, 366], "dft_length": [54, 77, 316, 366, 372, 395], "sample_r": [54, 77, 316, 366], "lower_edge_hertz": [54, 77, 316, 366], "upper_edge_hertz": [54, 77, 316, 366], "3000": [54, 77, 316, 366], "melweightmatrix": [54, 77, 316, 366], "linearli": [54, 55, 78, 316, 366, 546, 631, 634, 683], "frequenc": [54, 55, 77, 78, 316, 366, 384, 519, 546, 631, 817], "spectra": [54, 316, 366], "dft": [54, 77, 316, 366, 372], "stft": [54, 77, 316, 366, 372], "mel": [54, 77, 316, 366], "term": [54, 77, 309, 316, 319, 366, 374, 453, 454, 633, 658, 659, 789, 803, 809, 817, 824, 846, 854, 856, 867], "hertz": [54, 316, 366], "2595": [54, 316, 366], "700": [54, 78, 316, 366, 550], "band": [54, 55, 77, 78, 316, 366, 546, 631], "spectrum": [54, 77, 316, 366], "n_fft": [54, 77, 316, 366, 372, 395], "signal": [54, 77, 316, 366, 372, 386, 387, 388, 389, 394, 395, 404, 420, 789, 866, 867], "8000": [54, 77, 311, 316, 366], "75694758": [54, 316, 366], "trilu": [54, 77, 366], "retain": [54, 144, 325, 326, 366, 614, 626, 632, 836, 840, 854], "unsorted_segment_mean": [54, 77, 366], "segment_id": [54, 77, 327, 328, 329, 366, 795], "num_seg": [54, 77, 327, 328, 329, 366, 795], "identifi": [54, 77, 327, 328, 329, 366, 815, 820, 825, 826, 841, 844], "th": [54, 77, 95, 327, 328, 329, 338, 366, 369, 373, 374, 384, 424, 431, 449, 529], "distinct": [54, 65, 77, 327, 328, 329, 366, 642, 746, 747, 748, 749, 812, 816, 824, 829, 836, 837, 838, 845, 857, 867], "unsorted_segment_min": [54, 77, 366], "unsorted_segment_sum": [54, 77, 366], "polyv": [54, 77, 366], "coeff": [54, 77, 319, 366], "polynomi": [54, 77, 319, 366], "coeffici": [54, 77, 311, 319, 366, 373, 443, 634, 683, 793], "indetermin": [54, 77, 319, 366], "simplifi": [54, 77, 319, 366, 802, 803, 830, 838, 846, 847, 850, 857, 860, 863, 865, 866, 867, 870, 873, 874], "substitut": [54, 77, 319, 366], "_arraywithdata_typeexperiment": [54, 99], "_arraywithdeviceexperiment": [54, 99], "_arraywithelementwiseexperiment": [54, 99], "equal_nan": [54, 77, 331, 348, 369], "1e10": [54, 331, 348, 369], "00001e10": [54, 331, 348, 369], "00001e": [54, 331, 369], "amax": [54, 77, 369], "keepdim": [54, 59, 61, 64, 67, 68, 71, 77, 82, 84, 87, 90, 91, 332, 333, 337, 353, 360, 369, 370, 375, 384, 486, 524, 525, 526, 527, 528, 529, 634, 636, 641, 644, 645, 675, 691, 710, 741, 742, 757, 758, 759, 760, 761, 762, 763, 764, 765, 830, 838, 846], "singleton": [54, 59, 64, 67, 68, 77, 82, 87, 90, 91, 332, 333, 369, 634, 636, 641, 644, 645, 691, 699, 706, 742, 757, 758, 759, 760, 761, 762, 763, 764, 765, 846], "amin": [54, 77, 369], "binar": [54, 77, 369], "map": [54, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 93, 100, 107, 108, 109, 110, 111, 112, 113, 114, 115, 131, 133, 138, 140, 146, 150, 152, 165, 169, 170, 177, 211, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 248, 249, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 300, 301, 302, 303, 304, 306, 307, 308, 310, 331, 332, 333, 334, 335, 337, 339, 347, 348, 354, 356, 358, 359, 360, 369, 372, 396, 397, 398, 416, 449, 450, 451, 452, 453, 454, 455, 456, 459, 460, 461, 465, 466, 487, 489, 490, 491, 493, 498, 500, 501, 502, 504, 506, 519, 520, 521, 522, 531, 534, 535, 537, 538, 542, 543, 544, 545, 546, 549, 550, 553, 555, 557, 558, 559, 561, 562, 565, 573, 574, 588, 589, 590, 592, 594, 596, 597, 610, 611, 616, 621, 631, 638, 647, 648, 649, 650, 656, 657, 663, 664, 665, 670, 671, 672, 673, 674, 675, 677, 679, 681, 682, 688, 693, 694, 695, 696, 700, 703, 704, 705, 706, 707, 710, 711, 722, 723, 727, 728, 735, 736, 737, 738, 740, 743, 746, 747, 748, 749, 750, 754, 755, 758, 760, 761, 763, 764, 765, 803, 821, 824, 826, 833, 834, 838, 841, 842, 849, 852, 854, 861, 868], "conj": [54, 77, 235, 240, 242, 283, 284, 288, 369, 629], "conjug": [54, 59, 77, 82, 335, 369, 372, 373, 379, 395, 421, 427, 439, 441, 443, 507, 634, 674, 678, 686], "copysign": [54, 77, 369], "unsign": [54, 67, 77, 336, 369, 375, 384, 489, 520, 521, 644, 754, 755, 760, 762, 774, 826, 846], "count_nonzero": [54, 77, 369], "diff": [54, 71, 77, 369, 828, 837, 864], "prepend": [54, 77, 338, 369, 634, 636, 674, 699, 816], "differenc": [54, 77, 338, 369], "prior": [54, 77, 338, 369, 379, 507, 634, 686, 830, 842], "expand": [54, 55, 61, 77, 78, 338, 369, 375, 493, 546, 631, 636, 699, 824, 840], "discret": [54, 77, 338, 369, 372, 394, 395, 400, 401, 404, 405, 406, 416, 417, 635, 694, 789], "digamma": [54, 77, 369], "7549271": [54, 339, 369], "92278427": [54, 77, 339, 369], "9988394": [54, 339, 369], "erfc": [54, 77, 369], "complementari": [54, 77, 330, 340, 366, 369, 865, 873], "84270084e": [54, 340, 341], "80259693e": [54, 340, 341], "erfinv": [54, 77, 369], "toward": [54, 61, 77, 84, 244, 291, 342, 354, 369, 375, 384, 487, 522, 629, 636, 704, 809, 813, 815, 816, 831, 846, 863, 867], "float_pow": [54, 77, 369], "fmax": [54, 77, 369], "fmod": [54, 77, 629], "divis": [54, 55, 56, 77, 78, 79, 231, 237, 244, 246, 279, 281, 291, 375, 467, 580, 589, 603, 612, 613, 618, 629, 631, 632, 633, 646, 653, 654, 793, 834, 843], "frexp": [54, 77, 369], "edge_ord": [54, 77, 346, 369], "estim": [54, 77, 346, 369, 384, 519, 807], "boundari": [54, 63, 77, 86, 97, 322, 323, 346, 366, 369, 372, 408, 640, 738, 867], "33333333": [54, 77, 278, 346, 369, 449, 629], "hypot": [54, 77, 369], "hypotenus": [54, 347, 369], "4031": [54, 347, 369], "8102": [54, 347, 369], "isclos": [54, 77, 369, 820], "ldexp": [54, 77, 369], "lerp": [54, 77, 369], "lgamma": [54, 77, 369], "45373654": [54, 351, 369], "6477685": [54, 351, 369], "modf": [54, 77, 369], "fraction": [54, 77, 352, 369, 384, 529, 633, 656], "nansum": [54, 77, 369], "accumul": [54, 77, 353, 369, 375, 486], "nextaft": [54, 77, 369], "0e": [54, 56, 77, 79, 354, 369, 618, 632], "4013e": [54, 77, 354, 369], "4028e": [54, 77, 354, 369], "signbit": [54, 77, 369], "637": [54, 77, 356, 369], "0909": [54, 77, 356, 369], "sparsify_tensor": [54, 77, 369], "sparsifi": [54, 77, 357, 369], "arang": [54, 59, 67, 77, 82, 134, 357, 369, 372, 373, 391, 392, 393, 400, 405, 409, 410, 411, 414, 423, 440, 473, 569, 611, 626, 631, 634, 637, 644, 675, 691, 713, 714, 756, 809, 826, 837, 874], "xlogi": [54, 77, 369], "0986": [54, 77, 358, 369], "3863": [54, 77, 358, 369], "0000": [54, 77, 311, 312, 315, 341, 358, 366, 369, 373, 375, 438, 475], "zeta": [54, 77, 369], "0369": [54, 77, 359, 369], "_arraywithgeneralexperiment": [54, 99], "init_valu": [54, 77, 81, 360, 370, 372, 415], "reduct": [54, 55, 60, 68, 71, 77, 78, 81, 83, 91, 360, 370, 372, 374, 375, 415, 449, 450, 451, 452, 453, 454, 455, 456, 486, 543, 573, 574, 631, 635, 645, 693, 694, 695, 764, 765, 790, 826, 834, 837, 841, 848], "_arraywithgradientsexperiment": [54, 99], "_arraywithimageexperiment": [54, 99], "_arraywithlayersexperiment": [54, 99], "adaptive_avg_pool1d": [54, 77, 372], "1d": [54, 77, 94, 95, 372, 373, 375, 384, 386, 394, 396, 398, 404, 439, 459, 464, 486, 490, 519, 773, 789], "adapt": [54, 77, 79, 372, 386, 387, 388, 389, 619, 632, 789, 793, 857], "pool": [54, 77, 81, 372, 386, 387, 388, 389, 391, 392, 393, 409, 410, 411, 412, 415, 789, 816], "plane": [54, 77, 237, 240, 242, 270, 282, 283, 284, 287, 372, 375, 386, 387, 388, 389, 487, 629], "l_in": [54, 77, 372, 386], "spatial": [54, 58, 77, 81, 372, 378, 386, 387, 388, 389, 408, 415, 419, 498, 499, 500, 503, 633, 646, 647, 648, 649, 651, 653, 655, 792], "Will": [54, 77, 372, 386, 387, 388, 389, 798, 852], "l_out": [54, 77, 372, 386], "nhwc": [54, 58, 77, 81, 372, 378, 387, 392, 397, 410, 414, 503, 633, 646, 649, 650, 653, 654, 655, 789], "3d": [54, 59, 77, 372, 387, 389, 396, 397, 461, 634, 672, 789, 844], "4d": [54, 77, 372, 373, 378, 387, 397, 398, 447, 503], "s_0": [54, 77, 372, 387, 388], "s_1": [54, 77, 372, 387, 388], "adaptive_max_pool2d": [54, 77, 372], "h_in": [54, 77, 372, 388, 389], "w_in": [54, 77, 372, 388, 389], "adaptive_max_pool3d": [54, 77, 372], "avg_pool1d": [54, 77, 372], "kernel": [54, 58, 77, 81, 372, 391, 392, 393, 409, 410, 411, 412, 633, 659, 846, 852, 867, 870, 871], "nwc": [54, 58, 77, 81, 372, 391, 396, 409, 412, 633, 646, 647, 648, 653, 654, 789], "count_include_pad": [54, 77, 372, 391, 392, 393, 789], "d_in": [54, 58, 77, 81, 372, 389, 391, 392, 393, 395, 400, 401, 405, 409, 410, 411, 412, 633, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655], "algorithm": [54, 58, 70, 77, 81, 107, 372, 373, 391, 392, 393, 408, 409, 410, 411, 412, 442, 444, 448, 634, 647, 649, 650, 651, 652, 655, 682, 785, 789, 803, 826, 838, 844, 852, 867, 869, 871], "ncw": [54, 58, 77, 81, 372, 391, 396, 397, 409, 412, 633, 646, 647, 648, 653, 654, 789], "avg_pool2d": [54, 77, 372], "divisor_overrid": [54, 77, 372, 391, 392, 393, 789], "avg_pool3d": [54, 77, 372], "ndhwc": [54, 58, 77, 81, 372, 393, 398, 411, 633, 646, 651, 652, 653, 654, 789], "volum": [54, 58, 77, 81, 372, 393, 395, 400, 401, 405, 411, 633, 651, 652], "ncdhw": [54, 58, 77, 81, 372, 393, 398, 411, 633, 646, 651, 652, 653, 654, 789], "dct": [54, 77, 372, 789, 849], "truncat": [54, 77, 372, 373, 394, 400, 404, 405, 406, 417, 446, 576, 631, 789, 830, 849], "larger": [54, 61, 67, 77, 84, 90, 162, 372, 394, 401, 404, 406, 417, 627, 636, 644, 696, 704, 761, 763, 789, 841, 844, 874], "ortho": [54, 77, 372, 394, 395, 400, 401, 404, 405, 406, 416, 417, 789], "onesid": [54, 77, 372, 395], "fft": [54, 77, 372, 395, 401, 416, 417, 420, 789, 815, 867], "symmetri": [54, 372, 395], "rfft": [54, 77, 372, 395, 417], "invok": [54, 372, 395, 809, 832, 860, 861], "batch_idx": [54, 372, 395], "signal_dim1": [54, 372, 395], "signal_dim2": [54, 372, 395], "signal_dimn": [54, 372, 395], "signal_dim": [54, 372, 395], "embed": [54, 77, 372, 374, 449, 633, 660, 775, 789, 867], "max_norm": [54, 55, 77, 78, 372, 399, 537, 538, 631, 789], "ifft": [54, 77, 372, 400, 406, 789], "pi": [54, 77, 283, 287, 372, 374, 400, 405, 454, 624, 629], "44509285e": [54, 77, 372, 400], "14423775e": [54, 77, 372, 400], "17j": [54, 77, 372, 400, 405], "11483250e": [54, 77, 372, 400], "16j": [54, 77, 372, 400, 405], "33486982e": [54, 77, 372, 400], "22464680e": [54, 77, 372, 400], "95799250e": [54, 77, 372, 400], "66951701e": [54, 77, 372, 400], "fft2": [54, 372], "vari": [54, 65, 94, 95, 288, 401, 542, 629, 631, 634, 642, 681, 747, 748, 749, 803, 824, 828, 838, 841, 848], "20477401j": [54, 372, 401], "0614962j": [54, 372, 401], "idct": [54, 77, 372], "49862671": [54, 77, 372, 394, 404], "37691498": [54, 77, 372, 394, 404], "00390816": [54, 77, 372, 394, 404], "58938599": [54, 77, 372, 394, 404], "92713165": [54, 77, 372, 394, 404], "078475": [54, 77, 372, 394, 404], "19664812": [54, 77, 372, 394, 404], "95411837": [54, 77, 372, 394, 404], "30636606e": [54, 77, 372, 405], "43029718e": [54, 77, 372, 405], "18j": [54, 77, 372, 400, 405], "53080850e": [54, 77, 372, 405], "58689626e": [54, 77, 372, 405], "24474906e": [54, 77, 372, 405], "91858728e": [54, 77, 372, 405], "01435406e": [54, 77, 372, 405], "ifftn": [54, 77, 372], "24730653": [54, 77, 372, 406], "90832391j": [54, 77, 372, 406], "49495562": [54, 77, 372, 406], "9039565j": [54, 77, 372, 406], "98193269": [54, 77, 372, 406], "49560517j": [54, 77, 372, 406], "93280757": [54, 77, 372, 406], "48075343j": [54, 77, 372, 406], "28526384": [54, 77, 372, 406], "3351205j": [54, 77, 372, 406], "2343787": [54, 77, 372, 406], "83528011j": [54, 77, 372, 406], "18791352": [54, 77, 372, 406], "30690572j": [54, 77, 372, 406], "82115787": [54, 77, 372, 406], "96195183j": [54, 77, 372, 406], "44719226": [54, 77, 372, 406], "72654048j": [54, 77, 372, 406], "51476765": [54, 372, 406], "66160417j": [54, 372, 406], "04319742": [54, 372, 406], "05411636j": [54, 372, 406], "015561": [54, 372, 406], "04216015j": [54, 372, 406], "06310689": [54, 372, 406], "05347854j": [54, 372, 406], "13392983": [54, 372, 406], "16052352j": [54, 372, 406], "08371392": [54, 372, 406], "17252843j": [54, 372, 406], "0031429": [54, 372, 406], "05421245j": [54, 372, 406], "10446617": [54, 372, 406], "17747098j": [54, 372, 406], "05344324": [54, 372, 406], "07972424j": [54, 372, 406], "8344667": [54, 77, 372, 406], "98222595j": [54, 77, 372, 406], "48472244": [54, 77, 372, 406], "30233797j": [54, 77, 372, 406], "recompute_scale_factor": [54, 77, 372, 408, 844], "antialia": [54, 77, 372, 408, 844], "height": [54, 55, 58, 77, 78, 81, 372, 408, 542, 631, 633, 649, 650, 651, 652, 655, 818, 849], "width": [54, 55, 58, 77, 78, 81, 372, 373, 375, 378, 384, 408, 427, 481, 503, 522, 542, 631, 633, 647, 648, 649, 650, 651, 652, 655, 660], "trilinear": [54, 77, 372, 408, 844], "nearest_exact": [54, 77, 372, 408, 844], "tf_area": [54, 77, 372, 408, 844], "mitchellcub": [54, 77, 372, 408, 844], "lanczos3": [54, 77, 372, 408, 844], "lanczos5": [54, 77, 372, 408, 844], "gaussian": [54, 77, 107, 372, 408, 623, 844], "overwrit": [54, 71, 77, 210, 372, 408, 628, 817, 837, 838, 846], "thu": [54, 77, 231, 244, 279, 287, 288, 372, 373, 408, 426, 629, 634, 669, 670, 815, 825, 830, 835, 838, 842], "antialias": [54, 77, 408], "max_pool1d": [54, 77, 372], "dilaton": [54, 77, 409, 410, 411], "max_pool3d": [54, 77, 372], "max_unpool1d": [54, 77, 372], "unpool": [54, 77, 372, 412], "reduce_window": [54, 81, 372], "window_dimens": [54, 81, 372, 415], "window_strid": [54, 81, 372, 415], "base_dil": [54, 81, 372, 415], "window_dil": [54, 81, 372, 415], "trim": [54, 71, 77, 372, 375, 416, 492], "orthonorm": [54, 59, 77, 82, 372, 416, 634, 681, 684], "8660254j": [54, 77, 372, 416], "rfftn": [54, 77, 372], "sliding_window": [54, 77, 372], "window_s": [54, 77, 372, 419], "frame_length": [54, 77, 372, 420], "frame_step": [54, 77, 372, 420], "fft_length": [54, 77, 372, 420], "window_fn": [54, 77, 372, 420], "pad_end": [54, 77, 372, 420], "smallest": [54, 71, 77, 162, 165, 233, 372, 375, 420, 491, 627, 629, 634, 675, 773, 775, 776], "enclos": [54, 77, 372, 420, 868], "window_length": [54, 77, 309, 311, 314, 315, 330, 366, 372, 420], "li": [54, 77, 372, 373, 384, 420, 427, 529, 856], "past": [54, 77, 372, 420, 817, 820, 839, 841, 853, 867], "fft_unique_bin": [54, 77, 372, 420], "complex64": [54, 74, 77, 155, 169, 178, 184, 250, 277, 372, 416, 420, 627, 629, 634, 682, 684, 685, 774, 826, 831], "complex128": [54, 77, 78, 155, 156, 169, 178, 184, 372, 420, 568, 627, 631, 634, 670, 671, 675, 691, 773, 774, 813, 826, 831], "compon": [54, 77, 139, 140, 218, 219, 220, 223, 226, 235, 237, 238, 240, 242, 270, 272, 273, 280, 283, 284, 287, 288, 320, 324, 335, 366, 369, 372, 373, 378, 420, 431, 442, 503, 626, 629, 641, 744, 809, 840, 846, 857, 863, 868, 870], "linear_algebra": [54, 59, 77, 82, 634, 842], "_arraywithlinearalgebraexperiment": [54, 99], "adjoint": [54, 59, 77, 82, 373, 443, 634, 673, 683, 684, 773], "batched_out": [54, 77, 373], "j1": [54, 77, 373, 422], "jn": [54, 77, 373, 422], "k1": [54, 77, 373, 422], "km": [54, 77, 373, 422], "outer": [54, 59, 77, 82, 94, 373, 422, 634, 637, 712, 713, 714, 803, 815], "30000001": [54, 77, 373, 422, 542, 631, 642, 747], "40000001": [54, 58, 70, 77, 99, 100, 109, 112, 293, 364, 373, 422, 623, 633, 642, 663, 747], "60000002": [54, 77, 90, 100, 373, 378, 422, 502, 504, 538, 631, 758], "80000001": [54, 77, 373, 378, 422, 502, 504], "60000001": [54, 77, 373, 422], "90000004": [54, 77, 373, 422, 644, 758], "20000002": [54, 77, 373, 422, 538, 631], "20000005": [54, 56, 77, 293, 301, 304, 305, 364, 373, 422, 612], "00000012": [54, 77, 373, 422], "49999994": [54, 77, 373, 422], "00000006": [54, 77, 373, 422], "60000014": [54, 77, 373, 422], "19999993": [54, 77, 373, 422], "80000007": [54, 77, 373, 422, 538, 631], "20000017": [54, 77, 373, 422], "89999992": [54, 77, 373, 422], "60000008": [54, 77, 373, 422], "80000019": [54, 77, 350, 369, 373, 422], "4000001": [54, 77, 81, 373, 422, 633, 656, 663], "cond": [54, 77, 120, 373, 625, 852], "933034373659268": [54, 423], "diagflat": [54, 77, 373, 433, 438], "offset": [54, 59, 62, 73, 77, 82, 85, 131, 373, 378, 424, 498, 499, 500, 626, 634, 639, 668, 688, 734, 780], "padding_valu": [54, 77, 373, 424], "right_left": [54, 77, 373, 424], "num_row": [54, 77, 373, 424], "num_col": [54, 77, 373, 424], "dot": [54, 58, 77, 81, 94, 373, 374, 440, 449, 633, 634, 660, 663, 690, 803, 809, 816, 825], "eig": [54, 59, 77, 373, 634, 670, 671], "37228132": [54, 77, 373, 426, 428, 669], "82456484": [54, 426, 669], "41597356": [54, 426, 669], "56576746": [54, 426, 669], "90937671": [54, 426, 669], "eigh_tridiagon": [54, 77, 373], "eigvals_onli": [54, 77, 373, 427], "select_rang": [54, 77, 373, 427], "tol": [54, 77, 98, 373, 427, 442, 448], "eigenvalu": [54, 59, 77, 82, 94, 95, 373, 426, 427, 428, 634, 669, 670, 671, 677], "eigenvector": [54, 77, 373, 426, 427, 634, 669, 670], "interv": [54, 63, 68, 77, 86, 91, 123, 134, 135, 142, 373, 384, 427, 522, 626, 634, 636, 640, 645, 665, 690, 696, 699, 707, 736, 738, 764, 765], "togeth": [54, 71, 77, 331, 348, 369, 373, 427, 794, 809, 818, 821, 824, 826, 837, 838, 841, 842, 844, 850, 851, 852, 857, 865, 867, 868, 873], "cluster": [54, 77, 373, 427, 852, 867], "converg": [54, 77, 373, 427, 858], "_2": [54, 77, 373, 427], "eig_val": [54, 77, 373, 427], "decreas": [54, 77, 373, 427, 775], "eig_vector": [54, 77, 373, 427], "38196": [54, 427], "61803": [54, 427], "eigval": [54, 77, 373], "general_inner_product": [54, 82, 373], "n_mode": [54, 82, 373, 429], "tradit": [54, 82, 373, 429], "inner": [54, 59, 73, 82, 103, 138, 373, 426, 429, 626, 634, 637, 669, 670, 674, 712, 713, 714, 803, 815, 837], "higher_order_mo": [54, 77, 373], "n_featur": [54, 77, 373, 430], "d1": [54, 77, 373, 430], "dn": [54, 77, 373, 430], "initialize_tuck": [54, 77, 373], "svd": [54, 59, 77, 82, 97, 373, 431, 437, 442, 444, 445, 446, 448, 634, 685], "truncated_svd": [54, 77, 373, 431, 442, 445, 448], "non_neg": [54, 77, 324, 366, 373, 431], "mask": [54, 58, 77, 81, 94, 372, 373, 375, 418, 431, 432, 442, 448, 488, 552, 631, 633, 656, 660, 663, 844], "svd_mask_repeat": [54, 77, 373, 431, 442, 448], "tuckertensor": [54, 77, 98, 324, 366, 373, 431, 442, 448], "scheme": [54, 77, 373, 431, 442, 820, 850, 867], "tucker": [54, 77, 324, 366, 373, 431, 442], "decomposit": [54, 59, 77, 82, 94, 95, 97, 320, 321, 322, 323, 324, 366, 373, 431, 435, 442, 445, 447, 448, 634, 664, 670, 681, 684, 815, 874], "miss": [54, 77, 373, 375, 431, 442, 448, 488, 793, 815, 816, 821, 824, 825, 828, 838, 841, 844], "everywher": [54, 77, 373, 431, 442, 448], "imput": [54, 77, 373, 431, 442, 448], "kron": [54, 77, 373, 438, 874], "make_svd_non_neg": [54, 77, 373, 446], "nntype": [54, 77, 373, 437], "nndsvd": [54, 77, 373, 437], "singular": [54, 59, 77, 82, 373, 431, 437, 444, 446, 634, 675, 677, 680, 684, 685, 773, 775, 826], "nndsvda": [54, 77, 373, 437], "boutsidi": [54, 77, 373, 437], "gallopoulo": [54, 77, 373, 437], "pattern": [54, 55, 77, 78, 373, 437, 542, 543, 544, 631, 826, 829, 840, 858], "recognit": [54, 77, 373, 437, 812], "1350": [54, 77, 373, 437], "1362": [54, 77, 373, 437], "2008": [54, 77, 373, 437, 867], "matrix_exp": [54, 77, 373], "7183": [54, 77, 373, 438], "3891": [54, 77, 373, 438], "mode_dot": [54, 77, 93, 94, 98, 373], "matrix_or_vector": [54, 77, 94, 98, 373, 439], "i_1": [54, 77, 94, 95, 373, 439], "i_k": [54, 77, 94, 373, 439], "i_n": [54, 77, 94, 373, 439], "i_": [54, 77, 94, 373, 384, 439, 522], "multi_dot": [54, 77, 373], "148": [54, 76, 77, 240, 373, 440], "multi_mode_dot": [54, 77, 373], "mat_or_vec_list": [54, 77, 373, 441], "times_0": [54, 373, 441], "vec": [54, 373, 441], "times_1": [54, 373, 441], "cdot": [54, 270, 373, 441, 629], "times_n": [54, 373, 441], "partial_tuck": [54, 77, 373], "n_iter_max": [54, 77, 373, 442, 448], "verbos": [54, 77, 373, 442, 445, 448, 807, 841, 846], "return_error": [54, 77, 373, 442, 448], "variat": [54, 77, 373, 442, 448, 828, 838, 841], "reconstruct": [54, 59, 65, 77, 88, 97, 373, 375, 442, 448, 495, 634, 642, 684, 746, 748, 839], "return_erro": [54, 373, 442, 448], "svd_flip": [54, 77, 373], "u_based_decis": [54, 77, 373, 444], "basi": [54, 77, 373, 444, 817, 820, 849], "flip": [54, 61, 77, 84, 94, 228, 373, 375, 444, 472, 473, 629, 636, 837, 848, 849, 851], "decis": [54, 77, 373, 444, 809, 820, 826, 844, 846, 848, 867], "u_adjust": [54, 77, 373, 444], "v_adjust": [54, 77, 373, 444], "tensor_train": [54, 77, 373], "tt": [54, 77, 323, 366, 373, 445, 447], "kth": [54, 373, 445], "tttensor": [54, 97, 323, 366, 373, 445], "compute_uv": [54, 59, 77, 82, 373, 446, 634, 684], "n_eigenvec": [54, 77, 373, 446], "returnedv": [54, 446], "vh": [54, 59, 77, 82, 373, 446, 634, 684], "eigen": [54, 77, 373, 446], "namedtupl": [54, 59, 65, 77, 82, 88, 373, 375, 426, 446, 495, 634, 642, 669, 670, 681, 682, 684, 746, 747, 748], "tt_matrix_to_tensor": [54, 77, 373], "known": [54, 77, 281, 373, 445, 447, 629, 788, 820, 825, 826, 838, 841], "rank_k": [54, 77, 373, 447], "left_dim_k": [54, 77, 373, 447], "right_dim_k": [54, 77, 373, 447], "rank_": [54, 77, 373, 447], "49671414": [54, 77, 373, 447, 640, 737], "1382643": [54, 77, 373, 447, 640, 737], "64768857": [54, 77, 373, 447, 640, 737], "5230298": [54, 77, 373, 447, 640, 737], "23415337": [54, 77, 373, 447, 640, 737], "23413695": [54, 77, 373, 447, 640, 737], "57921278": [54, 77, 373, 447], "76743472": [54, 77, 373, 447], "1163073": [54, 77, 373, 447], "11629914": [54, 77, 373, 447], "03237505": [54, 77, 373, 447], "03237278": [54, 77, 373, 447], "78441733": [54, 77, 373, 447], "38119566": [54, 77, 373, 447], "21834874": [54, 77, 373, 447], "10610882": [54, 77, 373, 447], "15165846": [54, 77, 373, 447], "15164782": [54, 77, 373, 447], "35662258": [54, 77, 373, 447], "35659757": [54, 77, 373, 447], "02283812": [54, 77, 373, 447], "49705869": [54, 77, 373, 447], "40518808": [54, 77, 373, 447], "16882598": [54, 77, 373, 447], "fixed_factor": [54, 77, 373, 448], "tl": [54, 77, 373, 448], "kolda": [54, 77, 373, 448], "bader": [54, 77, 373, 448], "siam": [54, 77, 373, 445, 448], "review": [54, 77, 373, 448, 811, 812, 815, 817, 823, 825, 828, 838, 842], "vol": [54, 77, 373, 448], "pp": [54, 77, 373, 448], "455": [54, 77, 373, 448], "2009": [54, 77, 373, 448], "_arraywithlossesexperiment": [54, 99], "hinge_embedding_loss": [54, 77, 374], "margin": [54, 77, 374, 449, 456, 838], "measur": [54, 374, 449, 633, 660, 789], "semi": [54, 374, 449], "l_n": [54, 374, 449], "x_n": [54, 374, 449], "y_n": [54, 374, 449], "ell": [54, 374, 449], "operatornam": [54, 281, 283, 374, 449, 629, 634, 670], "l_1": [54, 374, 449], "Its": [54, 374, 449, 867], "hyperparamet": [54, 77, 374, 449], "aggreg": [54, 77, 374, 449, 642, 746, 825], "unreduc": [54, 77, 374, 449], "hing": [54, 77, 374, 449, 456], "input_tensor": [54, 77, 373, 374, 445, 449, 454, 838], "target_tensor": [54, 374, 449, 454], "huber_loss": [54, 77, 374], "delta": [54, 56, 77, 79, 374, 450, 612, 632], "transit": [54, 77, 374, 450, 867], "huber": [54, 77, 374, 450], "kl_div": [54, 77, 374], "log_target": [54, 77, 374, 451], "contai": [54, 451], "batchmean": [54, 374, 451], "kullback": [54, 77, 374, 451], "leibler": [54, 77, 374, 451], "0916": [54, 451], "l1_loss": [54, 77, 374, 453], "l1": [54, 59, 77, 82, 374, 378, 450, 452, 453, 455, 501, 634, 691, 824, 849], "targetict": [54, 77, 374, 452, 453, 455, 456], "20000000000000004": [54, 452], "log_poisson_loss": [54, 77, 374], "compute_full_loss": [54, 77, 374, 453, 790], "favor": [54, 77, 374, 453], "likelihood": [54, 77, 374, 453, 454], "28402555": [54, 374, 453], "03402555": [54, 374, 453], "1573164": [54, 374, 453], "poisson_nll_loss": [54, 77, 374], "log_input": [54, 77, 374, 454], "poisson": [54, 77, 374, 379, 453, 454], "assumpt": [54, 374, 453, 454], "minu": [54, 374, 453, 454], "omiss": [54, 374, 454], "stirl": [54, 77, 374, 453, 454], "prevent": [54, 56, 77, 79, 374, 454, 554, 612, 613, 618, 631, 632, 633, 644, 656, 762, 788, 793, 815, 817, 825, 826, 830, 837, 838, 842], "1977562": [54, 454], "smooth_l1_loss": [54, 77, 374], "smooth": [54, 60, 77, 83, 374, 450, 455, 635, 693, 694, 695, 836], "8125": [54, 455], "soft_margin_loss": [54, 77, 374], "soft": [54, 77, 304, 374, 375, 456, 488, 827], "35667497": [54, 456], "22314353": [54, 456], "60943791": [54, 456], "manipul": [54, 77, 837, 838, 842, 844, 846, 851, 856, 867], "_arraywithmanipulationexperiment": [54, 99], "as_strid": [54, 77, 375], "nativeshap": [54, 58, 61, 63, 77, 84, 86, 124, 125, 127, 132, 139, 145, 375, 379, 457, 469, 474, 482, 485, 505, 506, 507, 508, 509, 574, 587, 593, 595, 626, 631, 633, 636, 640, 646, 648, 650, 652, 654, 703, 736, 737, 738, 833, 835], "byte": [54, 55, 73, 77, 78, 99, 131, 375, 457, 568, 626, 631, 872, 873], "associative_scan": [54, 77, 375], "revers": [54, 55, 59, 67, 77, 82, 90, 99, 100, 363, 371, 372, 373, 375, 384, 418, 434, 458, 472, 473, 520, 521, 541, 631, 634, 636, 644, 689, 700, 754, 755, 815, 824, 825, 826, 828, 829, 837, 838, 844, 851, 852], "scan": [54, 77, 375, 458, 852], "atleast_1d": [54, 77, 375], "ari": [54, 77, 375, 459, 460, 461, 467, 476, 496], "a1": [54, 78, 375, 459, 460, 461, 465, 534], "a2": [54, 78, 375, 459, 460, 461, 465, 534], "atleast_2d": [54, 77, 375], "atleast_3d": [54, 77, 375], "column_stack": [54, 77, 375], "concat_from_sequ": [54, 77, 375], "input_sequ": [54, 77, 375, 466], "new_axi": [54, 77, 375, 466, 851], "dsplit": [54, 77, 375], "indices_or_sect": [54, 77, 375, 467, 476, 496], "3rd": [54, 77, 375, 467], "dstack": [54, 77, 375], "fill_diagon": [54, 77, 375], "fill_diag": [54, 470], "fortran": [54, 61, 77, 84, 375, 471, 636, 703, 867, 871], "layout": [54, 61, 77, 84, 375, 471, 636, 703, 822, 837, 838, 844], "fliplr": [54, 77, 375, 837], "diag": [54, 59, 77, 82, 95, 375, 472, 473, 634, 670, 846], "flipud": [54, 77, 375, 837], "fold": [54, 77, 375, 482, 483, 825], "unfold": [54, 77, 94, 95, 97, 373, 375, 431, 474, 482, 484], "folded_tensor": [54, 375, 474], "heavisid": [54, 77, 375], "5000": [54, 375, 475, 634, 673, 803], "hsplit": [54, 77, 375], "horizont": [54, 77, 375, 465, 476, 542, 631], "hstack": [54, 77, 375, 465], "i0": [54, 77, 375, 384, 522], "bessel": [54, 67, 77, 90, 314, 366, 375, 478, 644, 761, 763], "kind": [54, 67, 77, 162, 165, 166, 384, 478, 520, 521, 526, 627, 644, 754, 755, 760, 762, 773, 774, 814, 838, 841, 844, 846, 852], "26606588": [54, 77, 375, 478], "2795853": [54, 77, 375, 478], "88079259": [54, 77, 375, 478], "row_mod": [54, 77, 375, 479], "column_mod": [54, 77, 375, 479], "ascend": [54, 66, 77, 89, 375, 382, 479, 512, 643, 750, 752, 818], "prod": [54, 55, 67, 78, 90, 373, 375, 432, 434, 479, 528, 543, 631, 644, 773, 803, 826, 828, 846, 864], "moveaxi": [54, 77, 375], "destin": [54, 77, 375, 480], "unstack": [54, 61, 71, 84, 480, 636, 824, 846, 849, 874], "reorder": [54, 61, 77, 84, 375, 480, 542, 631, 636, 700, 840], "stat_length": [54, 77, 375, 481], "constant_valu": [54, 77, 375, 481], "end_valu": [54, 77, 375, 481], "reflect_typ": [54, 77, 375, 481], "partial_fold": [54, 77, 375], "skip_begin": [54, 77, 375, 482, 483, 484, 485], "untouch": [54, 77, 375, 482, 483, 484, 485], "partial_tensor_to_vec": [54, 77, 375], "skip_end": [54, 77, 375, 483, 484], "vectoris": [54, 77, 94, 375, 483, 485], "partial_unfold": [54, 77, 375], "ravel_tensor": [54, 77, 375, 484], "n_1": [54, 77, 375, 484], "n_2": [54, 77, 375, 484], "n_i": [54, 77, 373, 375, 432, 484], "partial_vec_to_tensor": [54, 77, 375], "put_along_axi": [54, 77, 375], "rot90": [54, 77, 375, 837], "rotat": [54, 77, 375, 487], "soft_threshold": [54, 77, 375], "behav": [54, 77, 332, 333, 369, 373, 375, 426, 489, 634, 669, 820, 830, 835, 837, 838, 839, 848, 868], "invalid": [54, 68, 77, 91, 375, 489, 634, 636, 645, 690, 699, 764, 765, 773, 816, 826], "slice": [54, 67, 71, 77, 78, 90, 95, 144, 325, 366, 375, 464, 486, 489, 490, 549, 550, 552, 578, 626, 631, 638, 644, 724, 759, 841, 867], "inexact": [54, 77, 343, 369, 375, 489], "largest": [54, 71, 77, 162, 165, 373, 375, 444, 489, 491, 627, 634, 675, 684], "take_along_axi": [54, 77, 375], "arr": [54, 55, 74, 77, 170, 375, 464, 486, 490, 574, 627, 826, 827], "top_k": [54, 77, 375], "sort": [54, 65, 71, 77, 88, 100, 196, 289, 373, 375, 384, 426, 491, 512, 526, 628, 629, 634, 642, 669, 670, 684, 685, 746, 750, 751, 752, 775, 809, 814, 825, 840, 842], "trim_zero": [54, 77, 375], "fb": [54, 77, 375, 492], "front": [54, 77, 375, 492, 838, 845, 846, 849, 856, 865, 867], "unflatten": [54, 77, 375], "unfolded_tensor": [54, 375, 494], "unique_consecut": [54, 77, 375], "vsplit": [54, 77, 375], "vertic": [54, 77, 375, 496, 497, 542, 631, 817], "_arraywithnormsexperiment": [54, 99], "varianc": [54, 67, 77, 90, 378, 498, 500, 644, 763, 788, 792], "nsc": [54, 77, 378, 498, 499, 500, 792], "braodcast": [54, 77, 378, 498], "running_mean": [54, 77, 378, 498, 500, 792], "running_var": [54, 77, 378, 498, 500, 792], "nc": [54, 77, 378, 498, 499, 500, 792], "group_norm": [54, 77, 378], "num_group": [54, 77, 378, 499], "group": [54, 77, 375, 378, 495, 499, 633, 638, 646, 653, 654, 717, 807, 818, 820, 824, 826, 834, 838, 839, 863, 866, 872], "instance_norm": [54, 77, 378], "l1_normal": [54, 77, 378], "33333334": [54, 77, 295, 364, 378, 501, 504, 538, 614, 631, 632, 633, 634, 655, 691], "33333337": [54, 134, 378, 501, 614, 626, 632], "28571439": [54, 378, 501], "l2_normal": [54, 77, 378, 504], "l2": [54, 59, 82, 93, 94, 378, 502, 504, 634, 691, 789, 824], "44721359": [54, 77, 378, 502, 504], "89442718": [54, 77, 378, 502, 504, 538, 631], "lp_normal": [54, 77, 378], "lp": [54, 378, 504], "_arraywithrandomexperiment": [54, 99], "bernoulli": [54, 77, 372, 379, 396, 397, 398], "event": [54, 77, 379, 505, 841], "entri": [54, 61, 71, 77, 84, 88, 95, 134, 373, 375, 379, 443, 470, 472, 473, 505, 626, 636, 638, 705, 728, 746, 816, 825, 841, 867], "parameter": [54, 63, 77, 86, 379, 505, 506, 508, 509, 640, 735, 737, 738], "odd": [54, 77, 275, 375, 379, 481, 505, 629, 803, 814, 820], "drawn": [54, 63, 77, 86, 379, 505, 506, 507, 508, 509, 640, 735, 736, 737, 738, 773, 774, 775, 788, 841], "dirichlet": [54, 77, 379], "10598304": [54, 379, 507], "21537054": [54, 379, 507], "67864642": [54, 379, 507], "48006698": [54, 379, 507], "07472073": [54, 379, 507], "44521229": [54, 379, 507], "55479872": [54, 379, 507], "05426367": [54, 379, 507], "39093761": [54, 379, 507], "19531053": [54, 379, 507], "51675832": [54, 379, 507], "28793114": [54, 379, 507], "12315625": [54, 379, 507], "29823365": [54, 379, 507], "5786101": [54, 379, 507], "15564976": [54, 379, 507], "50542368": [54, 379, 507], "33892656": [54, 379, 507], "1325352": [54, 379, 507], "44439589": [54, 379, 507], "42306891": [54, 379, 507], "gamma": [54, 62, 77, 85, 339, 351, 369, 379, 384, 523, 639, 734], "rate": [54, 56, 77, 79, 372, 379, 414, 509, 613, 616, 618, 619, 620, 632, 633, 637, 658, 712, 713, 714, 793, 825], "lam": [54, 77, 379, 509], "_arraywithsearchingexperiment": [54, 99], "unravel_index": [54, 77, 380], "unravel": [54, 77, 380, 510], "_arraywithsetexperiment": [54, 99], "_arraywithsortingexperiment": [54, 99], "lexsort": [54, 77, 382], "indirectli": [54, 77, 382, 512], "statist": [54, 77, 92, 375, 481, 792, 807, 815, 826, 841, 842, 867], "_arraywithstatisticalexperiment": [54, 99], "bincount": [54, 77, 384], "minlength": [54, 77, 384, 517], "corrcoef": [54, 77, 384], "rowvar": [54, 77, 384, 518, 519], "relationship": [54, 77, 518, 788, 840], "cov": [54, 77, 384], "ddof": [54, 77, 384, 519], "fweight": [54, 77, 384, 519], "aweight": [54, 77, 384, 519], "overridden": [54, 77, 384, 519, 793, 821], "unbias": [54, 67, 77, 90, 384, 519, 644, 763], "typic": [54, 77, 331, 348, 369, 384, 519, 643, 752, 789, 820, 834, 866, 874], "assign": [54, 77, 94, 384, 519, 815, 817, 822, 826, 837, 840, 848], "covari": [54, 77, 384, 519], "cummax": [54, 77, 384], "exclus": [54, 55, 67, 71, 77, 78, 90, 123, 373, 384, 442, 520, 521, 561, 562, 565, 626, 631, 640, 644, 736, 754, 755, 812, 824, 826, 834, 851, 871, 873], "cumul": [54, 67, 77, 90, 384, 520, 521, 644, 754, 755], "uint64": [54, 67, 159, 164, 166, 167, 177, 179, 182, 384, 520, 521, 627, 644, 754, 755, 760, 762, 773, 774, 826, 841, 846], "uint16": [54, 67, 154, 159, 164, 165, 174, 384, 520, 521, 627, 644, 754, 755, 760, 762, 773, 774, 826, 838, 841, 846], "bit": [54, 67, 161, 162, 165, 228, 229, 231, 384, 520, 521, 627, 629, 644, 754, 755, 760, 762, 809, 814, 815, 816, 824, 825, 826, 828, 834, 846, 848, 873], "uint32": [54, 67, 159, 164, 165, 166, 188, 384, 520, 521, 627, 644, 754, 755, 760, 762, 773, 774, 826, 841, 846], "cummin": [54, 77, 384], "histogram": [54, 77, 384], "extend_lower_interv": [54, 77, 384, 522], "extend_upper_interv": [54, 77, 384, 522], "densiti": [54, 77, 384, 522], "monoton": [54, 77, 384, 522], "rightmost": [54, 77, 384, 522], "c1": [54, 77, 384, 522, 824], "ff": [54, 77, 384, 522], "c_": [54, 77, 95, 384, 522], "igamma": [54, 77, 384], "incomplet": [54, 77, 384, 523, 817], "3614": [54, 77, 384, 523], "2085": [54, 77, 384, 523], "median": [54, 77, 375, 384, 481, 526], "nanmean": [54, 77, 384], "6666666666666665": [54, 77, 384, 525], "nanmedian": [54, 77, 384], "overwrite_input": [54, 77, 384, 526], "treat": [54, 71, 77, 100, 275, 353, 369, 375, 378, 384, 490, 503, 526, 528, 629, 770, 836, 841, 847, 851], "undefin": [54, 77, 375, 384, 385, 481, 526, 530, 826, 830, 836], "nanmin": [54, 77, 384], "nanprod": [54, 77, 384], "Not": [54, 77, 353, 369, 373, 384, 428, 528, 624, 822, 830, 839, 849, 850, 852], "quantil": [54, 77, 384, 864], "inclus": [54, 77, 123, 384, 529, 626, 640, 736, 810, 822, 837, 844], "midpoint": [54, 77, 384, 529], "surround": [54, 77, 384, 529, 844], "whichev": [54, 77, 384, 529], "_arraywithutilityexperiment": [54, 99], "optional_get_el": [54, 77, 385], "empti": [54, 55, 67, 71, 78, 90, 123, 375, 385, 481, 530, 537, 574, 626, 631, 634, 638, 644, 645, 688, 691, 729, 759, 760, 762, 764, 765, 815, 816, 821, 823, 826, 827, 837], "_arraywithgener": [55, 99], "all_equ": [55, 78, 631], "equality_matrix": [55, 78, 531, 631], "array_equ": [55, 78, 631], "assert_supports_inplac": [55, 78, 631], "ivybackendexcept": [55, 78, 535, 559, 631, 804, 821, 827, 830, 831], "clip_matrix_norm": [55, 78, 631], "894": [55, 78, 537, 538, 631, 639, 734], "clip_vector_norm": [55, 78, 631], "default_v": [55, 541, 631], "catch_except": [55, 541, 631], "rev": [55, 541, 631], "with_cal": [55, 541, 631], "catch": [55, 541, 631, 835, 841], "einops_rearrang": [55, 78, 631], "axes_length": [55, 78, 542, 543, 544, 631], "arrang": [55, 542, 631], "rearrang": [55, 78, 542, 544, 631, 840], "einops_reduc": [55, 78, 631, 826], "einops_repeat": [55, 78, 631], "fourier_encod": [55, 78, 631], "max_freq": [55, 78, 546, 631], "oppos": [55, 78, 546, 631, 826], "geometr": [55, 78, 546, 631, 634, 689], "0000000e": [55, 78, 546, 631], "2246468e": [55, 78, 546, 631], "4492936e": [55, 546, 631], "6739404e": [55, 78, 546, 631], "batch_dim": [55, 78, 549, 550, 631, 795], "gather_nd": [55, 78, 631], "get_num_dim": [55, 78, 631], "as_arrai": [55, 78, 553, 587, 631, 795], "has_nan": [55, 78, 631], "include_inf": [55, 78, 555, 610, 631], "inplace_decr": [55, 78, 631], "val": [55, 71, 76, 78, 250, 375, 470, 557, 558, 559, 578, 579, 580, 629, 631, 826, 837, 848], "decrement": [55, 78, 557, 631], "inplace_incr": [55, 78, 631], "increment": [55, 78, 558, 631, 817, 867], "inplace_upd": [55, 78, 577, 631, 786, 837], "ensure_in_backend": [55, 78, 559, 631, 837], "keep_input_dtyp": [55, 78, 559, 631, 837], "is_arrai": [55, 78, 631, 837, 838], "is_ivy_arrai": [55, 78, 631, 837, 848], "is_ivy_contain": [55, 631], "is_native_arrai": [55, 78, 173, 562, 627, 631, 848], "isin": [55, 78, 631, 864], "test_el": [55, 78, 566, 631], "assume_uniqu": [55, 78, 566, 631], "invert": [55, 78, 228, 566, 629, 631, 634, 676], "scatter_flat": [55, 78, 631], "occupi": [55, 162, 165, 573, 574, 627, 631], "scatter_nd": [55, 78, 631, 844, 848], "stable_divid": [55, 78, 631, 834], "denomin": [55, 62, 78, 85, 580, 589, 603, 631, 639, 734, 792, 834, 843, 852, 864], "min_denomin": [55, 78, 580, 589, 603, 631, 843], "_min_denomin": [55, 589, 631], "stable_pow": [55, 78, 631], "min_bas": [55, 78, 579, 590, 602, 631, 792, 843], "00004": [55, 78, 590, 631], "00008": [55, 78, 590, 631], "00004000e": [55, 590], "56002560e": [55, 590], "60001200e": [55, 590], "09602048e": [55, 590], "supports_inplace_upd": [55, 78, 631], "to_fil": 55, "fid": 55, "sep": 55, "format_": 55, "recov": [55, 830, 838], "to_scalar": [55, 78, 631], "value_is_nan": [55, 78, 631], "_arraywithgradi": [56, 99], "adam_step": [56, 79, 632], "mw": [56, 79, 612, 613, 632, 850], "vw": [56, 79, 612, 613, 632, 850], "beta1": [56, 79, 533, 612, 613, 618, 631, 632, 793, 850], "beta2": [56, 79, 533, 612, 613, 618, 631, 632, 793, 850], "epsilon": [56, 59, 60, 79, 82, 83, 533, 612, 613, 618, 631, 632, 634, 635, 677, 680, 693, 694, 695, 785, 790, 792, 793, 824, 834, 837, 850], "dc": [56, 79, 612, 613, 616, 618, 619, 620, 632], "dw": [56, 79, 612, 613, 616, 618, 619, 620, 632], "forget": [56, 79, 612, 613, 618, 632, 793, 809, 826], "dcdw": [56, 79, 612, 613, 616, 618, 619, 632], "adam_step_delta": [56, 79, 612, 632], "2020105": [56, 612, 632], "22187898": [56, 612, 632], "24144873": [56, 612, 632], "10000002": [56, 90, 293, 364, 612, 758], "00300002": [56, 612], "00800002": [56, 612], "adam_upd": [56, 79, 632, 850], "mw_tm1": [56, 79, 613, 618, 632], "vw_tm1": [56, 79, 613, 618, 632], "ws_new": [56, 79, 613, 618, 619, 620, 632], "updated_weight": [56, 79, 613, 632], "92558753": [56, 613], "92558873": [56, 613, 632], "92558718": [56, 613, 632], "00000063e": [56, 79, 613, 632], "00000016e": [56, 79, 613, 632], "00000086e": [56, 79, 613, 632], "gradient_descent_upd": [56, 79, 632, 637, 712, 713, 714], "descent": [56, 79, 616, 632, 793, 850, 867], "new_weight": [56, 79, 616, 618, 619, 632, 849], "lamb_upd": [56, 79, 632], "max_trust_ratio": [56, 79, 618, 632, 793], "decay_lambda": [56, 79, 618, 619, 632, 793], "trust": [56, 79, 618, 632, 793], "ratio": [56, 79, 618, 632, 793], "decai": [56, 79, 618, 619, 632, 793], "lamb": [56, 79, 618, 632, 793, 850], "784": [56, 618, 632], "lars_upd": [56, 79, 632], "lar": [56, 79, 619, 632, 793, 850], "34077978": [56, 619, 632], "78025991": [56, 619, 632], "56051969": [56, 619, 632], "78026009": [56, 619, 632], "56051981": [56, 619, 632], "12103939": [56, 619, 632], "optimizer_upd": [56, 79, 632], "effective_grad": [56, 79, 620, 632], "3e": [56, 79, 620, 632], "preserve_typ": [56, 79, 621, 632], "_arraywithimag": [57, 99], "_arraywithlay": [58, 99], "conv1d": [58, 81, 633, 789], "filter_format": [58, 81, 633, 646, 647, 648, 649, 650, 651, 652, 653, 654], "channel_last": [58, 81, 633, 646, 647, 648, 649, 650, 651, 652, 653, 654, 773], "x_dilat": [58, 81, 633, 646, 647, 649, 650, 651, 653], "d_out": [58, 81, 372, 389, 633, 646, 647, 648, 649, 650, 651, 652, 653, 654], "channel_first": [58, 81, 633, 646, 647, 648, 649, 650, 651, 652, 653, 654], "wio": [58, 633, 646, 647, 648, 653], "conv1d_transpos": [58, 81, 633], "output_shap": [58, 81, 633, 646, 648, 650, 652, 654, 789], "iow": [58, 81, 633, 648], "woi": [58, 81, 633, 648], "fh": [58, 81, 633, 638, 646, 649, 650, 651, 652, 653, 654, 655, 727], "hwio": [58, 633, 646, 647, 649, 653], "conv2d_transpos": [58, 81, 633], "iohw": [58, 81, 633, 650], "hwoi": [58, 81, 633, 650], "conv3d": [58, 81, 633, 652, 789], "fd": [58, 81, 633, 646, 651, 652, 653, 654], "conv3d_transpos": [58, 81, 633, 654], "iodhw": [58, 81, 633, 652, 654], "dhwoi": [58, 81, 633, 652, 654], "depthwise_conv2d": [58, 81, 633], "randint": [58, 63, 65, 81, 86, 640, 642, 655, 659, 746, 826, 860], "noise_shap": [58, 81, 633, 656], "42857146": [58, 633, 656], "85714293": [58, 633, 656], "28571415": [58, 81, 633, 656], "71428585": [58, 81, 633, 656], "14285755": [58, 81, 633, 656], "5714283": [58, 633, 656], "4285717": [58, 81, 633, 656], "8571434": [58, 81, 633, 656], "2857151": [58, 633, 656], "dropout1d": [58, 81, 372], "droput1d": [58, 396, 397], "dropout2d": [58, 81, 372], "dropout3d": [58, 81, 372], "droput3d": [58, 398], "outer_batch_shap": [58, 81, 633, 657], "inner_batch_shap": [58, 81, 633, 657], "lstm_updat": [58, 81, 633, 846], "init_h": [58, 81, 633, 659, 846], "init_c": [58, 81, 633, 659, 846], "recurrent_kernel": [58, 81, 633, 659, 846], "recurrent_bia": [58, 81, 633, 659, 846], "hidden": [58, 81, 633, 658, 659, 789, 823, 830, 846, 850], "recurr": [58, 77, 81, 372, 418, 633, 659, 846, 867, 871], "timestep": [58, 77, 81, 372, 418, 633, 658, 659, 660, 789, 846], "h_i": [58, 81, 659], "c_i": [58, 81, 659], "rc": [58, 81, 659], "multi_head_attent": [58, 81, 633, 837], "num_head": [58, 81, 633, 660, 789], "in_proj_weight": [58, 81, 633, 660], "q_proj_weight": [58, 81, 633, 660], "k_proj_weight": [58, 81, 633, 660], "v_proj_weight": [58, 81, 633, 660], "out_proj_weight": [58, 81, 633, 660], "in_proj_bia": [58, 81, 633, 660], "out_proj_bia": [58, 81, 633, 660], "is_caus": [58, 81, 633, 660, 663], "key_padding_mask": [58, 81, 633, 660], "bias_k": [58, 81, 633, 660], "bias_v": [58, 81, 633, 660], "static_k": [58, 81, 633, 660], "static_v": [58, 81, 633, 660], "add_zero_attn": [58, 81, 633, 660], "return_attention_weight": [58, 81, 633, 660], "average_attention_weight": [58, 81, 633, 660], "scaled_dot_product_attent": [58, 81, 633], "dropout_p": [58, 81, 633, 663], "num_queri": [58, 81, 633, 663], "feat_dim": [58, 81, 633, 663], "num_kei": [58, 81, 633, 663], "causal": [58, 81, 633, 660, 663], "attent": [58, 81, 633, 660, 663, 789, 817, 821, 857], "29999995": [58, 293, 294, 304, 364, 372, 416, 633, 642, 663, 747], "19994521": [58, 633, 663], "09994531": [58, 633, 663], "30000019": [58, 375, 465, 633, 663], "_arraywithlinearalgebra": [59, 99], "choleski": [59, 82, 634, 837], "625": [59, 77, 345, 634, 664], "vif": [59, 82, 665], "det": [59, 82, 634, 682, 825], "axis1": [59, 61, 82, 84, 634, 636, 668, 688, 708], "axis2": [59, 82, 634, 668, 688], "eigh": [59, 82, 373, 426, 634, 669], "uplo": [59, 82, 634, 670, 671], "eigvalsh": [59, 82, 634], "array_lik": [59, 82, 372, 374, 375, 417, 450, 451, 455, 456, 486, 634, 672, 679, 803], "105": [59, 81, 633, 634, 656, 657, 672, 679], "149": [59, 634, 672], "143": [59, 76, 100, 287, 629, 634, 672, 828], "203": [59, 76, 226, 634, 639, 672, 734], "233": [59, 634, 672], "inv": [59, 82, 634], "transpose_a": [59, 82, 634, 674], "transpose_b": [59, 82, 634, 674], "adjoint_a": [59, 82, 634, 674], "adjoint_b": [59, 82, 634, 674], "matrix_norm": [59, 82, 634], "ord": [59, 82, 634, 675, 691], "fro": [59, 82, 374, 450, 634, 675], "nuc": [59, 82, 634, 675], "matrix_pow": [59, 82, 634], "matrix_rank": [59, 82, 634], "hermitian": [59, 82, 373, 426, 427, 634, 669, 670, 671, 677, 684], "largest_singular_valu": [59, 82, 634, 677, 680], "defici": [59, 634, 677], "matrix_transpos": [59, 82, 634, 848], "pinv": [59, 82, 634], "pseudo": [59, 82, 634, 680, 836], "99999988": [59, 82, 634, 680], "qr": [59, 82, 634, 839], "complet": [59, 71, 82, 634, 681, 774, 815, 816, 817, 818, 820, 821, 824, 825, 828, 830, 834, 838, 839, 841, 844, 848, 849, 857, 865], "12309149": [59, 634, 681], "90453403": [59, 634, 681], "40824829": [59, 634, 681], "49236596": [59, 634, 681], "30151134": [59, 634, 681], "81649658": [59, 634, 681], "86164044": [59, 634, 681], "12403841e": [59, 634, 681], "60113630e": [59, 634, 681], "10782342e": [59, 634, 681], "04534034e": [59, 634, 681], "80906807e": [59, 634, 681], "88178420e": [59, 82, 634, 671, 681], "slogdet": [59, 82, 634], "logabsdet": [59, 82, 634, 682], "natur": [59, 82, 240, 258, 259, 260, 261, 280, 351, 369, 629, 634, 682, 821, 828, 830, 839, 857], "098611": [59, 634, 682], "solv": [59, 82, 373, 437, 634, 773, 809, 816, 820, 831, 838, 847, 869], "full_matric": [59, 82, 634, 684], "svf": [59, 684], "reconstructed_x": [59, 634, 684], "svdval": [59, 82, 634], "tensorsolv": [59, 82, 634], "vander": [59, 82, 634], "vandermond": [59, 82, 634, 689], "vecdot": [59, 82, 634], "vector_norm": [59, 82, 634], "mathemat": [59, 82, 220, 225, 237, 242, 244, 260, 270, 624, 629, 634, 675, 691, 826, 838, 844, 867, 873], "manhattan": [59, 82, 634, 691], "euclidean": [59, 82, 94, 95, 634, 691], "7416575": [59, 82, 634, 691], "vector_to_skew_symmetric_matrix": [59, 82, 634], "_arraywithloss": [60, 99], "binary_cross_entropi": [60, 83, 635, 825], "from_logit": [60, 83, 635, 693, 790], "pos_weight": [60, 83, 635, 693], "crossentropi": [60, 83, 635, 693], "26765382": [60, 635, 693], "34657359": [60, 635, 694], "sparse_cross_entropi": [60, 83, 635], "07438118": [60, 83, 695], "11889165": [60, 695], "_arraywithmanipul": [61, 99], "x_min": [61, 84, 636, 696, 851], "x_max": [61, 84, 636, 696, 851], "before_1": [61, 84, 375, 481, 636, 698, 711], "after_1": [61, 84, 375, 481, 636, 698, 711], "before_n": [61, 84, 375, 481, 636, 698, 711], "after_n": [61, 84, 375, 481, 636, 698, 711], "repetit": [61, 84, 636, 702, 709, 844], "flat": [61, 71, 84, 380, 510, 573, 631, 636, 702], "allowzero": [61, 84, 636, 703], "remain": [61, 64, 77, 84, 87, 220, 237, 238, 244, 252, 253, 270, 273, 279, 281, 372, 396, 397, 398, 417, 629, 636, 638, 641, 703, 721, 744, 803, 816, 817, 825, 828, 830, 834, 842, 844, 852], "roll": [61, 84, 636, 833, 864], "shift": [61, 73, 84, 100, 133, 144, 229, 231, 325, 366, 626, 629, 636, 704, 816, 817, 827, 828, 833, 840, 864], "restor": [61, 84, 636, 704, 832], "num_or_size_split": [61, 71, 84, 636, 705, 846], "with_remaind": [61, 71, 84, 636, 705], "squeezabl": [61, 636, 706], "swapax": [61, 84, 636], "axis0": [61, 84, 636, 708], "swap_ax": [61, 708], "swap": [61, 84, 636, 708, 798, 861], "tile": [61, 78, 84, 544, 636], "unpack": [61, 84, 636, 710, 839, 841], "zero_pad": [61, 84, 636], "_arraywithnorm": [62, 99], "layer_norm": [62, 85, 639], "normalized_idx": [62, 85, 639, 734], "new_std": [62, 85, 639, 734, 792], "learnabl": [62, 85, 633, 637, 639, 658, 714, 734, 789, 792, 851], "deviat": [62, 63, 67, 85, 86, 90, 639, 640, 644, 734, 737, 761, 775, 788, 792, 820, 858], "0976": [62, 639, 734], "3452": [62, 639, 734], "2740": [62, 639, 734], "1047": [62, 639, 734], "5886": [62, 639, 734], "2732": [62, 639, 734], "7696": [62, 639, 734, 773], "7024": [62, 639, 734], "2518": [62, 639, 734], "826": [62, 639, 734], "178": [62, 639, 734], "981": [62, 639, 734], "831": [62, 639, 734], "421": [62, 639, 734], "_arraywithrandom": [63, 99], "multinomi": [63, 86, 379, 507, 640], "population_s": [63, 86, 640, 735], "num_sampl": [63, 86, 640, 735], "unnorm": [63, 86, 640, 735, 841], "popul": [63, 67, 71, 86, 90, 640, 644, 735, 761, 763, 826, 827, 837, 841, 846, 873], "draw": [63, 86, 379, 505, 507, 509, 640, 735, 737, 738, 773, 774, 775, 776, 781, 788, 815, 820, 839, 841], "half": [63, 86, 123, 284, 626, 629, 640, 736, 738, 813, 831, 844], "235": [63, 737], "float16": [63, 74, 86, 131, 154, 156, 157, 162, 164, 343, 369, 626, 627, 634, 691, 737, 738, 773, 774, 813, 826, 831, 838, 841], "807": [63, 737], "_arraywithsearch": [64, 99], "select_last_index": [64, 87, 641, 741, 742], "occurr": [64, 375, 384, 495, 517, 641, 642, 741, 742, 746], "argmin": [64, 87, 641, 864], "output_dtyp": [64, 87, 641, 742], "argwher": [64, 87, 641], "nonzero": [64, 87, 95, 218, 219, 220, 223, 226, 235, 237, 240, 242, 244, 270, 283, 288, 629, 641], "as_tupl": [64, 87, 641, 744], "fewer": [64, 87, 641, 744], "_arraywithset": [65, 99], "unique_al": [65, 88, 642], "by_valu": [65, 88, 642, 746], "inverse_indic": [65, 88, 375, 495, 642, 746, 748], "unique_count": [65, 88, 642], "unique_invers": [65, 88, 642], "unique_valu": [65, 88, 642], "admonit": [65, 749], "dask": [65, 642, 746, 747, 748, 749, 857], "difficult": [65, 642, 746, 747, 748, 749, 817, 820, 826, 841, 852], "omit": [65, 280, 629, 642, 746, 747, 748, 749, 833, 837, 838], "x_i": [65, 67, 76, 95, 217, 218, 219, 222, 223, 224, 226, 228, 233, 234, 235, 240, 242, 243, 250, 251, 252, 253, 254, 258, 259, 260, 261, 265, 272, 277, 280, 281, 282, 283, 284, 285, 287, 288, 290, 332, 333, 335, 356, 369, 629, 642, 644, 746, 747, 748, 749, 757, 758, 759, 761, 762, 763, 788, 829], "x_j": [65, 642, 746, 747, 748, 749], "impli": [65, 642, 746, 747, 748, 749, 841], "typeerror": [65, 88, 642, 749, 848], "_arraywithsort": [66, 99], "stabil": [66, 89, 589, 590, 631, 643, 750, 753, 826, 836, 842, 844], "maintain": [66, 89, 643, 750, 753, 816, 817, 820, 832, 837, 839, 840, 841, 856, 866], "msort": [66, 89, 643], "searchsort": [66, 89, 643, 774], "side": [66, 89, 347, 369, 373, 443, 643, 752, 773, 789, 802, 803, 816, 817, 823], "sorter": [66, 89, 643, 752], "ret_dtyp": [66, 89, 643, 752], "_arraywithstatist": [67, 99], "cumprod": [67, 90, 644, 838, 851, 864], "cumsum": [67, 90, 644, 826, 864], "einsum": [67, 90, 644], "equat": [67, 77, 90, 311, 366, 373, 443, 634, 644, 683, 756, 773, 802, 825, 867], "operand": [67, 77, 81, 217, 218, 219, 220, 222, 223, 224, 225, 226, 233, 234, 235, 237, 238, 240, 242, 243, 244, 251, 252, 253, 258, 259, 260, 261, 262, 270, 273, 275, 279, 280, 281, 282, 283, 284, 287, 288, 290, 332, 333, 356, 360, 369, 370, 372, 415, 629, 634, 644, 682, 688, 756, 757, 759, 760, 762, 802, 803, 821, 824, 829, 838], "contract": [67, 634, 644, 686, 756, 803], "seq": [67, 644, 756, 773], "ii": [67, 90, 644, 756, 817], "jk": [67, 644, 756, 803], "ik": [67, 644, 756, 803], "126": [67, 107, 276, 623, 629, 634, 644, 676, 756], "510": [67, 644, 756], "special": [67, 82, 94, 95, 99, 100, 217, 218, 219, 220, 222, 223, 224, 225, 226, 233, 234, 235, 237, 238, 240, 242, 243, 244, 251, 252, 253, 258, 259, 260, 261, 262, 265, 270, 273, 275, 279, 280, 281, 282, 283, 284, 287, 288, 290, 332, 333, 356, 369, 629, 634, 644, 682, 688, 757, 758, 759, 760, 761, 762, 763, 773, 774, 775, 776, 781, 788, 815, 818, 820, 821, 823, 825, 828, 829, 830, 833, 837, 839, 840, 841, 842, 844, 867, 868, 869], "arithmet": [67, 90, 231, 237, 270, 629, 644, 758, 838], "propag": [67, 231, 332, 333, 369, 629, 644, 757, 758, 759, 761, 762, 763, 836], "04999995": [67, 758], "freedom": [67, 90, 644, 761, 763, 822], "constitut": [67, 90, 644, 761, 763, 834, 846, 868], "commonli": [67, 90, 644, 761, 763, 830, 834, 836], "81649661": [67, 644, 761], "6666665": [67, 763, 849], "667": [67, 78, 237, 538, 589, 629, 631, 763], "_arraywithutil": [68, 99], "logic": [68, 91, 201, 237, 238, 264, 265, 266, 270, 273, 628, 629, 645, 764, 765, 815, 821, 825, 826, 827, 830, 834, 835, 836, 837, 838, 840, 841, 844, 848, 861], "AND": [68, 91, 227, 238, 264, 629, 645, 764], "OR": [68, 91, 230, 266, 273, 629, 645, 765, 816, 817, 836], "_wrap_funct": [69, 92, 823, 834, 835], "function_nam": [69, 92, 815, 842], "new_funct": [69, 92, 823], "add_ivy_array_instance_method": 69, "cl": [69, 92], "moduletyp": [69, 92, 860, 861, 862], "toi": [69, 92], "arrayexampl": 69, "hasattr": [69, 92], "_containerwithactiv": [70, 100], "dict_in": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 100], "queue": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 100, 583, 606, 631, 843, 849], "queue_load_s": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 100], "container_combine_method": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 100], "list_join": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 100], "queue_timeout": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 100, 583, 606, 631, 843], "print_limit": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 100], "key_length_limit": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 100], "print_ind": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 100], "print_line_spac": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 100], "ivyh": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 100], "default_key_color": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 100], "keyword_color_dict": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 100], "rebuild_child_contain": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 100], "types_to_iteratively_nest": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 100], "alphabetical_kei": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 100], "dynamic_backend": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 99, 100, 790, 791, 822, 843], "build_cal": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 100], "containerbas": [70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 824], "_static_gelu": 70, "key_chain": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 107, 108, 109, 110, 111, 112, 113, 114, 115, 125, 126, 128, 130, 131, 133, 134, 135, 136, 137, 138, 140, 142, 143, 144, 146, 149, 150, 151, 152, 160, 162, 165, 168, 169, 170, 172, 174, 177, 211, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 248, 249, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 310, 311, 314, 315, 325, 326, 330, 331, 332, 333, 334, 335, 337, 339, 347, 348, 354, 356, 357, 358, 359, 360, 386, 387, 388, 389, 391, 392, 393, 395, 396, 397, 398, 399, 400, 408, 409, 410, 411, 415, 416, 419, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 433, 437, 438, 439, 440, 441, 442, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 459, 460, 461, 465, 466, 468, 477, 479, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 493, 495, 497, 498, 499, 500, 501, 502, 504, 506, 511, 512, 519, 520, 521, 522, 529, 531, 534, 535, 537, 538, 542, 543, 544, 545, 546, 549, 550, 553, 555, 557, 558, 559, 561, 562, 565, 573, 574, 588, 589, 590, 592, 594, 596, 597, 610, 616, 621, 647, 648, 649, 650, 651, 652, 655, 656, 657, 659, 660, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 682, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 735, 736, 737, 738, 740, 743, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765], "to_appli": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 107, 108, 109, 110, 111, 112, 113, 114, 115, 125, 126, 128, 130, 131, 133, 134, 135, 136, 137, 138, 140, 142, 143, 144, 146, 149, 150, 151, 152, 160, 162, 165, 168, 169, 170, 172, 174, 177, 211, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 248, 249, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 310, 311, 314, 315, 325, 326, 330, 331, 332, 333, 334, 335, 337, 339, 347, 348, 354, 356, 357, 358, 359, 360, 386, 387, 388, 389, 391, 392, 393, 395, 396, 397, 398, 399, 400, 408, 409, 410, 411, 415, 416, 419, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 433, 437, 438, 439, 440, 441, 442, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 459, 460, 461, 465, 466, 468, 477, 479, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 493, 495, 497, 498, 499, 500, 501, 502, 504, 506, 511, 512, 519, 520, 521, 522, 529, 531, 534, 535, 537, 538, 542, 543, 544, 545, 546, 549, 550, 553, 555, 557, 558, 559, 561, 562, 565, 573, 574, 588, 589, 590, 592, 594, 596, 597, 610, 616, 621, 638, 647, 648, 649, 650, 651, 652, 655, 656, 657, 659, 660, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 682, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 728, 735, 736, 737, 738, 740, 743, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765], "prune_unappli": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 107, 108, 109, 110, 111, 112, 113, 114, 115, 125, 126, 128, 130, 131, 133, 134, 135, 136, 137, 138, 140, 142, 143, 144, 146, 149, 150, 151, 152, 160, 162, 165, 168, 169, 170, 172, 174, 177, 211, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 248, 249, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 310, 311, 314, 315, 325, 326, 330, 331, 332, 333, 334, 335, 337, 339, 347, 348, 354, 356, 357, 358, 359, 360, 386, 387, 388, 389, 391, 392, 393, 395, 396, 397, 398, 399, 400, 408, 409, 410, 411, 415, 416, 419, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 433, 437, 439, 440, 441, 442, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 459, 460, 461, 465, 466, 468, 477, 479, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 493, 495, 497, 498, 499, 500, 501, 502, 504, 506, 511, 512, 519, 520, 521, 522, 529, 531, 534, 535, 537, 538, 542, 543, 544, 545, 546, 549, 550, 553, 555, 557, 558, 559, 561, 562, 565, 573, 574, 588, 589, 590, 592, 594, 596, 597, 610, 616, 621, 638, 647, 648, 649, 650, 651, 652, 655, 656, 657, 659, 660, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 682, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 728, 735, 736, 737, 738, 740, 743, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765], "map_sequ": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 107, 108, 109, 110, 111, 112, 113, 114, 115, 125, 126, 128, 130, 131, 133, 134, 135, 136, 137, 138, 140, 142, 143, 144, 146, 149, 150, 151, 152, 160, 162, 165, 168, 169, 170, 172, 174, 177, 211, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 248, 249, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 310, 311, 314, 315, 325, 326, 330, 331, 332, 333, 334, 335, 337, 339, 347, 348, 354, 356, 357, 358, 359, 360, 386, 387, 388, 389, 391, 392, 393, 395, 396, 397, 398, 399, 400, 408, 409, 410, 411, 415, 416, 419, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 433, 437, 439, 440, 441, 442, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 459, 460, 461, 465, 466, 468, 477, 479, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 493, 495, 497, 498, 499, 500, 501, 502, 504, 506, 511, 512, 519, 520, 521, 522, 529, 531, 534, 535, 537, 538, 542, 543, 544, 545, 546, 549, 550, 553, 555, 557, 558, 559, 561, 562, 565, 573, 574, 588, 589, 590, 592, 594, 596, 597, 610, 616, 621, 647, 648, 649, 650, 651, 652, 655, 656, 657, 659, 660, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 682, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 735, 736, 737, 738, 740, 743, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765], "prune": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 107, 108, 109, 110, 111, 112, 113, 114, 115, 131, 133, 138, 140, 146, 150, 152, 165, 169, 170, 177, 211, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 248, 249, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 300, 301, 302, 303, 304, 306, 307, 308, 310, 331, 332, 333, 334, 335, 337, 339, 347, 348, 354, 356, 358, 359, 360, 396, 397, 398, 416, 449, 450, 451, 452, 453, 454, 455, 456, 459, 460, 461, 465, 466, 487, 489, 490, 491, 493, 498, 500, 501, 502, 504, 506, 519, 520, 521, 522, 531, 534, 535, 537, 538, 542, 543, 544, 545, 546, 549, 550, 553, 555, 557, 558, 559, 561, 562, 565, 573, 574, 588, 589, 590, 592, 594, 596, 597, 610, 616, 621, 638, 647, 648, 649, 650, 656, 657, 663, 664, 665, 670, 671, 672, 673, 674, 675, 677, 679, 681, 682, 688, 693, 694, 695, 696, 700, 703, 704, 705, 706, 707, 710, 711, 728, 729, 730, 731, 735, 736, 737, 738, 740, 743, 746, 747, 748, 749, 750, 754, 755, 758, 760, 761, 763, 764, 765, 771, 774, 825], "static_gelu": 70, "046": 70, "_static_hardswish": 70, "_static_leaky_relu": 70, "static_leaky_relu": 70, "38999999": [70, 77, 109, 292, 293, 364], "_static_log_softmax": 70, "static_log_softmax": 70, "371": [70, 110], "_static_mish": 70, "static_mish": 70, "30883577": [70, 111, 623], "28903052": [70, 111, 623], "10714479": [70, 111, 623], "_static_relu": 70, "static_relu": 70, "_static_sigmoid": 70, "static_sigmoid": 70, "2689414": [70, 113, 114, 623], "7310586": [70, 113, 114, 623], "88079703": [70, 113, 623], "62245935": [70, 113], "4750208": [70, 113], "_static_softmax": 70, "static_softmax": 70, "72844321": [70, 114], "19852395": [70, 114], "07303288": [70, 114], "_static_softplu": 70, "revert": [70, 115, 623], "static_softplu": 70, "53499615": 70, "42036411": 70, "948": [70, 115, 638, 715], "166": [70, 107, 623], "dictionari": [71, 88, 100, 209, 598, 614, 628, 631, 632, 749, 768, 770, 803, 821, 825, 826, 834, 838, 839, 849, 852], "asynchron": [71, 100, 867], "wait": [71, 100, 583, 631, 809, 815, 817, 825, 838], "arriv": [71, 100, 583, 631, 844], "cont_list_join": [71, 100], "limit": [71, 100, 162, 165, 537, 538, 554, 627, 631, 636, 696, 773, 775, 776, 788, 795, 803, 809, 816, 817, 823, 825, 828, 830, 838, 841, 844, 849, 852, 866, 867, 868], "whitespac": [71, 100], "indent": [71, 100, 849], "newlin": [71, 100, 829], "termin": [71, 100, 816, 817, 824, 831, 832, 846, 849], "constructor": [71, 100, 533, 631, 770, 786, 794, 826, 827, 829, 848], "kept": [71, 100, 637, 712, 713, 817, 837, 842], "encount": [71, 100, 789, 813, 815, 826, 830, 831, 841], "node": [71, 78, 100, 535, 545, 592, 638, 725, 726, 788, 797, 823, 824, 838, 857, 860, 861, 868], "alphabet": [71, 100], "__setitem__": [71, 375, 489, 821, 824, 848], "_cont_at_key_chains_input_as_dict": 71, "current_chain": 71, "ignore_key_error": 71, "_cont_at_key_chains_input_as_seq": 71, "_cont_call_static_method_with_flexible_arg": 71, "static_method": 71, "kw": 71, "self_idx": 71, "_cont_concat_unifi": 71, "_cont_get_dev": 71, "_cont_get_dtyp": 71, "_cont_get_shap": 71, "_cont_ivi": 71, "_cont_mean_unifi": 71, "_1": 71, "_cont_prune_key_chains_input_as_dict": 71, "return_cont": 71, "_cont_prune_key_chains_input_as_seq": 71, "_cont_slice_kei": 71, "key_slic": 71, "_cont_sum_unifi": 71, "_get_queue_item": 71, "cont_all_fals": 71, "assert_is_bool": 71, "cont_all_key_chain": 71, "include_empti": 71, "cont_all_tru": [71, 824, 849], "cont_as_bool": 71, "cont_assert_contains_sub_contain": 71, "sub_cont": 71, "screen": [71, 815, 816, 849], "cont_assert_contains_sub_structur": 71, "check_shap": [71, 795], "cont_assert_ident": 71, "check_typ": 71, "same_arrai": [71, 849], "arrays_equ": 71, "cont_assert_identical_structur": 71, "assert_and_assign": 71, "congruent": 71, "cont_at_key_chain": 71, "ignore_non": 71, "cont_at_kei": 71, "substr": 71, "cont_combin": 71, "duplic": [71, 375, 486, 554, 631, 638, 717, 822, 829, 835, 836, 839, 850, 873], "configur": [71, 209, 628, 638, 728, 816, 817, 823, 825, 826, 831, 832], "container_rightmost": 71, "cont_common_key_chain": 71, "cont_config": 71, "cont_contains_sub_contain": 71, "cont_contains_sub_structur": 71, "cont_copi": [71, 849], "cont_create_if_abs": 71, "noth": [71, 844, 873], "cont_cutoff_at_depth": 71, "depth_cutoff": 71, "summari": [71, 166, 539, 627, 631, 816, 817, 841], "cont_cutoff_at_height": 71, "height_cutoff": 71, "cont_deep_copi": [71, 849, 860], "cont_dev": 71, "belong": [71, 815, 820, 850], "cont_dev_str": 71, "cont_diff": [71, 849], "diff_kei": 71, "detect_key_diff": 71, "detect_value_diff": 71, "detect_shape_diff": 71, "among": [71, 824, 825, 841, 844, 858, 867], "container0": 71, "cont_dtyp": 71, "cont_duplicate_array_keychain": 71, "cont_find_sub_contain": 71, "sub_cont_to_find": 71, "cont_find_sub_structur": 71, "sub_struc_to_find": 71, "cont_flatten_key_chain": [71, 849], "above_height": [71, 849], "below_depth": [71, 849], "cont_format_key_chain": 71, "format_fn": 71, "cont_from_disk_as_hdf5": [71, 849], "h5_obj_or_filepath": 71, "slice_obj": 71, "disk": [71, 791, 849, 866], "h5py": 71, "filepath": [71, 645, 766, 767, 817, 820], "cont_from_disk_as_json": [71, 849], "json_filepath": 71, "cont_from_disk_as_pickl": [71, 849], "pickle_filepath": 71, "cont_from_flat_list": 71, "flat_list": 71, "hierarchi": [71, 807, 815, 840, 849, 863, 873], "cont_handle_inplac": 71, "prime": [71, 826], "overwritten": [71, 821, 822], "cont_has_kei": 71, "query_kei": 71, "somewher": [71, 825], "cont_has_key_chain": 71, "cont_ident": [71, 849], "cont_identical_array_shap": 71, "cont_identical_config": 71, "cont_identical_structur": 71, "cont_if_exist": 71, "cont_inplace_upd": 71, "cont_ivi": 71, "cont_key_chains_contain": 71, "sub_str": 71, "cont_list_stack": [71, 849], "cont_load": 71, "cont_map": [71, 824, 849], "func": [71, 94, 210, 361, 362, 363, 371, 536, 611, 614, 615, 617, 622, 628, 631, 632, 638, 728, 770, 815, 820, 821, 828, 830, 836], "cont_map_sub_cont": 71, "include_self": 71, "possibli": [71, 594, 631, 773, 841, 852], "cont_max_depth": 71, "cont_multi_map": 71, "map_nest": 71, "assert_ident": 71, "leftmost": [71, 638, 728], "cont_multi_map_in_funct": 71, "cont_num_arrai": 71, "cont_overwrite_at_key_chain": 71, "target_dict": 71, "return_dict": 71, "cont_prune_empti": 71, "keep_non": 71, "cont_prune_key_chain": 71, "key1": [71, 809, 850], "key2": [71, 809], "key3": 71, "cont_prune_key_from_key_chain": 71, "certain": [71, 123, 134, 135, 374, 451, 626, 815, 816, 817, 820, 826, 834, 840, 841, 844, 852, 860, 861, 862, 871], "cont_prune_kei": 71, "cont_prune_keys_from_key_chain": 71, "cont_reduc": 71, "cont_remove_key_length_limit": 71, "cont_remove_print_limit": 71, "cont_reshape_lik": 71, "leading_shap": 71, "cont_restructur": 71, "keep_orig": 71, "old": [71, 816, 822, 837], "cont_restructure_key_chain": 71, "keychain_map": 71, "cont_sav": 71, "cont_set_at_key_chain": 71, "cont_set_at_kei": 71, "cont_shap": [71, 633, 651], "cont_show": 71, "cont_show_sub_contain": 71, "sub_cont_or_keychain": 71, "cont_size_ordered_arrai": 71, "keychain": [71, 77, 295, 334, 459, 460, 461, 490], "cont_slice_kei": 71, "all_depth": 71, "cont_slice_via_kei": 71, "slice_kei": 71, "cont_sort_by_kei": 71, "cont_structural_diff": 71, "cont_to_dict": 71, "cont_to_disk_as_hdf5": [71, 849], "starting_index": 71, "max_batch_s": 71, "cont_to_disk_as_json": [71, 849], "cont_to_disk_as_pickl": [71, 849], "cont_to_flat_list": 71, "cont_to_iter": [71, 824], "leaf_keys_onli": 71, "cont_to_iterator_kei": 71, "cont_to_iterator_valu": 71, "cont_to_json": 71, "cont_to_nested_list": 71, "cont_to_raw": 71, "cont_trim_kei": 71, "cont_try_kc": 71, "cont_unifi": 71, "concatten": [71, 210, 628], "cont_unstack_cont": 71, "dim_siz": 71, "cont_update_config": 71, "cont_with_default_key_color": 71, "cont_with_entries_as_list": 71, "cont_with_ivy_backend": 71, "ivy_backend": [71, 839], "cont_with_key_length_limit": [71, 849], "cont_with_print_ind": [71, 849], "cont_with_print_limit": [71, 849], "cont_with_print_line_spac": 71, "h5_file_s": 71, "shuffle_h5_fil": 71, "split_cont": 71, "_is_json": 71, "_repr": 71, "_containerwithconvers": [72, 100], "_static_to_ivi": 72, "_static_to_n": 72, "_containerwithcr": [73, 100], "_static_arang": 73, "_static_asarrai": 73, "_static_copy_arrai": 73, "_static_empti": 73, "_static_empty_lik": 73, "_static_ey": 73, "n_row": [73, 77, 129, 144, 325, 366, 373, 434, 626], "n_col": [73, 77, 129, 144, 325, 366, 626], "_static_from_dlpack": 73, "_static_ful": 73, "_static_full_lik": 73, "static_full_lik": 73, "2324": [73, 133, 626], "234": [73, 76, 133, 156, 239, 290, 626, 627, 629, 633, 657, 773], "_static_linspac": 73, "_static_logspac": 73, "static_logspac": 73, "15443469": [73, 135], "64158883": [73, 135], "_static_meshgrid": 73, "_static_native_arrai": 73, "_static_one_hot": 73, "static_one_hot": 73, "_static_on": 73, "_static_ones_lik": 73, "_static_tril": 73, "_static_triu": 73, "_static_zero": 73, "_static_zeros_lik": 73, "frombuff": [73, 626], "expos": [73, 131, 539, 626, 631, 809, 825, 846, 850, 856], "x00": [73, 131, 626], "xf0": [73, 131, 626], "x01": [73, 131, 626], "x02": [73, 131, 626], "x03": [73, 131, 626], "x04": [73, 131, 626], "x05": [73, 131], "5443469": [73, 135, 626], "static_frombuff": 73, "static_triu_indic": 73, "triu_indic": [73, 626], "_containerwithdatatyp": [74, 100], "_static_astyp": 74, "718": [74, 76, 149, 266, 627], "618": [74, 76, 149, 266, 627], "static_astyp": 74, "_static_broadcast_arrai": 74, "static_broadcast_arrai": 74, "_static_broadcast_to": 74, "static_broadcast_to": 74, "_static_can_cast": 74, "from_": [74, 152, 627], "static_can_cast": 74, "_static_default_complex_dtyp": 74, "complex_dtyp": [74, 155, 178, 627], "_static_default_float_dtyp": 74, "float_dtyp": [74, 157, 180, 627], "_static_dtyp": 74, "_static_finfo": 74, "inquir": [74, 162, 165], "static_finfo": 74, "55040e": [74, 162, 627], "7976931348623157e": [74, 162, 627], "308": [74, 162, 627, 773, 841], "_static_function_supported_dtyp": 74, "_static_function_unsupported_dtyp": 74, "_static_iinfo": 74, "1800": [74, 165, 627], "1084": 74, "40000": 74, "static_iinfo": 74, "2147483648": [74, 77, 165, 375, 489, 627], "2147483647": [74, 165, 627], "_static_is_bool_dtyp": 74, "dtype_in": [74, 147, 148, 161, 167, 168, 169, 170, 171, 172, 173, 174, 189, 627], "_static_is_complex_dtyp": 74, "is_complex_dtyp": [74, 627, 842], "roughli": [74, 816, 820, 870], "static_is_complex_dtyp": 74, "_static_is_float_dtyp": 74, "static_is_float_dtyp": 74, "_static_is_int_dtyp": 74, "_static_is_uint_dtyp": 74, "_static_result_typ": 74, "static_result_typ": 74, "broadcats": [74, 150], "_containerwithdevic": [75, 100], "_static_dev": 75, "static_dev": 75, "_static_to_devic": 75, "static_to_devic": 75, "contaion": [75, 194], "_containerwithelementwis": [76, 100], "_static_ab": 76, "static_ab": 76, "_static_aco": 76, "static_aco": 76, "_static_acosh": 76, "static_acosh": 76, "_static_add": 76, "static_add": [76, 104], "_static_asin": 76, "static_asin": 76, "524": [76, 222, 629], "412": [76, 81, 222, 629, 638, 715], "_static_asinh": 76, "static_asinh": 76, "_static_atan": 76, "static_atan": 76, "_static_atan2": 76, "static_atan2": 76, "915": [76, 225, 629], "983": [76, 225, 629], "978": [76, 225, 629], "696": [76, 86, 225, 629, 737], "993": [76, 225, 629], "_static_atanh": 76, "static_atanh": 76, "_static_bitwise_and": 76, "static_bitwise_and": 76, "_static_bitwise_invert": 76, "static_bitwise_invert": 76, "_static_bitwise_left_shift": 76, "_static_bitwise_or": 76, "static_bitwise_or": 76, "_static_bitwise_right_shift": 76, "static_bitwise_right_shift": 76, "_static_bitwise_xor": 76, "static_bitwise_xor": 76, "_static_ceil": 76, "static_ceil": 76, "_static_co": 76, "static_co": 76, "_static_cosh": 76, "static_cosh": 76, "_static_deg2rad": 76, "static_deg2rad": 76, "0262": [76, 236, 276, 629], "873": [76, 236, 276, 629], "_static_divid": 76, "static_divid": 76, "_static_equ": 76, "static_equ": 76, "_static_erf": 76, "static_erf": 76, "27632612": [76, 239], "934008": [76, 239, 629], "99999928": [76, 239], "91903949": [76, 239], "_static_exp": 76, "static_exp": 76, "59814835": [76, 240, 629], "4131622": [76, 240], "_static_expm1": 76, "thefunct": [76, 239], "areal": 76, "static_expm1": 76, "71828175": [76, 240, 629], "38905621": [76, 240, 629], "59815216": 76, "_static_floor": 76, "static_floor": 76, "_static_floor_divid": 76, "static_floor_divid": 76, "_static_great": 76, "static_great": 76, "_static_greater_equ": 76, "static_greater_equ": 76, "_static_isfinit": 76, "999999999999": [76, 251, 629], "static_isfinit": 76, "_static_isinf": 76, "static_isinf": 76, "_static_isnan": 76, "static_isnan": 76, "_static_isr": 76, "0j": [76, 77, 139, 140, 218, 219, 220, 223, 226, 235, 240, 242, 254, 258, 260, 277, 281, 283, 284, 288, 335, 369, 626, 629, 634, 682], "23j": [76, 77], "9j": [76, 77], "static_isr": 76, "_static_lcm": 76, "1080": [76, 255], "1550": [76, 255], "130": [76, 255], "_static_less": 76, "static_less": 76, "_static_less_equ": 76, "static_less_equ": 76, "_static_log": 76, "static_log": 76, "_static_log10": 76, "static_log10": 76, "898": [76, 259, 629], "0414": [76, 259, 629], "_static_log1p": 76, "static_log1p": 76, "_static_log2": 76, "static_log2": 76, "_static_logaddexp": 76, "static_logaddexp": 76, "_static_logical_and": 76, "static_logical_and": 76, "_static_logical_not": 76, "static_logical_not": 76, "_static_logical_or": 76, "static_logical_or": 76, "_static_logical_xor": 76, "static_logical_xor": 76, "_static_maximum": 76, "static_maximum": 76, "_static_minimum": 76, "static_minimum": 76, "_static_multipli": 76, "static_multipli": 76, "_static_neg": 76, "static_neg": 76, "_static_not_equ": 76, "static_not_equ": 76, "_static_posit": 76, "static_posit": 76, "_static_pow": 76, "static_pow": 76, "_static_rad2deg": 76, "static_rad2deg": 76, "5160": 76, "10300": [76, 276, 629], "15500": 76, "20600": 76, "2860": [76, 276], "_static_reciproc": 76, "recirpoc": [76, 278], "static_reciproc": 76, "_static_remaind": 76, "static_remaind": 76, "_static_round": 76, "thevfunct": 76, "527": [76, 280, 629], "static_round": 76, "301": [76, 280, 629], "_static_sign": 76, "static_sign": 76, "_static_sin": 76, "static_sin": 76, "757": [76, 282, 629], "959": [76, 242, 282, 629], "279": [76, 282, 372, 394, 404, 537, 629, 631], "_static_sinh": 76, "static_sinh": 76, "835": [76, 283], "347": [76, 283], "721": [76, 283], "_static_sqrt": 76, "static_sqrt": 76, "_static_squar": 76, "static_squar": 76, "_static_subtract": 76, "static_subtract": 76, "_static_tan": 76, "static_tan": 76, "_static_tanh": 76, "static_tanh": 76, "995": [76, 288, 629], "9999": 76, "_static_trapz": 76, "static_trapz": 76, "_static_trunc": 76, "static_trunc": 76, "_static_trunc_divid": 76, "75j": [76, 221, 250], "01317055": [76, 221], "05634501": [76, 221], "115": [76, 221, 276, 629], "3461759": [76, 221], "524111": [76, 221], "644": [76, 222, 629, 850], "305": [76, 81, 222, 629], "351": [76, 236, 276], "00613": [76, 236], "0154": [76, 236], "403": [76, 240], "428772": [76, 240], "649": [76, 242], "220": [76, 242], "865": [76, 242], "metho": [76, 249, 261], "imaginari": [76, 99, 109, 112, 115, 139, 140, 218, 219, 220, 235, 237, 238, 240, 242, 250, 270, 272, 273, 280, 283, 284, 288, 335, 369, 372, 373, 416, 427, 623, 626, 629, 641, 744, 828], "4j": [76, 250, 372, 416, 590, 629, 631], "7j": [76, 77, 254, 277, 335, 369, 629], "956": [76, 260], "08746284": [76, 263], "32192809": [76, 263], "nuner": [76, 270], "413": [76, 276], "335": [76, 77, 277, 335], "345j": [76, 77, 277, 335], "static_angl": 76, "static_exp2": 76, "static_fmin": 76, "static_gcd": 76, "static_imag": 76, "static_logaddexp2": 76, "static_nan_to_num": 76, "static_r": 76, "_containerwithactivationexperiment": [77, 100], "_static_celu": 77, "formlat": 77, "static_celu": 77, "_static_elu": 77, "static_elu": 77, "_static_hardshrink": 77, "hard": [77, 294, 817, 848, 867], "shrinkag": [77, 294, 304, 375, 488], "_static_hardsilu": 77, "20833333": [77, 295, 364], "29166666": [77, 295, 364], "66666669": [77, 100, 295, 364, 378, 504, 614, 632], "66666663": [77, 134, 295, 364, 626], "_static_hardtanh": 77, "3899": 77, "_static_scaled_tanh": 77, "931": 77, "71587813": 77, "88367474": 77, "00376701": [77, 301], "2285642": 77, "99999881": 77, "49999905": 77, "_static_silu": 77, "static_silu": 77, "27777028": [77, 303], "23947507": [77, 303], "0900332": [77, 303], "_static_softshrink": 77, "_static_tanhshrink": 77, "36634541": [77, 306], "02005103": [77, 306], "00262468": [77, 306], "_static_threshold": 77, "389999": [77, 296], "19722462": [77, 297], "84729779": [77, 297], "31326163": [77, 298], "46328258": [77, 298], "51301527": [77, 298], "79813886": [77, 298], "simplywrap": [77, 301], "54939651": [77, 301], "09999998": [77, 301, 612, 632], "09999999": [77, 301], "08336546": [77, 301], "0379949": [77, 301], "22856998": [77, 302], "42028043": [77, 302], "31868932": [77, 302], "static_logit": 77, "static_logsigmoid": 77, "34115386": 77, "64439666": 77, "24115384": 77, "55435526": 77, "07888974": 77, "00741899": 77, "26328245": 77, "00012302": 77, "static_prelu": 77, "static_relu6": 77, "static_selu": 77, "static_thresholded_relu": 77, "_containerwithconversionexperiment": [77, 100], "_containerwithcreationexperiment": [77, 100], "_static_trilu": 77, "blackman": [77, 309, 366], "00770143e": [77, 309], "49229857e": [77, 309], "hamming_window": [77, 366], "ham": [77, 311, 366], "4180": [77, 311], "8180": [77, 311], "hann_window": [77, 366], "hann": [77, 312, 366], "7500": [77, 312], "3455": [77, 312], "9045": [77, 312], "kaiser_bessel_derived_window": [77, 366], "suitabl": [77, 314, 315, 366, 643, 752, 775, 816, 817, 824, 842, 867], "spectral": [77, 314, 315, 366], "analysi": [77, 314, 315, 366, 867, 868], "kaiser": [77, 309, 314, 315, 366], "70710677": [77, 314, 502, 504], "18493208": [77, 314, 366], "9827513": [77, 314, 366], "kaiser_window": [77, 366], "static_kaiser_window": [77, 315], "2049": [77, 315], "8712": [77, 315], "0367": [77, 315, 366], "7753": [77, 315], "static_blackman_window": 77, "static_eye_lik": 77, "static_hamming_window": 77, "static_hann_window": 77, "static_hann": 77, "static_kaiser_bessel_derived_window": 77, "static_mel_weight_matrix": 77, "static_polyv": 77, "static_tril_indic": 77, "static_unsorted_segment_mean": 77, "static_unsorted_segment_min": 77, "static_unsorted_segment_sum": 77, "static_vorbis_window": 77, "vorbis_window": [77, 366], "vorbi": [77, 330, 366], "38268343": [77, 330, 634, 670], "92387953": [77, 330], "14943586": [77, 330, 366], "51644717": [77, 330], "85631905": [77, 330], "98877142": [77, 330], "tril_indic": [77, 366], "_containerwithdata_typeexperiment": [77, 100], "_containerwithdeviceexperiment": [77, 100], "_containerwithelementwiseexperiment": [77, 100], "0003": [77, 331, 634, 673, 773, 776], "0006": [77, 331, 359], "2345j": [77, 335], "5772": [77, 339], "9635": [77, 339], "4228": [77, 339], "9228": [77, 339], "57299206e": [77, 340, 341], "67773480e": [77, 340, 341], "20904985e": [77, 340, 341], "84270084": [77, 340, 341, 369], "99532223": [77, 340, 341], "99997795": [77, 340, 341], "mantissa": [77, 345, 369, 826], "frist": [77, 346, 369], "coord": [77, 346], "6055": [77, 347], "160": [77, 349], "10240": [77, 349], "60000038": [77, 350, 369, 634, 690], "0707": [77, 356, 369], "0579": [77, 356, 369], "static_allclos": 77, "static_amax": 77, "static_amin": 77, "static_binar": 77, "static_conj": 77, "static_copysign": 77, "static_count_nonzero": 77, "static_diff": 77, "static_digamma": 77, "57721537": 77, "96351004": 77, "static_erfc": 77, "15729921": 77, "00467773": [77, 340, 369], "static_erfinv": 77, "static_fix": 77, "static_float_pow": 77, "static_fmax": 77, "static_fmod": 77, "static_frexp": 77, "static_gradi": 77, "static_hypot": 77, "static_isclos": 77, "static_ldexp": 77, "static_lerp": 77, "90000057": [77, 350, 369], "70000076": [77, 350, 369], "55000019": [77, 350, 369], "05000019": [77, 350, 369], "static_modf": 77, "static_nansum": 77, "static_nextaft": 77, "static_signbit": 77, "static_sinc": 77, "636": 77, "090": 77, "070": 77, "057": 77, "static_sparsify_tensor": 77, "static_xlogi": 77, "static_zeta": 77, "0244": [77, 359], "_containerwithgeneralexperiment": [77, 100], "_static_reduc": 77, "static_reduc": 77, "_containerwithgradientsexperiment": [77, 100], "_containerwithimageexperiment": [77, 100], "_containerwithlayersexperiment": [77, 100], "_static_fft": 77, "static_fft": 77, "_static_sliding_window": 77, "673": [77, 394], "0507": [77, 394], "79711437": [77, 372, 394, 404], "94867325": [77, 372, 394, 404], "74089146": [77, 372, 394, 404], "25980937": [77, 372, 394, 404], "64958102": [77, 372, 394, 404], "2442648": [77, 372, 394, 404], "247306": [77, 406], "908323j": [77, 406], "494955": [77, 406], "90395j": [77, 406], "static_adaptive_avg_pool1d": 77, "static_adaptive_avg_pool2d": 77, "static_adaptive_max_pool2d": 77, "static_adaptive_max_pool3d": 77, "static_avg_pool1d": 77, "static_avg_pool2d": 77, "static_avg_pool3d": 77, "static_dct": 77, "253": [77, 283, 629], "515": [77, 640, 737], "467": 77, "static_dft": 77, "static_embed": 77, "static_idct": 77, "93732834": [77, 372, 394], "75048852": [77, 372, 394], "29723358": [77, 372, 404], "6950531": 77, "93914509": 77, "88008738": 77, "18951225": 77, "06697273": [77, 372, 404], "57439804": 77, "68861485": [77, 372, 404], "41308832": [77, 372, 404], "0700836": 77, "2449036": 77, "6711426": 77, "514": 77, "501709": 77, "4924011": 77, "static_ifft": 77, "static_ifftn": 77, "static_interpol": 77, "static_max_pool1d": 77, "static_max_pool2d": 77, "max_pool2dd": 77, "static_max_pool3d": 77, "static_max_unpool1d": 77, "static_rfft": 77, "static_rfftn": 77, "static_rnn": 77, "step_funct": [77, 372, 418], "initial_st": [77, 372, 418, 633, 658], "go_backward": [77, 372, 418], "unrol": [77, 372, 418, 633, 659, 846, 849], "input_length": [77, 372, 418], "zero_output_for_mask": [77, 372, 418], "return_all_output": [77, 372, 418], "rnn": [77, 372, 867], "tempor": [77, 372, 418], "state_s": [77, 372, 418], "while_loop": [77, 372, 418, 625], "otput": [77, 372, 418], "funciton": [77, 372, 418], "static_stft": 77, "_containerwithlinearalgebraexperiment": [77, 100], "933034": [77, 373, 423], "eigenvealu": [77, 426, 669], "xx": [77, 426, 428, 669], "37228107": [77, 426, 669], "3722816": [77, 426, 669], "8245648": [77, 426, 669], "41597357": [77, 426, 669], "56576747": [77, 426, 669], "9093767": [77, 426, 669], "56155": [77, 427], "82842": [77, 427], "450": [77, 433], "static_adjoint": 77, "static_batched_out": 77, "static_cond": 77, "static_diagflat": 77, "static_dot": 77, "static_eig": 77, "static_eigh_tridiagon": 77, "static_eigv": 77, "static_higher_order_mo": 77, "static_initialize_tuck": 77, "static_kron": 77, "kroneck": [77, 373, 432, 433], "static_make_svd_non_neg": 77, "static_matrix_exp": 77, "static_mode_dot": 77, "static_multi_dot": 77, "static_multi_mode_dot": 77, "static_partial_tuck": 77, "static_svd_flip": 77, "static_tensor_train": 77, "static_truncated_svd": 77, "static_tt_matrix_to_tensor": 77, "tt_matrix": [77, 373, 447], "output_tensor": [77, 97, 373, 447], "static_tuck": 77, "_containerwithlossesexperiment": [77, 100], "_static_hinge_embedding_loss": 77, "_static_huber_loss": 77, "static_huber_loss": 77, "0575": [77, 450], "_static_kl_div": 77, "_static_l1_loss": 77, "static_l1_loss": 77, "_static_log_poisson_loss": 77, "static_log_poisson_loss": 77, "_static_poisson_nll_loss": 77, "06446016": 77, "55611551": 77, "30244565": [77, 454], "_static_smooth_l1_loss": 77, "static_smooth_l1_loss": 77, "_static_soft_margin_loss": 77, "3890561": [77, 453], "413159": [77, 453], "06429195": [77, 454], "43333333": [77, 455], "10666666": [77, 455], "_containerwithmanipulationexperiment": [77, 100], "_static_fill_diagon": 77, "_static_put_along_axi": 77, "_static_tak": 77, "69999981": [77, 304, 364, 375, 465, 489], "_static_trim_zero": 77, "_static_unflatten": 77, "_static_unique_consecut": 77, "ary1": [77, 375, 459, 460, 461], "ary2": [77, 375, 459, 460, 461], "broadcast_shap": [77, 103, 375, 773, 775], "static_concat_from_sequ": [77, 466], "30192195": [77, 478], "static_as_strid": 77, "static_atleast_1d": 77, "static_atleast_2d": 77, "static_atleast_3d": 77, "static_broadcast_shap": 77, "static_column_stack": 77, "static_dsplit": 77, "static_dstack": 77, "static_expand": 77, "static_flatten": 77, "static_fliplr": 77, "static_flipud": 77, "static_fold": 77, "static_heavisid": 77, "static_hsplit": 77, "static_hstack": 77, "static_i0": 77, "static_matric": 77, "static_moveaxi": 77, "static_pad": 77, "static_partial_fold": 77, "static_partial_tensor_to_vec": 77, "static_partial_unfold": 77, "static_partial_vec_to_tensor": 77, "static_rot90": 77, "static_soft_threshold": 77, "static_take_along_axi": 77, "static_top_k": 77, "static_unfold": 77, "static_vsplit": 77, "static_vstack": 77, "_containerwithnormsexperiment": [77, 100], "16903085": [77, 502, 504], "50709254": [77, 502, 504], "84515423": [77, 502, 504], "44183609": [77, 502, 504], "56807494": [77, 502, 504], "69431382": [77, 502, 504], "static_batch_norm": 77, "static_group_norm": 77, "static_instance_norm": 77, "static_l1_norm": 77, "static_l2_norm": 77, "static_lp_norm": 77, "12500000": 77, "37500000": 77, "62500000": 77, "27500000": 77, "35000000": 77, "42500000": 77, "0000000": 77, "5000000": 77, "2500000": 77, "_containerwithrandomexperiment": [77, 100], "43643127": [77, 507], "32325703": [77, 507], "24031169": [77, 507], "34251311": [77, 507], "31692529": [77, 507], "3405616": [77, 507], "5319725": [77, 507], "22458365": [77, 507], "24344385": [77, 507], "26588406": [77, 507], "61075421": [77, 507], "12336174": [77, 507], "51142915": [77, 507], "25041268": [77, 507], "23815817": [77, 507], "64042903": [77, 507], "25763214": [77, 507], "10193883": [77, 507], "31624692": [77, 507], "46567987": [77, 507], "21807321": [77, 507], "37677699": [77, 507], "39914594": [77, 507], "22407707": [77, 507], "static_bernoulli": 77, "static_beta": 77, "static_dirichlet": 77, "static_gamma": 77, "static_poisson": 77, "_containerwithsearchingexperiment": [77, 100], "static_unravel_index": 77, "_containerwithsetexperiment": [77, 100], "_containerwithsortingexperiment": [77, 100], "invert_permut": [77, 382], "static_invert_permut": 77, "static_lexsort": [77, 89], "_containerwithstatisticalexperiment": [77, 100], "_static_cummax": 77, "static_cummax": 77, "_static_cummin": 77, "static_cummin": 77, "_static_nanmin": 77, "static_nanmin": 77, "func_nam": [77, 522, 815, 828, 829, 834, 838], "static_bincount": 77, "static_corrcoef": 77, "static_cov": [77, 384, 519], "static_histogram": 77, "static_igamma": 77, "static_lgamma": 77, "static_median": 77, "static_nanmean": 77, "static_nanmedian": 77, "static_nanprod": 77, "static_quantil": 77, "_containerwithutilityexperiment": [77, 100], "static_optional_get_el": 77, "_containerwithgener": [78, 100], "_static_all_equ": 78, "static_all_equ": 78, "_static_array_equ": 78, "a0": [78, 375, 465], "static_array_equ": 78, "_static_assert_supports_inplac": 78, "_static_clip_matrix_norm": 78, "static_clip_matrix_norm": 78, "849": [78, 537, 631], "_static_clip_vector_norm": 78, "static_clip_vector_norm": 78, "_static_einops_rearrang": 78, "static_einops_rearrang": 78, "_static_einops_reduc": 78, "static_einops_reduc": 78, "29333329": [78, 543, 631], "53000069": [78, 543, 631], "39666676": [78, 543, 631], "20666695": [78, 543, 631], "_static_einops_repeat": 78, "static_einops_repeat": 78, "_static_exist": 78, "_static_fourier_encod": 78, "static_fourier_encod": 78, "classivi": [78, 642, 747], "89858720e": 78, "79717439e": 78, "_static_gath": 78, "static_gath": 78, "_static_gather_nd": 78, "static_gather_nd": 78, "_static_get_num_dim": 78, "static_get_num_dim": 78, "_static_has_nan": 78, "leafwis": 78, "static_has_nan": 78, "_static_inplace_decr": 78, "_static_inplace_incr": 78, "_static_inplace_upd": 78, "_static_is_arrai": 78, "static_is_arrai": 78, "_static_is_ivy_arrai": 78, "static_is_ivy_arrai": 78, "_static_is_native_arrai": 78, "static_is_native_arrai": 78, "_static_scatter_flat": 78, "_static_scatter_nd": 78, "static_scatter_nd": 78, "_static_s": 78, "static_s": 78, "_static_stable_divid": 78, "22222222": 78, "11111111": 78, "857": [78, 589, 631], "444": 78, "_static_stable_pow": 78, "00012": [78, 590, 631], "00016": [78, 79, 590, 618, 631, 632], "00001": [78, 590, 631, 773], "00032": [78, 590], "00256": [78, 590], "1679638": [78, 590], "395": [78, 590], "16777383": [78, 590], "_static_supports_inplace_upd": 78, "_static_to_list": 78, "static_to_list": 78, "_static_to_numpi": 78, "static_to_numpi": 78, "_static_to_scalar": 78, "static_to_scalar": 78, "_static_value_is_nan": 78, "452": 78, "static_value_is_nan": 78, "833": [78, 538], "items": [78, 99, 631], "static_isin": 78, "static_items": 78, "static_strid": 78, "425": [78, 610], "_containerwithgradi": [79, 100], "_static_stop_gradi": 79, "static_stop_gradi": 79, "976": [79, 288, 612, 629, 632], "49e": [79, 612, 632], "74e": [79, 612, 632], "95e": [79, 612, 632], "024": [79, 612, 632], "096": [79, 612, 632], "216": [79, 82, 612, 632, 689], "626": [79, 612, 632], "wikipedia": [79, 612, 613, 632], "wiki": [79, 612, 613, 632], "stochastic_gradient_desc": [79, 612, 613, 632], "01099": [79, 613], "01003": [79, 613, 632], "01015": [79, 613, 632], "99936122": [79, 613, 632], "99936116": [79, 613, 632], "99936128": [79, 613, 632], "99936104": [79, 613, 632], "w_new": [79, 616, 632], "708": [79, 618, 632], "445": [79, 618, 632], "6e": [79, 618, 632], "00036": [79, 618, 632], "00049": [79, 618, 632], "layerwis": [79, 619, 632], "01132035": [79, 619, 632], "22264051": [79, 619, 632], "2056601": [79, 619, 632], "1324538": [79, 619, 632], "56490755": [79, 619, 632], "96622658": [79, 619, 632], "90848625": [79, 619, 632], "93616199": [79, 619, 632], "77232409": [79, 619, 632], "_containerwithimag": [80, 100], "_containerwithlay": [81, 100], "_static_conv1d": 81, "static_conv1d": 81, "_static_conv1d_transpos": 81, "static_conv1d_transpos": 81, "112": [81, 634, 644, 648, 679, 756], "_static_conv2d": 81, "ey": [81, 626, 633, 649, 655, 844, 851], "static_conv2d": 81, "_static_conv2d_transpos": 81, "static_conv2d_transpos": 81, "_static_conv3d": 81, "fdfh": [81, 651], "static_conv3d": 81, "_static_conv3d_transpos": 81, "static_conv3d_transpos": 81, "_static_depthwise_conv2d": 81, "inp": [81, 633, 655], "static_depthwise_conv2d": 81, "_static_dropout": 81, "static_dropout": 81, "_static_dropout1d": 81, "static_dropout1d": 81, "_static_dropout2d": 81, "_static_dropout3d": 81, "_static_linear": 81, "278": [81, 633, 656, 657], "static_linear": 81, "195": 81, "_static_lstm_upd": 81, "_static_multi_head_attent": 81, "_static_reduce_window": 81, "_static_scaled_dot_product_attent": 81, "static_scaled_dot_product_attent": 81, "39999962": [81, 633, 656, 657], "19999695": [81, 657], "11600018": [81, 657], "88399887": [81, 657], "196": [81, 633, 657], "306": [81, 633, 657], "19999981": [81, 294, 307, 364, 372, 416, 633, 656, 663], "59249449": [81, 633, 663], "68226194": [81, 633, 663], "19603825": [81, 633, 663], "9960382": [81, 633, 663], "26894283": [81, 633, 663], "40236187": [81, 633, 663], "39999437": [81, 633, 663], "59999037": [81, 633, 663], "35046196": [81, 633, 663], "54282808": [81, 633, 663], "39989519": [81, 633, 663], "5998764": [81, 633, 663], "_containerwithlinearalgebra": [82, 100], "_static_choleski": 82, "static_choleski": 82, "577": [82, 634, 664], "707": [82, 634, 664], "static_rol": [82, 84], "_static_cross": 82, "static_cross": 82, "_static_det": 82, "_static_diag": 82, "_static_diagon": 82, "static_diagon": 82, "_static_eigh": 82, "_static_eigvalsh": 82, "static_eigvalsh": 82, "51572949": [82, 634, 671], "17091519": [82, 634, 671], "3448143": [82, 634, 671], "35898387e": [82, 634, 671], "46410179e": [82, 634, 671], "_static_inn": 82, "static_inn": 82, "_static_inv": 82, "static_inv": 82, "_static_matmul": 82, "matul": 82, "static_matmul": 82, "_static_matrix_norm": 82, "deimens": 82, "static_matrix_norm": 82, "_static_matrix_pow": 82, "_static_matrix_rank": 82, "static_matrix_rank": 82, "_static_matrix_transpos": 82, "static_matrix_transpos": 82, "_static_out": 82, "n1": [82, 136, 626], "n2": [82, 136, 626], "static_out": [82, 679], "_static_pinv": 82, "static_pinv": 82, "0426": 82, "0964": 82, "0605": 82, "1368": 82, "_static_qr": 82, "static_qr": 82, "31622777": [82, 634, 681], "9486833": [82, 634, 681], "4472136": [82, 634, 681], "89442719": [82, 634, 681], "16227766": [82, 634, 681], "42718872": [82, 634, 681], "63245553": [82, 634, 681], "47213595": [82, 634, 681], "81377674": [82, 634, 681], "_static_slogdet": 82, "static_slogdet": 82, "6931472": 82, "0986123": 82, "_static_solv": 82, "_static_svd": 82, "static_svd": 82, "au": 82, "aS": 82, "avh": 82, "bvh": 82, "_static_svdv": 82, "_static_tensordot": 82, "_static_tensorsolv": 82, "_static_trac": 82, "static_trac": 82, "_static_vand": 82, "static_vand": 82, "343": [82, 280, 629, 689], "729": [82, 689, 850], "_static_vecdot": 82, "_static_vector_norm": 82, "static_vector_norm": 82, "77359247": [82, 691], "_static_vector_to_skew_symmetric_matrix": 82, "09861231": [82, 634, 682], "static_general_inner_product": 82, "3475602": [82, 684], "93765765": [82, 684], "58776021": [82, 684], "10416126": [82, 684], "80644298": [82, 684], "87024701": [82, 684], "48127627": [82, 684], "79101127": [82, 684], "98288572": [82, 684], "68917423": [82, 684], "_containerwithloss": [83, 100], "_static_binary_cross_entropi": 83, "static_binary_cross_entropi": 83, "511": 83, "223": 83, "357": 83, "_static_cross_entropi": 83, "static_cross_entropi": 83, "20397282": 83, "83258148": 83, "60943794": [83, 634, 682], "_static_sparse_cross_entropi": 83, "static_sparse_cross_entropi": 83, "36354783": [83, 635, 693], "14733934": [83, 635, 693], "17027519": [83, 694], "53647931": [83, 694], "53647929": [83, 695], "1702752": [83, 695], "_containerwithmanipul": [84, 100], "_static_clip": 84, "static_clip": 84, "_static_concat": 84, "_static_constant_pad": 84, "static_constant_pad": 84, "_static_expand_dim": 84, "static_expand_dim": 84, "container_axi": [84, 636, 699], "_static_flip": 84, "static_flip": 84, "_static_permute_dim": 84, "static_permute_dim": 84, "_static_repeat": 84, "static_repeat": 84, "_static_reshap": 84, "static_reshap": 84, "_static_rol": 84, "positivclip": 84, "_static_split": 84, "static_split": 84, "_static_squeez": 84, "static_squeez": 84, "_static_stack": 84, "leavv": 84, "static_stack": 84, "_static_swapax": 84, "_static_til": 84, "static_til": 84, "_static_unstack": 84, "static_unstack": 84, "_static_zero_pad": 84, "repreat": [84, 702], "_containerwithnorm": [85, 100], "34198591": [85, 639, 734], "04274819": [85, 639, 734], "29923761": [85, 639, 734], "24053511": [85, 639, 734], "62221265": [85, 734], "20277636": [85, 734], "41943574": [85, 734], "83710337": [85, 734], "_containerwithrandom": [86, 100], "_static_multinomi": 86, "_static_randint": 86, "static_randint": 86, "_static_random_norm": 86, "static_random_norm": 86, "651": 86, "_static_random_uniform": 86, "static_random_uniform": 86, "481": 86, "0999": 86, "_static_shuffl": 86, "static_shuffl": 86, "431": [86, 737], "274": [86, 737], "_containerwithsearch": [87, 100], "_static_argmax": 87, "static_argmax": 87, "_static_argmin": 87, "static_argmin": 87, "_static_argwher": 87, "static_argwher": 87, "_static_nonzero": 87, "_static_wher": 87, "static_wher": 87, "_containerwithset": [88, 100], "_static_unique_al": 88, "static_unique_al": 88, "_static_unique_count": 88, "static_unique_count": 88, "_static_unique_invers": 88, "static_unique_invers": 88, "_static_unique_valu": 88, "_containerwithsort": [89, 100], "_static_argsort": 89, "static_argsort": 89, "_static_searchsort": 89, "_static_sort": 89, "static_sort": 89, "static_msort": 89, "_containerwithstatist": [90, 100], "_static_cumprod": 90, "static_cumprod": 90, "_static_cumsum": 90, "static_cumsum": 90, "_static_min": 90, "_static_prod": 90, "static_prod": 90, "11000001": [90, 760], "23100001": [90, 760], "30800003": [90, 644, 760], "_static_sum": 90, "_static_var": 90, "static_var": 90, "12666667": [90, 644, 763], "11555555": [90, 644, 763], "rtype": [90, 756, 802], "respectv": [90, 761], "81649649": [90, 761], "94280904": [90, 761], "509902": [90, 644, 761], "2472192": [90, 761], "44948983": [90, 761], "41421354": [90, 761], "6666667": [90, 763], "_containerwithutil": [91, 100], "_static_al": 91, "static_al": 91, "_static_ani": 91, "static_ani": 91, "add_ivy_container_instance_method": 92, "containerexampl": 92, "factorized_tensor": [93, 94, 95, 96, 97, 98], "factorizedtensor": [93, 94, 95, 96, 97, 98], "matrix_or_tensor": 93, "to_unfold": [93, 94, 95, 96, 97, 98], "to_vec": [93, 94, 95, 96, 97, 98], "cp_tensor": [94, 95], "cptensor": [94, 95, 320, 366], "cp_copi": 94, "cp_flip_sign": 94, "s_i": [94, 95], "normalisation_weight": [94, 95], "normalised_factor": [94, 95], "cp_lstsq_grad": 94, "return_loss": 94, "nabla": 94, "mathcal": 94, "mathbf": 94, "factor_matric": 94, "cp_gradient": 94, "quantiti": 94, "cp_mode_dot": 94, "keep_dim": [94, 98], "cp_multi_mode_dot": 94, "cp_n_param": 94, "tensor_shap": [94, 96, 97, 98], "n_param": [94, 95, 96, 97, 98], "cp_norm": 94, "cp_to_tensor": 94, "khatria": 94, "rao": [94, 373, 432], "khatri": [94, 373, 432], "cp_normal": 94, "normalis": [94, 95], "u_1": [94, 95], "u_n": [94, 95], "v_1": [94, 95], "v_n": [94, 95], "v_k": [94, 95], "u_k": [94, 95], "absorb": [94, 95], "refold": [94, 375, 474, 485], "cp_to_unfold": 94, "ie": 94, "s_u_i": 94, "exploit": [94, 870], "khatri_rao": [94, 373], "cp_to_vec": 94, "ravel": [94, 844], "unfolding_dot_khatri_rao": 94, "mttkrp": 94, "validate_cp_rank": 94, "percent": [94, 97], "validate_cp_tensor": 94, "parafac2_tensor": 95, "parafac2tensor": [95, 321, 366], "apply_parafac2_project": 95, "evolv": [95, 856, 867], "b_i": 95, "ijk": [95, 803], "sum_r": 95, "a_": 95, "ir": [95, 865, 868, 873], "jr": 95, "kr": 95, "coupl": [95, 816, 821, 848, 850, 867], "factoris": 95, "i1": [95, 384, 522], "classmethod": [95, 102, 103, 778], "from_cptensor": 95, "parafac2_tensor_ok": 95, "parafac2_normalis": 95, "normalised_project": 95, "parafac2_to_slic": 95, "slice_idx": 95, "frontal": 95, "a_i": 95, "j_i": 95, "b_": 95, "reformul": 95, "p_i": 95, "orthogon": [95, 320, 324, 366, 373, 426, 442, 448, 634, 669, 670], "sum_": 95, "ijr": 95, "constraint": [95, 803, 825, 826, 836], "projection_matric": 95, "parafac2_to_tensor": 95, "construct": [95, 636, 709, 789, 792, 793, 794, 840, 846, 850, 851, 865, 867, 874], "uneven": 95, "parafac2_to_unfold": 95, "parafac2_to_vec": 95, "validate_parafac2_tensor": 95, "cp": [95, 320, 366, 817], "tr_tensor": 96, "trtensor": [96, 322, 366], "tr_n_param": 96, "tr_to_tensor": 96, "tr_to_unfold": 96, "tr_to_vec": 96, "validate_tr_rank": 96, "validate_tr_tensor": 96, "tt_tensor": 97, "_tt_n_param": 97, "mp": [97, 323, 366], "index_upd": 97, "pad_tt_rank": 97, "factor_list": 97, "n_pad": 97, "pad_boundari": 97, "ring": 97, "bond": 97, "padded_factor_list": 97, "tt_to_tensor": 97, "assembl": [97, 373, 447], "tt_to_unfold": 97, "reassembl": 97, "tt_to_vec": 97, "validate_tt_rank": 97, "constant_rank": 97, "allow_overparametr": 97, "proport": [97, 788], "realiz": [97, 867], "validate_tt_tensor": 97, "tucker_tensor": 98, "tucker_copi": 98, "tucker_mode_dot": [98, 874], "tucker_n_param": 98, "tucker_norm": 98, "tucker_to_tensor": 98, "skip_factor": 98, "transpose_factor": 98, "tucker_to_unfold": 98, "tucker_to_vec": 98, "validate_tucker_rank": 98, "fixed_mod": 98, "validate_tucker_tensor": 98, "_bisection_root_find": 98, "fun": [98, 363, 371, 611, 631, 638, 726, 825], "max_it": 98, "__abs__": [99, 100], "__add__": [99, 100, 821, 824, 828, 829, 833, 838, 839, 848], "__eq__": [99, 100], "__ge__": [99, 100], "__gt__": [99, 100, 844], "__le__": [99, 100], "__lt__": [99, 100], "__ne__": [99, 100], "__pow__": [99, 100, 848], "69678056": 99, "59876156": 99, "82660675": 99, "__radd__": [99, 100, 828, 829, 838], "__rrshift__": [99, 100], "__rshift__": [99, 100], "__rsub__": [99, 100], "__sub__": [99, 100, 821, 824, 828, 833, 848], "__truediv__": [99, 100, 821, 824, 828], "__xor__": [99, 100], "referenc": [99, 830, 837], "resid": [99, 103, 636, 699, 838, 846, 850], "mt": [99, 848], "hopefulli": [99, 100, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 785, 786, 788, 789, 791, 792, 793, 794, 813, 815, 816, 817, 819, 820, 821, 822, 823, 824, 825, 826, 827, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 841, 842, 844, 846, 847, 848, 849, 850, 851, 856, 857, 858], "overview": [99, 100, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 785, 786, 788, 789, 791, 792, 793, 794, 809, 823, 825, 839, 841, 845], "reach": [99, 100, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 785, 786, 788, 789, 791, 792, 793, 794, 813, 815, 816, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 841, 842, 844, 846, 847, 848, 849, 850, 851, 856, 857, 858, 866, 867], "eq": 100, "ge": 100, "le": 100, "ne": 100, "75979435": 100, "52153397": 100, "13532257": 100, "rshift": 100, "truediv": 100, "nested_arrai": [102, 103, 104, 823], "nestedarrai": 102, "nested_rank": [102, 103, 104], "inner_shap": [102, 103, 104], "nestedarraybas": [102, 103, 104], "from_row_length": 102, "row_length": 102, "from_row_split": 102, "row_split": 102, "ragged_map": 103, "ragged_multi_map": 103, "ragged_arrai": 103, "ragged_multi_map_in_funct": 103, "replace_ivy_arrai": 103, "unbind": 103, "nestedarrayelementwis": 104, "strictli": [109, 112, 115, 244, 623, 629, 833, 837], "24000001": [109, 623], "703": [110, 623], "683": [110, 623], "408": [110, 623], "313": [110, 623], "437": [110, 623], "40337825": [111, 623], "56114835": [111, 623], "20788449": [111, 623], "0768": [114, 623], "231": [114, 623], "\u03b2": [115, 623], "body_fn": [119, 120, 122, 625], "bodi": [119, 122, 625, 820, 841], "lst": [119, 625], "orelse_fn": [120, 625], "body1": [121, 625], "body2": [121, 625], "test_fn": [122, 625, 771, 809, 861, 862], "repeatedli": [122, 625, 638, 724, 825, 841], "ml_framework": [123, 626], "distanc": [123, 626], "adjac": [123, 626], "nestedsequ": [124, 125, 626], "typevar": [124, 125, 626], "supportsbufferprotocol": [124, 125, 626], "static_copy_arrai": [126, 626], "intdtyp": [129, 140, 146, 158, 169, 174, 181, 187, 626, 627], "pycapsul": [130, 141, 626], "interchang": [130, 141, 626, 636, 708], "plu": [131, 626], "x00b": [131, 626], "x00d": [131, 626], "x00e": [131, 626], "41588834": [135, 626], "7827941": [135, 626], "6227766": [135, 626], "23413252": [135, 626], "n3": [136, 626], "xv": [136, 626], "yv": [136, 626], "x_nativ": [137, 626, 837], "y_nativ": [137, 626], "z_nativ": [137, 626], "d_type": [139, 626], "col": [144, 325, 366, 626], "primari": [144, 163, 164, 196, 197, 325, 366, 382, 512, 547, 548, 626, 627, 628, 631, 774, 776, 815, 819, 822, 826, 835, 837, 838, 840, 841, 844, 852, 854], "upward": [144, 325, 366, 626], "downward": [144, 325, 366, 626], "2xn": [144, 325, 366, 626], "subarrai": [144, 325, 366, 626], "incompat": [151, 627], "closest": [154, 233, 243, 244, 280, 290, 627, 629, 841, 844], "xtype": [154, 627], "ytype": [154, 627], "native_uint16": [154, 627], "complexdtyp": [155, 169, 178, 627], "set_default_complex_dtyp": [155, 184, 627], "4294": [155, 157, 627], "967346": [155, 157, 627], "set_default_dtyp": [156, 185, 627, 826, 834], "floatdtyp": [157, 180, 627], "set_default_float_dtyp": [157, 166, 178, 186, 627, 826], "int_dtyp": [158, 181, 627], "set_default_int_dtyp": [158, 166, 187, 627, 826], "4294967346": [158, 159, 627], "uint_dtyp": [159, 182, 627], "uint": [159, 174, 182, 188, 627, 826, 839], "uintdtyp": [159, 174, 182, 188, 627], "set_default_uint_dtyp": [159, 166, 188, 627], "native_bool": [161, 627], "ieee": [162, 220, 237, 242, 260, 270, 279, 284, 287, 624, 627, 629, 857], "754": [162, 220, 237, 242, 260, 270, 279, 284, 287, 624, 627, 629, 857], "smallest_norm": [162, 627], "bfloat16": [163, 627, 773, 774, 826, 838, 841, 842], "unsupport": [164, 197, 548, 627, 628, 631, 768, 771, 813, 816, 831, 838], "encapsul": [165, 627, 825], "314": [165, 277, 335, 369, 627, 629], "9223372036854775808": [165, 627], "9223372036854775807": [165, 627], "65535": [165, 627], "4294967295": [165, 627], "native_uint8": [167, 627], "hashabl": [171, 627], "type1": [175, 627], "type2": [175, 627], "array_api_promot": [175, 176, 627, 773, 774], "unexpect": [176, 244, 627, 629, 826], "default_complex_dtyp": [178, 627], "default_dtype_stack": [179, 185, 627], "unset_default_dtyp": [179, 627], "native_uint64": [179, 627], "default_float_dtyp": [180, 627, 826], "default_int_dtyp": [181, 187, 627, 826], "default_uint_dtyp": [182, 188, 627], "ret1": [183, 627], "ret2": [183, 627], "reset": [184, 185, 186, 187, 188, 214, 215, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 627, 628, 631, 827], "default_complex_dtype_stack": [184, 627], "default_float_dtype_stack": [186, 627], "native_float16": [189, 627], "unmodifi": [191, 628, 822, 826], "aliv": [198, 203, 205, 551, 571, 572, 628, 631, 827], "139740789224448": [198, 628], "physic": [201, 628], "process_specif": [204, 216, 628], "percentag": [204, 628], "ram": [204, 212, 216, 628], "alon": [204, 216, 628, 809, 832, 841], "036902561555": [204, 628], "7024003467681645": [204, 628], "as_native_dev": [204, 628], "7095597456708771": [204, 628], "attr_onli": [205, 628], "soft_device_mod": [207, 215, 628], "chunk": [208, 209, 210, 628], "split_factor": [208, 628, 830], "max_chunk_s": [210, 628], "chunk_siz": [210, 628], "input_ax": [210, 628], "output_ax": [210, 628], "fed": [210, 628, 850], "fist": [210, 628], "gb": [212, 216, 628, 816, 831], "66700032": [212, 628], "589934592": [212, 628], "219563008": [216, 628], "902400346": [216, 628], "525205504": [216, 628], "na": [217, 629, 841], "noqa": [217, 284, 629, 789, 798, 839], "princip": [218, 222, 224, 356, 369, 629], "domain": [218, 219, 222, 223, 224, 225, 234, 235, 240, 242, 258, 259, 261, 282, 283, 284, 287, 288, 356, 369, 629, 829, 865, 867], "codomain": [218, 219, 222, 223, 224, 225, 234, 235, 240, 242, 258, 259, 261, 282, 283, 284, 287, 288, 356, 369, 629, 829], "\u03c0": [218, 222, 224, 225, 624, 629], "3\u03c0": [218, 225, 629], "unspecifi": [218, 219, 223, 226, 235, 240, 242, 244, 279, 283, 284, 288, 373, 426, 629, 634, 636, 669, 670, 707, 837], "\u03c0j": [219, 223, 226, 258, 260, 629], "3\u03c0j": [219, 258, 260, 629], "x1_i": [220, 225, 227, 229, 230, 231, 232, 237, 238, 244, 248, 249, 256, 257, 262, 264, 266, 267, 270, 273, 275, 279, 286, 629, 820], "2019": [220, 237, 242, 260, 270, 629, 867, 870], "overflow": [220, 237, 244, 629, 634, 644, 682, 762, 814, 826], "commut": [220, 629], "tabl": [220, 237, 270, 582, 605, 629, 631, 773, 774, 789, 838, 843, 867], "dj": [220, 237, 270, 629], "bj": [220, 237, 270, 335, 369, 629], "z1": [220, 629], "z2": [220, 629], "yj": [221, 629], "nanj": [223, 629], "809": [223, 629], "569": [223, 629], "733": [223, 629], "notat": [225, 629, 644, 756, 825], "denot": [225, 629, 791], "quadrant": [225, 629], "rai": [225, 629, 857], "bitwis": [227, 230, 232, 267, 629], "170": [231, 629], "243": [231, 629], "xor": [232, 267, 629], "654": [234, 629], "ci": [235, 240, 242, 283, 629, 820, 826, 832, 839, 841, 852], "368": [235, 629], "670": [235, 629], "202": [235, 629, 820], "548": [235, 629], "1490": [235, 629], "57079633": [236, 629], "14159265": [236, 629], "71238898": [236, 629], "28318531": [236, 629], "02617994": [236, 629], "87266463": [236, 629], "01919862": [236, 629], "03839725": [236, 629], "05759586": [236, 629], "07679449": [236, 629], "09599311": [236, 629], "11519173": [236, 629], "35081118": [236, 629], "88139129": [236, 629], "underflow": [237, 244, 629, 634, 682, 826], "textbook": [237, 270, 629], "frac": [237, 259, 261, 281, 283, 287, 372, 378, 400, 401, 405, 406, 498, 500, 629], "ac": [237, 270, 629, 802, 803], "bd": [237, 270, 629], "bc": [237, 270, 629, 802, 803], "versu": [237, 270, 629], "riemann": [237, 270, 629], "sphere": [237, 270, 629], "c99": [237, 270, 629], "infinit": [237, 270, 284, 629], "unlik": [237, 270, 629, 820, 825, 828, 857, 872, 874], "698": [237, 629], "truth": [238, 248, 249, 256, 257, 273, 374, 450, 629, 768, 770, 781, 813, 831, 838, 841], "32862675": [239, 629], "67780113": [239, 629], "11246294": [239, 629], "42839241": [239, 629], "52050018": [239, 629], "16799599": [239, 629], "30787992": [239, 629], "43796915": [239, 629], "98667163": [239, 629], "79690808": [239, 629], "88020504": [239, 629], "91031402": [239, 629], "95228523": [239, 629], "96610528": [239, 629], "cut": [240, 242, 282, 283, 284, 287, 629, 856, 873], "08553692": [240, 629], "567": [240, 629], "00344786": [240, 629], "76297021": [240, 629], "197948": [240, 629], "53253174": [240, 629], "accur": [242, 260, 629, 634, 682, 835], "fdlibm": [242, 260, 629], "compliant": [242, 260, 265, 266, 332, 333, 369, 629, 644, 757, 758, 759, 761], "potenti": [242, 260, 629, 809, 815, 816, 825, 826, 838, 845, 870], "632": [242, 629], "20e": [242, 629], "72e": [242, 629, 773], "greatest": [243, 244, 247, 629], "pep": [244, 629, 833], "disambigu": [244, 629, 836], "former": [244, 629, 816, 826, 829, 838], "latter": [244, 629, 816, 820, 822, 826, 829, 838], "overload": [244, 629, 841], "led": [244, 629, 820, 869], "subtl": [244, 629, 826, 873], "bug": [244, 629, 809, 815, 817, 823, 831, 832, 838, 841, 853], "ambigu": [244, 629], "semant": [244, 279, 375, 489, 629, 826, 846, 851, 856, 868], "ill": [244, 629, 775], "surpris": [244, 629, 852], "arrau": [250, 629], "log_": [259, 261, 629], "742": [260, 629], "negat": [272, 335, 369, 629], "52095687": [275, 629], "92457771": [275, 629], "49372482": [275, 629], "22738838": [275, 629], "156": [275, 629, 773], "5877228": [275, 629], "189": [276, 629, 638, 715], "252": [276, 629], "378": [276, 629], "1150": [276, 629], "2890": [276, 629], "172": [276, 629], "487": [276, 629, 633, 657], "344": [276, 629], "355j": [277, 335, 369, 629], "55j": [277, 335, 369, 629], "primarili": [279, 629, 815, 824, 867], "reason": [279, 288, 629, 815, 817, 820, 821, 824, 825, 826, 828, 834, 837, 838, 841, 842, 844, 846, 848, 857, 873], "counterpart": [280, 629, 824, 835], "deliber": [280, 629, 844], "imprecis": [280, 629], "5654": [280, 629], "034": [280, 629], "433": [280, 615, 617, 629, 632], "signum": [281, 629], "textrm": [281, 629], "932": [282, 629], "746": [282, 629], "657": [282, 629], "indistinguish": [284, 629], "convent": [284, 629, 634, 644, 674, 756, 817, 822, 833, 842, 856, 873], "infti": [284, 629], "32455532": [284, 629], "89897949": [284, 629], "169": [284, 629], "analyt": [287, 629, 867, 869, 873], "pole": [287, 629], "546": [287, 629, 633, 657], "916": [287, 629], "996": [287, 629], "histor": [288, 629], "stem": [288, 629, 837], "older": [288, 629], "advis": [288, 629, 838], "462": [288, 629], "604": [288, 629], "984": [288, 629], "997": [288, 629], "0375": [290, 629], "032": [290, 629], "57258511": [293, 364], "69999999": [293, 364, 622, 632], "90928203": [293, 364], "98772264": [293, 364], "99591321": [293, 364], "99863964": [293, 364], "69880581": [293, 364], "18126924": [293, 364], "79999995": [294, 304, 307, 364], "70000005": [294, 307, 364], "1241": [295, 364], "4897": [295, 364], "4090": [295, 364], "31008321": [295, 364], "1147176": [295, 364], "40899992": [295, 364], "20141329": [298, 364], "40318608": [298, 364], "48683619": [298, 364], "46328247": [298, 364], "59813893": [298, 364], "43748799": [298, 364], "parametr": [299, 364, 820, 841, 867], "71589994": [301, 305, 364], "14324772": [301, 305, 364], "70648694": [301, 305, 364], "54488957": [301, 305, 364], "10740992": [301, 305, 364], "19514863": [301, 305, 364], "6705687": [302, 364], "52016652": [302, 364], "40560818": [302, 364], "45630932": [302, 364], "2689": [303, 364], "7310": [303, 364], "7615": [303, 364], "2784": [303, 364], "7168": [303, 364], "8708": [303, 364], "4374": [303, 364], "1379": [303, 364], "0089": [303, 364], "59999991": [304, 364], "03597236": [306, 364], "43827677": [306, 364], "80100036": [306, 364], "12954807": [306, 364], "76459098": [306, 364], "20044947": [306, 364], "60000372": [306, 364], "taper": [309, 312, 366], "summat": [309, 366, 644, 756, 802, 803], "leakag": [309, 366], "wors": [309, 366, 857], "y1": [310, 366], "0800": [311, 366], "3979": [311, 366], "9121": [311, 366], "5400": [311, 366], "han": [312, 366], "ith": [313, 366], "00726415": [314, 366], "9999736": [314, 366], "2773e": [315, 366], "0172e": [315, 366], "9294e": [315, 366], "4149": [315, 366], "9138": [315, 366], "5529": [315, 366], "multidimension": [317, 318, 366, 867], "normalise_factor": [320, 321, 366], "parafac2": [321, 366], "tr": [322, 366], "context": [322, 366, 570, 631, 815, 816, 817, 822, 826, 827, 828], "38268346": [330, 366], "38268352": [330, 366], "8563191": [330, 366], "14943568": [330, 366], "cn": [332, 333, 369], "zh": [332, 333, 369], "amax_cn": [332, 369], "sentinel": [332, 333, 369, 644, 757, 759], "amin_cn": [333, 369], "4769": [341, 369], "position": [343, 369], "triangl": [347, 369], "999999e": [348, 369], "65999985": [350, 369], "52000046": [350, 369], "1500001": [350, 369, 543, 631], "11259177": [351, 369], "3574118": [351, 369], "20097363": [351, 369], "suppli": [355, 369, 375, 481, 802, 821, 823, 841], "217234": [356, 369], "hurwitz": [359, 369], "custom_grad_func": [361, 371], "bind": [361, 371, 815, 836, 866, 867], "upstream": [361, 371, 816, 817, 820, 831, 836], "primal": [362, 363, 371], "jacobian": [362, 363, 371, 617, 632, 852, 867], "cotang": [363, 371], "stanh": 364, "ndenumer": 366, "ndindex": 366, "random_cp": 366, "random_parafac2": 366, "random_tr": 366, "random_tt": 366, "random_tuck": 366, "bind_custom_gradient_funct": [371, 836], "jvp": 371, "vjp": 371, "h_out": [372, 389, 633, 658], "w_out": [372, 389], "area_interpol": 372, "01823380e": [372, 394, 404], "15385818e": [372, 394, 404], "36371466e": [372, 394, 404], "38763905e": [372, 394, 404], "60722279e": [372, 394, 404], "80319249e": [372, 394, 404], "05617893e": [372, 394, 404], "21500000e": [372, 394, 404], "24000015e": [372, 394, 404], "90734863e": [372, 394, 404], "10000420e": [372, 394, 404], "15899994e": [372, 394, 404], "24000053e": [372, 394, 404], "81469727e": [372, 394, 404], "09999847e": [372, 394, 404], "4135742": [372, 394, 404], "6779785": [372, 394, 404], "3770599": [372, 394, 404], "8719864": [372, 394, 404], "72109985": [372, 394, 404], "52869415": [372, 394, 404], "79182434": [372, 394, 404], "72489166": [372, 394, 404], "container_n": [372, 394, 404], "container_typ": [372, 394, 404, 631], "container_norm": [372, 394, 404], "1580677": [372, 394], "89422607": [372, 394], "86190414": [372, 394], "00041008": [372, 394], "75149155": [372, 394], "97056389": [372, 394], "87819386": [372, 394], "89381361": [372, 394], "50000000e": [372, 394, 404, 773], "22044605e": [372, 394, 404], "ed": [372, 396, 397, 398], "rest": [372, 375, 396, 397, 398, 467, 816, 823, 825, 841, 851, 869], "5d": [372, 398, 789], "emb": [372, 399], "51285338": [372, 399], "87183261": [372, 399], "2308116": [372, 399], "02733949e": [372, 400], "00j": [372, 400], "49660576e": [372, 400], "68178638e": [372, 400], "01j": [372, 400, 405], "98912367e": [372, 400], "21802426e": [372, 400, 405], "04549134e": [372, 400, 405], "82842712e": [372, 400, 405], "86902654e": [372, 400, 405], "25501143e": [372, 400, 405], "32978028e": [372, 400, 405], "52068201e": [372, 400, 405], "71158374e": [372, 400, 405], "generate_einsum_equ": 372, "get_interpolate_kernel": 372, "27279224e": [372, 404], "44232273e": [372, 404], "70464332e": [372, 404], "73454881e": [372, 404], "00902849e": [372, 404], "10039906e": [372, 404], "07022366e": [372, 404], "69506073": [372, 404], "93914604": [372, 404], "88008881": [372, 404], "18951607": [372, 404], "57439613": [372, 404], "15318303e": [372, 405], "15148591e": [372, 405], "19j": [372, 405], "25000000e": [372, 405], "35378602e": [372, 405], "02j": [372, 405], "65404249e": [372, 405], "17611649e": [372, 405], "24320230e": [372, 405], "79344813e": [372, 405], "22374531e": [372, 405], "45929364e": [372, 405], "14208718e": [372, 405], "07177031e": [372, 405], "indexerror": [372, 406, 417, 636, 699, 804, 830], "interp": [372, 844], "xp": [372, 407, 820], "fp": [372, 407], "nd": [372, 408], "tf_bicub": [372, 408, 844], "nearest_interpol": 372, "window_shap": [372, 414], "pool_typ": [372, 414], "irfft": [372, 416], "silent": [372, 416], "discard": [372, 416, 825], "1400001": [372, 416], "3999999": [372, 416], "3999996": [372, 416], "99038106j": [372, 417], "33012702": [372, 417], "23205081j": [372, 417], "33012702j": [372, 417], "superdiagon": [373, 424, 634, 667], "subdiagon": [373, 424, 634, 667], "eigendecomposit": [373, 426, 634, 669, 670], "qlq\u1d40": [373, 426, 634, 669, 670], "tridiagon": [373, 427], "38196602": [373, 427], "61803389": [373, 427], "35048741": [373, 427], "56710052": [373, 427], "06693714": [373, 427], "74234426": [373, 427], "56155282": [373, 427], "56155276": [373, 427], "82842714": [373, 427], "82842731": [373, 427, 634, 670], "necessarili": [373, 428, 821, 824], "generalis": [373, 429], "skip_matrix": [373, 432, 434], "khatri_rao_product": [373, 432], "kronecker_product": [373, 434], "n_column": [373, 434], "lu_factor": 373, "pivot": [373, 435], "lu": [373, 435, 436], "lu_solv": 373, "nnmf": [373, 437], "hoi": [373, 442, 448], "solve_triangular": 373, "unit_diagon": [373, 443], "solut": [373, 443, 634, 683, 773, 809, 813, 815, 816, 817, 824, 826, 831, 839, 841, 844, 865, 869], "determinist": [373, 444, 841], "borrow": [373, 444, 819], "extmath": [373, 444], "ivan": [373, 445], "oseledet": [373, 445], "scientif": [373, 445, 867], "2295": [373, 445], "2317": [373, 445], "2011": [373, 445], "convention": [374, 451, 870], "explicit": [374, 375, 451, 489, 816, 824, 826, 836, 837, 838, 846, 852, 867], "555969": [374, 451], "223876": [374, 451], "111938": [374, 451], "42649534": [374, 451], "68651628": [374, 451], "51119184": [374, 451], "59967244": [374, 451], "mae": [374, 452], "666": [374, 452, 633, 634, 657, 675], "91097307": [374, 454], "3467": [374, 455], "0133": [374, 455], "0250": [374, 455], "0056": [374, 455], "0025": [374, 455], "0675": [374, 455], "6987": [374, 456], "1606": [374, 456], "3711": [374, 456], "4032": [374, 456], "6931": [374, 456], "whilst": [375, 459, 460, 461, 851, 854, 867], "ary3": [375, 461], "check_scalar": 375, "force_integ": [375, 463], "force_posit": [375, 463], "mod": [375, 464, 820], "tall": [375, 470], "appear": [375, 472, 473, 611, 631, 816, 817, 820, 838, 844, 860], "horizot": [375, 477], "shortcut": [375, 481, 816], "linear_ramp": [375, 481], "reflect": [375, 481, 817, 821, 837, 841], "ramp": [375, 481], "mirror": [375, 481, 812, 815, 867], "padding_func": [375, 481], "iaxis_pad_width": [375, 481], "iaxi": [375, 481], "unalt": [375, 481], "put": [375, 486, 809, 815, 841, 852, 873], "mul": [375, 486, 837, 848], "conceptu": [375, 489, 863, 868], "concern": [375, 489, 817, 819, 824, 826, 828, 837, 844, 845, 873], "regard": [375, 489, 814, 824, 838, 839, 844, 857], "mutat": [375, 489], "elimin": [375, 495, 816], "consecut": [375, 495], "batch_mean": [378, 498, 500], "batch_var": [378, 498, 500], "running_vari": [378, 498, 500], "local_response_norm": 378, "neighbour": [378, 503], "42857143": [378, 504], "5714286": [378, 504], "multivari": [379, 507], "bayesian": [379, 507], "supposedli": [382, 511], "indirect": [382, 512], "secondari": [382, 512], "is_ivy_sparse_arrai": 383, "is_native_sparse_arrai": 383, "native_sparse_arrai": 383, "coo_indic": [383, 515], "crow_indic": [383, 515], "col_indic": [383, 515], "ccol_indic": [383, 515], "row_indic": [383, 515], "dense_shap": [383, 515], "native_sparse_array_to_indices_values_and_shap": 383, "nativesparsearrai": 383, "sparsearrai": 383, "linalg": [384, 519, 634, 682, 683, 815, 837, 839], "aw": [384, 519, 857], "48447205": [384, 519], "c0": [384, 522], "ck": [384, 522], "c2": [384, 522], "nearest_jax": [384, 529], "trace_on_next_step": [533, 631, 793, 850], "recalcul": [536, 631], "my_sum": [536, 631], "val1": [536, 631], "val2": [536, 631], "cached_sum": [536, 631], "line_eq": [536, 631], "slp": [536, 631], "itc": [536, 631], "cached_line_eq": [536, 631], "0353": [537, 631], "424": [537, 631], "176": [537, 631], "339": [537, 631], "271": [537, 631], "391": [537, 631], "78885436": [538, 631], "41666666": [538, 631], "58333331": [538, 631], "06666667": [538, 631], "13333334": [538, 631], "40000004": [538, 631], "26666668": [538, 631], "13137734": [538, 631], "26275468": [538, 631], "39413199": [538, 631], "52550936": [538, 631], "6568867": [538, 631], "78826398": [538, 631], "84852815": [538, 631], "1313709": [538, 631], "41421366": [538, 631], "27279221": [538, 631], "69705628": [538, 631], "12132034": [538, 631], "default_str": [541, 631], "46999979": [542, 631], "66000009": [542, 631], "93000001": [542, 631], "29000092": [542, 631], "33999991": [542, 631], "6400001": [542, 631], "96000004": [542, 631], "36000013": [542, 631], "51999998": [542, 631], "67000008": [542, 631], "suppos": [542, 631, 826, 841], "960": [542, 631], "3600": [542, 631], "h1": [542, 631], "w1": [542, 631], "40499985": [543, 631], "61000061": [543, 631], "max_depth": [554, 631], "seen_set": [554, 631], "local_set": [554, 631], "referr": [554, 631], "redund": [554, 631, 809, 826, 830, 838, 860], "example_funct": [554, 631], "repr": [554, 631], "ivyexcept": [559, 592, 631, 804, 827, 830, 835, 837, 838, 842], "allow_dupl": [569, 631], "fork": [570, 631, 810, 820, 825, 831], "forkserv": [570, 631], "mp_default": [570, 631], "defaultcontext": [570, 631], "0x7f4e3193e520": [570, 631], "mp_fork": [570, 631], "forkcontext": [570, 631], "0x7f4e3193e580": [570, 631], "mp_spawn": [570, 631], "spawncontext": [570, 631], "0x7f4e3193e5e0": [570, 631], "mp_forkserv": [570, 631], "forkservercontext": [570, 631], "0x7f4e3193e640": [570, 631], "garbag": [572, 631], "collector": [572, 631], "get_all_arrays_in_memori": [572, 631], "exception_trace_mod": [576, 600, 631, 843], "lenient": [577, 601, 631], "inplace_mod": [577, 601, 631], "break": [577, 631, 809, 822, 826, 833, 842, 852], "infus": [578, 631], "unset": [579, 586, 631, 634, 682, 798, 822, 846], "unset_min_bas": [579, 631], "nestable_mod": [581, 604, 631, 843], "precise_mod": [582, 605, 631, 843], "shape_array_mod": [584, 607, 631, 843], "show_func_wrapper_trace_mod": [585, 608, 631, 843], "tmp_dr": [586, 631], "tmp_dir": [586, 609, 631, 843], "my_tmp": [586, 631], "unset_tmp_dir": [586, 631], "49999999999975": [589, 631], "5015015015010504": [589, 631], "000444502911705e": [589, 631], "9999999999995j": [589, 631], "00000262": [590, 631], "15605032": [590, 631], "01208451j": [590, 631], "00048": [590, 631], "1296": [590, 631], "00864": [590, 631], "100000023841858": [594, 631], "200000047683716": [594, 631], "299999952316284": [594, 631], "400000095367432": [594, 631], "599999904632568": [594, 631], "hemant": [598, 631], "unset_shape_array_mod": [599, 631], "set_exception_trace_mod": [600, 631, 830], "set_min_bas": [602, 631], "set_min_denomin": [603, 631], "set_nestable_mod": [604, 631], "set_precise_mod": [605, 631], "set_queue_timeout": [606, 631], "set_shape_array_mod": [607, 631], "set_show_func_wrapper_trace_mod": [608, 631, 830], "set_tmp_dir": [609, 631], "my_dir": [609, 631], "451": [610, 631], "in_ax": [611, 631], "out_ax": [611, 631], "thereof": [611, 631], "summaris": [611, 631], "99999998": [612, 632], "19999998": [612, 632], "00000001": [612, 632], "00300001": [612, 632], "00800001": [612, 632], "0125": [612, 632], "17294501": [612, 632], "15770318": [612, 632], "20863818": [612, 632], "90000075": [613, 632], "90000164": [613, 632], "9000032": [613, 632], "50000012e": [613, 632], "92558754": [613, 632], "92558694": [613, 632], "92558682": [613, 632], "92558861": [613, 632], "60000025e": [613, 632], "01024": [613, 632], "retain_grad": [614, 632], "func_ret": [614, 632, 836], "666666": [614, 632], "333332": [614, 632], "66666675": [614, 622, 632], "argnum": [615, 632], "933": [615, 617, 632], "jac_fn": [617, 632], "639": [618, 632], "361": [618, 632], "52565837": [619, 632], "8418861": [619, 632], "68377209": [619, 632], "value_grad": [622, 632], "42333412": [622, 632], "5333333": [622, 632], "93333334": [622, 632], "43333334": [622, 632], "0666666": [622, 632], "softsign": 623, "718281828459045": 624, "euler": 624, "141592653589793": 624, "cmp_i": 625, "cmp_isnot": 625, "for_loop": 625, "if_els": 625, "try_except": 625, "to_dlpack": 626, "as_ivy_dtyp": [627, 838], "as_native_dtyp": 627, "check_float": 627, "closest_valid_dtyp": 627, "default_dtyp": [627, 826, 834], "dtype_bit": 627, "function_supported_dtyp": [627, 826, 841], "function_unsupported_dtyp": [627, 826], "infer_default_dtyp": 627, "invalid_dtyp": [627, 826], "is_hashable_dtyp": 627, "is_native_dtyp": 627, "promote_typ": [627, 826], "promote_types_of_input": [627, 826, 837], "type_promote_arrai": [627, 826], "unset_default_complex_dtyp": 627, "unset_default_float_dtyp": 627, "unset_default_int_dtyp": 627, "unset_default_uint_dtyp": 627, "valid_dtyp": 627, "defaultcomplexdtyp": 627, "defaultdtyp": 627, "defaultfloatdtyp": 627, "defaultintdtyp": 627, "defaultuintdtyp": 627, "as_ivy_dev": [628, 848], "clear_cached_mem_on_dev": 628, "dev_util": [628, 827], "function_supported_devic": 628, "function_unsupported_devic": 628, "get_all_ivy_arrays_on_dev": [628, 827], "handle_soft_device_vari": [628, 827], "num_cpu_cor": [628, 827], "num_gpu": [628, 827, 841], "num_ivy_arrays_on_dev": 628, "percent_used_mem_on_dev": 628, "print_all_ivy_arrays_on_dev": 628, "set_split_factor": [628, 830], "split_func_cal": 628, "total_mem_on_dev": [628, 827], "tpu_is_avail": 628, "unset_default_devic": [628, 827], "unset_soft_device_mod": [628, 827], "used_mem_on_dev": 628, "defaultdevic": [628, 827], "profil": 628, "save_dir": 628, "arg_info": 631, "arg_nam": 631, "cache_fn": [631, 834], "current_backend_str": [631, 841, 846, 848], "function_supported_devices_and_dtyp": 631, "function_unsupported_devices_and_dtyp": 631, "get_item": [631, 837], "get_referrers_recurs": 631, "inplace_arrays_support": 631, "inplace_variables_support": 631, "is_ivy_nested_arrai": 631, "isscalar": 631, "match_kwarg": 631, "num_arrays_in_memori": 631, "print_all_arrays_in_memori": 631, "set_item": [631, 841], "to_ivy_shap": 631, "to_native_shap": 631, "try_else_non": 631, "unset_array_mod": [631, 843], "unset_exception_trace_mod": 631, "unset_inplace_mod": 631, "unset_min_denomin": 631, "unset_nestable_mod": 631, "unset_precise_mod": 631, "unset_queue_timeout": 631, "unset_show_func_wrapper_trace_mod": 631, "vmap": [631, 852, 867], "arraymod": 631, "precisemod": [631, 826], "jac": 632, "value_and_grad": [632, 836], "neural": [633, 785, 789, 809, 861, 863, 865, 866, 867, 871, 873, 874], "feature_group_count": [633, 646, 653, 654], "oiw": [633, 646, 647, 653], "oihw": [633, 646, 649, 653], "oidhw": [633, 646, 651, 653], "dhwio": [633, 646, 647, 651, 653], "conv_general_dil": [633, 838], "conv_general_transpos": 633, "depthwis": [633, 655, 775, 789], "overfit": [633, 656], "overal": [633, 656, 803, 824, 826, 827, 829, 851, 860, 863, 865, 866, 867], "1428566": [633, 656], "49000001": [633, 656], "55599999": [633, 656], "21000004": [633, 656], "incom": [633, 657], "4269": [633, 657], "911": [633, 657, 830], "157": [633, 657], "753": [633, 657], "545": [633, 640, 657, 738], "547": [633, 657, 827], "124": [633, 657], "963": [633, 657], "98495483": [633, 657], "0293808": [633, 657], "0159359": [633, 657], "74752808": [633, 657], "20942307": [633, 657], "3205719": [633, 657], "all_weight": [633, 658], "num_lay": [633, 658, 789], "batch_first": [633, 658, 660], "weights_transpos": [633, 658], "has_ih_bia": [633, 658], "has_hh_bia": [633, 658], "multi": [633, 634, 658, 660, 665, 775, 789, 828, 845, 852, 863, 865, 867, 871], "long": [633, 658, 659, 816, 817, 825, 826, 828, 830, 831, 838, 846, 867], "seq_len": [633, 658], "input_s": [633, 658], "h_0": [633, 658], "c_0": [633, 658], "num_direct": [633, 658], "hidden_s": [633, 658], "four": [633, 658, 812, 821, 826, 828, 833, 834, 841, 844, 849], "w_ih": [633, 658], "w_hh": [633, 658], "b_ih": [633, 658], "b_hh": [633, 658], "bias": [633, 658], "pack": [633, 658], "c_out": [633, 658], "paper": [633, 660, 809, 858], "vaswani": [633, 660], "al": [633, 660], "num_attention_head": [633, 660], "key_dim": [633, 660, 789], "value_dim": [633, 660, 789], "attention_weight": [633, 660], "unbatch": [633, 660], "nm": 633, "box": [633, 661, 662, 816], "iou_threshold": [633, 661], "max_output_s": [633, 661], "score_threshold": [633, 661], "roi_align": 633, "spatial_scal": [633, 662], "sampling_ratio": [633, 662], "23333359": [633, 663], "03946018": [633, 663], "0280633": [633, 663], "29981947": [633, 663], "29981089": [633, 663], "06345534": [633, 663], "9634552": [633, 663], "19336844": [633, 663], "09336829": [633, 663], "axisa": [634, 665], "axisb": [634, 665], "axisc": [634, 665], "293": [634, 666], "46997": [634, 666], "explicitli": [634, 670, 671, 686, 770, 789, 790, 791, 813, 820, 821, 822, 824, 826, 829, 830, 831, 834, 835, 836, 837, 839, 841, 846, 852, 861, 867], "17157288": [634, 670], "9238795": [634, 670], "78930789": [634, 670], "59803128": [634, 670], "19127655": [634, 670], "31213903": [634, 670], "63418275": [634, 670], "84632206": [634, 670], "70548367": [634, 670], "70223427": [634, 670], "09570674": [634, 670], "63116378": [634, 670], "56109613": [634, 670], "53554028": [634, 670], "32237405": [634, 670], "43822157": [634, 670], "83906901": [634, 670], "50766778": [634, 670], "71475857": [634, 670], "48103389": [634, 670], "3676433": [634, 670], "68466955": [634, 670], "62933773": [634, 670], "77917379": [634, 670], "14264561": [634, 670], "61036086": [634, 670], "45033181e": [634, 671], "02829754e": [634, 671], "54220343e": [634, 671], "12647155e": [634, 671], "38447177e": [634, 671], "56155300e": [634, 671], "26794919": [634, 671], "7320509": [634, 671], "0012": [634, 673], "00342": [634, 673], "000565": [634, 673], "0104": [634, 673], "000981": [634, 673], "00282": [634, 673], "000766": [634, 673], "0322": [634, 673], "00237": [634, 673], "000151": [634, 673], "00101": [634, 673], "00019": [634, 673], "0214": [634, 673], "00171": [634, 673], "0107": [634, 673], "0167": [634, 673], "0472": [634, 673], "0536": [634, 673], "0177": [634, 673], "000429": [634, 673], "00762": [634, 673], "frobeniu": [634, 675], "nuclear": [634, 675], "induc": [634, 675], "ranl": [634, 675], "47722558": [634, 675], "776": [634, 675], "6000004": [634, 675], "118": [634, 676], "moor": [634, 680], "penros": [634, 680], "31622776": [634, 681], "94868332": [634, 681], "1622777": [634, 681], "42718887": [634, 681], "deteremin": [634, 682], "logsabsdet": [634, 682], "subject": [634, 682], "unset_backend": [634, 682, 798, 822], "ordin": [634, 683], "b2": [634, 683], "usvh": [634, 684], "cetera": [634, 684], "cusolv": [634, 685], "gesvd": [634, 685], "gesvdj": [634, 685], "gesvda": [634, 685], "86217213": [634, 685], "31816804": [634, 685], "615": [634, 685], "ss": [634, 685], "25994301": [634, 685], "16403675": [634, 685], "61529762": [634, 685], "51231241": [634, 685], "39777088": [634, 685], "15413129": [634, 685], "1029852": [634, 685], "01383495": [634, 685], "86647356": [634, 685], "7786541": [634, 685], "55970621": [634, 685], "16857576": [634, 685], "86412698": [634, 685], "37566757": [634, 685], "88477993": [634, 685], "95925522": [634, 685], "6444726": [634, 685], "54687881": [634, 685], "16134834": [634, 685], "35037804": [634, 685], "31025076": [634, 685], "35769391": [634, 685], "transposit": [634, 686], "success": [634, 644, 688, 760, 762, 812, 816, 825, 857], "0x": [634, 689], "Such": [634, 689, 834, 841], "progress": [634, 689, 812, 816, 817, 851], "alexandr": [634, 689], "theophil": [634, 689], "dot_product": [634, 690], "9000001": [634, 691], "64158917": [634, 691], "skew": [634, 692], "60309976": [635, 693], "6666193": [635, 693], "01348412": [635, 693], "05393649": [635, 693], "49992943": [635, 693], "83330965": [635, 693], "02136981": [635, 693], "32844672": [635, 693], "26561815": [635, 693], "22314337": [635, 693], "08916873": [635, 694, 695], "44832274": [635, 695], "75646281": [635, 695], "13862944": [635, 695], "57564628": [635, 695], "outsid": [636, 696, 707, 826, 827, 834, 848, 872], "honor": [636, 703], "beyond": [636, 704, 829, 838, 873], "famili": [636, 707], "intxx": [636, 707], "floatxx": [636, 707], "rep": [636, 709], "fomaml_step": 637, "inner_cost_fn": [637, 712, 713, 714], "outer_cost_fn": [637, 712, 713], "inner_grad_step": [637, 712, 713, 714], "inner_learning_r": [637, 712, 713, 714], "inner_optimization_step": [637, 712, 713, 714], "inner_batch_fn": [637, 712, 713], "outer_batch_fn": [637, 712, 713], "average_across_step": [637, 712, 713], "inner_v": [637, 712, 713], "keep_inner_v": [637, 712, 713], "outer_v": [637, 712, 713], "keep_outer_v": [637, 712, 713], "return_inner_v": [637, 712, 713, 714], "num_task": [637, 712, 713, 714], "maml": [637, 712, 713], "0x7f4692aa7b50": [637, 712, 713, 714], "maml_step": 637, "vanilla": [637, 713, 850, 867], "_variabl": [637, 713, 714], "sub_batch": [637, 713], "40069818": [637, 713], "13723135": [637, 713], "reptile_step": 637, "cost_fn": [637, 714], "reptil": [637, 714], "batch_in": [637, 714], "4485182": [637, 714], "139": [637, 714], "9569855": [637, 714], "9880483": [637, 714], "01766968": [637, 714], "02197957": [637, 714], "02197981": [637, 714], "all_nested_indic": 638, "include_nest": [638, 715], "_index": [638, 715, 726], "_base": [638, 715, 725, 726, 837], "themselv": [638, 715, 824, 826, 827, 829, 834, 838, 850, 864, 873], "863": [638, 715, 827], "672": [638, 715], "482": [638, 715], "674": [638, 715], "341": [638, 715], "copy_nest": 638, "to_mut": [638, 716, 727], "deepli": [638, 716, 818, 852, 867], "copied_nest": [638, 716], "1337": [638, 716, 727], "duplicate_array_index_chain": 638, "index_nest": [638, 834], "insert_into_nest_at_index": 638, "insert_into_nest_at_indic": 638, "special_squar": [638, 721], "6666666666666667": [638, 721], "special_pow": [638, 721], "linear_model": [638, 721], "map_nest_at_index": 638, "_result": [638, 722, 732], "hh": [638, 722, 727], "map_nest_at_indic": 638, "ub": [638, 723], "tb": [638, 723], "multi_index_nest": 638, "nested_ani": 638, "check_nest": [638, 725, 726], "nested_argwher": 638, "stop_after_n_found": [638, 726], "nested_indic": [638, 726], "nested_map": [638, 827, 834], "_tuple_check_fn": [638, 727], "_list_check_fn": [638, 727], "_dict_check_fn": [638, 727], "wherebi": [638, 727, 815, 864], "ah": [638, 727], "bh": [638, 727], "ch": [638, 727], "dh": [638, 727, 820], "eh": [638, 727], "gh": [638, 727, 816, 831], "ih": [638, 727], "1338": [638, 727], "nested_multi_map": 638, "index_chain": [638, 728], "nest0": [638, 728], "ivy_arrai": [638, 728, 821, 838], "unappli": [638, 728], "prune_empti": 638, "prune_nest_at_index": 638, "prune_nest_at_indic": 638, "set_nest_at_index": 638, "set_nest_at_indic": 638, "xyz": [638, 733], "pqr": [638, 733], "mini": [639, 734, 789, 792], "uniformli": [640, 736, 738], "22346112": [640, 737], "0922": [640, 737], "9213753": [640, 737], "12818667": [640, 737], "799": [640, 737], "469": [640, 737], "287": [640, 737], "0366": [640, 737], "26431865": [640, 738], "475": [640, 738], "878": [640, 738], "861": [640, 738], "929": [640, 738], "789": [640, 738], "519": [640, 738], "0435": [640, 738], "381": [640, 738], "4608004": [640, 738], "8458502": [640, 738], "67270088": [640, 738], "31128597": [640, 738], "394": [640, 740], "zeroel": [641, 744], "guarante": [642, 746, 748, 807, 821, 826, 837, 852, 858], "fourth": [642, 746], "1141": [642, 746], "8101": [642, 746], "9298": [642, 746], "8460": [642, 746], "2119": [642, 746], "3519": [642, 746], "6252": [642, 746], "4033": [642, 746], "7443": [642, 746], "2577": [642, 746], "3707": [642, 746], "0545": [642, 746], "3238": [642, 746], "5944": [642, 746], "0775": [642, 746], "4327": [642, 746], "62519997": [642, 746], "40329999": [642, 746], "59439999": [642, 746], "74430001": [642, 746], "81010002": [642, 746], "84600002": [642, 746], "92979997": [642, 746], "einstein": [644, 756, 802], "117": [644, 756], "intend": [644, 762, 771, 788, 820, 833, 836, 865, 867, 871, 872], "07472222": [644, 763], "00666667": [644, 763], "08966666": [644, 763], "simplicit": [645, 764, 765], "ivy_test": [768, 770, 771, 773, 774, 775, 776, 777, 778, 779, 780, 781, 815, 816, 817, 820, 823, 825, 831, 839], "test_ivi": [768, 770, 771, 773, 774, 775, 776, 777, 778, 779, 780, 781, 815, 816, 817, 823, 825, 831, 839, 841], "assert_all_clos": [768, 839], "ret_np": [768, 770, 839], "ret_from_gt_np": [768, 839], "ground_truth_backend": [768, 770, 771, 780, 781, 813, 831, 839], "mark": [768, 812, 815, 817, 820, 841, 846], "assert_same_typ": 768, "ret_from_target": 768, "ret_from_gt": 768, "backend_to_test": [768, 770, 813, 831, 839], "gt_backend": 768, "with_backend": [768, 798], "assert_same_type_and_shap": 768, "this_key_chain": 768, "check_unsupported_devic": 768, "input_devic": 768, "all_as_kwargs_np": [768, 770], "presenc": [768, 824, 837], "check_unsupported_device_and_dtyp": 768, "input_dtyp": [768, 770, 780, 813, 831, 839, 841], "check_unsupported_dtyp": 768, "test_unsupported_funct": 768, "value_test": 768, "ret_np_flat": 768, "ret_np_from_gt_flat": 768, "specific_tolerance_dict": 768, "ret_from_np_gt_flat": 768, "function_test": 770, "args_to_contain": 770, "array_arg": [770, 834], "args_to_frontend": 770, "frontend_array_fn": 770, "arrays_to_frontend": 770, "as_list": 770, "convtru": 770, "nativeclass": 770, "counter": [770, 850], "create_args_kwarg": 770, "args_np": 770, "arg_np_val": 770, "args_idx": 770, "kwargs_np": 770, "kwarg_np_val": 770, "kwargs_idx": 770, "test_flag": [770, 813, 831, 839, 841], "on_devic": [770, 780, 813, 831, 839], "flatten_and_to_np": 770, "flatten_frontend": 770, "flatten_frontend_fw_to_np": 770, "frontend_ret": [770, 839], "isscalar_func": 770, "is_native_array_func": 770, "to_numpy_func": 770, "flatten_frontend_to_np": 770, "get_frontend_ret": 770, "frontend_fn": 770, "frontend_array_funct": 770, "precision_mod": [770, 780, 781, 831], "test_trac": [770, 780, 781, 813, 820, 831], "test_trace_each": [770, 780, 781], "get_ret_and_flattened_np_arrai": 770, "gradient_incompatible_funct": 770, "gradient_test": [770, 841], "rtol_": [770, 813, 831], "atol_": [770, 813, 831, 839], "tolerance_dict": 770, "gradient_unsupported_dtyp": 770, "kwargs_to_args_n_kwarg": 770, "num_positional_arg": [770, 780, 781, 813, 831, 839, 841], "port": [770, 858], "test_frontend_funct": [770, 839], "fn_tree": [770, 771, 781, 813, 831, 838, 839, 841], "gt_fn_tree": [770, 781], "test_valu": [770, 839, 841], "frontend_function_flag": [770, 780], "functiontestflag": [770, 780, 813, 831], "with_out": [770, 780, 813, 831, 839, 841], "instance_method": [770, 780, 813, 831, 841], "as_vari": [770, 780, 813, 831, 839, 841], "namespac": [770, 815, 826, 835, 838, 839, 842, 846, 851], "arg_": 770, "test_frontend_method": [770, 839], "init_input_dtyp": [770, 839], "method_input_dtyp": [770, 839], "init_flag": [770, 839, 841], "method_flag": [770, 780, 839, 841], "init_all_as_kwargs_np": [770, 839], "method_all_as_kwargs_np": [770, 839], "frontend_method_data": [770, 839], "init_as_variable_flag": [770, 781], "dictat": [770, 821, 828, 833, 837], "init_num_positional_arg": [770, 781], "init_native_array_flag": 770, "with_v": 770, "ret_gt": 770, "test_funct": [770, 813, 816, 817, 825, 831, 839, 841], "fn_name": [770, 771, 781, 813, 822, 831, 839, 841], "return_flat_np_arrai": 770, "as_variable_flag": [770, 781, 841], "native_array_flag": [770, 781, 841], "container_flag": [770, 780, 781, 841], "test_function_backend_comput": 770, "test_function_ground_truth_comput": 770, "arg_np_arrai": 770, "arrays_args_indic": 770, "arrays_kwargs_indic": 770, "kwarg_np_arrai": 770, "test_gradient_backend_comput": 770, "test_gradient_ground_truth_comput": 770, "test_method": 770, "method_nam": [770, 779, 781, 839], "init_with_v": 770, "method_with_v": 770, "test_gradi": [770, 780, 781, 813, 831, 841], "method_as_variable_flag": [770, 781], "method_num_positional_arg": [770, 781], "method_native_array_flag": 770, "method_container_flag": [770, 781], "test_method_backend_comput": 770, "test_method_ground_truth_comput": 770, "org_con_data": 770, "args_np_method": 770, "met_arg_np_v": 770, "met_args_idx": 770, "kwargs_np_method": 770, "met_kwarg_np_v": 770, "met_kwargs_idx": 770, "v_np": 770, "traced_if_requir": 770, "wrap_frontend_function_arg": 770, "holder": 771, "current_frontend_config": 771, "0x7f46861f1f10": 771, "interruptedtest": 771, "test_interrupt": 771, "baseexcept": 771, "tri": [771, 826], "testdata": 771, "supported_device_dtyp": 771, "is_method": 771, "setup_api_test": 771, "test_data": 771, "setup_frontend_test": 771, "teardown_api_test": 771, "teardown_frontend_test": 771, "hypothesis_help": [773, 774, 775, 776], "array_help": 773, "array_and_broadcastable_shap": 773, "searchstrategi": [773, 774, 775, 776, 780, 781, 841], "array_bool": [773, 841], "min_valu": [773, 774, 775, 776, 813, 831, 839, 841], "max_valu": [773, 774, 775, 776, 839, 841], "ex": [773, 774, 775, 776, 781, 825, 861], "strategi": [773, 774, 775, 776, 780, 781, 815, 839], "array_helpers_dtype_info_help": 773, "kind_dtyp": [773, 775], "array_indices_axi": 773, "array_dtyp": [773, 774, 841], "indices_dtyp": 773, "get_dtyp": [773, 774, 813, 831, 839, 841], "abs_smallest_v": [773, 775, 776], "large_abs_safety_factor": [773, 775, 776, 813, 831, 839, 841], "small_abs_safety_factor": [773, 775, 776, 813, 831, 839], "safety_factor_scal": [773, 775, 776, 839, 841], "disable_random_axi": 773, "axis_zero": 773, "allow_inf": [773, 776, 839, 841], "min_num_dim": [773, 775, 839, 841], "max_num_dim": [773, 775, 839, 841], "min_dim_s": [773, 775, 839, 841], "max_dim_s": [773, 775, 839], "first_dimension_onli": 773, "indices_same_dim": 773, "valid_bound": 773, "safeti": [773, 775, 776, 867], "0002": [773, 776], "hypothesi": [773, 775, 781, 815, 817, 820, 825, 835], "65536": 773, "44758124e": [773, 841], "array_indices_put_along_axi": 773, "values_dtyp": 773, "array_valu": [773, 841], "allow_nan": [773, 776, 841], "allow_subnorm": [773, 776, 841], "exclude_min": [773, 776, 841], "exclude_max": [773, 776], "subnorm": [773, 776], "get_shap": [773, 775, 839, 841], "1806": 773, "36912": 773, "6955": 773, "59576": 773, "1025": 773, "arrays_and_ax": 773, "available_dtyp": [773, 774, 813, 831, 839, 841], "allow_non": [773, 775, 839, 841], "return_dtyp": 773, "force_int_axi": 773, "26e": 773, "10e": 773, "24322108": 773, "26446279e": 773, "96046448e": 773, "008": 773, "17549435e": 773, "038": 773, "06541027e": 773, "13725760e": 773, "07143888": 773, "arrays_for_pool": 773, "min_dim": 773, "max_dim": 773, "min_sid": 773, "max_sid": 773, "explicit_or_str_pad": 773, "only_explicit_pad": 773, "return_dil": 773, "mixed_fn_compo": [773, 774, 775, 776, 841], "return_data_format": 773, "cond_data_gen_help": 773, "create_concatenable_arrays_dtyp": 773, "min_num_arrai": 773, "max_num_arrai": 773, "concat_dim": 773, "common_shap": [773, 841], "stackabl": 773, "given_common_shap": 773, "create_nested_input": 773, "leaf_valu": 773, "dtype_and_valu": [773, 813, 831, 839, 841], "num_arrai": [773, 774, 839, 841], "shared_dtyp": [773, 774, 839], "ret_shap": 773, "array_api_dtyp": [773, 774], "shape_kei": 773, "37915": 773, "6322": 773, "26765": 773, "12413": 773, "26986": 773, "34665": 773, "000e": 773, "711e": 773, "100e": 773, "955e": [773, 841], "40817": 773, "56193": 773, "29200": 773, "5851": 773, "9746": 773, "9604645e": 773, "103": 773, "41795": 773, "1170789994": 773, "44251": 773, "44209": 773, "433075925": 773, "24791": 773, "24691": 773, "24892": 773, "16711": 773, "972": 773, "15357": 773, "72057594037927936": 773, "dtype_array_queri": 773, "allow_mask": 773, "allow_neg_step": 773, "dtype_array_query_v": 773, "dtype_values_axi": [773, 841], "min_axi": 773, "max_axi": 773, "valid_axi": 773, "allow_neg_ax": 773, "min_axes_s": 773, "max_axes_s": 773, "force_tuple_axi": 773, "29788": 773, "62222885e": 773, "68281172e": 773, "257j": 773, "40129846e": 773, "90000000e": 773, "63426649e": 773, "91931887e": 773, "29488e": 773, "14361019e": 773, "12445": 773, "einsum_help": 773, "get_first_solve_batch_matrix": 773, "choose_adjoint": 773, "get_second_solve_batch_matrix": 773, "get_first_solve_matrix": 773, "allow_simplifi": 773, "choose_sid": 773, "xa": 773, "get_second_solve_matrix": 773, "list_of_s": 773, "sampled_from": [773, 839, 841], "min_siz": [773, 775, 781, 841], "max_siz": [773, 775, 781, 841], "size_bound": [773, 841], "999999999999999": 773, "9394938006792373": 773, "mutually_broadcastable_shap": 773, "num_shap": 773, "base_shap": 773, "dtype_help": 774, "univers": [774, 838, 856], "cast_filt": 774, "cast_filter_help": 774, "current_backend": [774, 798, 815, 822, 830, 834, 839, 842, 846], "get_castable_dtyp": 774, "castabl": 774, "prune_funct": 774, "intersect": [774, 825, 841], "signed_integ": 774, "real_and_complex": 774, "float_and_complex": 774, "general_help": 775, "broadcasterror": 775, "apply_safety_factor": 775, "dims_and_offset": 775, "ensure_dim_uniqu": 775, "embedding_help": 775, "general_helpers_dtype_info_help": 775, "get_axi": [775, 841], "allow_neg": 775, "sort_valu": 775, "force_tupl": 775, "force_int": 775, "assertionerror": [775, 813, 820, 830, 831, 839, 841], "get_bound": [775, 841], "get_mean_std": 775, "matrix_is_st": 775, "cond_limit": 775, "instabl": [775, 813, 826, 831], "computation": [775, 816], "prone": [775, 826], "thumb": 775, "gradual": 775, "strong": [775, 852, 857, 867], "collinear": 775, "reshape_shap": [775, 841], "sizes_": 775, "two_broadcastable_shap": 775, "x_and_filt": 775, "number_help": 776, "arbitrarili": [776, 849], "safety_factor": 776, "backend_proc": 777, "input_queu": 777, "output_queu": 777, "frontend_proc": 777, "pipeline_help": 778, "backendhandl": 778, "update_backend": [778, 839], "backendhandlermod": 778, "enum": 778, "setbackend": 778, "withbackend": 778, "withbackendcontext": 778, "get_frontend_config": 778, "frontendmethoddata": 779, "ivy_init_modul": 779, "framework_init_modul": 779, "init_nam": 779, "test_parameter_flag": 780, "dynamicflag": [780, 781], "frontendfunctiontestflag": [780, 831], "with_copi": 780, "generate_frontend_arrai": [780, 781, 831], "testflag": 780, "apply_flag": 780, "args_to_iter": 780, "frontendinittestflag": 780, "frontendmethodtestflag": 780, "test_cython_wrapp": [780, 781], "initmethodtestflag": 780, "methodtestflag": 780, "build_flag": 780, "frontend_init_flag": 780, "frontend_method_flag": 780, "function_flag": 780, "init_method_flag": 780, "testing_help": 781, "handle_exampl": [781, 841], "test_exampl": [781, 841], "test_frontend_exampl": [781, 841], "test_method_exampl": [781, 841], "test_frontend_method_exampl": [781, 841], "given_kwarg": 781, "handle_frontend_method": [781, 839, 841], "class_tre": [781, 839], "init_tre": [781, 839], "init_native_arrai": 781, "_as_varaible_strategi": 781, "method_native_arrai": 781, "test_inplac": [781, 841], "_given_kwarg": 781, "test_compil": 781, "handle_frontend_test": [781, 839, 841], "alias": [781, 815, 838, 839], "number_positional_arg": [781, 839], "test_with_out": [781, 839, 841], "test_with_copi": 781, "handle_method": [781, 841], "method_tre": [781, 839, 841], "_gradient_strategi": 781, "handle_test": [781, 813, 831, 841], "test_instance_method": [781, 841], "num_positional_args_help": 781, "num_positional_args_method": 781, "geglu": 785, "leakyrelu": 785, "logsoftmax": 785, "from_flax_modul": 786, "native_modul": 786, "params_fx": 786, "rng_seed": 786, "constructor_arg": 786, "constructor_kwarg": 786, "instance_arg": 786, "instance_kwarg": 786, "flax": [786, 851, 852, 858, 867], "from_haiku_modul": 786, "params_hk": 786, "from_paddle_modul": 786, "from_torch_modul": 786, "dedic": [786, 818, 833, 844, 848, 850], "to_keras_modul": 786, "native_module_class": 786, "modulehelp": [787, 791], "create_vari": [788, 850], "var_shap": [788, 850], "fan_out": [788, 850], "fan_in": [788, 850], "rectangular": 788, "firstlayersiren": 788, "siren": 788, "glorotuniform": [788, 789, 850], "glorot": 788, "xavier": 788, "neuron": 788, "w_1x_1": 788, "w_2x_2": 788, "w_nx_n": 788, "w_i": 788, "vanish": 788, "explod": [788, 855, 856], "kaimingnorm": 788, "fan_mod": [788, 850], "kaim": 788, "he": 788, "negative_slop": 788, "fan": 788, "propog": 788, "fan_sum": [788, 850], "Ones": 788, "randomnorm": 788, "stddev": 788, "w0": 788, "wlim": 788, "predefin": 788, "fan_avg": 788, "adaptiveavgpool1d": 789, "avgpool1d": 789, "implicit": [789, 824, 829, 838, 841, 846, 867], "avgpool2d": 789, "avgpool3d": 789, "e501": 789, "filter_s": 789, "weight_initi": [789, 850], "bias_initi": [789, 850], "0x7f46925e4970": 789, "0x7f46925e49d0": 789, "conv1dtranspos": 789, "0x7f46925e4a30": 789, "0x7f46925e4a90": 789, "filter_shap": 789, "0x7f46925e4af0": 789, "0x7f46925e4b50": 789, "0x7f46925e4bb0": 789, "0x7f46925e4c10": 789, "0x7f46925e4d30": 789, "0x7f46925e4d90": 789, "conv3dtranspos": 789, "0x7f46925e4df0": 789, "0x7f46925e4e50": 789, "depthwiseconv2d": 789, "num_channel": 789, "0x7f46925e4c70": 789, "0x7f46925e4cd0": 789, "bernoul": 789, "num_embed": 789, "embedding_dim": 789, "padding_idx": 789, "lookup": 789, "num_embeddingss": 789, "renorm": 789, "insensit": 789, "return_st": 789, "0x7f46925e4eb0": 789, "get_initial_st": 789, "0x7f46925e48b0": 789, "0x7f46925e4910": 789, "maxpool1d": 789, "maxpool3d": 789, "multiheadattent": 789, "embed_dim": 789, "head_dim": 789, "dropout_r": 789, "use_proj_bia": 789, "attention_ax": 789, "build_mod": [789, 790, 791], "on_init": [789, 791], "parallel": [789, 823, 867, 871, 872], "binarycrossentropyloss": 790, "store_var": [790, 791], "with_partial_v": [790, 791], "logpoissonloss": 790, "modulemeta": 791, "temporarili": [791, 813, 820, 831], "from_cal": 791, "module_dict": 791, "register_buff": 791, "register_paramet": 791, "weights_path": 791, "randomness_factor": 791, "with_edge_label": 791, "with_arg_label": 791, "with_output_label": 791, "output_connected_onli": 791, "highlight_subgraph": 791, "trace_kwarg": 791, "_unified_ivy_graph": 791, "_call": 791, "num_featur": 792, "trail": 792, "layernorm": 792, "normalized_shap": 792, "elementwise_affin": 792, "set_stat": [793, 850], "adamw": 793, "weight_decai": 793, "init_on_first_step": 793, "fallback_to_non_trac": 793, "ignore_miss": 793, "privat": [793, 838, 841], "_step": [793, 850], "stochast": [793, 867], "sub_modul": 794, "check_al": 795, "messag": [795, 804, 808, 816, 817, 825, 828, 830, 832, 838, 846, 848, 857], "check_all_or_any_fn": 795, "check_ani": 795, "check_dev_correct_format": 795, "check_dimens": 795, "check_elem_in_list": [795, 834, 837, 838], "elem": 795, "check_equ": [795, 838], "check_exist": 795, "check_fals": 795, "check_gather_input_valid": 795, "check_gather_nd_input_valid": 795, "check_great": 795, "allow_equ": [795, 830], "check_inplace_sizes_valid": [795, 837], "check_isinst": 795, "allowed_typ": 795, "check_kernel_padding_s": 795, "padding_s": 795, "check_less": [795, 830], "check_one_way_broadcast": 795, "check_same_dtyp": 795, "check_shapes_broadcast": 795, "check_tru": 795, "check_unsorted_segment_valid_param": 795, "ast_help": 797, "importtransform": 797, "nodetransform": 797, "impersonate_import": 797, "tree": [797, 826], "local_ivy_id": 797, "visit_import": 797, "visit_importfrom": 797, "ivyload": 797, "loader": [797, 849, 852], "exec_modul": 797, "ivypathfind": 797, "metapathfind": 797, "find_spec": 797, "fullnam": 797, "contextmanag": 798, "choose_random_backend": 798, "global_backend": 798, "dynamic_backend_convert": 798, "backend_stack": [798, 846], "prevent_access_loc": 798, "previous_backend": [798, 822], "Or": [798, 809, 811, 816, 837, 849], "set_backend_to_specific_vers": 798, "set_jax_backend": 798, "set_mxnet_backend": 798, "mx": 798, "set_numpy_backend": 798, "set_paddle_backend": 798, "set_tensorflow_backend": 798, "set_torch_backend": 798, "sub_backend_handl": 799, "clear_sub_backend": 799, "find_available_sub_backend": 799, "sub_backends_loc": 799, "fn_name_from_version_specific_fn_nam": 799, "fn_name_from_version_specific_fn_name_sub_backend": 799, "sub_backend_vers": 799, "backend_vers": [799, 813, 826, 831], "set_sub_backend": 799, "sub_backend_str": 799, "set_sub_backend_to_specific_vers": 799, "sub_backend": 799, "unset_sub_backend": 799, "check_for_binari": 800, "cleanup_and_fetch_binari": [800, 816], "clean": [800, 817, 842, 846, 847, 849], "dynamic_import": 801, "import_modul": [801, 846], "einsum_pars": 802, "convert_interleaved_input": 802, "interleav": 802, "convert_subscript": 802, "old_sub": 802, "symbol_map": 802, "subscript": [802, 803], "oe": 802, "ellipsi": [802, 803], "find_output_shap": 802, "find_output_str": 802, "canon": 802, "gen_unused_symbol": 802, "abd": [802, 803], "get_symbol": 802, "letter": 802, "resort": 802, "unicod": 802, "charact": [802, 838, 857], "chr": 802, "surrog": 802, "\u0155": 802, "20000": 802, "\u4eac": 802, "has_valid_einsum_chars_onli": 802, "einsum_str": 802, "abaz": 802, "\u00f6ver": 802, "is_valid_einsum_char": 802, "\u01f5": 802, "legalise_einsum_expr": 802, "reproduct": [802, 803], "pars": [802, 803, 823, 828, 852], "intak": 802, "contract_path": 802, "parse_einsum_input": [802, 803], "einsum_eqn": 802, "legalis": 802, "legalise_einsum_eqn": 802, "za": [802, 803], "xza": [802, 803], "xz": [802, 803], "possibly_convert_to_numpi": 802, "myshap": 802, "__main__": 802, "0x10f850710": 802, "einsum_path_help": 803, "can_dot": 803, "idx_remov": 803, "bla": 803, "benefici": 803, "movement": 803, "costli": 803, "gemm": 803, "ijj": 803, "ddot": 803, "ikj": 803, "compute_size_by_dict": 803, "idx_dict": 803, "abbc": 803, "find_contract": 803, "input_set": 803, "output_set": 803, "lh": 803, "rh": 803, "new_result": 803, "idx_contract": 803, "iset": 803, "oset": 803, "bdc": 803, "flop_count": 803, "num_term": 803, "size_dictionari": 803, "flop": [803, 807], "greedy_path": 803, "memory_limit": 803, "exhaust": [803, 837, 841, 864, 873], "indices_remov": 803, "priorit": [803, 815, 840, 844], "hadamard": 803, "cubic": 803, "greedi": 803, "idx_siz": 803, "optimal_path": 803, "siev": 803, "input_str": 803, "output_str": 803, "parse_possible_contract": 803, "path_cost": 803, "naive_cost": 803, "propos": [803, 817, 838, 844, 867], "intermediari": [803, 822], "unoptim": 803, "new_input_set": 803, "update_other_result": 803, "provision": 803, "_parse_possible_contract": 803, "mod_result": 803, "inplaceupdateexcept": 804, "include_backend": [804, 830], "ivyattributeerror": [804, 830], "attributeerror": [804, 830, 848], "ivybroadcastshapeerror": [804, 830], "ivydeviceerror": 804, "ivydtypepromotionerror": [804, 830], "ivyindexerror": [804, 830], "ivyinvalidbackendexcept": 804, "ivynotimplementedexcept": [804, 830], "notimplementederror": 804, "ivyvalueerror": [804, 830], "handle_except": [804, 833, 835], "add_array_spec": 805, "fn_array_spec": 805, "set_logging_mod": 806, "debug": [806, 812, 816, 817, 824, 825, 836, 841, 844, 849, 867, 875], "unset_logging_mod": 806, "print_stat": 807, "viz": 807, "snakeviz": 807, "bonu": 807, "cprofil": 807, "tensorflow_profile_start": 807, "logdir": 807, "host_tracer_level": 807, "python_tracer_level": 807, "device_tracer_level": 807, "delay_m": 807, "toggl": [807, 817], "host": [807, 811, 825, 852, 857, 872], "timestamp": 807, "awai": [807, 809, 865, 867], "millisecond": 807, "guess": 807, "tensorflow_profile_stop": 807, "torch_profiler_init": 807, "schedul": [807, 825, 852, 867, 874], "on_trace_readi": 807, "record_shap": 807, "profile_memori": 807, "with_stack": 807, "with_flop": 807, "with_modul": 807, "experimental_config": 807, "profileract": 807, "record_and_sav": 807, "dealloc": 807, "record": [807, 816, 852, 868], "callstack": 807, "aten": 807, "torchscript": [807, 846, 854, 874], "_experimentalconfig": 807, "kineto": 807, "torch_profiler_start": 807, "torch_profiler_stop": 807, "cprint": [808, 846], "grant": 809, "autotun": [809, 871], "grow": [809, 812, 818, 867, 875], "peopl": [809, 814, 816, 817, 819, 867, 869], "wip": [809, 860], "docker": [809, 813, 814, 831], "pull": [809, 810, 812, 815, 816, 820, 828, 832, 842, 844, 852, 853, 858], "sweat_smil": 809, "setting_up": 809, "jax_fn": 809, "jax_x": 809, "torch_x": 809, "torch_fn": 809, "motiv": [809, 848, 857], "contextu": 809, "explos": [809, 855, 857], "adher": [809, 820, 826, 829, 833, 844, 846, 851, 856, 857, 863, 864, 873], "orient": 809, "contributor": [809, 810, 813, 815, 816, 817, 831, 838, 845, 867], "shorter": [809, 848], "ensp": 809, "customiz": [809, 823], "deepmind_perceiver_io": 809, "sm_framework": 809, "segmentation_model": 809, "sm": 809, "torch_sm": 809, "metric": [809, 852], "iou_scor": 809, "rax": 809, "torch_rax": 809, "poly1_softmax_loss": 809, "madmom": 809, "madmon": 809, "torch_madmom": 809, "freq": 809, "audio": 809, "hz2midi": 809, "torch_loss": 809, "maxpooling1d": 809, "pool_siz": 809, "tf_kornia": 809, "tf_rax": 809, "tf_madmom": 809, "tf_loss": 809, "_forward_classifi": [809, 861], "forward_classifi": [809, 861], "hk_eff_encod": 809, "dummy_x": 809, "jax_sm": 809, "jax_madmom": 809, "jax_loss": 809, "np_kornia": 809, "np_sm": 809, "np_rax": 809, "np_loss": 809, "yourself": [809, 815, 817, 832, 841, 844], "favourit": [809, 816], "hyperparam": 809, "idea": [809, 815, 840, 842, 847, 858, 866], "instantli": [809, 861], "essenti": [809, 812, 815, 822, 824, 827, 828, 834, 837, 838, 839, 856, 857, 873], "handler": [809, 845, 847, 851, 854], "facilit": [809, 818], "mse_loss": 809, "jax_ms": 809, "tf_mse": 809, "np_mse": 809, "torch_ms": 809, "someth": [809, 813, 817, 822, 831, 832, 842, 849, 850, 852, 853, 873], "favorit": 809, "flexibl": [809, 824, 826, 833, 836, 842, 844, 867], "everyon": [809, 810, 815, 816, 817, 852, 858], "plan": [809, 853], "interoper": [809, 857, 864, 865, 867, 870], "believ": [809, 817, 857], "feedback": [809, 815, 825], "appreci": [809, 818], "amaz": [809, 875], "journei": [809, 810, 818], "ambiti": 809, "season": 809, "perfect": 809, "fellow": 809, "twitter": 809, "sneak": 809, "peek": 809, "stai": [809, 825], "proper": [809, 815, 838, 861], "credit": 809, "accompani": 809, "lenton2021ivi": 809, "inter": 809, "author": [809, 815, 817, 865, 869], "lenton": 809, "daniel": 809, "pardo": 809, "fabio": 809, "falck": 809, "fabian": 809, "jame": 809, "stephen": 809, "clark": 809, "ronald": 809, "journal": 809, "arxiv": 809, "preprint": 809, "2102": 809, "02886": 809, "year": [809, 820, 852, 856, 858, 867], "strongli": [810, 816, 838, 873, 874], "engag": [810, 817, 818, 857], "skill": [810, 818, 869], "veteran": 810, "effort": [810, 815, 852, 857, 863, 867, 873], "board": [810, 823], "stage": [810, 817, 819, 820, 823, 841, 857, 867], "excit": [810, 819, 857], "reward": [810, 818], "badg": [810, 818, 825, 875], "program": [810, 837, 864, 865, 867, 870, 871, 874], "climb": [810, 814], "Be": [811, 823], "awar": [811, 823, 830, 832], "linux": [811, 816, 817, 823, 870, 872], "regularli": [811, 823, 825], "internet": [811, 823], "codespac": [811, 823, 831], "make_doc": 811, "sh": [811, 816, 817, 820, 825], "pwd": 811, "ssh": [811, 825], "make_docs_without_dock": [811, 823], "award": 812, "formal": 812, "dynamo": [812, 875], "earn": [812, 818], "thoroughli": [812, 820], "valuabl": [812, 815, 817], "merg": [812, 815, 817, 820, 825, 838, 867, 875], "meet": [812, 818, 838], "qualiti": [812, 817], "wizard": [812, 875], "impact": [812, 825, 841, 850, 869], "inspector": [812, 875], "acknowledg": [812, 818], "honour": 812, "dilig": 812, "bronz": [812, 818, 875], "silver": [812, 818, 875], "gold": [812, 818, 852, 875], "expertis": [812, 818, 869], "assist": [813, 831], "runtimeerror": [813, 831], "logaddexp2_cpu": [813, 831], "falsifi": [813, 820, 831, 841], "test_logaddexp2": [813, 831], "backend_fw": [813, 831, 839], "dtype_and_x": [813, 831, 839, 841], "reproduce_failur": [813, 820, 831, 835, 841], "axicy2bkaamobaar2waaaacvaai": [813, 831], "decoartor": [813, 831], "with_unsupported_dtyp": [813, 826, 831, 838], "25830078125": [813, 831], "258544921875": [813, 831], "test_acosh": [813, 831], "axicy2baabyqwqgiaabdaai": [813, 831], "quit": [813, 817, 821, 828, 829, 831, 834, 835, 841, 844, 867, 873], "41421356": [813, 831], "41421356e": [813, 831], "34078079e": [813, 831], "154": [813, 831], "test_ab": [813, 816, 831, 841], "000j": [813, 831], "154j": [813, 831], "axicy2zkyaiibibgziaaxqhexsaab7juqaaamteazq": [813, 831], "thread": [813, 815, 816, 817, 820, 821, 822, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 844, 849, 867], "pycharm": [813, 839, 841], "steep": 814, "curv": 814, "realpython": 814, "pyn": 814, "exchang": [814, 857, 863, 865], "pilot": [814, 853], "stuck": [814, 815], "spell": 814, "sound": [814, 825, 845], "frequent": [815, 817, 822, 867], "outlin": [815, 816, 817, 819, 824, 826, 829, 834, 837, 838, 841], "broad": [815, 869], "individu": [815, 817, 820, 822, 826, 834, 838, 867, 870, 873, 874], "clearli": [815, 817, 828, 839, 841, 857, 871], "straightforward": [815, 818, 849], "lie": 815, "urgent": 815, "encourag": [815, 818, 832, 852, 857], "tackl": [815, 818, 838], "challeng": [815, 822, 873], "categoris": [815, 820, 838], "comfort": [815, 816, 830], "linkag": 815, "pr": [815, 817, 818, 820, 832, 838, 839, 841], "confid": 815, "submit": [815, 832], "scipi": [815, 857, 869, 874], "mindspor": 815, "simpler": [815, 817, 832, 860, 868, 874], "member": [815, 817, 838, 853, 857], "comment": [815, 816, 817, 820, 826, 832, 838, 840, 844], "composition": 815, "feasibl": [815, 825, 841, 857, 860], "pend": 815, "helpfulli": [815, 844, 865], "problemat": [815, 816], "unimpl": 815, "issue_link": 815, "alias_nam": 815, "notic": [815, 821, 825, 831, 832, 841, 844, 860], "push": [815, 817, 818, 820, 839, 841, 873], "liner": 815, "meanwhil": [815, 825], "reselect": 815, "faithfulli": 815, "creation_routin": [815, 839], "indexing_routin": 815, "ma": 815, "manipulation_routin": 815, "mathematical_funct": [815, 838], "sorting_searching_count": 815, "ufunc": [815, 838], "matrix_and_vector_product": 815, "matrix_eigenvalu": 815, "norms_and_other_numb": 815, "solving_equations_and_inverting_matric": 815, "gleam": 815, "uncom": 815, "test_numpy_inn": 815, "test_frontend": [815, 825, 831, 839], "unsur": [815, 841], "statu": [815, 818, 825, 832, 858], "refrain": 815, "checkbox": [815, 816], "aforement": 815, "parent": [815, 825, 848], "arraywithelementwis": [815, 821, 848], "containerwithmanipul": 815, "thorough": [815, 829, 833, 841], "add_reformatting_checklist_": 815, "category_nam": [815, 826, 827, 829, 833, 834], "autom": [815, 825, 832, 841, 854, 869], "bot": [815, 832], "markdown": [815, 823], "patient": [815, 816], "elabor": 815, "struggl": 815, "assigne": 815, "status": 815, "central": [815, 832, 844, 857, 873], "analyz": [815, 854], "relevant_submodul": 815, "roadmap": [815, 825], "soon": [815, 817, 825, 826, 852, 860], "deem": [815, 838], "subtask": 815, "clearer": [815, 830, 839, 849], "backend_nam": [815, 822, 826, 827, 829, 833, 834, 835], "sometim": [815, 816, 817, 820, 826, 834, 838, 841, 844], "rare": [815, 827, 852, 872], "button": [815, 816, 817, 831], "centr": 815, "predetermin": 815, "superset": [815, 819, 834, 837, 852], "reserv": 815, "happi": [816, 831, 852, 858], "your_usernam": [816, 831], "your_fold": [816, 831], "enter": [816, 817, 821, 826, 827, 831, 833, 835], "sync": [816, 820, 831], "remot": [816, 820, 831, 832], "nutshel": [816, 833], "hook": [816, 832, 840], "lint": [816, 819], "succe": [816, 860], "whatev": [816, 824, 852], "elig": [816, 818], "student": 816, "licens": [816, 870], "remind": 816, "expir": 816, "won": [816, 817, 824, 826, 851, 853, 857, 858, 860, 861, 862], "profession": 816, "trial": 816, "jetbrain": 816, "month": [816, 856], "bui": [816, 873], "paid": 816, "rapid": [816, 856, 857, 867], "pace": 816, "person": [816, 817], "abil": [816, 844, 847, 852, 867], "perhap": [816, 848, 849, 850, 852, 873], "conda": [816, 857, 869], "ivy_dev": [816, 817], "icon": [816, 817, 831], "panel": 816, "vscode": [816, 831], "palett": 816, "ctrl": [816, 817], "mac": [816, 817], "intel": [816, 857, 865, 872], "m1": 816, "optional_apple_silicon_1": 816, "optional_apple_silicon_2": 816, "array_api_test": [816, 817, 820, 831], "test_array_api": [816, 817, 820, 831, 841], "suit": [816, 819, 820, 825, 831, 840, 841, 849, 857, 867, 873], "cmd": 816, "bat": [816, 817], "virtualenv": 816, "tick": [816, 817, 825], "nz2": 816, "openssl": 816, "libssl1": 816, "1_1": 816, "1f": 816, "1ubuntu2": 816, "20_amd64": 816, "deb": 816, "dpkg": 816, "mitig": [816, 873], "desktop": [816, 831], "powershel": 816, "admin": 816, "deploy": [816, 861, 866, 869, 870, 873, 874], "menu": [816, 831], "introspect": 816, "dialog": 816, "persist": 816, "earlier": [816, 817, 826, 842], "virtualis": 816, "bio": [816, 857], "dropdown": [816, 825], "dockerfil": 816, "ca": 816, "certif": 816, "gnupg": 816, "lsb": 816, "keyr": 816, "fssl": 816, "gpg": 816, "dearmor": 816, "echo": [816, 825, 853], "arch": 816, "lsb_releas": 816, "null": [816, 831], "ce": 816, "cli": 816, "containerd": 816, "systemctl": 816, "softwar": [816, 817, 856, 857, 865, 870, 871, 872], "press": [816, 817, 849], "4a": 816, "socket": 816, "rwx": 816, "sock": 816, "pid": 816, "editor": 816, "pytest": [816, 817, 820, 825, 831, 835, 841], "keyboard": 816, "screenshot": 816, "pop": [816, 831, 857], "test_elementwis": 816, "bar": [816, 831], "shell": [816, 817, 820, 825], "setup_test": 816, "run_ivy_core_test": 816, "run_ivy_nn_test": 816, "run_ivy_stateful_test": 816, "run_test": [816, 825], "test_depend": 816, "test_ivy_cor": 816, "test_ivy_nn": 816, "test_ivy_st": 816, "unix": 816, "test_": [816, 839], "test_cor": [816, 817, 839], "offici": [816, 826, 846], "wish": [816, 838], "ivy_nn": 816, "ivy_st": 816, "header": [816, 817, 840], "arrow": 816, "test_stat": 816, "test_submodule_nam": 816, "test_function_nam": 816, "debugg": 816, "studio": [816, 831, 841], "afterward": [816, 849], "background": [816, 823, 831, 867, 869], "overlap": [816, 825, 831, 842, 844, 868], "test_file_path": [816, 831], "test_fn_nam": [816, 831], "engin": [816, 867, 869, 870], "devcontain": 816, "comma": 816, "postcreatecommand": 816, "post_create_command": 816, "poststartcommand": 816, "safe": [816, 838], "containerworkspacefold": 816, "reopen": 816, "test_fle_path": 816, "slash": 816, "isol": [816, 817, 868, 873], "container": 816, "intens": 816, "headach": 816, "arm": [816, 817], "vm": [816, 825], "azur": 816, "cloud": [816, 825, 869], "theme": [816, 823], "ipad": 816, "browser": [816, 823], "quota": 816, "requisit": 816, "pane": [816, 817, 825], "dockerfilegpu": 816, "ivv": 816, "multiv": 816, "multivers": [816, 842], "dockerfilemultivers": 816, "dockerhub": 816, "upto": [816, 817], "minut": [816, 825], "launch": 816, "quickli": [816, 817, 825, 849, 850, 856, 858, 867, 874], "kindli": [816, 840], "guidelin": 816, "colour": 816, "chanc": 816, "troubleshoot": 816, "ever": 816, "flask": [816, 831], "toolbar": [816, 817, 831], "_array_modul": [816, 820, 831], "refresh": [816, 831], "pytestarg": [816, 831], "unittesten": [816, 831], "pytesten": [816, 831], "autotestdiscoveronsaveen": [816, 831], "conftest": 816, "serv": [816, 817, 821, 824, 833, 834, 838, 839, 841, 844, 845, 854, 865], "aren": [816, 826], "available_config": 816, "cp310": 816, "x86": [816, 872], "newer": [816, 841], "_compil": 816, "meantim": 816, "suffici": [816, 828, 838, 841], "bear": [816, 821, 824, 826, 838], "tendenc": 817, "land": 817, "unrel": [817, 857], "fly": [817, 867], "internship": 817, "suspect": 817, "iii": 817, "issue_numb": 817, "12345": 817, "rememb": 817, "respond": 817, "dai": [817, 832], "freed": 817, "situat": [817, 825, 851], "obvious": [817, 825], "hypothet": 817, "frustrat": 817, "delai": [817, 860], "busi": 817, "inact": 817, "unfairli": 817, "investig": 817, "name_of_your_branch": 817, "date": [817, 820], "complic": [817, 839, 846], "merge_with_upstream": 817, "abort": 817, "tediou": [817, 828, 844], "stash": [817, 832], "reinstat": 817, "uncommit": 817, "unstag": [817, 832], "untrack": 817, "atlassian": 817, "wrote": 817, "piec": [817, 821, 834, 835, 846, 860, 863, 865], "blame": 817, "eg": 817, "week": [817, 858], "grep": 817, "commit_id": 817, "handi": 817, "histori": 817, "highlight": [817, 825, 828, 838, 840], "approv": 817, "someon": [817, 852], "hash": [817, 849], "cancel": 817, "speedup": 817, "unavail": 817, "tickbox": 817, "span": [817, 865, 873], "intent": [817, 837], "discourag": 817, "adopt": [817, 821, 833, 844, 857, 866, 867, 872], "philosophi": 817, "infrequ": 817, "earli": [817, 867], "wast": [817, 825], "spot": [817, 828, 834], "mistak": 817, "mountain": 817, "advoc": [817, 852], "session": [817, 867], "beauti": 817, "particularli": [817, 849, 852, 860, 865], "care": [817, 827, 838, 844, 851, 857], "undo": 817, "stress": 817, "nifti": 817, "reassur": 817, "local_path_to_ivi": 817, "subfold": [817, 839, 841, 842], "dep": 817, "fresh": 817, "arsen": 817, "exec": 817, "ivy_contain": 817, "test_imag": 817, "test_random_crop": 817, "test_creation_funct": 817, "test_arang": 817, "cursor": 817, "alt": [817, 875], "breakpoint": 817, "gutter": 817, "caret": 817, "f8": 817, "f9": 817, "Into": 817, "f7": 817, "smart": 817, "fragment": [817, 863, 865, 869], "wherein": [817, 834, 841], "failur": [817, 825, 839, 841], "embark": 818, "innov": [818, 857], "door": [818, 852], "elev": 818, "mission": [818, 857, 869], "opportun": 818, "testament": [818, 840], "stone": 818, "gift": 818, "acquir": 818, "peak": 818, "privileg": [818, 869], "bounti": 818, "cash": 818, "delight": 818, "weed": [819, 845], "tour": 819, "formatt": [819, 832], "conjunct": 820, "establish": [820, 869], "sens": [820, 826, 828, 838, 840, 848], "unconnect": 820, "initialis": [820, 838, 841], "strang": [820, 848], "test_linalg": [820, 839], "test_set_funct": 820, "test_signatur": 820, "excess": [820, 822, 828], "array_modul": 820, "vv": 820, "test_manipulation_funct": 820, "test_concat": [820, 841], "nb": 820, "liber": 820, "______________________": 820, "test_remaind": 820, "_______________________": 820, "test_operators_and_elementwise_funct": 820, "1264": 820, "1277": 820, "binary_param_assert_against_refimpl": 820, "ctx": 820, "620": 820, "binary_assert_against_refimpl": 820, "324": 820, "scalar_o": 820, "17304064": 820, "binaryparamcontext": 820, "axic42baaowcnp": 820, "rumwmabaear0": 820, "make_binary_param": 820, "numeric_dtyp": 820, "left_strat": 820, "left_sym": 820, "right_strat": 820, "right_sym": 820, "right_is_scalar": 820, "binary_param_assert_dtyp": 820, "binary_param_assert_shap": 820, "recreat": 820, "unexpectedli": 820, "discrep": [820, 839], "test_asarray_arrai": 820, "test_floor_divid": 820, "health": 820, "test_iop": 820, "__imod__": 820, "isequ": 820, "test_matrix_norm": 820, "alter": 820, "tweak": 820, "array_api_methods_to_test": 820, "test_special_cas": 820, "__ipow__": 820, "is_integ": 820, "easier": [820, 821, 822, 826, 839, 842, 854, 867, 869], "revisit": [820, 833], "_data": [821, 837, 838, 848], "organiz": [821, 824, 838], "underpin": [821, 824, 846], "programmat": [821, 824, 868], "backup": [821, 823, 824], "accident": [821, 824, 838], "absent": [821, 824], "__mul__": [821, 824, 828, 833, 844, 848], "throw": [821, 826, 827, 830, 831, 848, 867], "imposs": 821, "inputs_to_native_arrai": [821, 834, 835], "outputs_to_ivy_arrai": [821, 826, 827, 833, 834, 835], "secondli": [821, 826], "__ivy_array_function__": 821, "inspir": 821, "__torch_function__": 821, "myarrai": 821, "handled_funct": 821, "notimpl": 821, "issubclass": 821, "enough": [821, 825, 826, 827, 841, 848, 849, 850], "ivy_funct": 821, "my_ab": 821, "my_arrai": 821, "implicit_backend": [822, 846], "__dict__": [822, 837, 846], "ivy_original_dict": [822, 846], "fallback": 822, "live": [822, 823, 826, 857, 858, 863, 865], "scope": [822, 868, 872], "dlpack": 822, "set_dynamic_backend": 822, "unset_dynamic_backend": 822, "dynamic_backend_a": 822, "set_": 822, "unset_": 822, "backend_handl": 822, "requires_grad": 822, "memory_format": 822, "preserve_format": 822, "weren": 822, "vast": [822, 826, 867], "minor": [822, 844, 852], "fn_name_v_1p12_and_abov": 822, "fn_name_v_1p01_to_1p1": 822, "heavili": [823, 835, 852], "characterist": 823, "conf": 823, "cleanup": 823, "readm": [823, 852], "maxdepth": 823, "caption": 823, "related_work": 823, "deep_div": 823, "faq": 823, "glossari": 823, "autosummari": 823, "top_functional_toc": 823, "restructuredtext": 823, "discov": [823, 826], "ivy_toctree_caption_map": 823, "unfortun": [823, 832], "linker": 823, "foo": 823, "discussion_channel_map": 823, "1000043690254946374": 823, "1000043749088436315": 823, "forum": [823, 853], "seri": [823, 826, 838, 841, 867, 869], "discussion_paragraph": 823, "discord_link": 823, "channel_link": 823, "gg": 823, "zvqdvbznqj": 823, "799879767196958751": 823, "channel_id": 823, "autoskippablemethod": 823, "skippable_method_attribut": 823, "__qualname__": 823, "autodoc": 823, "__doc__": 823, "autoivydata": 823, "mutual": [824, 834], "containerwithelementwis": 824, "__repr__": 824, "__getattr__": [824, 860], "__setattr__": [824, 860], "__contains__": 824, "__getstate__": 824, "__setstate__": 824, "unpickl": 824, "num_dim": [824, 851], "restrict": [824, 825, 838, 846, 860, 864], "enforc": [824, 848], "lefthand": 824, "righthand": 824, "handle_nest": [824, 833, 834, 835, 846], "absenc": [824, 833, 867], "implicitli": [824, 836, 841, 846], "log_pr": [824, 834, 837], "intuit": [824, 841, 849, 850, 863], "chronolog": 824, "concurr": [824, 825, 834, 867], "despit": [824, 826, 827, 839, 846, 857, 864, 867], "__list__": 824, "whatsoev": [824, 834, 854, 873], "children": 824, "shallowest": 824, "deepest": 824, "rollback": 825, "incorpor": [825, 839, 849, 867], "techniqu": 825, "triplet": 825, "test_torch": [825, 839], "test_tensor": [825, 839], "test_torch_instance_arctan_": 825, "12500": 825, "daili": 825, "huge": [825, 849, 855, 857, 867, 873], "shoot": 825, "_reduce_loss": [825, 834, 837], "test_nn": 825, "test_loss": 825, "test_binary_cross_entropy_with_logit": 825, "test_cross_entropi": 825, "test_binary_cross_entropi": 825, "test_sparse_cross_entropi": 825, "test_loss_funct": 825, "test_torch_binary_cross_entropi": 825, "test_torch_cross_entropi": 825, "binary_cross_entropy_with_logit": 825, "torch_binary_cross_entropi": 825, "torch_cross_entropi": 825, "magic": 825, "pedagog": 825, "f_1": 825, "t_1": 825, "t_3": 825, "t_7": 825, "t_": 825, "f_m": 825, "cyclic": 825, "intellig": [825, 841, 869], "tests_fil": 825, "file_nam": [825, 841, 842], "tests_lin": 825, "correspondingli": 825, "tests_to_run": 825, "determine_tests_lin": 825, "mongodb": 825, "databas": [825, 841], "mechan": [825, 852], "secret": 825, "db": 825, "ssh_deploy_kei": 825, "suffic": [825, 835, 841], "massiv": 825, "yml": 825, "felicit": 825, "clone_map": 825, "deploy_kei": 825, "user_email": 825, "user_nam": 825, "target_branch": 825, "github_serv": 825, "deploy_key_fil": 825, "ssh_known_hosts_fil": 825, "known_host": 825, "keyscan": 825, "git_ssh_command": 825, "userknownhostsfil": 825, "email": [825, 857], "methodologi": 825, "master1": 825, "restructur": 825, "_map": 825, "t_2": 825, "t_n": 825, "index_map": 825, "test_map": 825, "snowbal": 825, "recalibr": 825, "workflow_dispatch": 825, "cron": 825, "saturdai": 825, "night": 825, "pm": 825, "gut": 825, "lesser": [825, 830], "lol": 825, "hour": [825, 858], "cater": [825, 840], "master2": 825, "master32": 825, "synchron": 825, "runner2": 825, "corrupt": 825, "decoupl": [825, 850], "150": 825, "cycl": [825, 841], "yellow": 825, "queu": 825, "redirect": 825, "book": 825, "onrend": 825, "jo": 825, "ran": 825, "clickabl": 825, "all_dtyp": 826, "all_numeric_dtyp": 826, "all_int_dtyp": 826, "all_float_dtyp": 826, "replic": [826, 836, 837, 838], "thirdli": 826, "native_float32": 826, "importantli": [826, 848, 851], "arguabl": [826, 827, 838], "jaxarrai": [826, 827, 830, 833, 837, 842, 846], "_handle_0_dim_output": 826, "subtli": [826, 837], "promote_types_frontend_nam": 826, "promote_types_of_frontend_name_input": 826, "frontend_nam": 826, "upcast": 826, "nearli": [826, 833, 835, 867], "downcast": 826, "footprint": 826, "concret": 826, "aris": [826, 832, 852, 857], "utterli": 826, "meant": [826, 828, 837], "twice": 826, "disadvantag": 826, "relax": 826, "f64": 826, "unwant": 826, "primaci": 826, "resembl": 826, "compound": 826, "infer_dtyp": [826, 827, 833, 835], "settabl": [826, 827], "handle_out_argu": [826, 827, 833, 834, 835, 837, 846], "infer_devic": [826, 827, 833, 835], "deleg": [826, 874], "shape_to_tupl": 826, "with_supported_dtyp": 826, "unment": 826, "_cast_for_unary_op": [826, 834, 837], "target_typ": 826, "syntax": [826, 856, 857, 867], "unsupported_dtyp": 826, "supported_dtypes_and_devic": 826, "with_unsupported_device_and_dtyp": 826, "globals_getter_func": 826, "f2": 826, "lack": [826, 837, 867, 874], "mandat": [826, 837, 841, 842, 857], "confus": [826, 830, 837, 844, 854, 858], "inconsist": [826, 830, 836], "is_nan": 826, "supported_dtyp": 826, "anytim": 826, "84530": 826, "unwarr": 826, "risk": [826, 873], "needlessli": 826, "bloat": 826, "undergo": [826, 852], "unsupported_devic": 826, "supported_devic": 826, "downsid": 826, "coverag": [826, 841], "undesir": 826, "accomplish": 826, "upcast_data_typ": 826, "downcast_data_typ": 826, "crosscast_data_typ": 826, "cast_data_typ": 826, "downcast_data_dtyp": 826, "vice": 826, "versa": 826, "till": 826, "crosscast": 826, "exmp1": 826, "watch": [826, 838], "handle_numpy_arrays_in_specific_backend": [826, 833], "cate": 826, "understood": 826, "consumpt": [826, 871], "dual": 827, "categor": [827, 834, 838], "210": 827, "_handle_except": [827, 830], "1013": 827, "_handle_nest": [827, 830], "905": 827, "_handle_out_argu": [827, 830], "441": 827, "_inputs_to_native_arrai": [827, 830], "new_arg": [827, 830], "new_kwarg": [827, 830], "_outputs_to_ivy_arrai": [827, 830], "358": 827, "_handle_array_funct": [827, 830], "_handle_device_shift": 827, "handle_device_shift": [827, 835], "crucial": [827, 836], "device_shifting_dev": 827, "__enter__": 827, "__exit__": 827, "mostli": [827, 837, 841], "soft_devic": 827, "eight": [828, 845], "op_nam": 828, "__r": 828, "unsurprisingli": [828, 856], "recap": [828, 850], "combinatori": 828, "okai": [828, 844, 846], "my_func": [828, 842], "some_flag": 828, "another_flag": 828, "jointli": 828, "5574077": 828, "1850398": 828, "5463025": 828, "8422884": 828, "91601413": 828, "9647598": 828, "3738229": 828, "1597457": 828, "0963247": 828, "9955841": 828, "3278579": 828, "asid": 828, "increasingli": [828, 860], "14254655": 828, "1578213": 828, "380515": 828, "trivial": [828, 837], "failing_fn_nam": 828, "onlin": [828, 829], "minutest": 828, "fault": [828, 867], "contrast": [829, 833, 838, 873], "preview": 829, "incorrectli": [829, 860], "needless": [829, 839], "renam": [829, 838], "judgment": 829, "operator_nam": 829, "succinct": 829, "docst": 829, "native_error": 830, "_combine_messag": 830, "truli": [830, 848], "wrong": [830, 832, 835, 838, 844], "198": 830, "392": 830, "_handle_array_like_without_promot": 830, "805": 830, "432": 830, "349": 830, "other_test": 830, "523": 830, "_handle_numpy_out": 830, "396": [830, 850], "_outputs_to_numpy_arrai": 830, "_inputs_to_ivy_arrays_np": 830, "ivy_arg": 830, "ivy_kwarg": 830, "453": 830, "_from_zero_dim_arrays_to_scalar": 830, "truth_value_test": 830, "visibl": 830, "unwieldi": 830, "squash": 830, "hide": [830, 860], "cleaner": [830, 849], "caught": [830, 832], "rethrow": 830, "_print_traceback_histori": 830, "error_stack": 830, "axiserror": 830, "polici": [830, 835, 841, 843], "moreov": 830, "submoodul": 831, "test_jax_transpos": 831, "manipulaiton": 831, "test_jax": [831, 839], "test_numpi": [831, 839], "test_manipul": [831, 839, 841], "preconditionnotmet": 831, "densetensor": 831, "holder_": 831, "phi": 831, "dense_tensor_impl": 831, "array_and_ax": 831, "aaegbaegaqaaaaaaaaaaaaab": 831, "black": 832, "flake8": 832, "linter": 832, "autoflak": 832, "docformatt": 832, "pydocstyl": 832, "yaml": 832, "patch1687898304": 832, "8072": 832, "3516aed563": 832, "reformat": 832, "akshai": 832, "jain": 832, "gui": 832, "cryptic": 832, "garden": 832, "utc": 832, "didn": 832, "human": 832, "intervent": 832, "typo": 832, "ui": 832, "handle_array_like_without_promot": [833, 835], "to_native_arrays_and_back": [833, 835, 846], "handle_array_funct": [833, 835], "inputs_to_native_shap": [833, 835], "rational": [833, 837, 844], "__div__": [833, 844], "484": 833, "annot": 833, "brittl": 833, "freeli": 833, "technic": [833, 837, 852, 867, 869], "original_typ": 833, "cumbersom": 833, "hinder": [833, 856], "venn": 834, "diagram": [834, 873], "light": [834, 842, 852, 854, 868, 873], "maximis": 834, "encompass": 834, "partial_mixed_handl": [834, 835, 844], "handle_partial_mixed_funct": [834, 835, 844], "fn_decor": 834, "mixed_backend_wrapp": [834, 837], "to_add": 834, "to_skip": 834, "inputs_to_ivy_arrai": [834, 835], "modif": [834, 867], "briefli": [834, 841, 849], "get_all_arrays_on_dev": 834, "outputs_to_ivy_shap": 835, "outputs_to_native_arrai": 835, "handle_view_index": [835, 837], "handle_view": [835, 837], "handle_rag": 835, "handle_backend_invalid": 835, "handle_nan": 835, "to_native_shapes_and_back": 835, "modern": [836, 856, 857, 872], "inter_func": 836, "custom_grad_fn": 836, "args1": 836, "eas": [836, 867], "speak": 837, "val_n": 837, "base_idx": 837, "_manipulation_stack": 837, "base_flat": 837, "_view_ref": 837, "_update_view": 837, "contigu": 837, "c_contigu": 837, "ascontiguousarrai": 837, "copyto": 837, "_is_vari": 837, "tensor_scatter_nd_upd": 837, "is_vari": 837, "_update_torch_view": 837, "predominantli": [837, 842], "support_native_out": [837, 846], "_scalar_output_to_0d_arrai": 837, "_wrap_fn": 837, "dim0": 837, "dim1": 837, "res_floor": 837, "extent": [837, 838], "to_out_fn": 837, "add_wrapp": 837, "paradigm": [837, 852, 867], "expans": 837, "brief": [837, 841], "weak": 837, "_torch_bas": 837, "_torch_view_ref": 837, "_torch_manipul": 837, "weakli": 837, "adequ": 837, "tf_frontend": 838, "lax": [838, 839, 844, 851, 852], "torch_frontend": [838, 839], "numpy_frontend": 838, "jax_frontend": 838, "to_ivy_arrays_and_back": [838, 839], "fidel": 838, "algebra": [838, 865, 866, 867, 870, 874], "dynamic": 838, "mimic": 838, "arithmetic_oper": 838, "handle_numpy_out": 838, "handle_numpy_dtyp": 838, "handle_numpy_cast": 838, "from_zero_dim_arrays_to_scalar": 838, "_add": 838, "same_kind": 838, "subok": [838, 839, 844], "promote_types_of_numpy_input": 838, "underscor": 838, "unhandl": 838, "trigonometric_funct": 838, "_tan": 838, "check_tensorflow_cast": 838, "raw_op": [838, 839], "map_raw_ops_alia": 838, "output_typ": 838, "kwargs_to_upd": 838, "pointwise_op": 838, "sensibl": 838, "ahead": [838, 842, 867], "reduce_logsumexp": 838, "logsumexp": 838, "trick": 838, "max_input_tensor": 838, "preferred_element_typ": 838, "languag": [838, 846, 854, 856, 858, 865, 868, 870, 871, 872, 873], "offer": [838, 850, 858, 867, 873, 874], "finer": 838, "logicaland": 838, "np_frontend": 838, "_ivy_arrai": 838, "radd": 838, "_init_data": 838, "_process_str_data": 838, "_dtype": [838, 839, 848], "_shape": [838, 848], "govern": 838, "promote_types_of_": 838, "_input": 838, "promote_types_of_torch_input": [838, 839], "handle_numpy_casting_speci": 838, "new_fn": 838, "equiv": 838, "unsaf": 838, "array_type_test": 838, "_isfinit": 838, "organis": 838, "grasp": 838, "youtub": 838, "knowledg": 839, "np_frontend_help": 839, "open_task": 839, "test_lax": 839, "test_oper": 839, "test_jax_tan": 839, "test_mathematical_funct": 839, "test_trigonometric_funct": 839, "dtypes_values_cast": 839, "dtypes_values_casting_dtyp": 839, "arr_func": 839, "get_num_positional_args_ufunc": 839, "test_numpy_tan": 839, "handle_where_and_array_bool": 839, "test_tensorflow": 839, "test_math": 839, "test_tensorflow_tan": 839, "test_pointwise_op": 839, "test_torch_tan": 839, "_fill_valu": 839, "test_glob": 839, "test_jax_ful": 839, "test_from_shape_or_valu": 839, "_input_fill_and_dtyp": 839, "dtype_and_input": 839, "dtype_to_cast": 839, "input_fill_dtyp": 839, "test_numpy_ful": 839, "test_raw_op": 839, "test_tensorflow_fil": 839, "test_creation_op": 839, "with_arrai": 839, "test_torch_ful": 839, "add_nois": 839, "all_clos": 839, "_get_dtype_and_matrix": 839, "test_torch_qr": 839, "frontend_q": 839, "frontend_r": 839, "walkthrough": 839, "comparison_op": 839, "test_comparison_op": 839, "test_torch_great": 839, "all_alias": 839, "test_ndarrai": 839, "test_numpy_instance_add__": 839, "test_tensorflow_instance_add": 839, "1e04": 839, "allow_infin": 839, "test_torch_instance_add": 839, "_arrays_idx_n_dtyp": 839, "surprisingli": 839, "closest_relevant_group": 839, "strive": [839, 841, 844, 852, 869], "craft": [840, 841], "tailor": 840, "clariti": [840, 841, 844, 867], "weav": 840, "thrill": 840, "brim": 840, "stand": [840, 841], "landscap": 840, "forese": 840, "refin": 840, "inquiri": 840, "fixtur": 841, "hit": [841, 846, 860], "eleg": [841, 867], "unexplor": 841, "artifact": 841, "bespok": 841, "_array_or_typ": 841, "rigor": [841, 856], "test_default_int_dtyp": 841, "print_hypothesis_exampl": 841, "custom_strategi": 841, "randomis": 841, "simplist": 841, "intricaci": 841, "glanc": 841, "one_of": 841, "datum": 841, "pipe": 841, "array_or_scal": 841, "len_of_arrai": 841, "test_add": 841, "test_gpu_is_avail": 841, "pretest": 841, "snippet": [841, 861], "outlier": 841, "frontend_test": 841, "frontend_method": 841, "criterion": 841, "valid_ax": 841, "hoc": 841, "11228": 841, "268": 841, "wherev": 841, "9622": 841, "28136": 841, "6375": 841, "12720": 841, "21354": 841, "900e": 841, "57384": 841, "25687": 841, "248": 841, "test_devic": 841, "array_shap": 841, "test_lay": 841, "some_sequ": 841, "arrays_valu": 841, "36418": 841, "213": 841, "21716926": 841, "none_or_list_of_float": 841, "get_prob": 841, "103515625e": 841, "099609375": 841, "probabilist": 841, "number_positional_argu": 841, "unreproduc": 841, "x_and_linear": 841, "is_torch_backend": 841, "x_shape": [841, 846], "weight_shap": 841, "bias_shap": 841, "ivy_np": 841, "valid_float_dtyp": 841, "test_demo": 841, "failing_test": 841, "traceback": 841, "shrink": 841, "prescrib": 841, "scratch": 841, "therebi": 841, "test_gelu": 841, "test_fil": 841, "phase": [841, 852, 867], "notabl": [841, 867], "max_exampl": 841, "deadlin": 841, "weird": 841, "systemat": 841, "safeguard": 841, "inabl": 841, "test_result_typ": 841, "9090909090909091": 841, "judgement": 842, "some_namespac": 842, "some_backend": 842, "another_backend": 842, "refactor": 842, "ongo": 842, "check_fill_value_and_dtype_are_compat": 842, "_to_devic": 842, "shouldn": [842, 860], "pin": 842, "unpinn": 842, "culmin": 842, "unsett": 843, "array_significant_figur": 843, "array_decimal_valu": 843, "warning_level": 843, "nan_polici": 843, "stablest": 843, "constantli": [844, 856], "answer": [844, 848, 852], "contradict": 844, "entail": 844, "sacrif": 844, "jacfwd": 844, "jacrev": 844, "banner": 844, "expens": 844, "incredibli": [844, 849, 852, 870], "price": 844, "pai": 844, "intrus": 844, "x_beta": 844, "equip": 844, "simplif": 844, "allevi": 844, "ineffici": [844, 852, 867], "fuse": 844, "hybrid": 844, "workaround": 844, "slip": 844, "radar": 844, "stumbl": 844, "gone": [845, 857], "fulfil": 845, "syntact": [846, 851], "power_seq": 846, "_determine_backend_from_arg": 846, "importlib": 846, "_backend_dict": 846, "x_flat": 846, "wi": 846, "wi_x": 846, "wii_x": 846, "wif_x": 846, "wig_x": 846, "wio_x": 846, "wh": 846, "ht": 846, "ct": 846, "hts_list": 846, "wii_xt": 846, "wif_xt": 846, "wig_xt": 846, "wio_xt": 846, "htm1": 846, "ctm1": 846, "wh_htm1": 846, "whi_htm1": 846, "whf_htm1": 846, "whg_htm1": 846, "who_htm1": 846, "ft": 846, "ot": 846, "reliabl": 846, "scalabl": [846, 856, 872, 873], "sacrific": 846, "hear": 846, "virtu": [846, 864], "pure_ivi": 846, "pure_torch": 846, "unclean": 846, "wx": 846, "temp": 846, "ivy_func": 846, "emphas": 846, "example_input": 846, "static_argnum": [846, 860], "static_argnam": [846, 860], "primit": [847, 852, 865, 867], "upcom": 847, "hierarch": [847, 849, 850, 867], "arraywithactiv": 848, "arraywithcr": 848, "arraywithdatatyp": 848, "arraywithdevic": 848, "arraywithgener": 848, "arraywithgradi": 848, "arraywithimag": 848, "arraywithlay": 848, "arraywithlinearalgebra": 848, "arraywithloss": 848, "arraywithmanipul": 848, "arraywithnorm": 848, "arraywithrandom": 848, "arraywithsearch": 848, "arraywithset": 848, "arraywithsort": 848, "arraywithstatist": 848, "arraywithutil": 848, "_init": 848, "_size": 848, "_devic": 848, "_dev_str": 848, "_pre_repr": 848, "_post_repr": 848, "framework_str": 848, "pypep8nam": 848, "immut": 848, "claim": 848, "_native_wrapp": 848, "genuin": 848, "some_method": 848, "rewritten": 848, "littl": [848, 856, 869], "wonder": [848, 856, 858], "compartment": 848, "newshap": 848, "new_shap": 848, "tidi": 848, "crystal": 848, "ton": 849, "ado": [849, 850], "soup": 849, "walk": [849, 850], "cnt": 849, "3333335": 849, "autocomplet": 849, "midwai": 849, "agent": 849, "total_spe": 849, "total_height": 849, "total_width": 849, "ag": 849, "tot": 849, "total_": 849, "total_h": 849, "cnt0": 849, "cnt1": 849, "diff_0": 849, "diff_1": 849, "config0": 849, "config1": 849, "l0": 849, "decoder__l0": 849, "decoder__l1": 849, "encoder__l0": 849, "encoder__l1": 849, "l0__b": 849, "l0__w": 849, "l1__b": 849, "l1__w": 849, "printabl": 849, "foresight": 849, "untidili": 849, "update_ag": 849, "normalize_img": 849, "img_max": 849, "reduce_max": 849, "img_min": 849, "reduce_min": 849, "img_rang": 849, "agent_posit": 849, "agent_veloc": 849, "agent_cam_front_rgb": 849, "agent_cam_front_depth": 849, "agent_cam_rear_rgb": 849, "agent_cam_rear_depth": 849, "agent_cam_lidar": 849, "camera": 849, "front_rgb": 849, "front_depth": 849, "rear_rgb": 849, "rear_depth": 849, "lidar": 849, "rgb": 849, "rear": 849, "veloc": 849, "cam": 849, "cam_max": 849, "cam_min": 849, "cam_rang": 849, "five": 849, "allud": [849, 857], "perman": 849, "_cnt": 849, "img_": 849, "_dataset_s": 849, "_batch_siz": 849, "_count": [849, 850], "__next__": 849, "img_fnam": 849, "loaded_img": 849, "batch_slic": 849, "0145": 849, "addbackward0": 849, "_create_vari": 850, "_input_channel": 850, "_output_channel": 850, "_w_shape": 850, "_b_shape": 850, "_with_bia": 850, "764": 850, "872": 850, "211": 850, "439": 850, "nightmar": 850, "overcom": 850, "v1": 850, "key0": 850, "linear3": 850, "v2": 850, "preced": [850, 857], "_w_init": 850, "_b_init": 850, "misnom": 850, "saw": 850, "_beta1": 850, "_beta2": 850, "_epsilon": 850, "_mw": 850, "_vw": 850, "_first_pass": 850, "_should_trac": 850, "new_v": 850, "_lr": 850, "_inplac": 850, "_stop_gradi": 850, "sparse_funct": 851, "vital": [851, 856], "_linear": 851, "jax_graph": 851, "to_backend": 851, "thinli": 851, "to_haiku_modul": 851, "loss_fn_t": 851, "without_apply_rng": 851, "update_rul": 851, "tree_multimap": 851, "trax": [851, 858], "objax": [851, 858], "matur": [852, 857, 867], "doubt": 852, "grate": [852, 875], "probe": 852, "lock": 852, "dex": 852, "tricki": [852, 854], "predictor": 852, "tight": 852, "dispatch": [852, 867, 870], "ast": 852, "autodiff": 852, "shine": 852, "merci": 852, "compet": [852, 867], "parallelis": 852, "spmd": 852, "mixtur": 852, "expert": 852, "sophist": 852, "depart": 852, "hundr": 852, "broadli": [852, 873], "supplementari": 852, "reusabl": [852, 865, 867], "fanci": [852, 867], "fusion": [852, 871], "lose": 852, "pmap": 852, "eventu": 852, "supplement": 852, "backdoor": 852, "callback": 852, "somewhat": [852, 867], "outsourc": 852, "ivy_root": 853, "pem": 853, "api_kei": 853, "asap": 853, "nail": 854, "scientist": 854, "correl": 854, "collabor": [855, 856, 857], "consortium": [855, 857], "grown": 856, "rapidli": 856, "shareabl": 856, "outdat": 856, "newest": 856, "prototyp": [856, 867], "obsolet": [856, 858], "invent": 856, "simultan": [856, 858], "runner": 856, "principl": [856, 865, 867, 870], "2006": 856, "cloth": 856, "forgiven": 857, "eyebrow": 857, "somehow": 857, "industri": [857, 867, 869], "funni": 857, "comic": 857, "charger": 857, "instant": 857, "contrari": 857, "bumpi": 857, "road": 857, "technologi": [857, 865, 869], "motherboard": 857, "raid": 857, "bluetooth": 857, "wireless": 857, "btx": 857, "sata": 857, "tcp": 857, "ip": 857, "smtp": 857, "send": [857, 872], "gmail": 857, "outlook": 857, "growth": [857, 870], "necess": 857, "2015": [857, 867], "aros": 857, "ourselv": [857, 873], "quansight": [857, 873], "compani": [857, 863], "apach": [857, 869, 873], "onnx": [857, 865, 873], "cupi": [857, 867, 874], "modin": 857, "spyder": 857, "octoml": [857, 873], "sponsor": 857, "lg": 857, "electron": 857, "shaw": 857, "pursuit": 857, "complianc": 857, "convinc": 857, "celebr": 857, "streamlin": [858, 870], "awesom": 858, "love": 858, "slew": 858, "inevit": [858, 868], "erron": 858, "poor": 858, "spin": 858, "sake": 858, "wouldn": 858, "frantic": 858, "lucid": 858, "honk": 858, "hasn": 858, "spend": [858, 867], "sonnet": 858, "trainer": [858, 874], "quo": 858, "dopamin": 858, "ignit": 858, "catalyst": 858, "lightn": 858, "fastai": 858, "publicli": [860, 861, 862], "logger": 860, "arg_stateful_idx": 860, "kwarg_stateful_idx": 860, "include_gener": 860, "array_cach": 860, "return_backend_traced_fn": 860, "lazygraph": [860, 861, 862], "sum_j": 860, "traced_fn": 860, "impos": 860, "comp_func": 860, "trade": 860, "bake": 860, "cont": 860, "new_attribut": 860, "resnet50": 860, "breed": 860, "resnetforimageclassif": [860, 861], "traced_graph": 860, "predicted_label": 860, "debug_mod": 861, "rough": 861, "transformed_with_st": 861, "bigger": 861, "hf": 861, "tf_model": 861, "tf_input": 861, "transpile_kwarg": 862, "transpiled_func": 862, "unified_func": 862, "rwork": 863, "vendor": [863, 869], "complimentari": [863, 873], "acycl": [863, 868], "fillna": 864, "pct_chang": 864, "tail": 864, "_____________": 864, "__________________________________________________________________": 864, "scaffold": [865, 873], "heart": 865, "toolchain": [865, 870], "assembli": [865, 872, 873], "idl": 865, "middl": 865, "emit": 865, "gnu": [865, 870], "broader": 865, "heterogen": 865, "aid": 865, "coprocessor": 865, "programm": [865, 872], "gate": 865, "onednn": 865, "sit": [865, 868, 873], "tandem": 865, "possess": 865, "khrono": [866, 872], "appl": 866, "coremltool": 866, "albeit": 866, "promin": 867, "abbrevi": 867, "laboratori": 867, "proprietari": [867, 871, 872], "mathwork": 867, "commerci": 867, "1984": 867, "toolbox": 867, "mupad": 867, "simulink": 867, "graphic": [867, 871, 872], "simul": 867, "million": [867, 870], "worldwid": 867, "scienc": [867, 869], "econom": 867, "2001": 867, "od": 867, "solver": 867, "cython": 867, "friendli": 867, "2002": 867, "lua": 867, "luajit": 867, "idiap": 867, "epfl": 867, "2005": 867, "numarrai": 867, "cpython": 867, "partli": 867, "2007": 867, "forest": 867, "boost": 867, "dbscan": 867, "inbuilt": 867, "esqu": 867, "aesara": 867, "datafram": 867, "2012": 867, "polymorph": 867, "mpi": 867, "openmp": 867, "glue": 867, "jaot": 867, "nasa": 867, "cern": 867, "climat": 867, "allianc": 867, "influenti": 867, "2014": 867, "scala": 867, "ship": 867, "forgiv": 867, "decemb": 867, "announc": 867, "mainten": 867, "v7": 867, "meaning": 867, "2016": 867, "imper": 867, "amazon": 867, "traction": 867, "cognit": [867, 874], "grade": 867, "dnn": 867, "backpropag": 867, "succumb": 867, "came": 867, "monitor": 867, "hobbyist": 867, "tremend": 867, "ecosystem": 867, "gear": 867, "batteri": 867, "zygot": 867, "jl": 867, "workload": 867, "daggerflux": 867, "frontier": 867, "hessian": 867, "2018": 867, "lightweight": [867, 874], "shortcom": 867, "barrier": 867, "inexperienc": 867, "underdevelop": 867, "fanat": 867, "ounc": 867, "infanc": 867, "emerg": 867, "nich": 867, "mobil": 867, "lite": 867, "enterpris": 867, "reinvent": [867, 869], "inertia": 867, "creator": [867, 869], "paszk": 867, "hi": 867, "bulk": 867, "haskel": 867, "dataflow": 868, "trace_modul": 868, "scriptfunct": 868, "scriptmodul": 868, "fake": 868, "proxi": 868, "graphmodul": 868, "travi": 869, "oliph": 869, "leader": 869, "cornerston": 869, "numba": 869, "numfocu": 869, "pydata": 869, "confer": 869, "consult": 869, "servic": 869, "devop": 869, "mlop": 869, "dashboard": 869, "startup": 869, "mlir": [869, 870, 873], "Their": 869, "held": 869, "presum": 869, "llvm": [869, 872], "founder": 869, "tvm": [869, 873], "sustain": 869, "empow": 869, "har": 869, "burden": 869, "precompil": 870, "executor": 870, "julia": [870, 873], "fsf": 870, "gpl": 870, "biggest": [870, 873], "throughput": 871, "gpgpu": 871, "classic": 872, "sycl": 872, "dpc": 872, "maco": 872, "oneapi": 872, "ia": 872, "aka": 872, "xeon": 872, "gen9": 872, "xe": 872, "arria": 872, "gx": 872, "fpga": 872, "lofti": 873, "ambit": 873, "realm": 873, "bedrock": 873, "flux": 873, "bite": 873, "chew": 873, "eagerpi": 873, "tensorli": 873, "thinc": 873, "neuropod": 873, "fx": 873, "retrain": 873, "closer": 873, "greatli": 873, "modular": 873, "anywher": 873, "theano": 874, "plaidml": 874, "partial_svd": 874, "excel": 874, "subsystem": 874, "samund": 875, "singh": 875, "samthakur587": 875, "suraj": 875, "muhammad": 875, "ishaqu": 875, "muhammadnizamani": 875, "suyash": 875, "gupta": 875, "sgalpha01": 875, "sanjai": 875, "suthar": 875, "sanjay8602": 875, "zera": 875, "marveen": 875, "lyngkhoi": 875, "fleventi": 875, "nitesh": 875, "kesharwani": 875, "niteshk84": 875, "sarvesh": 875, "jackson": 875, "mcclintock": 875, "jacksondm33": 875, "ayush": 875, "lokar": 875, "ayush111111": 875, "chaitanya": 875, "lakhchaura": 875, "zenithflux": 875, "david": 875, "adlai": 875, "nettei": 875, "garima": 875, "saroj": 875, "androgari": 875, "lee": 875, "bissessar": 875, "leebissessar5": 875, "mostafa": 875, "gamal": 875, "mr": 875, "array22": 875, "ogban": 875, "ugot": 875, "rahul": 875, "prem": 875, "rp097": 875, "rohit": 875, "kumar": 875, "salla": 875, "rohitsalla": 875, "shreya": 875, "srikar": 875, "vedantam": 875, "shruzki": 875, "waqar": 875, "ahm": 875, "waqaarahm": 875, "aryan": 875, "pandei": 875, "aryan8912": 875, "dhruv": 875, "sharma": 875, "druvdub": 875, "kacper": 875, "ko\u017cdo\u0144": 875, "kozdon": 875, "mehmet": 875, "bilgehan": 875, "bezcioglu": 875, "bilgehanmehmet": 875, "sheroz": 875, "khan": 875, "ksheroz": 875, "muzakkir": 875, "hussain": 875, "muzakkirhussain011": 875}, "objects": {"ivy.Array": [[217, 0, 1, "", "abs"], [218, 0, 1, "", "acos"], [219, 0, 1, "", "acosh"], [612, 0, 1, "", "adam_step"], [613, 0, 1, "", "adam_update"], [386, 0, 1, "", "adaptive_avg_pool1d"], [387, 0, 1, "", "adaptive_avg_pool2d"], [388, 0, 1, "", "adaptive_max_pool2d"], [389, 0, 1, "", "adaptive_max_pool3d"], [220, 0, 1, "", "add"], [421, 0, 1, "", "adjoint"], [764, 0, 1, "", "all"], [531, 0, 1, "", "all_equal"], [331, 0, 1, "", "allclose"], [332, 0, 1, "", "amax"], [333, 0, 1, "", "amin"], [221, 0, 1, "", "angle"], [765, 0, 1, "", "any"], [741, 0, 1, "", "argmax"], [742, 0, 1, "", "argmin"], [750, 0, 1, "", "argsort"], [743, 0, 1, "", "argwhere"], [534, 0, 1, "", "array_equal"], [457, 0, 1, "", "as_strided"], [125, 0, 1, "", "asarray"], [222, 0, 1, "", "asin"], [223, 0, 1, "", "asinh"], [535, 0, 1, "", "assert_supports_inplace"], [458, 0, 1, "", "associative_scan"], [149, 0, 1, "", "astype"], [224, 0, 1, "", "atan"], [225, 0, 1, "", "atan2"], [226, 0, 1, "", "atanh"], [459, 0, 1, "", "atleast_1d"], [460, 0, 1, "", "atleast_2d"], [461, 0, 1, "", "atleast_3d"], [391, 0, 1, "", "avg_pool1d"], [392, 0, 1, "", "avg_pool2d"], [393, 0, 1, "", "avg_pool3d"], [498, 0, 1, "", "batch_norm"], [422, 0, 1, "", "batched_outer"], [505, 0, 1, "", "bernoulli"], [506, 0, 1, "", "beta"], [334, 0, 1, "", "binarizer"], [693, 0, 1, "", "binary_cross_entropy"], [517, 0, 1, "", "bincount"], [227, 0, 1, "", "bitwise_and"], [228, 0, 1, "", "bitwise_invert"], [229, 0, 1, "", "bitwise_left_shift"], [230, 0, 1, "", "bitwise_or"], [231, 0, 1, "", "bitwise_right_shift"], [232, 0, 1, "", "bitwise_xor"], [309, 0, 1, "", "blackman_window"], [150, 0, 1, "", "broadcast_arrays"], [151, 0, 1, "", "broadcast_to"], [152, 0, 1, "", "can_cast"], [233, 0, 1, "", "ceil"], [292, 0, 1, "", "celu"], [664, 0, 1, "", "cholesky"], [696, 0, 1, "", "clip"], [537, 0, 1, "", "clip_matrix_norm"], [538, 0, 1, "", "clip_vector_norm"], [465, 0, 1, "", "column_stack"], [697, 0, 1, "", "concat"], [466, 0, 1, "", "concat_from_sequence"], [423, 0, 1, "", "cond"], [335, 0, 1, "", "conj"], [698, 0, 1, "", "constant_pad"], [647, 0, 1, "", "conv1d"], [648, 0, 1, "", "conv1d_transpose"], [649, 0, 1, "", "conv2d"], [650, 0, 1, "", "conv2d_transpose"], [651, 0, 1, "", "conv3d"], [652, 0, 1, "", "conv3d_transpose"], [126, 0, 1, "", "copy_array"], [336, 0, 1, "", "copysign"], [518, 0, 1, "", "corrcoef"], [234, 0, 1, "", "cos"], [235, 0, 1, "", "cosh"], [337, 0, 1, "", "count_nonzero"], [519, 0, 1, "", "cov"], [665, 0, 1, "", "cross"], [694, 0, 1, "", "cross_entropy"], [520, 0, 1, "", "cummax"], [521, 0, 1, "", "cummin"], [754, 0, 1, "", "cumprod"], [755, 0, 1, "", "cumsum"], [394, 0, 1, "", "dct"], [541, 0, 1, "", "default"], [236, 0, 1, "", "deg2rad"], [655, 0, 1, "", "depthwise_conv2d"], [666, 0, 1, "", "det"], [194, 0, 1, "", "dev"], [395, 0, 1, "", "dft"], [667, 0, 1, "", "diag"], [424, 0, 1, "", "diagflat"], [668, 0, 1, "", "diagonal"], [338, 0, 1, "", "diff"], [339, 0, 1, "", "digamma"], [507, 0, 1, "", "dirichlet"], [237, 0, 1, "", "divide"], [425, 0, 1, "", "dot"], [656, 0, 1, "", "dropout"], [396, 0, 1, "", "dropout1d"], [397, 0, 1, "", "dropout2d"], [398, 0, 1, "", "dropout3d"], [467, 0, 1, "", "dsplit"], [468, 0, 1, "", "dstack"], [160, 0, 1, "", "dtype"], [426, 0, 1, "", "eig"], [670, 0, 1, "", "eigh"], [427, 0, 1, "", "eigh_tridiagonal"], [428, 0, 1, "", "eigvals"], [671, 0, 1, "", "eigvalsh"], [542, 0, 1, "", "einops_rearrange"], [543, 0, 1, "", "einops_reduce"], [544, 0, 1, "", "einops_repeat"], [756, 0, 1, "", "einsum"], [293, 0, 1, "", "elu"], [399, 0, 1, "", "embedding"], [128, 0, 1, "", "empty_like"], [238, 0, 1, "", "equal"], [239, 0, 1, "", "erf"], [340, 0, 1, "", "erfc"], [341, 0, 1, "", "erfinv"], [545, 0, 1, "", "exists"], [240, 0, 1, "", "exp"], [241, 0, 1, "", "exp2"], [469, 0, 1, "", "expand"], [699, 0, 1, "", "expand_dims"], [242, 0, 1, "", "expm1"], [310, 0, 1, "", "eye_like"], [400, 0, 1, "", "fft"], [401, 0, 1, "", "fft2"], [470, 0, 1, "", "fill_diagonal"], [162, 0, 1, "", "finfo"], [342, 0, 1, "", "fix"], [471, 0, 1, "", "flatten"], [700, 0, 1, "", "flip"], [472, 0, 1, "", "fliplr"], [473, 0, 1, "", "flipud"], [343, 0, 1, "", "float_power"], [243, 0, 1, "", "floor"], [244, 0, 1, "", "floor_divide"], [344, 0, 1, "", "fmax"], [245, 0, 1, "", "fmin"], [246, 0, 1, "", "fmod"], [474, 0, 1, "", "fold"], [546, 0, 1, "", "fourier_encode"], [345, 0, 1, "", "frexp"], [130, 0, 1, "", "from_dlpack"], [133, 0, 1, "", "full_like"], [508, 0, 1, "", "gamma"], [549, 0, 1, "", "gather"], [550, 0, 1, "", "gather_nd"], [247, 0, 1, "", "gcd"], [107, 0, 1, "", "gelu"], [429, 0, 1, "", "general_inner_product"], [553, 0, 1, "", "get_num_dims"], [346, 0, 1, "", "gradient"], [616, 0, 1, "", "gradient_descent_update"], [248, 0, 1, "", "greater"], [249, 0, 1, "", "greater_equal"], [499, 0, 1, "", "group_norm"], [294, 0, 1, "", "hardshrink"], [295, 0, 1, "", "hardsilu"], [108, 0, 1, "", "hardswish"], [296, 0, 1, "", "hardtanh"], [555, 0, 1, "", "has_nans"], [475, 0, 1, "", "heaviside"], [430, 0, 1, "", "higher_order_moment"], [449, 0, 1, "", "hinge_embedding_loss"], [522, 0, 1, "", "histogram"], [476, 0, 1, "", "hsplit"], [477, 0, 1, "", "hstack"], [450, 0, 1, "", "huber_loss"], [347, 0, 1, "", "hypot"], [478, 0, 1, "", "i0"], [404, 0, 1, "", "idct"], [405, 0, 1, "", "ifft"], [406, 0, 1, "", "ifftn"], [523, 0, 1, "", "igamma"], [165, 0, 1, "", "iinfo"], [250, 0, 1, "", "imag"], [431, 0, 1, "", "initialize_tucker"], [672, 0, 1, "", "inner"], [557, 0, 1, "", "inplace_decrement"], [558, 0, 1, "", "inplace_increment"], [559, 0, 1, "", "inplace_update"], [500, 0, 1, "", "instance_norm"], [408, 0, 1, "", "interpolate"], [673, 0, 1, "", "inv"], [561, 0, 1, "", "is_array"], [168, 0, 1, "", "is_bool_dtype"], [170, 0, 1, "", "is_float_dtype"], [172, 0, 1, "", "is_int_dtype"], [562, 0, 1, "", "is_ivy_array"], [563, 0, 1, "", "is_ivy_container"], [565, 0, 1, "", "is_native_array"], [174, 0, 1, "", "is_uint_dtype"], [348, 0, 1, "", "isclose"], [251, 0, 1, "", "isfinite"], [566, 0, 1, "", "isin"], [252, 0, 1, "", "isinf"], [253, 0, 1, "", "isnan"], [254, 0, 1, "", "isreal"], [568, 0, 1, "", "itemsize"], [451, 0, 1, "", "kl_div"], [433, 0, 1, "", "kron"], [452, 0, 1, "", "l1_loss"], [501, 0, 1, "", "l1_normalize"], [502, 0, 1, "", "l2_normalize"], [618, 0, 1, "", "lamb_update"], [619, 0, 1, "", "lars_update"], [734, 0, 1, "", "layer_norm"], [255, 0, 1, "", "lcm"], [349, 0, 1, "", "ldexp"], [109, 0, 1, "", "leaky_relu"], [350, 0, 1, "", "lerp"], [256, 0, 1, "", "less"], [257, 0, 1, "", "less_equal"], [512, 0, 1, "", "lexsort"], [351, 0, 1, "", "lgamma"], [657, 0, 1, "", "linear"], [134, 0, 1, "", "linspace"], [258, 0, 1, "", "log"], [259, 0, 1, "", "log10"], [260, 0, 1, "", "log1p"], [261, 0, 1, "", "log2"], [453, 0, 1, "", "log_poisson_loss"], [110, 0, 1, "", "log_softmax"], [262, 0, 1, "", "logaddexp"], [263, 0, 1, "", "logaddexp2"], [264, 0, 1, "", "logical_and"], [265, 0, 1, "", "logical_not"], [266, 0, 1, "", "logical_or"], [267, 0, 1, "", "logical_xor"], [297, 0, 1, "", "logit"], [298, 0, 1, "", "logsigmoid"], [135, 0, 1, "", "logspace"], [504, 0, 1, "", "lp_normalize"], [659, 0, 1, "", "lstm_update"], [437, 0, 1, "", "make_svd_non_negative"], [674, 0, 1, "", "matmul"], [479, 0, 1, "", "matricize"], [438, 0, 1, "", "matrix_exp"], [675, 0, 1, "", "matrix_norm"], [676, 0, 1, "", "matrix_power"], [677, 0, 1, "", "matrix_rank"], [678, 0, 1, "", "matrix_transpose"], [757, 0, 1, "", "max"], [409, 0, 1, "", "max_pool1d"], [410, 0, 1, "", "max_pool2d"], [411, 0, 1, "", "max_pool3d"], [412, 0, 1, "", "max_unpool1d"], [268, 0, 1, "", "maximum"], [758, 0, 1, "", "mean"], [524, 0, 1, "", "median"], [316, 0, 1, "", "mel_weight_matrix"], [136, 0, 1, "", "meshgrid"], [759, 0, 1, "", "min"], [269, 0, 1, "", "minimum"], [111, 0, 1, "", "mish"], [439, 0, 1, "", "mode_dot"], [352, 0, 1, "", "modf"], [480, 0, 1, "", "moveaxis"], [751, 0, 1, "", "msort"], [440, 0, 1, "", "multi_dot"], [660, 0, 1, "", "multi_head_attention"], [441, 0, 1, "", "multi_mode_dot"], [735, 0, 1, "", "multinomial"], [270, 0, 1, "", "multiply"], [271, 0, 1, "", "nan_to_num"], [525, 0, 1, "", "nanmean"], [526, 0, 1, "", "nanmedian"], [527, 0, 1, "", "nanmin"], [528, 0, 1, "", "nanprod"], [353, 0, 1, "", "nansum"], [137, 0, 1, "", "native_array"], [272, 0, 1, "", "negative"], [354, 0, 1, "", "nextafter"], [744, 0, 1, "", "nonzero"], [273, 0, 1, "", "not_equal"], [138, 0, 1, "", "one_hot"], [140, 0, 1, "", "ones_like"], [620, 0, 1, "", "optimizer_update"], [530, 0, 1, "", "optional_get_element"], [679, 0, 1, "", "outer"], [481, 0, 1, "", "pad"], [482, 0, 1, "", "partial_fold"], [483, 0, 1, "", "partial_tensor_to_vec"], [442, 0, 1, "", "partial_tucker"], [484, 0, 1, "", "partial_unfold"], [485, 0, 1, "", "partial_vec_to_tensor"], [701, 0, 1, "", "permute_dims"], [680, 0, 1, "", "pinv"], [509, 0, 1, "", "poisson"], [454, 0, 1, "", "poisson_nll_loss"], [274, 0, 1, "", "positive"], [275, 0, 1, "", "pow"], [299, 0, 1, "", "prelu"], [760, 0, 1, "", "prod"], [486, 0, 1, "", "put_along_axis"], [681, 0, 1, "", "qr"], [529, 0, 1, "", "quantile"], [276, 0, 1, "", "rad2deg"], [736, 0, 1, "", "randint"], [737, 0, 1, "", "random_normal"], [738, 0, 1, "", "random_uniform"], [277, 0, 1, "", "real"], [278, 0, 1, "", "reciprocal"], [360, 0, 1, "", "reduce"], [415, 0, 1, "", "reduce_window"], [112, 0, 1, "", "relu"], [300, 0, 1, "", "relu6"], [279, 0, 1, "", "remainder"], [702, 0, 1, "", "repeat"], [703, 0, 1, "", "reshape"], [177, 0, 1, "", "result_type"], [416, 0, 1, "", "rfft"], [417, 0, 1, "", "rfftn"], [704, 0, 1, "", "roll"], [487, 0, 1, "", "rot90"], [280, 0, 1, "", "round"], [663, 0, 1, "", "scaled_dot_product_attention"], [301, 0, 1, "", "scaled_tanh"], [573, 0, 1, "", "scatter_flat"], [574, 0, 1, "", "scatter_nd"], [752, 0, 1, "", "searchsorted"], [302, 0, 1, "", "selu"], [587, 0, 1, "", "shape"], [740, 0, 1, "", "shuffle"], [113, 0, 1, "", "sigmoid"], [281, 0, 1, "", "sign"], [355, 0, 1, "", "signbit"], [303, 0, 1, "", "silu"], [282, 0, 1, "", "sin"], [356, 0, 1, "", "sinc"], [283, 0, 1, "", "sinh"], [588, 0, 1, "", "size"], [419, 0, 1, "", "sliding_window"], [682, 0, 1, "", "slogdet"], [455, 0, 1, "", "smooth_l1_loss"], [456, 0, 1, "", "soft_margin_loss"], [488, 0, 1, "", "soft_thresholding"], [114, 0, 1, "", "softmax"], [115, 0, 1, "", "softplus"], [304, 0, 1, "", "softshrink"], [683, 0, 1, "", "solve"], [753, 0, 1, "", "sort"], [695, 0, 1, "", "sparse_cross_entropy"], [357, 0, 1, "", "sparsify_tensor"], [705, 0, 1, "", "split"], [284, 0, 1, "", "sqrt"], [285, 0, 1, "", "square"], [706, 0, 1, "", "squeeze"], [589, 0, 1, "", "stable_divide"], [590, 0, 1, "", "stable_pow"], [707, 0, 1, "", "stack"], [761, 0, 1, "", "std"], [420, 0, 1, "", "stft"], [621, 0, 1, "", "stop_gradient"], [591, 0, 1, "", "strides"], [286, 0, 1, "", "subtract"], [762, 0, 1, "", "sum"], [592, 0, 1, "", "supports_inplace_updates"], [684, 0, 1, "", "svd"], [444, 0, 1, "", "svd_flip"], [685, 0, 1, "", "svdvals"], [708, 0, 1, "", "swapaxes"], [489, 0, 1, "", "take"], [490, 0, 1, "", "take_along_axis"], [287, 0, 1, "", "tan"], [288, 0, 1, "", "tanh"], [306, 0, 1, "", "tanhshrink"], [445, 0, 1, "", "tensor_train"], [686, 0, 1, "", "tensordot"], [687, 0, 1, "", "tensorsolve"], [307, 0, 1, "", "threshold"], [308, 0, 1, "", "thresholded_relu"], [709, 0, 1, "", "tile"], [211, 0, 1, "", "to_device"], [594, 0, 1, "", "to_list"], [596, 0, 1, "", "to_numpy"], [597, 0, 1, "", "to_scalar"], [491, 0, 1, "", "top_k"], [688, 0, 1, "", "trace"], [289, 0, 1, "", "trapz"], [142, 0, 1, "", "tril"], [326, 0, 1, "", "trilu"], [492, 0, 1, "", "trim_zeros"], [143, 0, 1, "", "triu"], [290, 0, 1, "", "trunc"], [291, 0, 1, "", "trunc_divide"], [446, 0, 1, "", "truncated_svd"], [447, 0, 1, "", "tt_matrix_to_tensor"], [448, 0, 1, "", "tucker"], [493, 0, 1, "", "unflatten"], [494, 0, 1, "", "unfold"], [746, 0, 1, "", "unique_all"], [495, 0, 1, "", "unique_consecutive"], [747, 0, 1, "", "unique_counts"], [748, 0, 1, "", "unique_inverse"], [749, 0, 1, "", "unique_values"], [510, 0, 1, "", "unravel_index"], [327, 0, 1, "", "unsorted_segment_mean"], [328, 0, 1, "", "unsorted_segment_min"], [329, 0, 1, "", "unsorted_segment_sum"], [710, 0, 1, "", "unstack"], [610, 0, 1, "", "value_is_nan"], [689, 0, 1, "", "vander"], [763, 0, 1, "", "var"], [690, 0, 1, "", "vecdot"], [691, 0, 1, "", "vector_norm"], [692, 0, 1, "", "vector_to_skew_symmetric_matrix"], [496, 0, 1, "", "vsplit"], [497, 0, 1, "", "vstack"], [745, 0, 1, "", "where"], [358, 0, 1, "", "xlogy"], [711, 0, 1, "", "zero_pad"], [146, 0, 1, "", "zeros_like"], [359, 0, 1, "", "zeta"]], "ivy": [[631, 1, 1, "", "ArrayMode"], [627, 1, 1, "", "DefaultComplexDtype"], [628, 1, 1, "", "DefaultDevice"], [627, 1, 1, "", "DefaultDtype"], [627, 1, 1, "", "DefaultFloatDtype"], [627, 1, 1, "", "DefaultIntDtype"], [627, 1, 1, "", "DefaultUintDtype"], [383, 1, 1, "", "NativeSparseArray"], [626, 1, 1, "", "NestedSequence"], [631, 1, 1, "", "PreciseMode"], [628, 1, 1, "", "Profiler"], [383, 1, 1, "", "SparseArray"], [217, 2, 1, "", "abs"], [218, 2, 1, "", "acos"], [219, 2, 1, "", "acosh"], [632, 2, 1, "", "adam_step"], [632, 2, 1, "", "adam_update"], [386, 2, 1, "", "adaptive_avg_pool1d"], [387, 2, 1, "", "adaptive_avg_pool2d"], [388, 2, 1, "", "adaptive_max_pool2d"], [389, 2, 1, "", "adaptive_max_pool3d"], [220, 2, 1, "", "add"], [373, 2, 1, "", "adjoint"], [645, 2, 1, "", "all"], [631, 2, 1, "", "all_equal"], [638, 2, 1, "", "all_nested_indices"], [369, 2, 1, "", "allclose"], [369, 2, 1, "", "amax"], [369, 2, 1, "", "amin"], [221, 2, 1, "", "angle"], [645, 2, 1, "", "any"], [626, 2, 1, "", "arange"], [390, 2, 1, "", "area_interpolate"], [631, 2, 1, "", "arg_info"], [631, 2, 1, "", "arg_names"], [641, 2, 1, "", "argmax"], [641, 2, 1, "", "argmin"], [643, 2, 1, "", "argsort"], [641, 2, 1, "", "argwhere"], [626, 2, 1, "", "array"], [631, 2, 1, "", "array_equal"], [190, 2, 1, "", "as_ivy_dev"], [627, 2, 1, "", "as_ivy_dtype"], [191, 2, 1, "", "as_native_dev"], [627, 2, 1, "", "as_native_dtype"], [375, 2, 1, "", "as_strided"], [626, 2, 1, "", "asarray"], [222, 2, 1, "", "asin"], [223, 2, 1, "", "asinh"], [631, 2, 1, "", "assert_supports_inplace"], [375, 2, 1, "", "associative_scan"], [627, 2, 1, "", "astype"], [224, 2, 1, "", "atan"], [225, 2, 1, "", "atan2"], [226, 2, 1, "", "atanh"], [375, 2, 1, "", "atleast_1d"], [375, 2, 1, "", "atleast_2d"], [375, 2, 1, "", "atleast_3d"], [391, 2, 1, "", "avg_pool1d"], [392, 2, 1, "", "avg_pool2d"], [393, 2, 1, "", "avg_pool3d"], [378, 2, 1, "", "batch_norm"], [373, 2, 1, "", "batched_outer"], [379, 2, 1, "", "bernoulli"], [379, 2, 1, "", "beta"], [369, 2, 1, "", "binarizer"], [635, 2, 1, "", "binary_cross_entropy"], [384, 2, 1, "", "bincount"], [371, 2, 1, "", "bind_custom_gradient_function"], [227, 2, 1, "", "bitwise_and"], [228, 2, 1, "", "bitwise_invert"], [229, 2, 1, "", "bitwise_left_shift"], [230, 2, 1, "", "bitwise_or"], [231, 2, 1, "", "bitwise_right_shift"], [232, 2, 1, "", "bitwise_xor"], [309, 2, 1, "", "blackman_window"], [627, 2, 1, "", "broadcast_arrays"], [375, 2, 1, "", "broadcast_shapes"], [627, 2, 1, "", "broadcast_to"], [631, 2, 1, "", "cache_fn"], [627, 2, 1, "", "can_cast"], [233, 2, 1, "", "ceil"], [292, 2, 1, "", "celu"], [627, 2, 1, "", "check_float"], [375, 2, 1, "", "check_scalar"], [634, 2, 1, "", "cholesky"], [375, 2, 1, "", "choose"], [192, 2, 1, "", "clear_cached_mem_on_dev"], [636, 2, 1, "", "clip"], [631, 2, 1, "", "clip_matrix_norm"], [631, 2, 1, "", "clip_vector_norm"], [627, 2, 1, "", "closest_valid_dtype"], [625, 2, 1, "", "cmp_is"], [625, 2, 1, "", "cmp_isnot"], [375, 2, 1, "", "column_stack"], [636, 2, 1, "", "concat"], [375, 2, 1, "", "concat_from_sequence"], [373, 2, 1, "", "cond"], [369, 2, 1, "", "conj"], [636, 2, 1, "", "constant_pad"], [631, 2, 1, "", "container_types"], [633, 2, 1, "", "conv"], [633, 2, 1, "", "conv1d"], [633, 2, 1, "", "conv1d_transpose"], [633, 2, 1, "", "conv2d"], [633, 2, 1, "", "conv2d_transpose"], [633, 2, 1, "", "conv3d"], [633, 2, 1, "", "conv3d_transpose"], [633, 2, 1, "", "conv_general_dilated"], [633, 2, 1, "", "conv_general_transpose"], [626, 2, 1, "", "copy_array"], [638, 2, 1, "", "copy_nest"], [369, 2, 1, "", "copysign"], [384, 2, 1, "", "corrcoef"], [234, 2, 1, "", "cos"], [235, 2, 1, "", "cosh"], [369, 2, 1, "", "count_nonzero"], [384, 2, 1, "", "cov"], [634, 2, 1, "", "cross"], [635, 2, 1, "", "cross_entropy"], [384, 2, 1, "", "cummax"], [384, 2, 1, "", "cummin"], [644, 2, 1, "", "cumprod"], [644, 2, 1, "", "cumsum"], [631, 2, 1, "", "current_backend_str"], [394, 2, 1, "", "dct"], [631, 2, 1, "", "default"], [627, 2, 1, "", "default_complex_dtype"], [193, 2, 1, "", "default_device"], [627, 2, 1, "", "default_dtype"], [627, 2, 1, "", "default_float_dtype"], [627, 2, 1, "", "default_int_dtype"], [627, 2, 1, "", "default_uint_dtype"], [236, 2, 1, "", "deg2rad"], [633, 2, 1, "", "depthwise_conv2d"], [634, 2, 1, "", "det"], [194, 2, 1, "", "dev"], [195, 2, 1, "", "dev_util"], [395, 2, 1, "", "dft"], [634, 2, 1, "", "diag"], [373, 2, 1, "", "diagflat"], [634, 2, 1, "", "diagonal"], [369, 2, 1, "", "diff"], [369, 2, 1, "", "digamma"], [379, 2, 1, "", "dirichlet"], [237, 2, 1, "", "divide"], [373, 2, 1, "", "dot"], [633, 2, 1, "", "dropout"], [396, 2, 1, "", "dropout1d"], [397, 2, 1, "", "dropout2d"], [398, 2, 1, "", "dropout3d"], [375, 2, 1, "", "dsplit"], [375, 2, 1, "", "dstack"], [627, 2, 1, "", "dtype"], [627, 2, 1, "", "dtype_bits"], [638, 2, 1, "", "duplicate_array_index_chains"], [624, 6, 1, "", "e"], [373, 2, 1, "", "eig"], [634, 2, 1, "", "eigh"], [373, 2, 1, "", "eigh_tridiagonal"], [373, 2, 1, "", "eigvals"], [634, 2, 1, "", "eigvalsh"], [631, 2, 1, "", "einops_rearrange"], [631, 2, 1, "", "einops_reduce"], [631, 2, 1, "", "einops_repeat"], [644, 2, 1, "", "einsum"], [293, 2, 1, "", "elu"], [399, 2, 1, "", "embedding"], [626, 2, 1, "", "empty"], [626, 2, 1, "", "empty_like"], [238, 2, 1, "", "equal"], [239, 2, 1, "", "erf"], [369, 2, 1, "", "erfc"], [369, 2, 1, "", "erfinv"], [632, 2, 1, "", "execute_with_gradients"], [631, 2, 1, "", "exists"], [240, 2, 1, "", "exp"], [241, 2, 1, "", "exp2"], [375, 2, 1, "", "expand"], [636, 2, 1, "", "expand_dims"], [242, 2, 1, "", "expm1"], [626, 2, 1, "", "eye"], [310, 2, 1, "", "eye_like"], [400, 2, 1, "", "fft"], [401, 2, 1, "", "fft2"], [375, 2, 1, "", "fill_diagonal"], [627, 2, 1, "", "finfo"], [369, 2, 1, "", "fix"], [375, 2, 1, "", "flatten"], [636, 2, 1, "", "flip"], [375, 2, 1, "", "fliplr"], [375, 2, 1, "", "flipud"], [369, 2, 1, "", "float_power"], [243, 2, 1, "", "floor"], [244, 2, 1, "", "floor_divide"], [369, 2, 1, "", "fmax"], [245, 2, 1, "", "fmin"], [246, 2, 1, "", "fmod"], [375, 2, 1, "", "fold"], [637, 2, 1, "", "fomaml_step"], [625, 2, 1, "", "for_loop"], [631, 2, 1, "", "fourier_encode"], [369, 2, 1, "", "frexp"], [626, 2, 1, "", "from_dlpack"], [626, 2, 1, "", "frombuffer"], [626, 2, 1, "", "full"], [626, 2, 1, "", "full_like"], [196, 2, 1, "", "function_supported_devices"], [631, 2, 1, "", "function_supported_devices_and_dtypes"], [627, 2, 1, "", "function_supported_dtypes"], [197, 2, 1, "", "function_unsupported_devices"], [631, 2, 1, "", "function_unsupported_devices_and_dtypes"], [627, 2, 1, "", "function_unsupported_dtypes"], [379, 2, 1, "", "gamma"], [631, 2, 1, "", "gather"], [631, 2, 1, "", "gather_nd"], [247, 2, 1, "", "gcd"], [623, 2, 1, "", "gelu"], [373, 2, 1, "", "general_inner_product"], [402, 2, 1, "", "generate_einsum_equation"], [631, 2, 1, "", "get_all_arrays_in_memory"], [198, 2, 1, "", "get_all_ivy_arrays_on_dev"], [403, 2, 1, "", "get_interpolate_kernel"], [631, 2, 1, "", "get_item"], [631, 2, 1, "", "get_num_dims"], [631, 2, 1, "", "get_referrers_recursive"], [199, 2, 1, "", "gpu_is_available"], [632, 2, 1, "", "grad"], [369, 2, 1, "", "gradient"], [632, 2, 1, "", "gradient_descent_update"], [248, 2, 1, "", "greater"], [249, 2, 1, "", "greater_equal"], [378, 2, 1, "", "group_norm"], [311, 2, 1, "", "hamming_window"], [200, 2, 1, "", "handle_soft_device_variable"], [312, 2, 1, "", "hann_window"], [294, 2, 1, "", "hardshrink"], [295, 2, 1, "", "hardsilu"], [623, 2, 1, "", "hardswish"], [296, 2, 1, "", "hardtanh"], [631, 2, 1, "", "has_nans"], [375, 2, 1, "", "heaviside"], [373, 2, 1, "", "higher_order_moment"], [374, 2, 1, "", "hinge_embedding_loss"], [384, 2, 1, "", "histogram"], [375, 2, 1, "", "hsplit"], [375, 2, 1, "", "hstack"], [374, 2, 1, "", "huber_loss"], [369, 2, 1, "", "hypot"], [375, 2, 1, "", "i0"], [404, 2, 1, "", "idct"], [625, 2, 1, "", "if_else"], [405, 2, 1, "", "ifft"], [406, 2, 1, "", "ifftn"], [384, 2, 1, "", "igamma"], [627, 2, 1, "", "iinfo"], [250, 2, 1, "", "imag"], [638, 2, 1, "", "index_nest"], [313, 2, 1, "", "indices"], [624, 6, 1, "", "inf"], [627, 2, 1, "", "infer_default_dtype"], [373, 2, 1, "", "initialize_tucker"], [634, 2, 1, "", "inner"], [631, 2, 1, "", "inplace_arrays_supported"], [631, 2, 1, "", "inplace_decrement"], [631, 2, 1, "", "inplace_increment"], [631, 2, 1, "", "inplace_update"], [631, 2, 1, "", "inplace_variables_supported"], [638, 2, 1, "", "insert_into_nest_at_index"], [638, 2, 1, "", "insert_into_nest_at_indices"], [378, 2, 1, "", "instance_norm"], [407, 2, 1, "", "interp"], [408, 2, 1, "", "interpolate"], [634, 2, 1, "", "inv"], [627, 2, 1, "", "invalid_dtype"], [382, 2, 1, "", "invert_permutation"], [631, 2, 1, "", "is_array"], [627, 2, 1, "", "is_bool_dtype"], [627, 2, 1, "", "is_complex_dtype"], [627, 2, 1, "", "is_float_dtype"], [627, 2, 1, "", "is_hashable_dtype"], [627, 2, 1, "", "is_int_dtype"], [631, 2, 1, "", "is_ivy_array"], [631, 2, 1, "", "is_ivy_container"], [631, 2, 1, "", "is_ivy_nested_array"], [383, 2, 1, "", "is_ivy_sparse_array"], [631, 2, 1, "", "is_native_array"], [627, 2, 1, "", "is_native_dtype"], [383, 2, 1, "", "is_native_sparse_array"], [627, 2, 1, "", "is_uint_dtype"], [369, 2, 1, "", "isclose"], [251, 2, 1, "", "isfinite"], [631, 2, 1, "", "isin"], [252, 2, 1, "", "isinf"], [253, 2, 1, "", "isnan"], [254, 2, 1, "", "isreal"], [631, 2, 1, "", "isscalar"], [631, 2, 1, "", "itemsize"], [632, 2, 1, "", "jac"], [371, 2, 1, "", "jvp"], [314, 2, 1, "", "kaiser_bessel_derived_window"], [315, 2, 1, "", "kaiser_window"], [373, 2, 1, "", "khatri_rao"], [374, 2, 1, "", "kl_div"], [373, 2, 1, "", "kron"], [373, 2, 1, "", "kronecker"], [374, 2, 1, "", "l1_loss"], [378, 2, 1, "", "l1_normalize"], [378, 2, 1, "", "l2_normalize"], [632, 2, 1, "", "lamb_update"], [632, 2, 1, "", "lars_update"], [639, 2, 1, "", "layer_norm"], [255, 2, 1, "", "lcm"], [369, 2, 1, "", "ldexp"], [623, 2, 1, "", "leaky_relu"], [369, 2, 1, "", "lerp"], [256, 2, 1, "", "less"], [257, 2, 1, "", "less_equal"], [382, 2, 1, "", "lexsort"], [369, 2, 1, "", "lgamma"], [633, 2, 1, "", "linear"], [626, 2, 1, "", "linspace"], [645, 2, 1, "", "load"], [378, 2, 1, "", "local_response_norm"], [258, 2, 1, "", "log"], [259, 2, 1, "", "log10"], [260, 2, 1, "", "log1p"], [261, 2, 1, "", "log2"], [374, 2, 1, "", "log_poisson_loss"], [623, 2, 1, "", "log_softmax"], [262, 2, 1, "", "logaddexp"], [263, 2, 1, "", "logaddexp2"], [264, 2, 1, "", "logical_and"], [265, 2, 1, "", "logical_not"], [266, 2, 1, "", "logical_or"], [267, 2, 1, "", "logical_xor"], [297, 2, 1, "", "logit"], [298, 2, 1, "", "logsigmoid"], [626, 2, 1, "", "logspace"], [378, 2, 1, "", "lp_normalize"], [633, 2, 1, "", "lstm"], [633, 2, 1, "", "lstm_update"], [373, 2, 1, "", "lu_factor"], [373, 2, 1, "", "lu_solve"], [373, 2, 1, "", "make_svd_non_negative"], [637, 2, 1, "", "maml_step"], [638, 2, 1, "", "map"], [638, 2, 1, "", "map_nest_at_index"], [638, 2, 1, "", "map_nest_at_indices"], [631, 2, 1, "", "match_kwargs"], [634, 2, 1, "", "matmul"], [375, 2, 1, "", "matricize"], [373, 2, 1, "", "matrix_exp"], [634, 2, 1, "", "matrix_norm"], [634, 2, 1, "", "matrix_power"], [634, 2, 1, "", "matrix_rank"], [634, 2, 1, "", "matrix_transpose"], [644, 2, 1, "", "max"], [409, 2, 1, "", "max_pool1d"], [410, 2, 1, "", "max_pool2d"], [411, 2, 1, "", "max_pool3d"], [412, 2, 1, "", "max_unpool1d"], [268, 2, 1, "", "maximum"], [644, 2, 1, "", "mean"], [384, 2, 1, "", "median"], [316, 2, 1, "", "mel_weight_matrix"], [626, 2, 1, "", "meshgrid"], [644, 2, 1, "", "min"], [269, 2, 1, "", "minimum"], [623, 2, 1, "", "mish"], [373, 2, 1, "", "mode_dot"], [369, 2, 1, "", "modf"], [375, 2, 1, "", "moveaxis"], [643, 2, 1, "", "msort"], [373, 2, 1, "", "multi_dot"], [633, 2, 1, "", "multi_head_attention"], [638, 2, 1, "", "multi_index_nest"], [373, 2, 1, "", "multi_mode_dot"], [640, 2, 1, "", "multinomial"], [270, 2, 1, "", "multiply"], [631, 2, 1, "", "multiprocessing"], [624, 6, 1, "", "nan"], [271, 2, 1, "", "nan_to_num"], [384, 2, 1, "", "nanmean"], [384, 2, 1, "", "nanmedian"], [384, 2, 1, "", "nanmin"], [384, 2, 1, "", "nanprod"], [369, 2, 1, "", "nansum"], [626, 2, 1, "", "native_array"], [383, 2, 1, "", "native_sparse_array"], [383, 2, 1, "", "native_sparse_array_to_indices_values_and_shape"], [317, 2, 1, "", "ndenumerate"], [318, 2, 1, "", "ndindex"], [413, 2, 1, "", "nearest_interpolate"], [272, 2, 1, "", "negative"], [638, 2, 1, "", "nested_any"], [638, 2, 1, "", "nested_argwhere"], [638, 2, 1, "", "nested_map"], [638, 2, 1, "", "nested_multi_map"], [624, 6, 1, "", "newaxis"], [369, 2, 1, "", "nextafter"], [633, 2, 1, "", "nms"], [641, 2, 1, "", "nonzero"], [273, 2, 1, "", "not_equal"], [631, 2, 1, "", "num_arrays_in_memory"], [201, 2, 1, "", "num_cpu_cores"], [202, 2, 1, "", "num_gpus"], [203, 2, 1, "", "num_ivy_arrays_on_dev"], [626, 2, 1, "", "one_hot"], [626, 2, 1, "", "ones"], [626, 2, 1, "", "ones_like"], [632, 2, 1, "", "optimizer_update"], [385, 2, 1, "", "optional_get_element"], [634, 2, 1, "", "outer"], [375, 2, 1, "", "pad"], [375, 2, 1, "", "partial_fold"], [375, 2, 1, "", "partial_tensor_to_vec"], [373, 2, 1, "", "partial_tucker"], [375, 2, 1, "", "partial_unfold"], [375, 2, 1, "", "partial_vec_to_tensor"], [204, 2, 1, "", "percent_used_mem_on_dev"], [636, 2, 1, "", "permute_dims"], [624, 6, 1, "", "pi"], [634, 2, 1, "", "pinv"], [379, 2, 1, "", "poisson"], [374, 2, 1, "", "poisson_nll_loss"], [319, 2, 1, "", "polyval"], [372, 2, 1, "", "pool"], [274, 2, 1, "", "positive"], [275, 2, 1, "", "pow"], [299, 2, 1, "", "prelu"], [631, 2, 1, "", "print_all_arrays_in_memory"], [205, 2, 1, "", "print_all_ivy_arrays_on_dev"], [644, 2, 1, "", "prod"], [627, 2, 1, "", "promote_types"], [627, 2, 1, "", "promote_types_of_inputs"], [638, 2, 1, "", "prune_empty"], [638, 2, 1, "", "prune_nest_at_index"], [638, 2, 1, "", "prune_nest_at_indices"], [375, 2, 1, "", "put_along_axis"], [634, 2, 1, "", "qr"], [384, 2, 1, "", "quantile"], [276, 2, 1, "", "rad2deg"], [640, 2, 1, "", "randint"], [320, 2, 1, "", "random_cp"], [640, 2, 1, "", "random_normal"], [321, 2, 1, "", "random_parafac2"], [366, 2, 1, "", "random_tr"], [366, 2, 1, "", "random_tt"], [366, 2, 1, "", "random_tucker"], [640, 2, 1, "", "random_uniform"], [277, 2, 1, "", "real"], [278, 2, 1, "", "reciprocal"], [370, 2, 1, "", "reduce"], [372, 2, 1, "", "reduce_window"], [623, 2, 1, "", "relu"], [300, 2, 1, "", "relu6"], [279, 2, 1, "", "remainder"], [636, 2, 1, "", "repeat"], [637, 2, 1, "", "reptile_step"], [636, 2, 1, "", "reshape"], [627, 2, 1, "", "result_type"], [372, 2, 1, "", "rfft"], [372, 2, 1, "", "rfftn"], [372, 2, 1, "", "rnn"], [633, 2, 1, "", "roi_align"], [636, 2, 1, "", "roll"], [375, 2, 1, "", "rot90"], [280, 2, 1, "", "round"], [645, 2, 1, "", "save"], [633, 2, 1, "", "scaled_dot_product_attention"], [301, 2, 1, "", "scaled_tanh"], [631, 2, 1, "", "scatter_flat"], [631, 2, 1, "", "scatter_nd"], [643, 2, 1, "", "searchsorted"], [640, 2, 1, "", "seed"], [302, 2, 1, "", "selu"], [631, 2, 1, "", "set_array_mode"], [627, 2, 1, "", "set_default_complex_dtype"], [206, 2, 1, "", "set_default_device"], [627, 2, 1, "", "set_default_dtype"], [627, 2, 1, "", "set_default_float_dtype"], [627, 2, 1, "", "set_default_int_dtype"], [627, 2, 1, "", "set_default_uint_dtype"], [631, 2, 1, "", "set_exception_trace_mode"], [631, 2, 1, "", "set_inplace_mode"], [631, 2, 1, "", "set_item"], [631, 2, 1, "", "set_min_base"], [631, 2, 1, "", "set_min_denominator"], [638, 2, 1, "", "set_nest_at_index"], [638, 2, 1, "", "set_nest_at_indices"], [631, 2, 1, "", "set_nestable_mode"], [631, 2, 1, "", "set_precise_mode"], [631, 2, 1, "", "set_queue_timeout"], [631, 2, 1, "", "set_shape_array_mode"], [631, 2, 1, "", "set_show_func_wrapper_trace_mode"], [207, 2, 1, "", "set_soft_device_mode"], [208, 2, 1, "", "set_split_factor"], [631, 2, 1, "", "set_tmp_dir"], [631, 2, 1, "", "shape"], [640, 2, 1, "", "shuffle"], [623, 2, 1, "", "sigmoid"], [281, 2, 1, "", "sign"], [369, 2, 1, "", "signbit"], [303, 2, 1, "", "silu"], [282, 2, 1, "", "sin"], [369, 2, 1, "", "sinc"], [283, 2, 1, "", "sinh"], [631, 2, 1, "", "size"], [372, 2, 1, "", "sliding_window"], [634, 2, 1, "", "slogdet"], [374, 2, 1, "", "smooth_l1_loss"], [374, 2, 1, "", "soft_margin_loss"], [375, 2, 1, "", "soft_thresholding"], [623, 2, 1, "", "softmax"], [623, 2, 1, "", "softplus"], [304, 2, 1, "", "softshrink"], [623, 2, 1, "", "softsign"], [634, 2, 1, "", "solve"], [373, 2, 1, "", "solve_triangular"], [643, 2, 1, "", "sort"], [635, 2, 1, "", "sparse_cross_entropy"], [369, 2, 1, "", "sparsify_tensor"], [636, 2, 1, "", "split"], [209, 2, 1, "", "split_factor"], [210, 2, 1, "", "split_func_call"], [284, 2, 1, "", "sqrt"], [285, 2, 1, "", "square"], [636, 2, 1, "", "squeeze"], [631, 2, 1, "", "stable_divide"], [631, 2, 1, "", "stable_pow"], [636, 2, 1, "", "stack"], [305, 2, 1, "", "stanh"], [644, 2, 1, "", "std"], [372, 2, 1, "", "stft"], [632, 2, 1, "", "stop_gradient"], [631, 2, 1, "", "strides"], [286, 2, 1, "", "subtract"], [644, 2, 1, "", "sum"], [631, 2, 1, "", "supports_inplace_updates"], [634, 2, 1, "", "svd"], [373, 2, 1, "", "svd_flip"], [634, 2, 1, "", "svdvals"], [636, 2, 1, "", "swapaxes"], [375, 2, 1, "", "take"], [375, 2, 1, "", "take_along_axis"], [287, 2, 1, "", "tan"], [288, 2, 1, "", "tanh"], [306, 2, 1, "", "tanhshrink"], [373, 2, 1, "", "tensor_train"], [634, 2, 1, "", "tensordot"], [634, 2, 1, "", "tensorsolve"], [307, 2, 1, "", "threshold"], [308, 2, 1, "", "thresholded_relu"], [636, 2, 1, "", "tile"], [211, 2, 1, "", "to_device"], [626, 2, 1, "", "to_dlpack"], [631, 2, 1, "", "to_ivy_shape"], [631, 2, 1, "", "to_list"], [631, 2, 1, "", "to_native_shape"], [631, 2, 1, "", "to_numpy"], [631, 2, 1, "", "to_scalar"], [375, 2, 1, "", "top_k"], [212, 2, 1, "", "total_mem_on_dev"], [213, 2, 1, "", "tpu_is_available"], [634, 2, 1, "", "trace"], [860, 2, 1, "", "trace_graph"], [861, 2, 1, "", "transpile"], [289, 2, 1, "", "trapz"], [626, 2, 1, "", "tril"], [366, 2, 1, "", "tril_indices"], [366, 2, 1, "", "trilu"], [375, 2, 1, "", "trim_zeros"], [626, 2, 1, "", "triu"], [626, 2, 1, "", "triu_indices"], [290, 2, 1, "", "trunc"], [291, 2, 1, "", "trunc_divide"], [373, 2, 1, "", "truncated_svd"], [631, 2, 1, "", "try_else_none"], [625, 2, 1, "", "try_except"], [373, 2, 1, "", "tt_matrix_to_tensor"], [373, 2, 1, "", "tucker"], [627, 2, 1, "", "type_promote_arrays"], [375, 2, 1, "", "unflatten"], [375, 2, 1, "", "unfold"], [862, 2, 1, "", "unify"], [642, 2, 1, "", "unique_all"], [375, 2, 1, "", "unique_consecutive"], [642, 2, 1, "", "unique_counts"], [642, 2, 1, "", "unique_inverse"], [642, 2, 1, "", "unique_values"], [380, 2, 1, "", "unravel_index"], [631, 2, 1, "", "unset_array_mode"], [184, 2, 1, "", "unset_default_complex_dtype"], [214, 2, 1, "", "unset_default_device"], [185, 2, 1, "", "unset_default_dtype"], [186, 2, 1, "", "unset_default_float_dtype"], [187, 2, 1, "", "unset_default_int_dtype"], [188, 2, 1, "", "unset_default_uint_dtype"], [631, 2, 1, "", "unset_exception_trace_mode"], [631, 2, 1, "", "unset_inplace_mode"], [631, 2, 1, "", "unset_min_base"], [631, 2, 1, "", "unset_min_denominator"], [631, 2, 1, "", "unset_nestable_mode"], [631, 2, 1, "", "unset_precise_mode"], [631, 2, 1, "", "unset_queue_timeout"], [631, 2, 1, "", "unset_shape_array_mode"], [631, 2, 1, "", "unset_show_func_wrapper_trace_mode"], [215, 2, 1, "", "unset_soft_device_mode"], [631, 2, 1, "", "unset_tmp_dir"], [366, 2, 1, "", "unsorted_segment_mean"], [366, 2, 1, "", "unsorted_segment_min"], [366, 2, 1, "", "unsorted_segment_sum"], [636, 2, 1, "", "unstack"], [216, 2, 1, "", "used_mem_on_dev"], [189, 2, 1, "", "valid_dtype"], [632, 2, 1, "", "value_and_grad"], [631, 2, 1, "", "value_is_nan"], [634, 2, 1, "", "vander"], [644, 2, 1, "", "var"], [634, 2, 1, "", "vecdot"], [634, 2, 1, "", "vector_norm"], [634, 2, 1, "", "vector_to_skew_symmetric_matrix"], [371, 2, 1, "", "vjp"], [631, 2, 1, "", "vmap"], [366, 2, 1, "", "vorbis_window"], [375, 2, 1, "", "vsplit"], [375, 2, 1, "", "vstack"], [641, 2, 1, "", "where"], [625, 2, 1, "", "while_loop"], [369, 2, 1, "", "xlogy"], [636, 2, 1, "", "zero_pad"], [626, 2, 1, "", "zeros"], [626, 2, 1, "", "zeros_like"], [369, 2, 1, "", "zeta"]], "ivy.Container": [[217, 0, 1, "", "abs"], [218, 0, 1, "", "acos"], [219, 0, 1, "", "acosh"], [612, 0, 1, "", "adam_step"], [613, 0, 1, "", "adam_update"], [386, 0, 1, "", "adaptive_avg_pool1d"], [387, 0, 1, "", "adaptive_avg_pool2d"], [388, 0, 1, "", "adaptive_max_pool2d"], [389, 0, 1, "", "adaptive_max_pool3d"], [220, 0, 1, "", "add"], [421, 0, 1, "", "adjoint"], [764, 0, 1, "", "all"], [531, 0, 1, "", "all_equal"], [331, 0, 1, "", "allclose"], [332, 0, 1, "", "amax"], [333, 0, 1, "", "amin"], [221, 0, 1, "", "angle"], [765, 0, 1, "", "any"], [741, 0, 1, "", "argmax"], [742, 0, 1, "", "argmin"], [750, 0, 1, "", "argsort"], [743, 0, 1, "", "argwhere"], [534, 0, 1, "", "array_equal"], [457, 0, 1, "", "as_strided"], [125, 0, 1, "", "asarray"], [222, 0, 1, "", "asin"], [223, 0, 1, "", "asinh"], [535, 0, 1, "", "assert_supports_inplace"], [458, 0, 1, "", "associative_scan"], [149, 0, 1, "", "astype"], [224, 0, 1, "", "atan"], [225, 0, 1, "", "atan2"], [226, 0, 1, "", "atanh"], [459, 0, 1, "", "atleast_1d"], [460, 0, 1, "", "atleast_2d"], [461, 0, 1, "", "atleast_3d"], [391, 0, 1, "", "avg_pool1d"], [392, 0, 1, "", "avg_pool2d"], [393, 0, 1, "", "avg_pool3d"], [498, 0, 1, "", "batch_norm"], [422, 0, 1, "", "batched_outer"], [505, 0, 1, "", "bernoulli"], [506, 0, 1, "", "beta"], [334, 0, 1, "", "binarizer"], [693, 0, 1, "", "binary_cross_entropy"], [517, 0, 1, "", "bincount"], [227, 0, 1, "", "bitwise_and"], [228, 0, 1, "", "bitwise_invert"], [229, 0, 1, "", "bitwise_left_shift"], [230, 0, 1, "", "bitwise_or"], [231, 0, 1, "", "bitwise_right_shift"], [232, 0, 1, "", "bitwise_xor"], [309, 0, 1, "", "blackman_window"], [150, 0, 1, "", "broadcast_arrays"], [462, 0, 1, "", "broadcast_shapes"], [151, 0, 1, "", "broadcast_to"], [152, 0, 1, "", "can_cast"], [233, 0, 1, "", "ceil"], [292, 0, 1, "", "celu"], [664, 0, 1, "", "cholesky"], [696, 0, 1, "", "clip"], [537, 0, 1, "", "clip_matrix_norm"], [538, 0, 1, "", "clip_vector_norm"], [465, 0, 1, "", "column_stack"], [697, 0, 1, "", "concat"], [466, 0, 1, "", "concat_from_sequence"], [423, 0, 1, "", "cond"], [335, 0, 1, "", "conj"], [698, 0, 1, "", "constant_pad"], [647, 0, 1, "", "conv1d"], [648, 0, 1, "", "conv1d_transpose"], [649, 0, 1, "", "conv2d"], [650, 0, 1, "", "conv2d_transpose"], [651, 0, 1, "", "conv3d"], [652, 0, 1, "", "conv3d_transpose"], [126, 0, 1, "", "copy_array"], [336, 0, 1, "", "copysign"], [518, 0, 1, "", "corrcoef"], [234, 0, 1, "", "cos"], [235, 0, 1, "", "cosh"], [337, 0, 1, "", "count_nonzero"], [519, 0, 1, "", "cov"], [665, 0, 1, "", "cross"], [694, 0, 1, "", "cross_entropy"], [520, 0, 1, "", "cummax"], [521, 0, 1, "", "cummin"], [754, 0, 1, "", "cumprod"], [755, 0, 1, "", "cumsum"], [394, 0, 1, "", "dct"], [236, 0, 1, "", "deg2rad"], [655, 0, 1, "", "depthwise_conv2d"], [666, 0, 1, "", "det"], [194, 0, 1, "", "dev"], [395, 0, 1, "", "dft"], [667, 0, 1, "", "diag"], [424, 0, 1, "", "diagflat"], [668, 0, 1, "", "diagonal"], [338, 0, 1, "", "diff"], [339, 0, 1, "", "digamma"], [507, 0, 1, "", "dirichlet"], [237, 0, 1, "", "divide"], [425, 0, 1, "", "dot"], [656, 0, 1, "", "dropout"], [396, 0, 1, "", "dropout1d"], [397, 0, 1, "", "dropout2d"], [398, 0, 1, "", "dropout3d"], [467, 0, 1, "", "dsplit"], [468, 0, 1, "", "dstack"], [160, 0, 1, "", "dtype"], [426, 0, 1, "", "eig"], [670, 0, 1, "", "eigh"], [427, 0, 1, "", "eigh_tridiagonal"], [428, 0, 1, "", "eigvals"], [671, 0, 1, "", "eigvalsh"], [542, 0, 1, "", "einops_rearrange"], [543, 0, 1, "", "einops_reduce"], [544, 0, 1, "", "einops_repeat"], [756, 0, 1, "", "einsum"], [293, 0, 1, "", "elu"], [399, 0, 1, "", "embedding"], [128, 0, 1, "", "empty_like"], [238, 0, 1, "", "equal"], [239, 0, 1, "", "erf"], [340, 0, 1, "", "erfc"], [341, 0, 1, "", "erfinv"], [545, 0, 1, "", "exists"], [240, 0, 1, "", "exp"], [241, 0, 1, "", "exp2"], [469, 0, 1, "", "expand"], [699, 0, 1, "", "expand_dims"], [242, 0, 1, "", "expm1"], [310, 0, 1, "", "eye_like"], [400, 0, 1, "", "fft"], [470, 0, 1, "", "fill_diagonal"], [162, 0, 1, "", "finfo"], [342, 0, 1, "", "fix"], [471, 0, 1, "", "flatten"], [700, 0, 1, "", "flip"], [472, 0, 1, "", "fliplr"], [473, 0, 1, "", "flipud"], [343, 0, 1, "", "float_power"], [243, 0, 1, "", "floor"], [244, 0, 1, "", "floor_divide"], [344, 0, 1, "", "fmax"], [245, 0, 1, "", "fmin"], [246, 0, 1, "", "fmod"], [474, 0, 1, "", "fold"], [546, 0, 1, "", "fourier_encode"], [345, 0, 1, "", "frexp"], [130, 0, 1, "", "from_dlpack"], [131, 0, 1, "", "frombuffer"], [133, 0, 1, "", "full_like"], [508, 0, 1, "", "gamma"], [549, 0, 1, "", "gather"], [550, 0, 1, "", "gather_nd"], [247, 0, 1, "", "gcd"], [107, 0, 1, "", "gelu"], [429, 0, 1, "", "general_inner_product"], [553, 0, 1, "", "get_num_dims"], [346, 0, 1, "", "gradient"], [616, 0, 1, "", "gradient_descent_update"], [248, 0, 1, "", "greater"], [249, 0, 1, "", "greater_equal"], [499, 0, 1, "", "group_norm"], [311, 0, 1, "", "hamming_window"], [312, 0, 1, "", "hann_window"], [294, 0, 1, "", "hardshrink"], [295, 0, 1, "", "hardsilu"], [108, 0, 1, "", "hardswish"], [296, 0, 1, "", "hardtanh"], [555, 0, 1, "", "has_nans"], [475, 0, 1, "", "heaviside"], [430, 0, 1, "", "higher_order_moment"], [449, 0, 1, "", "hinge_embedding_loss"], [522, 0, 1, "", "histogram"], [476, 0, 1, "", "hsplit"], [477, 0, 1, "", "hstack"], [450, 0, 1, "", "huber_loss"], [347, 0, 1, "", "hypot"], [478, 0, 1, "", "i0"], [404, 0, 1, "", "idct"], [405, 0, 1, "", "ifft"], [406, 0, 1, "", "ifftn"], [523, 0, 1, "", "igamma"], [165, 0, 1, "", "iinfo"], [250, 0, 1, "", "imag"], [431, 0, 1, "", "initialize_tucker"], [672, 0, 1, "", "inner"], [557, 0, 1, "", "inplace_decrement"], [558, 0, 1, "", "inplace_increment"], [559, 0, 1, "", "inplace_update"], [500, 0, 1, "", "instance_norm"], [408, 0, 1, "", "interpolate"], [673, 0, 1, "", "inv"], [511, 0, 1, "", "invert_permutation"], [561, 0, 1, "", "is_array"], [168, 0, 1, "", "is_bool_dtype"], [169, 0, 1, "", "is_complex_dtype"], [170, 0, 1, "", "is_float_dtype"], [172, 0, 1, "", "is_int_dtype"], [562, 0, 1, "", "is_ivy_array"], [565, 0, 1, "", "is_native_array"], [174, 0, 1, "", "is_uint_dtype"], [348, 0, 1, "", "isclose"], [251, 0, 1, "", "isfinite"], [566, 0, 1, "", "isin"], [252, 0, 1, "", "isinf"], [253, 0, 1, "", "isnan"], [254, 0, 1, "", "isreal"], [568, 0, 1, "", "itemsize"], [314, 0, 1, "", "kaiser_bessel_derived_window"], [315, 0, 1, "", "kaiser_window"], [451, 0, 1, "", "kl_div"], [433, 0, 1, "", "kron"], [452, 0, 1, "", "l1_loss"], [501, 0, 1, "", "l1_normalize"], [502, 0, 1, "", "l2_normalize"], [618, 0, 1, "", "lamb_update"], [619, 0, 1, "", "lars_update"], [734, 0, 1, "", "layer_norm"], [255, 0, 1, "", "lcm"], [349, 0, 1, "", "ldexp"], [109, 0, 1, "", "leaky_relu"], [350, 0, 1, "", "lerp"], [256, 0, 1, "", "less"], [257, 0, 1, "", "less_equal"], [512, 0, 1, "", "lexsort"], [351, 0, 1, "", "lgamma"], [657, 0, 1, "", "linear"], [134, 0, 1, "", "linspace"], [258, 0, 1, "", "log"], [259, 0, 1, "", "log10"], [260, 0, 1, "", "log1p"], [261, 0, 1, "", "log2"], [453, 0, 1, "", "log_poisson_loss"], [110, 0, 1, "", "log_softmax"], [262, 0, 1, "", "logaddexp"], [263, 0, 1, "", "logaddexp2"], [264, 0, 1, "", "logical_and"], [265, 0, 1, "", "logical_not"], [266, 0, 1, "", "logical_or"], [267, 0, 1, "", "logical_xor"], [297, 0, 1, "", "logit"], [298, 0, 1, "", "logsigmoid"], [135, 0, 1, "", "logspace"], [504, 0, 1, "", "lp_normalize"], [659, 0, 1, "", "lstm_update"], [437, 0, 1, "", "make_svd_non_negative"], [674, 0, 1, "", "matmul"], [479, 0, 1, "", "matricize"], [438, 0, 1, "", "matrix_exp"], [675, 0, 1, "", "matrix_norm"], [676, 0, 1, "", "matrix_power"], [677, 0, 1, "", "matrix_rank"], [678, 0, 1, "", "matrix_transpose"], [757, 0, 1, "", "max"], [409, 0, 1, "", "max_pool1d"], [410, 0, 1, "", "max_pool2d"], [411, 0, 1, "", "max_pool3d"], [412, 0, 1, "", "max_unpool1d"], [268, 0, 1, "", "maximum"], [758, 0, 1, "", "mean"], [524, 0, 1, "", "median"], [316, 0, 1, "", "mel_weight_matrix"], [136, 0, 1, "", "meshgrid"], [759, 0, 1, "", "min"], [269, 0, 1, "", "minimum"], [111, 0, 1, "", "mish"], [439, 0, 1, "", "mode_dot"], [352, 0, 1, "", "modf"], [480, 0, 1, "", "moveaxis"], [751, 0, 1, "", "msort"], [440, 0, 1, "", "multi_dot"], [660, 0, 1, "", "multi_head_attention"], [441, 0, 1, "", "multi_mode_dot"], [735, 0, 1, "", "multinomial"], [270, 0, 1, "", "multiply"], [271, 0, 1, "", "nan_to_num"], [525, 0, 1, "", "nanmean"], [526, 0, 1, "", "nanmedian"], [527, 0, 1, "", "nanmin"], [528, 0, 1, "", "nanprod"], [353, 0, 1, "", "nansum"], [137, 0, 1, "", "native_array"], [272, 0, 1, "", "negative"], [354, 0, 1, "", "nextafter"], [744, 0, 1, "", "nonzero"], [273, 0, 1, "", "not_equal"], [138, 0, 1, "", "one_hot"], [140, 0, 1, "", "ones_like"], [620, 0, 1, "", "optimizer_update"], [530, 0, 1, "", "optional_get_element"], [679, 0, 1, "", "outer"], [481, 0, 1, "", "pad"], [482, 0, 1, "", "partial_fold"], [483, 0, 1, "", "partial_tensor_to_vec"], [442, 0, 1, "", "partial_tucker"], [484, 0, 1, "", "partial_unfold"], [485, 0, 1, "", "partial_vec_to_tensor"], [701, 0, 1, "", "permute_dims"], [680, 0, 1, "", "pinv"], [509, 0, 1, "", "poisson"], [454, 0, 1, "", "poisson_nll_loss"], [319, 0, 1, "", "polyval"], [274, 0, 1, "", "positive"], [275, 0, 1, "", "pow"], [299, 0, 1, "", "prelu"], [760, 0, 1, "", "prod"], [486, 0, 1, "", "put_along_axis"], [681, 0, 1, "", "qr"], [529, 0, 1, "", "quantile"], [276, 0, 1, "", "rad2deg"], [736, 0, 1, "", "randint"], [737, 0, 1, "", "random_normal"], [738, 0, 1, "", "random_uniform"], [277, 0, 1, "", "real"], [278, 0, 1, "", "reciprocal"], [360, 0, 1, "", "reduce"], [415, 0, 1, "", "reduce_window"], [112, 0, 1, "", "relu"], [300, 0, 1, "", "relu6"], [279, 0, 1, "", "remainder"], [702, 0, 1, "", "repeat"], [703, 0, 1, "", "reshape"], [177, 0, 1, "", "result_type"], [416, 0, 1, "", "rfft"], [417, 0, 1, "", "rfftn"], [704, 0, 1, "", "roll"], [487, 0, 1, "", "rot90"], [280, 0, 1, "", "round"], [663, 0, 1, "", "scaled_dot_product_attention"], [301, 0, 1, "", "scaled_tanh"], [573, 0, 1, "", "scatter_flat"], [574, 0, 1, "", "scatter_nd"], [752, 0, 1, "", "searchsorted"], [302, 0, 1, "", "selu"], [740, 0, 1, "", "shuffle"], [113, 0, 1, "", "sigmoid"], [281, 0, 1, "", "sign"], [355, 0, 1, "", "signbit"], [303, 0, 1, "", "silu"], [282, 0, 1, "", "sin"], [356, 0, 1, "", "sinc"], [283, 0, 1, "", "sinh"], [588, 0, 1, "", "size"], [419, 0, 1, "", "sliding_window"], [682, 0, 1, "", "slogdet"], [455, 0, 1, "", "smooth_l1_loss"], [456, 0, 1, "", "soft_margin_loss"], [488, 0, 1, "", "soft_thresholding"], [114, 0, 1, "", "softmax"], [115, 0, 1, "", "softplus"], [304, 0, 1, "", "softshrink"], [683, 0, 1, "", "solve"], [753, 0, 1, "", "sort"], [695, 0, 1, "", "sparse_cross_entropy"], [357, 0, 1, "", "sparsify_tensor"], [705, 0, 1, "", "split"], [284, 0, 1, "", "sqrt"], [285, 0, 1, "", "square"], [706, 0, 1, "", "squeeze"], [589, 0, 1, "", "stable_divide"], [590, 0, 1, "", "stable_pow"], [707, 0, 1, "", "stack"], [761, 0, 1, "", "std"], [420, 0, 1, "", "stft"], [621, 0, 1, "", "stop_gradient"], [591, 0, 1, "", "strides"], [286, 0, 1, "", "subtract"], [762, 0, 1, "", "sum"], [592, 0, 1, "", "supports_inplace_updates"], [684, 0, 1, "", "svd"], [444, 0, 1, "", "svd_flip"], [685, 0, 1, "", "svdvals"], [708, 0, 1, "", "swapaxes"], [489, 0, 1, "", "take"], [490, 0, 1, "", "take_along_axis"], [287, 0, 1, "", "tan"], [288, 0, 1, "", "tanh"], [306, 0, 1, "", "tanhshrink"], [445, 0, 1, "", "tensor_train"], [686, 0, 1, "", "tensordot"], [687, 0, 1, "", "tensorsolve"], [307, 0, 1, "", "threshold"], [308, 0, 1, "", "thresholded_relu"], [709, 0, 1, "", "tile"], [211, 0, 1, "", "to_device"], [594, 0, 1, "", "to_list"], [596, 0, 1, "", "to_numpy"], [597, 0, 1, "", "to_scalar"], [491, 0, 1, "", "top_k"], [688, 0, 1, "", "trace"], [289, 0, 1, "", "trapz"], [142, 0, 1, "", "tril"], [325, 0, 1, "", "tril_indices"], [326, 0, 1, "", "trilu"], [492, 0, 1, "", "trim_zeros"], [143, 0, 1, "", "triu"], [144, 0, 1, "", "triu_indices"], [290, 0, 1, "", "trunc"], [291, 0, 1, "", "trunc_divide"], [446, 0, 1, "", "truncated_svd"], [447, 0, 1, "", "tt_matrix_to_tensor"], [448, 0, 1, "", "tucker"], [493, 0, 1, "", "unflatten"], [494, 0, 1, "", "unfold"], [746, 0, 1, "", "unique_all"], [495, 0, 1, "", "unique_consecutive"], [747, 0, 1, "", "unique_counts"], [748, 0, 1, "", "unique_inverse"], [749, 0, 1, "", "unique_values"], [510, 0, 1, "", "unravel_index"], [327, 0, 1, "", "unsorted_segment_mean"], [328, 0, 1, "", "unsorted_segment_min"], [329, 0, 1, "", "unsorted_segment_sum"], [710, 0, 1, "", "unstack"], [610, 0, 1, "", "value_is_nan"], [689, 0, 1, "", "vander"], [763, 0, 1, "", "var"], [690, 0, 1, "", "vecdot"], [691, 0, 1, "", "vector_norm"], [692, 0, 1, "", "vector_to_skew_symmetric_matrix"], [330, 0, 1, "", "vorbis_window"], [496, 0, 1, "", "vsplit"], [497, 0, 1, "", "vstack"], [745, 0, 1, "", "where"], [358, 0, 1, "", "xlogy"], [711, 0, 1, "", "zero_pad"], [146, 0, 1, "", "zeros_like"], [359, 0, 1, "", "zeta"]], "ivy.data_classes.array": [[48, 3, 0, "-", "activations"], [99, 3, 0, "-", "array"], [49, 3, 0, "-", "conversions"], [50, 3, 0, "-", "creation"], [51, 3, 0, "-", "data_type"], [52, 3, 0, "-", "device"], [53, 3, 0, "-", "elementwise"], [54, 3, 0, "-", "experimental"], [55, 3, 0, "-", "general"], [56, 3, 0, "-", "gradients"], [57, 3, 0, "-", "image"], [58, 3, 0, "-", "layers"], [59, 3, 0, "-", "linear_algebra"], [60, 3, 0, "-", "losses"], [61, 3, 0, "-", "manipulation"], [62, 3, 0, "-", "norms"], [63, 3, 0, "-", "random"], [64, 3, 0, "-", "searching"], [65, 3, 0, "-", "set"], [66, 3, 0, "-", "sorting"], [67, 3, 0, "-", "statistical"], [68, 3, 0, "-", "utility"], [69, 3, 0, "-", "wrapping"]], "ivy.data_classes.array.activations": [[48, 1, 1, "", "_ArrayWithActivations"]], "ivy.data_classes.array.activations._ArrayWithActivations": [[48, 4, 1, "", "_abc_impl"], [48, 0, 1, "", "gelu"], [48, 0, 1, "", "hardswish"], [48, 0, 1, "", "leaky_relu"], [48, 0, 1, "", "log_softmax"], [48, 0, 1, "", "mish"], [48, 0, 1, "", "relu"], [48, 0, 1, "", "sigmoid"], [48, 0, 1, "", "softmax"], [48, 0, 1, "", "softplus"]], "ivy.data_classes.array.array": [[99, 1, 1, "", "Array"]], "ivy.data_classes.array.array.Array": [[99, 5, 1, "", "T"], [99, 0, 1, "", "__abs__"], [99, 0, 1, "", "__add__"], [99, 0, 1, "", "__eq__"], [99, 0, 1, "", "__ge__"], [99, 0, 1, "", "__gt__"], [99, 0, 1, "", "__init__"], [99, 0, 1, "", "__le__"], [99, 0, 1, "", "__lt__"], [99, 0, 1, "", "__ne__"], [99, 0, 1, "", "__pow__"], [99, 0, 1, "", "__radd__"], [99, 0, 1, "", "__rrshift__"], [99, 0, 1, "", "__rshift__"], [99, 0, 1, "", "__rsub__"], [99, 0, 1, "", "__sub__"], [99, 0, 1, "", "__truediv__"], [99, 0, 1, "", "__xor__"], [99, 5, 1, "", "backend"], [99, 5, 1, "", "base"], [99, 5, 1, "", "data"], [99, 5, 1, "", "device"], [99, 5, 1, "", "dtype"], [99, 5, 1, "", "dynamic_backend"], [99, 5, 1, "", "imag"], [99, 5, 1, "", "itemsize"], [99, 5, 1, "", "mT"], [99, 5, 1, "", "ndim"], [99, 5, 1, "", "real"], [99, 5, 1, "", "shape"], [99, 5, 1, "", "size"], [99, 5, 1, "", "strides"]], "ivy.data_classes.array.conversions": [[49, 2, 1, "", "_array_to_new_backend"], [49, 2, 1, "", "_to_ivy"], [49, 2, 1, "", "_to_native"], [49, 2, 1, "", "_to_new_backend"], [49, 2, 1, "", "args_to_ivy"], [49, 2, 1, "", "args_to_native"], [49, 2, 1, "", "args_to_new_backend"], [49, 2, 1, "", "to_ivy"], [49, 2, 1, "", "to_native"], [49, 2, 1, "", "to_new_backend"]], "ivy.data_classes.array.creation": [[50, 1, 1, "", "_ArrayWithCreation"]], "ivy.data_classes.array.creation._ArrayWithCreation": [[50, 4, 1, "", "_abc_impl"], [50, 0, 1, "", "asarray"], [50, 0, 1, "", "copy_array"], [50, 0, 1, "", "empty_like"], [50, 0, 1, "", "from_dlpack"], [50, 0, 1, "", "full_like"], [50, 0, 1, "", "linspace"], [50, 0, 1, "", "logspace"], [50, 0, 1, "", "meshgrid"], [50, 0, 1, "", "native_array"], [50, 0, 1, "", "one_hot"], [50, 0, 1, "", "ones_like"], [50, 0, 1, "", "tril"], [50, 0, 1, "", "triu"], [50, 0, 1, "", "zeros_like"]], "ivy.data_classes.array.data_type": [[51, 1, 1, "", "_ArrayWithDataTypes"]], "ivy.data_classes.array.data_type._ArrayWithDataTypes": [[51, 4, 1, "", "_abc_impl"], [51, 0, 1, "", "astype"], [51, 0, 1, "", "broadcast_arrays"], [51, 0, 1, "", "broadcast_to"], [51, 0, 1, "", "can_cast"], [51, 0, 1, "", "dtype"], [51, 0, 1, "", "finfo"], [51, 0, 1, "", "iinfo"], [51, 0, 1, "", "is_bool_dtype"], [51, 0, 1, "", "is_float_dtype"], [51, 0, 1, "", "is_int_dtype"], [51, 0, 1, "", "is_uint_dtype"], [51, 0, 1, "", "result_type"]], "ivy.data_classes.array.device": [[52, 1, 1, "", "_ArrayWithDevice"]], "ivy.data_classes.array.device._ArrayWithDevice": [[52, 4, 1, "", "_abc_impl"], [52, 0, 1, "", "dev"], [52, 0, 1, "", "to_device"]], "ivy.data_classes.array.elementwise": [[53, 1, 1, "", "_ArrayWithElementwise"]], "ivy.data_classes.array.elementwise._ArrayWithElementwise": [[53, 4, 1, "", "_abc_impl"], [53, 0, 1, "", "abs"], [53, 0, 1, "", "acos"], [53, 0, 1, "", "acosh"], [53, 0, 1, "", "add"], [53, 0, 1, "", "angle"], [53, 0, 1, "", "asin"], [53, 0, 1, "", "asinh"], [53, 0, 1, "", "atan"], [53, 0, 1, "", "atan2"], [53, 0, 1, "", "atanh"], [53, 0, 1, "", "bitwise_and"], [53, 0, 1, "", "bitwise_invert"], [53, 0, 1, "", "bitwise_left_shift"], [53, 0, 1, "", "bitwise_or"], [53, 0, 1, "", "bitwise_right_shift"], [53, 0, 1, "", "bitwise_xor"], [53, 0, 1, "", "ceil"], [53, 0, 1, "", "cos"], [53, 0, 1, "", "cosh"], [53, 0, 1, "", "deg2rad"], [53, 0, 1, "", "divide"], [53, 0, 1, "", "equal"], [53, 0, 1, "", "erf"], [53, 0, 1, "", "exp"], [53, 0, 1, "", "exp2"], [53, 0, 1, "", "expm1"], [53, 0, 1, "", "floor"], [53, 0, 1, "", "floor_divide"], [53, 0, 1, "", "fmin"], [53, 0, 1, "", "gcd"], [53, 0, 1, "", "greater"], [53, 0, 1, "", "greater_equal"], [53, 0, 1, "", "isfinite"], [53, 0, 1, "", "isinf"], [53, 0, 1, "", "isnan"], [53, 0, 1, "", "isreal"], [53, 0, 1, "", "lcm"], [53, 0, 1, "", "less"], [53, 0, 1, "", "less_equal"], [53, 0, 1, "", "log"], [53, 0, 1, "", "log10"], [53, 0, 1, "", "log1p"], [53, 0, 1, "", "log2"], [53, 0, 1, "", "logaddexp"], [53, 0, 1, "", "logaddexp2"], [53, 0, 1, "", "logical_and"], [53, 0, 1, "", "logical_not"], [53, 0, 1, "", "logical_or"], [53, 0, 1, "", "logical_xor"], [53, 0, 1, "", "maximum"], [53, 0, 1, "", "minimum"], [53, 0, 1, "", "multiply"], [53, 0, 1, "", "nan_to_num"], [53, 0, 1, "", "negative"], [53, 0, 1, "", "not_equal"], [53, 0, 1, "", "positive"], [53, 0, 1, "", "pow"], [53, 0, 1, "", "rad2deg"], [53, 0, 1, "", "real"], [53, 0, 1, "", "reciprocal"], [53, 0, 1, "", "remainder"], [53, 0, 1, "", "round"], [53, 0, 1, "", "sign"], [53, 0, 1, "", "sin"], [53, 0, 1, "", "sinh"], [53, 0, 1, "", "sqrt"], [53, 0, 1, "", "square"], [53, 0, 1, "", "subtract"], [53, 0, 1, "", "tan"], [53, 0, 1, "", "tanh"], [53, 0, 1, "", "trapz"], [53, 0, 1, "", "trunc"], [53, 0, 1, "", "trunc_divide"]], "ivy.data_classes.array.experimental": [[54, 3, 0, "-", "activations"], [54, 3, 0, "-", "conversions"], [54, 3, 0, "-", "creation"], [54, 3, 0, "-", "data_type"], [54, 3, 0, "-", "device"], [54, 3, 0, "-", "elementwise"], [54, 3, 0, "-", "general"], [54, 3, 0, "-", "gradients"], [54, 3, 0, "-", "image"], [54, 3, 0, "-", "layers"], [54, 3, 0, "-", "linear_algebra"], [54, 3, 0, "-", "losses"], [54, 3, 0, "-", "manipulation"], [54, 3, 0, "-", "norms"], [54, 3, 0, "-", "random"], [54, 3, 0, "-", "searching"], [54, 3, 0, "-", "set"], [54, 3, 0, "-", "sorting"], [54, 3, 0, "-", "statistical"], [54, 3, 0, "-", "utility"]], "ivy.data_classes.array.experimental.activations": [[54, 1, 1, "", "_ArrayWithActivationsExperimental"]], "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental": [[54, 4, 1, "", "_abc_impl"], [54, 0, 1, "", "celu"], [54, 0, 1, "", "elu"], [54, 0, 1, "", "hardshrink"], [54, 0, 1, "", "hardsilu"], [54, 0, 1, "", "hardtanh"], [54, 0, 1, "", "logit"], [54, 0, 1, "", "logsigmoid"], [54, 0, 1, "", "prelu"], [54, 0, 1, "", "relu6"], [54, 0, 1, "", "scaled_tanh"], [54, 0, 1, "", "selu"], [54, 0, 1, "", "silu"], [54, 0, 1, "", "softshrink"], [54, 0, 1, "", "tanhshrink"], [54, 0, 1, "", "threshold"], [54, 0, 1, "", "thresholded_relu"]], "ivy.data_classes.array.experimental.conversions": [[54, 1, 1, "", "_ArrayWithConversionsExperimental"]], "ivy.data_classes.array.experimental.conversions._ArrayWithConversionsExperimental": [[54, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.creation": [[54, 1, 1, "", "_ArrayWithCreationExperimental"], [54, 2, 1, "", "polyval"]], "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental": [[54, 4, 1, "", "_abc_impl"], [54, 0, 1, "", "blackman_window"], [54, 0, 1, "", "eye_like"], [54, 0, 1, "", "mel_weight_matrix"], [54, 0, 1, "", "trilu"], [54, 0, 1, "", "unsorted_segment_mean"], [54, 0, 1, "", "unsorted_segment_min"], [54, 0, 1, "", "unsorted_segment_sum"]], "ivy.data_classes.array.experimental.data_type": [[54, 1, 1, "", "_ArrayWithData_typeExperimental"]], "ivy.data_classes.array.experimental.data_type._ArrayWithData_typeExperimental": [[54, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.device": [[54, 1, 1, "", "_ArrayWithDeviceExperimental"]], "ivy.data_classes.array.experimental.device._ArrayWithDeviceExperimental": [[54, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.elementwise": [[54, 1, 1, "", "_ArrayWithElementWiseExperimental"]], "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental": [[54, 4, 1, "", "_abc_impl"], [54, 0, 1, "", "allclose"], [54, 0, 1, "", "amax"], [54, 0, 1, "", "amin"], [54, 0, 1, "", "binarizer"], [54, 0, 1, "", "conj"], [54, 0, 1, "", "copysign"], [54, 0, 1, "", "count_nonzero"], [54, 0, 1, "", "diff"], [54, 0, 1, "", "digamma"], [54, 0, 1, "", "erfc"], [54, 0, 1, "", "erfinv"], [54, 0, 1, "", "fix"], [54, 0, 1, "", "float_power"], [54, 0, 1, "", "fmax"], [54, 0, 1, "", "fmod"], [54, 0, 1, "", "frexp"], [54, 0, 1, "", "gradient"], [54, 0, 1, "", "hypot"], [54, 0, 1, "", "isclose"], [54, 0, 1, "", "ldexp"], [54, 0, 1, "", "lerp"], [54, 0, 1, "", "lgamma"], [54, 0, 1, "", "modf"], [54, 0, 1, "", "nansum"], [54, 0, 1, "", "nextafter"], [54, 0, 1, "", "signbit"], [54, 0, 1, "", "sinc"], [54, 0, 1, "", "sparsify_tensor"], [54, 0, 1, "", "xlogy"], [54, 0, 1, "", "zeta"]], "ivy.data_classes.array.experimental.general": [[54, 1, 1, "", "_ArrayWithGeneralExperimental"]], "ivy.data_classes.array.experimental.general._ArrayWithGeneralExperimental": [[54, 4, 1, "", "_abc_impl"], [54, 0, 1, "", "reduce"]], "ivy.data_classes.array.experimental.gradients": [[54, 1, 1, "", "_ArrayWithGradientsExperimental"]], "ivy.data_classes.array.experimental.gradients._ArrayWithGradientsExperimental": [[54, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.image": [[54, 1, 1, "", "_ArrayWithImageExperimental"]], "ivy.data_classes.array.experimental.image._ArrayWithImageExperimental": [[54, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.layers": [[54, 1, 1, "", "_ArrayWithLayersExperimental"]], "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental": [[54, 4, 1, "", "_abc_impl"], [54, 0, 1, "", "adaptive_avg_pool1d"], [54, 0, 1, "", "adaptive_avg_pool2d"], [54, 0, 1, "", "adaptive_max_pool2d"], [54, 0, 1, "", "adaptive_max_pool3d"], [54, 0, 1, "", "avg_pool1d"], [54, 0, 1, "", "avg_pool2d"], [54, 0, 1, "", "avg_pool3d"], [54, 0, 1, "", "dct"], [54, 0, 1, "", "dft"], [54, 0, 1, "", "embedding"], [54, 0, 1, "", "fft"], [54, 0, 1, "", "fft2"], [54, 0, 1, "", "idct"], [54, 0, 1, "", "ifft"], [54, 0, 1, "", "ifftn"], [54, 0, 1, "", "interpolate"], [54, 0, 1, "", "max_pool1d"], [54, 0, 1, "", "max_pool2d"], [54, 0, 1, "", "max_pool3d"], [54, 0, 1, "", "max_unpool1d"], [54, 0, 1, "", "reduce_window"], [54, 0, 1, "", "rfft"], [54, 0, 1, "", "rfftn"], [54, 0, 1, "", "sliding_window"], [54, 0, 1, "", "stft"]], "ivy.data_classes.array.experimental.linear_algebra": [[54, 1, 1, "", "_ArrayWithLinearAlgebraExperimental"]], "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental": [[54, 4, 1, "", "_abc_impl"], [54, 0, 1, "", "adjoint"], [54, 0, 1, "", "batched_outer"], [54, 0, 1, "", "cond"], [54, 0, 1, "", "diagflat"], [54, 0, 1, "", "dot"], [54, 0, 1, "", "eig"], [54, 0, 1, "", "eigh_tridiagonal"], [54, 0, 1, "", "eigvals"], [54, 0, 1, "", "general_inner_product"], [54, 0, 1, "", "higher_order_moment"], [54, 0, 1, "", "initialize_tucker"], [54, 0, 1, "", "kron"], [54, 0, 1, "", "make_svd_non_negative"], [54, 0, 1, "", "matrix_exp"], [54, 0, 1, "", "mode_dot"], [54, 0, 1, "", "multi_dot"], [54, 0, 1, "", "multi_mode_dot"], [54, 0, 1, "", "partial_tucker"], [54, 0, 1, "", "svd_flip"], [54, 0, 1, "", "tensor_train"], [54, 0, 1, "", "truncated_svd"], [54, 0, 1, "", "tt_matrix_to_tensor"], [54, 0, 1, "", "tucker"]], "ivy.data_classes.array.experimental.losses": [[54, 1, 1, "", "_ArrayWithLossesExperimental"]], "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental": [[54, 4, 1, "", "_abc_impl"], [54, 0, 1, "", "hinge_embedding_loss"], [54, 0, 1, "", "huber_loss"], [54, 0, 1, "", "kl_div"], [54, 0, 1, "", "l1_loss"], [54, 0, 1, "", "log_poisson_loss"], [54, 0, 1, "", "poisson_nll_loss"], [54, 0, 1, "", "smooth_l1_loss"], [54, 0, 1, "", "soft_margin_loss"]], "ivy.data_classes.array.experimental.manipulation": [[54, 1, 1, "", "_ArrayWithManipulationExperimental"]], "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental": [[54, 4, 1, "", "_abc_impl"], [54, 0, 1, "", "as_strided"], [54, 0, 1, "", "associative_scan"], [54, 0, 1, "", "atleast_1d"], [54, 0, 1, "", "atleast_2d"], [54, 0, 1, "", "atleast_3d"], [54, 0, 1, "", "column_stack"], [54, 0, 1, "", "concat_from_sequence"], [54, 0, 1, "", "dsplit"], [54, 0, 1, "", "dstack"], [54, 0, 1, "", "expand"], [54, 0, 1, "", "fill_diagonal"], [54, 0, 1, "", "flatten"], [54, 0, 1, "", "fliplr"], [54, 0, 1, "", "flipud"], [54, 0, 1, "", "fold"], [54, 0, 1, "", "heaviside"], [54, 0, 1, "", "hsplit"], [54, 0, 1, "", "hstack"], [54, 0, 1, "", "i0"], [54, 0, 1, "", "matricize"], [54, 0, 1, "", "moveaxis"], [54, 0, 1, "", "pad"], [54, 0, 1, "", "partial_fold"], [54, 0, 1, "", "partial_tensor_to_vec"], [54, 0, 1, "", "partial_unfold"], [54, 0, 1, "", "partial_vec_to_tensor"], [54, 0, 1, "", "put_along_axis"], [54, 0, 1, "", "rot90"], [54, 0, 1, "", "soft_thresholding"], [54, 0, 1, "", "take"], [54, 0, 1, "", "take_along_axis"], [54, 0, 1, "", "top_k"], [54, 0, 1, "", "trim_zeros"], [54, 0, 1, "", "unflatten"], [54, 0, 1, "", "unfold"], [54, 0, 1, "", "unique_consecutive"], [54, 0, 1, "", "vsplit"], [54, 0, 1, "", "vstack"]], "ivy.data_classes.array.experimental.norms": [[54, 1, 1, "", "_ArrayWithNormsExperimental"]], "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental": [[54, 4, 1, "", "_abc_impl"], [54, 0, 1, "", "batch_norm"], [54, 0, 1, "", "group_norm"], [54, 0, 1, "", "instance_norm"], [54, 0, 1, "", "l1_normalize"], [54, 0, 1, "", "l2_normalize"], [54, 0, 1, "", "lp_normalize"]], "ivy.data_classes.array.experimental.random": [[54, 1, 1, "", "_ArrayWithRandomExperimental"]], "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental": [[54, 4, 1, "", "_abc_impl"], [54, 0, 1, "", "bernoulli"], [54, 0, 1, "", "beta"], [54, 0, 1, "", "dirichlet"], [54, 0, 1, "", "gamma"], [54, 0, 1, "", "poisson"]], "ivy.data_classes.array.experimental.searching": [[54, 1, 1, "", "_ArrayWithSearchingExperimental"]], "ivy.data_classes.array.experimental.searching._ArrayWithSearchingExperimental": [[54, 4, 1, "", "_abc_impl"], [54, 0, 1, "", "unravel_index"]], "ivy.data_classes.array.experimental.set": [[54, 1, 1, "", "_ArrayWithSetExperimental"]], "ivy.data_classes.array.experimental.set._ArrayWithSetExperimental": [[54, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.sorting": [[54, 1, 1, "", "_ArrayWithSortingExperimental"]], "ivy.data_classes.array.experimental.sorting._ArrayWithSortingExperimental": [[54, 4, 1, "", "_abc_impl"], [54, 0, 1, "", "lexsort"]], "ivy.data_classes.array.experimental.statistical": [[54, 1, 1, "", "_ArrayWithStatisticalExperimental"]], "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental": [[54, 4, 1, "", "_abc_impl"], [54, 0, 1, "", "bincount"], [54, 0, 1, "", "corrcoef"], [54, 0, 1, "", "cov"], [54, 0, 1, "", "cummax"], [54, 0, 1, "", "cummin"], [54, 0, 1, "", "histogram"], [54, 0, 1, "", "igamma"], [54, 0, 1, "", "median"], [54, 0, 1, "", "nanmean"], [54, 0, 1, "", "nanmedian"], [54, 0, 1, "", "nanmin"], [54, 0, 1, "", "nanprod"], [54, 0, 1, "", "quantile"]], "ivy.data_classes.array.experimental.utility": [[54, 1, 1, "", "_ArrayWithUtilityExperimental"]], "ivy.data_classes.array.experimental.utility._ArrayWithUtilityExperimental": [[54, 4, 1, "", "_abc_impl"], [54, 0, 1, "", "optional_get_element"]], "ivy.data_classes.array.general": [[55, 1, 1, "", "_ArrayWithGeneral"]], "ivy.data_classes.array.general._ArrayWithGeneral": [[55, 4, 1, "", "_abc_impl"], [55, 0, 1, "", "all_equal"], [55, 0, 1, "", "array_equal"], [55, 0, 1, "", "assert_supports_inplace"], [55, 0, 1, "", "clip_matrix_norm"], [55, 0, 1, "", "clip_vector_norm"], [55, 0, 1, "", "default"], [55, 0, 1, "", "einops_rearrange"], [55, 0, 1, "", "einops_reduce"], [55, 0, 1, "", "einops_repeat"], [55, 0, 1, "", "exists"], [55, 0, 1, "", "fourier_encode"], [55, 0, 1, "", "gather"], [55, 0, 1, "", "gather_nd"], [55, 0, 1, "", "get_num_dims"], [55, 0, 1, "", "has_nans"], [55, 0, 1, "", "inplace_decrement"], [55, 0, 1, "", "inplace_increment"], [55, 0, 1, "", "inplace_update"], [55, 0, 1, "", "is_array"], [55, 0, 1, "", "is_ivy_array"], [55, 0, 1, "", "is_ivy_container"], [55, 0, 1, "", "is_native_array"], [55, 0, 1, "", "isin"], [55, 0, 1, "", "scatter_flat"], [55, 0, 1, "", "scatter_nd"], [55, 0, 1, "", "stable_divide"], [55, 0, 1, "", "stable_pow"], [55, 0, 1, "", "supports_inplace_updates"], [55, 0, 1, "", "to_file"], [55, 0, 1, "", "to_list"], [55, 0, 1, "", "to_numpy"], [55, 0, 1, "", "to_scalar"], [55, 0, 1, "", "value_is_nan"]], "ivy.data_classes.array.gradients": [[56, 1, 1, "", "_ArrayWithGradients"]], "ivy.data_classes.array.gradients._ArrayWithGradients": [[56, 4, 1, "", "_abc_impl"], [56, 0, 1, "", "adam_step"], [56, 0, 1, "", "adam_update"], [56, 0, 1, "", "gradient_descent_update"], [56, 0, 1, "", "lamb_update"], [56, 0, 1, "", "lars_update"], [56, 0, 1, "", "optimizer_update"], [56, 0, 1, "", "stop_gradient"]], "ivy.data_classes.array.image": [[57, 1, 1, "", "_ArrayWithImage"]], "ivy.data_classes.array.image._ArrayWithImage": [[57, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.layers": [[58, 1, 1, "", "_ArrayWithLayers"]], "ivy.data_classes.array.layers._ArrayWithLayers": [[58, 4, 1, "", "_abc_impl"], [58, 0, 1, "", "conv1d"], [58, 0, 1, "", "conv1d_transpose"], [58, 0, 1, "", "conv2d"], [58, 0, 1, "", "conv2d_transpose"], [58, 0, 1, "", "conv3d"], [58, 0, 1, "", "conv3d_transpose"], [58, 0, 1, "", "depthwise_conv2d"], [58, 0, 1, "", "dropout"], [58, 0, 1, "", "dropout1d"], [58, 0, 1, "", "dropout2d"], [58, 0, 1, "", "dropout3d"], [58, 0, 1, "", "linear"], [58, 0, 1, "", "lstm_update"], [58, 0, 1, "", "multi_head_attention"], [58, 0, 1, "", "scaled_dot_product_attention"]], "ivy.data_classes.array.linear_algebra": [[59, 1, 1, "", "_ArrayWithLinearAlgebra"]], "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra": [[59, 4, 1, "", "_abc_impl"], [59, 0, 1, "", "cholesky"], [59, 0, 1, "", "cross"], [59, 0, 1, "", "det"], [59, 0, 1, "", "diag"], [59, 0, 1, "", "diagonal"], [59, 0, 1, "", "eig"], [59, 0, 1, "", "eigh"], [59, 0, 1, "", "eigvalsh"], [59, 0, 1, "", "inner"], [59, 0, 1, "", "inv"], [59, 0, 1, "", "matmul"], [59, 0, 1, "", "matrix_norm"], [59, 0, 1, "", "matrix_power"], [59, 0, 1, "", "matrix_rank"], [59, 0, 1, "", "matrix_transpose"], [59, 0, 1, "", "outer"], [59, 0, 1, "", "pinv"], [59, 0, 1, "", "qr"], [59, 0, 1, "", "slogdet"], [59, 0, 1, "", "solve"], [59, 0, 1, "", "svd"], [59, 0, 1, "", "svdvals"], [59, 0, 1, "", "tensordot"], [59, 0, 1, "", "tensorsolve"], [59, 0, 1, "", "trace"], [59, 0, 1, "", "vander"], [59, 0, 1, "", "vecdot"], [59, 0, 1, "", "vector_norm"], [59, 0, 1, "", "vector_to_skew_symmetric_matrix"]], "ivy.data_classes.array.losses": [[60, 1, 1, "", "_ArrayWithLosses"]], "ivy.data_classes.array.losses._ArrayWithLosses": [[60, 4, 1, "", "_abc_impl"], [60, 0, 1, "", "binary_cross_entropy"], [60, 0, 1, "", "cross_entropy"], [60, 0, 1, "", "sparse_cross_entropy"]], "ivy.data_classes.array.manipulation": [[61, 1, 1, "", "_ArrayWithManipulation"]], "ivy.data_classes.array.manipulation._ArrayWithManipulation": [[61, 4, 1, "", "_abc_impl"], [61, 0, 1, "", "clip"], [61, 0, 1, "", "concat"], [61, 0, 1, "", "constant_pad"], [61, 0, 1, "", "expand_dims"], [61, 0, 1, "", "flip"], [61, 0, 1, "", "permute_dims"], [61, 0, 1, "", "repeat"], [61, 0, 1, "", "reshape"], [61, 0, 1, "", "roll"], [61, 0, 1, "", "split"], [61, 0, 1, "", "squeeze"], [61, 0, 1, "", "stack"], [61, 0, 1, "", "swapaxes"], [61, 0, 1, "", "tile"], [61, 0, 1, "", "unstack"], [61, 0, 1, "", "view"], [61, 0, 1, "", "zero_pad"]], "ivy.data_classes.array.norms": [[62, 1, 1, "", "_ArrayWithNorms"]], "ivy.data_classes.array.norms._ArrayWithNorms": [[62, 4, 1, "", "_abc_impl"], [62, 0, 1, "", "layer_norm"]], "ivy.data_classes.array.random": [[63, 1, 1, "", "_ArrayWithRandom"]], "ivy.data_classes.array.random._ArrayWithRandom": [[63, 4, 1, "", "_abc_impl"], [63, 0, 1, "", "multinomial"], [63, 0, 1, "", "randint"], [63, 0, 1, "", "random_normal"], [63, 0, 1, "", "random_uniform"], [63, 0, 1, "", "shuffle"]], "ivy.data_classes.array.searching": [[64, 1, 1, "", "_ArrayWithSearching"]], "ivy.data_classes.array.searching._ArrayWithSearching": [[64, 4, 1, "", "_abc_impl"], [64, 0, 1, "", "argmax"], [64, 0, 1, "", "argmin"], [64, 0, 1, "", "argwhere"], [64, 0, 1, "", "nonzero"], [64, 0, 1, "", "where"]], "ivy.data_classes.array.set": [[65, 1, 1, "", "_ArrayWithSet"]], "ivy.data_classes.array.set._ArrayWithSet": [[65, 4, 1, "", "_abc_impl"], [65, 0, 1, "", "unique_all"], [65, 0, 1, "", "unique_counts"], [65, 0, 1, "", "unique_inverse"], [65, 0, 1, "", "unique_values"]], "ivy.data_classes.array.sorting": [[66, 1, 1, "", "_ArrayWithSorting"]], "ivy.data_classes.array.sorting._ArrayWithSorting": [[66, 4, 1, "", "_abc_impl"], [66, 0, 1, "", "argsort"], [66, 0, 1, "", "msort"], [66, 0, 1, "", "searchsorted"], [66, 0, 1, "", "sort"]], "ivy.data_classes.array.statistical": [[67, 1, 1, "", "_ArrayWithStatistical"]], "ivy.data_classes.array.statistical._ArrayWithStatistical": [[67, 4, 1, "", "_abc_impl"], [67, 0, 1, "", "cumprod"], [67, 0, 1, "", "cumsum"], [67, 0, 1, "", "einsum"], [67, 0, 1, "", "max"], [67, 0, 1, "", "mean"], [67, 0, 1, "", "min"], [67, 0, 1, "", "prod"], [67, 0, 1, "", "std"], [67, 0, 1, "", "sum"], [67, 0, 1, "", "var"]], "ivy.data_classes.array.utility": [[68, 1, 1, "", "_ArrayWithUtility"]], "ivy.data_classes.array.utility._ArrayWithUtility": [[68, 4, 1, "", "_abc_impl"], [68, 0, 1, "", "all"], [68, 0, 1, "", "any"]], "ivy.data_classes.array.wrapping": [[69, 2, 1, "", "_wrap_function"], [69, 2, 1, "", "add_ivy_array_instance_methods"]], "ivy.data_classes.container": [[70, 3, 0, "-", "activations"], [71, 3, 0, "-", "base"], [100, 3, 0, "-", "container"], [72, 3, 0, "-", "conversions"], [73, 3, 0, "-", "creation"], [74, 3, 0, "-", "data_type"], [75, 3, 0, "-", "device"], [76, 3, 0, "-", "elementwise"], [77, 3, 0, "-", "experimental"], [78, 3, 0, "-", "general"], [79, 3, 0, "-", "gradients"], [80, 3, 0, "-", "image"], [81, 3, 0, "-", "layers"], [82, 3, 0, "-", "linear_algebra"], [83, 3, 0, "-", "losses"], [84, 3, 0, "-", "manipulation"], [85, 3, 0, "-", "norms"], [86, 3, 0, "-", "random"], [87, 3, 0, "-", "searching"], [88, 3, 0, "-", "set"], [89, 3, 0, "-", "sorting"], [90, 3, 0, "-", "statistical"], [91, 3, 0, "-", "utility"], [92, 3, 0, "-", "wrapping"]], "ivy.data_classes.container.activations": [[70, 1, 1, "", "_ContainerWithActivations"]], "ivy.data_classes.container.activations._ContainerWithActivations": [[70, 4, 1, "", "_abc_impl"], [70, 0, 1, "", "_static_gelu"], [70, 0, 1, "", "_static_hardswish"], [70, 0, 1, "", "_static_leaky_relu"], [70, 0, 1, "", "_static_log_softmax"], [70, 0, 1, "", "_static_mish"], [70, 0, 1, "", "_static_relu"], [70, 0, 1, "", "_static_sigmoid"], [70, 0, 1, "", "_static_softmax"], [70, 0, 1, "", "_static_softplus"], [70, 0, 1, "", "gelu"], [70, 0, 1, "", "hardswish"], [70, 0, 1, "", "leaky_relu"], [70, 0, 1, "", "log_softmax"], [70, 0, 1, "", "mish"], [70, 0, 1, "", "relu"], [70, 0, 1, "", "sigmoid"], [70, 0, 1, "", "softmax"], [70, 0, 1, "", "softplus"]], "ivy.data_classes.container.base": [[71, 1, 1, "", "ContainerBase"], [71, 2, 1, "", "_is_jsonable"], [71, 2, 1, "", "_repr"]], "ivy.data_classes.container.base.ContainerBase": [[71, 0, 1, "", "__getitem__"], [71, 0, 1, "", "__init__"], [71, 0, 1, "", "__setitem__"], [71, 4, 1, "", "_abc_impl"], [71, 0, 1, "", "_cont_at_key_chains_input_as_dict"], [71, 0, 1, "", "_cont_at_key_chains_input_as_seq"], [71, 0, 1, "", "_cont_call_static_method_with_flexible_args"], [71, 0, 1, "", "_cont_concat_unify"], [71, 0, 1, "", "_cont_get_dev"], [71, 0, 1, "", "_cont_get_dtype"], [71, 0, 1, "", "_cont_get_shape"], [71, 0, 1, "", "_cont_get_shapes"], [71, 5, 1, "", "_cont_ivy"], [71, 0, 1, "", "_cont_mean_unify"], [71, 0, 1, "", "_cont_prune_key_chains_input_as_dict"], [71, 0, 1, "", "_cont_prune_key_chains_input_as_seq"], [71, 0, 1, "", "_cont_slice_keys"], [71, 0, 1, "", "_cont_sum_unify"], [71, 0, 1, "", "_get_queue_item"], [71, 0, 1, "", "cont_all_false"], [71, 0, 1, "", "cont_all_key_chains"], [71, 0, 1, "", "cont_all_true"], [71, 0, 1, "", "cont_as_bools"], [71, 0, 1, "", "cont_assert_contains_sub_container"], [71, 0, 1, "", "cont_assert_contains_sub_structure"], [71, 0, 1, "", "cont_assert_identical"], [71, 0, 1, "", "cont_assert_identical_structure"], [71, 0, 1, "", "cont_at_key_chain"], [71, 0, 1, "", "cont_at_key_chains"], [71, 0, 1, "", "cont_at_keys"], [71, 0, 1, "", "cont_combine"], [71, 0, 1, "", "cont_common_key_chains"], [71, 5, 1, "", "cont_config"], [71, 0, 1, "", "cont_contains_sub_container"], [71, 0, 1, "", "cont_contains_sub_structure"], [71, 0, 1, "", "cont_copy"], [71, 0, 1, "", "cont_create_if_absent"], [71, 0, 1, "", "cont_cutoff_at_depth"], [71, 0, 1, "", "cont_cutoff_at_height"], [71, 0, 1, "", "cont_deep_copy"], [71, 5, 1, "", "cont_dev"], [71, 5, 1, "", "cont_dev_str"], [71, 0, 1, "", "cont_diff"], [71, 5, 1, "", "cont_dtype"], [71, 0, 1, "", "cont_duplicate_array_keychains"], [71, 0, 1, "", "cont_find_sub_container"], [71, 0, 1, "", "cont_find_sub_structure"], [71, 0, 1, "", "cont_flatten_key_chain"], [71, 0, 1, "", "cont_flatten_key_chains"], [71, 0, 1, "", "cont_format_key_chains"], [71, 0, 1, "", "cont_from_disk_as_hdf5"], [71, 0, 1, "", "cont_from_disk_as_json"], [71, 0, 1, "", "cont_from_disk_as_pickled"], [71, 0, 1, "", "cont_from_flat_list"], [71, 0, 1, "", "cont_handle_inplace"], [71, 0, 1, "", "cont_has_key"], [71, 0, 1, "", "cont_has_key_chain"], [71, 0, 1, "", "cont_identical"], [71, 0, 1, "", "cont_identical_array_shapes"], [71, 0, 1, "", "cont_identical_configs"], [71, 0, 1, "", "cont_identical_structure"], [71, 0, 1, "", "cont_if_exists"], [71, 0, 1, "", "cont_inplace_update"], [71, 5, 1, "", "cont_ivy"], [71, 0, 1, "", "cont_key_chains_containing"], [71, 0, 1, "", "cont_list_join"], [71, 0, 1, "", "cont_list_stack"], [71, 0, 1, "", "cont_load"], [71, 0, 1, "", "cont_map"], [71, 0, 1, "", "cont_map_sub_conts"], [71, 5, 1, "", "cont_max_depth"], [71, 0, 1, "", "cont_multi_map"], [71, 0, 1, "", "cont_multi_map_in_function"], [71, 0, 1, "", "cont_num_arrays"], [71, 0, 1, "", "cont_overwrite_at_key_chain"], [71, 0, 1, "", "cont_overwrite_at_key_chains"], [71, 0, 1, "", "cont_prune_empty"], [71, 0, 1, "", "cont_prune_key_chain"], [71, 0, 1, "", "cont_prune_key_chains"], [71, 0, 1, "", "cont_prune_key_from_key_chains"], [71, 0, 1, "", "cont_prune_keys"], [71, 0, 1, "", "cont_prune_keys_from_key_chains"], [71, 0, 1, "", "cont_reduce"], [71, 0, 1, "", "cont_remove_key_length_limit"], [71, 0, 1, "", "cont_remove_print_limit"], [71, 0, 1, "", "cont_reshape_like"], [71, 0, 1, "", "cont_restructure"], [71, 0, 1, "", "cont_restructure_key_chains"], [71, 0, 1, "", "cont_save"], [71, 0, 1, "", "cont_set_at_key_chain"], [71, 0, 1, "", "cont_set_at_key_chains"], [71, 0, 1, "", "cont_set_at_keys"], [71, 5, 1, "", "cont_shape"], [71, 5, 1, "", "cont_shapes"], [71, 0, 1, "", "cont_show"], [71, 0, 1, "", "cont_show_sub_container"], [71, 0, 1, "", "cont_size_ordered_arrays"], [71, 0, 1, "", "cont_slice_keys"], [71, 0, 1, "", "cont_slice_via_key"], [71, 0, 1, "", "cont_sort_by_key"], [71, 0, 1, "", "cont_structural_diff"], [71, 0, 1, "", "cont_to_dict"], [71, 0, 1, "", "cont_to_disk_as_hdf5"], [71, 0, 1, "", "cont_to_disk_as_json"], [71, 0, 1, "", "cont_to_disk_as_pickled"], [71, 0, 1, "", "cont_to_flat_list"], [71, 0, 1, "", "cont_to_iterator"], [71, 0, 1, "", "cont_to_iterator_keys"], [71, 0, 1, "", "cont_to_iterator_values"], [71, 0, 1, "", "cont_to_jsonable"], [71, 0, 1, "", "cont_to_nested_list"], [71, 0, 1, "", "cont_to_raw"], [71, 0, 1, "", "cont_trim_key"], [71, 0, 1, "", "cont_try_kc"], [71, 0, 1, "", "cont_unify"], [71, 0, 1, "", "cont_unstack_conts"], [71, 0, 1, "", "cont_update_config"], [71, 0, 1, "", "cont_with_default_key_color"], [71, 0, 1, "", "cont_with_entries_as_lists"], [71, 0, 1, "", "cont_with_ivy_backend"], [71, 0, 1, "", "cont_with_key_length_limit"], [71, 0, 1, "", "cont_with_print_indent"], [71, 0, 1, "", "cont_with_print_limit"], [71, 0, 1, "", "cont_with_print_line_spacing"], [71, 5, 1, "", "dynamic_backend"], [71, 0, 1, "", "h5_file_size"], [71, 0, 1, "", "shuffle_h5_file"], [71, 0, 1, "", "split_conts"]], "ivy.data_classes.container.container": [[100, 1, 1, "", "Container"]], "ivy.data_classes.container.container.Container": [[100, 0, 1, "", "__abs__"], [100, 0, 1, "", "__add__"], [100, 0, 1, "", "__eq__"], [100, 0, 1, "", "__ge__"], [100, 0, 1, "", "__gt__"], [100, 0, 1, "", "__init__"], [100, 0, 1, "", "__le__"], [100, 0, 1, "", "__lt__"], [100, 0, 1, "", "__ne__"], [100, 0, 1, "", "__pow__"], [100, 0, 1, "", "__radd__"], [100, 0, 1, "", "__rrshift__"], [100, 0, 1, "", "__rshift__"], [100, 0, 1, "", "__rsub__"], [100, 0, 1, "", "__sub__"], [100, 0, 1, "", "__truediv__"], [100, 0, 1, "", "__xor__"]], "ivy.data_classes.container.conversions": [[72, 1, 1, "", "_ContainerWithConversions"]], "ivy.data_classes.container.conversions._ContainerWithConversions": [[72, 4, 1, "", "_abc_impl"], [72, 0, 1, "", "_static_to_ivy"], [72, 0, 1, "", "_static_to_native"], [72, 0, 1, "", "to_ivy"], [72, 0, 1, "", "to_native"]], "ivy.data_classes.container.creation": [[73, 1, 1, "", "_ContainerWithCreation"]], "ivy.data_classes.container.creation._ContainerWithCreation": [[73, 4, 1, "", "_abc_impl"], [73, 0, 1, "", "_static_arange"], [73, 0, 1, "", "_static_asarray"], [73, 0, 1, "", "_static_copy_array"], [73, 0, 1, "", "_static_empty"], [73, 0, 1, "", "_static_empty_like"], [73, 0, 1, "", "_static_eye"], [73, 0, 1, "", "_static_from_dlpack"], [73, 0, 1, "", "_static_full"], [73, 0, 1, "", "_static_full_like"], [73, 0, 1, "", "_static_linspace"], [73, 0, 1, "", "_static_logspace"], [73, 0, 1, "", "_static_meshgrid"], [73, 0, 1, "", "_static_native_array"], [73, 0, 1, "", "_static_one_hot"], [73, 0, 1, "", "_static_ones"], [73, 0, 1, "", "_static_ones_like"], [73, 0, 1, "", "_static_tril"], [73, 0, 1, "", "_static_triu"], [73, 0, 1, "", "_static_zeros"], [73, 0, 1, "", "_static_zeros_like"], [73, 0, 1, "", "asarray"], [73, 0, 1, "", "copy_array"], [73, 0, 1, "", "empty_like"], [73, 0, 1, "", "from_dlpack"], [73, 0, 1, "", "frombuffer"], [73, 0, 1, "", "full_like"], [73, 0, 1, "", "linspace"], [73, 0, 1, "", "logspace"], [73, 0, 1, "", "meshgrid"], [73, 0, 1, "", "native_array"], [73, 0, 1, "", "one_hot"], [73, 0, 1, "", "ones_like"], [73, 0, 1, "", "static_frombuffer"], [73, 0, 1, "", "static_triu_indices"], [73, 0, 1, "", "tril"], [73, 0, 1, "", "triu"], [73, 0, 1, "", "triu_indices"], [73, 0, 1, "", "zeros_like"]], "ivy.data_classes.container.data_type": [[74, 1, 1, "", "_ContainerWithDataTypes"]], "ivy.data_classes.container.data_type._ContainerWithDataTypes": [[74, 4, 1, "", "_abc_impl"], [74, 0, 1, "", "_static_astype"], [74, 0, 1, "", "_static_broadcast_arrays"], [74, 0, 1, "", "_static_broadcast_to"], [74, 0, 1, "", "_static_can_cast"], [74, 0, 1, "", "_static_default_complex_dtype"], [74, 0, 1, "", "_static_default_float_dtype"], [74, 0, 1, "", "_static_dtype"], [74, 0, 1, "", "_static_finfo"], [74, 0, 1, "", "_static_function_supported_dtypes"], [74, 0, 1, "", "_static_function_unsupported_dtypes"], [74, 0, 1, "", "_static_iinfo"], [74, 0, 1, "", "_static_is_bool_dtype"], [74, 0, 1, "", "_static_is_complex_dtype"], [74, 0, 1, "", "_static_is_float_dtype"], [74, 0, 1, "", "_static_is_int_dtype"], [74, 0, 1, "", "_static_is_uint_dtype"], [74, 0, 1, "", "_static_result_type"], [74, 0, 1, "", "astype"], [74, 0, 1, "", "broadcast_arrays"], [74, 0, 1, "", "broadcast_to"], [74, 0, 1, "", "can_cast"], [74, 0, 1, "", "dtype"], [74, 0, 1, "", "finfo"], [74, 0, 1, "", "iinfo"], [74, 0, 1, "", "is_bool_dtype"], [74, 0, 1, "", "is_complex_dtype"], [74, 0, 1, "", "is_float_dtype"], [74, 0, 1, "", "is_int_dtype"], [74, 0, 1, "", "is_uint_dtype"], [74, 0, 1, "", "result_type"]], "ivy.data_classes.container.device": [[75, 1, 1, "", "_ContainerWithDevice"]], "ivy.data_classes.container.device._ContainerWithDevice": [[75, 4, 1, "", "_abc_impl"], [75, 0, 1, "", "_static_dev"], [75, 0, 1, "", "_static_to_device"], [75, 0, 1, "", "dev"], [75, 0, 1, "", "to_device"]], "ivy.data_classes.container.elementwise": [[76, 1, 1, "", "_ContainerWithElementwise"]], "ivy.data_classes.container.elementwise._ContainerWithElementwise": [[76, 4, 1, "", "_abc_impl"], [76, 0, 1, "", "_static_abs"], [76, 0, 1, "", "_static_acos"], [76, 0, 1, "", "_static_acosh"], [76, 0, 1, "", "_static_add"], [76, 0, 1, "", "_static_asin"], [76, 0, 1, "", "_static_asinh"], [76, 0, 1, "", "_static_atan"], [76, 0, 1, "", "_static_atan2"], [76, 0, 1, "", "_static_atanh"], [76, 0, 1, "", "_static_bitwise_and"], [76, 0, 1, "", "_static_bitwise_invert"], [76, 0, 1, "", "_static_bitwise_left_shift"], [76, 0, 1, "", "_static_bitwise_or"], [76, 0, 1, "", "_static_bitwise_right_shift"], [76, 0, 1, "", "_static_bitwise_xor"], [76, 0, 1, "", "_static_ceil"], [76, 0, 1, "", "_static_cos"], [76, 0, 1, "", "_static_cosh"], [76, 0, 1, "", "_static_deg2rad"], [76, 0, 1, "", "_static_divide"], [76, 0, 1, "", "_static_equal"], [76, 0, 1, "", "_static_erf"], [76, 0, 1, "", "_static_exp"], [76, 0, 1, "", "_static_expm1"], [76, 0, 1, "", "_static_floor"], [76, 0, 1, "", "_static_floor_divide"], [76, 0, 1, "", "_static_greater"], [76, 0, 1, "", "_static_greater_equal"], [76, 0, 1, "", "_static_isfinite"], [76, 0, 1, "", "_static_isinf"], [76, 0, 1, "", "_static_isnan"], [76, 0, 1, "", "_static_isreal"], [76, 0, 1, "", "_static_lcm"], [76, 0, 1, "", "_static_less"], [76, 0, 1, "", "_static_less_equal"], [76, 0, 1, "", "_static_log"], [76, 0, 1, "", "_static_log10"], [76, 0, 1, "", "_static_log1p"], [76, 0, 1, "", "_static_log2"], [76, 0, 1, "", "_static_logaddexp"], [76, 0, 1, "", "_static_logical_and"], [76, 0, 1, "", "_static_logical_not"], [76, 0, 1, "", "_static_logical_or"], [76, 0, 1, "", "_static_logical_xor"], [76, 0, 1, "", "_static_maximum"], [76, 0, 1, "", "_static_minimum"], [76, 0, 1, "", "_static_multiply"], [76, 0, 1, "", "_static_negative"], [76, 0, 1, "", "_static_not_equal"], [76, 0, 1, "", "_static_positive"], [76, 0, 1, "", "_static_pow"], [76, 0, 1, "", "_static_rad2deg"], [76, 0, 1, "", "_static_reciprocal"], [76, 0, 1, "", "_static_remainder"], [76, 0, 1, "", "_static_round"], [76, 0, 1, "", "_static_sign"], [76, 0, 1, "", "_static_sin"], [76, 0, 1, "", "_static_sinh"], [76, 0, 1, "", "_static_sqrt"], [76, 0, 1, "", "_static_square"], [76, 0, 1, "", "_static_subtract"], [76, 0, 1, "", "_static_tan"], [76, 0, 1, "", "_static_tanh"], [76, 0, 1, "", "_static_trapz"], [76, 0, 1, "", "_static_trunc"], [76, 0, 1, "", "_static_trunc_divide"], [76, 0, 1, "", "abs"], [76, 0, 1, "", "acos"], [76, 0, 1, "", "acosh"], [76, 0, 1, "", "add"], [76, 0, 1, "", "angle"], [76, 0, 1, "", "asin"], [76, 0, 1, "", "asinh"], [76, 0, 1, "", "atan"], [76, 0, 1, "", "atan2"], [76, 0, 1, "", "atanh"], [76, 0, 1, "", "bitwise_and"], [76, 0, 1, "", "bitwise_invert"], [76, 0, 1, "", "bitwise_left_shift"], [76, 0, 1, "", "bitwise_or"], [76, 0, 1, "", "bitwise_right_shift"], [76, 0, 1, "", "bitwise_xor"], [76, 0, 1, "", "ceil"], [76, 0, 1, "", "cos"], [76, 0, 1, "", "cosh"], [76, 0, 1, "", "deg2rad"], [76, 0, 1, "", "divide"], [76, 0, 1, "", "equal"], [76, 0, 1, "", "erf"], [76, 0, 1, "", "exp"], [76, 0, 1, "", "exp2"], [76, 0, 1, "", "expm1"], [76, 0, 1, "", "floor"], [76, 0, 1, "", "floor_divide"], [76, 0, 1, "", "fmin"], [76, 0, 1, "", "gcd"], [76, 0, 1, "", "greater"], [76, 0, 1, "", "greater_equal"], [76, 0, 1, "", "imag"], [76, 0, 1, "", "isfinite"], [76, 0, 1, "", "isinf"], [76, 0, 1, "", "isnan"], [76, 0, 1, "", "isreal"], [76, 0, 1, "", "lcm"], [76, 0, 1, "", "less"], [76, 0, 1, "", "less_equal"], [76, 0, 1, "", "log"], [76, 0, 1, "", "log10"], [76, 0, 1, "", "log1p"], [76, 0, 1, "", "log2"], [76, 0, 1, "", "logaddexp"], [76, 0, 1, "", "logaddexp2"], [76, 0, 1, "", "logical_and"], [76, 0, 1, "", "logical_not"], [76, 0, 1, "", "logical_or"], [76, 0, 1, "", "logical_xor"], [76, 0, 1, "", "maximum"], [76, 0, 1, "", "minimum"], [76, 0, 1, "", "multiply"], [76, 0, 1, "", "nan_to_num"], [76, 0, 1, "", "negative"], [76, 0, 1, "", "not_equal"], [76, 0, 1, "", "positive"], [76, 0, 1, "", "pow"], [76, 0, 1, "", "rad2deg"], [76, 0, 1, "", "real"], [76, 0, 1, "", "reciprocal"], [76, 0, 1, "", "remainder"], [76, 0, 1, "", "round"], [76, 0, 1, "", "sign"], [76, 0, 1, "", "sin"], [76, 0, 1, "", "sinh"], [76, 0, 1, "", "sqrt"], [76, 0, 1, "", "square"], [76, 0, 1, "", "static_angle"], [76, 0, 1, "", "static_exp2"], [76, 0, 1, "", "static_fmin"], [76, 0, 1, "", "static_gcd"], [76, 0, 1, "", "static_imag"], [76, 0, 1, "", "static_logaddexp2"], [76, 0, 1, "", "static_nan_to_num"], [76, 0, 1, "", "static_real"], [76, 0, 1, "", "subtract"], [76, 0, 1, "", "tan"], [76, 0, 1, "", "tanh"], [76, 0, 1, "", "trapz"], [76, 0, 1, "", "trunc"], [76, 0, 1, "", "trunc_divide"]], "ivy.data_classes.container.experimental": [[77, 3, 0, "-", "activations"], [77, 3, 0, "-", "conversions"], [77, 3, 0, "-", "creation"], [77, 3, 0, "-", "data_type"], [77, 3, 0, "-", "device"], [77, 3, 0, "-", "elementwise"], [77, 3, 0, "-", "general"], [77, 3, 0, "-", "gradients"], [77, 3, 0, "-", "image"], [77, 3, 0, "-", "layers"], [77, 3, 0, "-", "linear_algebra"], [77, 3, 0, "-", "losses"], [77, 3, 0, "-", "manipulation"], [77, 3, 0, "-", "norms"], [77, 3, 0, "-", "random"], [77, 3, 0, "-", "searching"], [77, 3, 0, "-", "set"], [77, 3, 0, "-", "sorting"], [77, 3, 0, "-", "statistical"], [77, 3, 0, "-", "utility"]], "ivy.data_classes.container.experimental.activations": [[77, 1, 1, "", "_ContainerWithActivationExperimental"]], "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental": [[77, 4, 1, "", "_abc_impl"], [77, 0, 1, "", "_static_celu"], [77, 0, 1, "", "_static_elu"], [77, 0, 1, "", "_static_hardshrink"], [77, 0, 1, "", "_static_hardsilu"], [77, 0, 1, "", "_static_hardtanh"], [77, 0, 1, "", "_static_scaled_tanh"], [77, 0, 1, "", "_static_silu"], [77, 0, 1, "", "_static_softshrink"], [77, 0, 1, "", "_static_tanhshrink"], [77, 0, 1, "", "_static_threshold"], [77, 0, 1, "", "celu"], [77, 0, 1, "", "elu"], [77, 0, 1, "", "hardshrink"], [77, 0, 1, "", "hardsilu"], [77, 0, 1, "", "hardtanh"], [77, 0, 1, "", "logit"], [77, 0, 1, "", "logsigmoid"], [77, 0, 1, "", "prelu"], [77, 0, 1, "", "relu6"], [77, 0, 1, "", "scaled_tanh"], [77, 0, 1, "", "selu"], [77, 0, 1, "", "silu"], [77, 0, 1, "", "softshrink"], [77, 0, 1, "", "static_logit"], [77, 0, 1, "", "static_logsigmoid"], [77, 0, 1, "", "static_prelu"], [77, 0, 1, "", "static_relu6"], [77, 0, 1, "", "static_selu"], [77, 0, 1, "", "static_thresholded_relu"], [77, 0, 1, "", "tanhshrink"], [77, 0, 1, "", "threshold"], [77, 0, 1, "", "thresholded_relu"]], "ivy.data_classes.container.experimental.conversions": [[77, 1, 1, "", "_ContainerWithConversionExperimental"]], "ivy.data_classes.container.experimental.conversions._ContainerWithConversionExperimental": [[77, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.creation": [[77, 1, 1, "", "_ContainerWithCreationExperimental"]], "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental": [[77, 4, 1, "", "_abc_impl"], [77, 0, 1, "", "_static_trilu"], [77, 0, 1, "", "blackman_window"], [77, 0, 1, "", "eye_like"], [77, 0, 1, "", "hamming_window"], [77, 0, 1, "", "hann_window"], [77, 0, 1, "", "kaiser_bessel_derived_window"], [77, 0, 1, "", "kaiser_window"], [77, 0, 1, "", "mel_weight_matrix"], [77, 0, 1, "", "polyval"], [77, 0, 1, "", "static_blackman_window"], [77, 0, 1, "", "static_eye_like"], [77, 0, 1, "", "static_hamming_window"], [77, 0, 1, "", "static_hann_window"], [77, 0, 1, "", "static_kaiser_bessel_derived_window"], [77, 0, 1, "", "static_kaiser_window"], [77, 0, 1, "", "static_mel_weight_matrix"], [77, 0, 1, "", "static_polyval"], [77, 0, 1, "", "static_tril_indices"], [77, 0, 1, "", "static_unsorted_segment_mean"], [77, 0, 1, "", "static_unsorted_segment_min"], [77, 0, 1, "", "static_unsorted_segment_sum"], [77, 0, 1, "", "static_vorbis_window"], [77, 0, 1, "", "tril_indices"], [77, 0, 1, "", "trilu"], [77, 0, 1, "", "unsorted_segment_mean"], [77, 0, 1, "", "unsorted_segment_min"], [77, 0, 1, "", "unsorted_segment_sum"], [77, 0, 1, "", "vorbis_window"]], "ivy.data_classes.container.experimental.data_type": [[77, 1, 1, "", "_ContainerWithData_typeExperimental"]], "ivy.data_classes.container.experimental.data_type._ContainerWithData_typeExperimental": [[77, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.device": [[77, 1, 1, "", "_ContainerWithDeviceExperimental"]], "ivy.data_classes.container.experimental.device._ContainerWithDeviceExperimental": [[77, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.elementwise": [[77, 1, 1, "", "_ContainerWithElementWiseExperimental"]], "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental": [[77, 4, 1, "", "_abc_impl"], [77, 0, 1, "", "allclose"], [77, 0, 1, "", "amax"], [77, 0, 1, "", "amin"], [77, 0, 1, "", "binarizer"], [77, 0, 1, "", "conj"], [77, 0, 1, "", "copysign"], [77, 0, 1, "", "count_nonzero"], [77, 0, 1, "", "diff"], [77, 0, 1, "", "digamma"], [77, 0, 1, "", "erfc"], [77, 0, 1, "", "erfinv"], [77, 0, 1, "", "fix"], [77, 0, 1, "", "float_power"], [77, 0, 1, "", "fmax"], [77, 0, 1, "", "fmod"], [77, 0, 1, "", "frexp"], [77, 0, 1, "", "gradient"], [77, 0, 1, "", "hypot"], [77, 0, 1, "", "isclose"], [77, 0, 1, "", "ldexp"], [77, 0, 1, "", "lerp"], [77, 0, 1, "", "modf"], [77, 0, 1, "", "nansum"], [77, 0, 1, "", "nextafter"], [77, 0, 1, "", "signbit"], [77, 0, 1, "", "sinc"], [77, 0, 1, "", "sparsify_tensor"], [77, 0, 1, "", "static_allclose"], [77, 0, 1, "", "static_amax"], [77, 0, 1, "", "static_amin"], [77, 0, 1, "", "static_binarizer"], [77, 0, 1, "", "static_conj"], [77, 0, 1, "", "static_copysign"], [77, 0, 1, "", "static_count_nonzero"], [77, 0, 1, "", "static_diff"], [77, 0, 1, "", "static_digamma"], [77, 0, 1, "", "static_erfc"], [77, 0, 1, "", "static_erfinv"], [77, 0, 1, "", "static_fix"], [77, 0, 1, "", "static_float_power"], [77, 0, 1, "", "static_fmax"], [77, 0, 1, "", "static_fmod"], [77, 0, 1, "", "static_frexp"], [77, 0, 1, "", "static_gradient"], [77, 0, 1, "", "static_hypot"], [77, 0, 1, "", "static_isclose"], [77, 0, 1, "", "static_ldexp"], [77, 0, 1, "", "static_lerp"], [77, 0, 1, "", "static_modf"], [77, 0, 1, "", "static_nansum"], [77, 0, 1, "", "static_nextafter"], [77, 0, 1, "", "static_signbit"], [77, 0, 1, "", "static_sinc"], [77, 0, 1, "", "static_sparsify_tensor"], [77, 0, 1, "", "static_xlogy"], [77, 0, 1, "", "static_zeta"], [77, 0, 1, "", "xlogy"], [77, 0, 1, "", "zeta"]], "ivy.data_classes.container.experimental.general": [[77, 1, 1, "", "_ContainerWithGeneralExperimental"]], "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental": [[77, 4, 1, "", "_abc_impl"], [77, 0, 1, "", "_static_reduce"], [77, 0, 1, "", "reduce"]], "ivy.data_classes.container.experimental.gradients": [[77, 1, 1, "", "_ContainerWithGradientsExperimental"]], "ivy.data_classes.container.experimental.gradients._ContainerWithGradientsExperimental": [[77, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.image": [[77, 1, 1, "", "_ContainerWithImageExperimental"]], "ivy.data_classes.container.experimental.image._ContainerWithImageExperimental": [[77, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.layers": [[77, 1, 1, "", "_ContainerWithLayersExperimental"]], "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental": [[77, 4, 1, "", "_abc_impl"], [77, 0, 1, "", "_static_fft"], [77, 0, 1, "", "_static_sliding_window"], [77, 0, 1, "", "adaptive_avg_pool1d"], [77, 0, 1, "", "adaptive_avg_pool2d"], [77, 0, 1, "", "adaptive_max_pool2d"], [77, 0, 1, "", "adaptive_max_pool3d"], [77, 0, 1, "", "avg_pool1d"], [77, 0, 1, "", "avg_pool2d"], [77, 0, 1, "", "avg_pool3d"], [77, 0, 1, "", "dct"], [77, 0, 1, "", "dft"], [77, 0, 1, "", "embedding"], [77, 0, 1, "", "fft"], [77, 0, 1, "", "idct"], [77, 0, 1, "", "ifft"], [77, 0, 1, "", "ifftn"], [77, 0, 1, "", "interpolate"], [77, 0, 1, "", "max_pool1d"], [77, 0, 1, "", "max_pool2d"], [77, 0, 1, "", "max_pool3d"], [77, 0, 1, "", "max_unpool1d"], [77, 0, 1, "", "rfft"], [77, 0, 1, "", "rfftn"], [77, 0, 1, "", "sliding_window"], [77, 0, 1, "", "static_adaptive_avg_pool1d"], [77, 0, 1, "", "static_adaptive_avg_pool2d"], [77, 0, 1, "", "static_adaptive_max_pool2d"], [77, 0, 1, "", "static_adaptive_max_pool3d"], [77, 0, 1, "", "static_avg_pool1d"], [77, 0, 1, "", "static_avg_pool2d"], [77, 0, 1, "", "static_avg_pool3d"], [77, 0, 1, "", "static_dct"], [77, 0, 1, "", "static_dft"], [77, 0, 1, "", "static_embedding"], [77, 0, 1, "", "static_idct"], [77, 0, 1, "", "static_ifft"], [77, 0, 1, "", "static_ifftn"], [77, 0, 1, "", "static_interpolate"], [77, 0, 1, "", "static_max_pool1d"], [77, 0, 1, "", "static_max_pool2d"], [77, 0, 1, "", "static_max_pool3d"], [77, 0, 1, "", "static_max_unpool1d"], [77, 0, 1, "", "static_rfft"], [77, 0, 1, "", "static_rfftn"], [77, 0, 1, "", "static_rnn"], [77, 0, 1, "", "static_stft"], [77, 0, 1, "", "stft"]], "ivy.data_classes.container.experimental.linear_algebra": [[77, 1, 1, "", "_ContainerWithLinearAlgebraExperimental"]], "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental": [[77, 4, 1, "", "_abc_impl"], [77, 0, 1, "", "adjoint"], [77, 0, 1, "", "batched_outer"], [77, 0, 1, "", "cond"], [77, 0, 1, "", "diagflat"], [77, 0, 1, "", "dot"], [77, 0, 1, "", "eig"], [77, 0, 1, "", "eigh_tridiagonal"], [77, 0, 1, "", "eigvals"], [77, 0, 1, "", "higher_order_moment"], [77, 0, 1, "", "initialize_tucker"], [77, 0, 1, "", "kron"], [77, 0, 1, "", "make_svd_non_negative"], [77, 0, 1, "", "matrix_exp"], [77, 0, 1, "", "mode_dot"], [77, 0, 1, "", "multi_dot"], [77, 0, 1, "", "multi_mode_dot"], [77, 0, 1, "", "partial_tucker"], [77, 0, 1, "", "static_adjoint"], [77, 0, 1, "", "static_batched_outer"], [77, 0, 1, "", "static_cond"], [77, 0, 1, "", "static_diagflat"], [77, 0, 1, "", "static_dot"], [77, 0, 1, "", "static_eig"], [77, 0, 1, "", "static_eigh_tridiagonal"], [77, 0, 1, "", "static_eigvals"], [77, 0, 1, "", "static_higher_order_moment"], [77, 0, 1, "", "static_initialize_tucker"], [77, 0, 1, "", "static_kron"], [77, 0, 1, "", "static_make_svd_non_negative"], [77, 0, 1, "", "static_matrix_exp"], [77, 0, 1, "", "static_mode_dot"], [77, 0, 1, "", "static_multi_dot"], [77, 0, 1, "", "static_multi_mode_dot"], [77, 0, 1, "", "static_partial_tucker"], [77, 0, 1, "", "static_svd_flip"], [77, 0, 1, "", "static_tensor_train"], [77, 0, 1, "", "static_truncated_svd"], [77, 0, 1, "", "static_tt_matrix_to_tensor"], [77, 0, 1, "", "static_tucker"], [77, 0, 1, "", "svd_flip"], [77, 0, 1, "", "tensor_train"], [77, 0, 1, "", "truncated_svd"], [77, 0, 1, "", "tt_matrix_to_tensor"], [77, 0, 1, "", "tucker"]], "ivy.data_classes.container.experimental.losses": [[77, 1, 1, "", "_ContainerWithLossesExperimental"]], "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental": [[77, 4, 1, "", "_abc_impl"], [77, 0, 1, "", "_static_hinge_embedding_loss"], [77, 0, 1, "", "_static_huber_loss"], [77, 0, 1, "", "_static_kl_div"], [77, 0, 1, "", "_static_l1_loss"], [77, 0, 1, "", "_static_log_poisson_loss"], [77, 0, 1, "", "_static_poisson_nll_loss"], [77, 0, 1, "", "_static_smooth_l1_loss"], [77, 0, 1, "", "_static_soft_margin_loss"], [77, 0, 1, "", "hinge_embedding_loss"], [77, 0, 1, "", "huber_loss"], [77, 0, 1, "", "kl_div"], [77, 0, 1, "", "l1_loss"], [77, 0, 1, "", "log_poisson_loss"], [77, 0, 1, "", "poisson_nll_loss"], [77, 0, 1, "", "smooth_l1_loss"], [77, 0, 1, "", "soft_margin_loss"]], "ivy.data_classes.container.experimental.manipulation": [[77, 1, 1, "", "_ContainerWithManipulationExperimental"], [77, 2, 1, "", "concat_from_sequence"]], "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental": [[77, 4, 1, "", "_abc_impl"], [77, 0, 1, "", "_static_fill_diagonal"], [77, 0, 1, "", "_static_put_along_axis"], [77, 0, 1, "", "_static_take"], [77, 0, 1, "", "_static_trim_zeros"], [77, 0, 1, "", "_static_unflatten"], [77, 0, 1, "", "_static_unique_consecutive"], [77, 0, 1, "", "as_strided"], [77, 0, 1, "", "associative_scan"], [77, 0, 1, "", "atleast_1d"], [77, 0, 1, "", "atleast_2d"], [77, 0, 1, "", "atleast_3d"], [77, 0, 1, "", "broadcast_shapes"], [77, 0, 1, "", "column_stack"], [77, 0, 1, "", "concat_from_sequence"], [77, 0, 1, "", "dsplit"], [77, 0, 1, "", "dstack"], [77, 0, 1, "", "expand"], [77, 0, 1, "", "fill_diagonal"], [77, 0, 1, "", "flatten"], [77, 0, 1, "", "fliplr"], [77, 0, 1, "", "flipud"], [77, 0, 1, "", "fold"], [77, 0, 1, "", "heaviside"], [77, 0, 1, "", "hsplit"], [77, 0, 1, "", "hstack"], [77, 0, 1, "", "i0"], [77, 0, 1, "", "matricize"], [77, 0, 1, "", "moveaxis"], [77, 0, 1, "", "pad"], [77, 0, 1, "", "partial_fold"], [77, 0, 1, "", "partial_tensor_to_vec"], [77, 0, 1, "", "partial_unfold"], [77, 0, 1, "", "partial_vec_to_tensor"], [77, 0, 1, "", "put_along_axis"], [77, 0, 1, "", "rot90"], [77, 0, 1, "", "soft_thresholding"], [77, 0, 1, "", "static_as_strided"], [77, 0, 1, "", "static_atleast_1d"], [77, 0, 1, "", "static_atleast_2d"], [77, 0, 1, "", "static_atleast_3d"], [77, 0, 1, "", "static_broadcast_shapes"], [77, 0, 1, "", "static_column_stack"], [77, 0, 1, "", "static_concat_from_sequence"], [77, 0, 1, "", "static_dsplit"], [77, 0, 1, "", "static_dstack"], [77, 0, 1, "", "static_expand"], [77, 0, 1, "", "static_flatten"], [77, 0, 1, "", "static_fliplr"], [77, 0, 1, "", "static_flipud"], [77, 0, 1, "", "static_fold"], [77, 0, 1, "", "static_heaviside"], [77, 0, 1, "", "static_hsplit"], [77, 0, 1, "", "static_hstack"], [77, 0, 1, "", "static_i0"], [77, 0, 1, "", "static_matricize"], [77, 0, 1, "", "static_moveaxis"], [77, 0, 1, "", "static_pad"], [77, 0, 1, "", "static_partial_fold"], [77, 0, 1, "", "static_partial_tensor_to_vec"], [77, 0, 1, "", "static_partial_unfold"], [77, 0, 1, "", "static_partial_vec_to_tensor"], [77, 0, 1, "", "static_rot90"], [77, 0, 1, "", "static_soft_thresholding"], [77, 0, 1, "", "static_take_along_axis"], [77, 0, 1, "", "static_top_k"], [77, 0, 1, "", "static_unfold"], [77, 0, 1, "", "static_vsplit"], [77, 0, 1, "", "static_vstack"], [77, 0, 1, "", "take"], [77, 0, 1, "", "take_along_axis"], [77, 0, 1, "", "top_k"], [77, 0, 1, "", "trim_zeros"], [77, 0, 1, "", "unflatten"], [77, 0, 1, "", "unfold"], [77, 0, 1, "", "unique_consecutive"], [77, 0, 1, "", "vsplit"], [77, 0, 1, "", "vstack"]], "ivy.data_classes.container.experimental.norms": [[77, 1, 1, "", "_ContainerWithNormsExperimental"]], "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental": [[77, 4, 1, "", "_abc_impl"], [77, 0, 1, "", "batch_norm"], [77, 0, 1, "", "group_norm"], [77, 0, 1, "", "instance_norm"], [77, 0, 1, "", "l1_normalize"], [77, 0, 1, "", "l2_normalize"], [77, 0, 1, "", "lp_normalize"], [77, 0, 1, "", "static_batch_norm"], [77, 0, 1, "", "static_group_norm"], [77, 0, 1, "", "static_instance_norm"], [77, 0, 1, "", "static_l1_normalize"], [77, 0, 1, "", "static_l2_normalize"], [77, 0, 1, "", "static_lp_normalize"]], "ivy.data_classes.container.experimental.random": [[77, 1, 1, "", "_ContainerWithRandomExperimental"]], "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental": [[77, 4, 1, "", "_abc_impl"], [77, 0, 1, "", "bernoulli"], [77, 0, 1, "", "beta"], [77, 0, 1, "", "dirichlet"], [77, 0, 1, "", "gamma"], [77, 0, 1, "", "poisson"], [77, 0, 1, "", "static_bernoulli"], [77, 0, 1, "", "static_beta"], [77, 0, 1, "", "static_dirichlet"], [77, 0, 1, "", "static_gamma"], [77, 0, 1, "", "static_poisson"]], "ivy.data_classes.container.experimental.searching": [[77, 1, 1, "", "_ContainerWithSearchingExperimental"]], "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental": [[77, 4, 1, "", "_abc_impl"], [77, 0, 1, "", "static_unravel_index"], [77, 0, 1, "", "unravel_index"]], "ivy.data_classes.container.experimental.set": [[77, 1, 1, "", "_ContainerWithSetExperimental"]], "ivy.data_classes.container.experimental.set._ContainerWithSetExperimental": [[77, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.sorting": [[77, 1, 1, "", "_ContainerWithSortingExperimental"]], "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental": [[77, 4, 1, "", "_abc_impl"], [77, 0, 1, "", "invert_permutation"], [77, 0, 1, "", "lexsort"], [77, 0, 1, "", "static_invert_permutation"], [77, 0, 1, "", "static_lexsort"]], "ivy.data_classes.container.experimental.statistical": [[77, 1, 1, "", "_ContainerWithStatisticalExperimental"]], "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental": [[77, 4, 1, "", "_abc_impl"], [77, 0, 1, "", "_static_cummax"], [77, 0, 1, "", "_static_cummin"], [77, 0, 1, "", "_static_nanmin"], [77, 0, 1, "", "bincount"], [77, 0, 1, "", "corrcoef"], [77, 0, 1, "", "cov"], [77, 0, 1, "", "cummax"], [77, 0, 1, "", "cummin"], [77, 0, 1, "", "histogram"], [77, 0, 1, "", "igamma"], [77, 0, 1, "", "lgamma"], [77, 0, 1, "", "median"], [77, 0, 1, "", "nanmean"], [77, 0, 1, "", "nanmedian"], [77, 0, 1, "", "nanmin"], [77, 0, 1, "", "nanprod"], [77, 0, 1, "", "quantile"], [77, 0, 1, "", "static_bincount"], [77, 0, 1, "", "static_corrcoef"], [77, 0, 1, "", "static_cov"], [77, 0, 1, "", "static_histogram"], [77, 0, 1, "", "static_igamma"], [77, 0, 1, "", "static_lgamma"], [77, 0, 1, "", "static_median"], [77, 0, 1, "", "static_nanmean"], [77, 0, 1, "", "static_nanmedian"], [77, 0, 1, "", "static_nanprod"], [77, 0, 1, "", "static_quantile"]], "ivy.data_classes.container.experimental.utility": [[77, 1, 1, "", "_ContainerWithUtilityExperimental"]], "ivy.data_classes.container.experimental.utility._ContainerWithUtilityExperimental": [[77, 4, 1, "", "_abc_impl"], [77, 0, 1, "", "optional_get_element"], [77, 0, 1, "", "static_optional_get_element"]], "ivy.data_classes.container.general": [[78, 1, 1, "", "_ContainerWithGeneral"]], "ivy.data_classes.container.general._ContainerWithGeneral": [[78, 4, 1, "", "_abc_impl"], [78, 0, 1, "", "_static_all_equal"], [78, 0, 1, "", "_static_array_equal"], [78, 0, 1, "", "_static_assert_supports_inplace"], [78, 0, 1, "", "_static_clip_matrix_norm"], [78, 0, 1, "", "_static_clip_vector_norm"], [78, 0, 1, "", "_static_einops_rearrange"], [78, 0, 1, "", "_static_einops_reduce"], [78, 0, 1, "", "_static_einops_repeat"], [78, 0, 1, "", "_static_exists"], [78, 0, 1, "", "_static_fourier_encode"], [78, 0, 1, "", "_static_gather"], [78, 0, 1, "", "_static_gather_nd"], [78, 0, 1, "", "_static_get_num_dims"], [78, 0, 1, "", "_static_has_nans"], [78, 0, 1, "", "_static_inplace_decrement"], [78, 0, 1, "", "_static_inplace_increment"], [78, 0, 1, "", "_static_inplace_update"], [78, 0, 1, "", "_static_is_array"], [78, 0, 1, "", "_static_is_ivy_array"], [78, 0, 1, "", "_static_is_native_array"], [78, 0, 1, "", "_static_scatter_flat"], [78, 0, 1, "", "_static_scatter_nd"], [78, 0, 1, "", "_static_size"], [78, 0, 1, "", "_static_stable_divide"], [78, 0, 1, "", "_static_stable_pow"], [78, 0, 1, "", "_static_supports_inplace_updates"], [78, 0, 1, "", "_static_to_list"], [78, 0, 1, "", "_static_to_numpy"], [78, 0, 1, "", "_static_to_scalar"], [78, 0, 1, "", "_static_value_is_nan"], [78, 0, 1, "", "all_equal"], [78, 0, 1, "", "array_equal"], [78, 0, 1, "", "assert_supports_inplace"], [78, 0, 1, "", "clip_matrix_norm"], [78, 0, 1, "", "clip_vector_norm"], [78, 0, 1, "", "einops_rearrange"], [78, 0, 1, "", "einops_reduce"], [78, 0, 1, "", "einops_repeat"], [78, 0, 1, "", "exists"], [78, 0, 1, "", "fourier_encode"], [78, 0, 1, "", "gather"], [78, 0, 1, "", "gather_nd"], [78, 0, 1, "", "get_num_dims"], [78, 0, 1, "", "has_nans"], [78, 0, 1, "", "inplace_decrement"], [78, 0, 1, "", "inplace_increment"], [78, 0, 1, "", "inplace_update"], [78, 0, 1, "", "is_array"], [78, 0, 1, "", "is_ivy_array"], [78, 0, 1, "", "is_native_array"], [78, 0, 1, "", "isin"], [78, 0, 1, "", "itemsize"], [78, 0, 1, "", "scatter_flat"], [78, 0, 1, "", "scatter_nd"], [78, 0, 1, "", "size"], [78, 0, 1, "", "stable_divide"], [78, 0, 1, "", "stable_pow"], [78, 0, 1, "", "static_isin"], [78, 0, 1, "", "static_itemsize"], [78, 0, 1, "", "static_strides"], [78, 0, 1, "", "strides"], [78, 0, 1, "", "supports_inplace_updates"], [78, 0, 1, "", "to_list"], [78, 0, 1, "", "to_numpy"], [78, 0, 1, "", "to_scalar"], [78, 0, 1, "", "value_is_nan"]], "ivy.data_classes.container.gradients": [[79, 1, 1, "", "_ContainerWithGradients"]], "ivy.data_classes.container.gradients._ContainerWithGradients": [[79, 4, 1, "", "_abc_impl"], [79, 0, 1, "", "_static_stop_gradient"], [79, 0, 1, "", "adam_step"], [79, 0, 1, "", "adam_update"], [79, 0, 1, "", "gradient_descent_update"], [79, 0, 1, "", "lamb_update"], [79, 0, 1, "", "lars_update"], [79, 0, 1, "", "optimizer_update"], [79, 0, 1, "", "stop_gradient"]], "ivy.data_classes.container.image": [[80, 1, 1, "", "_ContainerWithImage"]], "ivy.data_classes.container.image._ContainerWithImage": [[80, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.layers": [[81, 1, 1, "", "_ContainerWithLayers"]], "ivy.data_classes.container.layers._ContainerWithLayers": [[81, 4, 1, "", "_abc_impl"], [81, 0, 1, "", "_static_conv1d"], [81, 0, 1, "", "_static_conv1d_transpose"], [81, 0, 1, "", "_static_conv2d"], [81, 0, 1, "", "_static_conv2d_transpose"], [81, 0, 1, "", "_static_conv3d"], [81, 0, 1, "", "_static_conv3d_transpose"], [81, 0, 1, "", "_static_depthwise_conv2d"], [81, 0, 1, "", "_static_dropout"], [81, 0, 1, "", "_static_dropout1d"], [81, 0, 1, "", "_static_dropout2d"], [81, 0, 1, "", "_static_dropout3d"], [81, 0, 1, "", "_static_linear"], [81, 0, 1, "", "_static_lstm_update"], [81, 0, 1, "", "_static_multi_head_attention"], [81, 0, 1, "", "_static_reduce_window"], [81, 0, 1, "", "_static_scaled_dot_product_attention"], [81, 0, 1, "", "conv1d"], [81, 0, 1, "", "conv1d_transpose"], [81, 0, 1, "", "conv2d"], [81, 0, 1, "", "conv2d_transpose"], [81, 0, 1, "", "conv3d"], [81, 0, 1, "", "conv3d_transpose"], [81, 0, 1, "", "depthwise_conv2d"], [81, 0, 1, "", "dropout"], [81, 0, 1, "", "dropout1d"], [81, 0, 1, "", "dropout2d"], [81, 0, 1, "", "dropout3d"], [81, 0, 1, "", "linear"], [81, 0, 1, "", "lstm_update"], [81, 0, 1, "", "multi_head_attention"], [81, 0, 1, "", "reduce_window"], [81, 0, 1, "", "scaled_dot_product_attention"]], "ivy.data_classes.container.linear_algebra": [[82, 1, 1, "", "_ContainerWithLinearAlgebra"]], "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra": [[82, 4, 1, "", "_abc_impl"], [82, 0, 1, "", "_static_cholesky"], [82, 0, 1, "", "_static_cross"], [82, 0, 1, "", "_static_det"], [82, 0, 1, "", "_static_diag"], [82, 0, 1, "", "_static_diagonal"], [82, 0, 1, "", "_static_eigh"], [82, 0, 1, "", "_static_eigvalsh"], [82, 0, 1, "", "_static_inner"], [82, 0, 1, "", "_static_inv"], [82, 0, 1, "", "_static_matmul"], [82, 0, 1, "", "_static_matrix_norm"], [82, 0, 1, "", "_static_matrix_power"], [82, 0, 1, "", "_static_matrix_rank"], [82, 0, 1, "", "_static_matrix_transpose"], [82, 0, 1, "", "_static_outer"], [82, 0, 1, "", "_static_pinv"], [82, 0, 1, "", "_static_qr"], [82, 0, 1, "", "_static_slogdet"], [82, 0, 1, "", "_static_solve"], [82, 0, 1, "", "_static_svd"], [82, 0, 1, "", "_static_svdvals"], [82, 0, 1, "", "_static_tensordot"], [82, 0, 1, "", "_static_tensorsolve"], [82, 0, 1, "", "_static_trace"], [82, 0, 1, "", "_static_vander"], [82, 0, 1, "", "_static_vecdot"], [82, 0, 1, "", "_static_vector_norm"], [82, 0, 1, "", "_static_vector_to_skew_symmetric_matrix"], [82, 0, 1, "", "cholesky"], [82, 0, 1, "", "cross"], [82, 0, 1, "", "det"], [82, 0, 1, "", "diag"], [82, 0, 1, "", "diagonal"], [82, 0, 1, "", "eigh"], [82, 0, 1, "", "eigvalsh"], [82, 0, 1, "", "general_inner_product"], [82, 0, 1, "", "inner"], [82, 0, 1, "", "inv"], [82, 0, 1, "", "matmul"], [82, 0, 1, "", "matrix_norm"], [82, 0, 1, "", "matrix_power"], [82, 0, 1, "", "matrix_rank"], [82, 0, 1, "", "matrix_transpose"], [82, 0, 1, "", "outer"], [82, 0, 1, "", "pinv"], [82, 0, 1, "", "qr"], [82, 0, 1, "", "slogdet"], [82, 0, 1, "", "solve"], [82, 0, 1, "", "static_general_inner_product"], [82, 0, 1, "", "svd"], [82, 0, 1, "", "svdvals"], [82, 0, 1, "", "tensordot"], [82, 0, 1, "", "tensorsolve"], [82, 0, 1, "", "trace"], [82, 0, 1, "", "vander"], [82, 0, 1, "", "vecdot"], [82, 0, 1, "", "vector_norm"], [82, 0, 1, "", "vector_to_skew_symmetric_matrix"]], "ivy.data_classes.container.losses": [[83, 1, 1, "", "_ContainerWithLosses"]], "ivy.data_classes.container.losses._ContainerWithLosses": [[83, 4, 1, "", "_abc_impl"], [83, 0, 1, "", "_static_binary_cross_entropy"], [83, 0, 1, "", "_static_cross_entropy"], [83, 0, 1, "", "_static_sparse_cross_entropy"], [83, 0, 1, "", "binary_cross_entropy"], [83, 0, 1, "", "cross_entropy"], [83, 0, 1, "", "sparse_cross_entropy"]], "ivy.data_classes.container.manipulation": [[84, 1, 1, "", "_ContainerWithManipulation"]], "ivy.data_classes.container.manipulation._ContainerWithManipulation": [[84, 4, 1, "", "_abc_impl"], [84, 0, 1, "", "_static_clip"], [84, 0, 1, "", "_static_concat"], [84, 0, 1, "", "_static_constant_pad"], [84, 0, 1, "", "_static_expand_dims"], [84, 0, 1, "", "_static_flip"], [84, 0, 1, "", "_static_permute_dims"], [84, 0, 1, "", "_static_repeat"], [84, 0, 1, "", "_static_reshape"], [84, 0, 1, "", "_static_roll"], [84, 0, 1, "", "_static_split"], [84, 0, 1, "", "_static_squeeze"], [84, 0, 1, "", "_static_stack"], [84, 0, 1, "", "_static_swapaxes"], [84, 0, 1, "", "_static_tile"], [84, 0, 1, "", "_static_unstack"], [84, 0, 1, "", "_static_zero_pad"], [84, 0, 1, "", "clip"], [84, 0, 1, "", "concat"], [84, 0, 1, "", "constant_pad"], [84, 0, 1, "", "expand_dims"], [84, 0, 1, "", "flip"], [84, 0, 1, "", "permute_dims"], [84, 0, 1, "", "repeat"], [84, 0, 1, "", "reshape"], [84, 0, 1, "", "roll"], [84, 0, 1, "", "split"], [84, 0, 1, "", "squeeze"], [84, 0, 1, "", "stack"], [84, 0, 1, "", "swapaxes"], [84, 0, 1, "", "tile"], [84, 0, 1, "", "unstack"], [84, 0, 1, "", "zero_pad"]], "ivy.data_classes.container.norms": [[85, 1, 1, "", "_ContainerWithNorms"]], "ivy.data_classes.container.norms._ContainerWithNorms": [[85, 4, 1, "", "_abc_impl"], [85, 0, 1, "", "layer_norm"]], "ivy.data_classes.container.random": [[86, 1, 1, "", "_ContainerWithRandom"]], "ivy.data_classes.container.random._ContainerWithRandom": [[86, 4, 1, "", "_abc_impl"], [86, 0, 1, "", "_static_multinomial"], [86, 0, 1, "", "_static_randint"], [86, 0, 1, "", "_static_random_normal"], [86, 0, 1, "", "_static_random_uniform"], [86, 0, 1, "", "_static_shuffle"], [86, 0, 1, "", "multinomial"], [86, 0, 1, "", "randint"], [86, 0, 1, "", "random_normal"], [86, 0, 1, "", "random_uniform"], [86, 0, 1, "", "shuffle"]], "ivy.data_classes.container.searching": [[87, 1, 1, "", "_ContainerWithSearching"]], "ivy.data_classes.container.searching._ContainerWithSearching": [[87, 4, 1, "", "_abc_impl"], [87, 0, 1, "", "_static_argmax"], [87, 0, 1, "", "_static_argmin"], [87, 0, 1, "", "_static_argwhere"], [87, 0, 1, "", "_static_nonzero"], [87, 0, 1, "", "_static_where"], [87, 0, 1, "", "argmax"], [87, 0, 1, "", "argmin"], [87, 0, 1, "", "argwhere"], [87, 0, 1, "", "nonzero"], [87, 0, 1, "", "where"]], "ivy.data_classes.container.set": [[88, 1, 1, "", "_ContainerWithSet"]], "ivy.data_classes.container.set._ContainerWithSet": [[88, 4, 1, "", "_abc_impl"], [88, 0, 1, "", "_static_unique_all"], [88, 0, 1, "", "_static_unique_counts"], [88, 0, 1, "", "_static_unique_inverse"], [88, 0, 1, "", "_static_unique_values"], [88, 0, 1, "", "unique_all"], [88, 0, 1, "", "unique_counts"], [88, 0, 1, "", "unique_inverse"], [88, 0, 1, "", "unique_values"]], "ivy.data_classes.container.sorting": [[89, 1, 1, "", "_ContainerWithSorting"]], "ivy.data_classes.container.sorting._ContainerWithSorting": [[89, 4, 1, "", "_abc_impl"], [89, 0, 1, "", "_static_argsort"], [89, 0, 1, "", "_static_searchsorted"], [89, 0, 1, "", "_static_sort"], [89, 0, 1, "", "argsort"], [89, 0, 1, "", "msort"], [89, 0, 1, "", "searchsorted"], [89, 0, 1, "", "sort"], [89, 0, 1, "", "static_msort"]], "ivy.data_classes.container.statistical": [[90, 1, 1, "", "_ContainerWithStatistical"]], "ivy.data_classes.container.statistical._ContainerWithStatistical": [[90, 4, 1, "", "_abc_impl"], [90, 0, 1, "", "_static_cumprod"], [90, 0, 1, "", "_static_cumsum"], [90, 0, 1, "", "_static_min"], [90, 0, 1, "", "_static_prod"], [90, 0, 1, "", "_static_sum"], [90, 0, 1, "", "_static_var"], [90, 0, 1, "", "cumprod"], [90, 0, 1, "", "cumsum"], [90, 0, 1, "", "einsum"], [90, 0, 1, "", "max"], [90, 0, 1, "", "mean"], [90, 0, 1, "", "min"], [90, 0, 1, "", "prod"], [90, 0, 1, "", "std"], [90, 0, 1, "", "sum"], [90, 0, 1, "", "var"]], "ivy.data_classes.container.utility": [[91, 1, 1, "", "_ContainerWithUtility"]], "ivy.data_classes.container.utility._ContainerWithUtility": [[91, 4, 1, "", "_abc_impl"], [91, 0, 1, "", "_static_all"], [91, 0, 1, "", "_static_any"], [91, 0, 1, "", "all"], [91, 0, 1, "", "any"]], "ivy.data_classes.container.wrapping": [[92, 2, 1, "", "_wrap_function"], [92, 2, 1, "", "add_ivy_container_instance_methods"]], "ivy.data_classes.factorized_tensor": [[93, 3, 0, "-", "base"], [94, 3, 0, "-", "cp_tensor"], [95, 3, 0, "-", "parafac2_tensor"], [96, 3, 0, "-", "tr_tensor"], [97, 3, 0, "-", "tt_tensor"], [98, 3, 0, "-", "tucker_tensor"]], "ivy.data_classes.factorized_tensor.base": [[93, 1, 1, "", "FactorizedTensor"]], "ivy.data_classes.factorized_tensor.base.FactorizedTensor": [[93, 0, 1, "", "__init__"], [93, 4, 1, "", "_abc_impl"], [93, 0, 1, "", "mode_dot"], [93, 0, 1, "", "norm"], [93, 0, 1, "", "to_tensor"], [93, 0, 1, "", "to_unfolded"], [93, 0, 1, "", "to_vec"]], "ivy.data_classes.factorized_tensor.cp_tensor": [[94, 1, 1, "", "CPTensor"]], "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor": [[94, 0, 1, "", "__init__"], [94, 4, 1, "", "_abc_impl"], [94, 0, 1, "", "cp_copy"], [94, 0, 1, "", "cp_flip_sign"], [94, 0, 1, "", "cp_lstsq_grad"], [94, 0, 1, "", "cp_mode_dot"], [94, 0, 1, "", "cp_n_param"], [94, 0, 1, "", "cp_norm"], [94, 0, 1, "", "cp_normalize"], [94, 0, 1, "", "cp_to_tensor"], [94, 0, 1, "", "cp_to_unfolded"], [94, 0, 1, "", "cp_to_vec"], [94, 0, 1, "", "mode_dot"], [94, 5, 1, "", "n_param"], [94, 0, 1, "", "norm"], [94, 0, 1, "", "normalize"], [94, 0, 1, "", "to_tensor"], [94, 0, 1, "", "to_unfolded"], [94, 0, 1, "", "to_vec"], [94, 0, 1, "", "unfolding_dot_khatri_rao"], [94, 0, 1, "", "validate_cp_rank"], [94, 0, 1, "", "validate_cp_tensor"]], "ivy.data_classes.factorized_tensor.parafac2_tensor": [[95, 1, 1, "", "Parafac2Tensor"]], "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor": [[95, 0, 1, "", "__init__"], [95, 4, 1, "", "_abc_impl"], [95, 0, 1, "", "apply_parafac2_projections"], [95, 0, 1, "", "from_CPTensor"], [95, 5, 1, "", "n_param"], [95, 0, 1, "", "parafac2_normalise"], [95, 0, 1, "", "parafac2_to_slice"], [95, 0, 1, "", "parafac2_to_slices"], [95, 0, 1, "", "parafac2_to_tensor"], [95, 0, 1, "", "parafac2_to_unfolded"], [95, 0, 1, "", "parafac2_to_vec"], [95, 0, 1, "", "to_tensor"], [95, 0, 1, "", "to_unfolded"], [95, 0, 1, "", "to_vec"], [95, 0, 1, "", "validate_parafac2_tensor"]], "ivy.data_classes.factorized_tensor.tr_tensor": [[96, 1, 1, "", "TRTensor"]], "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor": [[96, 0, 1, "", "__init__"], [96, 4, 1, "", "_abc_impl"], [96, 5, 1, "", "n_param"], [96, 0, 1, "", "to_tensor"], [96, 0, 1, "", "to_unfolded"], [96, 0, 1, "", "to_vec"], [96, 0, 1, "", "tr_n_param"], [96, 0, 1, "", "tr_to_tensor"], [96, 0, 1, "", "tr_to_unfolded"], [96, 0, 1, "", "tr_to_vec"], [96, 0, 1, "", "validate_tr_rank"], [96, 0, 1, "", "validate_tr_tensor"]], "ivy.data_classes.factorized_tensor.tt_tensor": [[97, 1, 1, "", "TTTensor"]], "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor": [[97, 0, 1, "", "__init__"], [97, 4, 1, "", "_abc_impl"], [97, 0, 1, "", "_tt_n_param"], [97, 0, 1, "", "index_update"], [97, 5, 1, "", "n_param"], [97, 0, 1, "", "pad_tt_rank"], [97, 0, 1, "", "to_tensor"], [97, 0, 1, "", "to_unfolding"], [97, 0, 1, "", "to_vec"], [97, 0, 1, "", "tt_to_tensor"], [97, 0, 1, "", "tt_to_unfolded"], [97, 0, 1, "", "tt_to_vec"], [97, 0, 1, "", "validate_tt_rank"], [97, 0, 1, "", "validate_tt_tensor"]], "ivy.data_classes.factorized_tensor.tucker_tensor": [[98, 1, 1, "", "TuckerTensor"], [98, 2, 1, "", "_bisection_root_finder"]], "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor": [[98, 0, 1, "", "__init__"], [98, 4, 1, "", "_abc_impl"], [98, 0, 1, "", "mode_dot"], [98, 5, 1, "", "n_param"], [98, 0, 1, "", "to_tensor"], [98, 0, 1, "", "to_unfolded"], [98, 0, 1, "", "to_vec"], [98, 0, 1, "", "tucker_copy"], [98, 0, 1, "", "tucker_mode_dot"], [98, 0, 1, "", "tucker_n_param"], [98, 0, 1, "", "tucker_normalize"], [98, 0, 1, "", "tucker_to_tensor"], [98, 0, 1, "", "tucker_to_unfolded"], [98, 0, 1, "", "tucker_to_vec"], [98, 0, 1, "", "validate_tucker_rank"], [98, 0, 1, "", "validate_tucker_tensor"]], "ivy.data_classes.nested_array": [[103, 3, 0, "-", "base"], [104, 3, 0, "-", "elementwise"], [102, 3, 0, "-", "nested_array"]], "ivy.data_classes.nested_array.base": [[103, 1, 1, "", "NestedArrayBase"]], "ivy.data_classes.nested_array.base.NestedArrayBase": [[103, 0, 1, "", "__init__"], [103, 4, 1, "", "_abc_impl"], [103, 0, 1, "", "broadcast_shapes"], [103, 5, 1, "", "data"], [103, 5, 1, "", "device"], [103, 5, 1, "", "dtype"], [103, 5, 1, "", "inner_shape"], [103, 5, 1, "", "ndim"], [103, 0, 1, "", "nested_array"], [103, 5, 1, "", "nested_rank"], [103, 0, 1, "", "ragged_map"], [103, 0, 1, "", "ragged_multi_map"], [103, 0, 1, "", "ragged_multi_map_in_function"], [103, 0, 1, "", "replace_ivy_arrays"], [103, 5, 1, "", "shape"], [103, 0, 1, "", "unbind"]], "ivy.data_classes.nested_array.elementwise": [[104, 1, 1, "", "NestedArrayElementwise"]], "ivy.data_classes.nested_array.elementwise.NestedArrayElementwise": [[104, 4, 1, "", "_abc_impl"], [104, 0, 1, "", "static_add"]], "ivy.data_classes.nested_array.nested_array": [[102, 1, 1, "", "NestedArray"]], "ivy.data_classes.nested_array.nested_array.NestedArray": [[102, 0, 1, "", "__init__"], [102, 0, 1, "", "from_row_lengths"], [102, 0, 1, "", "from_row_splits"]], "ivy.functional.ivy": [[623, 3, 0, "-", "activations"], [624, 3, 0, "-", "constants"], [625, 3, 0, "-", "control_flow_ops"], [626, 3, 0, "-", "creation"], [627, 3, 0, "-", "data_type"], [628, 3, 0, "-", "device"], [629, 3, 0, "-", "elementwise"], [630, 3, 0, "-", "experimental"], [631, 3, 0, "-", "general"], [632, 3, 0, "-", "gradients"], [633, 3, 0, "-", "layers"], [634, 3, 0, "-", "linear_algebra"], [635, 3, 0, "-", "losses"], [636, 3, 0, "-", "manipulation"], [637, 3, 0, "-", "meta"], [638, 3, 0, "-", "nest"], [639, 3, 0, "-", "norms"], [640, 3, 0, "-", "random"], [641, 3, 0, "-", "searching"], [642, 3, 0, "-", "set"], [643, 3, 0, "-", "sorting"], [644, 3, 0, "-", "statistical"], [645, 3, 0, "-", "utility"]], "ivy.functional.ivy.experimental": [[364, 3, 0, "-", "activations"], [365, 3, 0, "-", "constants"], [366, 3, 0, "-", "creation"], [367, 3, 0, "-", "data_type"], [368, 3, 0, "-", "device"], [369, 3, 0, "-", "elementwise"], [370, 3, 0, "-", "general"], [371, 3, 0, "-", "gradients"], [372, 3, 0, "-", "layers"], [373, 3, 0, "-", "linear_algebra"], [374, 3, 0, "-", "losses"], [375, 3, 0, "-", "manipulation"], [376, 3, 0, "-", "meta"], [377, 3, 0, "-", "nest"], [378, 3, 0, "-", "norms"], [379, 3, 0, "-", "random"], [380, 3, 0, "-", "searching"], [381, 3, 0, "-", "set"], [382, 3, 0, "-", "sorting"], [383, 3, 0, "-", "sparse_array"], [384, 3, 0, "-", "statistical"], [385, 3, 0, "-", "utility"]], "ivy.stateful": [[785, 3, 0, "-", "activations"], [786, 3, 0, "-", "converters"], [787, 3, 0, "-", "helpers"], [788, 3, 0, "-", "initializers"], [789, 3, 0, "-", "layers"], [790, 3, 0, "-", "losses"], [791, 3, 0, "-", "module"], [792, 3, 0, "-", "norms"], [793, 3, 0, "-", "optimizers"], [794, 3, 0, "-", "sequential"]], "ivy.stateful.activations": [[785, 1, 1, "", "ELU"], [785, 1, 1, "", "GEGLU"], [785, 1, 1, "", "GELU"], [785, 1, 1, "", "Hardswish"], [785, 1, 1, "", "LeakyReLU"], [785, 1, 1, "", "LogSigmoid"], [785, 1, 1, "", "LogSoftmax"], [785, 1, 1, "", "Logit"], [785, 1, 1, "", "Mish"], [785, 1, 1, "", "PReLU"], [785, 1, 1, "", "ReLU"], [785, 1, 1, "", "ReLU6"], [785, 1, 1, "", "SeLU"], [785, 1, 1, "", "SiLU"], [785, 1, 1, "", "Sigmoid"], [785, 1, 1, "", "Softmax"], [785, 1, 1, "", "Softplus"], [785, 1, 1, "", "Tanh"]], "ivy.stateful.activations.ELU": [[785, 0, 1, "", "__init__"]], "ivy.stateful.activations.GEGLU": [[785, 0, 1, "", "__init__"]], "ivy.stateful.activations.GELU": [[785, 0, 1, "", "__init__"]], "ivy.stateful.activations.Hardswish": [[785, 0, 1, "", "__init__"]], "ivy.stateful.activations.LeakyReLU": [[785, 0, 1, "", "__init__"]], "ivy.stateful.activations.LogSigmoid": [[785, 0, 1, "", "__init__"]], "ivy.stateful.activations.LogSoftmax": [[785, 0, 1, "", "__init__"]], "ivy.stateful.activations.Logit": [[785, 0, 1, "", "__init__"]], "ivy.stateful.activations.Mish": [[785, 0, 1, "", "__init__"]], "ivy.stateful.activations.PReLU": [[785, 0, 1, "", "__init__"]], "ivy.stateful.activations.ReLU": [[785, 0, 1, "", "__init__"]], "ivy.stateful.activations.ReLU6": [[785, 0, 1, "", "__init__"]], "ivy.stateful.activations.SeLU": [[785, 0, 1, "", "__init__"]], "ivy.stateful.activations.SiLU": [[785, 0, 1, "", "__init__"]], "ivy.stateful.activations.Sigmoid": [[785, 0, 1, "", "__init__"]], "ivy.stateful.activations.Softmax": [[785, 0, 1, "", "__init__"]], "ivy.stateful.activations.Softplus": [[785, 0, 1, "", "__init__"]], "ivy.stateful.activations.Tanh": [[785, 0, 1, "", "__init__"]], "ivy.stateful.converters": [[786, 1, 1, "", "ModuleConverters"], [786, 2, 1, "", "to_ivy_module"]], "ivy.stateful.converters.ModuleConverters": [[786, 0, 1, "", "from_flax_module"], [786, 0, 1, "", "from_haiku_module"], [786, 0, 1, "", "from_keras_module"], [786, 0, 1, "", "from_paddle_module"], [786, 0, 1, "", "from_torch_module"], [786, 0, 1, "", "to_keras_module"]], "ivy.stateful.helpers": [[787, 1, 1, "", "ModuleHelpers"]], "ivy.stateful.initializers": [[788, 1, 1, "", "Constant"], [788, 1, 1, "", "FirstLayerSiren"], [788, 1, 1, "", "GlorotUniform"], [788, 1, 1, "", "Initializer"], [788, 1, 1, "", "KaimingNormal"], [788, 1, 1, "", "Ones"], [788, 1, 1, "", "RandomNormal"], [788, 1, 1, "", "Siren"], [788, 1, 1, "", "Uniform"], [788, 1, 1, "", "Zeros"]], "ivy.stateful.initializers.Constant": [[788, 0, 1, "", "__init__"], [788, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.FirstLayerSiren": [[788, 0, 1, "", "__init__"]], "ivy.stateful.initializers.GlorotUniform": [[788, 0, 1, "", "__init__"]], "ivy.stateful.initializers.Initializer": [[788, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.KaimingNormal": [[788, 0, 1, "", "__init__"], [788, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.Ones": [[788, 0, 1, "", "__init__"]], "ivy.stateful.initializers.RandomNormal": [[788, 0, 1, "", "__init__"], [788, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.Siren": [[788, 0, 1, "", "__init__"]], "ivy.stateful.initializers.Uniform": [[788, 0, 1, "", "__init__"], [788, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.Zeros": [[788, 0, 1, "", "__init__"]], "ivy.stateful.layers": [[789, 1, 1, "", "AdaptiveAvgPool1d"], [789, 1, 1, "", "AdaptiveAvgPool2d"], [789, 1, 1, "", "AvgPool1D"], [789, 1, 1, "", "AvgPool2D"], [789, 1, 1, "", "AvgPool3D"], [789, 1, 1, "", "Conv1D"], [789, 1, 1, "", "Conv1DTranspose"], [789, 1, 1, "", "Conv2D"], [789, 1, 1, "", "Conv2DTranspose"], [789, 1, 1, "", "Conv3D"], [789, 1, 1, "", "Conv3DTranspose"], [789, 1, 1, "", "Dct"], [789, 1, 1, "", "DepthwiseConv2D"], [789, 1, 1, "", "Dropout"], [789, 1, 1, "", "Embedding"], [789, 1, 1, "", "FFT"], [789, 1, 1, "", "IFFT"], [789, 1, 1, "", "Identity"], [789, 1, 1, "", "LSTM"], [789, 1, 1, "", "Linear"], [789, 1, 1, "", "MaxPool1D"], [789, 1, 1, "", "MaxPool2D"], [789, 1, 1, "", "MaxPool3D"], [789, 1, 1, "", "MultiHeadAttention"]], "ivy.stateful.layers.AdaptiveAvgPool1d": [[789, 0, 1, "", "__init__"]], "ivy.stateful.layers.AdaptiveAvgPool2d": [[789, 0, 1, "", "__init__"]], "ivy.stateful.layers.AvgPool1D": [[789, 0, 1, "", "__init__"]], "ivy.stateful.layers.AvgPool2D": [[789, 0, 1, "", "__init__"]], "ivy.stateful.layers.AvgPool3D": [[789, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv1D": [[789, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv1DTranspose": [[789, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv2D": [[789, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv2DTranspose": [[789, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv3D": [[789, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv3DTranspose": [[789, 0, 1, "", "__init__"]], "ivy.stateful.layers.Dct": [[789, 0, 1, "", "__init__"]], "ivy.stateful.layers.DepthwiseConv2D": [[789, 0, 1, "", "__init__"]], "ivy.stateful.layers.Dropout": [[789, 0, 1, "", "__init__"]], "ivy.stateful.layers.Embedding": [[789, 0, 1, "", "__init__"]], "ivy.stateful.layers.FFT": [[789, 0, 1, "", "__init__"]], "ivy.stateful.layers.IFFT": [[789, 0, 1, "", "__init__"]], "ivy.stateful.layers.Identity": [[789, 0, 1, "", "__init__"]], "ivy.stateful.layers.LSTM": [[789, 0, 1, "", "__init__"], [789, 0, 1, "", "get_initial_state"]], "ivy.stateful.layers.Linear": [[789, 0, 1, "", "__init__"]], "ivy.stateful.layers.MaxPool1D": [[789, 0, 1, "", "__init__"]], "ivy.stateful.layers.MaxPool2D": [[789, 0, 1, "", "__init__"]], "ivy.stateful.layers.MaxPool3D": [[789, 0, 1, "", "__init__"]], "ivy.stateful.layers.MultiHeadAttention": [[789, 0, 1, "", "__init__"]], "ivy.stateful.losses": [[790, 1, 1, "", "BinaryCrossEntropyLoss"], [790, 1, 1, "", "CrossEntropyLoss"], [790, 1, 1, "", "LogPoissonLoss"]], "ivy.stateful.losses.BinaryCrossEntropyLoss": [[790, 0, 1, "", "__init__"]], "ivy.stateful.losses.CrossEntropyLoss": [[790, 0, 1, "", "__init__"]], "ivy.stateful.losses.LogPoissonLoss": [[790, 0, 1, "", "__init__"]], "ivy.stateful.module": [[791, 1, 1, "", "Module"], [791, 1, 1, "", "ModuleMeta"]], "ivy.stateful.module.Module": [[791, 0, 1, "", "__call__"], [791, 0, 1, "", "__init__"], [791, 5, 1, "", "buffers"], [791, 0, 1, "", "build"], [791, 5, 1, "", "build_mode"], [791, 5, 1, "", "built"], [791, 5, 1, "", "device"], [791, 5, 1, "", "dtype"], [791, 0, 1, "", "eval"], [791, 0, 1, "", "load"], [791, 5, 1, "", "module_dict"], [791, 0, 1, "", "register_buffer"], [791, 0, 1, "", "register_parameter"], [791, 0, 1, "", "save"], [791, 0, 1, "", "save_weights"], [791, 0, 1, "", "show_graph"], [791, 5, 1, "", "state_dict"], [791, 0, 1, "", "to_device"], [791, 0, 1, "", "trace_graph"], [791, 0, 1, "", "train"], [791, 5, 1, "", "training"], [791, 5, 1, "", "v"]], "ivy.stateful.norms": [[792, 1, 1, "", "BatchNorm2D"], [792, 1, 1, "", "LayerNorm"]], "ivy.stateful.norms.BatchNorm2D": [[792, 0, 1, "", "__init__"]], "ivy.stateful.norms.LayerNorm": [[792, 0, 1, "", "__init__"]], "ivy.stateful.optimizers": [[793, 1, 1, "", "Adam"], [793, 1, 1, "", "AdamW"], [793, 1, 1, "", "LAMB"], [793, 1, 1, "", "LARS"], [793, 1, 1, "", "Optimizer"], [793, 1, 1, "", "SGD"]], "ivy.stateful.optimizers.Adam": [[793, 0, 1, "", "__init__"], [793, 0, 1, "", "set_state"], [793, 5, 1, "", "state"]], "ivy.stateful.optimizers.AdamW": [[793, 0, 1, "", "__init__"]], "ivy.stateful.optimizers.LAMB": [[793, 0, 1, "", "__init__"], [793, 0, 1, "", "set_state"], [793, 5, 1, "", "state"]], "ivy.stateful.optimizers.LARS": [[793, 0, 1, "", "__init__"], [793, 0, 1, "", "set_state"], [793, 5, 1, "", "state"]], "ivy.stateful.optimizers.Optimizer": [[793, 0, 1, "", "__init__"], [793, 0, 1, "", "set_state"], [793, 0, 1, "", "step"]], "ivy.stateful.optimizers.SGD": [[793, 0, 1, "", "__init__"], [793, 0, 1, "", "set_state"], [793, 5, 1, "", "state"]], "ivy.stateful.sequential": [[794, 1, 1, "", "Sequential"]], "ivy.stateful.sequential.Sequential": [[794, 0, 1, "", "__init__"]], "ivy.utils": [[795, 3, 0, "-", "assertions"], [796, 3, 0, "-", "backend"], [800, 3, 0, "-", "binaries"], [801, 3, 0, "-", "dynamic_import"], [802, 3, 0, "-", "einsum_parser"], [803, 3, 0, "-", "einsum_path_helpers"], [804, 3, 0, "-", "exceptions"], [805, 3, 0, "-", "inspection"], [806, 3, 0, "-", "logging"], [807, 3, 0, "-", "profiler"], [808, 3, 0, "-", "verbosity"]], "ivy.utils.assertions": [[795, 2, 1, "", "check_all"], [795, 2, 1, "", "check_all_or_any_fn"], [795, 2, 1, "", "check_any"], [795, 2, 1, "", "check_dev_correct_formatting"], [795, 2, 1, "", "check_dimensions"], [795, 2, 1, "", "check_elem_in_list"], [795, 2, 1, "", "check_equal"], [795, 2, 1, "", "check_exists"], [795, 2, 1, "", "check_false"], [795, 2, 1, "", "check_gather_input_valid"], [795, 2, 1, "", "check_gather_nd_input_valid"], [795, 2, 1, "", "check_greater"], [795, 2, 1, "", "check_inplace_sizes_valid"], [795, 2, 1, "", "check_isinstance"], [795, 2, 1, "", "check_kernel_padding_size"], [795, 2, 1, "", "check_less"], [795, 2, 1, "", "check_one_way_broadcastable"], [795, 2, 1, "", "check_same_dtype"], [795, 2, 1, "", "check_shape"], [795, 2, 1, "", "check_shapes_broadcastable"], [795, 2, 1, "", "check_true"], [795, 2, 1, "", "check_unsorted_segment_valid_params"]], "ivy.utils.backend": [[797, 3, 0, "-", "ast_helpers"], [798, 3, 0, "-", "handler"], [799, 3, 0, "-", "sub_backend_handler"]], "ivy.utils.backend.ast_helpers": [[797, 1, 1, "", "ImportTransformer"], [797, 1, 1, "", "IvyLoader"], [797, 1, 1, "", "IvyPathFinder"]], "ivy.utils.backend.ast_helpers.ImportTransformer": [[797, 0, 1, "", "__init__"], [797, 0, 1, "", "impersonate_import"], [797, 0, 1, "", "visit_Import"], [797, 0, 1, "", "visit_ImportFrom"]], "ivy.utils.backend.ast_helpers.IvyLoader": [[797, 0, 1, "", "__init__"], [797, 0, 1, "", "exec_module"]], "ivy.utils.backend.ast_helpers.IvyPathFinder": [[797, 0, 1, "", "find_spec"]], "ivy.utils.backend.handler": [[798, 1, 1, "", "ContextManager"], [798, 2, 1, "", "choose_random_backend"], [798, 2, 1, "", "current_backend"], [798, 2, 1, "", "dynamic_backend_converter"], [798, 2, 1, "", "prevent_access_locally"], [798, 2, 1, "", "previous_backend"], [798, 2, 1, "", "set_backend"], [798, 2, 1, "", "set_backend_to_specific_version"], [798, 2, 1, "", "set_jax_backend"], [798, 2, 1, "", "set_mxnet_backend"], [798, 2, 1, "", "set_numpy_backend"], [798, 2, 1, "", "set_paddle_backend"], [798, 2, 1, "", "set_tensorflow_backend"], [798, 2, 1, "", "set_torch_backend"], [798, 2, 1, "", "unset_backend"], [798, 2, 1, "", "with_backend"]], "ivy.utils.backend.handler.ContextManager": [[798, 0, 1, "", "__init__"]], "ivy.utils.backend.sub_backend_handler": [[799, 2, 1, "", "clear_sub_backends"], [799, 2, 1, "", "find_available_sub_backends"], [799, 2, 1, "", "fn_name_from_version_specific_fn_name"], [799, 2, 1, "", "fn_name_from_version_specific_fn_name_sub_backend"], [799, 2, 1, "", "set_sub_backend"], [799, 2, 1, "", "set_sub_backend_to_specific_version"], [799, 2, 1, "", "unset_sub_backend"]], "ivy.utils.binaries": [[800, 2, 1, "", "check_for_binaries"], [800, 2, 1, "", "cleanup_and_fetch_binaries"]], "ivy.utils.dynamic_import": [[801, 2, 1, "", "import_module"]], "ivy.utils.einsum_parser": [[802, 2, 1, "", "convert_interleaved_input"], [802, 2, 1, "", "convert_subscripts"], [802, 2, 1, "", "find_output_shape"], [802, 2, 1, "", "find_output_str"], [802, 2, 1, "", "gen_unused_symbols"], [802, 2, 1, "", "get_symbol"], [802, 2, 1, "", "has_valid_einsum_chars_only"], [802, 2, 1, "", "is_valid_einsum_char"], [802, 2, 1, "", "legalise_einsum_expr"], [802, 2, 1, "", "possibly_convert_to_numpy"]], "ivy.utils.einsum_path_helpers": [[803, 2, 1, "", "can_dot"], [803, 2, 1, "", "compute_size_by_dict"], [803, 2, 1, "", "find_contraction"], [803, 2, 1, "", "flop_count"], [803, 2, 1, "", "greedy_path"], [803, 2, 1, "", "optimal_path"], [803, 2, 1, "", "parse_einsum_input"], [803, 2, 1, "", "parse_possible_contraction"], [803, 2, 1, "", "update_other_results"]], "ivy.utils.exceptions": [[804, 7, 1, "", "InplaceUpdateException"], [804, 7, 1, "", "IvyAttributeError"], [804, 7, 1, "", "IvyBackendException"], [804, 7, 1, "", "IvyBroadcastShapeError"], [804, 7, 1, "", "IvyDeviceError"], [804, 7, 1, "", "IvyDtypePromotionError"], [804, 7, 1, "", "IvyError"], [804, 7, 1, "", "IvyException"], [804, 7, 1, "", "IvyIndexError"], [804, 7, 1, "", "IvyInvalidBackendException"], [804, 7, 1, "", "IvyNotImplementedException"], [804, 7, 1, "", "IvyValueError"], [804, 2, 1, "", "handle_exceptions"]], "ivy.utils.exceptions.InplaceUpdateException": [[804, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyAttributeError": [[804, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyBackendException": [[804, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyBroadcastShapeError": [[804, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyDeviceError": [[804, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyDtypePromotionError": [[804, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyError": [[804, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyException": [[804, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyIndexError": [[804, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyInvalidBackendException": [[804, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyNotImplementedException": [[804, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyValueError": [[804, 0, 1, "", "__init__"]], "ivy.utils.inspection": [[805, 2, 1, "", "add_array_specs"], [805, 2, 1, "", "fn_array_spec"]], "ivy.utils.logging": [[806, 2, 1, "", "set_logging_mode"], [806, 2, 1, "", "unset_logging_mode"]], "ivy.utils.profiler": [[807, 1, 1, "", "Profiler"], [807, 2, 1, "", "tensorflow_profile_start"], [807, 2, 1, "", "tensorflow_profile_stop"], [807, 2, 1, "", "torch_profiler_init"], [807, 2, 1, "", "torch_profiler_start"], [807, 2, 1, "", "torch_profiler_stop"]], "ivy.utils.profiler.Profiler": [[807, 0, 1, "", "__init__"], [807, 4, 1, "", "print_stats"], [807, 4, 1, "", "viz"]], "ivy.utils.verbosity": [[808, 2, 1, "", "cprint"]], "ivy_tests.test_ivy.helpers": [[768, 3, 0, "-", "assertions"], [769, 3, 0, "-", "available_frameworks"], [770, 3, 0, "-", "function_testing"], [771, 3, 0, "-", "globals"], [772, 3, 0, "-", "hypothesis_helpers"], [777, 3, 0, "-", "multiprocessing"], [778, 3, 0, "-", "pipeline_helper"], [779, 3, 0, "-", "structs"], [780, 3, 0, "-", "test_parameter_flags"], [781, 3, 0, "-", "testing_helpers"]], "ivy_tests.test_ivy.helpers.assertions": [[768, 2, 1, "", "assert_all_close"], [768, 2, 1, "", "assert_same_type"], [768, 2, 1, "", "assert_same_type_and_shape"], [768, 2, 1, "", "check_unsupported_device"], [768, 2, 1, "", "check_unsupported_device_and_dtype"], [768, 2, 1, "", "check_unsupported_dtype"], [768, 2, 1, "", "test_unsupported_function"], [768, 2, 1, "", "value_test"]], "ivy_tests.test_ivy.helpers.function_testing": [[770, 2, 1, "", "args_to_container"], [770, 2, 1, "", "args_to_frontend"], [770, 2, 1, "", "arrays_to_frontend"], [770, 2, 1, "", "as_lists"], [770, 2, 1, "", "convtrue"], [770, 2, 1, "", "create_args_kwargs"], [770, 2, 1, "", "flatten"], [770, 2, 1, "", "flatten_and_to_np"], [770, 2, 1, "", "flatten_frontend"], [770, 2, 1, "", "flatten_frontend_fw_to_np"], [770, 2, 1, "", "flatten_frontend_to_np"], [770, 2, 1, "", "get_frontend_ret"], [770, 2, 1, "", "get_ret_and_flattened_np_array"], [770, 2, 1, "", "gradient_incompatible_function"], [770, 2, 1, "", "gradient_test"], [770, 2, 1, "", "gradient_unsupported_dtypes"], [770, 2, 1, "", "kwargs_to_args_n_kwargs"], [770, 2, 1, "", "test_frontend_function"], [770, 2, 1, "", "test_frontend_method"], [770, 2, 1, "", "test_function"], [770, 2, 1, "", "test_function_backend_computation"], [770, 2, 1, "", "test_function_ground_truth_computation"], [770, 2, 1, "", "test_gradient_backend_computation"], [770, 2, 1, "", "test_gradient_ground_truth_computation"], [770, 2, 1, "", "test_method"], [770, 2, 1, "", "test_method_backend_computation"], [770, 2, 1, "", "test_method_ground_truth_computation"], [770, 2, 1, "", "traced_if_required"], [770, 2, 1, "", "wrap_frontend_function_args"]], "ivy_tests.test_ivy.helpers.globals": [[771, 6, 1, "", "CURRENT_FRONTEND_CONFIG"], [771, 7, 1, "", "InterruptedTest"], [771, 1, 1, "", "TestData"], [771, 2, 1, "", "setup_api_test"], [771, 2, 1, "", "setup_frontend_test"], [771, 2, 1, "", "teardown_api_test"], [771, 2, 1, "", "teardown_frontend_test"]], "ivy_tests.test_ivy.helpers.globals.InterruptedTest": [[771, 0, 1, "", "__init__"]], "ivy_tests.test_ivy.helpers.globals.TestData": [[771, 0, 1, "", "__init__"], [771, 4, 1, "", "fn_name"], [771, 4, 1, "", "fn_tree"], [771, 4, 1, "", "is_method"], [771, 4, 1, "", "supported_device_dtypes"], [771, 4, 1, "", "test_fn"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers": [[773, 3, 0, "-", "array_helpers"], [774, 3, 0, "-", "dtype_helpers"], [775, 3, 0, "-", "general_helpers"], [776, 3, 0, "-", "number_helpers"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers": [[773, 2, 1, "", "array_and_broadcastable_shape"], [773, 2, 1, "", "array_bools"], [773, 2, 1, "", "array_helpers_dtype_info_helper"], [773, 2, 1, "", "array_indices_axis"], [773, 2, 1, "", "array_indices_put_along_axis"], [773, 2, 1, "", "array_values"], [773, 2, 1, "", "arrays_and_axes"], [773, 2, 1, "", "arrays_for_pooling"], [773, 2, 1, "", "broadcast_shapes"], [773, 2, 1, "", "cond_data_gen_helper"], [773, 2, 1, "", "create_concatenable_arrays_dtypes"], [773, 2, 1, "", "create_nested_input"], [773, 2, 1, "", "dtype_and_values"], [773, 2, 1, "", "dtype_array_query"], [773, 2, 1, "", "dtype_array_query_val"], [773, 2, 1, "", "dtype_values_axis"], [773, 2, 1, "", "einsum_helper"], [773, 2, 1, "", "get_first_solve_batch_matrix"], [773, 2, 1, "", "get_first_solve_matrix"], [773, 2, 1, "", "get_second_solve_batch_matrix"], [773, 2, 1, "", "get_second_solve_matrix"], [773, 2, 1, "", "list_of_size"], [773, 2, 1, "", "lists"], [773, 2, 1, "", "mutually_broadcastable_shapes"], [773, 2, 1, "", "prod"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers": [[774, 2, 1, "", "array_dtypes"], [774, 2, 1, "", "cast_filter"], [774, 2, 1, "", "cast_filter_helper"], [774, 2, 1, "", "get_castable_dtype"], [774, 2, 1, "", "get_dtypes"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers": [[775, 7, 1, "", "BroadcastError"], [775, 2, 1, "", "apply_safety_factor"], [775, 2, 1, "", "broadcast_shapes"], [775, 2, 1, "", "dims_and_offset"], [775, 2, 1, "", "embedding_helper"], [775, 2, 1, "", "general_helpers_dtype_info_helper"], [775, 2, 1, "", "get_axis"], [775, 2, 1, "", "get_bounds"], [775, 2, 1, "", "get_mean_std"], [775, 2, 1, "", "get_shape"], [775, 2, 1, "", "matrix_is_stable"], [775, 2, 1, "", "reshape_shapes"], [775, 2, 1, "", "sizes_"], [775, 2, 1, "", "subsets"], [775, 2, 1, "", "two_broadcastable_shapes"], [775, 2, 1, "", "x_and_filters"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers": [[776, 2, 1, "", "floats"], [776, 2, 1, "", "ints"], [776, 2, 1, "", "number"]], "ivy_tests.test_ivy.helpers.multiprocessing": [[777, 2, 1, "", "backend_proc"], [777, 2, 1, "", "frontend_proc"]], "ivy_tests.test_ivy.helpers.pipeline_helper": [[778, 1, 1, "", "BackendHandler"], [778, 1, 1, "", "BackendHandlerMode"], [778, 1, 1, "", "WithBackendContext"], [778, 2, 1, "", "get_frontend_config"]], "ivy_tests.test_ivy.helpers.pipeline_helper.BackendHandler": [[778, 0, 1, "", "update_backend"]], "ivy_tests.test_ivy.helpers.pipeline_helper.BackendHandlerMode": [[778, 4, 1, "", "SetBackend"], [778, 4, 1, "", "WithBackend"]], "ivy_tests.test_ivy.helpers.pipeline_helper.WithBackendContext": [[778, 0, 1, "", "__init__"]], "ivy_tests.test_ivy.helpers.structs": [[779, 1, 1, "", "FrontendMethodData"]], "ivy_tests.test_ivy.helpers.structs.FrontendMethodData": [[779, 0, 1, "", "__init__"], [779, 4, 1, "", "framework_init_module"], [779, 4, 1, "", "init_name"], [779, 4, 1, "", "ivy_init_module"], [779, 4, 1, "", "method_name"]], "ivy_tests.test_ivy.helpers.test_parameter_flags": [[780, 1, 1, "", "DynamicFlag"], [780, 1, 1, "", "FrontendFunctionTestFlags"], [780, 1, 1, "", "FrontendInitTestFlags"], [780, 1, 1, "", "FrontendMethodTestFlags"], [780, 1, 1, "", "FunctionTestFlags"], [780, 1, 1, "", "InitMethodTestFlags"], [780, 1, 1, "", "MethodTestFlags"], [780, 1, 1, "", "TestFlags"], [780, 2, 1, "", "build_flag"], [780, 2, 1, "", "frontend_function_flags"], [780, 2, 1, "", "frontend_init_flags"], [780, 2, 1, "", "frontend_method_flags"], [780, 2, 1, "", "function_flags"], [780, 2, 1, "", "init_method_flags"], [780, 2, 1, "", "method_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.DynamicFlag": [[780, 0, 1, "", "__init__"], [780, 4, 1, "", "strategy"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendFunctionTestFlags": [[780, 0, 1, "", "__init__"], [780, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendInitTestFlags": [[780, 0, 1, "", "__init__"], [780, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendMethodTestFlags": [[780, 0, 1, "", "__init__"], [780, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.FunctionTestFlags": [[780, 0, 1, "", "__init__"], [780, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.InitMethodTestFlags": [[780, 0, 1, "", "__init__"], [780, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.MethodTestFlags": [[780, 0, 1, "", "__init__"], [780, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.TestFlags": [[780, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.testing_helpers": [[781, 2, 1, "", "handle_example"], [781, 2, 1, "", "handle_frontend_method"], [781, 2, 1, "", "handle_frontend_test"], [781, 2, 1, "", "handle_method"], [781, 2, 1, "", "handle_test"], [781, 2, 1, "", "num_positional_args"], [781, 2, 1, "", "num_positional_args_helper"], [781, 2, 1, "", "num_positional_args_method"], [781, 2, 1, "", "seed"]]}, "objtypes": {"0": "py:method", "1": "py:class", "2": "py:function", "3": "py:module", "4": "py:attribute", "5": "py:property", "6": "py:data", "7": "py:exception"}, "objnames": {"0": ["py", "method", "Python method"], "1": ["py", "class", "Python class"], "2": ["py", "function", "Python function"], "3": ["py", "module", "Python module"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "property", "Python property"], "6": ["py", "data", "Python data"], "7": ["py", "exception", "Python exception"]}, "titleterms": {"demo": [0, 2, 3, 4, 17, 28, 42, 43], "creat": [0, 40, 41, 815], "notebook": 0, "TO": 1, "replac": 1, "titl": 1, "exampl": [2, 6, 9, 11, 17, 36, 809, 828, 833, 836, 839, 841, 844, 860, 861, 862], "ivi": [3, 4, 6, 9, 16, 19, 27, 28, 29, 40, 41, 43, 44, 46, 809, 815, 817, 821, 823, 825, 828, 830, 836, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 853, 860, 861, 862, 873], "alexnet": 3, "instal": [3, 4, 9, 19, 40, 41, 43, 809, 853], "data": [3, 4, 6, 9, 11, 19, 28, 40, 51, 74, 105, 367, 627, 642, 746, 747, 748, 749, 826, 838, 841, 849, 852], "prepar": [3, 4, 6, 9], "infer": [3, 4, 6, 9, 835], "torch": [3, 4, 6, 9, 36, 43, 867, 868], "tensorflow": [3, 4, 6, 11, 15, 36, 43, 44, 45, 867], "jax": [3, 4, 6, 8, 10, 11, 36, 43, 867], "appendix": [3, 6], "code": [3, 19, 20, 21, 22, 29, 40, 832, 840, 842], "implement": [3, 6, 825, 836, 838, 858], "bert": 4, "dependeci": 4, "import": [4, 6, 9, 11, 19, 40, 41, 44, 801], "modul": [4, 791, 826, 827, 850, 861], "sequenc": [4, 833], "classif": 4, "model": [4, 5, 6, 8, 9, 10, 13, 14, 15, 26, 27, 28, 29, 40, 41, 42, 43, 44, 46, 851, 852], "how": [5, 24, 815, 823, 831, 840, 841], "To": [5, 46, 817], "convert": [5, 786, 851], "from": [5, 36, 43, 853], "pytorch": [5, 10, 11, 13, 42, 867], "paddlepaddl": 5, "about": [5, 40], "transpil": [5, 13, 14, 15, 22, 23, 24, 25, 26, 28, 29, 32, 33, 34, 35, 36, 42, 46, 809, 851, 853, 861], "compar": [5, 11], "result": [5, 41], "fine": 5, "tune": 5, "conclus": 5, "imag": [6, 9, 57, 80, 250, 811, 823], "segment": 6, "unet": 6, "custom": [6, 821, 823, 836, 840, 849, 852], "preprocess": 6, "load": [6, 9, 11, 766, 849], "visualis": [6, 9], "initi": [6, 9, 788, 850], "nativ": [6, 9, 821, 844], "pretrain": [6, 9], "weight": [6, 9, 849], "mask": 6, "function": [6, 19, 28, 29, 40, 41, 42, 44, 46, 106, 770, 815, 824, 826, 827, 830, 833, 834, 835, 836, 838, 839, 841, 842, 843, 844, 846, 851, 852, 861], "us": [6, 9, 16, 24, 27, 44, 46, 809, 811, 815, 816, 820, 836, 839, 849, 853, 860, 861], "your": [6, 9, 817, 841], "backend": [6, 11, 19, 28, 40, 41, 43, 44, 796, 799, 815, 822, 826, 836, 842, 846, 852], "acceler": [8, 10, 11], "mmpretrain": 8, "resnet": [9, 47], "set": [9, 36, 40, 41, 65, 88, 381, 642, 816, 822, 831, 843, 853], "label": 9, "resnet34": 9, "classifi": 9, "resnet50": 9, "xgboost": 11, "test": [11, 42, 770, 780, 781, 784, 815, 816, 817, 820, 825, 831, 839, 841], "xgb_frontend": 11, "xgbclassifi": 11, "xgb": 11, "more": [11, 816, 844, 858], "exhaust": 11, "evalu": 11, "train": [11, 40, 42, 44], "time": 11, "v": [11, 23, 33, 36, 832, 852, 857, 860], "number": [11, 776, 833], "boost": 11, "round": [11, 13, 15, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 42, 280, 840], "fraction": 11, "comparison": [11, 849], "metric": [11, 44], "guid": [12, 17], "build": [13, 14, 15, 44, 811, 823, 846], "top": [13, 14, 15, 818, 825, 875], "up": [13, 15, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 42, 816, 831, 840, 853], "haiku": 14, "develop": 16, "convolut": 16, "network": [16, 41, 44, 849, 851], "tutori": [17, 44], "And": 17, "learn": [17, 18, 867], "basic": [17, 18, 40, 41, 817, 838], "write": [19, 27, 838, 841], "content": [19, 42], "handler": [19, 28, 798, 799, 846], "structur": [19, 28, 823, 836, 852], "api": [19, 28, 29, 815, 820, 824, 825, 836, 842, 846, 848, 850, 851, 853, 857, 860, 861, 862, 864, 871, 873], "state": [19, 28, 29, 850, 852, 860], "unifi": [20, 23, 24, 30, 33, 34, 35, 40, 809, 848, 858, 862, 869, 873], "trace": [21, 23, 24, 29, 688, 830], "lazi": [23, 33, 860], "eager": [23, 33, 860], "decor": [24, 35, 830, 835, 841], "ani": [25, 26, 28, 29, 765], "librari": [25, 28, 29, 44, 46, 861], "odsc": 28, "framework": [28, 34, 40, 769, 782, 836, 839, 847, 867, 870, 873, 874], "graph": [28, 45, 868, 873], "tracer": [28, 846, 851, 853, 860, 868, 873], "quickstart": 29, "get": [29, 809, 817, 853], "familiar": 29, "0": [30, 31, 32, 33, 37, 38], "1": [31, 33, 34, 35, 36, 39, 46, 867], "compil": [31, 33, 34, 35, 41, 860, 865, 870, 872, 873], "2": [32, 35, 37, 46, 867], "select": 34, "As": 35, "3": [36, 38, 39, 46], "dynam": [36, 44, 801, 822, 852], "static": 36, "todo": [36, 817], "explain": 36, "via": 36, "why": [36, 841, 858], "mode": [36, 826, 830, 843], "i": [36, 809, 823, 844], "true": 36, "default": [36, 541], "when": [36, 809], "numpi": [36, 43, 838, 867], "fals": 36, "kornia": 37, "perceiv": 38, "stabl": 39, "diffus": 39, "oper": [40, 833, 843, 848, 852], "ml": [40, 856, 869, 873], "chang": 40, "one": 40, "line": [40, 817], "No": [40, 816, 858], "need": [40, 841], "worri": 40, "type": [40, 51, 74, 367, 627, 826, 834, 838, 852], "differ": 40, "them": 40, "all": [40, 764], "standalon": [40, 834], "defin": [40, 41, 42, 44], "optim": [40, 793, 850], "input": [40, 41, 833], "target": 40, "loss": [40, 60, 83, 374, 635, 790], "loop": [40, 44], "sampl": 41, "check": [41, 832, 852], "simpl": 41, "neural": 41, "deepmind": [42, 43], "": [42, 44, 815, 823, 840, 853], "perceiverio": [42, 43], "tabl": [42, 823, 826, 864], "construct": [42, 849], "some": 42, "helper": [42, 772, 773, 774, 775, 776, 778, 781, 787, 797, 803, 839, 841, 842], "pipelin": [42, 44, 778, 823, 825, 841, 852], "dataset": [42, 44], "download": 42, "dataload": 42, "gpu": [43, 852], "introduct": [43, 46, 838, 839], "python3": 43, "8": 43, "setup": [43, 832], "kernel": 43, "clone": [43, 816, 825], "repo": [43, 816], "ivy_model": 43, "run": [43, 817, 820, 823, 831, 841], "end": 44, "let": 44, "we": [44, 841], "ar": 44, "mnist": 44, "thi": 44, "temporari": 44, "loader": 44, "util": [44, 68, 91, 385, 645, 783], "plot": 44, "save": [44, 767, 849], "huggingfac": 45, "deit": 45, "can": 45, "visual": 45, "displai": 45, "html": 45, "file": 45, "browser": [45, 817], "interfac": 46, "telemetri": 46, "18": 47, "activ": [48, 70, 364, 623, 785], "convers": [49, 72, 835], "creation": [50, 73, 366, 626], "devic": [52, 75, 368, 628, 827, 833, 838], "elementwis": [53, 76, 104, 369, 629], "experiment": [54, 77, 630, 815], "gener": [55, 78, 370, 631, 775, 836, 841, 844, 860], "gradient": [56, 79, 346, 371, 632, 836], "layer": [58, 81, 372, 633, 789], "linear": [59, 82, 373, 634, 657], "algebra": [59, 82, 373, 634], "manipul": [61, 84, 375, 636], "norm": [62, 85, 378, 639, 792], "random": [63, 86, 379, 640], "search": [64, 87, 380, 641], "sort": [66, 89, 382, 643, 753], "statist": [67, 90, 384, 644], "wrap": [69, 92, 835], "base": [71, 93, 103], "cp": 94, "tensor": [94, 95, 96, 97, 98, 101], "parafac2": 95, "tr": 96, "tt": 97, "tucker": [98, 448], "arrai": [99, 102, 124, 383, 773, 820, 821, 825, 833, 848, 857, 860, 864], "contain": [100, 817, 824, 849], "factor": 101, "nest": [102, 377, 638], "class": [105, 782, 821, 830, 838, 848], "gelu": 107, "hardswish": 108, "leaky_relu": 109, "log_softmax": 110, "mish": 111, "relu": 112, "sigmoid": 113, "softmax": 114, "softplu": 115, "softsign": 116, "cmp_i": 117, "cmp_isnot": 118, "for_loop": 119, "if_els": 120, "try_except": 121, "while_loop": 122, "arang": 123, "asarrai": 125, "copy_arrai": 126, "empti": 127, "empty_lik": 128, "ey": 129, "from_dlpack": 130, "note": [130, 141, 626], "frombuff": 131, "full": [132, 839], "full_lik": 133, "linspac": 134, "logspac": 135, "meshgrid": 136, "native_arrai": 137, "one_hot": 138, "ones": 139, "ones_lik": 140, "to_dlpack": 141, "tril": 142, "triu": 143, "triu_indic": 144, "zero": 145, "zeros_lik": 146, "as_ivy_dtyp": 147, "as_native_dtyp": 148, "astyp": 149, "broadcast_arrai": 150, "broadcast_to": 151, "can_cast": 152, "check_float": 153, "closest_valid_dtyp": 154, "default_complex_dtyp": 155, "default_dtyp": 156, "default_float_dtyp": 157, "default_int_dtyp": 158, "default_uint_dtyp": 159, "dtype": [160, 774, 833], "dtype_bit": 161, "finfo": 162, "function_supported_dtyp": 163, "function_unsupported_dtyp": 164, "iinfo": 165, "infer_default_dtyp": 166, "invalid_dtyp": 167, "is_bool_dtyp": 168, "is_complex_dtyp": 169, "is_float_dtyp": 170, "is_hashable_dtyp": 171, "is_int_dtyp": 172, "is_native_dtyp": 173, "is_uint_dtyp": 174, "promote_typ": 175, "promote_types_of_input": 176, "result_typ": 177, "set_default_complex_dtyp": 178, "set_default_dtyp": 179, "set_default_float_dtyp": 180, "set_default_int_dtyp": 181, "set_default_uint_dtyp": 182, "type_promote_arrai": 183, "unset_default_complex_dtyp": 184, "unset_default_dtyp": 185, "unset_default_float_dtyp": 186, "unset_default_int_dtyp": 187, "unset_default_uint_dtyp": 188, "valid_dtyp": 189, "as_ivy_dev": 190, "as_native_dev": 191, "clear_cached_mem_on_dev": 192, "default_devic": 193, "dev": 194, "dev_util": 195, "function_supported_devic": 196, "function_unsupported_devic": 197, "get_all_ivy_arrays_on_dev": 198, "gpu_is_avail": 199, "handle_soft_device_vari": 200, "num_cpu_cor": 201, "num_gpu": 202, "num_ivy_arrays_on_dev": 203, "percent_used_mem_on_dev": 204, "print_all_ivy_arrays_on_dev": 205, "set_default_devic": 206, "set_soft_device_mod": 207, "paramet": [207, 575, 576, 581, 582, 584, 585, 628, 631, 780, 785, 843], "set_split_factor": 208, "split_factor": 209, "split_func_cal": 210, "to_devic": 211, "total_mem_on_dev": 212, "tpu_is_avail": 213, "unset_default_devic": 214, "unset_soft_device_mod": 215, "used_mem_on_dev": 216, "ab": 217, "aco": 218, "acosh": 219, "add": [220, 828, 839, 873], "angl": 221, "asin": 222, "asinh": 223, "atan": 224, "atan2": 225, "atanh": 226, "bitwise_and": 227, "bitwise_invert": 228, "bitwise_left_shift": 229, "bitwise_or": 230, "bitwise_right_shift": 231, "bitwise_xor": 232, "ceil": 233, "co": 234, "cosh": 235, "deg2rad": 236, "divid": 237, "equal": 238, "erf": 239, "exp": 240, "exp2": 241, "expm1": 242, "floor": 243, "floor_divid": 244, "fmin": 245, "fmod": 246, "gcd": 247, "greater": 248, "greater_equ": 249, "isfinit": 251, "isinf": 252, "isnan": 253, "isreal": 254, "lcm": 255, "less": 256, "less_equ": 257, "log": [258, 806, 816], "log10": 259, "log1p": 260, "log2": 261, "logaddexp": 262, "logaddexp2": 263, "logical_and": 264, "logical_not": 265, "logical_or": 266, "logical_xor": 267, "maximum": 268, "minimum": 269, "multipli": 270, "nan_to_num": 271, "neg": 272, "not_equ": 273, "posit": [274, 833], "pow": 275, "rad2deg": 276, "real": 277, "reciproc": 278, "remaind": 279, "sign": 281, "sin": 282, "sinh": 283, "sqrt": 284, "squar": 285, "subtract": 286, "tan": [287, 828, 839], "tanh": 288, "trapz": 289, "trunc": 290, "trunc_divid": 291, "celu": 292, "elu": 293, "hardshrink": 294, "hardsilu": 295, "hardtanh": 296, "logit": 297, "logsigmoid": 298, "prelu": 299, "relu6": 300, "scaled_tanh": 301, "selu": 302, "silu": 303, "softshrink": 304, "stanh": 305, "tanhshrink": 306, "threshold": 307, "thresholded_relu": 308, "blackman_window": 309, "eye_lik": 310, "hamming_window": 311, "hann_window": 312, "indic": 313, "kaiser_bessel_derived_window": 314, "kaiser_window": 315, "mel_weight_matrix": 316, "ndenumer": 317, "ndindex": 318, "polyv": 319, "random_cp": 320, "random_parafac2": 321, "random_tr": 322, "random_tt": 323, "random_tuck": 324, "tril_indic": 325, "trilu": 326, "unsorted_segment_mean": 327, "unsorted_segment_min": 328, "unsorted_segment_sum": 329, "vorbis_window": 330, "allclos": 331, "amax": 332, "amin": 333, "binar": 334, "conj": 335, "copysign": 336, "count_nonzero": 337, "diff": 338, "digamma": 339, "erfc": 340, "erfinv": 341, "fix": [342, 815, 831], "float_pow": 343, "fmax": 344, "frexp": 345, "hypot": 347, "isclos": 348, "ldexp": 349, "lerp": 350, "lgamma": 351, "modf": 352, "nansum": 353, "nextaft": 354, "signbit": 355, "sinc": 356, "sparsify_tensor": 357, "xlogi": 358, "zeta": 359, "reduc": 360, "bind_custom_gradient_funct": 361, "jvp": 362, "vjp": 363, "constant": [365, 624], "meta": [376, 637], "spars": 383, "adaptive_avg_pool1d": 386, "adaptive_avg_pool2d": 387, "adaptive_max_pool2d": 388, "adaptive_max_pool3d": 389, "area_interpol": 390, "avg_pool1d": 391, "avg_pool2d": 392, "avg_pool3d": 393, "dct": 394, "dft": 395, "dropout1d": 396, "dropout2d": 397, "dropout3d": 398, "embed": 399, "fft": 400, "fft2": 401, "generate_einsum_equ": 402, "get_interpolate_kernel": 403, "idct": 404, "ifft": 405, "ifftn": 406, "interp": 407, "interpol": 408, "max_pool1d": 409, "max_pool2d": 410, "max_pool3d": 411, "max_unpool1d": 412, "nearest_interpol": 413, "pool": 414, "reduce_window": 415, "rfft": 416, "rfftn": 417, "rnn": 418, "sliding_window": 419, "stft": 420, "adjoint": 421, "batched_out": 422, "cond": 423, "diagflat": 424, "dot": 425, "eig": [426, 669], "eigh_tridiagon": 427, "eigval": 428, "general_inner_product": 429, "higher_order_mo": 430, "initialize_tuck": 431, "khatri_rao": 432, "kron": 433, "kroneck": 434, "lu_factor": 435, "lu_solv": 436, "make_svd_non_neg": 437, "matrix_exp": 438, "mode_dot": 439, "multi_dot": 440, "multi_mode_dot": 441, "partial_tuck": 442, "solve_triangular": 443, "svd_flip": 444, "tensor_train": 445, "truncated_svd": 446, "tt_matrix_to_tensor": 447, "hinge_embedding_loss": 449, "huber_loss": 450, "kl_div": 451, "l1_loss": 452, "log_poisson_loss": 453, "poisson_nll_loss": 454, "smooth_l1_loss": 455, "soft_margin_loss": 456, "as_strid": 457, "associative_scan": 458, "atleast_1d": 459, "atleast_2d": 460, "atleast_3d": 461, "broadcast_shap": 462, "check_scalar": 463, "choos": 464, "column_stack": 465, "concat_from_sequ": 466, "dsplit": 467, "dstack": 468, "expand": 469, "fill_diagon": 470, "flatten": 471, "fliplr": 472, "flipud": 473, "fold": 474, "heavisid": 475, "hsplit": 476, "hstack": 477, "i0": 478, "matric": 479, "moveaxi": 480, "pad": 481, "partial_fold": 482, "partial_tensor_to_vec": 483, "partial_unfold": 484, "partial_vec_to_tensor": 485, "put_along_axi": 486, "rot90": 487, "soft_threshold": 488, "take": 489, "take_along_axi": 490, "top_k": 491, "trim_zero": 492, "unflatten": 493, "unfold": 494, "unique_consecut": 495, "vsplit": 496, "vstack": 497, "batch_norm": 498, "group_norm": 499, "instance_norm": 500, "l1_normal": 501, "l2_normal": 502, "local_response_norm": 503, "lp_normal": 504, "bernoulli": 505, "beta": 506, "dirichlet": 507, "gamma": 508, "poisson": 509, "unravel_index": 510, "invert_permut": 511, "lexsort": 512, "is_ivy_sparse_arrai": 513, "is_native_sparse_arrai": 514, "native_sparse_arrai": 515, "native_sparse_array_to_indices_values_and_shap": 516, "bincount": 517, "corrcoef": 518, "cov": 519, "cummax": 520, "cummin": 521, "histogram": 522, "igamma": 523, "median": 524, "nanmean": 525, "nanmedian": 526, "nanmin": 527, "nanprod": 528, "quantil": 529, "optional_get_el": 530, "all_equ": 531, "arg_info": 532, "arg_nam": 533, "array_equ": 534, "assert_supports_inplac": 535, "cache_fn": 536, "clip_matrix_norm": 537, "clip_vector_norm": 538, "container_typ": 539, "current_backend_str": 540, "einops_rearrang": 542, "einops_reduc": 543, "einops_repeat": 544, "exist": [545, 811, 840], "fourier_encod": 546, "function_supported_devices_and_dtyp": 547, "function_unsupported_devices_and_dtyp": 548, "gather": 549, "gather_nd": 550, "get_all_arrays_in_memori": 551, "get_item": 552, "get_num_dim": 553, "get_referrers_recurs": 554, "has_nan": 555, "inplace_arrays_support": 556, "inplace_decr": 557, "inplace_incr": 558, "inplace_upd": 559, "inplace_variables_support": 560, "is_arrai": 561, "is_ivy_arrai": 562, "is_ivy_contain": 563, "is_ivy_nested_arrai": 564, "is_native_arrai": 565, "isin": 566, "isscalar": 567, "items": 568, "match_kwarg": 569, "multiprocess": [570, 777], "num_arrays_in_memori": 571, "print_all_arrays_in_memori": 572, "scatter_flat": 573, "scatter_nd": 574, "set_array_mod": 575, "set_exception_trace_mod": 576, "set_inplace_mod": 577, "set_item": 578, "set_min_bas": 579, "set_min_denomin": 580, "set_nestable_mod": 581, "set_precise_mod": 582, "set_queue_timeout": 583, "set_shape_array_mod": 584, "set_show_func_wrapper_trace_mod": 585, "set_tmp_dir": 586, "shape": [587, 642, 746, 747, 748, 749, 835, 852], "size": [588, 852], "stable_divid": 589, "stable_pow": 590, "stride": 591, "supports_inplace_upd": 592, "to_ivy_shap": 593, "to_list": 594, "to_native_shap": 595, "to_numpi": 596, "to_scalar": 597, "try_else_non": 598, "unset_array_mod": 599, "unset_exception_trace_mod": 600, "unset_inplace_mod": 601, "unset_min_bas": 602, "unset_min_denomin": 603, "unset_nestable_mod": 604, "unset_precise_mod": 605, "unset_queue_timeout": 606, "unset_shape_array_mod": 607, "unset_show_func_wrapper_trace_mod": 608, "unset_tmp_dir": 609, "value_is_nan": 610, "vmap": 611, "adam_step": 612, "adam_upd": 613, "execute_with_gradi": [614, 836], "grad": 615, "gradient_descent_upd": 616, "jac": 617, "lamb_upd": 618, "lars_upd": 619, "optimizer_upd": 620, "stop_gradi": 621, "value_and_grad": 622, "control": [625, 852], "flow": [625, 852], "op": 625, "depend": [642, 746, 747, 748, 749], "output": [642, 746, 747, 748, 749], "conv": 646, "conv1d": 647, "conv1d_transpos": 648, "conv2d": 649, "conv2d_transpos": 650, "conv3d": 651, "conv3d_transpos": 652, "conv_general_dil": 653, "conv_general_transpos": 654, "depthwise_conv2d": 655, "dropout": 656, "lstm": 658, "lstm_updat": 659, "multi_head_attent": 660, "nm": 661, "roi_align": 662, "scaled_dot_product_attent": 663, "choleski": 664, "cross": 665, "det": 666, "diag": 667, "diagon": 668, "eigh": 670, "eigvalsh": 671, "inner": 672, "inv": 673, "matmul": 674, "matrix_norm": 675, "matrix_pow": 676, "matrix_rank": 677, "matrix_transpos": 678, "outer": 679, "pinv": 680, "qr": 681, "slogdet": 682, "solv": 683, "svd": 684, "svdval": 685, "tensordot": 686, "tensorsolv": 687, "vander": 689, "vecdot": 690, "vector_norm": 691, "vector_to_skew_symmetric_matrix": 692, "binary_cross_entropi": 693, "cross_entropi": 694, "sparse_cross_entropi": 695, "clip": 696, "concat": 697, "constant_pad": 698, "expand_dim": 699, "flip": 700, "permute_dim": 701, "repeat": 702, "reshap": 703, "roll": [704, 828], "split": 705, "squeez": 706, "stack": [707, 830], "swapax": 708, "tile": 709, "unstack": 710, "zero_pad": 711, "fomaml_step": 712, "maml_step": 713, "reptile_step": 714, "all_nested_indic": 715, "copy_nest": 716, "duplicate_array_index_chain": 717, "index_nest": 718, "insert_into_nest_at_index": 719, "insert_into_nest_at_indic": 720, "map": [721, 825], "map_nest_at_index": 722, "map_nest_at_indic": 723, "multi_index_nest": 724, "nested_ani": 725, "nested_argwher": 726, "nested_map": 727, "nested_multi_map": 728, "prune_empti": 729, "prune_nest_at_index": 730, "prune_nest_at_indic": 731, "set_nest_at_index": 732, "set_nest_at_indic": 733, "layer_norm": 734, "multinomi": 735, "randint": 736, "random_norm": 737, "random_uniform": 738, "seed": 739, "shuffl": 740, "argmax": 741, "argmin": 742, "argwher": 743, "nonzero": 744, "where": [745, 815, 831], "unique_al": 746, "unique_count": 747, "unique_invers": 748, "unique_valu": 749, "argsort": 750, "msort": 751, "searchsort": 752, "cumprod": 754, "cumsum": 755, "einsum": [756, 802, 803], "max": 757, "mean": 758, "min": 759, "prod": 760, "std": 761, "sum": 762, "var": 763, "assert": [768, 795, 830], "avail": 769, "global": [771, 843], "hypothesi": [772, 816, 839, 841], "struct": 779, "flag": 780, "sequenti": 794, "ast": 797, "sub": 799, "binari": [800, 816], "parser": 802, "path": 803, "except": [804, 830, 835], "inspect": 805, "profil": 807, "verbos": 808, "statu": 809, "ai": 809, "start": [809, 853], "pip": [809, 853], "document": 809, "dive": [809, 819], "deeper": 809, "should": 809, "contribut": [809, 810, 815, 840], "commun": 809, "citat": 809, "doc": [811, 823], "docker": [811, 816, 817, 823, 853], "conveni": [811, 823, 834], "script": [811, 823], "hub": 811, "local": [811, 817, 832], "without": [811, 839], "contributor": [812, 818, 875], "reward": 812, "badg": 812, "tier": 812, "error": [813, 830, 831], "handl": [813, 821, 827, 830, 835, 852], "help": [814, 817, 831], "resourc": 814, "open": 815, "task": 815, "fail": [815, 831, 841], "frontend": [815, 822, 838, 839, 851], "place": 815, "checklist": 815, "format": [815, 832, 866, 873], "extend": [815, 841, 844], "an": [815, 836], "issu": [815, 817, 832, 853], "github": [815, 816], "templat": 815, "fork": [816, 817], "pre": [816, 832], "commit": [816, 817, 825, 832], "pycharm": [816, 817, 832], "virtual": 816, "environ": 816, "miniconda": 816, "venv": 816, "interpret": 816, "window": 816, "maco": 816, "ubuntu": 816, "detail": 816, "free": 816, "wsl": 816, "codespac": 816, "The": [816, 817, 823, 836, 838, 848, 852, 857], "list": 817, "manag": 817, "who": 817, "ask": [817, 831], "With": 817, "command": 817, "pull": [817, 825], "request": [817, 825], "small": 817, "often": 817, "interact": 817, "most": 817, "out": [817, 833, 835, 837], "id": [817, 820], "program": 818, "core": [818, 875], "rise": [818, 875], "deep": 819, "termin": 820, "regener": 820, "failur": 820, "skip": 820, "integr": [821, 825, 832, 840, 841], "version": [822, 842, 852], "support": [822, 826, 835, 838, 852], "builder": 823, "being": 823, "option": 823, "index": 823, "rst": 823, "partial_conf": 823, "py": 823, "prebuild": 823, "sh": 823, "extens": 823, "custom_autosummari": 823, "hide": 823, "discussion_link": 823, "skippable_funct": 823, "ivy_data": 823, "instanc": [824, 838, 839, 848], "method": [824, 838, 839, 848, 849], "special": [824, 826, 838], "nestabl": [824, 833, 834, 835], "continu": [825, 832], "push": 825, "pr": 825, "trigger": 825, "A": [825, 844], "down": 825, "view": [825, 835, 837], "store": 825, "retriev": 825, "repositori": 825, "nitti": 825, "gritti": 825, "storag": 825, "space": 825, "unifyai": 825, "determin": 825, "coverag": 825, "workflow": 825, "multipl": 825, "runner": 825, "race": 825, "condit": 825, "period": 825, "manual": 825, "dispatch": 825, "ci": 825, "dashboard": 825, "promot": [826, 838], "precis": 826, "non": [826, 844], "argument": [826, 827, 833, 835, 837, 838], "other": [826, 827], "unsupport": 826, "attribut": [826, 843], "case": [826, 849], "bug": 826, "cast": [826, 838], "superset": [826, 844], "docstr": [828, 829], "configur": [830, 839, 849], "func_wrapp": 830, "prune": 830, "handle_except": 830, "consist": [830, 841], "prerequir": 831, "common": [831, 832], "lint": [832, 840], "keyword": 833, "integ": 833, "primari": 834, "composit": 834, "mix": [834, 835, 841], "partial": [834, 835, 841], "order": 835, "wrapper": [835, 873, 874], "miscellan": 835, "overview": [836, 840], "usag": [836, 840, 844, 862], "signatur": 836, "design": [836, 842, 845], "our": 836, "polici": [836, 838], "specif": [836, 871, 872, 873], "consider": 836, "inplac": 837, "updat": 837, "copi": 837, "short": 838, "unus": 838, "rule": 838, "duplic": [838, 844], "valu": 839, "alia": 839, "formatt": 840, "functionorderingformatt": 840, "work": [840, 857, 863], "own": 841, "strategi": 841, "ad": 841, "explicit": 841, "do": [841, 857], "effect": 841, "bonu": 841, "featur": 841, "self": 841, "test_array_funct": 841, "re": [841, 858], "navig": 842, "categor": 842, "submodul": 842, "unpin": 842, "properti": 843, "getter": 843, "setter": 843, "set_": 843, "unset_": 843, "behaviour": 844, "standard": [844, 857, 864, 873], "what": [844, 873], "balanc": 844, "effici": 844, "maxim": 844, "block": 846, "monkei": 848, "patch": 848, "represent": 849, "recurs": 849, "built": 849, "ins": 849, "access": 849, "compartment": 849, "role": 851, "faq": 852, "maintain": 852, "deploy": 852, "auto": 852, "differenti": 852, "replica": 852, "parallel": 852, "altern": 852, "sourc": 853, "folder": 853, "kei": 853, "question": 853, "glossari": 854, "motiv": 855, "explos": 856, "skeptic": 857, "complimentari": 857, "competit": 857, "infinit": 858, "shelf": 858, "life": 858, "One": 859, "liner": 859, "trace_graph": 860, "cach": 860, "sharp": [860, 861, 862], "bit": [860, 861, 862], "relat": 863, "infrastructur": [865, 873], "llvm": 865, "mlir": 865, "oneapi": 865, "exchang": [866, 873], "onnx": 866, "nnef": 866, "coreml": 866, "matlab": 867, "scipi": 867, "scikit": 867, "theano": 867, "panda": 867, "julia": 867, "apach": [867, 870], "spark": 867, "mllib": 867, "caff": 867, "chainer": 867, "mxnet": 867, "cntk": 867, "flux": 867, "dex": 867, "languag": 867, "tf": 868, "jaxpr": 868, "jit": 868, "fx": 868, "compani": [869, 873], "quansight": 869, "modular": 869, "octoml": 869, "multi": [870, 873], "vendor": [870, 871, 872, 873], "tvm": 870, "xla": 870, "gcc": 870, "tensorrt": 871, "cuda": 871, "icc": 872, "icx": 872, "nvcc": 872, "doe": 873, "eagerpi": 874, "kera": 874, "thinc": 874, "tensorli": 874, "neuropod": 874, "leaderboard": 875}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "nbsphinx": 4, "sphinx": 60}, "alltitles": {"set_default_int_dtype": [[181, "set-default-int-dtype"]], "default_complex_dtype": [[155, "default-complex-dtype"]], "is_native_dtype": [[173, "is-native-dtype"]], "as_ivy_dtype": [[147, "as-ivy-dtype"]], "is_int_dtype": [[172, "is-int-dtype"]], "zeros": [[145, "zeros"]], "promote_types": [[175, "promote-types"]], "ones_like": [[140, "ones-like"]], "as_native_dtype": [[148, "as-native-dtype"]], "promote_types_of_inputs": [[176, "promote-types-of-inputs"]], "tril": [[142, "tril"]], "triu": [[143, "triu"]], "function_supported_dtypes": [[163, "function-supported-dtypes"]], "invalid_dtype": [[167, "invalid-dtype"]], "set_default_float_dtype": [[180, "set-default-float-dtype"]], "is_complex_dtype": [[169, "is-complex-dtype"]], "astype": [[149, "astype"]], "iinfo": [[165, "iinfo"]], "default_int_dtype": [[158, "default-int-dtype"]], "ones": [[139, "ones"]], "set_default_uint_dtype": [[182, "set-default-uint-dtype"]], "function_unsupported_dtypes": [[164, "function-unsupported-dtypes"]], "default_uint_dtype": [[159, "default-uint-dtype"]], "is_float_dtype": [[170, "is-float-dtype"]], "result_type": [[177, "result-type"]], "set_default_complex_dtype": [[178, "set-default-complex-dtype"]], "infer_default_dtype": [[166, "infer-default-dtype"]], "set_default_dtype": [[179, "set-default-dtype"]], "finfo": [[162, "finfo"]], "one_hot": [[138, "one-hot"]], "can_cast": [[152, "can-cast"]], "type_promote_arrays": [[183, "type-promote-arrays"]], "to_dlpack": [[141, "to-dlpack"]], "Note": [[141, null], [130, null], [626, null], [626, null]], "is_bool_dtype": [[168, "is-bool-dtype"]], "dtype": [[160, "dtype"]], "broadcast_to": [[151, "broadcast-to"]], "default_dtype": [[156, "default-dtype"]], "is_uint_dtype": [[174, "is-uint-dtype"]], "broadcast_arrays": [[150, "broadcast-arrays"]], "dtype_bits": [[161, "dtype-bits"]], "default_float_dtype": [[157, "default-float-dtype"]], "triu_indices": [[144, "triu-indices"]], "zeros_like": [[146, "zeros-like"]], "is_hashable_dtype": [[171, "is-hashable-dtype"]], "closest_valid_dtype": [[154, "closest-valid-dtype"]], "check_float": [[153, "check-float"]], "Contributor Leaderboard": [[875, "contributor-leaderboard"]], "Top Contributors": [[875, "top-contributors"]], "Rising Contributors": [[875, "rising-contributors"]], "Core Contributors": [[875, "core-contributors"]], "Contributors": [[875, "contributors"]], "Wrapper Frameworks": [[874, "wrapper-frameworks"], [873, "wrapper-frameworks"]], "EagerPy eagerpy": [[874, "eagerpy-eagerpy"]], "Keras keras": [[874, "keras-keras"]], "Thinc thinc": [[874, "thinc-thinc"]], "TensorLy tensorly": [[874, "tensorly-tensorly"]], "NeuroPod": [[874, "id1"]], "Standardization": [[857, "standardization"]], "Skepticism": [[857, "skepticism"]], "Complimentary vs Competitive": [[857, "complimentary-vs-competitive"]], "Do Standards Work?": [[857, "do-standards-work"]], "The Array API Standard": [[857, "the-array-api-standard"]], "Ivy Frontends": [[838, "ivy-frontends"]], "Introduction": [[838, "introduction"], [839, "introduction"], [43, "Introduction"]], "The Frontend Basics": [[838, "the-frontend-basics"]], "Writing Frontend Functions": [[838, "writing-frontend-functions"]], "Short Frontend Implementations": [[838, "short-frontend-implementations"]], "Unused Arguments": [[838, "unused-arguments"]], "Supported Data Types and Devices": [[838, "supported-data-types-and-devices"]], "Classes and Instance Methods": [[838, "classes-and-instance-methods"]], "Frontend Data Type Promotion Rules": [[838, "frontend-data-type-promotion-rules"]], "NumPy Special Argument - Casting": [[838, "numpy-special-argument-casting"]], "Frontends Duplicate Policy": [[838, "frontends-duplicate-policy"]], "Operating Modes": [[843, "operating-modes"]], "Global Parameter Properties": [[843, "global-parameter-properties"]], "Getter: ivy.<setting> attribute": [[843, "getter-ivy-setting-attribute"]], "Setter: ivy.set_<setting> and ivy.unset_<setting> functions": [[843, "setter-ivy-set-setting-and-ivy-unset-setting-functions"]], "ivy.transpile()": [[861, "ivy-transpile"]], "Transpiler API": [[861, "transpiler-api"]], "Using the transpiler": [[861, "using-the-transpiler"]], "Transpiling functions": [[861, "transpiling-functions"]], "Transpiling Libraries": [[861, "transpiling-libraries"]], "Transpiling Modules": [[861, "transpiling-modules"]], "Sharp bits": [[861, "sharp-bits"], [862, "sharp-bits"], [860, "sharp-bits"]], "Examples": [[861, "examples"], [862, "examples"], [833, "examples"], [860, "examples"], [809, "examples"]], "Docstrings": [[829, "docstrings"]], "ivy.unify()": [[862, "ivy-unify"]], "Unify API": [[862, "unify-api"]], "Usage": [[862, "usage"]], "ML-Unifying Companies": [[869, "ml-unifying-companies"], [873, "ml-unifying-companies"]], "Quansight": [[869, "id1"]], "Modular": [[869, "id2"]], "OctoML": [[869, "id3"]], "Ivy-Lint: Ivy\u2019s Custom Code Formatters": [[840, "ivy-lint-ivy-s-custom-code-formatters"]], "Overview": [[840, "overview"], [836, "overview"]], "Existing Formatters": [[840, "existing-formatters"]], "FunctionOrderingFormatter": [[840, "functionorderingformatter"]], "How the Formatter Works:": [[840, "how-the-formatter-works"]], "Integration and Usage": [[840, "integration-and-usage"]], "Contribution": [[840, "contribution"]], "Round Up": [[840, "round-up"], [25, "Round-Up"], [35, "Round-Up"], [19, "Round-Up"], [23, "Round-Up"], [42, "Round-Up"], [33, "Round-Up"], [32, "Round-Up"], [29, "Round-Up"], [20, "Round-Up"], [34, "Round-Up"], [15, "Round-Up"], [21, "Round-Up"], [13, "Round-Up"], [30, "Round-Up"], [22, "Round-Up"], [31, "Round-Up"], [24, "Round-Up"]], "What does Ivy Add?": [[873, "what-does-ivy-add"]], "API Standards": [[873, "api-standards"], [864, "api-standards"]], "Frameworks": [[873, "frameworks"], [867, "frameworks"]], "Graph Tracers": [[873, "graph-tracers"], [868, "graph-tracers"]], "Exchange Formats": [[873, "exchange-formats"], [866, "exchange-formats"]], "Compiler Infrastructure": [[873, "compiler-infrastructure"], [865, "compiler-infrastructure"]], "Multi-Vendor Compiler Frameworks": [[873, "multi-vendor-compiler-frameworks"], [870, "multi-vendor-compiler-frameworks"]], "Vendor-Specific APIs": [[873, "vendor-specific-apis"], [871, "vendor-specific-apis"]], "Vendor-Specific Compilers": [[873, "vendor-specific-compilers"], [872, "vendor-specific-compilers"]], "Ivy Stateful API": [[850, "ivy-stateful-api"], [28, "Ivy-Stateful-API"], [19, "Ivy-Stateful-API"]], "Modules": [[850, "modules"]], "Initializers": [[850, "initializers"], [788, "module-ivy.stateful.initializers"]], "Optimizers": [[850, "optimizers"], [793, "module-ivy.stateful.optimizers"]], "Formatting": [[832, "formatting"]], "Lint Checks": [[832, "lint-checks"], [832, "id2"]], "Setup Formatting Locally": [[832, "setup-formatting-locally"]], "Pre-commit": [[832, "pre-commit"]], "VS Code": [[832, "vs-code"]], "PyCharm": [[832, "pycharm"], [816, "pycharm"]], "Common Issues with Pre-Commit": [[832, "common-issues-with-pre-commit"]], "Continuous Integration": [[832, "continuous-integration"], [825, "continuous-integration"]], "Lint Formatting": [[832, "lint-formatting"]], "Ivy Tests": [[841, "ivy-tests"], [825, "ivy-tests"]], "Testing Pipeline": [[841, "testing-pipeline"]], "Hypothesis": [[841, "id2"]], "Data Generation": [[841, "id3"]], "Writing your own strategy": [[841, "writing-your-own-strategy"]], "Writing Hypothesis Tests": [[841, "writing-hypothesis-tests"]], "Ivy Test Decorators": [[841, "ivy-test-decorators"]], "Writing Ivy Tests": [[841, "writing-ivy-tests"]], "Integration of Strategies into Ivy Tests": [[841, "integration-of-strategies-into-ivy-tests"]], "Adding Explicit Examples to tests": [[841, "adding-explicit-examples-to-tests"]], "Why do we need helper functions?": [[841, "why-do-we-need-helper-functions"]], "How to write Hypothesis Tests effectively": [[841, "how-to-write-hypothesis-tests-effectively"]], "Testing Partial Mixed Functions": [[841, "testing-partial-mixed-functions"]], "Bonus: Hypothesis\u2019 Extended Features": [[841, "bonus-hypothesis-extended-features"]], "Self-Consistent and Explicit Testing": [[841, "self-consistent-and-explicit-testing"]], "test_array_function": [[841, "id5"]], "Running Ivy Tests": [[841, "running-ivy-tests"]], "Re-Running Failed Ivy Tests": [[841, "re-running-failed-ivy-tests"]], "ONNX onnx": [[866, "onnx-onnx"]], "NNEF nnef": [[866, "nnef-nnef"]], "CoreML coreml": [[866, "coreml-coreml"]], "Fix Failing Tests:": [[831, "fix-failing-tests"]], "Prerequirement:": [[831, "prerequirement"]], "Setting Up": [[831, "setting-up"], [816, "setting-up"]], "How to run tests": [[831, "how-to-run-tests"]], "Common Errors": [[831, "common-errors"]], "Where to ask for Help": [[831, "where-to-ask-for-help"]], "Function Arguments": [[833, "function-arguments"]], "Positional and Keyword Arguments": [[833, "positional-and-keyword-arguments"]], "Input Arrays": [[833, "input-arrays"]], "out Argument": [[833, "out-argument"]], "dtype and device arguments": [[833, "dtype-and-device-arguments"]], "Numbers in Operator Functions": [[833, "numbers-in-operator-functions"]], "Integer Sequences": [[833, "integer-sequences"]], "Nestable Functions": [[833, "nestable-functions"], [834, "nestable-functions"], [824, "nestable-functions"]], "One liners": [[859, "one-liners"]], "ICC": [[872, "id1"]], "ICX": [[872, "icx"]], "NVCC": [[872, "nvcc"]], "Ivy as a Transpiler": [[851, "ivy-as-a-transpiler"], [28, "Ivy-as-a-Transpiler"], [29, "Ivy-as-a-Transpiler"]], "Frontend Functional APIs \ud83d\udea7": [[851, "frontend-functional-apis"]], "Role of the Tracer \ud83d\udea7": [[851, "role-of-the-tracer"]], "Converting Network Models \ud83d\udea7": [[851, "converting-network-models"]], "Apache TVM": [[870, "apache-tvm"]], "XLA": [[870, "xla"]], "GCC": [[870, "gcc"]], "Navigating the Code": [[842, "navigating-the-code"]], "Categorization": [[842, "categorization"]], "Submodule Design": [[842, "submodule-design"]], "Ivy API": [[842, "ivy-api"]], "Backend API": [[842, "backend-api"]], "Submodule Helper Functions": [[842, "submodule-helper-functions"]], "Version Unpinning": [[842, "version-unpinning"]], "Why Unify?": [[858, "why-unify"]], "No More Re-implementations \ud83d\udea7": [[858, "no-more-re-implementations"]], "\u201cInfinite\u201d Shelf-Life \u2705": [[858, "infinite-shelf-life"]], "Ivy as a Framework": [[847, "ivy-as-a-framework"], [28, "Ivy-as-a-Framework"]], "Docstring Examples": [[828, "docstring-examples"]], "ivy.tan": [[828, "ivy-tan"]], "ivy.roll": [[828, "ivy-roll"]], "ivy.add": [[828, "ivy-add"]], "TensorRT tensorrt": [[871, "tensorrt-tensorrt"]], "CUDA cuda": [[871, "cuda-cuda"]], "FAQ": [[852, "faq"]], "Maintaining Backend Versions": [[852, "maintaining-backend-versions"]], "Dynamic Sizes": [[852, "dynamic-sizes"]], "Type and Shape Checking": [[852, "type-and-shape-checking"]], "GPU handling": [[852, "gpu-handling"]], "Model Deployment": [[852, "model-deployment"]], "Dynamic Control Flow": [[852, "dynamic-control-flow"]], "Auto-Differentiation": [[852, "auto-differentiation"]], "Replicas, and Data vs Model Parallelism": [[852, "replicas-and-data-vs-model-parallelism"]], "Support for Functions": [[852, "support-for-functions"]], "Alternative Data Structures": [[852, "alternative-data-structures"]], "Custom Operations": [[852, "custom-operations"]], "The Pipeline": [[852, "the-pipeline"]], "State": [[852, "state"]], "Get Started": [[853, "get-started"]], "Installing using pip": [[853, "installing-using-pip"], [809, "installing-using-pip"]], "Docker": [[853, "docker"]], "Installing from source": [[853, "installing-from-source"]], "Ivy\u2019s tracer and transpiler": [[853, "ivy-s-tracer-and-transpiler"]], "Ivy Folder": [[853, "ivy-folder"]], "Setting Up the API key": [[853, "setting-up-the-api-key"]], "Issues and Questions": [[853, "issues-and-questions"]], "Related Work": [[863, "related-work"]], "Ivy Array": [[848, "ivy-array"], [821, "ivy-array"]], "The Array Class": [[848, "the-array-class"]], "Unifying Operators": [[848, "unifying-operators"]], "API Monkey Patching": [[848, "api-monkey-patching"]], "Instance Methods": [[848, "instance-methods"]], "LLVM": [[865, "id1"]], "MLIR": [[865, "id2"]], "OneAPI": [[865, "id3"]], "Ivy Frontend Tests": [[839, "ivy-frontend-tests"]], "Frontend Test Examples": [[839, "frontend-test-examples"]], "ivy.tan()": [[839, "ivy-tan"]], "ivy.full()": [[839, "ivy-full"]], "Testing Without Using Tests Values": [[839, "testing-without-using-tests-values"]], "Alias functions": [[839, "alias-functions"]], "Frontend Instance Method Tests": [[839, "frontend-instance-method-tests"]], "Frontend Instance Method Test Examples": [[839, "frontend-instance-method-test-examples"]], "ivy.add()": [[839, "ivy-add"]], "Hypothesis Helpers": [[839, "hypothesis-helpers"]], "Frontend Framework Testing Configuration": [[839, "frontend-framework-testing-configuration"]], "Glossary": [[854, "glossary"]], "Design": [[845, "design"]], "Gradients": [[836, "gradients"], [632, "gradients"], [371, "gradients"], [79, "module-ivy.data_classes.container.gradients"], [56, "module-ivy.data_classes.array.gradients"]], "Example Usage of the Gradient API": [[836, "example-usage-of-the-gradient-api"]], "The ivy.execute_with_gradients() function signature": [[836, "the-ivy-execute-with-gradients-function-signature"]], "An example using ivy.execute_with_gradients()": [[836, "an-example-using-ivy-execute-with-gradients"]], "Custom Gradient Functions": [[836, "custom-gradient-functions"]], "Design of the Gradient API": [[836, "design-of-the-gradient-api"]], "Our policy on gradients": [[836, "our-policy-on-gradients"]], "Gradient APIs of frameworks": [[836, "gradient-apis-of-frameworks"]], "General Structure of Backend-specific implementations": [[836, "general-structure-of-backend-specific-implementations"]], "Framework-specific Considerations": [[836, "framework-specific-considerations"]], "Ivy Container": [[849, "ivy-container"]], "Construction": [[849, "construction"]], "Representation": [[849, "representation"]], "Recursive Methods": [[849, "recursive-methods"]], "Built-ins": [[849, "built-ins"]], "Access": [[849, "access"]], "Saving and Loading": [[849, "saving-and-loading"]], "Comparisons": [[849, "comparisons"]], "Customized Representations": [[849, "customized-representations"]], "Use Cases": [[849, "use-cases"]], "Compartmentalization": [[849, "compartmentalization"]], "Configuration": [[849, "configuration"]], "Data loading": [[849, "data-loading"]], "Network weights": [[849, "network-weights"]], "tf.Graph": [[868, "tf-graph"]], "Jaxpr": [[868, "jaxpr"]], "torch.jit": [[868, "torch-jit"]], "torch.fx": [[868, "torch-fx"]], "Array API Standard": [[864, "id1"]], "Table:": [[864, "table"]], "Inplace Updates": [[837, "inplace-updates"]], "out argument": [[837, "out-argument"]], "copy argument": [[837, "copy-argument"]], "Views": [[837, "views"]], "Function Wrapping": [[835, "function-wrapping"]], "Decorator order": [[835, "decorator-order"]], "Conversion Wrappers": [[835, "conversion-wrappers"]], "Inference Wrappers": [[835, "inference-wrappers"]], "Out Argument Support": [[835, "out-argument-support"]], "Nestable Support": [[835, "nestable-support"]], "Partial Mixed Function Support": [[835, "partial-mixed-function-support"]], "Shape Conversion": [[835, "shape-conversion"]], "View Handling": [[835, "view-handling"]], "Exception Handling": [[835, "exception-handling"], [830, "exception-handling"]], "Miscellaneous Wrappers": [[835, "miscellaneous-wrappers"]], "Ivy Exception Class": [[830, "ivy-exception-class"]], "Configurable Mode for Stack Trace": [[830, "configurable-mode-for-stack-trace"]], "Ivy func_wrapper Pruning": [[830, "ivy-func-wrapper-pruning"]], "@handle_exceptions Decorator": [[830, "handle-exceptions-decorator"]], "Consistency in Errors": [[830, "consistency-in-errors"]], "Assertion Function": [[830, "assertion-function"]], "ML Explosion": [[856, "ml-explosion"]], "MATLAB matlab": [[867, "matlab-matlab"]], "SciPy scipy": [[867, "scipy-scipy"]], "Torch torch": [[867, "torch-torch"]], "NumPy numpy": [[867, "numpy-numpy"]], "SciKit Learn scikit-learn": [[867, "scikit-learn-scikit-learn"]], "Theano theano": [[867, "theano-theano"]], "Pandas pandas": [[867, "pandas-pandas"]], "Julia julia": [[867, "julia-julia"]], "Apache Spark MLlib apache-spark-mllib": [[867, "apache-spark-mllib-apache-spark-mllib"]], "Caffe caffe": [[867, "caffe-caffe"]], "Chainer chainer": [[867, "chainer-chainer"]], "TensorFlow 1 tensorflow-1": [[867, "tensorflow-1-tensorflow-1"]], "MXNet mxnet": [[867, "mxnet-mxnet"]], "CNTK cntk": [[867, "cntk-cntk"]], "PyTorch pytorch": [[867, "pytorch-pytorch"]], "Flux flux": [[867, "flux-flux"]], "JAX jax": [[867, "jax-jax"]], "TensorFlow 2 tensorflow-2": [[867, "tensorflow-2-tensorflow-2"]], "DEX Language dex-language": [[867, "dex-language-dex-language"]], "Motivation": [[855, "motivation"]], "Function Types": [[834, "function-types"]], "Primary Functions": [[834, "primary-functions"]], "Compositional Functions": [[834, "compositional-functions"]], "Mixed Functions": [[834, "mixed-functions"]], "Partial Mixed Functions": [[834, "partial-mixed-functions"]], "Standalone Functions": [[834, "standalone-functions"]], "Convenience Functions": [[834, "convenience-functions"]], "Superset Behaviour": [[844, "superset-behaviour"]], "Extending the Standard": [[844, "extending-the-standard"]], "What is the Superset?": [[844, "what-is-the-superset"]], "A Non-Duplicate Superset": [[844, "a-non-duplicate-superset"]], "What is not the Superset?": [[844, "what-is-not-the-superset"]], "Balancing Generalization with Efficiency": [[844, "balancing-generalization-with-efficiency"]], "More Examples": [[844, "more-examples"]], "Maximizing Usage of Native Functionality": [[844, "maximizing-usage-of-native-functionality"]], "ivy.trace_graph()": [[860, "ivy-trace-graph"]], "Tracer API": [[860, "tracer-api"]], "Using the tracer": [[860, "using-the-tracer"]], "Eager vs lazy Compilation": [[860, "eager-vs-lazy-compilation"]], "Array caching": [[860, "array-caching"]], "Generators": [[860, "generators"]], "Stateful": [[860, "stateful"]], "Building Blocks": [[846, "building-blocks"]], "Backend Functional APIs \u2705": [[846, "backend-functional-apis"]], "Ivy Functional API \u2705": [[846, "ivy-functional-api"]], "Backend Handler \u2705": [[846, "backend-handler"]], "Tracer \ud83d\udea7": [[846, "tracer"]], "arange": [[123, "arange"]], "from_dlpack": [[130, "from-dlpack"]], "cmp_isnot": [[118, "cmp-isnot"]], "full_like": [[133, "full-like"]], "Elementwise": [[104, "module-ivy.data_classes.nested_array.elementwise"], [629, "elementwise"], [369, "elementwise"], [53, "module-ivy.data_classes.array.elementwise"], [76, "module-ivy.data_classes.container.elementwise"]], "empty_like": [[128, "empty-like"]], "Base": [[93, "module-ivy.data_classes.factorized_tensor.base"], [103, "module-ivy.data_classes.nested_array.base"], [71, "module-ivy.data_classes.container.base"]], "linspace": [[134, "linspace"]], "Functions": [[106, "functions"]], "logspace": [[135, "logspace"]], "sigmoid": [[113, "sigmoid"]], "eye": [[129, "eye"]], "if_else": [[120, "if-else"]], "Tucker tensor": [[98, "module-ivy.data_classes.factorized_tensor.tucker_tensor"]], "leaky_relu": [[109, "leaky-relu"]], "Tr tensor": [[96, "module-ivy.data_classes.factorized_tensor.tr_tensor"]], "Nested array": [[102, "nested-array"]], "softplus": [[115, "softplus"]], "frombuffer": [[131, "frombuffer"]], "Parafac2 tensor": [[95, "module-ivy.data_classes.factorized_tensor.parafac2_tensor"]], "Wrapping": [[92, "module-ivy.data_classes.container.wrapping"], [69, "module-ivy.data_classes.array.wrapping"]], "Cp tensor": [[94, "module-ivy.data_classes.factorized_tensor.cp_tensor"]], "while_loop": [[122, "while-loop"]], "for_loop": [[119, "for-loop"]], "empty": [[127, "empty"]], "mish": [[111, "mish"]], "meshgrid": [[136, "meshgrid"]], "Tt tensor": [[97, "module-ivy.data_classes.factorized_tensor.tt_tensor"]], "relu": [[112, "relu"]], "softmax": [[114, "softmax"]], "Container": [[100, "container"]], "native_array": [[137, "native-array"]], "gelu": [[107, "gelu"]], "try_except": [[121, "try-except"]], "hardswish": [[108, "hardswish"]], "Array": [[99, "array"]], "cmp_is": [[117, "cmp-is"]], "Factorized tensor": [[101, "factorized-tensor"]], "log_softmax": [[110, "log-softmax"]], "array": [[124, "array"]], "full": [[132, "full"]], "Data classes": [[105, "data-classes"]], "copy_array": [[126, "copy-array"]], "softsign": [[116, "softsign"]], "asarray": [[125, "asarray"]], "any": [[765, "any"]], "all": [[764, "all"]], "Structs": [[779, "module-ivy_tests.test_ivy.helpers.structs"]], "Array helpers": [[773, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers"]], "var": [[763, "var"]], "searchsorted": [[752, "searchsorted"]], "argmax": [[741, "argmax"]], "msort": [[751, "msort"]], "General helpers": [[775, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers"]], "load": [[766, "load"]], "Multiprocessing": [[777, "module-ivy_tests.test_ivy.helpers.multiprocessing"]], "max": [[757, "max"]], "Function testing": [[770, "module-ivy_tests.test_ivy.helpers.function_testing"]], "Globals": [[771, "module-ivy_tests.test_ivy.helpers.globals"]], "std": [[761, "std"]], "sum": [[762, "sum"]], "Assertions": [[768, "module-ivy_tests.test_ivy.helpers.assertions"], [795, "module-ivy.utils.assertions"]], "randint": [[736, "randint"]], "argmin": [[742, "argmin"]], "min": [[759, "min"]], "cumsum": [[755, "cumsum"]], "random_uniform": [[738, "random-uniform"]], "unique_all": [[746, "unique-all"]], "Data-dependent output shape": [[746, null], [748, null], [747, null], [749, null], [642, null], [642, null], [642, null], [642, null]], "where": [[745, "where"]], "nonzero": [[744, "nonzero"]], "unique_inverse": [[748, "unique-inverse"]], "sort": [[753, "sort"]], "einsum": [[756, "einsum"]], "unique_counts": [[747, "unique-counts"]], "shuffle": [[740, "shuffle"]], "random_normal": [[737, "random-normal"]], "Test parameter flags": [[780, "module-ivy_tests.test_ivy.helpers.test_parameter_flags"]], "argwhere": [[743, "argwhere"]], "unique_values": [[749, "unique-values"]], "Dtype helpers": [[774, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers"]], "Available frameworks": [[769, "module-ivy_tests.test_ivy.helpers.available_frameworks"]], "Number helpers": [[776, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers"]], "Testing helpers": [[781, "module-ivy_tests.test_ivy.helpers.testing_helpers"]], "Pipeline helper": [[778, "module-ivy_tests.test_ivy.helpers.pipeline_helper"]], "mean": [[758, "mean"]], "argsort": [[750, "argsort"]], "Hypothesis helpers": [[772, "hypothesis-helpers"]], "seed": [[739, "seed"]], "cumprod": [[754, "cumprod"]], "save": [[767, "save"]], "prod": [[760, "prod"]], "Losses": [[790, "module-ivy.stateful.losses"], [635, "losses"], [374, "losses"], [83, "module-ivy.data_classes.container.losses"], [60, "module-ivy.data_classes.array.losses"]], "Profiler": [[807, "module-ivy.utils.profiler"]], "Einsum path helpers": [[803, "module-ivy.utils.einsum_path_helpers"]], "Array API Tests": [[820, "array-api-tests"], [825, "array-api-tests"]], "Running the Tests": [[820, "running-the-tests"]], "Using Terminal": [[820, "using-terminal"]], "Using the IDE": [[820, "using-the-ide"]], "Regenerating Test Failures": [[820, "regenerating-test-failures"]], "Test Skipping": [[820, "test-skipping"]], "Forking and cloning the repo": [[816, "forking-and-cloning-the-repo"]], "Pre-Commit": [[816, "pre-commit"]], "Virtual environments - No Docker": [[816, "virtual-environments-no-docker"]], "Using miniconda": [[816, "using-miniconda"]], "Using venv": [[816, "using-venv"]], "Docker Interpreter with PyCharm": [[816, "docker-interpreter-with-pycharm"]], "Windows": [[816, "windows"], [816, "id6"]], "MacOS": [[816, "macos"]], "Ubuntu": [[816, "ubuntu"], [816, "id8"]], "Setting Up Testing in PyCharm": [[816, "setting-up-testing-in-pycharm"]], "More Detailed Hypothesis Logs in PyCharm": [[816, "more-detailed-hypothesis-logs-in-pycharm"]], "Setting up for Free": [[816, "setting-up-for-free"]], "WSL": [[816, "wsl"]], "GitHub Codespaces": [[816, "github-codespaces"]], "The Binaries": [[816, "the-binaries"]], "Error Handling": [[813, "error-handling"]], "Binaries": [[800, "module-ivy.utils.binaries"]], "Open Tasks": [[815, "open-tasks"]], "Fixing Failing Tests": [[815, "fixing-failing-tests"]], "How to Contribute": [[815, "how-to-contribute"]], "Frontend APIs": [[815, "frontend-apis"]], "Where to place a frontend function": [[815, "where-to-place-a-frontend-function"]], "Frontend checklist": [[815, "frontend-checklist"]], "Function Formatting": [[815, "function-formatting"]], "Formatting checklist": [[815, "formatting-checklist"]], "Ivy Experimental API": [[815, "ivy-experimental-api"]], "Extending the Ivy API": [[815, "extending-the-ivy-api"]], "Where to place a backend function": [[815, "where-to-place-a-backend-function"]], "Creating an Issue on Ivy\u2019s GitHub using a Template": [[815, "creating-an-issue-on-ivy-s-github-using-a-template"]], "Backend Setting": [[822, "backend-setting"]], "Dynamic Backend Setting": [[822, "dynamic-backend-setting"]], "Backend and Frontend Version Support": [[822, "backend-and-frontend-version-support"]], "Helpers": [[787, "module-ivy.stateful.helpers"]], "Contributing": [[810, "contributing"], [809, "contributing"]], "Module": [[791, "module-ivy.stateful.module"]], "Activations": [[785, "module-ivy.stateful.activations"], [623, "activations"], [364, "activations"], [48, "module-ivy.data_classes.array.activations"], [70, "module-ivy.data_classes.container.activations"]], "Parameter": [[785, "parameter"], [785, "id1"], [575, "parameter"], [581, "parameter"], [576, "parameter"], [582, "parameter"], [584, "parameter"], [585, "parameter"], [628, "parameter"], [631, "parameter"], [631, "id1"], [631, "id2"], [631, "id3"], [631, "id4"], [631, "id5"], [207, "parameter"]], "Backend": [[796, "backend"]], "Dynamic import": [[801, "module-ivy.utils.dynamic_import"]], "Sub backend handler": [[799, "module-ivy.utils.backend.sub_backend_handler"]], "Building the Docs Pipeline": [[823, "building-the-docs-pipeline"]], "How the doc-builder is being run": [[823, "how-the-doc-builder-is-being-run"]], "The convenience script": [[823, "the-convenience-script"]], "Options": [[823, "options"]], "The Docker image": [[823, "the-docker-image"]], "How Ivy\u2019s docs is structured": [[823, "how-ivy-s-docs-is-structured"]], "index.rst": [[823, "index-rst"]], "partial_conf.py": [[823, "partial-conf-py"]], "prebuild.sh": [[823, "prebuild-sh"]], "Custom Extensions": [[823, "custom-extensions"]], "custom_autosummary": [[823, "custom-autosummary"]], ":hide-table:": [[823, "hide-table"]], "discussion_linker": [[823, "discussion-linker"]], "skippable_function": [[823, "skippable-function"]], "ivy_data": [[823, "ivy-data"]], "Commit (Push/PR) Triggered Testing": [[825, "commit-push-pr-triggered-testing"]], "Implementation": [[825, "implementation"]], "A Top-Down View": [[825, "a-top-down-view"]], "Storing (and retrieving) the Mapping": [[825, "storing-and-retrieving-the-mapping"]], "Cloning and Pushing to the Repository": [[825, "cloning-and-pushing-to-the-repository"]], "Implementational Nitty Gritties": [[825, "implementational-nitty-gritties"]], "Storage Space (unifyai/Mapping)": [[825, "storage-space-unifyai-mapping"]], "Determine Test Coverage Workflow": [[825, "determine-test-coverage-workflow"]], "Multiple Runners": [[825, "multiple-runners"]], "Race Condition": [[825, "race-condition"]], "Periodic Testing": [[825, "periodic-testing"]], "Manually Dispatched Workflows": [[825, "manually-dispatched-workflows"]], "CI Pipeline \u27a1\ufe0f": [[825, "ci-pipeline"]], "Push": [[825, "push"]], "Pull Request": [[825, "pull-request"]], "Dashboard": [[825, "dashboard"]], "Containers": [[824, "containers"]], "Container Instance Methods": [[824, "container-instance-methods"]], "API Instance Methods": [[824, "api-instance-methods"]], "API Special Methods": [[824, "api-special-methods"]], "Einsum parser": [[802, "module-ivy.utils.einsum_parser"]], "Building the Docs": [[811, "building-the-docs"]], "Building the Docs using Docker": [[811, "building-the-docs-using-docker"]], "Using convenience script": [[811, "using-convenience-script"]], "Using existing image on Docker Hub": [[811, "using-existing-image-on-docker-hub"]], "Building the image locally": [[811, "building-the-image-locally"]], "Building the Docs without Docker": [[811, "building-the-docs-without-docker"]], "Ast helpers": [[797, "module-ivy.utils.backend.ast_helpers"]], "Exceptions": [[804, "module-ivy.utils.exceptions"]], "Helpful Resources": [[814, "helpful-resources"]], "Norms": [[792, "module-ivy.stateful.norms"], [639, "norms"], [378, "norms"], [85, "module-ivy.data_classes.container.norms"], [62, "module-ivy.data_classes.array.norms"]], "Framework classes": [[782, "framework-classes"]], "Deep Dive": [[819, "deep-dive"]], "Verbosity": [[808, "module-ivy.utils.verbosity"]], "Data Types": [[826, "data-types"]], "Data Type Module": [[826, "data-type-module"]], "Data Type Promotion": [[826, "data-type-promotion"]], "Precise Mode": [[826, "precise-mode"]], "Precise Promotion Table": [[826, "precise-promotion-table"]], "Non-Precise Promotion Table": [[826, "non-precise-promotion-table"]], "Arguments in other Functions": [[826, "arguments-in-other-functions"], [827, "arguments-in-other-functions"]], "Supported and Unsupported Data Types": [[826, "supported-and-unsupported-data-types"]], "Supported and Unsupported Data Types Attributes": [[826, "supported-and-unsupported-data-types-attributes"]], "Special Case": [[826, "special-case"]], "Backend Data Type Bugs": [[826, "backend-data-type-bugs"]], "Data Type Casting Modes": [[826, "data-type-casting-modes"]], "Superset Data Type Support": [[826, "superset-data-type-support"]], "Handler": [[798, "module-ivy.utils.backend.handler"]], "The Basics": [[817, "the-basics"]], "Getting Help": [[817, "getting-help"]], "ToDo List Issues": [[817, "todo-list-issues"]], "Managing Your Fork": [[817, "managing-your-fork"]], "Who To Ask": [[817, "who-to-ask"]], "With Command Line:": [[817, "with-command-line"]], "With Browser:": [[817, "with-browser"]], "Pull Requests": [[817, "pull-requests"]], "Small Commits Often": [[817, "small-commits-often"]], "Interactive Ivy Docker Container": [[817, "interactive-ivy-docker-container"]], "Running Tests Locally": [[817, "running-tests-locally"]], "With Docker": [[817, "with-docker"]], "Getting the most out of IDE": [[817, "getting-the-most-out-of-ide"]], "with PyCharm": [[817, "with-pycharm"]], "Sequential": [[794, "module-ivy.stateful.sequential"]], "Converters": [[786, "module-ivy.stateful.converters"]], "Utils": [[783, "utils"]], "Logging": [[806, "module-ivy.utils.logging"]], "Contributor Rewards": [[812, "contributor-rewards"]], "Badges": [[812, "badges"]], "Badge Tiers": [[812, "badge-tiers"]], "Devices": [[827, "devices"]], "Device Module": [[827, "device-module"]], "Device handling": [[827, "device-handling"]], "Status": [[809, "status"]], "Unified AI": [[809, "unified-ai"]], "Getting started": [[809, "getting-started"]], "Installing ivy": [[809, "installing-ivy"]], "Using Ivy": [[809, "using-ivy"]], "Documentation": [[809, "documentation"]], "Diving deeper": [[809, "diving-deeper"]], "When should I use Ivy as a transpiler?": [[809, "when-should-i-use-ivy-as-a-transpiler"]], "Community": [[809, "community"]], "Citation": [[809, "citation"]], "Arrays": [[821, "arrays"]], "Native Array": [[821, "native-array"]], "Array Handling": [[821, "array-handling"]], "Integrating custom classes with Ivy": [[821, "integrating-custom-classes-with-ivy"]], "Inspection": [[805, "module-ivy.utils.inspection"]], "Testing": [[784, "testing"], [42, "Testing"]], "Contributor Program": [[818, "contributor-program"]], "Contributor": [[818, "contributor"]], "Core Contributor": [[818, "core-contributor"]], "Rising Contributor": [[818, "rising-contributor"]], "Top Contributor": [[818, "top-contributor"]], "Layers": [[789, "module-ivy.stateful.layers"], [633, "layers"], [372, "layers"], [58, "module-ivy.data_classes.array.layers"], [81, "module-ivy.data_classes.container.layers"]], "stack": [[707, "stack"]], "all_nested_indices": [[715, "all-nested-indices"]], "duplicate_array_index_chains": [[717, "duplicate-array-index-chains"]], "map_nest_at_index": [[722, "map-nest-at-index"]], "reptile_step": [[714, "reptile-step"]], "prune_nest_at_indices": [[731, "prune-nest-at-indices"]], "insert_into_nest_at_index": [[719, "insert-into-nest-at-index"]], "map": [[721, "map"]], "vecdot": [[690, "vecdot"]], "swapaxes": [[708, "swapaxes"]], "reshape": [[703, "reshape"]], "zero_pad": [[711, "zero-pad"]], "index_nest": [[718, "index-nest"]], "prune_empty": [[729, "prune-empty"]], "set_nest_at_index": [[732, "set-nest-at-index"]], "vector_to_skew_symmetric_matrix": [[692, "vector-to-skew-symmetric-matrix"]], "split": [[705, "split"]], "clip": [[696, "clip"]], "binary_cross_entropy": [[693, "binary-cross-entropy"]], "vector_norm": [[691, "vector-norm"]], "permute_dims": [[701, "permute-dims"]], "fomaml_step": [[712, "fomaml-step"]], "nested_any": [[725, "nested-any"]], "expand_dims": [[699, "expand-dims"]], "set_nest_at_indices": [[733, "set-nest-at-indices"]], "cross_entropy": [[694, "cross-entropy"]], "map_nest_at_indices": [[723, "map-nest-at-indices"]], "layer_norm": [[734, "layer-norm"]], "maml_step": [[713, "maml-step"]], "nested_multi_map": [[728, "nested-multi-map"]], "sparse_cross_entropy": [[695, "sparse-cross-entropy"]], "unstack": [[710, "unstack"]], "multinomial": [[735, "multinomial"]], "roll": [[704, "roll"]], "tile": [[709, "tile"]], "multi_index_nest": [[724, "multi-index-nest"]], "nested_argwhere": [[726, "nested-argwhere"]], "concat": [[697, "concat"]], "squeeze": [[706, "squeeze"]], "repeat": [[702, "repeat"]], "copy_nest": [[716, "copy-nest"]], "flip": [[700, "flip"]], "nested_map": [[727, "nested-map"]], "constant_pad": [[698, "constant-pad"]], "insert_into_nest_at_indices": [[720, "insert-into-nest-at-indices"]], "prune_nest_at_index": [[730, "prune-nest-at-index"]], "eigh": [[670, "eigh"]], "conv": [[646, "conv"]], "tensordot": [[686, "tensordot"]], "conv3d": [[651, "conv3d"]], "scaled_dot_product_attention": [[663, "scaled-dot-product-attention"]], "cross": [[665, "cross"]], "matrix_transpose": [[678, "matrix-transpose"]], "conv1d": [[647, "conv1d"]], "conv2d_transpose": [[650, "conv2d-transpose"]], "det": [[666, "det"]], "solve": [[683, "solve"]], "slogdet": [[682, "slogdet"]], "tensorsolve": [[687, "tensorsolve"]], "conv1d_transpose": [[648, "conv1d-transpose"]], "roi_align": [[662, "roi-align"]], "matmul": [[674, "matmul"]], "inner": [[672, "inner"]], "linear": [[657, "linear"]], "matrix_norm": [[675, "matrix-norm"]], "Utility": [[645, "utility"], [385, "utility"], [91, "module-ivy.data_classes.container.utility"], [68, "module-ivy.data_classes.array.utility"]], "dropout": [[656, "dropout"]], "qr": [[681, "qr"]], "conv2d": [[649, "conv2d"]], "svdvals": [[685, "svdvals"]], "inv": [[673, "inv"]], "nms": [[661, "nms"]], "outer": [[679, "outer"]], "Statistical": [[644, "statistical"], [384, "statistical"], [90, "module-ivy.data_classes.container.statistical"], [67, "module-ivy.data_classes.array.statistical"]], "trace": [[688, "trace"]], "diag": [[667, "diag"]], "svd": [[684, "svd"]], "cholesky": [[664, "cholesky"]], "lstm_update": [[659, "lstm-update"]], "matrix_rank": [[677, "matrix-rank"]], "pinv": [[680, "pinv"]], "eig": [[669, "eig"], [426, "eig"]], "eigvalsh": [[671, "eigvalsh"]], "conv_general_dilated": [[653, "conv-general-dilated"]], "multi_head_attention": [[660, "multi-head-attention"]], "diagonal": [[668, "diagonal"]], "vander": [[689, "vander"]], "depthwise_conv2d": [[655, "depthwise-conv2d"]], "conv3d_transpose": [[652, "conv3d-transpose"]], "matrix_power": [[676, "matrix-power"]], "conv_general_transpose": [[654, "conv-general-transpose"]], "lstm": [[658, "lstm"]], "set_array_mode": [[575, "set-array-mode"]], "set_min_base": [[579, "set-min-base"]], "set_min_denominator": [[580, "set-min-denominator"]], "get_item": [[552, "get-item"]], "to_ivy_shape": [[593, "to-ivy-shape"]], "inplace_update": [[559, "inplace-update"]], "stable_divide": [[589, "stable-divide"]], "is_ivy_nested_array": [[564, "is-ivy-nested-array"]], "set_nestable_mode": [[581, "set-nestable-mode"]], "set_inplace_mode": [[577, "set-inplace-mode"]], "set_exception_trace_mode": [[576, "set-exception-trace-mode"]], "inplace_decrement": [[557, "inplace-decrement"]], "supports_inplace_updates": [[592, "supports-inplace-updates"]], "get_num_dims": [[553, "get-num-dims"]], "scatter_nd": [[574, "scatter-nd"]], "itemsize": [[568, "itemsize"]], "stable_pow": [[590, "stable-pow"]], "scatter_flat": [[573, "scatter-flat"]], "inplace_increment": [[558, "inplace-increment"]], "set_tmp_dir": [[586, "set-tmp-dir"]], "strides": [[591, "strides"]], "set_queue_timeout": [[583, "set-queue-timeout"]], "inplace_variables_supported": [[560, "inplace-variables-supported"]], "shape": [[587, "shape"]], "isin": [[566, "isin"]], "match_kwargs": [[569, "match-kwargs"]], "set_item": [[578, "set-item"]], "multiprocessing": [[570, "multiprocessing"]], "print_all_arrays_in_memory": [[572, "print-all-arrays-in-memory"]], "size": [[588, "size"]], "set_precise_mode": [[582, "set-precise-mode"]], "to_native_shape": [[595, "to-native-shape"]], "has_nans": [[555, "has-nans"]], "to_numpy": [[596, "to-numpy"]], "set_shape_array_mode": [[584, "set-shape-array-mode"]], "set_show_func_wrapper_trace_mode": [[585, "set-show-func-wrapper-trace-mode"]], "is_ivy_array": [[562, "is-ivy-array"]], "isscalar": [[567, "isscalar"]], "to_scalar": [[597, "to-scalar"]], "is_ivy_container": [[563, "is-ivy-container"]], "inplace_arrays_supported": [[556, "inplace-arrays-supported"]], "is_native_array": [[565, "is-native-array"]], "to_list": [[594, "to-list"]], "get_referrers_recursive": [[554, "get-referrers-recursive"]], "is_array": [[561, "is-array"]], "num_arrays_in_memory": [[571, "num-arrays-in-memory"]], "gather": [[549, "gather"]], "beta": [[506, "beta"]], "corrcoef": [[518, "corrcoef"]], "poisson": [[509, "poisson"]], "native_sparse_array_to_indices_values_and_shape": [[516, "native-sparse-array-to-indices-values-and-shape"]], "cummax": [[520, "cummax"]], "einops_rearrange": [[542, "einops-rearrange"]], "clip_matrix_norm": [[537, "clip-matrix-norm"]], "cache_fn": [[536, "cache-fn"]], "invert_permutation": [[511, "invert-permutation"]], "clip_vector_norm": [[538, "clip-vector-norm"]], "gather_nd": [[550, "gather-nd"]], "igamma": [[523, "igamma"]], "function_supported_devices_and_dtypes": [[547, "function-supported-devices-and-dtypes"]], "default": [[541, "default"]], "exists": [[545, "exists"]], "unravel_index": [[510, "unravel-index"]], "array_equal": [[534, "array-equal"]], "get_all_arrays_in_memory": [[551, "get-all-arrays-in-memory"]], "einops_repeat": [[544, "einops-repeat"]], "cov": [[519, "cov"]], "histogram": [[522, "histogram"]], "all_equal": [[531, "all-equal"]], "cummin": [[521, "cummin"]], "nanmin": [[527, "nanmin"]], "nanprod": [[528, "nanprod"]], "median": [[524, "median"]], "optional_get_element": [[530, "optional-get-element"]], "arg_info": [[532, "arg-info"]], "nanmedian": [[526, "nanmedian"]], "bincount": [[517, "bincount"]], "arg_names": [[533, "arg-names"]], "gamma": [[508, "gamma"]], "einops_reduce": [[543, "einops-reduce"]], "fourier_encode": [[546, "fourier-encode"]], "function_unsupported_devices_and_dtypes": [[548, "function-unsupported-devices-and-dtypes"]], "is_native_sparse_array": [[514, "is-native-sparse-array"]], "quantile": [[529, "quantile"]], "current_backend_str": [[540, "current-backend-str"]], "container_types": [[539, "container-types"]], "nanmean": [[525, "nanmean"]], "native_sparse_array": [[515, "native-sparse-array"]], "assert_supports_inplace": [[535, "assert-supports-inplace"]], "is_ivy_sparse_array": [[513, "is-ivy-sparse-array"]], "dirichlet": [[507, "dirichlet"]], "lexsort": [[512, "lexsort"]], "partial_fold": [[482, "partial-fold"]], "vstack": [[497, "vstack"]], "l1_normalize": [[501, "l1-normalize"]], "check_scalar": [[463, "check-scalar"]], "broadcast_shapes": [[462, "broadcast-shapes"]], "local_response_norm": [[503, "local-response-norm"]], "vsplit": [[496, "vsplit"]], "partial_unfold": [[484, "partial-unfold"]], "soft_thresholding": [[488, "soft-thresholding"]], "top_k": [[491, "top-k"]], "fill_diagonal": [[470, "fill-diagonal"]], "batch_norm": [[498, "batch-norm"]], "flipud": [[473, "flipud"]], "unfold": [[494, "unfold"]], "i0": [[478, "i0"]], "concat_from_sequence": [[466, "concat-from-sequence"]], "unique_consecutive": [[495, "unique-consecutive"]], "instance_norm": [[500, "instance-norm"]], "choose": [[464, "choose"]], "trim_zeros": [[492, "trim-zeros"]], "atleast_3d": [[461, "atleast-3d"]], "unflatten": [[493, "unflatten"]], "fold": [[474, "fold"]], "take": [[489, "take"]], "heaviside": [[475, "heaviside"]], "rot90": [[487, "rot90"]], "l2_normalize": [[502, "l2-normalize"]], "dstack": [[468, "dstack"]], "partial_tensor_to_vec": [[483, "partial-tensor-to-vec"]], "partial_vec_to_tensor": [[485, "partial-vec-to-tensor"]], "hstack": [[477, "hstack"]], "flatten": [[471, "flatten"]], "pad": [[481, "pad"]], "bernoulli": [[505, "bernoulli"]], "put_along_axis": [[486, "put-along-axis"]], "lp_normalize": [[504, "lp-normalize"]], "group_norm": [[499, "group-norm"]], "hsplit": [[476, "hsplit"]], "column_stack": [[465, "column-stack"]], "moveaxis": [[480, "moveaxis"]], "atleast_2d": [[460, "atleast-2d"]], "dsplit": [[467, "dsplit"]], "fliplr": [[472, "fliplr"]], "expand": [[469, "expand"]], "matricize": [[479, "matricize"]], "take_along_axis": [[490, "take-along-axis"]], "Device": [[628, "device"], [368, "module-ivy.functional.ivy.experimental.device"], [52, "module-ivy.data_classes.array.device"], [75, "module-ivy.data_classes.container.device"]], "stop_gradient": [[621, "stop-gradient"]], "adam_update": [[613, "adam-update"]], "value_and_grad": [[622, "value-and-grad"]], "Nest": [[638, "nest"], [377, "module-ivy.functional.ivy.experimental.nest"]], "unset_tmp_dir": [[609, "unset-tmp-dir"]], "unset_show_func_wrapper_trace_mode": [[608, "unset-show-func-wrapper-trace-mode"]], "gradient_descent_update": [[616, "gradient-descent-update"]], "Linear algebra": [[634, "linear-algebra"], [373, "linear-algebra"], [82, "module-ivy.data_classes.container.linear_algebra"], [59, "module-ivy.data_classes.array.linear_algebra"]], "Set": [[642, "set"], [381, "module-ivy.functional.ivy.experimental.set"], [88, "module-ivy.data_classes.container.set"], [65, "module-ivy.data_classes.array.set"]], "Data type": [[627, "data-type"], [367, "module-ivy.functional.ivy.experimental.data_type"], [74, "module-ivy.data_classes.container.data_type"], [51, "module-ivy.data_classes.array.data_type"]], "jac": [[617, "jac"]], "try_else_none": [[598, "try-else-none"]], "unset_queue_timeout": [[606, "unset-queue-timeout"]], "lars_update": [[619, "lars-update"]], "Constants": [[624, "module-ivy.functional.ivy.constants"], [365, "module-ivy.functional.ivy.experimental.constants"]], "unset_min_base": [[602, "unset-min-base"]], "unset_shape_array_mode": [[607, "unset-shape-array-mode"]], "vmap": [[611, "vmap"]], "Experimental": [[630, "experimental"], [77, "module-ivy.data_classes.container.experimental"], [54, "module-ivy.data_classes.array.experimental"]], "value_is_nan": [[610, "value-is-nan"]], "Random": [[640, "random"], [379, "random"], [63, "module-ivy.data_classes.array.random"], [86, "module-ivy.data_classes.container.random"]], "Manipulation": [[636, "manipulation"], [375, "manipulation"], [61, "module-ivy.data_classes.array.manipulation"], [84, "module-ivy.data_classes.container.manipulation"]], "unset_exception_trace_mode": [[600, "unset-exception-trace-mode"]], "execute_with_gradients": [[614, "execute-with-gradients"]], "adam_step": [[612, "adam-step"]], "unset_array_mode": [[599, "unset-array-mode"]], "unset_precise_mode": [[605, "unset-precise-mode"]], "grad": [[615, "grad"]], "unset_nestable_mode": [[604, "unset-nestable-mode"]], "optimizer_update": [[620, "optimizer-update"]], "Sorting": [[643, "sorting"], [382, "sorting"], [89, "module-ivy.data_classes.container.sorting"], [66, "module-ivy.data_classes.array.sorting"]], "Searching": [[641, "searching"], [380, "searching"], [64, "module-ivy.data_classes.array.searching"], [87, "module-ivy.data_classes.container.searching"]], "Control flow ops": [[625, "control-flow-ops"]], "Creation": [[626, "creation"], [366, "creation"], [50, "module-ivy.data_classes.array.creation"], [73, "module-ivy.data_classes.container.creation"]], "unset_inplace_mode": [[601, "unset-inplace-mode"]], "unset_min_denominator": [[603, "unset-min-denominator"]], "Meta": [[637, "meta"], [376, "module-ivy.functional.ivy.experimental.meta"]], "lamb_update": [[618, "lamb-update"]], "General": [[631, "general"], [370, "general"], [55, "module-ivy.data_classes.array.general"], [78, "module-ivy.data_classes.container.general"]], "cond": [[423, "cond"]], "pool": [[414, "pool"]], "multi_dot": [[440, "multi-dot"]], "matrix_exp": [[438, "matrix-exp"]], "l1_loss": [[452, "l1-loss"]], "adjoint": [[421, "adjoint"]], "rfftn": [[417, "rfftn"]], "eigh_tridiagonal": [[427, "eigh-tridiagonal"]], "solve_triangular": [[443, "solve-triangular"]], "hinge_embedding_loss": [[449, "hinge-embedding-loss"]], "diagflat": [[424, "diagflat"]], "eigvals": [[428, "eigvals"]], "soft_margin_loss": [[456, "soft-margin-loss"]], "partial_tucker": [[442, "partial-tucker"]], "dot": [[425, "dot"]], "initialize_tucker": [[431, "initialize-tucker"]], "sliding_window": [[419, "sliding-window"]], "mode_dot": [[439, "mode-dot"]], "rnn": [[418, "rnn"]], "reduce_window": [[415, "reduce-window"]], "general_inner_product": [[429, "general-inner-product"]], "kron": [[433, "kron"]], "multi_mode_dot": [[441, "multi-mode-dot"]], "stft": [[420, "stft"]], "lu_solve": [[436, "lu-solve"]], "batched_outer": [[422, "batched-outer"]], "svd_flip": [[444, "svd-flip"]], "huber_loss": [[450, "huber-loss"]], "tensor_train": [[445, "tensor-train"]], "kl_div": [[451, "kl-div"]], "as_strided": [[457, "as-strided"]], "associative_scan": [[458, "associative-scan"]], "lu_factor": [[435, "lu-factor"]], "tt_matrix_to_tensor": [[447, "tt-matrix-to-tensor"]], "khatri_rao": [[432, "khatri-rao"]], "higher_order_moment": [[430, "higher-order-moment"]], "kronecker": [[434, "kronecker"]], "log_poisson_loss": [[453, "log-poisson-loss"]], "truncated_svd": [[446, "truncated-svd"]], "atleast_1d": [[459, "atleast-1d"]], "smooth_l1_loss": [[455, "smooth-l1-loss"]], "make_svd_non_negative": [[437, "make-svd-non-negative"]], "rfft": [[416, "rfft"]], "tucker": [[448, "tucker"]], "poisson_nll_loss": [[454, "poisson-nll-loss"]], "random_tt": [[323, "random-tt"]], "vorbis_window": [[330, "vorbis-window"]], "amax": [[332, "amax"]], "unsorted_segment_sum": [[329, "unsorted-segment-sum"]], "erfc": [[340, "erfc"]], "lerp": [[350, "lerp"]], "gradient": [[346, "gradient"]], "hypot": [[347, "hypot"]], "binarizer": [[334, "binarizer"]], "copysign": [[336, "copysign"]], "erfinv": [[341, "erfinv"]], "count_nonzero": [[337, "count-nonzero"]], "zeta": [[359, "zeta"]], "conj": [[335, "conj"]], "ldexp": [[349, "ldexp"]], "vjp": [[363, "vjp"]], "random_tr": [[322, "random-tr"]], "frexp": [[345, "frexp"]], "sparsify_tensor": [[357, "sparsify-tensor"]], "tril_indices": [[325, "tril-indices"]], "diff": [[338, "diff"]], "fix": [[342, "fix"]], "bind_custom_gradient_function": [[361, "bind-custom-gradient-function"]], "xlogy": [[358, "xlogy"]], "jvp": [[362, "jvp"]], "nextafter": [[354, "nextafter"]], "unsorted_segment_min": [[328, "unsorted-segment-min"]], "modf": [[352, "modf"]], "fmax": [[344, "fmax"]], "random_tucker": [[324, "random-tucker"]], "lgamma": [[351, "lgamma"]], "sinc": [[356, "sinc"]], "unsorted_segment_mean": [[327, "unsorted-segment-mean"]], "allclose": [[331, "allclose"]], "trilu": [[326, "trilu"]], "digamma": [[339, "digamma"]], "amin": [[333, "amin"]], "isclose": [[348, "isclose"]], "signbit": [[355, "signbit"]], "reduce": [[360, "reduce"]], "nansum": [[353, "nansum"]], "float_power": [[343, "float-power"]], "dropout3d": [[398, "dropout3d"]], "idct": [[404, "idct"]], "adaptive_max_pool2d": [[388, "adaptive-max-pool2d"]], "max_unpool1d": [[412, "max-unpool1d"]], "dropout1d": [[396, "dropout1d"]], "max_pool2d": [[410, "max-pool2d"]], "adaptive_avg_pool2d": [[387, "adaptive-avg-pool2d"]], "area_interpolate": [[390, "area-interpolate"]], "dft": [[395, "dft"]], "adaptive_avg_pool1d": [[386, "adaptive-avg-pool1d"]], "avg_pool1d": [[391, "avg-pool1d"]], "avg_pool3d": [[393, "avg-pool3d"]], "embedding": [[399, "embedding"]], "avg_pool2d": [[392, "avg-pool2d"]], "max_pool1d": [[409, "max-pool1d"]], "fft2": [[401, "fft2"]], "nearest_interpolate": [[413, "nearest-interpolate"]], "interp": [[407, "interp"]], "adaptive_max_pool3d": [[389, "adaptive-max-pool3d"]], "Sparse array": [[383, "sparse-array"]], "fft": [[400, "fft"]], "generate_einsum_equation": [[402, "generate-einsum-equation"]], "max_pool3d": [[411, "max-pool3d"]], "get_interpolate_kernel": [[403, "get-interpolate-kernel"]], "interpolate": [[408, "interpolate"]], "ifft": [[405, "ifft"]], "ifftn": [[406, "ifftn"]], "dct": [[394, "dct"]], "dropout2d": [[397, "dropout2d"]], "trunc": [[290, "trunc"]], "silu": [[303, "silu"]], "scaled_tanh": [[301, "scaled-tanh"]], "kaiser_bessel_derived_window": [[314, "kaiser-bessel-derived-window"]], "square": [[285, "square"]], "hardshrink": [[294, "hardshrink"]], "tan": [[287, "tan"]], "stanh": [[305, "stanh"]], "relu6": [[300, "relu6"]], "sign": [[281, "sign"]], "tanhshrink": [[306, "tanhshrink"]], "selu": [[302, "selu"]], "elu": [[293, "elu"]], "threshold": [[307, "threshold"]], "random_parafac2": [[321, "random-parafac2"]], "random_cp": [[320, "random-cp"]], "tanh": [[288, "tanh"]], "prelu": [[299, "prelu"]], "hardsilu": [[295, "hardsilu"]], "rad2deg": [[276, "rad2deg"]], "hamming_window": [[311, "hamming-window"]], "hann_window": [[312, "hann-window"]], "subtract": [[286, "subtract"]], "indices": [[313, "indices"]], "trunc_divide": [[291, "trunc-divide"]], "ndenumerate": [[317, "ndenumerate"]], "celu": [[292, "celu"]], "mel_weight_matrix": [[316, "mel-weight-matrix"]], "round": [[280, "round"]], "kaiser_window": [[315, "kaiser-window"]], "sqrt": [[284, "sqrt"]], "sinh": [[283, "sinh"]], "real": [[277, "real"]], "thresholded_relu": [[308, "thresholded-relu"]], "trapz": [[289, "trapz"]], "blackman_window": [[309, "blackman-window"]], "sin": [[282, "sin"]], "remainder": [[279, "remainder"]], "eye_like": [[310, "eye-like"]], "polyval": [[319, "polyval"]], "softshrink": [[304, "softshrink"]], "ndindex": [[318, "ndindex"]], "reciprocal": [[278, "reciprocal"]], "logit": [[297, "logit"]], "hardtanh": [[296, "hardtanh"]], "logsigmoid": [[298, "logsigmoid"]], "erf": [[239, "erf"]], "logical_xor": [[267, "logical-xor"]], "equal": [[238, "equal"]], "logaddexp": [[262, "logaddexp"]], "fmod": [[246, "fmod"]], "isfinite": [[251, "isfinite"]], "positive": [[274, "positive"]], "not_equal": [[273, "not-equal"]], "expm1": [[242, "expm1"]], "less": [[256, "less"]], "log1p": [[260, "log1p"]], "isinf": [[252, "isinf"]], "log10": [[259, "log10"]], "isreal": [[254, "isreal"]], "greater_equal": [[249, "greater-equal"]], "exp2": [[241, "exp2"]], "floor_divide": [[244, "floor-divide"]], "floor": [[243, "floor"]], "bitwise_or": [[230, "bitwise-or"]], "maximum": [[268, "maximum"]], "negative": [[272, "negative"]], "cosh": [[235, "cosh"]], "deg2rad": [[236, "deg2rad"]], "gcd": [[247, "gcd"]], "divide": [[237, "divide"]], "ceil": [[233, "ceil"]], "greater": [[248, "greater"]], "imag": [[250, "imag"]], "logical_or": [[266, "logical-or"]], "logaddexp2": [[263, "logaddexp2"]], "cos": [[234, "cos"]], "bitwise_xor": [[232, "bitwise-xor"]], "log": [[258, "log"]], "less_equal": [[257, "less-equal"]], "exp": [[240, "exp"]], "log2": [[261, "log2"]], "bitwise_right_shift": [[231, "bitwise-right-shift"]], "logical_not": [[265, "logical-not"]], "fmin": [[245, "fmin"]], "pow": [[275, "pow"]], "nan_to_num": [[271, "nan-to-num"]], "minimum": [[269, "minimum"]], "isnan": [[253, "isnan"]], "lcm": [[255, "lcm"]], "multiply": [[270, "multiply"]], "logical_and": [[264, "logical-and"]], "set_split_factor": [[208, "set-split-factor"]], "unset_default_complex_dtype": [[184, "unset-default-complex-dtype"]], "default_device": [[193, "default-device"]], "unset_default_uint_dtype": [[188, "unset-default-uint-dtype"]], "dev_util": [[195, "dev-util"]], "total_mem_on_dev": [[212, "total-mem-on-dev"]], "atan2": [[225, "atan2"]], "atanh": [[226, "atanh"]], "angle": [[221, "angle"]], "bitwise_invert": [[228, "bitwise-invert"]], "gpu_is_available": [[199, "gpu-is-available"]], "set_default_device": [[206, "set-default-device"]], "percent_used_mem_on_dev": [[204, "percent-used-mem-on-dev"]], "function_supported_devices": [[196, "function-supported-devices"]], "asin": [[222, "asin"]], "set_soft_device_mode": [[207, "set-soft-device-mode"]], "asinh": [[223, "asinh"]], "clear_cached_mem_on_dev": [[192, "clear-cached-mem-on-dev"]], "num_cpu_cores": [[201, "num-cpu-cores"]], "as_native_dev": [[191, "as-native-dev"]], "acosh": [[219, "acosh"]], "tpu_is_available": [[213, "tpu-is-available"]], "bitwise_left_shift": [[229, "bitwise-left-shift"]], "add": [[220, "add"]], "valid_dtype": [[189, "valid-dtype"]], "unset_default_float_dtype": [[186, "unset-default-float-dtype"]], "bitwise_and": [[227, "bitwise-and"]], "dev": [[194, "dev"]], "acos": [[218, "acos"]], "as_ivy_dev": [[190, "as-ivy-dev"]], "num_gpus": [[202, "num-gpus"]], "get_all_ivy_arrays_on_dev": [[198, "get-all-ivy-arrays-on-dev"]], "unset_default_device": [[214, "unset-default-device"]], "to_device": [[211, "to-device"]], "abs": [[217, "abs"]], "unset_default_int_dtype": [[187, "unset-default-int-dtype"]], "function_unsupported_devices": [[197, "function-unsupported-devices"]], "atan": [[224, "atan"]], "split_factor": [[209, "split-factor"]], "unset_soft_device_mode": [[215, "unset-soft-device-mode"]], "used_mem_on_dev": [[216, "used-mem-on-dev"]], "print_all_ivy_arrays_on_dev": [[205, "print-all-ivy-arrays-on-dev"]], "num_ivy_arrays_on_dev": [[203, "num-ivy-arrays-on-dev"]], "split_func_call": [[210, "split-func-call"]], "unset_default_dtype": [[185, "unset-default-dtype"]], "handle_soft_device_variable": [[200, "handle-soft-device-variable"]], "Conversions": [[49, "module-ivy.data_classes.array.conversions"], [72, "module-ivy.data_classes.container.conversions"]], "Resnet 18": [[47, "Resnet-18"]], "Image": [[80, "module-ivy.data_classes.container.image"], [57, "module-ivy.data_classes.array.image"]], "Ivy as a Transpiler Introduction": [[46, "Ivy-as-a-Transpiler-Introduction"]], "To use the transpiler:": [[46, "To-use-the-transpiler:"]], "Transpiler Interface": [[46, "Transpiler-Interface"]], "Telemetry": [[46, "Telemetry"]], "1. Transpile Functions \ud83d\udd22": [[46, "1.-Transpile-Functions-\ud83d\udd22"]], "2. Transpile Libraries \ud83d\udcda": [[46, "2.-Transpile-Libraries-\ud83d\udcda"]], "3. Transpile Models \ud83c\udf10": [[46, "3.-Transpile-Models-\ud83c\udf10"]], "ODSC Ivy Demo": [[28, "ODSC-Ivy-Demo"]], "Ivy Backend Handler": [[28, "Ivy-Backend-Handler"], [19, "Ivy-Backend-Handler"]], "Data Structures": [[28, "Data-Structures"], [19, "Data-Structures"]], "Ivy Functional API": [[28, "Ivy-Functional-API"], [19, "Ivy-Functional-API"]], "Graph Tracer": [[28, "Graph-Tracer"]], "Any function": [[28, "Any-function"], [29, "Any-function"]], "Any library": [[28, "Any-library"], [29, "Any-library"]], "Any model": [[28, "Any-model"], [29, "Any-model"]], "TO REPLACE: Title": [[1, "TO-REPLACE:-Title"]], "How To Convert Models from PyTorch to PaddlePaddle": [[5, "How-To-Convert-Models-from-PyTorch-to-PaddlePaddle"]], "About the Model": [[5, "About-the-Model"]], "Transpiling the Model": [[5, "Transpiling-the-Model"]], "Comparing the results": [[5, "Comparing-the-results"]], "Fine-tuning the transpiled model": [[5, "Fine-tuning-the-transpiled-model"]], "Conclusion": [[5, "Conclusion"]], "Transpiling a haiku model to build on top": [[14, "Transpiling-a-haiku-model-to-build-on-top"]], "2.0: Kornia": [[37, "2.0:-Kornia"]], "End-to-End Training Pipeline in Ivy": [[44, "End-to-End-Training-Pipeline-in-Ivy"]], "Importing libraries": [[44, "Importing-libraries"]], "Let\u2019s build the pipeline with a Tensorflow backend": [[44, "Let's-build-the-pipeline-with-a-Tensorflow-backend"]], "We are using MNIST dataset for this Tutorial": [[44, "We-are-using-MNIST-dataset-for-this-Tutorial"]], "Temporary Dataset and Dynamic loader": [[44, "Temporary-Dataset-and-Dynamic-loader"]], "Defining the Ivy Network": [[44, "Defining-the-Ivy-Network"]], "Training Loop with utility functions": [[44, "Training-Loop-with-utility-functions"]], "Plotting the training metrics": [[44, "Plotting-the-training-metrics"]], "Save the trained Model": [[44, "Save-the-trained-Model"]], "Guides": [[12, "guides"], [17, "guides"]], "Transpile any library": [[25, "Transpile-any-library"]], "Write a model using Ivy": [[27, "Write-a-model-using-Ivy"]], "Accelerating XGBoost with JAX": [[11, "Accelerating-XGBoost-with-JAX"]], "Imports": [[11, "Imports"], [6, "Imports"], [9, "Imports"]], "Tests": [[11, "Tests"]], "Loading the Data": [[11, "Loading-the-Data"]], "Comparing xgb_frontend.XGBClassifier and xgb.XGBClassifier": [[11, "Comparing-xgb_frontend.XGBClassifier-and-xgb.XGBClassifier"]], "JAX backend": [[11, "JAX-backend"]], "Tensorflow backend": [[11, "Tensorflow-backend"]], "PyTorch backend": [[11, "PyTorch-backend"]], "More exhaustive example": [[11, "More-exhaustive-example"]], "Evaluating Training Time vs. Number of Boosting Rounds": [[11, "Evaluating-Training-Time-vs.-Number-of-Boosting-Rounds"]], "Training Time vs. Fractions of Data": [[11, "Training-Time-vs.-Fractions-of-Data"]], "Comparison of Metrics": [[11, "Comparison-of-Metrics"]], "Learn the basics": [[18, "learn-the-basics"], [17, "learn-the-basics"]], "Image Segmentation with Ivy UNet": [[6, "Image-Segmentation-with-Ivy-UNet"]], "Data Preparation": [[6, "Data-Preparation"], [4, "Data-Preparation"], [3, "Data-Preparation"], [9, "Data-Preparation"]], "Custom Preprocessing": [[6, "Custom-Preprocessing"]], "Load the image example \ud83d\uddbc\ufe0f": [[6, "Load-the-image-example-\ud83d\uddbc\ufe0f"], [9, "Load-the-image-example-\ud83d\uddbc\ufe0f"]], "Visualise image": [[6, "Visualise-image"], [9, "Visualise-image"]], "Model Inference": [[6, "Model-Inference"]], "Initializing Native Torch UNet": [[6, "Initializing-Native-Torch-UNet"]], "Initializing Ivy UNet with Pretrained Weights \u2b07\ufe0f": [[6, "Initializing-Ivy-UNet-with-Pretrained-Weights-\u2b07\ufe0f"]], "Custom masking function": [[6, "Custom-masking-function"]], "Use the model to segment your images \ud83d\ude80": [[6, "Use-the-model-to-segment-your-images-\ud83d\ude80"]], "TensorFlow backend": [[6, "TensorFlow-backend"]], "JAX": [[6, "JAX"]], "Appendix: the Ivy native implementation of UNet": [[6, "Appendix:-the-Ivy-native-implementation-of-UNet"]], "1.2: As a Decorator": [[35, "1.2:-As-a-Decorator"]], "Unify": [[35, "Unify"], [23, "Unify"], [33, "Unify"], [34, "Unify"], [24, "Unify"]], "Compile": [[35, "Compile"], [33, "Compile"], [34, "Compile"]], "Transpile": [[35, "Transpile"], [23, "Transpile"], [33, "Transpile"], [34, "Transpile"], [24, "Transpile"]], "Basic Operations with Ivy": [[40, "Basic-Operations-with-Ivy"]], "Installs \ud83d\udcbe": [[40, "Installs-\ud83d\udcbe"], [41, "Installs-\ud83d\udcbe"]], "Imports \ud83d\udec3": [[40, "Imports-\ud83d\udec3"], [41, "Imports-\ud83d\udec3"]], "Ivy as a Unified ML Framework \ud83d\udd00": [[40, "Ivy-as-a-Unified-ML-Framework-\ud83d\udd00"]], "Change frameworks by one line of code \u261d": [[40, "Change-frameworks-by-one-line-of-code-\u261d"]], "No need to worry about data types \ud83c\udfa8": [[40, "No-need-to-worry-about-data-types-\ud83c\udfa8"]], "No need to worry about framework differences \ud83d\udcb1": [[40, "No-need-to-worry-about-framework-differences-\ud83d\udcb1"]], "Unifying them all! \ud83c\udf72": [[40, "Unifying-them-all!-\ud83c\udf72"]], "Ivy as a standalone ML framework \ud83c\udf00": [[40, "Ivy-as-a-standalone-ML-framework-\ud83c\udf00"]], "Set Backend Framework": [[40, "Set-Backend-Framework"]], "Define Model": [[40, "Define-Model"], [41, "Define-Model"]], "Create Model": [[40, "Create-Model"]], "Create Optimizer": [[40, "Create-Optimizer"]], "Input and Target": [[40, "Input-and-Target"]], "Loss Function": [[40, "Loss-Function"]], "Training Loop": [[40, "Training-Loop"]], "# Ivy Bert Demo": [[4, "#-Ivy-Bert-Demo"]], "Install the dependecies": [[4, "Install-the-dependecies"]], "Import the modules": [[4, "Import-the-modules"]], "Ivy inference with Sequence Classification": [[4, "Ivy-inference-with-Sequence-Classification"]], "Ivy model inference with tensorflow": [[4, "Ivy-model-inference-with-tensorflow"]], "Ivy model inference with Jax": [[4, "Ivy-model-inference-with-Jax"]], "Ivy model inference with torch": [[4, "Ivy-model-inference-with-torch"]], "Write Ivy code": [[19, "Write-Ivy-code"]], "Contents": [[19, "Contents"]], "Installing Ivy": [[19, "Installing-Ivy"]], "Importing Ivy": [[19, "Importing-Ivy"]], "Ivy AlexNet demo": [[3, "Ivy-AlexNet-demo"]], "Installation": [[3, "Installation"], [9, "Installation"]], "Ivy AlexNet inference in Torch": [[3, "Ivy-AlexNet-inference-in-Torch"]], "TensorFlow inference": [[3, "TensorFlow-inference"]], "JAX inference": [[3, "JAX-inference"]], "Appendix (Ivy code for AlexNet implementation)": [[3, "Appendix-(Ivy-code-for-AlexNet-implementation)"]], "Deepmind PerceiverIO on GPU": [[43, "Deepmind-PerceiverIO-on-GPU"]], "Install Python3.8 and setup the kernel": [[43, "Install-Python3.8-and-setup-the-kernel"]], "Clone the ivy and ivy-models repo": [[43, "Clone-the-ivy-and-ivy-models-repo"]], "Install ivy and ivy_models from the repos": [[43, "Install-ivy-and-ivy_models-from-the-repos"]], "Run the demo\u2026": [[43, "Run-the-demo..."]], "\u2026with torch backend": [[43, "...with-torch-backend"]], "\u2026.with tensorflow backend": [[43, "....with-tensorflow-backend"]], "\u2026with jax backend": [[43, "...with-jax-backend"]], "\u2026with numpy backend": [[43, "...with-numpy-backend"]], "Lazy vs Eager": [[23, "Lazy-vs-Eager"]], "Trace": [[23, "Trace"], [24, "Trace"]], "Compilation of a Basic Function": [[41, "Compilation-of-a-Basic-Function"]], "Import Ivy compiler": [[41, "Import-Ivy-compiler"]], "Function compilation \ud83d\udee0": [[41, "Function-compilation-\ud83d\udee0"]], "Set backend": [[41, "Set-backend"]], "Sample input": [[41, "Sample-input"]], "Define function to compile": [[41, "Define-function-to-compile"]], "Compile the function": [[41, "Compile-the-function"]], "Check results": [[41, "Check-results"], [41, "id1"]], "Compiling simple neural network \ud83e\udde0": [[41, "Compiling-simple-neural-network-\ud83e\udde0"]], "Create model": [[41, "Create-model"]], "Define input": [[41, "Define-input"]], "Compile network": [[41, "Compile-network"]], "Accelerating MMPreTrain models with JAX": [[8, "Accelerating-MMPreTrain-models-with-JAX"]], "Demo: Transpiling DeepMind\u2019s PerceiverIO": [[42, "Demo:-Transpiling-DeepMind's-PerceiverIO"]], "Table of Contents": [[42, "Table-of-Contents"]], "Defining the model": [[42, "Defining-the-model"]], "Model construction": [[42, "Model-construction"]], "Some helper functions": [[42, "Some-helper-functions"]], "Transpiling the model": [[42, "Transpiling-the-model"]], "PyTorch pipeline": [[42, "PyTorch-pipeline"]], "Dataset download": [[42, "Dataset-download"]], "DataLoader": [[42, "DataLoader"]], "Training": [[42, "Training"]], "1.0: Lazy vs Eager": [[33, "1.0:-Lazy-vs-Eager"]], "0.2: Transpile": [[32, "0.2:-Transpile"]], "Examples and Demos": [[2, "examples-and-demos"], [17, "examples-and-demos"]], "Quickstart": [[29, "Quickstart"]], "Get familiar with Ivy": [[29, "Get-familiar-with-Ivy"]], "Functional API": [[29, "Functional-API"]], "Stateful API": [[29, "Stateful-API"]], "Tracing code": [[29, "Tracing-code"]], "Using Ivy ResNet": [[9, "Using-Ivy-ResNet"]], "Prepare the set of labels": [[9, "Prepare-the-set-of-labels"]], "Model Inference ResNet34": [[9, "Model-Inference-ResNet34"]], "Initializing Native Torch ResNet34": [[9, "Initializing-Native-Torch-ResNet34"]], "Initializing Ivy ResNet34 with Pretrained Weights \u2b07\ufe0f": [[9, "Initializing-Ivy-ResNet34-with-Pretrained-Weights-\u2b07\ufe0f"]], "Use the model to classify your images \ud83d\ude80": [[9, "Use-the-model-to-classify-your-images-\ud83d\ude80"], [9, "id1"]], "Model Inference ResNet50": [[9, "Model-Inference-ResNet50"]], "Initializing Native Torch ResNet50": [[9, "Initializing-Native-Torch-ResNet50"]], "Initializing Ivy ResNet50 with Pretrained Weights \u2b07\ufe0f": [[9, "Initializing-Ivy-ResNet50-with-Pretrained-Weights-\u2b07\ufe0f"]], "Tutorials And Examples": [[17, "tutorials-and-examples"]], "Unify code": [[20, "Unify-code"]], "Accelerating PyTorch models with JAX": [[10, "Accelerating-PyTorch-models-with-JAX"]], "Demos": [[0, "demos"]], "Creating a Notebook for Demo": [[0, "creating-a-notebook-for-demo"]], "1.1: Framework Selection": [[34, "1.1:-Framework-Selection"]], "HuggingFace Tensorflow DeiT": [[45, "HuggingFace-Tensorflow-DeiT"]], "Graph can be visualized and displayed as html file on browser": [[45, "Graph-can-be-visualized-and-displayed-as-html-file-on-browser"]], "3.1: Stable Diffusion": [[39, "3.1:-Stable-Diffusion"]], "Developing a convolutional network using Ivy": [[16, "Developing-a-convolutional-network-using-Ivy"]], "Transpile any model": [[26, "Transpile-any-model"]], "Round up": [[26, "Round-up"]], "1.3: Dynamic vs Static": [[36, "1.3:-Dynamic-vs-Static"]], "Dynamic": [[36, "Dynamic"]], "Static": [[36, "Static"]], "ToDo: explain via examples why dynamic mode is set to True by default when transpiling to and from numpy and torch, but set to False by default when transpiling to and from tensorflow and jax.": [[36, "ToDo:-explain-via-examples-why-dynamic-mode-is-set-to-True-by-default-when-transpiling-to-and-from-numpy-and-torch,-but-set-to-False-by-default-when-transpiling-to-and-from-tensorflow-and-jax."]], "Transpiling a Tensorflow model to build on top": [[15, "Transpiling-a-Tensorflow-model-to-build-on-top"]], "3.0: Perceiver": [[38, "3.0:-Perceiver"]], "Trace code": [[21, "Trace-code"]], "Transpiling a PyTorch model to build on top": [[13, "Transpiling-a-PyTorch-model-to-build-on-top"]], "0.0: Unify": [[30, "0.0:-Unify"]], "Transpile code": [[22, "Transpile-code"]], "0.1: Compile": [[31, "0.1:-Compile"]], "How to use decorators": [[24, "How-to-use-decorators"]]}, "indexentries": {"_arraywithactivations (class in ivy.data_classes.array.activations)": [[48, "ivy.data_classes.array.activations._ArrayWithActivations"]], "_abc_impl (ivy.data_classes.array.activations._arraywithactivations attribute)": [[48, "ivy.data_classes.array.activations._ArrayWithActivations._abc_impl"]], "gelu() (ivy.data_classes.array.activations._arraywithactivations method)": [[48, "ivy.data_classes.array.activations._ArrayWithActivations.gelu"]], "hardswish() (ivy.data_classes.array.activations._arraywithactivations method)": [[48, "ivy.data_classes.array.activations._ArrayWithActivations.hardswish"]], "ivy.data_classes.array.activations": [[48, "module-ivy.data_classes.array.activations"]], "leaky_relu() (ivy.data_classes.array.activations._arraywithactivations method)": [[48, "ivy.data_classes.array.activations._ArrayWithActivations.leaky_relu"]], "log_softmax() (ivy.data_classes.array.activations._arraywithactivations method)": [[48, "ivy.data_classes.array.activations._ArrayWithActivations.log_softmax"]], "mish() (ivy.data_classes.array.activations._arraywithactivations method)": [[48, "ivy.data_classes.array.activations._ArrayWithActivations.mish"]], "module": [[48, "module-ivy.data_classes.array.activations"], [49, "module-ivy.data_classes.array.conversions"], [50, "module-ivy.data_classes.array.creation"], [51, "module-ivy.data_classes.array.data_type"], [52, "module-ivy.data_classes.array.device"], [53, "module-ivy.data_classes.array.elementwise"], [54, "module-ivy.data_classes.array.experimental"], [54, "module-ivy.data_classes.array.experimental.activations"], [54, "module-ivy.data_classes.array.experimental.conversions"], [54, "module-ivy.data_classes.array.experimental.creation"], [54, "module-ivy.data_classes.array.experimental.data_type"], [54, "module-ivy.data_classes.array.experimental.device"], [54, "module-ivy.data_classes.array.experimental.elementwise"], [54, "module-ivy.data_classes.array.experimental.general"], [54, "module-ivy.data_classes.array.experimental.gradients"], [54, "module-ivy.data_classes.array.experimental.image"], [54, "module-ivy.data_classes.array.experimental.layers"], [54, "module-ivy.data_classes.array.experimental.linear_algebra"], [54, "module-ivy.data_classes.array.experimental.losses"], [54, "module-ivy.data_classes.array.experimental.manipulation"], [54, "module-ivy.data_classes.array.experimental.norms"], [54, "module-ivy.data_classes.array.experimental.random"], [54, "module-ivy.data_classes.array.experimental.searching"], [54, "module-ivy.data_classes.array.experimental.set"], [54, "module-ivy.data_classes.array.experimental.sorting"], [54, "module-ivy.data_classes.array.experimental.statistical"], [54, "module-ivy.data_classes.array.experimental.utility"], [55, "module-ivy.data_classes.array.general"], [56, "module-ivy.data_classes.array.gradients"], [57, "module-ivy.data_classes.array.image"], [58, "module-ivy.data_classes.array.layers"], [59, "module-ivy.data_classes.array.linear_algebra"], [60, "module-ivy.data_classes.array.losses"], [61, "module-ivy.data_classes.array.manipulation"], [62, "module-ivy.data_classes.array.norms"], [63, "module-ivy.data_classes.array.random"], [64, "module-ivy.data_classes.array.searching"], [65, "module-ivy.data_classes.array.set"], [66, "module-ivy.data_classes.array.sorting"], [67, "module-ivy.data_classes.array.statistical"], [68, "module-ivy.data_classes.array.utility"], [69, "module-ivy.data_classes.array.wrapping"], [70, "module-ivy.data_classes.container.activations"], [71, "module-ivy.data_classes.container.base"], [72, "module-ivy.data_classes.container.conversions"], [73, "module-ivy.data_classes.container.creation"], [74, "module-ivy.data_classes.container.data_type"], [75, "module-ivy.data_classes.container.device"], [76, "module-ivy.data_classes.container.elementwise"], [77, "module-ivy.data_classes.container.experimental"], [77, "module-ivy.data_classes.container.experimental.activations"], [77, "module-ivy.data_classes.container.experimental.conversions"], [77, "module-ivy.data_classes.container.experimental.creation"], [77, "module-ivy.data_classes.container.experimental.data_type"], [77, "module-ivy.data_classes.container.experimental.device"], [77, "module-ivy.data_classes.container.experimental.elementwise"], [77, "module-ivy.data_classes.container.experimental.general"], [77, "module-ivy.data_classes.container.experimental.gradients"], [77, "module-ivy.data_classes.container.experimental.image"], [77, "module-ivy.data_classes.container.experimental.layers"], [77, "module-ivy.data_classes.container.experimental.linear_algebra"], [77, "module-ivy.data_classes.container.experimental.losses"], [77, "module-ivy.data_classes.container.experimental.manipulation"], [77, "module-ivy.data_classes.container.experimental.norms"], [77, "module-ivy.data_classes.container.experimental.random"], [77, "module-ivy.data_classes.container.experimental.searching"], [77, "module-ivy.data_classes.container.experimental.set"], [77, "module-ivy.data_classes.container.experimental.sorting"], [77, "module-ivy.data_classes.container.experimental.statistical"], [77, "module-ivy.data_classes.container.experimental.utility"], [78, "module-ivy.data_classes.container.general"], [79, "module-ivy.data_classes.container.gradients"], [80, "module-ivy.data_classes.container.image"], [81, "module-ivy.data_classes.container.layers"], [82, "module-ivy.data_classes.container.linear_algebra"], [83, "module-ivy.data_classes.container.losses"], [84, "module-ivy.data_classes.container.manipulation"], [85, "module-ivy.data_classes.container.norms"], [86, "module-ivy.data_classes.container.random"], [87, "module-ivy.data_classes.container.searching"], [88, "module-ivy.data_classes.container.set"], [89, "module-ivy.data_classes.container.sorting"], [90, "module-ivy.data_classes.container.statistical"], [91, "module-ivy.data_classes.container.utility"], [92, "module-ivy.data_classes.container.wrapping"], [93, "module-ivy.data_classes.factorized_tensor.base"], [94, "module-ivy.data_classes.factorized_tensor.cp_tensor"], [95, "module-ivy.data_classes.factorized_tensor.parafac2_tensor"], [96, "module-ivy.data_classes.factorized_tensor.tr_tensor"], [97, "module-ivy.data_classes.factorized_tensor.tt_tensor"], [98, "module-ivy.data_classes.factorized_tensor.tucker_tensor"], [99, "module-ivy.data_classes.array.array"], [100, "module-ivy.data_classes.container.container"], [102, "module-ivy.data_classes.nested_array.nested_array"], [103, "module-ivy.data_classes.nested_array.base"], [104, "module-ivy.data_classes.nested_array.elementwise"], [364, "module-ivy.functional.ivy.experimental.activations"], [365, "module-ivy.functional.ivy.experimental.constants"], [366, "module-ivy.functional.ivy.experimental.creation"], [367, "module-ivy.functional.ivy.experimental.data_type"], [368, "module-ivy.functional.ivy.experimental.device"], [369, "module-ivy.functional.ivy.experimental.elementwise"], [370, "module-ivy.functional.ivy.experimental.general"], [371, "module-ivy.functional.ivy.experimental.gradients"], [372, "module-ivy.functional.ivy.experimental.layers"], [373, "module-ivy.functional.ivy.experimental.linear_algebra"], [374, "module-ivy.functional.ivy.experimental.losses"], [375, "module-ivy.functional.ivy.experimental.manipulation"], [376, "module-ivy.functional.ivy.experimental.meta"], [377, "module-ivy.functional.ivy.experimental.nest"], [378, "module-ivy.functional.ivy.experimental.norms"], [379, "module-ivy.functional.ivy.experimental.random"], [380, "module-ivy.functional.ivy.experimental.searching"], [381, "module-ivy.functional.ivy.experimental.set"], [382, "module-ivy.functional.ivy.experimental.sorting"], [383, "module-ivy.functional.ivy.experimental.sparse_array"], [384, "module-ivy.functional.ivy.experimental.statistical"], [385, "module-ivy.functional.ivy.experimental.utility"], [623, "module-ivy.functional.ivy.activations"], [624, "module-ivy.functional.ivy.constants"], [625, "module-ivy.functional.ivy.control_flow_ops"], [626, "module-ivy.functional.ivy.creation"], [627, "module-ivy.functional.ivy.data_type"], [628, "module-ivy.functional.ivy.device"], [629, "module-ivy.functional.ivy.elementwise"], [630, "module-ivy.functional.ivy.experimental"], [631, "module-ivy.functional.ivy.general"], [632, "module-ivy.functional.ivy.gradients"], [633, "module-ivy.functional.ivy.layers"], [634, "module-ivy.functional.ivy.linear_algebra"], [635, "module-ivy.functional.ivy.losses"], [636, "module-ivy.functional.ivy.manipulation"], [637, "module-ivy.functional.ivy.meta"], [638, "module-ivy.functional.ivy.nest"], [639, "module-ivy.functional.ivy.norms"], [640, "module-ivy.functional.ivy.random"], [641, "module-ivy.functional.ivy.searching"], [642, "module-ivy.functional.ivy.set"], [643, "module-ivy.functional.ivy.sorting"], [644, "module-ivy.functional.ivy.statistical"], [645, "module-ivy.functional.ivy.utility"], [768, "module-ivy_tests.test_ivy.helpers.assertions"], [769, "module-ivy_tests.test_ivy.helpers.available_frameworks"], [770, "module-ivy_tests.test_ivy.helpers.function_testing"], [771, "module-ivy_tests.test_ivy.helpers.globals"], [772, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers"], [773, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers"], [774, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers"], [775, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers"], [776, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers"], [777, "module-ivy_tests.test_ivy.helpers.multiprocessing"], [778, "module-ivy_tests.test_ivy.helpers.pipeline_helper"], [779, "module-ivy_tests.test_ivy.helpers.structs"], [780, "module-ivy_tests.test_ivy.helpers.test_parameter_flags"], [781, "module-ivy_tests.test_ivy.helpers.testing_helpers"], [785, "module-ivy.stateful.activations"], [786, "module-ivy.stateful.converters"], [787, "module-ivy.stateful.helpers"], [788, "module-ivy.stateful.initializers"], [789, "module-ivy.stateful.layers"], [790, "module-ivy.stateful.losses"], [791, "module-ivy.stateful.module"], [792, "module-ivy.stateful.norms"], [793, "module-ivy.stateful.optimizers"], [794, "module-ivy.stateful.sequential"], [795, "module-ivy.utils.assertions"], [796, "module-ivy.utils.backend"], [797, "module-ivy.utils.backend.ast_helpers"], [798, "module-ivy.utils.backend.handler"], [799, "module-ivy.utils.backend.sub_backend_handler"], [800, "module-ivy.utils.binaries"], [801, "module-ivy.utils.dynamic_import"], [802, "module-ivy.utils.einsum_parser"], [803, "module-ivy.utils.einsum_path_helpers"], [804, "module-ivy.utils.exceptions"], [805, "module-ivy.utils.inspection"], [806, "module-ivy.utils.logging"], [807, "module-ivy.utils.profiler"], [808, "module-ivy.utils.verbosity"]], "relu() (ivy.data_classes.array.activations._arraywithactivations method)": [[48, "ivy.data_classes.array.activations._ArrayWithActivations.relu"]], "sigmoid() (ivy.data_classes.array.activations._arraywithactivations method)": [[48, "ivy.data_classes.array.activations._ArrayWithActivations.sigmoid"]], "softmax() (ivy.data_classes.array.activations._arraywithactivations method)": [[48, "ivy.data_classes.array.activations._ArrayWithActivations.softmax"]], "softplus() (ivy.data_classes.array.activations._arraywithactivations method)": [[48, "ivy.data_classes.array.activations._ArrayWithActivations.softplus"]], "_array_to_new_backend() (in module ivy.data_classes.array.conversions)": [[49, "ivy.data_classes.array.conversions._array_to_new_backend"]], "_to_ivy() (in module ivy.data_classes.array.conversions)": [[49, "ivy.data_classes.array.conversions._to_ivy"]], "_to_native() (in module ivy.data_classes.array.conversions)": [[49, "ivy.data_classes.array.conversions._to_native"]], "_to_new_backend() (in module ivy.data_classes.array.conversions)": [[49, "ivy.data_classes.array.conversions._to_new_backend"]], "args_to_ivy() (in module ivy.data_classes.array.conversions)": [[49, "ivy.data_classes.array.conversions.args_to_ivy"]], "args_to_native() (in module ivy.data_classes.array.conversions)": [[49, "ivy.data_classes.array.conversions.args_to_native"]], "args_to_new_backend() (in module ivy.data_classes.array.conversions)": [[49, "ivy.data_classes.array.conversions.args_to_new_backend"]], "ivy.data_classes.array.conversions": [[49, "module-ivy.data_classes.array.conversions"]], "to_ivy() (in module ivy.data_classes.array.conversions)": [[49, "ivy.data_classes.array.conversions.to_ivy"]], "to_native() (in module ivy.data_classes.array.conversions)": [[49, "ivy.data_classes.array.conversions.to_native"]], "to_new_backend() (in module ivy.data_classes.array.conversions)": [[49, "ivy.data_classes.array.conversions.to_new_backend"]], "_arraywithcreation (class in ivy.data_classes.array.creation)": [[50, "ivy.data_classes.array.creation._ArrayWithCreation"]], "_abc_impl (ivy.data_classes.array.creation._arraywithcreation attribute)": [[50, "ivy.data_classes.array.creation._ArrayWithCreation._abc_impl"]], "asarray() (ivy.data_classes.array.creation._arraywithcreation method)": [[50, "ivy.data_classes.array.creation._ArrayWithCreation.asarray"]], "copy_array() (ivy.data_classes.array.creation._arraywithcreation method)": [[50, "ivy.data_classes.array.creation._ArrayWithCreation.copy_array"]], "empty_like() (ivy.data_classes.array.creation._arraywithcreation method)": [[50, "ivy.data_classes.array.creation._ArrayWithCreation.empty_like"]], "from_dlpack() (ivy.data_classes.array.creation._arraywithcreation method)": [[50, "ivy.data_classes.array.creation._ArrayWithCreation.from_dlpack"]], "full_like() (ivy.data_classes.array.creation._arraywithcreation method)": [[50, "ivy.data_classes.array.creation._ArrayWithCreation.full_like"]], "ivy.data_classes.array.creation": [[50, "module-ivy.data_classes.array.creation"]], "linspace() (ivy.data_classes.array.creation._arraywithcreation method)": [[50, "ivy.data_classes.array.creation._ArrayWithCreation.linspace"]], "logspace() (ivy.data_classes.array.creation._arraywithcreation method)": [[50, "ivy.data_classes.array.creation._ArrayWithCreation.logspace"]], "meshgrid() (ivy.data_classes.array.creation._arraywithcreation method)": [[50, "ivy.data_classes.array.creation._ArrayWithCreation.meshgrid"]], "native_array() (ivy.data_classes.array.creation._arraywithcreation method)": [[50, "ivy.data_classes.array.creation._ArrayWithCreation.native_array"]], "one_hot() (ivy.data_classes.array.creation._arraywithcreation method)": [[50, "ivy.data_classes.array.creation._ArrayWithCreation.one_hot"]], "ones_like() (ivy.data_classes.array.creation._arraywithcreation method)": [[50, "ivy.data_classes.array.creation._ArrayWithCreation.ones_like"]], "tril() (ivy.data_classes.array.creation._arraywithcreation method)": [[50, "ivy.data_classes.array.creation._ArrayWithCreation.tril"]], "triu() (ivy.data_classes.array.creation._arraywithcreation method)": [[50, "ivy.data_classes.array.creation._ArrayWithCreation.triu"]], "zeros_like() (ivy.data_classes.array.creation._arraywithcreation method)": [[50, "ivy.data_classes.array.creation._ArrayWithCreation.zeros_like"]], "_arraywithdatatypes (class in ivy.data_classes.array.data_type)": [[51, "ivy.data_classes.array.data_type._ArrayWithDataTypes"]], "_abc_impl (ivy.data_classes.array.data_type._arraywithdatatypes attribute)": [[51, "ivy.data_classes.array.data_type._ArrayWithDataTypes._abc_impl"]], "astype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[51, "ivy.data_classes.array.data_type._ArrayWithDataTypes.astype"]], "broadcast_arrays() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[51, "ivy.data_classes.array.data_type._ArrayWithDataTypes.broadcast_arrays"]], "broadcast_to() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[51, "ivy.data_classes.array.data_type._ArrayWithDataTypes.broadcast_to"]], "can_cast() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[51, "ivy.data_classes.array.data_type._ArrayWithDataTypes.can_cast"]], "dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[51, "ivy.data_classes.array.data_type._ArrayWithDataTypes.dtype"]], "finfo() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[51, "ivy.data_classes.array.data_type._ArrayWithDataTypes.finfo"]], "iinfo() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[51, "ivy.data_classes.array.data_type._ArrayWithDataTypes.iinfo"]], "is_bool_dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[51, "ivy.data_classes.array.data_type._ArrayWithDataTypes.is_bool_dtype"]], "is_float_dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[51, "ivy.data_classes.array.data_type._ArrayWithDataTypes.is_float_dtype"]], "is_int_dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[51, "ivy.data_classes.array.data_type._ArrayWithDataTypes.is_int_dtype"]], "is_uint_dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[51, "ivy.data_classes.array.data_type._ArrayWithDataTypes.is_uint_dtype"]], "ivy.data_classes.array.data_type": [[51, "module-ivy.data_classes.array.data_type"]], "result_type() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[51, "ivy.data_classes.array.data_type._ArrayWithDataTypes.result_type"]], "_arraywithdevice (class in ivy.data_classes.array.device)": [[52, "ivy.data_classes.array.device._ArrayWithDevice"]], "_abc_impl (ivy.data_classes.array.device._arraywithdevice attribute)": [[52, "ivy.data_classes.array.device._ArrayWithDevice._abc_impl"]], "dev() (ivy.data_classes.array.device._arraywithdevice method)": [[52, "ivy.data_classes.array.device._ArrayWithDevice.dev"]], "ivy.data_classes.array.device": [[52, "module-ivy.data_classes.array.device"]], "to_device() (ivy.data_classes.array.device._arraywithdevice method)": [[52, "ivy.data_classes.array.device._ArrayWithDevice.to_device"]], "_arraywithelementwise (class in ivy.data_classes.array.elementwise)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise"]], "_abc_impl (ivy.data_classes.array.elementwise._arraywithelementwise attribute)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise._abc_impl"]], "abs() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.abs"]], "acos() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.acos"]], "acosh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.acosh"]], "add() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.add"]], "angle() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.angle"]], "asin() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.asin"]], "asinh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.asinh"]], "atan() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.atan"]], "atan2() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.atan2"]], "atanh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.atanh"]], "bitwise_and() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_and"]], "bitwise_invert() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_invert"]], "bitwise_left_shift() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_left_shift"]], "bitwise_or() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_or"]], "bitwise_right_shift() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_right_shift"]], "bitwise_xor() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_xor"]], "ceil() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.ceil"]], "cos() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.cos"]], "cosh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.cosh"]], "deg2rad() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.deg2rad"]], "divide() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.divide"]], "equal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.equal"]], "erf() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.erf"]], "exp() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.exp"]], "exp2() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.exp2"]], "expm1() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.expm1"]], "floor() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.floor"]], "floor_divide() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.floor_divide"]], "fmin() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.fmin"]], "gcd() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.gcd"]], "greater() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.greater"]], "greater_equal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.greater_equal"]], "isfinite() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.isfinite"]], "isinf() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.isinf"]], "isnan() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.isnan"]], "isreal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.isreal"]], "ivy.data_classes.array.elementwise": [[53, "module-ivy.data_classes.array.elementwise"]], "lcm() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.lcm"]], "less() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.less"]], "less_equal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.less_equal"]], "log() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.log"]], "log10() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.log10"]], "log1p() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.log1p"]], "log2() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.log2"]], "logaddexp() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logaddexp"]], "logaddexp2() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logaddexp2"]], "logical_and() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logical_and"]], "logical_not() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logical_not"]], "logical_or() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logical_or"]], "logical_xor() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logical_xor"]], "maximum() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.maximum"]], "minimum() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.minimum"]], "multiply() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.multiply"]], "nan_to_num() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.nan_to_num"]], "negative() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.negative"]], "not_equal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.not_equal"]], "positive() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.positive"]], "pow() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.pow"]], "rad2deg() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.rad2deg"]], "real() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.real"]], "reciprocal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.reciprocal"]], "remainder() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.remainder"]], "round() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.round"]], "sign() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.sign"]], "sin() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.sin"]], "sinh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.sinh"]], "sqrt() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.sqrt"]], "square() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.square"]], "subtract() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.subtract"]], "tan() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.tan"]], "tanh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.tanh"]], "trapz() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.trapz"]], "trunc() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.trunc"]], "trunc_divide() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[53, "ivy.data_classes.array.elementwise._ArrayWithElementwise.trunc_divide"]], "_arraywithactivationsexperimental (class in ivy.data_classes.array.experimental.activations)": [[54, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental"]], "_arraywithconversionsexperimental (class in ivy.data_classes.array.experimental.conversions)": [[54, "ivy.data_classes.array.experimental.conversions._ArrayWithConversionsExperimental"]], "_arraywithcreationexperimental (class in ivy.data_classes.array.experimental.creation)": [[54, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental"]], "_arraywithdata_typeexperimental (class in ivy.data_classes.array.experimental.data_type)": [[54, "ivy.data_classes.array.experimental.data_type._ArrayWithData_typeExperimental"]], "_arraywithdeviceexperimental (class in ivy.data_classes.array.experimental.device)": [[54, "ivy.data_classes.array.experimental.device._ArrayWithDeviceExperimental"]], "_arraywithelementwiseexperimental (class in ivy.data_classes.array.experimental.elementwise)": [[54, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental"]], "_arraywithgeneralexperimental (class in ivy.data_classes.array.experimental.general)": [[54, "ivy.data_classes.array.experimental.general._ArrayWithGeneralExperimental"]], "_arraywithgradientsexperimental (class in ivy.data_classes.array.experimental.gradients)": [[54, "ivy.data_classes.array.experimental.gradients._ArrayWithGradientsExperimental"]], "_arraywithimageexperimental (class in ivy.data_classes.array.experimental.image)": [[54, "ivy.data_classes.array.experimental.image._ArrayWithImageExperimental"]], "_arraywithlayersexperimental (class in ivy.data_classes.array.experimental.layers)": [[54, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental"]], "_arraywithlinearalgebraexperimental (class in ivy.data_classes.array.experimental.linear_algebra)": [[54, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental"]], "_arraywithlossesexperimental (class in ivy.data_classes.array.experimental.losses)": [[54, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental"]], "_arraywithmanipulationexperimental (class in ivy.data_classes.array.experimental.manipulation)": [[54, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental"]], "_arraywithnormsexperimental (class in ivy.data_classes.array.experimental.norms)": [[54, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental"]], "_arraywithrandomexperimental (class in ivy.data_classes.array.experimental.random)": [[54, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental"]], "_arraywithsearchingexperimental (class in ivy.data_classes.array.experimental.searching)": [[54, "ivy.data_classes.array.experimental.searching._ArrayWithSearchingExperimental"]], "_arraywithsetexperimental (class in ivy.data_classes.array.experimental.set)": [[54, "ivy.data_classes.array.experimental.set._ArrayWithSetExperimental"]], "_arraywithsortingexperimental (class in ivy.data_classes.array.experimental.sorting)": [[54, "ivy.data_classes.array.experimental.sorting._ArrayWithSortingExperimental"]], "_arraywithstatisticalexperimental (class in ivy.data_classes.array.experimental.statistical)": [[54, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental"]], "_arraywithutilityexperimental (class in ivy.data_classes.array.experimental.utility)": [[54, "ivy.data_classes.array.experimental.utility._ArrayWithUtilityExperimental"]], "_abc_impl (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental attribute)": [[54, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.conversions._arraywithconversionsexperimental attribute)": [[54, "ivy.data_classes.array.experimental.conversions._ArrayWithConversionsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental attribute)": [[54, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.data_type._arraywithdata_typeexperimental attribute)": [[54, "ivy.data_classes.array.experimental.data_type._ArrayWithData_typeExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.device._arraywithdeviceexperimental attribute)": [[54, "ivy.data_classes.array.experimental.device._ArrayWithDeviceExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental attribute)": [[54, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.general._arraywithgeneralexperimental attribute)": [[54, "ivy.data_classes.array.experimental.general._ArrayWithGeneralExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.gradients._arraywithgradientsexperimental attribute)": [[54, "ivy.data_classes.array.experimental.gradients._ArrayWithGradientsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.image._arraywithimageexperimental attribute)": [[54, "ivy.data_classes.array.experimental.image._ArrayWithImageExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental attribute)": [[54, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental attribute)": [[54, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental attribute)": [[54, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental attribute)": [[54, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental attribute)": [[54, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.random._arraywithrandomexperimental attribute)": [[54, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.searching._arraywithsearchingexperimental attribute)": [[54, "ivy.data_classes.array.experimental.searching._ArrayWithSearchingExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.set._arraywithsetexperimental attribute)": [[54, "ivy.data_classes.array.experimental.set._ArrayWithSetExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.sorting._arraywithsortingexperimental attribute)": [[54, "ivy.data_classes.array.experimental.sorting._ArrayWithSortingExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental attribute)": [[54, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.utility._arraywithutilityexperimental attribute)": [[54, "ivy.data_classes.array.experimental.utility._ArrayWithUtilityExperimental._abc_impl"]], "adaptive_avg_pool1d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[54, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.adaptive_avg_pool1d"]], "adaptive_avg_pool2d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[54, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.adaptive_avg_pool2d"]], "adaptive_max_pool2d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[54, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.adaptive_max_pool2d"]], "adaptive_max_pool3d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[54, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.adaptive_max_pool3d"]], "adjoint() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[54, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.adjoint"]], "allclose() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[54, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.allclose"]], "amax() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[54, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.amax"]], "amin() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[54, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.amin"]], "as_strided() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[54, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.as_strided"]], "associative_scan() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[54, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.associative_scan"]], "atleast_1d() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[54, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.atleast_1d"]], "atleast_2d() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[54, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.atleast_2d"]], "atleast_3d() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[54, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.atleast_3d"]], "avg_pool1d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[54, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.avg_pool1d"]], "avg_pool2d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[54, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.avg_pool2d"]], "avg_pool3d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[54, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.avg_pool3d"]], "batch_norm() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[54, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.batch_norm"]], "batched_outer() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[54, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.batched_outer"]], "bernoulli() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[54, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.bernoulli"]], "beta() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[54, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.beta"]], "binarizer() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[54, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.binarizer"]], "bincount() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[54, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.bincount"]], "blackman_window() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental method)": [[54, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.blackman_window"]], "celu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[54, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.celu"]], "column_stack() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[54, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.column_stack"]], "concat_from_sequence() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[54, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.concat_from_sequence"]], "cond() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[54, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.cond"]], "conj() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[54, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.conj"]], "copysign() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[54, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.copysign"]], "corrcoef() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[54, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.corrcoef"]], "count_nonzero() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[54, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.count_nonzero"]], "cov() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[54, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.cov"]], "cummax() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[54, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.cummax"]], "cummin() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[54, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.cummin"]], "dct() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[54, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.dct"]], "dft() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[54, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.dft"]], "diagflat() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[54, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.diagflat"]], "diff() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[54, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.diff"]], "digamma() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[54, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.digamma"]], "dirichlet() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[54, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.dirichlet"]], "dot() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[54, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.dot"]], "dsplit() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[54, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.dsplit"]], "dstack() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[54, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.dstack"]], "eig() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[54, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.eig"]], "eigh_tridiagonal() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[54, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.eigh_tridiagonal"]], "eigvals() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[54, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.eigvals"]], "elu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[54, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.elu"]], "embedding() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[54, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.embedding"]], "erfc() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[54, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.erfc"]], "erfinv() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[54, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.erfinv"]], "expand() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[54, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.expand"]], "eye_like() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental method)": [[54, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.eye_like"]], "fft() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[54, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.fft"]], "fft2() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[54, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.fft2"]], "fill_diagonal() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[54, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.fill_diagonal"]], "fix() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[54, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.fix"]], "flatten() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[54, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.flatten"]], "fliplr() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[54, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.fliplr"]], "flipud() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[54, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.flipud"]], "float_power() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[54, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.float_power"]], "fmax() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[54, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.fmax"]], "fmod() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[54, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.fmod"]], "fold() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[54, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.fold"]], "frexp() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[54, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.frexp"]], "gamma() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[54, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.gamma"]], "general_inner_product() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[54, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.general_inner_product"]], "gradient() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[54, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.gradient"]], "group_norm() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[54, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.group_norm"]], "hardshrink() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[54, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.hardshrink"]], "hardsilu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[54, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.hardsilu"]], "hardtanh() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[54, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.hardtanh"]], "heaviside() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[54, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.heaviside"]], "higher_order_moment() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[54, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.higher_order_moment"]], "hinge_embedding_loss() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[54, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.hinge_embedding_loss"]], "histogram() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[54, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.histogram"]], "hsplit() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[54, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.hsplit"]], "hstack() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[54, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.hstack"]], "huber_loss() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[54, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.huber_loss"]], "hypot() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[54, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.hypot"]], "i0() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[54, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.i0"]], "idct() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[54, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.idct"]], "ifft() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[54, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.ifft"]], "ifftn() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[54, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.ifftn"]], "igamma() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[54, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.igamma"]], "initialize_tucker() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[54, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.initialize_tucker"]], "instance_norm() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[54, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.instance_norm"]], "interpolate() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[54, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.interpolate"]], "isclose() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[54, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.isclose"]], "ivy.data_classes.array.experimental": [[54, "module-ivy.data_classes.array.experimental"]], "ivy.data_classes.array.experimental.activations": [[54, "module-ivy.data_classes.array.experimental.activations"]], "ivy.data_classes.array.experimental.conversions": [[54, "module-ivy.data_classes.array.experimental.conversions"]], "ivy.data_classes.array.experimental.creation": [[54, "module-ivy.data_classes.array.experimental.creation"]], "ivy.data_classes.array.experimental.data_type": [[54, "module-ivy.data_classes.array.experimental.data_type"]], "ivy.data_classes.array.experimental.device": [[54, "module-ivy.data_classes.array.experimental.device"]], "ivy.data_classes.array.experimental.elementwise": [[54, "module-ivy.data_classes.array.experimental.elementwise"]], "ivy.data_classes.array.experimental.general": [[54, "module-ivy.data_classes.array.experimental.general"]], "ivy.data_classes.array.experimental.gradients": [[54, "module-ivy.data_classes.array.experimental.gradients"]], "ivy.data_classes.array.experimental.image": [[54, "module-ivy.data_classes.array.experimental.image"]], "ivy.data_classes.array.experimental.layers": [[54, "module-ivy.data_classes.array.experimental.layers"]], "ivy.data_classes.array.experimental.linear_algebra": [[54, "module-ivy.data_classes.array.experimental.linear_algebra"]], "ivy.data_classes.array.experimental.losses": [[54, "module-ivy.data_classes.array.experimental.losses"]], "ivy.data_classes.array.experimental.manipulation": [[54, "module-ivy.data_classes.array.experimental.manipulation"]], "ivy.data_classes.array.experimental.norms": [[54, "module-ivy.data_classes.array.experimental.norms"]], "ivy.data_classes.array.experimental.random": [[54, "module-ivy.data_classes.array.experimental.random"]], "ivy.data_classes.array.experimental.searching": [[54, "module-ivy.data_classes.array.experimental.searching"]], "ivy.data_classes.array.experimental.set": [[54, "module-ivy.data_classes.array.experimental.set"]], "ivy.data_classes.array.experimental.sorting": [[54, "module-ivy.data_classes.array.experimental.sorting"]], "ivy.data_classes.array.experimental.statistical": [[54, "module-ivy.data_classes.array.experimental.statistical"]], "ivy.data_classes.array.experimental.utility": [[54, "module-ivy.data_classes.array.experimental.utility"]], "kl_div() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[54, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.kl_div"]], "kron() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[54, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.kron"]], "l1_loss() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[54, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.l1_loss"]], "l1_normalize() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[54, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.l1_normalize"]], "l2_normalize() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[54, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.l2_normalize"]], "ldexp() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[54, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.ldexp"]], "lerp() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[54, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.lerp"]], "lexsort() (ivy.data_classes.array.experimental.sorting._arraywithsortingexperimental method)": [[54, "ivy.data_classes.array.experimental.sorting._ArrayWithSortingExperimental.lexsort"]], "lgamma() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[54, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.lgamma"]], "log_poisson_loss() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[54, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.log_poisson_loss"]], "logit() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[54, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.logit"]], "logsigmoid() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[54, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.logsigmoid"]], "lp_normalize() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[54, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.lp_normalize"]], "make_svd_non_negative() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[54, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.make_svd_non_negative"]], "matricize() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[54, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.matricize"]], "matrix_exp() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[54, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.matrix_exp"]], "max_pool1d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[54, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.max_pool1d"]], "max_pool2d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[54, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.max_pool2d"]], "max_pool3d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[54, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.max_pool3d"]], "max_unpool1d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[54, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.max_unpool1d"]], "median() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[54, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.median"]], "mel_weight_matrix() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental static method)": [[54, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.mel_weight_matrix"]], "mode_dot() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[54, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.mode_dot"]], "modf() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[54, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.modf"]], "moveaxis() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[54, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.moveaxis"]], "multi_dot() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[54, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.multi_dot"]], "multi_mode_dot() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[54, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.multi_mode_dot"]], "nanmean() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[54, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.nanmean"]], "nanmedian() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[54, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.nanmedian"]], "nanmin() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[54, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.nanmin"]], "nanprod() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[54, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.nanprod"]], "nansum() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[54, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.nansum"]], "nextafter() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[54, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.nextafter"]], "optional_get_element() (ivy.data_classes.array.experimental.utility._arraywithutilityexperimental method)": [[54, "ivy.data_classes.array.experimental.utility._ArrayWithUtilityExperimental.optional_get_element"]], "pad() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[54, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.pad"]], "partial_fold() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[54, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.partial_fold"]], "partial_tensor_to_vec() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[54, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.partial_tensor_to_vec"]], "partial_tucker() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[54, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.partial_tucker"]], "partial_unfold() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[54, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.partial_unfold"]], "partial_vec_to_tensor() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[54, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.partial_vec_to_tensor"]], "poisson() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[54, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.poisson"]], "poisson_nll_loss() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[54, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.poisson_nll_loss"]], "polyval() (in module ivy.data_classes.array.experimental.creation)": [[54, "ivy.data_classes.array.experimental.creation.polyval"]], "prelu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[54, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.prelu"]], "put_along_axis() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[54, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.put_along_axis"]], "quantile() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[54, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.quantile"]], "reduce() (ivy.data_classes.array.experimental.general._arraywithgeneralexperimental method)": [[54, "ivy.data_classes.array.experimental.general._ArrayWithGeneralExperimental.reduce"]], "reduce_window() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[54, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.reduce_window"]], "relu6() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[54, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.relu6"]], "rfft() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[54, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.rfft"]], "rfftn() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[54, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.rfftn"]], "rot90() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[54, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.rot90"]], "scaled_tanh() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[54, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.scaled_tanh"]], "selu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[54, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.selu"]], "signbit() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[54, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.signbit"]], "silu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[54, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.silu"]], "sinc() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[54, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.sinc"]], "sliding_window() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[54, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.sliding_window"]], "smooth_l1_loss() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[54, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.smooth_l1_loss"]], "soft_margin_loss() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[54, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.soft_margin_loss"]], "soft_thresholding() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[54, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.soft_thresholding"]], "softshrink() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[54, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.softshrink"]], "sparsify_tensor() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[54, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.sparsify_tensor"]], "stft() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[54, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.stft"]], "svd_flip() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[54, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.svd_flip"]], "take() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[54, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.take"]], "take_along_axis() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[54, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.take_along_axis"]], "tanhshrink() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[54, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.tanhshrink"]], "tensor_train() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[54, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.tensor_train"]], "threshold() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[54, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.threshold"]], "thresholded_relu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[54, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.thresholded_relu"]], "top_k() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[54, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.top_k"]], "trilu() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental method)": [[54, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.trilu"]], "trim_zeros() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[54, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.trim_zeros"]], "truncated_svd() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[54, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.truncated_svd"]], "tt_matrix_to_tensor() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[54, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.tt_matrix_to_tensor"]], "tucker() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[54, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.tucker"]], "unflatten() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[54, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.unflatten"]], "unfold() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[54, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.unfold"]], "unique_consecutive() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[54, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.unique_consecutive"]], "unravel_index() (ivy.data_classes.array.experimental.searching._arraywithsearchingexperimental method)": [[54, "ivy.data_classes.array.experimental.searching._ArrayWithSearchingExperimental.unravel_index"]], "unsorted_segment_mean() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental method)": [[54, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.unsorted_segment_mean"]], "unsorted_segment_min() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental method)": [[54, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.unsorted_segment_min"]], "unsorted_segment_sum() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental method)": [[54, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.unsorted_segment_sum"]], "vsplit() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[54, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.vsplit"]], "vstack() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[54, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.vstack"]], "xlogy() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[54, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.xlogy"]], "zeta() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[54, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.zeta"]], "_arraywithgeneral (class in ivy.data_classes.array.general)": [[55, "ivy.data_classes.array.general._ArrayWithGeneral"]], "_abc_impl (ivy.data_classes.array.general._arraywithgeneral attribute)": [[55, "ivy.data_classes.array.general._ArrayWithGeneral._abc_impl"]], "all_equal() (ivy.data_classes.array.general._arraywithgeneral method)": [[55, "ivy.data_classes.array.general._ArrayWithGeneral.all_equal"]], "array_equal() (ivy.data_classes.array.general._arraywithgeneral method)": [[55, "ivy.data_classes.array.general._ArrayWithGeneral.array_equal"]], "assert_supports_inplace() (ivy.data_classes.array.general._arraywithgeneral method)": [[55, "ivy.data_classes.array.general._ArrayWithGeneral.assert_supports_inplace"]], "clip_matrix_norm() (ivy.data_classes.array.general._arraywithgeneral method)": [[55, "ivy.data_classes.array.general._ArrayWithGeneral.clip_matrix_norm"]], "clip_vector_norm() (ivy.data_classes.array.general._arraywithgeneral method)": [[55, "ivy.data_classes.array.general._ArrayWithGeneral.clip_vector_norm"]], "default() (ivy.data_classes.array.general._arraywithgeneral method)": [[55, "ivy.data_classes.array.general._ArrayWithGeneral.default"]], "einops_rearrange() (ivy.data_classes.array.general._arraywithgeneral method)": [[55, "ivy.data_classes.array.general._ArrayWithGeneral.einops_rearrange"]], "einops_reduce() (ivy.data_classes.array.general._arraywithgeneral method)": [[55, "ivy.data_classes.array.general._ArrayWithGeneral.einops_reduce"]], "einops_repeat() (ivy.data_classes.array.general._arraywithgeneral method)": [[55, "ivy.data_classes.array.general._ArrayWithGeneral.einops_repeat"]], "exists() (ivy.data_classes.array.general._arraywithgeneral method)": [[55, "ivy.data_classes.array.general._ArrayWithGeneral.exists"]], "fourier_encode() (ivy.data_classes.array.general._arraywithgeneral method)": [[55, "ivy.data_classes.array.general._ArrayWithGeneral.fourier_encode"]], "gather() (ivy.data_classes.array.general._arraywithgeneral method)": [[55, "ivy.data_classes.array.general._ArrayWithGeneral.gather"]], "gather_nd() (ivy.data_classes.array.general._arraywithgeneral method)": [[55, "ivy.data_classes.array.general._ArrayWithGeneral.gather_nd"]], "get_num_dims() (ivy.data_classes.array.general._arraywithgeneral method)": [[55, "ivy.data_classes.array.general._ArrayWithGeneral.get_num_dims"]], "has_nans() (ivy.data_classes.array.general._arraywithgeneral method)": [[55, "ivy.data_classes.array.general._ArrayWithGeneral.has_nans"]], "inplace_decrement() (ivy.data_classes.array.general._arraywithgeneral method)": [[55, "ivy.data_classes.array.general._ArrayWithGeneral.inplace_decrement"]], "inplace_increment() (ivy.data_classes.array.general._arraywithgeneral method)": [[55, "ivy.data_classes.array.general._ArrayWithGeneral.inplace_increment"]], "inplace_update() (ivy.data_classes.array.general._arraywithgeneral method)": [[55, "ivy.data_classes.array.general._ArrayWithGeneral.inplace_update"]], "is_array() (ivy.data_classes.array.general._arraywithgeneral method)": [[55, "ivy.data_classes.array.general._ArrayWithGeneral.is_array"]], "is_ivy_array() (ivy.data_classes.array.general._arraywithgeneral method)": [[55, "ivy.data_classes.array.general._ArrayWithGeneral.is_ivy_array"]], "is_ivy_container() (ivy.data_classes.array.general._arraywithgeneral method)": [[55, "ivy.data_classes.array.general._ArrayWithGeneral.is_ivy_container"]], "is_native_array() (ivy.data_classes.array.general._arraywithgeneral method)": [[55, "ivy.data_classes.array.general._ArrayWithGeneral.is_native_array"]], "isin() (ivy.data_classes.array.general._arraywithgeneral method)": [[55, "ivy.data_classes.array.general._ArrayWithGeneral.isin"]], "ivy.data_classes.array.general": [[55, "module-ivy.data_classes.array.general"]], "scatter_flat() (ivy.data_classes.array.general._arraywithgeneral method)": [[55, "ivy.data_classes.array.general._ArrayWithGeneral.scatter_flat"]], "scatter_nd() (ivy.data_classes.array.general._arraywithgeneral method)": [[55, "ivy.data_classes.array.general._ArrayWithGeneral.scatter_nd"]], "stable_divide() (ivy.data_classes.array.general._arraywithgeneral method)": [[55, "ivy.data_classes.array.general._ArrayWithGeneral.stable_divide"]], "stable_pow() (ivy.data_classes.array.general._arraywithgeneral method)": [[55, "ivy.data_classes.array.general._ArrayWithGeneral.stable_pow"]], "supports_inplace_updates() (ivy.data_classes.array.general._arraywithgeneral method)": [[55, "ivy.data_classes.array.general._ArrayWithGeneral.supports_inplace_updates"]], "to_file() (ivy.data_classes.array.general._arraywithgeneral method)": [[55, "ivy.data_classes.array.general._ArrayWithGeneral.to_file"]], "to_list() (ivy.data_classes.array.general._arraywithgeneral method)": [[55, "ivy.data_classes.array.general._ArrayWithGeneral.to_list"]], "to_numpy() (ivy.data_classes.array.general._arraywithgeneral method)": [[55, "ivy.data_classes.array.general._ArrayWithGeneral.to_numpy"]], "to_scalar() (ivy.data_classes.array.general._arraywithgeneral method)": [[55, "ivy.data_classes.array.general._ArrayWithGeneral.to_scalar"]], "value_is_nan() (ivy.data_classes.array.general._arraywithgeneral method)": [[55, "ivy.data_classes.array.general._ArrayWithGeneral.value_is_nan"]], "_arraywithgradients (class in ivy.data_classes.array.gradients)": [[56, "ivy.data_classes.array.gradients._ArrayWithGradients"]], "_abc_impl (ivy.data_classes.array.gradients._arraywithgradients attribute)": [[56, "ivy.data_classes.array.gradients._ArrayWithGradients._abc_impl"]], "adam_step() (ivy.data_classes.array.gradients._arraywithgradients method)": [[56, "ivy.data_classes.array.gradients._ArrayWithGradients.adam_step"]], "adam_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[56, "ivy.data_classes.array.gradients._ArrayWithGradients.adam_update"]], "gradient_descent_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[56, "ivy.data_classes.array.gradients._ArrayWithGradients.gradient_descent_update"]], "ivy.data_classes.array.gradients": [[56, "module-ivy.data_classes.array.gradients"]], "lamb_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[56, "ivy.data_classes.array.gradients._ArrayWithGradients.lamb_update"]], "lars_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[56, "ivy.data_classes.array.gradients._ArrayWithGradients.lars_update"]], "optimizer_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[56, "ivy.data_classes.array.gradients._ArrayWithGradients.optimizer_update"]], "stop_gradient() (ivy.data_classes.array.gradients._arraywithgradients method)": [[56, "ivy.data_classes.array.gradients._ArrayWithGradients.stop_gradient"]], "_arraywithimage (class in ivy.data_classes.array.image)": [[57, "ivy.data_classes.array.image._ArrayWithImage"]], "_abc_impl (ivy.data_classes.array.image._arraywithimage attribute)": [[57, "ivy.data_classes.array.image._ArrayWithImage._abc_impl"]], "ivy.data_classes.array.image": [[57, "module-ivy.data_classes.array.image"]], "_arraywithlayers (class in ivy.data_classes.array.layers)": [[58, "ivy.data_classes.array.layers._ArrayWithLayers"]], "_abc_impl (ivy.data_classes.array.layers._arraywithlayers attribute)": [[58, "ivy.data_classes.array.layers._ArrayWithLayers._abc_impl"]], "conv1d() (ivy.data_classes.array.layers._arraywithlayers method)": [[58, "ivy.data_classes.array.layers._ArrayWithLayers.conv1d"]], "conv1d_transpose() (ivy.data_classes.array.layers._arraywithlayers method)": [[58, "ivy.data_classes.array.layers._ArrayWithLayers.conv1d_transpose"]], "conv2d() (ivy.data_classes.array.layers._arraywithlayers method)": [[58, "ivy.data_classes.array.layers._ArrayWithLayers.conv2d"]], "conv2d_transpose() (ivy.data_classes.array.layers._arraywithlayers method)": [[58, "ivy.data_classes.array.layers._ArrayWithLayers.conv2d_transpose"]], "conv3d() (ivy.data_classes.array.layers._arraywithlayers method)": [[58, "ivy.data_classes.array.layers._ArrayWithLayers.conv3d"]], "conv3d_transpose() (ivy.data_classes.array.layers._arraywithlayers method)": [[58, "ivy.data_classes.array.layers._ArrayWithLayers.conv3d_transpose"]], "depthwise_conv2d() (ivy.data_classes.array.layers._arraywithlayers method)": [[58, "ivy.data_classes.array.layers._ArrayWithLayers.depthwise_conv2d"]], "dropout() (ivy.data_classes.array.layers._arraywithlayers method)": [[58, "ivy.data_classes.array.layers._ArrayWithLayers.dropout"]], "dropout1d() (ivy.data_classes.array.layers._arraywithlayers method)": [[58, "ivy.data_classes.array.layers._ArrayWithLayers.dropout1d"]], "dropout2d() (ivy.data_classes.array.layers._arraywithlayers method)": [[58, "ivy.data_classes.array.layers._ArrayWithLayers.dropout2d"]], "dropout3d() (ivy.data_classes.array.layers._arraywithlayers method)": [[58, "ivy.data_classes.array.layers._ArrayWithLayers.dropout3d"]], "ivy.data_classes.array.layers": [[58, "module-ivy.data_classes.array.layers"]], "linear() (ivy.data_classes.array.layers._arraywithlayers method)": [[58, "ivy.data_classes.array.layers._ArrayWithLayers.linear"]], "lstm_update() (ivy.data_classes.array.layers._arraywithlayers method)": [[58, "ivy.data_classes.array.layers._ArrayWithLayers.lstm_update"]], "multi_head_attention() (ivy.data_classes.array.layers._arraywithlayers method)": [[58, "ivy.data_classes.array.layers._ArrayWithLayers.multi_head_attention"]], "scaled_dot_product_attention() (ivy.data_classes.array.layers._arraywithlayers method)": [[58, "ivy.data_classes.array.layers._ArrayWithLayers.scaled_dot_product_attention"]], "_arraywithlinearalgebra (class in ivy.data_classes.array.linear_algebra)": [[59, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra"]], "_abc_impl (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra attribute)": [[59, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra._abc_impl"]], "cholesky() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[59, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.cholesky"]], "cross() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[59, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.cross"]], "det() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[59, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.det"]], "diag() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[59, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.diag"]], "diagonal() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[59, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.diagonal"]], "eig() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[59, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.eig"]], "eigh() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[59, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.eigh"]], "eigvalsh() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[59, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.eigvalsh"]], "inner() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[59, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.inner"]], "inv() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[59, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.inv"]], "ivy.data_classes.array.linear_algebra": [[59, "module-ivy.data_classes.array.linear_algebra"]], "matmul() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[59, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matmul"]], "matrix_norm() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[59, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matrix_norm"]], "matrix_power() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[59, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matrix_power"]], "matrix_rank() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[59, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matrix_rank"]], "matrix_transpose() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[59, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matrix_transpose"]], "outer() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[59, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.outer"]], "pinv() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[59, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.pinv"]], "qr() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[59, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.qr"]], "slogdet() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[59, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.slogdet"]], "solve() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[59, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.solve"]], "svd() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[59, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.svd"]], "svdvals() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[59, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.svdvals"]], "tensordot() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[59, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.tensordot"]], "tensorsolve() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[59, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.tensorsolve"]], "trace() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[59, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.trace"]], "vander() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[59, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.vander"]], "vecdot() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[59, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.vecdot"]], "vector_norm() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[59, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.vector_norm"]], "vector_to_skew_symmetric_matrix() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[59, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.vector_to_skew_symmetric_matrix"]], "_arraywithlosses (class in ivy.data_classes.array.losses)": [[60, "ivy.data_classes.array.losses._ArrayWithLosses"]], "_abc_impl (ivy.data_classes.array.losses._arraywithlosses attribute)": [[60, "ivy.data_classes.array.losses._ArrayWithLosses._abc_impl"]], "binary_cross_entropy() (ivy.data_classes.array.losses._arraywithlosses method)": [[60, "ivy.data_classes.array.losses._ArrayWithLosses.binary_cross_entropy"]], "cross_entropy() (ivy.data_classes.array.losses._arraywithlosses method)": [[60, "ivy.data_classes.array.losses._ArrayWithLosses.cross_entropy"]], "ivy.data_classes.array.losses": [[60, "module-ivy.data_classes.array.losses"]], "sparse_cross_entropy() (ivy.data_classes.array.losses._arraywithlosses method)": [[60, "ivy.data_classes.array.losses._ArrayWithLosses.sparse_cross_entropy"]], "_arraywithmanipulation (class in ivy.data_classes.array.manipulation)": [[61, "ivy.data_classes.array.manipulation._ArrayWithManipulation"]], "_abc_impl (ivy.data_classes.array.manipulation._arraywithmanipulation attribute)": [[61, "ivy.data_classes.array.manipulation._ArrayWithManipulation._abc_impl"]], "clip() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[61, "ivy.data_classes.array.manipulation._ArrayWithManipulation.clip"]], "concat() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[61, "ivy.data_classes.array.manipulation._ArrayWithManipulation.concat"]], "constant_pad() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[61, "ivy.data_classes.array.manipulation._ArrayWithManipulation.constant_pad"]], "expand_dims() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[61, "ivy.data_classes.array.manipulation._ArrayWithManipulation.expand_dims"]], "flip() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[61, "ivy.data_classes.array.manipulation._ArrayWithManipulation.flip"]], "ivy.data_classes.array.manipulation": [[61, "module-ivy.data_classes.array.manipulation"]], "permute_dims() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[61, "ivy.data_classes.array.manipulation._ArrayWithManipulation.permute_dims"]], "repeat() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[61, "ivy.data_classes.array.manipulation._ArrayWithManipulation.repeat"]], "reshape() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[61, "ivy.data_classes.array.manipulation._ArrayWithManipulation.reshape"]], "roll() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[61, "ivy.data_classes.array.manipulation._ArrayWithManipulation.roll"]], "split() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[61, "ivy.data_classes.array.manipulation._ArrayWithManipulation.split"]], "squeeze() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[61, "ivy.data_classes.array.manipulation._ArrayWithManipulation.squeeze"]], "stack() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[61, "ivy.data_classes.array.manipulation._ArrayWithManipulation.stack"]], "swapaxes() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[61, "ivy.data_classes.array.manipulation._ArrayWithManipulation.swapaxes"]], "tile() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[61, "ivy.data_classes.array.manipulation._ArrayWithManipulation.tile"]], "unstack() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[61, "ivy.data_classes.array.manipulation._ArrayWithManipulation.unstack"]], "view() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[61, "ivy.data_classes.array.manipulation._ArrayWithManipulation.view"]], "zero_pad() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[61, "ivy.data_classes.array.manipulation._ArrayWithManipulation.zero_pad"]], "_arraywithnorms (class in ivy.data_classes.array.norms)": [[62, "ivy.data_classes.array.norms._ArrayWithNorms"]], "_abc_impl (ivy.data_classes.array.norms._arraywithnorms attribute)": [[62, "ivy.data_classes.array.norms._ArrayWithNorms._abc_impl"]], "ivy.data_classes.array.norms": [[62, "module-ivy.data_classes.array.norms"]], "layer_norm() (ivy.data_classes.array.norms._arraywithnorms method)": [[62, "ivy.data_classes.array.norms._ArrayWithNorms.layer_norm"]], "_arraywithrandom (class in ivy.data_classes.array.random)": [[63, "ivy.data_classes.array.random._ArrayWithRandom"]], "_abc_impl (ivy.data_classes.array.random._arraywithrandom attribute)": [[63, "ivy.data_classes.array.random._ArrayWithRandom._abc_impl"]], "ivy.data_classes.array.random": [[63, "module-ivy.data_classes.array.random"]], "multinomial() (ivy.data_classes.array.random._arraywithrandom method)": [[63, "ivy.data_classes.array.random._ArrayWithRandom.multinomial"]], "randint() (ivy.data_classes.array.random._arraywithrandom method)": [[63, "ivy.data_classes.array.random._ArrayWithRandom.randint"]], "random_normal() (ivy.data_classes.array.random._arraywithrandom method)": [[63, "ivy.data_classes.array.random._ArrayWithRandom.random_normal"]], "random_uniform() (ivy.data_classes.array.random._arraywithrandom method)": [[63, "ivy.data_classes.array.random._ArrayWithRandom.random_uniform"]], "shuffle() (ivy.data_classes.array.random._arraywithrandom method)": [[63, "ivy.data_classes.array.random._ArrayWithRandom.shuffle"]], "_arraywithsearching (class in ivy.data_classes.array.searching)": [[64, "ivy.data_classes.array.searching._ArrayWithSearching"]], "_abc_impl (ivy.data_classes.array.searching._arraywithsearching attribute)": [[64, "ivy.data_classes.array.searching._ArrayWithSearching._abc_impl"]], "argmax() (ivy.data_classes.array.searching._arraywithsearching method)": [[64, "ivy.data_classes.array.searching._ArrayWithSearching.argmax"]], "argmin() (ivy.data_classes.array.searching._arraywithsearching method)": [[64, "ivy.data_classes.array.searching._ArrayWithSearching.argmin"]], "argwhere() (ivy.data_classes.array.searching._arraywithsearching method)": [[64, "ivy.data_classes.array.searching._ArrayWithSearching.argwhere"]], "ivy.data_classes.array.searching": [[64, "module-ivy.data_classes.array.searching"]], "nonzero() (ivy.data_classes.array.searching._arraywithsearching method)": [[64, "ivy.data_classes.array.searching._ArrayWithSearching.nonzero"]], "where() (ivy.data_classes.array.searching._arraywithsearching method)": [[64, "ivy.data_classes.array.searching._ArrayWithSearching.where"]], "_arraywithset (class in ivy.data_classes.array.set)": [[65, "ivy.data_classes.array.set._ArrayWithSet"]], "_abc_impl (ivy.data_classes.array.set._arraywithset attribute)": [[65, "ivy.data_classes.array.set._ArrayWithSet._abc_impl"]], "ivy.data_classes.array.set": [[65, "module-ivy.data_classes.array.set"]], "unique_all() (ivy.data_classes.array.set._arraywithset method)": [[65, "ivy.data_classes.array.set._ArrayWithSet.unique_all"]], "unique_counts() (ivy.data_classes.array.set._arraywithset method)": [[65, "ivy.data_classes.array.set._ArrayWithSet.unique_counts"]], "unique_inverse() (ivy.data_classes.array.set._arraywithset method)": [[65, "ivy.data_classes.array.set._ArrayWithSet.unique_inverse"]], "unique_values() (ivy.data_classes.array.set._arraywithset method)": [[65, "ivy.data_classes.array.set._ArrayWithSet.unique_values"]], "_arraywithsorting (class in ivy.data_classes.array.sorting)": [[66, "ivy.data_classes.array.sorting._ArrayWithSorting"]], "_abc_impl (ivy.data_classes.array.sorting._arraywithsorting attribute)": [[66, "ivy.data_classes.array.sorting._ArrayWithSorting._abc_impl"]], "argsort() (ivy.data_classes.array.sorting._arraywithsorting method)": [[66, "ivy.data_classes.array.sorting._ArrayWithSorting.argsort"]], "ivy.data_classes.array.sorting": [[66, "module-ivy.data_classes.array.sorting"]], "msort() (ivy.data_classes.array.sorting._arraywithsorting method)": [[66, "ivy.data_classes.array.sorting._ArrayWithSorting.msort"]], "searchsorted() (ivy.data_classes.array.sorting._arraywithsorting method)": [[66, "ivy.data_classes.array.sorting._ArrayWithSorting.searchsorted"]], "sort() (ivy.data_classes.array.sorting._arraywithsorting method)": [[66, "ivy.data_classes.array.sorting._ArrayWithSorting.sort"]], "_arraywithstatistical (class in ivy.data_classes.array.statistical)": [[67, "ivy.data_classes.array.statistical._ArrayWithStatistical"]], "_abc_impl (ivy.data_classes.array.statistical._arraywithstatistical attribute)": [[67, "ivy.data_classes.array.statistical._ArrayWithStatistical._abc_impl"]], "cumprod() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[67, "ivy.data_classes.array.statistical._ArrayWithStatistical.cumprod"]], "cumsum() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[67, "ivy.data_classes.array.statistical._ArrayWithStatistical.cumsum"]], "einsum() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[67, "ivy.data_classes.array.statistical._ArrayWithStatistical.einsum"]], "ivy.data_classes.array.statistical": [[67, "module-ivy.data_classes.array.statistical"]], "max() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[67, "ivy.data_classes.array.statistical._ArrayWithStatistical.max"]], "mean() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[67, "ivy.data_classes.array.statistical._ArrayWithStatistical.mean"]], "min() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[67, "ivy.data_classes.array.statistical._ArrayWithStatistical.min"]], "prod() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[67, "ivy.data_classes.array.statistical._ArrayWithStatistical.prod"]], "std() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[67, "ivy.data_classes.array.statistical._ArrayWithStatistical.std"]], "sum() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[67, "ivy.data_classes.array.statistical._ArrayWithStatistical.sum"]], "var() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[67, "ivy.data_classes.array.statistical._ArrayWithStatistical.var"]], "_arraywithutility (class in ivy.data_classes.array.utility)": [[68, "ivy.data_classes.array.utility._ArrayWithUtility"]], "_abc_impl (ivy.data_classes.array.utility._arraywithutility attribute)": [[68, "ivy.data_classes.array.utility._ArrayWithUtility._abc_impl"]], "all() (ivy.data_classes.array.utility._arraywithutility method)": [[68, "ivy.data_classes.array.utility._ArrayWithUtility.all"]], "any() (ivy.data_classes.array.utility._arraywithutility method)": [[68, "ivy.data_classes.array.utility._ArrayWithUtility.any"]], "ivy.data_classes.array.utility": [[68, "module-ivy.data_classes.array.utility"]], "_wrap_function() (in module ivy.data_classes.array.wrapping)": [[69, "ivy.data_classes.array.wrapping._wrap_function"]], "add_ivy_array_instance_methods() (in module ivy.data_classes.array.wrapping)": [[69, "ivy.data_classes.array.wrapping.add_ivy_array_instance_methods"]], "ivy.data_classes.array.wrapping": [[69, "module-ivy.data_classes.array.wrapping"]], "_containerwithactivations (class in ivy.data_classes.container.activations)": [[70, "ivy.data_classes.container.activations._ContainerWithActivations"]], "_abc_impl (ivy.data_classes.container.activations._containerwithactivations attribute)": [[70, "ivy.data_classes.container.activations._ContainerWithActivations._abc_impl"]], "_static_gelu() (ivy.data_classes.container.activations._containerwithactivations static method)": [[70, "ivy.data_classes.container.activations._ContainerWithActivations._static_gelu"]], "_static_hardswish() (ivy.data_classes.container.activations._containerwithactivations static method)": [[70, "ivy.data_classes.container.activations._ContainerWithActivations._static_hardswish"]], "_static_leaky_relu() (ivy.data_classes.container.activations._containerwithactivations static method)": [[70, "ivy.data_classes.container.activations._ContainerWithActivations._static_leaky_relu"]], "_static_log_softmax() (ivy.data_classes.container.activations._containerwithactivations static method)": [[70, "ivy.data_classes.container.activations._ContainerWithActivations._static_log_softmax"]], "_static_mish() (ivy.data_classes.container.activations._containerwithactivations static method)": [[70, "ivy.data_classes.container.activations._ContainerWithActivations._static_mish"]], "_static_relu() (ivy.data_classes.container.activations._containerwithactivations static method)": [[70, "ivy.data_classes.container.activations._ContainerWithActivations._static_relu"]], "_static_sigmoid() (ivy.data_classes.container.activations._containerwithactivations static method)": [[70, "ivy.data_classes.container.activations._ContainerWithActivations._static_sigmoid"]], "_static_softmax() (ivy.data_classes.container.activations._containerwithactivations static method)": [[70, "ivy.data_classes.container.activations._ContainerWithActivations._static_softmax"]], "_static_softplus() (ivy.data_classes.container.activations._containerwithactivations static method)": [[70, "ivy.data_classes.container.activations._ContainerWithActivations._static_softplus"]], "gelu() (ivy.data_classes.container.activations._containerwithactivations method)": [[70, "ivy.data_classes.container.activations._ContainerWithActivations.gelu"]], "hardswish() (ivy.data_classes.container.activations._containerwithactivations method)": [[70, "ivy.data_classes.container.activations._ContainerWithActivations.hardswish"]], "ivy.data_classes.container.activations": [[70, "module-ivy.data_classes.container.activations"]], "leaky_relu() (ivy.data_classes.container.activations._containerwithactivations method)": [[70, "ivy.data_classes.container.activations._ContainerWithActivations.leaky_relu"]], "log_softmax() (ivy.data_classes.container.activations._containerwithactivations method)": [[70, "ivy.data_classes.container.activations._ContainerWithActivations.log_softmax"]], "mish() (ivy.data_classes.container.activations._containerwithactivations method)": [[70, "ivy.data_classes.container.activations._ContainerWithActivations.mish"]], "relu() (ivy.data_classes.container.activations._containerwithactivations method)": [[70, "ivy.data_classes.container.activations._ContainerWithActivations.relu"]], "sigmoid() (ivy.data_classes.container.activations._containerwithactivations method)": [[70, "ivy.data_classes.container.activations._ContainerWithActivations.sigmoid"]], "softmax() (ivy.data_classes.container.activations._containerwithactivations method)": [[70, "ivy.data_classes.container.activations._ContainerWithActivations.softmax"]], "softplus() (ivy.data_classes.container.activations._containerwithactivations method)": [[70, "ivy.data_classes.container.activations._ContainerWithActivations.softplus"]], "containerbase (class in ivy.data_classes.container.base)": [[71, "ivy.data_classes.container.base.ContainerBase"]], "__getitem__() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.__getitem__"]], "__init__() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.__init__"]], "__setitem__() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.__setitem__"]], "_abc_impl (ivy.data_classes.container.base.containerbase attribute)": [[71, "ivy.data_classes.container.base.ContainerBase._abc_impl"]], "_cont_at_key_chains_input_as_dict() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase._cont_at_key_chains_input_as_dict"]], "_cont_at_key_chains_input_as_seq() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase._cont_at_key_chains_input_as_seq"]], "_cont_call_static_method_with_flexible_args() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase._cont_call_static_method_with_flexible_args"]], "_cont_concat_unify() (ivy.data_classes.container.base.containerbase static method)": [[71, "ivy.data_classes.container.base.ContainerBase._cont_concat_unify"]], "_cont_get_dev() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase._cont_get_dev"]], "_cont_get_dtype() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase._cont_get_dtype"]], "_cont_get_shape() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase._cont_get_shape"]], "_cont_get_shapes() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase._cont_get_shapes"]], "_cont_ivy (ivy.data_classes.container.base.containerbase property)": [[71, "ivy.data_classes.container.base.ContainerBase._cont_ivy"]], "_cont_mean_unify() (ivy.data_classes.container.base.containerbase static method)": [[71, "ivy.data_classes.container.base.ContainerBase._cont_mean_unify"]], "_cont_prune_key_chains_input_as_dict() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase._cont_prune_key_chains_input_as_dict"]], "_cont_prune_key_chains_input_as_seq() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase._cont_prune_key_chains_input_as_seq"]], "_cont_slice_keys() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase._cont_slice_keys"]], "_cont_sum_unify() (ivy.data_classes.container.base.containerbase static method)": [[71, "ivy.data_classes.container.base.ContainerBase._cont_sum_unify"]], "_get_queue_item() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase._get_queue_item"]], "_is_jsonable() (in module ivy.data_classes.container.base)": [[71, "ivy.data_classes.container.base._is_jsonable"]], "_repr() (in module ivy.data_classes.container.base)": [[71, "ivy.data_classes.container.base._repr"]], "cont_all_false() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_all_false"]], "cont_all_key_chains() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_all_key_chains"]], "cont_all_true() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_all_true"]], "cont_as_bools() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_as_bools"]], "cont_assert_contains_sub_container() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_assert_contains_sub_container"]], "cont_assert_contains_sub_structure() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_assert_contains_sub_structure"]], "cont_assert_identical() (ivy.data_classes.container.base.containerbase static method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_assert_identical"]], "cont_assert_identical_structure() (ivy.data_classes.container.base.containerbase static method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_assert_identical_structure"]], "cont_at_key_chain() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_at_key_chain"]], "cont_at_key_chains() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_at_key_chains"]], "cont_at_keys() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_at_keys"]], "cont_combine() (ivy.data_classes.container.base.containerbase static method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_combine"]], "cont_common_key_chains() (ivy.data_classes.container.base.containerbase static method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_common_key_chains"]], "cont_config (ivy.data_classes.container.base.containerbase property)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_config"]], "cont_contains_sub_container() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_contains_sub_container"]], "cont_contains_sub_structure() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_contains_sub_structure"]], "cont_copy() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_copy"]], "cont_create_if_absent() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_create_if_absent"]], "cont_cutoff_at_depth() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_cutoff_at_depth"]], "cont_cutoff_at_height() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_cutoff_at_height"]], "cont_deep_copy() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_deep_copy"]], "cont_dev (ivy.data_classes.container.base.containerbase property)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_dev"]], "cont_dev_str (ivy.data_classes.container.base.containerbase property)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_dev_str"]], "cont_diff() (ivy.data_classes.container.base.containerbase static method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_diff"]], "cont_dtype (ivy.data_classes.container.base.containerbase property)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_dtype"]], "cont_duplicate_array_keychains() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_duplicate_array_keychains"]], "cont_find_sub_container() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_find_sub_container"]], "cont_find_sub_structure() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_find_sub_structure"]], "cont_flatten_key_chain() (ivy.data_classes.container.base.containerbase static method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_flatten_key_chain"]], "cont_flatten_key_chains() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_flatten_key_chains"]], "cont_format_key_chains() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_format_key_chains"]], "cont_from_disk_as_hdf5() (ivy.data_classes.container.base.containerbase static method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_from_disk_as_hdf5"]], "cont_from_disk_as_json() (ivy.data_classes.container.base.containerbase static method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_from_disk_as_json"]], "cont_from_disk_as_pickled() (ivy.data_classes.container.base.containerbase static method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_from_disk_as_pickled"]], "cont_from_flat_list() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_from_flat_list"]], "cont_handle_inplace() (ivy.data_classes.container.base.containerbase static method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_handle_inplace"]], "cont_has_key() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_has_key"]], "cont_has_key_chain() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_has_key_chain"]], "cont_identical() (ivy.data_classes.container.base.containerbase static method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_identical"]], "cont_identical_array_shapes() (ivy.data_classes.container.base.containerbase static method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_identical_array_shapes"]], "cont_identical_configs() (ivy.data_classes.container.base.containerbase static method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_identical_configs"]], "cont_identical_structure() (ivy.data_classes.container.base.containerbase static method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_identical_structure"]], "cont_if_exists() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_if_exists"]], "cont_inplace_update() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_inplace_update"]], "cont_ivy (ivy.data_classes.container.base.containerbase property)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_ivy"]], "cont_key_chains_containing() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_key_chains_containing"]], "cont_list_join() (ivy.data_classes.container.base.containerbase static method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_list_join"]], "cont_list_stack() (ivy.data_classes.container.base.containerbase static method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_list_stack"]], "cont_load() (ivy.data_classes.container.base.containerbase static method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_load"]], "cont_map() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_map"]], "cont_map_sub_conts() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_map_sub_conts"]], "cont_max_depth (ivy.data_classes.container.base.containerbase property)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_max_depth"]], "cont_multi_map() (ivy.data_classes.container.base.containerbase static method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_multi_map"]], "cont_multi_map_in_function() (ivy.data_classes.container.base.containerbase static method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_multi_map_in_function"]], "cont_num_arrays() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_num_arrays"]], "cont_overwrite_at_key_chain() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_overwrite_at_key_chain"]], "cont_overwrite_at_key_chains() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_overwrite_at_key_chains"]], "cont_prune_empty() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_prune_empty"]], "cont_prune_key_chain() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_prune_key_chain"]], "cont_prune_key_chains() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_prune_key_chains"]], "cont_prune_key_from_key_chains() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_prune_key_from_key_chains"]], "cont_prune_keys() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_prune_keys"]], "cont_prune_keys_from_key_chains() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_prune_keys_from_key_chains"]], "cont_reduce() (ivy.data_classes.container.base.containerbase static method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_reduce"]], "cont_remove_key_length_limit() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_remove_key_length_limit"]], "cont_remove_print_limit() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_remove_print_limit"]], "cont_reshape_like() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_reshape_like"]], "cont_restructure() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_restructure"]], "cont_restructure_key_chains() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_restructure_key_chains"]], "cont_save() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_save"]], "cont_set_at_key_chain() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_set_at_key_chain"]], "cont_set_at_key_chains() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_set_at_key_chains"]], "cont_set_at_keys() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_set_at_keys"]], "cont_shape (ivy.data_classes.container.base.containerbase property)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_shape"]], "cont_shapes (ivy.data_classes.container.base.containerbase property)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_shapes"]], "cont_show() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_show"]], "cont_show_sub_container() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_show_sub_container"]], "cont_size_ordered_arrays() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_size_ordered_arrays"]], "cont_slice_keys() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_slice_keys"]], "cont_slice_via_key() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_slice_via_key"]], "cont_sort_by_key() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_sort_by_key"]], "cont_structural_diff() (ivy.data_classes.container.base.containerbase static method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_structural_diff"]], "cont_to_dict() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_to_dict"]], "cont_to_disk_as_hdf5() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_to_disk_as_hdf5"]], "cont_to_disk_as_json() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_to_disk_as_json"]], "cont_to_disk_as_pickled() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_to_disk_as_pickled"]], "cont_to_flat_list() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_to_flat_list"]], "cont_to_iterator() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_to_iterator"]], "cont_to_iterator_keys() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_to_iterator_keys"]], "cont_to_iterator_values() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_to_iterator_values"]], "cont_to_jsonable() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_to_jsonable"]], "cont_to_nested_list() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_to_nested_list"]], "cont_to_raw() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_to_raw"]], "cont_trim_key() (ivy.data_classes.container.base.containerbase static method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_trim_key"]], "cont_try_kc() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_try_kc"]], "cont_unify() (ivy.data_classes.container.base.containerbase static method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_unify"]], "cont_unstack_conts() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_unstack_conts"]], "cont_update_config() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_update_config"]], "cont_with_default_key_color() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_with_default_key_color"]], "cont_with_entries_as_lists() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_with_entries_as_lists"]], "cont_with_ivy_backend() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_with_ivy_backend"]], "cont_with_key_length_limit() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_with_key_length_limit"]], "cont_with_print_indent() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_with_print_indent"]], "cont_with_print_limit() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_with_print_limit"]], "cont_with_print_line_spacing() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.cont_with_print_line_spacing"]], "dynamic_backend (ivy.data_classes.container.base.containerbase property)": [[71, "ivy.data_classes.container.base.ContainerBase.dynamic_backend"]], "h5_file_size() (ivy.data_classes.container.base.containerbase static method)": [[71, "ivy.data_classes.container.base.ContainerBase.h5_file_size"]], "ivy.data_classes.container.base": [[71, "module-ivy.data_classes.container.base"]], "shuffle_h5_file() (ivy.data_classes.container.base.containerbase static method)": [[71, "ivy.data_classes.container.base.ContainerBase.shuffle_h5_file"]], "split_conts() (ivy.data_classes.container.base.containerbase method)": [[71, "ivy.data_classes.container.base.ContainerBase.split_conts"]], "_containerwithconversions (class in ivy.data_classes.container.conversions)": [[72, "ivy.data_classes.container.conversions._ContainerWithConversions"]], "_abc_impl (ivy.data_classes.container.conversions._containerwithconversions attribute)": [[72, "ivy.data_classes.container.conversions._ContainerWithConversions._abc_impl"]], "_static_to_ivy() (ivy.data_classes.container.conversions._containerwithconversions static method)": [[72, "ivy.data_classes.container.conversions._ContainerWithConversions._static_to_ivy"]], "_static_to_native() (ivy.data_classes.container.conversions._containerwithconversions static method)": [[72, "ivy.data_classes.container.conversions._ContainerWithConversions._static_to_native"]], "ivy.data_classes.container.conversions": [[72, "module-ivy.data_classes.container.conversions"]], "to_ivy() (ivy.data_classes.container.conversions._containerwithconversions method)": [[72, "ivy.data_classes.container.conversions._ContainerWithConversions.to_ivy"]], "to_native() (ivy.data_classes.container.conversions._containerwithconversions method)": [[72, "ivy.data_classes.container.conversions._ContainerWithConversions.to_native"]], "_containerwithcreation (class in ivy.data_classes.container.creation)": [[73, "ivy.data_classes.container.creation._ContainerWithCreation"]], "_abc_impl (ivy.data_classes.container.creation._containerwithcreation attribute)": [[73, "ivy.data_classes.container.creation._ContainerWithCreation._abc_impl"]], "_static_arange() (ivy.data_classes.container.creation._containerwithcreation static method)": [[73, "ivy.data_classes.container.creation._ContainerWithCreation._static_arange"]], "_static_asarray() (ivy.data_classes.container.creation._containerwithcreation static method)": [[73, "ivy.data_classes.container.creation._ContainerWithCreation._static_asarray"]], "_static_copy_array() (ivy.data_classes.container.creation._containerwithcreation static method)": [[73, "ivy.data_classes.container.creation._ContainerWithCreation._static_copy_array"]], "_static_empty() (ivy.data_classes.container.creation._containerwithcreation static method)": [[73, "ivy.data_classes.container.creation._ContainerWithCreation._static_empty"]], "_static_empty_like() (ivy.data_classes.container.creation._containerwithcreation static method)": [[73, "ivy.data_classes.container.creation._ContainerWithCreation._static_empty_like"]], "_static_eye() (ivy.data_classes.container.creation._containerwithcreation static method)": [[73, "ivy.data_classes.container.creation._ContainerWithCreation._static_eye"]], "_static_from_dlpack() (ivy.data_classes.container.creation._containerwithcreation static method)": [[73, "ivy.data_classes.container.creation._ContainerWithCreation._static_from_dlpack"]], "_static_full() (ivy.data_classes.container.creation._containerwithcreation static method)": [[73, "ivy.data_classes.container.creation._ContainerWithCreation._static_full"]], "_static_full_like() (ivy.data_classes.container.creation._containerwithcreation static method)": [[73, "ivy.data_classes.container.creation._ContainerWithCreation._static_full_like"]], "_static_linspace() (ivy.data_classes.container.creation._containerwithcreation static method)": [[73, "ivy.data_classes.container.creation._ContainerWithCreation._static_linspace"]], "_static_logspace() (ivy.data_classes.container.creation._containerwithcreation static method)": [[73, "ivy.data_classes.container.creation._ContainerWithCreation._static_logspace"]], "_static_meshgrid() (ivy.data_classes.container.creation._containerwithcreation static method)": [[73, "ivy.data_classes.container.creation._ContainerWithCreation._static_meshgrid"]], "_static_native_array() (ivy.data_classes.container.creation._containerwithcreation static method)": [[73, "ivy.data_classes.container.creation._ContainerWithCreation._static_native_array"]], "_static_one_hot() (ivy.data_classes.container.creation._containerwithcreation static method)": [[73, "ivy.data_classes.container.creation._ContainerWithCreation._static_one_hot"]], "_static_ones() (ivy.data_classes.container.creation._containerwithcreation static method)": [[73, "ivy.data_classes.container.creation._ContainerWithCreation._static_ones"]], "_static_ones_like() (ivy.data_classes.container.creation._containerwithcreation static method)": [[73, "ivy.data_classes.container.creation._ContainerWithCreation._static_ones_like"]], "_static_tril() (ivy.data_classes.container.creation._containerwithcreation static method)": [[73, "ivy.data_classes.container.creation._ContainerWithCreation._static_tril"]], "_static_triu() (ivy.data_classes.container.creation._containerwithcreation static method)": [[73, "ivy.data_classes.container.creation._ContainerWithCreation._static_triu"]], "_static_zeros() (ivy.data_classes.container.creation._containerwithcreation static method)": [[73, "ivy.data_classes.container.creation._ContainerWithCreation._static_zeros"]], "_static_zeros_like() (ivy.data_classes.container.creation._containerwithcreation static method)": [[73, "ivy.data_classes.container.creation._ContainerWithCreation._static_zeros_like"]], "asarray() (ivy.data_classes.container.creation._containerwithcreation method)": [[73, "ivy.data_classes.container.creation._ContainerWithCreation.asarray"]], "copy_array() (ivy.data_classes.container.creation._containerwithcreation method)": [[73, "ivy.data_classes.container.creation._ContainerWithCreation.copy_array"]], "empty_like() (ivy.data_classes.container.creation._containerwithcreation method)": [[73, "ivy.data_classes.container.creation._ContainerWithCreation.empty_like"]], "from_dlpack() (ivy.data_classes.container.creation._containerwithcreation method)": [[73, "ivy.data_classes.container.creation._ContainerWithCreation.from_dlpack"]], "frombuffer() (ivy.data_classes.container.creation._containerwithcreation method)": [[73, "ivy.data_classes.container.creation._ContainerWithCreation.frombuffer"]], "full_like() (ivy.data_classes.container.creation._containerwithcreation method)": [[73, "ivy.data_classes.container.creation._ContainerWithCreation.full_like"]], "ivy.data_classes.container.creation": [[73, "module-ivy.data_classes.container.creation"]], "linspace() (ivy.data_classes.container.creation._containerwithcreation method)": [[73, "ivy.data_classes.container.creation._ContainerWithCreation.linspace"]], "logspace() (ivy.data_classes.container.creation._containerwithcreation method)": [[73, "ivy.data_classes.container.creation._ContainerWithCreation.logspace"]], "meshgrid() (ivy.data_classes.container.creation._containerwithcreation method)": [[73, "ivy.data_classes.container.creation._ContainerWithCreation.meshgrid"]], "native_array() (ivy.data_classes.container.creation._containerwithcreation method)": [[73, "ivy.data_classes.container.creation._ContainerWithCreation.native_array"]], "one_hot() (ivy.data_classes.container.creation._containerwithcreation method)": [[73, "ivy.data_classes.container.creation._ContainerWithCreation.one_hot"]], "ones_like() (ivy.data_classes.container.creation._containerwithcreation method)": [[73, "ivy.data_classes.container.creation._ContainerWithCreation.ones_like"]], "static_frombuffer() (ivy.data_classes.container.creation._containerwithcreation static method)": [[73, "ivy.data_classes.container.creation._ContainerWithCreation.static_frombuffer"]], "static_triu_indices() (ivy.data_classes.container.creation._containerwithcreation static method)": [[73, "ivy.data_classes.container.creation._ContainerWithCreation.static_triu_indices"]], "tril() (ivy.data_classes.container.creation._containerwithcreation method)": [[73, "ivy.data_classes.container.creation._ContainerWithCreation.tril"]], "triu() (ivy.data_classes.container.creation._containerwithcreation method)": [[73, "ivy.data_classes.container.creation._ContainerWithCreation.triu"]], "triu_indices() (ivy.data_classes.container.creation._containerwithcreation method)": [[73, "ivy.data_classes.container.creation._ContainerWithCreation.triu_indices"]], "zeros_like() (ivy.data_classes.container.creation._containerwithcreation method)": [[73, "ivy.data_classes.container.creation._ContainerWithCreation.zeros_like"]], "_containerwithdatatypes (class in ivy.data_classes.container.data_type)": [[74, "ivy.data_classes.container.data_type._ContainerWithDataTypes"]], "_abc_impl (ivy.data_classes.container.data_type._containerwithdatatypes attribute)": [[74, "ivy.data_classes.container.data_type._ContainerWithDataTypes._abc_impl"]], "_static_astype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[74, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_astype"]], "_static_broadcast_arrays() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[74, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_broadcast_arrays"]], "_static_broadcast_to() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[74, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_broadcast_to"]], "_static_can_cast() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[74, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_can_cast"]], "_static_default_complex_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[74, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_default_complex_dtype"]], "_static_default_float_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[74, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_default_float_dtype"]], "_static_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[74, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_dtype"]], "_static_finfo() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[74, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_finfo"]], "_static_function_supported_dtypes() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[74, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_function_supported_dtypes"]], "_static_function_unsupported_dtypes() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[74, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_function_unsupported_dtypes"]], "_static_iinfo() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[74, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_iinfo"]], "_static_is_bool_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[74, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_bool_dtype"]], "_static_is_complex_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[74, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_complex_dtype"]], "_static_is_float_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[74, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_float_dtype"]], "_static_is_int_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[74, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_int_dtype"]], "_static_is_uint_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[74, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_uint_dtype"]], "_static_result_type() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[74, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_result_type"]], "astype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[74, "ivy.data_classes.container.data_type._ContainerWithDataTypes.astype"]], "broadcast_arrays() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[74, "ivy.data_classes.container.data_type._ContainerWithDataTypes.broadcast_arrays"]], "broadcast_to() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[74, "ivy.data_classes.container.data_type._ContainerWithDataTypes.broadcast_to"]], "can_cast() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[74, "ivy.data_classes.container.data_type._ContainerWithDataTypes.can_cast"]], "dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[74, "ivy.data_classes.container.data_type._ContainerWithDataTypes.dtype"]], "finfo() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[74, "ivy.data_classes.container.data_type._ContainerWithDataTypes.finfo"]], "iinfo() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[74, "ivy.data_classes.container.data_type._ContainerWithDataTypes.iinfo"]], "is_bool_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[74, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_bool_dtype"]], "is_complex_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[74, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_complex_dtype"]], "is_float_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[74, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_float_dtype"]], "is_int_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[74, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_int_dtype"]], "is_uint_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[74, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_uint_dtype"]], "ivy.data_classes.container.data_type": [[74, "module-ivy.data_classes.container.data_type"]], "result_type() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[74, "ivy.data_classes.container.data_type._ContainerWithDataTypes.result_type"]], "_containerwithdevice (class in ivy.data_classes.container.device)": [[75, "ivy.data_classes.container.device._ContainerWithDevice"]], "_abc_impl (ivy.data_classes.container.device._containerwithdevice attribute)": [[75, "ivy.data_classes.container.device._ContainerWithDevice._abc_impl"]], "_static_dev() (ivy.data_classes.container.device._containerwithdevice static method)": [[75, "ivy.data_classes.container.device._ContainerWithDevice._static_dev"]], "_static_to_device() (ivy.data_classes.container.device._containerwithdevice static method)": [[75, "ivy.data_classes.container.device._ContainerWithDevice._static_to_device"]], "dev() (ivy.data_classes.container.device._containerwithdevice method)": [[75, "ivy.data_classes.container.device._ContainerWithDevice.dev"]], "ivy.data_classes.container.device": [[75, "module-ivy.data_classes.container.device"]], "to_device() (ivy.data_classes.container.device._containerwithdevice method)": [[75, "ivy.data_classes.container.device._ContainerWithDevice.to_device"]], "_containerwithelementwise (class in ivy.data_classes.container.elementwise)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise"]], "_abc_impl (ivy.data_classes.container.elementwise._containerwithelementwise attribute)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._abc_impl"]], "_static_abs() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_abs"]], "_static_acos() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_acos"]], "_static_acosh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_acosh"]], "_static_add() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_add"]], "_static_asin() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_asin"]], "_static_asinh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_asinh"]], "_static_atan() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_atan"]], "_static_atan2() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_atan2"]], "_static_atanh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_atanh"]], "_static_bitwise_and() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_and"]], "_static_bitwise_invert() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_invert"]], "_static_bitwise_left_shift() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_left_shift"]], "_static_bitwise_or() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_or"]], "_static_bitwise_right_shift() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_right_shift"]], "_static_bitwise_xor() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_xor"]], "_static_ceil() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_ceil"]], "_static_cos() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_cos"]], "_static_cosh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_cosh"]], "_static_deg2rad() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_deg2rad"]], "_static_divide() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_divide"]], "_static_equal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_equal"]], "_static_erf() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_erf"]], "_static_exp() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_exp"]], "_static_expm1() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_expm1"]], "_static_floor() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_floor"]], "_static_floor_divide() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_floor_divide"]], "_static_greater() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_greater"]], "_static_greater_equal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_greater_equal"]], "_static_isfinite() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_isfinite"]], "_static_isinf() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_isinf"]], "_static_isnan() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_isnan"]], "_static_isreal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_isreal"]], "_static_lcm() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_lcm"]], "_static_less() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_less"]], "_static_less_equal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_less_equal"]], "_static_log() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_log"]], "_static_log10() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_log10"]], "_static_log1p() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_log1p"]], "_static_log2() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_log2"]], "_static_logaddexp() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logaddexp"]], "_static_logical_and() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logical_and"]], "_static_logical_not() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logical_not"]], "_static_logical_or() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logical_or"]], "_static_logical_xor() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logical_xor"]], "_static_maximum() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_maximum"]], "_static_minimum() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_minimum"]], "_static_multiply() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_multiply"]], "_static_negative() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_negative"]], "_static_not_equal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_not_equal"]], "_static_positive() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_positive"]], "_static_pow() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_pow"]], "_static_rad2deg() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_rad2deg"]], "_static_reciprocal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_reciprocal"]], "_static_remainder() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_remainder"]], "_static_round() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_round"]], "_static_sign() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_sign"]], "_static_sin() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_sin"]], "_static_sinh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_sinh"]], "_static_sqrt() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_sqrt"]], "_static_square() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_square"]], "_static_subtract() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_subtract"]], "_static_tan() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_tan"]], "_static_tanh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_tanh"]], "_static_trapz() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_trapz"]], "_static_trunc() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_trunc"]], "_static_trunc_divide() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_trunc_divide"]], "abs() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.abs"]], "acos() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.acos"]], "acosh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.acosh"]], "add() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.add"]], "angle() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.angle"]], "asin() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.asin"]], "asinh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.asinh"]], "atan() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.atan"]], "atan2() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.atan2"]], "atanh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.atanh"]], "bitwise_and() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_and"]], "bitwise_invert() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_invert"]], "bitwise_left_shift() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_left_shift"]], "bitwise_or() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_or"]], "bitwise_right_shift() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_right_shift"]], "bitwise_xor() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_xor"]], "ceil() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.ceil"]], "cos() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.cos"]], "cosh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.cosh"]], "deg2rad() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.deg2rad"]], "divide() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.divide"]], "equal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.equal"]], "erf() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.erf"]], "exp() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.exp"]], "exp2() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.exp2"]], "expm1() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.expm1"]], "floor() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.floor"]], "floor_divide() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.floor_divide"]], "fmin() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.fmin"]], "gcd() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.gcd"]], "greater() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.greater"]], "greater_equal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.greater_equal"]], "imag() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.imag"]], "isfinite() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.isfinite"]], "isinf() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.isinf"]], "isnan() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.isnan"]], "isreal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.isreal"]], "ivy.data_classes.container.elementwise": [[76, "module-ivy.data_classes.container.elementwise"]], "lcm() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.lcm"]], "less() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.less"]], "less_equal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.less_equal"]], "log() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.log"]], "log10() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.log10"]], "log1p() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.log1p"]], "log2() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.log2"]], "logaddexp() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logaddexp"]], "logaddexp2() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logaddexp2"]], "logical_and() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logical_and"]], "logical_not() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logical_not"]], "logical_or() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logical_or"]], "logical_xor() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logical_xor"]], "maximum() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.maximum"]], "minimum() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.minimum"]], "multiply() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.multiply"]], "nan_to_num() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.nan_to_num"]], "negative() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.negative"]], "not_equal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.not_equal"]], "positive() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.positive"]], "pow() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.pow"]], "rad2deg() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.rad2deg"]], "real() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.real"]], "reciprocal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.reciprocal"]], "remainder() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.remainder"]], "round() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.round"]], "sign() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.sign"]], "sin() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.sin"]], "sinh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.sinh"]], "sqrt() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.sqrt"]], "square() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.square"]], "static_angle() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_angle"]], "static_exp2() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_exp2"]], "static_fmin() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_fmin"]], "static_gcd() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_gcd"]], "static_imag() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_imag"]], "static_logaddexp2() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_logaddexp2"]], "static_nan_to_num() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_nan_to_num"]], "static_real() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_real"]], "subtract() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.subtract"]], "tan() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.tan"]], "tanh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.tanh"]], "trapz() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.trapz"]], "trunc() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.trunc"]], "trunc_divide() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[76, "ivy.data_classes.container.elementwise._ContainerWithElementwise.trunc_divide"]], "_containerwithactivationexperimental (class in ivy.data_classes.container.experimental.activations)": [[77, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental"]], "_containerwithconversionexperimental (class in ivy.data_classes.container.experimental.conversions)": [[77, "ivy.data_classes.container.experimental.conversions._ContainerWithConversionExperimental"]], "_containerwithcreationexperimental (class in ivy.data_classes.container.experimental.creation)": [[77, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental"]], "_containerwithdata_typeexperimental (class in ivy.data_classes.container.experimental.data_type)": [[77, "ivy.data_classes.container.experimental.data_type._ContainerWithData_typeExperimental"]], "_containerwithdeviceexperimental (class in ivy.data_classes.container.experimental.device)": [[77, "ivy.data_classes.container.experimental.device._ContainerWithDeviceExperimental"]], "_containerwithelementwiseexperimental (class in ivy.data_classes.container.experimental.elementwise)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental"]], "_containerwithgeneralexperimental (class in ivy.data_classes.container.experimental.general)": [[77, "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental"]], "_containerwithgradientsexperimental (class in ivy.data_classes.container.experimental.gradients)": [[77, "ivy.data_classes.container.experimental.gradients._ContainerWithGradientsExperimental"]], "_containerwithimageexperimental (class in ivy.data_classes.container.experimental.image)": [[77, "ivy.data_classes.container.experimental.image._ContainerWithImageExperimental"]], "_containerwithlayersexperimental (class in ivy.data_classes.container.experimental.layers)": [[77, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental"]], "_containerwithlinearalgebraexperimental (class in ivy.data_classes.container.experimental.linear_algebra)": [[77, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental"]], "_containerwithlossesexperimental (class in ivy.data_classes.container.experimental.losses)": [[77, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental"]], "_containerwithmanipulationexperimental (class in ivy.data_classes.container.experimental.manipulation)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental"]], "_containerwithnormsexperimental (class in ivy.data_classes.container.experimental.norms)": [[77, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental"]], "_containerwithrandomexperimental (class in ivy.data_classes.container.experimental.random)": [[77, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental"]], "_containerwithsearchingexperimental (class in ivy.data_classes.container.experimental.searching)": [[77, "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental"]], "_containerwithsetexperimental (class in ivy.data_classes.container.experimental.set)": [[77, "ivy.data_classes.container.experimental.set._ContainerWithSetExperimental"]], "_containerwithsortingexperimental (class in ivy.data_classes.container.experimental.sorting)": [[77, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental"]], "_containerwithstatisticalexperimental (class in ivy.data_classes.container.experimental.statistical)": [[77, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental"]], "_containerwithutilityexperimental (class in ivy.data_classes.container.experimental.utility)": [[77, "ivy.data_classes.container.experimental.utility._ContainerWithUtilityExperimental"]], "_abc_impl (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental attribute)": [[77, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.conversions._containerwithconversionexperimental attribute)": [[77, "ivy.data_classes.container.experimental.conversions._ContainerWithConversionExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental attribute)": [[77, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.data_type._containerwithdata_typeexperimental attribute)": [[77, "ivy.data_classes.container.experimental.data_type._ContainerWithData_typeExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.device._containerwithdeviceexperimental attribute)": [[77, "ivy.data_classes.container.experimental.device._ContainerWithDeviceExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental attribute)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.general._containerwithgeneralexperimental attribute)": [[77, "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.gradients._containerwithgradientsexperimental attribute)": [[77, "ivy.data_classes.container.experimental.gradients._ContainerWithGradientsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.image._containerwithimageexperimental attribute)": [[77, "ivy.data_classes.container.experimental.image._ContainerWithImageExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental attribute)": [[77, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental attribute)": [[77, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental attribute)": [[77, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental attribute)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental attribute)": [[77, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.random._containerwithrandomexperimental attribute)": [[77, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.searching._containerwithsearchingexperimental attribute)": [[77, "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.set._containerwithsetexperimental attribute)": [[77, "ivy.data_classes.container.experimental.set._ContainerWithSetExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental attribute)": [[77, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental attribute)": [[77, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.utility._containerwithutilityexperimental attribute)": [[77, "ivy.data_classes.container.experimental.utility._ContainerWithUtilityExperimental._abc_impl"]], "_static_celu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[77, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_celu"]], "_static_cummax() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[77, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental._static_cummax"]], "_static_cummin() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[77, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental._static_cummin"]], "_static_elu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[77, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_elu"]], "_static_fft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[77, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental._static_fft"]], "_static_fill_diagonal() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental._static_fill_diagonal"]], "_static_hardshrink() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[77, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_hardshrink"]], "_static_hardsilu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[77, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_hardsilu"]], "_static_hardtanh() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[77, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_hardtanh"]], "_static_hinge_embedding_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[77, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_hinge_embedding_loss"]], "_static_huber_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[77, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_huber_loss"]], "_static_kl_div() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[77, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_kl_div"]], "_static_l1_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[77, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_l1_loss"]], "_static_log_poisson_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[77, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_log_poisson_loss"]], "_static_nanmin() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[77, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental._static_nanmin"]], "_static_poisson_nll_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[77, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_poisson_nll_loss"]], "_static_put_along_axis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental._static_put_along_axis"]], "_static_reduce() (ivy.data_classes.container.experimental.general._containerwithgeneralexperimental static method)": [[77, "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental._static_reduce"]], "_static_scaled_tanh() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[77, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_scaled_tanh"]], "_static_silu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[77, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_silu"]], "_static_sliding_window() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[77, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental._static_sliding_window"]], "_static_smooth_l1_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[77, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_smooth_l1_loss"]], "_static_soft_margin_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[77, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_soft_margin_loss"]], "_static_softshrink() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[77, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_softshrink"]], "_static_take() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental._static_take"]], "_static_tanhshrink() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[77, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_tanhshrink"]], "_static_threshold() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[77, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_threshold"]], "_static_trilu() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[77, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental._static_trilu"]], "_static_trim_zeros() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental._static_trim_zeros"]], "_static_unflatten() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental._static_unflatten"]], "_static_unique_consecutive() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental._static_unique_consecutive"]], "adaptive_avg_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[77, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.adaptive_avg_pool1d"]], "adaptive_avg_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[77, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.adaptive_avg_pool2d"]], "adaptive_max_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[77, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.adaptive_max_pool2d"]], "adaptive_max_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[77, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.adaptive_max_pool3d"]], "adjoint() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[77, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.adjoint"]], "allclose() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.allclose"]], "amax() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.amax"]], "amin() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.amin"]], "as_strided() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.as_strided"]], "associative_scan() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.associative_scan"]], "atleast_1d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.atleast_1d"]], "atleast_2d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.atleast_2d"]], "atleast_3d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.atleast_3d"]], "avg_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[77, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.avg_pool1d"]], "avg_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[77, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.avg_pool2d"]], "avg_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[77, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.avg_pool3d"]], "batch_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[77, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.batch_norm"]], "batched_outer() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[77, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.batched_outer"]], "bernoulli() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[77, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.bernoulli"]], "beta() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[77, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.beta"]], "binarizer() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.binarizer"]], "bincount() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[77, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.bincount"]], "blackman_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[77, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.blackman_window"]], "broadcast_shapes() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.broadcast_shapes"]], "celu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[77, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.celu"]], "column_stack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.column_stack"]], "concat_from_sequence() (in module ivy.data_classes.container.experimental.manipulation)": [[77, "ivy.data_classes.container.experimental.manipulation.concat_from_sequence"]], "concat_from_sequence() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.concat_from_sequence"]], "cond() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[77, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.cond"]], "conj() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.conj"]], "copysign() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.copysign"]], "corrcoef() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[77, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.corrcoef"]], "count_nonzero() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.count_nonzero"]], "cov() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[77, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.cov"]], "cummax() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[77, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.cummax"]], "cummin() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[77, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.cummin"]], "dct() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[77, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.dct"]], "dft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[77, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.dft"]], "diagflat() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[77, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.diagflat"]], "diff() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.diff"]], "digamma() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.digamma"]], "dirichlet() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[77, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.dirichlet"]], "dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[77, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.dot"]], "dsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.dsplit"]], "dstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.dstack"]], "eig() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[77, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.eig"]], "eigh_tridiagonal() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[77, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.eigh_tridiagonal"]], "eigvals() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[77, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.eigvals"]], "elu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[77, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.elu"]], "embedding() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[77, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.embedding"]], "erfc() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.erfc"]], "erfinv() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.erfinv"]], "expand() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.expand"]], "eye_like() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[77, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.eye_like"]], "fft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[77, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.fft"]], "fill_diagonal() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.fill_diagonal"]], "fix() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.fix"]], "flatten() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.flatten"]], "fliplr() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.fliplr"]], "flipud() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.flipud"]], "float_power() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.float_power"]], "fmax() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.fmax"]], "fmod() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.fmod"]], "fold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.fold"]], "frexp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.frexp"]], "gamma() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[77, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.gamma"]], "gradient() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.gradient"]], "group_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[77, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.group_norm"]], "hamming_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[77, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.hamming_window"]], "hann_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[77, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.hann_window"]], "hardshrink() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[77, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.hardshrink"]], "hardsilu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[77, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.hardsilu"]], "hardtanh() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[77, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.hardtanh"]], "heaviside() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.heaviside"]], "higher_order_moment() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[77, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.higher_order_moment"]], "hinge_embedding_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[77, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.hinge_embedding_loss"]], "histogram() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[77, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.histogram"]], "hsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.hsplit"]], "hstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.hstack"]], "huber_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[77, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.huber_loss"]], "hypot() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.hypot"]], "i0() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.i0"]], "idct() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[77, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.idct"]], "ifft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[77, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.ifft"]], "ifftn() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[77, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.ifftn"]], "igamma() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[77, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.igamma"]], "initialize_tucker() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[77, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.initialize_tucker"]], "instance_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[77, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.instance_norm"]], "interpolate() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[77, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.interpolate"]], "invert_permutation() (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental method)": [[77, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental.invert_permutation"]], "isclose() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.isclose"]], "ivy.data_classes.container.experimental": [[77, "module-ivy.data_classes.container.experimental"]], "ivy.data_classes.container.experimental.activations": [[77, "module-ivy.data_classes.container.experimental.activations"]], "ivy.data_classes.container.experimental.conversions": [[77, "module-ivy.data_classes.container.experimental.conversions"]], "ivy.data_classes.container.experimental.creation": [[77, "module-ivy.data_classes.container.experimental.creation"]], "ivy.data_classes.container.experimental.data_type": [[77, "module-ivy.data_classes.container.experimental.data_type"]], "ivy.data_classes.container.experimental.device": [[77, "module-ivy.data_classes.container.experimental.device"]], "ivy.data_classes.container.experimental.elementwise": [[77, "module-ivy.data_classes.container.experimental.elementwise"]], "ivy.data_classes.container.experimental.general": [[77, "module-ivy.data_classes.container.experimental.general"]], "ivy.data_classes.container.experimental.gradients": [[77, "module-ivy.data_classes.container.experimental.gradients"]], "ivy.data_classes.container.experimental.image": [[77, "module-ivy.data_classes.container.experimental.image"]], "ivy.data_classes.container.experimental.layers": [[77, "module-ivy.data_classes.container.experimental.layers"]], "ivy.data_classes.container.experimental.linear_algebra": [[77, "module-ivy.data_classes.container.experimental.linear_algebra"]], "ivy.data_classes.container.experimental.losses": [[77, "module-ivy.data_classes.container.experimental.losses"]], "ivy.data_classes.container.experimental.manipulation": [[77, "module-ivy.data_classes.container.experimental.manipulation"]], "ivy.data_classes.container.experimental.norms": [[77, "module-ivy.data_classes.container.experimental.norms"]], "ivy.data_classes.container.experimental.random": [[77, "module-ivy.data_classes.container.experimental.random"]], "ivy.data_classes.container.experimental.searching": [[77, "module-ivy.data_classes.container.experimental.searching"]], "ivy.data_classes.container.experimental.set": [[77, "module-ivy.data_classes.container.experimental.set"]], "ivy.data_classes.container.experimental.sorting": [[77, "module-ivy.data_classes.container.experimental.sorting"]], "ivy.data_classes.container.experimental.statistical": [[77, "module-ivy.data_classes.container.experimental.statistical"]], "ivy.data_classes.container.experimental.utility": [[77, "module-ivy.data_classes.container.experimental.utility"]], "kaiser_bessel_derived_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[77, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.kaiser_bessel_derived_window"]], "kaiser_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[77, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.kaiser_window"]], "kl_div() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[77, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.kl_div"]], "kron() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[77, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.kron"]], "l1_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[77, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.l1_loss"]], "l1_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[77, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.l1_normalize"]], "l2_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[77, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.l2_normalize"]], "ldexp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.ldexp"]], "lerp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.lerp"]], "lexsort() (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental method)": [[77, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental.lexsort"]], "lgamma() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[77, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.lgamma"]], "log_poisson_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[77, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.log_poisson_loss"]], "logit() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[77, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.logit"]], "logsigmoid() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[77, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.logsigmoid"]], "lp_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[77, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.lp_normalize"]], "make_svd_non_negative() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[77, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.make_svd_non_negative"]], "matricize() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.matricize"]], "matrix_exp() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[77, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.matrix_exp"]], "max_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[77, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.max_pool1d"]], "max_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[77, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.max_pool2d"]], "max_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[77, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.max_pool3d"]], "max_unpool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[77, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.max_unpool1d"]], "median() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[77, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.median"]], "mel_weight_matrix() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[77, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.mel_weight_matrix"]], "mode_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[77, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.mode_dot"]], "modf() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.modf"]], "moveaxis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.moveaxis"]], "multi_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[77, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.multi_dot"]], "multi_mode_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[77, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.multi_mode_dot"]], "nanmean() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[77, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.nanmean"]], "nanmedian() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[77, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.nanmedian"]], "nanmin() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[77, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.nanmin"]], "nanprod() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[77, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.nanprod"]], "nansum() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.nansum"]], "nextafter() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.nextafter"]], "optional_get_element() (ivy.data_classes.container.experimental.utility._containerwithutilityexperimental method)": [[77, "ivy.data_classes.container.experimental.utility._ContainerWithUtilityExperimental.optional_get_element"]], "pad() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.pad"]], "partial_fold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.partial_fold"]], "partial_tensor_to_vec() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.partial_tensor_to_vec"]], "partial_tucker() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[77, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.partial_tucker"]], "partial_unfold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.partial_unfold"]], "partial_vec_to_tensor() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.partial_vec_to_tensor"]], "poisson() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[77, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.poisson"]], "poisson_nll_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[77, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.poisson_nll_loss"]], "polyval() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[77, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.polyval"]], "prelu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[77, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.prelu"]], "put_along_axis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.put_along_axis"]], "quantile() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[77, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.quantile"]], "reduce() (ivy.data_classes.container.experimental.general._containerwithgeneralexperimental method)": [[77, "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental.reduce"]], "relu6() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[77, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.relu6"]], "rfft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[77, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.rfft"]], "rfftn() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[77, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.rfftn"]], "rot90() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.rot90"]], "scaled_tanh() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[77, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.scaled_tanh"]], "selu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[77, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.selu"]], "signbit() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.signbit"]], "silu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[77, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.silu"]], "sinc() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.sinc"]], "sliding_window() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[77, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.sliding_window"]], "smooth_l1_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[77, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.smooth_l1_loss"]], "soft_margin_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[77, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.soft_margin_loss"]], "soft_thresholding() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.soft_thresholding"]], "softshrink() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[77, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.softshrink"]], "sparsify_tensor() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.sparsify_tensor"]], "static_adaptive_avg_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[77, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_adaptive_avg_pool1d"]], "static_adaptive_avg_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[77, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_adaptive_avg_pool2d"]], "static_adaptive_max_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[77, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_adaptive_max_pool2d"]], "static_adaptive_max_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[77, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_adaptive_max_pool3d"]], "static_adjoint() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[77, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_adjoint"]], "static_allclose() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_allclose"]], "static_amax() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_amax"]], "static_amin() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_amin"]], "static_as_strided() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_as_strided"]], "static_atleast_1d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_atleast_1d"]], "static_atleast_2d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_atleast_2d"]], "static_atleast_3d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_atleast_3d"]], "static_avg_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[77, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_avg_pool1d"]], "static_avg_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[77, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_avg_pool2d"]], "static_avg_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[77, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_avg_pool3d"]], "static_batch_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[77, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_batch_norm"]], "static_batched_outer() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[77, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_batched_outer"]], "static_bernoulli() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[77, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_bernoulli"]], "static_beta() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[77, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_beta"]], "static_binarizer() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_binarizer"]], "static_bincount() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[77, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_bincount"]], "static_blackman_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[77, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_blackman_window"]], "static_broadcast_shapes() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_broadcast_shapes"]], "static_column_stack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_column_stack"]], "static_concat_from_sequence() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_concat_from_sequence"]], "static_cond() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[77, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_cond"]], "static_conj() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_conj"]], "static_copysign() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_copysign"]], "static_corrcoef() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[77, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_corrcoef"]], "static_count_nonzero() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_count_nonzero"]], "static_cov() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[77, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_cov"]], "static_dct() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[77, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_dct"]], "static_dft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[77, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_dft"]], "static_diagflat() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[77, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_diagflat"]], "static_diff() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_diff"]], "static_digamma() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_digamma"]], "static_dirichlet() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[77, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_dirichlet"]], "static_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[77, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_dot"]], "static_dsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_dsplit"]], "static_dstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_dstack"]], "static_eig() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[77, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_eig"]], "static_eigh_tridiagonal() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[77, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_eigh_tridiagonal"]], "static_eigvals() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[77, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_eigvals"]], "static_embedding() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[77, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_embedding"]], "static_erfc() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_erfc"]], "static_erfinv() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_erfinv"]], "static_expand() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_expand"]], "static_eye_like() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[77, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_eye_like"]], "static_fix() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_fix"]], "static_flatten() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_flatten"]], "static_fliplr() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_fliplr"]], "static_flipud() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_flipud"]], "static_float_power() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_float_power"]], "static_fmax() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_fmax"]], "static_fmod() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_fmod"]], "static_fold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_fold"]], "static_frexp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_frexp"]], "static_gamma() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[77, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_gamma"]], "static_gradient() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_gradient"]], "static_group_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[77, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_group_norm"]], "static_hamming_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[77, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_hamming_window"]], "static_hann_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[77, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_hann_window"]], "static_heaviside() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_heaviside"]], "static_higher_order_moment() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[77, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_higher_order_moment"]], "static_histogram() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[77, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_histogram"]], "static_hsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_hsplit"]], "static_hstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_hstack"]], "static_hypot() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_hypot"]], "static_i0() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_i0"]], "static_idct() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[77, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_idct"]], "static_ifft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[77, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_ifft"]], "static_ifftn() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[77, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_ifftn"]], "static_igamma() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[77, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_igamma"]], "static_initialize_tucker() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[77, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_initialize_tucker"]], "static_instance_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[77, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_instance_norm"]], "static_interpolate() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[77, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_interpolate"]], "static_invert_permutation() (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental static method)": [[77, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental.static_invert_permutation"]], "static_isclose() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_isclose"]], "static_kaiser_bessel_derived_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[77, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_kaiser_bessel_derived_window"]], "static_kaiser_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[77, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_kaiser_window"]], "static_kron() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[77, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_kron"]], "static_l1_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[77, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_l1_normalize"]], "static_l2_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[77, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_l2_normalize"]], "static_ldexp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_ldexp"]], "static_lerp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_lerp"]], "static_lexsort() (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental static method)": [[77, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental.static_lexsort"]], "static_lgamma() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[77, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_lgamma"]], "static_logit() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[77, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_logit"]], "static_logsigmoid() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[77, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_logsigmoid"]], "static_lp_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[77, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_lp_normalize"]], "static_make_svd_non_negative() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[77, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_make_svd_non_negative"]], "static_matricize() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_matricize"]], "static_matrix_exp() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[77, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_matrix_exp"]], "static_max_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[77, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_max_pool1d"]], "static_max_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[77, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_max_pool2d"]], "static_max_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[77, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_max_pool3d"]], "static_max_unpool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[77, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_max_unpool1d"]], "static_median() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[77, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_median"]], "static_mel_weight_matrix() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[77, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_mel_weight_matrix"]], "static_mode_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[77, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_mode_dot"]], "static_modf() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_modf"]], "static_moveaxis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_moveaxis"]], "static_multi_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[77, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_multi_dot"]], "static_multi_mode_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[77, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_multi_mode_dot"]], "static_nanmean() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[77, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_nanmean"]], "static_nanmedian() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[77, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_nanmedian"]], "static_nanprod() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[77, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_nanprod"]], "static_nansum() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_nansum"]], "static_nextafter() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_nextafter"]], "static_optional_get_element() (ivy.data_classes.container.experimental.utility._containerwithutilityexperimental static method)": [[77, "ivy.data_classes.container.experimental.utility._ContainerWithUtilityExperimental.static_optional_get_element"]], "static_pad() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_pad"]], "static_partial_fold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_partial_fold"]], "static_partial_tensor_to_vec() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_partial_tensor_to_vec"]], "static_partial_tucker() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[77, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_partial_tucker"]], "static_partial_unfold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_partial_unfold"]], "static_partial_vec_to_tensor() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_partial_vec_to_tensor"]], "static_poisson() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[77, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_poisson"]], "static_polyval() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[77, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_polyval"]], "static_prelu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[77, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_prelu"]], "static_quantile() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[77, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_quantile"]], "static_relu6() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[77, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_relu6"]], "static_rfft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[77, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_rfft"]], "static_rfftn() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[77, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_rfftn"]], "static_rnn() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[77, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_rnn"]], "static_rot90() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_rot90"]], "static_selu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[77, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_selu"]], "static_signbit() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_signbit"]], "static_sinc() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_sinc"]], "static_soft_thresholding() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_soft_thresholding"]], "static_sparsify_tensor() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_sparsify_tensor"]], "static_stft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[77, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_stft"]], "static_svd_flip() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[77, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_svd_flip"]], "static_take_along_axis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_take_along_axis"]], "static_tensor_train() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[77, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_tensor_train"]], "static_thresholded_relu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[77, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_thresholded_relu"]], "static_top_k() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_top_k"]], "static_tril_indices() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[77, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_tril_indices"]], "static_truncated_svd() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[77, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_truncated_svd"]], "static_tt_matrix_to_tensor() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[77, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_tt_matrix_to_tensor"]], "static_tucker() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[77, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_tucker"]], "static_unfold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_unfold"]], "static_unravel_index() (ivy.data_classes.container.experimental.searching._containerwithsearchingexperimental static method)": [[77, "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental.static_unravel_index"]], "static_unsorted_segment_mean() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[77, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_unsorted_segment_mean"]], "static_unsorted_segment_min() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[77, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_unsorted_segment_min"]], "static_unsorted_segment_sum() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[77, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_unsorted_segment_sum"]], "static_vorbis_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[77, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_vorbis_window"]], "static_vsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_vsplit"]], "static_vstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_vstack"]], "static_xlogy() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_xlogy"]], "static_zeta() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_zeta"]], "stft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[77, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.stft"]], "svd_flip() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[77, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.svd_flip"]], "take() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.take"]], "take_along_axis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.take_along_axis"]], "tanhshrink() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[77, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.tanhshrink"]], "tensor_train() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[77, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.tensor_train"]], "threshold() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[77, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.threshold"]], "thresholded_relu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[77, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.thresholded_relu"]], "top_k() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.top_k"]], "tril_indices() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[77, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.tril_indices"]], "trilu() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[77, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.trilu"]], "trim_zeros() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.trim_zeros"]], "truncated_svd() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[77, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.truncated_svd"]], "tt_matrix_to_tensor() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[77, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.tt_matrix_to_tensor"]], "tucker() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[77, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.tucker"]], "unflatten() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.unflatten"]], "unfold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.unfold"]], "unique_consecutive() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.unique_consecutive"]], "unravel_index() (ivy.data_classes.container.experimental.searching._containerwithsearchingexperimental method)": [[77, "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental.unravel_index"]], "unsorted_segment_mean() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[77, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.unsorted_segment_mean"]], "unsorted_segment_min() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[77, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.unsorted_segment_min"]], "unsorted_segment_sum() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[77, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.unsorted_segment_sum"]], "vorbis_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[77, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.vorbis_window"]], "vsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.vsplit"]], "vstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[77, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.vstack"]], "xlogy() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.xlogy"]], "zeta() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[77, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.zeta"]], "_containerwithgeneral (class in ivy.data_classes.container.general)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral"]], "_abc_impl (ivy.data_classes.container.general._containerwithgeneral attribute)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral._abc_impl"]], "_static_all_equal() (ivy.data_classes.container.general._containerwithgeneral static method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral._static_all_equal"]], "_static_array_equal() (ivy.data_classes.container.general._containerwithgeneral static method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral._static_array_equal"]], "_static_assert_supports_inplace() (ivy.data_classes.container.general._containerwithgeneral static method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral._static_assert_supports_inplace"]], "_static_clip_matrix_norm() (ivy.data_classes.container.general._containerwithgeneral static method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral._static_clip_matrix_norm"]], "_static_clip_vector_norm() (ivy.data_classes.container.general._containerwithgeneral static method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral._static_clip_vector_norm"]], "_static_einops_rearrange() (ivy.data_classes.container.general._containerwithgeneral static method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral._static_einops_rearrange"]], "_static_einops_reduce() (ivy.data_classes.container.general._containerwithgeneral static method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral._static_einops_reduce"]], "_static_einops_repeat() (ivy.data_classes.container.general._containerwithgeneral static method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral._static_einops_repeat"]], "_static_exists() (ivy.data_classes.container.general._containerwithgeneral static method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral._static_exists"]], "_static_fourier_encode() (ivy.data_classes.container.general._containerwithgeneral static method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral._static_fourier_encode"]], "_static_gather() (ivy.data_classes.container.general._containerwithgeneral static method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral._static_gather"]], "_static_gather_nd() (ivy.data_classes.container.general._containerwithgeneral static method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral._static_gather_nd"]], "_static_get_num_dims() (ivy.data_classes.container.general._containerwithgeneral static method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral._static_get_num_dims"]], "_static_has_nans() (ivy.data_classes.container.general._containerwithgeneral static method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral._static_has_nans"]], "_static_inplace_decrement() (ivy.data_classes.container.general._containerwithgeneral static method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral._static_inplace_decrement"]], "_static_inplace_increment() (ivy.data_classes.container.general._containerwithgeneral static method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral._static_inplace_increment"]], "_static_inplace_update() (ivy.data_classes.container.general._containerwithgeneral static method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral._static_inplace_update"]], "_static_is_array() (ivy.data_classes.container.general._containerwithgeneral static method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral._static_is_array"]], "_static_is_ivy_array() (ivy.data_classes.container.general._containerwithgeneral static method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral._static_is_ivy_array"]], "_static_is_native_array() (ivy.data_classes.container.general._containerwithgeneral static method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral._static_is_native_array"]], "_static_scatter_flat() (ivy.data_classes.container.general._containerwithgeneral static method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral._static_scatter_flat"]], "_static_scatter_nd() (ivy.data_classes.container.general._containerwithgeneral static method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral._static_scatter_nd"]], "_static_size() (ivy.data_classes.container.general._containerwithgeneral static method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral._static_size"]], "_static_stable_divide() (ivy.data_classes.container.general._containerwithgeneral static method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral._static_stable_divide"]], "_static_stable_pow() (ivy.data_classes.container.general._containerwithgeneral static method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral._static_stable_pow"]], "_static_supports_inplace_updates() (ivy.data_classes.container.general._containerwithgeneral static method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral._static_supports_inplace_updates"]], "_static_to_list() (ivy.data_classes.container.general._containerwithgeneral static method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral._static_to_list"]], "_static_to_numpy() (ivy.data_classes.container.general._containerwithgeneral static method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral._static_to_numpy"]], "_static_to_scalar() (ivy.data_classes.container.general._containerwithgeneral static method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral._static_to_scalar"]], "_static_value_is_nan() (ivy.data_classes.container.general._containerwithgeneral static method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral._static_value_is_nan"]], "all_equal() (ivy.data_classes.container.general._containerwithgeneral method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral.all_equal"]], "array_equal() (ivy.data_classes.container.general._containerwithgeneral method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral.array_equal"]], "assert_supports_inplace() (ivy.data_classes.container.general._containerwithgeneral method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral.assert_supports_inplace"]], "clip_matrix_norm() (ivy.data_classes.container.general._containerwithgeneral method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral.clip_matrix_norm"]], "clip_vector_norm() (ivy.data_classes.container.general._containerwithgeneral method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral.clip_vector_norm"]], "einops_rearrange() (ivy.data_classes.container.general._containerwithgeneral method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral.einops_rearrange"]], "einops_reduce() (ivy.data_classes.container.general._containerwithgeneral method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral.einops_reduce"]], "einops_repeat() (ivy.data_classes.container.general._containerwithgeneral method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral.einops_repeat"]], "exists() (ivy.data_classes.container.general._containerwithgeneral method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral.exists"]], "fourier_encode() (ivy.data_classes.container.general._containerwithgeneral method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral.fourier_encode"]], "gather() (ivy.data_classes.container.general._containerwithgeneral method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral.gather"]], "gather_nd() (ivy.data_classes.container.general._containerwithgeneral method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral.gather_nd"]], "get_num_dims() (ivy.data_classes.container.general._containerwithgeneral method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral.get_num_dims"]], "has_nans() (ivy.data_classes.container.general._containerwithgeneral method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral.has_nans"]], "inplace_decrement() (ivy.data_classes.container.general._containerwithgeneral method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral.inplace_decrement"]], "inplace_increment() (ivy.data_classes.container.general._containerwithgeneral method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral.inplace_increment"]], "inplace_update() (ivy.data_classes.container.general._containerwithgeneral method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral.inplace_update"]], "is_array() (ivy.data_classes.container.general._containerwithgeneral method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral.is_array"]], "is_ivy_array() (ivy.data_classes.container.general._containerwithgeneral method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral.is_ivy_array"]], "is_native_array() (ivy.data_classes.container.general._containerwithgeneral method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral.is_native_array"]], "isin() (ivy.data_classes.container.general._containerwithgeneral method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral.isin"]], "itemsize() (ivy.data_classes.container.general._containerwithgeneral method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral.itemsize"]], "ivy.data_classes.container.general": [[78, "module-ivy.data_classes.container.general"]], "scatter_flat() (ivy.data_classes.container.general._containerwithgeneral method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral.scatter_flat"]], "scatter_nd() (ivy.data_classes.container.general._containerwithgeneral method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral.scatter_nd"]], "size() (ivy.data_classes.container.general._containerwithgeneral method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral.size"]], "stable_divide() (ivy.data_classes.container.general._containerwithgeneral method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral.stable_divide"]], "stable_pow() (ivy.data_classes.container.general._containerwithgeneral method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral.stable_pow"]], "static_isin() (ivy.data_classes.container.general._containerwithgeneral static method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral.static_isin"]], "static_itemsize() (ivy.data_classes.container.general._containerwithgeneral static method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral.static_itemsize"]], "static_strides() (ivy.data_classes.container.general._containerwithgeneral static method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral.static_strides"]], "strides() (ivy.data_classes.container.general._containerwithgeneral method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral.strides"]], "supports_inplace_updates() (ivy.data_classes.container.general._containerwithgeneral method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral.supports_inplace_updates"]], "to_list() (ivy.data_classes.container.general._containerwithgeneral method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral.to_list"]], "to_numpy() (ivy.data_classes.container.general._containerwithgeneral method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral.to_numpy"]], "to_scalar() (ivy.data_classes.container.general._containerwithgeneral method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral.to_scalar"]], "value_is_nan() (ivy.data_classes.container.general._containerwithgeneral method)": [[78, "ivy.data_classes.container.general._ContainerWithGeneral.value_is_nan"]], "_containerwithgradients (class in ivy.data_classes.container.gradients)": [[79, "ivy.data_classes.container.gradients._ContainerWithGradients"]], "_abc_impl (ivy.data_classes.container.gradients._containerwithgradients attribute)": [[79, "ivy.data_classes.container.gradients._ContainerWithGradients._abc_impl"]], "_static_stop_gradient() (ivy.data_classes.container.gradients._containerwithgradients static method)": [[79, "ivy.data_classes.container.gradients._ContainerWithGradients._static_stop_gradient"]], "adam_step() (ivy.data_classes.container.gradients._containerwithgradients method)": [[79, "ivy.data_classes.container.gradients._ContainerWithGradients.adam_step"]], "adam_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[79, "ivy.data_classes.container.gradients._ContainerWithGradients.adam_update"]], "gradient_descent_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[79, "ivy.data_classes.container.gradients._ContainerWithGradients.gradient_descent_update"]], "ivy.data_classes.container.gradients": [[79, "module-ivy.data_classes.container.gradients"]], "lamb_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[79, "ivy.data_classes.container.gradients._ContainerWithGradients.lamb_update"]], "lars_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[79, "ivy.data_classes.container.gradients._ContainerWithGradients.lars_update"]], "optimizer_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[79, "ivy.data_classes.container.gradients._ContainerWithGradients.optimizer_update"]], "stop_gradient() (ivy.data_classes.container.gradients._containerwithgradients method)": [[79, "ivy.data_classes.container.gradients._ContainerWithGradients.stop_gradient"]], "_containerwithimage (class in ivy.data_classes.container.image)": [[80, "ivy.data_classes.container.image._ContainerWithImage"]], "_abc_impl (ivy.data_classes.container.image._containerwithimage attribute)": [[80, "ivy.data_classes.container.image._ContainerWithImage._abc_impl"]], "ivy.data_classes.container.image": [[80, "module-ivy.data_classes.container.image"]], "_containerwithlayers (class in ivy.data_classes.container.layers)": [[81, "ivy.data_classes.container.layers._ContainerWithLayers"]], "_abc_impl (ivy.data_classes.container.layers._containerwithlayers attribute)": [[81, "ivy.data_classes.container.layers._ContainerWithLayers._abc_impl"]], "_static_conv1d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[81, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv1d"]], "_static_conv1d_transpose() (ivy.data_classes.container.layers._containerwithlayers static method)": [[81, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv1d_transpose"]], "_static_conv2d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[81, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv2d"]], "_static_conv2d_transpose() (ivy.data_classes.container.layers._containerwithlayers static method)": [[81, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv2d_transpose"]], "_static_conv3d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[81, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv3d"]], "_static_conv3d_transpose() (ivy.data_classes.container.layers._containerwithlayers static method)": [[81, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv3d_transpose"]], "_static_depthwise_conv2d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[81, "ivy.data_classes.container.layers._ContainerWithLayers._static_depthwise_conv2d"]], "_static_dropout() (ivy.data_classes.container.layers._containerwithlayers static method)": [[81, "ivy.data_classes.container.layers._ContainerWithLayers._static_dropout"]], "_static_dropout1d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[81, "ivy.data_classes.container.layers._ContainerWithLayers._static_dropout1d"]], "_static_dropout2d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[81, "ivy.data_classes.container.layers._ContainerWithLayers._static_dropout2d"]], "_static_dropout3d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[81, "ivy.data_classes.container.layers._ContainerWithLayers._static_dropout3d"]], "_static_linear() (ivy.data_classes.container.layers._containerwithlayers static method)": [[81, "ivy.data_classes.container.layers._ContainerWithLayers._static_linear"]], "_static_lstm_update() (ivy.data_classes.container.layers._containerwithlayers static method)": [[81, "ivy.data_classes.container.layers._ContainerWithLayers._static_lstm_update"]], "_static_multi_head_attention() (ivy.data_classes.container.layers._containerwithlayers static method)": [[81, "ivy.data_classes.container.layers._ContainerWithLayers._static_multi_head_attention"]], "_static_reduce_window() (ivy.data_classes.container.layers._containerwithlayers static method)": [[81, "ivy.data_classes.container.layers._ContainerWithLayers._static_reduce_window"]], "_static_scaled_dot_product_attention() (ivy.data_classes.container.layers._containerwithlayers static method)": [[81, "ivy.data_classes.container.layers._ContainerWithLayers._static_scaled_dot_product_attention"]], "conv1d() (ivy.data_classes.container.layers._containerwithlayers method)": [[81, "ivy.data_classes.container.layers._ContainerWithLayers.conv1d"]], "conv1d_transpose() (ivy.data_classes.container.layers._containerwithlayers method)": [[81, "ivy.data_classes.container.layers._ContainerWithLayers.conv1d_transpose"]], "conv2d() (ivy.data_classes.container.layers._containerwithlayers method)": [[81, "ivy.data_classes.container.layers._ContainerWithLayers.conv2d"]], "conv2d_transpose() (ivy.data_classes.container.layers._containerwithlayers method)": [[81, "ivy.data_classes.container.layers._ContainerWithLayers.conv2d_transpose"]], "conv3d() (ivy.data_classes.container.layers._containerwithlayers method)": [[81, "ivy.data_classes.container.layers._ContainerWithLayers.conv3d"]], "conv3d_transpose() (ivy.data_classes.container.layers._containerwithlayers method)": [[81, "ivy.data_classes.container.layers._ContainerWithLayers.conv3d_transpose"]], "depthwise_conv2d() (ivy.data_classes.container.layers._containerwithlayers method)": [[81, "ivy.data_classes.container.layers._ContainerWithLayers.depthwise_conv2d"]], "dropout() (ivy.data_classes.container.layers._containerwithlayers method)": [[81, "ivy.data_classes.container.layers._ContainerWithLayers.dropout"]], "dropout1d() (ivy.data_classes.container.layers._containerwithlayers method)": [[81, "ivy.data_classes.container.layers._ContainerWithLayers.dropout1d"]], "dropout2d() (ivy.data_classes.container.layers._containerwithlayers method)": [[81, "ivy.data_classes.container.layers._ContainerWithLayers.dropout2d"]], "dropout3d() (ivy.data_classes.container.layers._containerwithlayers method)": [[81, "ivy.data_classes.container.layers._ContainerWithLayers.dropout3d"]], "ivy.data_classes.container.layers": [[81, "module-ivy.data_classes.container.layers"]], "linear() (ivy.data_classes.container.layers._containerwithlayers method)": [[81, "ivy.data_classes.container.layers._ContainerWithLayers.linear"]], "lstm_update() (ivy.data_classes.container.layers._containerwithlayers method)": [[81, "ivy.data_classes.container.layers._ContainerWithLayers.lstm_update"]], "multi_head_attention() (ivy.data_classes.container.layers._containerwithlayers method)": [[81, "ivy.data_classes.container.layers._ContainerWithLayers.multi_head_attention"]], "reduce_window() (ivy.data_classes.container.layers._containerwithlayers method)": [[81, "ivy.data_classes.container.layers._ContainerWithLayers.reduce_window"]], "scaled_dot_product_attention() (ivy.data_classes.container.layers._containerwithlayers method)": [[81, "ivy.data_classes.container.layers._ContainerWithLayers.scaled_dot_product_attention"]], "_containerwithlinearalgebra (class in ivy.data_classes.container.linear_algebra)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra"]], "_abc_impl (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra attribute)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._abc_impl"]], "_static_cholesky() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_cholesky"]], "_static_cross() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_cross"]], "_static_det() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_det"]], "_static_diag() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_diag"]], "_static_diagonal() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_diagonal"]], "_static_eigh() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_eigh"]], "_static_eigvalsh() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_eigvalsh"]], "_static_inner() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_inner"]], "_static_inv() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_inv"]], "_static_matmul() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matmul"]], "_static_matrix_norm() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matrix_norm"]], "_static_matrix_power() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matrix_power"]], "_static_matrix_rank() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matrix_rank"]], "_static_matrix_transpose() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matrix_transpose"]], "_static_outer() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_outer"]], "_static_pinv() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_pinv"]], "_static_qr() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_qr"]], "_static_slogdet() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_slogdet"]], "_static_solve() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_solve"]], "_static_svd() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_svd"]], "_static_svdvals() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_svdvals"]], "_static_tensordot() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_tensordot"]], "_static_tensorsolve() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_tensorsolve"]], "_static_trace() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_trace"]], "_static_vander() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_vander"]], "_static_vecdot() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_vecdot"]], "_static_vector_norm() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_vector_norm"]], "_static_vector_to_skew_symmetric_matrix() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_vector_to_skew_symmetric_matrix"]], "cholesky() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.cholesky"]], "cross() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.cross"]], "det() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.det"]], "diag() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.diag"]], "diagonal() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.diagonal"]], "eigh() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.eigh"]], "eigvalsh() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.eigvalsh"]], "general_inner_product() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.general_inner_product"]], "inner() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.inner"]], "inv() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.inv"]], "ivy.data_classes.container.linear_algebra": [[82, "module-ivy.data_classes.container.linear_algebra"]], "matmul() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matmul"]], "matrix_norm() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matrix_norm"]], "matrix_power() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matrix_power"]], "matrix_rank() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matrix_rank"]], "matrix_transpose() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matrix_transpose"]], "outer() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.outer"]], "pinv() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.pinv"]], "qr() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.qr"]], "slogdet() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.slogdet"]], "solve() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.solve"]], "static_general_inner_product() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.static_general_inner_product"]], "svd() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.svd"]], "svdvals() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.svdvals"]], "tensordot() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.tensordot"]], "tensorsolve() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.tensorsolve"]], "trace() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.trace"]], "vander() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.vander"]], "vecdot() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.vecdot"]], "vector_norm() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.vector_norm"]], "vector_to_skew_symmetric_matrix() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[82, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.vector_to_skew_symmetric_matrix"]], "_containerwithlosses (class in ivy.data_classes.container.losses)": [[83, "ivy.data_classes.container.losses._ContainerWithLosses"]], "_abc_impl (ivy.data_classes.container.losses._containerwithlosses attribute)": [[83, "ivy.data_classes.container.losses._ContainerWithLosses._abc_impl"]], "_static_binary_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses static method)": [[83, "ivy.data_classes.container.losses._ContainerWithLosses._static_binary_cross_entropy"]], "_static_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses static method)": [[83, "ivy.data_classes.container.losses._ContainerWithLosses._static_cross_entropy"]], "_static_sparse_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses static method)": [[83, "ivy.data_classes.container.losses._ContainerWithLosses._static_sparse_cross_entropy"]], "binary_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses method)": [[83, "ivy.data_classes.container.losses._ContainerWithLosses.binary_cross_entropy"]], "cross_entropy() (ivy.data_classes.container.losses._containerwithlosses method)": [[83, "ivy.data_classes.container.losses._ContainerWithLosses.cross_entropy"]], "ivy.data_classes.container.losses": [[83, "module-ivy.data_classes.container.losses"]], "sparse_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses method)": [[83, "ivy.data_classes.container.losses._ContainerWithLosses.sparse_cross_entropy"]], "_containerwithmanipulation (class in ivy.data_classes.container.manipulation)": [[84, "ivy.data_classes.container.manipulation._ContainerWithManipulation"]], "_abc_impl (ivy.data_classes.container.manipulation._containerwithmanipulation attribute)": [[84, "ivy.data_classes.container.manipulation._ContainerWithManipulation._abc_impl"]], "_static_clip() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[84, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_clip"]], "_static_concat() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[84, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_concat"]], "_static_constant_pad() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[84, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_constant_pad"]], "_static_expand_dims() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[84, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_expand_dims"]], "_static_flip() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[84, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_flip"]], "_static_permute_dims() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[84, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_permute_dims"]], "_static_repeat() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[84, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_repeat"]], "_static_reshape() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[84, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_reshape"]], "_static_roll() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[84, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_roll"]], "_static_split() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[84, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_split"]], "_static_squeeze() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[84, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_squeeze"]], "_static_stack() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[84, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_stack"]], "_static_swapaxes() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[84, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_swapaxes"]], "_static_tile() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[84, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_tile"]], "_static_unstack() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[84, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_unstack"]], "_static_zero_pad() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[84, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_zero_pad"]], "clip() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[84, "ivy.data_classes.container.manipulation._ContainerWithManipulation.clip"]], "concat() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[84, "ivy.data_classes.container.manipulation._ContainerWithManipulation.concat"]], "constant_pad() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[84, "ivy.data_classes.container.manipulation._ContainerWithManipulation.constant_pad"]], "expand_dims() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[84, "ivy.data_classes.container.manipulation._ContainerWithManipulation.expand_dims"]], "flip() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[84, "ivy.data_classes.container.manipulation._ContainerWithManipulation.flip"]], "ivy.data_classes.container.manipulation": [[84, "module-ivy.data_classes.container.manipulation"]], "permute_dims() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[84, "ivy.data_classes.container.manipulation._ContainerWithManipulation.permute_dims"]], "repeat() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[84, "ivy.data_classes.container.manipulation._ContainerWithManipulation.repeat"]], "reshape() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[84, "ivy.data_classes.container.manipulation._ContainerWithManipulation.reshape"]], "roll() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[84, "ivy.data_classes.container.manipulation._ContainerWithManipulation.roll"]], "split() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[84, "ivy.data_classes.container.manipulation._ContainerWithManipulation.split"]], "squeeze() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[84, "ivy.data_classes.container.manipulation._ContainerWithManipulation.squeeze"]], "stack() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[84, "ivy.data_classes.container.manipulation._ContainerWithManipulation.stack"]], "swapaxes() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[84, "ivy.data_classes.container.manipulation._ContainerWithManipulation.swapaxes"]], "tile() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[84, "ivy.data_classes.container.manipulation._ContainerWithManipulation.tile"]], "unstack() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[84, "ivy.data_classes.container.manipulation._ContainerWithManipulation.unstack"]], "zero_pad() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[84, "ivy.data_classes.container.manipulation._ContainerWithManipulation.zero_pad"]], "_containerwithnorms (class in ivy.data_classes.container.norms)": [[85, "ivy.data_classes.container.norms._ContainerWithNorms"]], "_abc_impl (ivy.data_classes.container.norms._containerwithnorms attribute)": [[85, "ivy.data_classes.container.norms._ContainerWithNorms._abc_impl"]], "ivy.data_classes.container.norms": [[85, "module-ivy.data_classes.container.norms"]], "layer_norm() (ivy.data_classes.container.norms._containerwithnorms method)": [[85, "ivy.data_classes.container.norms._ContainerWithNorms.layer_norm"]], "_containerwithrandom (class in ivy.data_classes.container.random)": [[86, "ivy.data_classes.container.random._ContainerWithRandom"]], "_abc_impl (ivy.data_classes.container.random._containerwithrandom attribute)": [[86, "ivy.data_classes.container.random._ContainerWithRandom._abc_impl"]], "_static_multinomial() (ivy.data_classes.container.random._containerwithrandom static method)": [[86, "ivy.data_classes.container.random._ContainerWithRandom._static_multinomial"]], "_static_randint() (ivy.data_classes.container.random._containerwithrandom static method)": [[86, "ivy.data_classes.container.random._ContainerWithRandom._static_randint"]], "_static_random_normal() (ivy.data_classes.container.random._containerwithrandom static method)": [[86, "ivy.data_classes.container.random._ContainerWithRandom._static_random_normal"]], "_static_random_uniform() (ivy.data_classes.container.random._containerwithrandom static method)": [[86, "ivy.data_classes.container.random._ContainerWithRandom._static_random_uniform"]], "_static_shuffle() (ivy.data_classes.container.random._containerwithrandom static method)": [[86, "ivy.data_classes.container.random._ContainerWithRandom._static_shuffle"]], "ivy.data_classes.container.random": [[86, "module-ivy.data_classes.container.random"]], "multinomial() (ivy.data_classes.container.random._containerwithrandom method)": [[86, "ivy.data_classes.container.random._ContainerWithRandom.multinomial"]], "randint() (ivy.data_classes.container.random._containerwithrandom method)": [[86, "ivy.data_classes.container.random._ContainerWithRandom.randint"]], "random_normal() (ivy.data_classes.container.random._containerwithrandom method)": [[86, "ivy.data_classes.container.random._ContainerWithRandom.random_normal"]], "random_uniform() (ivy.data_classes.container.random._containerwithrandom method)": [[86, "ivy.data_classes.container.random._ContainerWithRandom.random_uniform"]], "shuffle() (ivy.data_classes.container.random._containerwithrandom method)": [[86, "ivy.data_classes.container.random._ContainerWithRandom.shuffle"]], "_containerwithsearching (class in ivy.data_classes.container.searching)": [[87, "ivy.data_classes.container.searching._ContainerWithSearching"]], "_abc_impl (ivy.data_classes.container.searching._containerwithsearching attribute)": [[87, "ivy.data_classes.container.searching._ContainerWithSearching._abc_impl"]], "_static_argmax() (ivy.data_classes.container.searching._containerwithsearching static method)": [[87, "ivy.data_classes.container.searching._ContainerWithSearching._static_argmax"]], "_static_argmin() (ivy.data_classes.container.searching._containerwithsearching static method)": [[87, "ivy.data_classes.container.searching._ContainerWithSearching._static_argmin"]], "_static_argwhere() (ivy.data_classes.container.searching._containerwithsearching static method)": [[87, "ivy.data_classes.container.searching._ContainerWithSearching._static_argwhere"]], "_static_nonzero() (ivy.data_classes.container.searching._containerwithsearching static method)": [[87, "ivy.data_classes.container.searching._ContainerWithSearching._static_nonzero"]], "_static_where() (ivy.data_classes.container.searching._containerwithsearching static method)": [[87, "ivy.data_classes.container.searching._ContainerWithSearching._static_where"]], "argmax() (ivy.data_classes.container.searching._containerwithsearching method)": [[87, "ivy.data_classes.container.searching._ContainerWithSearching.argmax"]], "argmin() (ivy.data_classes.container.searching._containerwithsearching method)": [[87, "ivy.data_classes.container.searching._ContainerWithSearching.argmin"]], "argwhere() (ivy.data_classes.container.searching._containerwithsearching method)": [[87, "ivy.data_classes.container.searching._ContainerWithSearching.argwhere"]], "ivy.data_classes.container.searching": [[87, "module-ivy.data_classes.container.searching"]], "nonzero() (ivy.data_classes.container.searching._containerwithsearching method)": [[87, "ivy.data_classes.container.searching._ContainerWithSearching.nonzero"]], "where() (ivy.data_classes.container.searching._containerwithsearching method)": [[87, "ivy.data_classes.container.searching._ContainerWithSearching.where"]], "_containerwithset (class in ivy.data_classes.container.set)": [[88, "ivy.data_classes.container.set._ContainerWithSet"]], "_abc_impl (ivy.data_classes.container.set._containerwithset attribute)": [[88, "ivy.data_classes.container.set._ContainerWithSet._abc_impl"]], "_static_unique_all() (ivy.data_classes.container.set._containerwithset static method)": [[88, "ivy.data_classes.container.set._ContainerWithSet._static_unique_all"]], "_static_unique_counts() (ivy.data_classes.container.set._containerwithset static method)": [[88, "ivy.data_classes.container.set._ContainerWithSet._static_unique_counts"]], "_static_unique_inverse() (ivy.data_classes.container.set._containerwithset static method)": [[88, "ivy.data_classes.container.set._ContainerWithSet._static_unique_inverse"]], "_static_unique_values() (ivy.data_classes.container.set._containerwithset static method)": [[88, "ivy.data_classes.container.set._ContainerWithSet._static_unique_values"]], "ivy.data_classes.container.set": [[88, "module-ivy.data_classes.container.set"]], "unique_all() (ivy.data_classes.container.set._containerwithset method)": [[88, "ivy.data_classes.container.set._ContainerWithSet.unique_all"]], "unique_counts() (ivy.data_classes.container.set._containerwithset method)": [[88, "ivy.data_classes.container.set._ContainerWithSet.unique_counts"]], "unique_inverse() (ivy.data_classes.container.set._containerwithset method)": [[88, "ivy.data_classes.container.set._ContainerWithSet.unique_inverse"]], "unique_values() (ivy.data_classes.container.set._containerwithset method)": [[88, "ivy.data_classes.container.set._ContainerWithSet.unique_values"]], "_containerwithsorting (class in ivy.data_classes.container.sorting)": [[89, "ivy.data_classes.container.sorting._ContainerWithSorting"]], "_abc_impl (ivy.data_classes.container.sorting._containerwithsorting attribute)": [[89, "ivy.data_classes.container.sorting._ContainerWithSorting._abc_impl"]], "_static_argsort() (ivy.data_classes.container.sorting._containerwithsorting static method)": [[89, "ivy.data_classes.container.sorting._ContainerWithSorting._static_argsort"]], "_static_searchsorted() (ivy.data_classes.container.sorting._containerwithsorting static method)": [[89, "ivy.data_classes.container.sorting._ContainerWithSorting._static_searchsorted"]], "_static_sort() (ivy.data_classes.container.sorting._containerwithsorting static method)": [[89, "ivy.data_classes.container.sorting._ContainerWithSorting._static_sort"]], "argsort() (ivy.data_classes.container.sorting._containerwithsorting method)": [[89, "ivy.data_classes.container.sorting._ContainerWithSorting.argsort"]], "ivy.data_classes.container.sorting": [[89, "module-ivy.data_classes.container.sorting"]], "msort() (ivy.data_classes.container.sorting._containerwithsorting method)": [[89, "ivy.data_classes.container.sorting._ContainerWithSorting.msort"]], "searchsorted() (ivy.data_classes.container.sorting._containerwithsorting method)": [[89, "ivy.data_classes.container.sorting._ContainerWithSorting.searchsorted"]], "sort() (ivy.data_classes.container.sorting._containerwithsorting method)": [[89, "ivy.data_classes.container.sorting._ContainerWithSorting.sort"]], "static_msort() (ivy.data_classes.container.sorting._containerwithsorting static method)": [[89, "ivy.data_classes.container.sorting._ContainerWithSorting.static_msort"]], "_containerwithstatistical (class in ivy.data_classes.container.statistical)": [[90, "ivy.data_classes.container.statistical._ContainerWithStatistical"]], "_abc_impl (ivy.data_classes.container.statistical._containerwithstatistical attribute)": [[90, "ivy.data_classes.container.statistical._ContainerWithStatistical._abc_impl"]], "_static_cumprod() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[90, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_cumprod"]], "_static_cumsum() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[90, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_cumsum"]], "_static_min() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[90, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_min"]], "_static_prod() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[90, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_prod"]], "_static_sum() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[90, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_sum"]], "_static_var() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[90, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_var"]], "cumprod() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[90, "ivy.data_classes.container.statistical._ContainerWithStatistical.cumprod"]], "cumsum() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[90, "ivy.data_classes.container.statistical._ContainerWithStatistical.cumsum"]], "einsum() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[90, "ivy.data_classes.container.statistical._ContainerWithStatistical.einsum"]], "ivy.data_classes.container.statistical": [[90, "module-ivy.data_classes.container.statistical"]], "max() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[90, "ivy.data_classes.container.statistical._ContainerWithStatistical.max"]], "mean() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[90, "ivy.data_classes.container.statistical._ContainerWithStatistical.mean"]], "min() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[90, "ivy.data_classes.container.statistical._ContainerWithStatistical.min"]], "prod() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[90, "ivy.data_classes.container.statistical._ContainerWithStatistical.prod"]], "std() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[90, "ivy.data_classes.container.statistical._ContainerWithStatistical.std"]], "sum() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[90, "ivy.data_classes.container.statistical._ContainerWithStatistical.sum"]], "var() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[90, "ivy.data_classes.container.statistical._ContainerWithStatistical.var"]], "_containerwithutility (class in ivy.data_classes.container.utility)": [[91, "ivy.data_classes.container.utility._ContainerWithUtility"]], "_abc_impl (ivy.data_classes.container.utility._containerwithutility attribute)": [[91, "ivy.data_classes.container.utility._ContainerWithUtility._abc_impl"]], "_static_all() (ivy.data_classes.container.utility._containerwithutility static method)": [[91, "ivy.data_classes.container.utility._ContainerWithUtility._static_all"]], "_static_any() (ivy.data_classes.container.utility._containerwithutility static method)": [[91, "ivy.data_classes.container.utility._ContainerWithUtility._static_any"]], "all() (ivy.data_classes.container.utility._containerwithutility method)": [[91, "ivy.data_classes.container.utility._ContainerWithUtility.all"]], "any() (ivy.data_classes.container.utility._containerwithutility method)": [[91, "ivy.data_classes.container.utility._ContainerWithUtility.any"]], "ivy.data_classes.container.utility": [[91, "module-ivy.data_classes.container.utility"]], "_wrap_function() (in module ivy.data_classes.container.wrapping)": [[92, "ivy.data_classes.container.wrapping._wrap_function"]], "add_ivy_container_instance_methods() (in module ivy.data_classes.container.wrapping)": [[92, "ivy.data_classes.container.wrapping.add_ivy_container_instance_methods"]], "ivy.data_classes.container.wrapping": [[92, "module-ivy.data_classes.container.wrapping"]], "factorizedtensor (class in ivy.data_classes.factorized_tensor.base)": [[93, "ivy.data_classes.factorized_tensor.base.FactorizedTensor"]], "__init__() (ivy.data_classes.factorized_tensor.base.factorizedtensor method)": [[93, "ivy.data_classes.factorized_tensor.base.FactorizedTensor.__init__"]], "_abc_impl (ivy.data_classes.factorized_tensor.base.factorizedtensor attribute)": [[93, "ivy.data_classes.factorized_tensor.base.FactorizedTensor._abc_impl"]], "ivy.data_classes.factorized_tensor.base": [[93, "module-ivy.data_classes.factorized_tensor.base"]], "mode_dot() (ivy.data_classes.factorized_tensor.base.factorizedtensor method)": [[93, "ivy.data_classes.factorized_tensor.base.FactorizedTensor.mode_dot"]], "norm() (ivy.data_classes.factorized_tensor.base.factorizedtensor method)": [[93, "ivy.data_classes.factorized_tensor.base.FactorizedTensor.norm"]], "to_tensor() (ivy.data_classes.factorized_tensor.base.factorizedtensor method)": [[93, "ivy.data_classes.factorized_tensor.base.FactorizedTensor.to_tensor"]], "to_unfolded() (ivy.data_classes.factorized_tensor.base.factorizedtensor method)": [[93, "ivy.data_classes.factorized_tensor.base.FactorizedTensor.to_unfolded"]], "to_vec() (ivy.data_classes.factorized_tensor.base.factorizedtensor method)": [[93, "ivy.data_classes.factorized_tensor.base.FactorizedTensor.to_vec"]], "cptensor (class in ivy.data_classes.factorized_tensor.cp_tensor)": [[94, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor"]], "__init__() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[94, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.__init__"]], "_abc_impl (ivy.data_classes.factorized_tensor.cp_tensor.cptensor attribute)": [[94, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor._abc_impl"]], "cp_copy() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[94, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_copy"]], "cp_flip_sign() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[94, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_flip_sign"]], "cp_lstsq_grad() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[94, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_lstsq_grad"]], "cp_mode_dot() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[94, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_mode_dot"]], "cp_n_param() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[94, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_n_param"]], "cp_norm() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[94, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_norm"]], "cp_normalize() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[94, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_normalize"]], "cp_to_tensor() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[94, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_to_tensor"]], "cp_to_unfolded() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[94, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_to_unfolded"]], "cp_to_vec() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[94, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_to_vec"]], "ivy.data_classes.factorized_tensor.cp_tensor": [[94, "module-ivy.data_classes.factorized_tensor.cp_tensor"]], "mode_dot() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[94, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.mode_dot"]], "n_param (ivy.data_classes.factorized_tensor.cp_tensor.cptensor property)": [[94, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.n_param"]], "norm() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[94, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.norm"]], "normalize() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[94, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.normalize"]], "to_tensor() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[94, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.to_tensor"]], "to_unfolded() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[94, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.to_unfolded"]], "to_vec() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[94, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.to_vec"]], "unfolding_dot_khatri_rao() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[94, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.unfolding_dot_khatri_rao"]], "validate_cp_rank() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[94, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.validate_cp_rank"]], "validate_cp_tensor() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[94, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.validate_cp_tensor"]], "parafac2tensor (class in ivy.data_classes.factorized_tensor.parafac2_tensor)": [[95, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor"]], "__init__() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor method)": [[95, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.__init__"]], "_abc_impl (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor attribute)": [[95, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor._abc_impl"]], "apply_parafac2_projections() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor static method)": [[95, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.apply_parafac2_projections"]], "from_cptensor() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor class method)": [[95, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.from_CPTensor"]], "ivy.data_classes.factorized_tensor.parafac2_tensor": [[95, "module-ivy.data_classes.factorized_tensor.parafac2_tensor"]], "n_param (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor property)": [[95, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.n_param"]], "parafac2_normalise() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor static method)": [[95, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.parafac2_normalise"]], "parafac2_to_slice() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor static method)": [[95, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.parafac2_to_slice"]], "parafac2_to_slices() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor static method)": [[95, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.parafac2_to_slices"]], "parafac2_to_tensor() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor static method)": [[95, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.parafac2_to_tensor"]], "parafac2_to_unfolded() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor static method)": [[95, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.parafac2_to_unfolded"]], "parafac2_to_vec() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor static method)": [[95, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.parafac2_to_vec"]], "to_tensor() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor method)": [[95, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.to_tensor"]], "to_unfolded() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor method)": [[95, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.to_unfolded"]], "to_vec() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor method)": [[95, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.to_vec"]], "validate_parafac2_tensor() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor static method)": [[95, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.validate_parafac2_tensor"]], "trtensor (class in ivy.data_classes.factorized_tensor.tr_tensor)": [[96, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor"]], "__init__() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor method)": [[96, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.__init__"]], "_abc_impl (ivy.data_classes.factorized_tensor.tr_tensor.trtensor attribute)": [[96, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor._abc_impl"]], "ivy.data_classes.factorized_tensor.tr_tensor": [[96, "module-ivy.data_classes.factorized_tensor.tr_tensor"]], "n_param (ivy.data_classes.factorized_tensor.tr_tensor.trtensor property)": [[96, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.n_param"]], "to_tensor() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor method)": [[96, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.to_tensor"]], "to_unfolded() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor method)": [[96, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.to_unfolded"]], "to_vec() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor method)": [[96, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.to_vec"]], "tr_n_param() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor static method)": [[96, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.tr_n_param"]], "tr_to_tensor() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor static method)": [[96, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.tr_to_tensor"]], "tr_to_unfolded() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor static method)": [[96, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.tr_to_unfolded"]], "tr_to_vec() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor static method)": [[96, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.tr_to_vec"]], "validate_tr_rank() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor static method)": [[96, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.validate_tr_rank"]], "validate_tr_tensor() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor static method)": [[96, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.validate_tr_tensor"]], "tttensor (class in ivy.data_classes.factorized_tensor.tt_tensor)": [[97, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor"]], "__init__() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor method)": [[97, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.__init__"]], "_abc_impl (ivy.data_classes.factorized_tensor.tt_tensor.tttensor attribute)": [[97, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor._abc_impl"]], "_tt_n_param() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor static method)": [[97, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor._tt_n_param"]], "index_update() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor static method)": [[97, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.index_update"]], "ivy.data_classes.factorized_tensor.tt_tensor": [[97, "module-ivy.data_classes.factorized_tensor.tt_tensor"]], "n_param (ivy.data_classes.factorized_tensor.tt_tensor.tttensor property)": [[97, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.n_param"]], "pad_tt_rank() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor static method)": [[97, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.pad_tt_rank"]], "to_tensor() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor method)": [[97, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.to_tensor"]], "to_unfolding() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor method)": [[97, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.to_unfolding"]], "to_vec() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor method)": [[97, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.to_vec"]], "tt_to_tensor() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor static method)": [[97, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.tt_to_tensor"]], "tt_to_unfolded() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor static method)": [[97, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.tt_to_unfolded"]], "tt_to_vec() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor static method)": [[97, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.tt_to_vec"]], "validate_tt_rank() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor static method)": [[97, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.validate_tt_rank"]], "validate_tt_tensor() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor static method)": [[97, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.validate_tt_tensor"]], "tuckertensor (class in ivy.data_classes.factorized_tensor.tucker_tensor)": [[98, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor"]], "__init__() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor method)": [[98, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.__init__"]], "_abc_impl (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor attribute)": [[98, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor._abc_impl"]], "_bisection_root_finder() (in module ivy.data_classes.factorized_tensor.tucker_tensor)": [[98, "ivy.data_classes.factorized_tensor.tucker_tensor._bisection_root_finder"]], "ivy.data_classes.factorized_tensor.tucker_tensor": [[98, "module-ivy.data_classes.factorized_tensor.tucker_tensor"]], "mode_dot() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor method)": [[98, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.mode_dot"]], "n_param (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor property)": [[98, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.n_param"]], "to_tensor() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor method)": [[98, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.to_tensor"]], "to_unfolded() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor method)": [[98, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.to_unfolded"]], "to_vec() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor method)": [[98, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.to_vec"]], "tucker_copy() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor method)": [[98, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_copy"]], "tucker_mode_dot() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[98, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_mode_dot"]], "tucker_n_param() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[98, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_n_param"]], "tucker_normalize() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[98, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_normalize"]], "tucker_to_tensor() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[98, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_to_tensor"]], "tucker_to_unfolded() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[98, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_to_unfolded"]], "tucker_to_vec() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[98, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_to_vec"]], "validate_tucker_rank() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[98, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.validate_tucker_rank"]], "validate_tucker_tensor() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[98, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.validate_tucker_tensor"]], "array (class in ivy.data_classes.array.array)": [[99, "ivy.data_classes.array.array.Array"]], "t (ivy.data_classes.array.array.array property)": [[99, "ivy.data_classes.array.array.Array.T"]], "__abs__() (ivy.data_classes.array.array.array method)": [[99, "ivy.data_classes.array.array.Array.__abs__"]], "__add__() (ivy.data_classes.array.array.array method)": [[99, "ivy.data_classes.array.array.Array.__add__"]], "__eq__() (ivy.data_classes.array.array.array method)": [[99, "ivy.data_classes.array.array.Array.__eq__"]], "__ge__() (ivy.data_classes.array.array.array method)": [[99, "ivy.data_classes.array.array.Array.__ge__"]], "__gt__() (ivy.data_classes.array.array.array method)": [[99, "ivy.data_classes.array.array.Array.__gt__"]], "__init__() (ivy.data_classes.array.array.array method)": [[99, "ivy.data_classes.array.array.Array.__init__"]], "__le__() (ivy.data_classes.array.array.array method)": [[99, "ivy.data_classes.array.array.Array.__le__"]], "__lt__() (ivy.data_classes.array.array.array method)": [[99, "ivy.data_classes.array.array.Array.__lt__"]], "__ne__() (ivy.data_classes.array.array.array method)": [[99, "ivy.data_classes.array.array.Array.__ne__"]], "__pow__() (ivy.data_classes.array.array.array method)": [[99, "ivy.data_classes.array.array.Array.__pow__"]], "__radd__() (ivy.data_classes.array.array.array method)": [[99, "ivy.data_classes.array.array.Array.__radd__"]], "__rrshift__() (ivy.data_classes.array.array.array method)": [[99, "ivy.data_classes.array.array.Array.__rrshift__"]], "__rshift__() (ivy.data_classes.array.array.array method)": [[99, "ivy.data_classes.array.array.Array.__rshift__"]], "__rsub__() (ivy.data_classes.array.array.array method)": [[99, "ivy.data_classes.array.array.Array.__rsub__"]], "__sub__() (ivy.data_classes.array.array.array method)": [[99, "ivy.data_classes.array.array.Array.__sub__"]], "__truediv__() (ivy.data_classes.array.array.array method)": [[99, "ivy.data_classes.array.array.Array.__truediv__"]], "__xor__() (ivy.data_classes.array.array.array method)": [[99, "ivy.data_classes.array.array.Array.__xor__"]], "backend (ivy.data_classes.array.array.array property)": [[99, "ivy.data_classes.array.array.Array.backend"]], "base (ivy.data_classes.array.array.array property)": [[99, "ivy.data_classes.array.array.Array.base"]], "data (ivy.data_classes.array.array.array property)": [[99, "ivy.data_classes.array.array.Array.data"]], "device (ivy.data_classes.array.array.array property)": [[99, "ivy.data_classes.array.array.Array.device"]], "dtype (ivy.data_classes.array.array.array property)": [[99, "ivy.data_classes.array.array.Array.dtype"]], "dynamic_backend (ivy.data_classes.array.array.array property)": [[99, "ivy.data_classes.array.array.Array.dynamic_backend"]], "imag (ivy.data_classes.array.array.array property)": [[99, "ivy.data_classes.array.array.Array.imag"]], "itemsize (ivy.data_classes.array.array.array property)": [[99, "ivy.data_classes.array.array.Array.itemsize"]], "ivy.data_classes.array.array": [[99, "module-ivy.data_classes.array.array"]], "mt (ivy.data_classes.array.array.array property)": [[99, "ivy.data_classes.array.array.Array.mT"]], "ndim (ivy.data_classes.array.array.array property)": [[99, "ivy.data_classes.array.array.Array.ndim"]], "real (ivy.data_classes.array.array.array property)": [[99, "ivy.data_classes.array.array.Array.real"]], "shape (ivy.data_classes.array.array.array property)": [[99, "ivy.data_classes.array.array.Array.shape"]], "size (ivy.data_classes.array.array.array property)": [[99, "ivy.data_classes.array.array.Array.size"]], "strides (ivy.data_classes.array.array.array property)": [[99, "ivy.data_classes.array.array.Array.strides"]], "container (class in ivy.data_classes.container.container)": [[100, "ivy.data_classes.container.container.Container"]], "__abs__() (ivy.data_classes.container.container.container method)": [[100, "ivy.data_classes.container.container.Container.__abs__"]], "__add__() (ivy.data_classes.container.container.container method)": [[100, "ivy.data_classes.container.container.Container.__add__"]], "__eq__() (ivy.data_classes.container.container.container method)": [[100, "ivy.data_classes.container.container.Container.__eq__"]], "__ge__() (ivy.data_classes.container.container.container method)": [[100, "ivy.data_classes.container.container.Container.__ge__"]], "__gt__() (ivy.data_classes.container.container.container method)": [[100, "ivy.data_classes.container.container.Container.__gt__"]], "__init__() (ivy.data_classes.container.container.container method)": [[100, "ivy.data_classes.container.container.Container.__init__"]], "__le__() (ivy.data_classes.container.container.container method)": [[100, "ivy.data_classes.container.container.Container.__le__"]], "__lt__() (ivy.data_classes.container.container.container method)": [[100, "ivy.data_classes.container.container.Container.__lt__"]], "__ne__() (ivy.data_classes.container.container.container method)": [[100, "ivy.data_classes.container.container.Container.__ne__"]], "__pow__() (ivy.data_classes.container.container.container method)": [[100, "ivy.data_classes.container.container.Container.__pow__"]], "__radd__() (ivy.data_classes.container.container.container method)": [[100, "ivy.data_classes.container.container.Container.__radd__"]], "__rrshift__() (ivy.data_classes.container.container.container method)": [[100, "ivy.data_classes.container.container.Container.__rrshift__"]], "__rshift__() (ivy.data_classes.container.container.container method)": [[100, "ivy.data_classes.container.container.Container.__rshift__"]], "__rsub__() (ivy.data_classes.container.container.container method)": [[100, "ivy.data_classes.container.container.Container.__rsub__"]], "__sub__() (ivy.data_classes.container.container.container method)": [[100, "ivy.data_classes.container.container.Container.__sub__"]], "__truediv__() (ivy.data_classes.container.container.container method)": [[100, "ivy.data_classes.container.container.Container.__truediv__"]], "__xor__() (ivy.data_classes.container.container.container method)": [[100, "ivy.data_classes.container.container.Container.__xor__"]], "ivy.data_classes.container.container": [[100, "module-ivy.data_classes.container.container"]], "nestedarray (class in ivy.data_classes.nested_array.nested_array)": [[102, "ivy.data_classes.nested_array.nested_array.NestedArray"]], "__init__() (ivy.data_classes.nested_array.nested_array.nestedarray method)": [[102, "ivy.data_classes.nested_array.nested_array.NestedArray.__init__"]], "from_row_lengths() (ivy.data_classes.nested_array.nested_array.nestedarray class method)": [[102, "ivy.data_classes.nested_array.nested_array.NestedArray.from_row_lengths"]], "from_row_splits() (ivy.data_classes.nested_array.nested_array.nestedarray class method)": [[102, "ivy.data_classes.nested_array.nested_array.NestedArray.from_row_splits"]], "ivy.data_classes.nested_array.nested_array": [[102, "module-ivy.data_classes.nested_array.nested_array"]], "nestedarraybase (class in ivy.data_classes.nested_array.base)": [[103, "ivy.data_classes.nested_array.base.NestedArrayBase"]], "__init__() (ivy.data_classes.nested_array.base.nestedarraybase method)": [[103, "ivy.data_classes.nested_array.base.NestedArrayBase.__init__"]], "_abc_impl (ivy.data_classes.nested_array.base.nestedarraybase attribute)": [[103, "ivy.data_classes.nested_array.base.NestedArrayBase._abc_impl"]], "broadcast_shapes() (ivy.data_classes.nested_array.base.nestedarraybase static method)": [[103, "ivy.data_classes.nested_array.base.NestedArrayBase.broadcast_shapes"]], "data (ivy.data_classes.nested_array.base.nestedarraybase property)": [[103, "ivy.data_classes.nested_array.base.NestedArrayBase.data"]], "device (ivy.data_classes.nested_array.base.nestedarraybase property)": [[103, "ivy.data_classes.nested_array.base.NestedArrayBase.device"]], "dtype (ivy.data_classes.nested_array.base.nestedarraybase property)": [[103, "ivy.data_classes.nested_array.base.NestedArrayBase.dtype"]], "inner_shape (ivy.data_classes.nested_array.base.nestedarraybase property)": [[103, "ivy.data_classes.nested_array.base.NestedArrayBase.inner_shape"]], "ivy.data_classes.nested_array.base": [[103, "module-ivy.data_classes.nested_array.base"]], "ndim (ivy.data_classes.nested_array.base.nestedarraybase property)": [[103, "ivy.data_classes.nested_array.base.NestedArrayBase.ndim"]], "nested_array() (ivy.data_classes.nested_array.base.nestedarraybase class method)": [[103, "ivy.data_classes.nested_array.base.NestedArrayBase.nested_array"]], "nested_rank (ivy.data_classes.nested_array.base.nestedarraybase property)": [[103, "ivy.data_classes.nested_array.base.NestedArrayBase.nested_rank"]], "ragged_map() (ivy.data_classes.nested_array.base.nestedarraybase method)": [[103, "ivy.data_classes.nested_array.base.NestedArrayBase.ragged_map"]], "ragged_multi_map() (ivy.data_classes.nested_array.base.nestedarraybase static method)": [[103, "ivy.data_classes.nested_array.base.NestedArrayBase.ragged_multi_map"]], "ragged_multi_map_in_function() (ivy.data_classes.nested_array.base.nestedarraybase static method)": [[103, "ivy.data_classes.nested_array.base.NestedArrayBase.ragged_multi_map_in_function"]], "replace_ivy_arrays() (ivy.data_classes.nested_array.base.nestedarraybase static method)": [[103, "ivy.data_classes.nested_array.base.NestedArrayBase.replace_ivy_arrays"]], "shape (ivy.data_classes.nested_array.base.nestedarraybase property)": [[103, "ivy.data_classes.nested_array.base.NestedArrayBase.shape"]], "unbind() (ivy.data_classes.nested_array.base.nestedarraybase method)": [[103, "ivy.data_classes.nested_array.base.NestedArrayBase.unbind"]], "nestedarrayelementwise (class in ivy.data_classes.nested_array.elementwise)": [[104, "ivy.data_classes.nested_array.elementwise.NestedArrayElementwise"]], "_abc_impl (ivy.data_classes.nested_array.elementwise.nestedarrayelementwise attribute)": [[104, "ivy.data_classes.nested_array.elementwise.NestedArrayElementwise._abc_impl"]], "ivy.data_classes.nested_array.elementwise": [[104, "module-ivy.data_classes.nested_array.elementwise"]], "static_add() (ivy.data_classes.nested_array.elementwise.nestedarrayelementwise static method)": [[104, "ivy.data_classes.nested_array.elementwise.NestedArrayElementwise.static_add"]], "gelu() (in module ivy)": [[107, "ivy.gelu"], [623, "ivy.gelu"]], "gelu() (ivy.array method)": [[107, "ivy.Array.gelu"]], "gelu() (ivy.container method)": [[107, "ivy.Container.gelu"]], "hardswish() (in module ivy)": [[108, "ivy.hardswish"], [623, "ivy.hardswish"]], "hardswish() (ivy.array method)": [[108, "ivy.Array.hardswish"]], "hardswish() (ivy.container method)": [[108, "ivy.Container.hardswish"]], "leaky_relu() (in module ivy)": [[109, "ivy.leaky_relu"], [623, "ivy.leaky_relu"]], "leaky_relu() (ivy.array method)": [[109, "ivy.Array.leaky_relu"]], "leaky_relu() (ivy.container method)": [[109, "ivy.Container.leaky_relu"]], "log_softmax() (in module ivy)": [[110, "ivy.log_softmax"], [623, "ivy.log_softmax"]], "log_softmax() (ivy.array method)": [[110, "ivy.Array.log_softmax"]], "log_softmax() (ivy.container method)": [[110, "ivy.Container.log_softmax"]], "mish() (in module ivy)": [[111, "ivy.mish"], [623, "ivy.mish"]], "mish() (ivy.array method)": [[111, "ivy.Array.mish"]], "mish() (ivy.container method)": [[111, "ivy.Container.mish"]], "relu() (in module ivy)": [[112, "ivy.relu"], [623, "ivy.relu"]], "relu() (ivy.array method)": [[112, "ivy.Array.relu"]], "relu() (ivy.container method)": [[112, "ivy.Container.relu"]], "sigmoid() (in module ivy)": [[113, "ivy.sigmoid"], [623, "ivy.sigmoid"]], "sigmoid() (ivy.array method)": [[113, "ivy.Array.sigmoid"]], "sigmoid() (ivy.container method)": [[113, "ivy.Container.sigmoid"]], "softmax() (in module ivy)": [[114, "ivy.softmax"], [623, "ivy.softmax"]], "softmax() (ivy.array method)": [[114, "ivy.Array.softmax"]], "softmax() (ivy.container method)": [[114, "ivy.Container.softmax"]], "softplus() (in module ivy)": [[115, "ivy.softplus"], [623, "ivy.softplus"]], "softplus() (ivy.array method)": [[115, "ivy.Array.softplus"]], "softplus() (ivy.container method)": [[115, "ivy.Container.softplus"]], "softsign() (in module ivy)": [[116, "ivy.softsign"], [623, "ivy.softsign"]], "cmp_is() (in module ivy)": [[117, "ivy.cmp_is"], [625, "ivy.cmp_is"]], "cmp_isnot() (in module ivy)": [[118, "ivy.cmp_isnot"], [625, "ivy.cmp_isnot"]], "for_loop() (in module ivy)": [[119, "ivy.for_loop"], [625, "ivy.for_loop"]], "if_else() (in module ivy)": [[120, "ivy.if_else"], [625, "ivy.if_else"]], "try_except() (in module ivy)": [[121, "ivy.try_except"], [625, "ivy.try_except"]], "while_loop() (in module ivy)": [[122, "ivy.while_loop"], [625, "ivy.while_loop"]], "arange() (in module ivy)": [[123, "ivy.arange"], [626, "ivy.arange"]], "array() (in module ivy)": [[124, "ivy.array"], [626, "ivy.array"]], "asarray() (in module ivy)": [[125, "ivy.asarray"], [626, "ivy.asarray"]], "asarray() (ivy.array method)": [[125, "ivy.Array.asarray"]], "asarray() (ivy.container method)": [[125, "ivy.Container.asarray"]], "copy_array() (in module ivy)": [[126, "ivy.copy_array"], [626, "ivy.copy_array"]], "copy_array() (ivy.array method)": [[126, "ivy.Array.copy_array"]], "copy_array() (ivy.container method)": [[126, "ivy.Container.copy_array"]], "empty() (in module ivy)": [[127, "ivy.empty"], [626, "ivy.empty"]], "empty_like() (in module ivy)": [[128, "ivy.empty_like"], [626, "ivy.empty_like"]], "empty_like() (ivy.array method)": [[128, "ivy.Array.empty_like"]], "empty_like() (ivy.container method)": [[128, "ivy.Container.empty_like"]], "eye() (in module ivy)": [[129, "ivy.eye"], [626, "ivy.eye"]], "from_dlpack() (in module ivy)": [[130, "ivy.from_dlpack"], [626, "ivy.from_dlpack"]], "from_dlpack() (ivy.array method)": [[130, "ivy.Array.from_dlpack"]], "from_dlpack() (ivy.container method)": [[130, "ivy.Container.from_dlpack"]], "frombuffer() (in module ivy)": [[131, "ivy.frombuffer"], [626, "ivy.frombuffer"]], "frombuffer() (ivy.container method)": [[131, "ivy.Container.frombuffer"]], "full() (in module ivy)": [[132, "ivy.full"], [626, "ivy.full"]], "full_like() (in module ivy)": [[133, "ivy.full_like"], [626, "ivy.full_like"]], "full_like() (ivy.array method)": [[133, "ivy.Array.full_like"]], "full_like() (ivy.container method)": [[133, "ivy.Container.full_like"]], "linspace() (in module ivy)": [[134, "ivy.linspace"], [626, "ivy.linspace"]], "linspace() (ivy.array method)": [[134, "ivy.Array.linspace"]], "linspace() (ivy.container method)": [[134, "ivy.Container.linspace"]], "logspace() (in module ivy)": [[135, "ivy.logspace"], [626, "ivy.logspace"]], "logspace() (ivy.array method)": [[135, "ivy.Array.logspace"]], "logspace() (ivy.container method)": [[135, "ivy.Container.logspace"]], "meshgrid() (in module ivy)": [[136, "ivy.meshgrid"], [626, "ivy.meshgrid"]], "meshgrid() (ivy.array method)": [[136, "ivy.Array.meshgrid"]], "meshgrid() (ivy.container method)": [[136, "ivy.Container.meshgrid"]], "native_array() (in module ivy)": [[137, "ivy.native_array"], [626, "ivy.native_array"]], "native_array() (ivy.array method)": [[137, "ivy.Array.native_array"]], "native_array() (ivy.container method)": [[137, "ivy.Container.native_array"]], "one_hot() (in module ivy)": [[138, "ivy.one_hot"], [626, "ivy.one_hot"]], "one_hot() (ivy.array method)": [[138, "ivy.Array.one_hot"]], "one_hot() (ivy.container method)": [[138, "ivy.Container.one_hot"]], "ones() (in module ivy)": [[139, "ivy.ones"], [626, "ivy.ones"]], "ones_like() (in module ivy)": [[140, "ivy.ones_like"], [626, "ivy.ones_like"]], "ones_like() (ivy.array method)": [[140, "ivy.Array.ones_like"]], "ones_like() (ivy.container method)": [[140, "ivy.Container.ones_like"]], "to_dlpack() (in module ivy)": [[141, "ivy.to_dlpack"], [626, "ivy.to_dlpack"]], "tril() (in module ivy)": [[142, "ivy.tril"], [626, "ivy.tril"]], "tril() (ivy.array method)": [[142, "ivy.Array.tril"]], "tril() (ivy.container method)": [[142, "ivy.Container.tril"]], "triu() (in module ivy)": [[143, "ivy.triu"], [626, "ivy.triu"]], "triu() (ivy.array method)": [[143, "ivy.Array.triu"]], "triu() (ivy.container method)": [[143, "ivy.Container.triu"]], "triu_indices() (in module ivy)": [[144, "ivy.triu_indices"], [626, "ivy.triu_indices"]], "triu_indices() (ivy.container method)": [[144, "ivy.Container.triu_indices"]], "zeros() (in module ivy)": [[145, "ivy.zeros"], [626, "ivy.zeros"]], "zeros_like() (in module ivy)": [[146, "ivy.zeros_like"], [626, "ivy.zeros_like"]], "zeros_like() (ivy.array method)": [[146, "ivy.Array.zeros_like"]], "zeros_like() (ivy.container method)": [[146, "ivy.Container.zeros_like"]], "as_ivy_dtype() (in module ivy)": [[147, "ivy.as_ivy_dtype"], [627, "ivy.as_ivy_dtype"]], "as_native_dtype() (in module ivy)": [[148, "ivy.as_native_dtype"], [627, "ivy.as_native_dtype"]], "astype() (in module ivy)": [[149, "ivy.astype"], [627, "ivy.astype"]], "astype() (ivy.array method)": [[149, "ivy.Array.astype"]], "astype() (ivy.container method)": [[149, "ivy.Container.astype"]], "broadcast_arrays() (in module ivy)": [[150, "ivy.broadcast_arrays"], [627, "ivy.broadcast_arrays"]], "broadcast_arrays() (ivy.array method)": [[150, "ivy.Array.broadcast_arrays"]], "broadcast_arrays() (ivy.container method)": [[150, "ivy.Container.broadcast_arrays"]], "broadcast_to() (in module ivy)": [[151, "ivy.broadcast_to"], [627, "ivy.broadcast_to"]], "broadcast_to() (ivy.array method)": [[151, "ivy.Array.broadcast_to"]], "broadcast_to() (ivy.container method)": [[151, "ivy.Container.broadcast_to"]], "can_cast() (in module ivy)": [[152, "ivy.can_cast"], [627, "ivy.can_cast"]], "can_cast() (ivy.array method)": [[152, "ivy.Array.can_cast"]], "can_cast() (ivy.container method)": [[152, "ivy.Container.can_cast"]], "check_float() (in module ivy)": [[153, "ivy.check_float"], [627, "ivy.check_float"]], "closest_valid_dtype() (in module ivy)": [[154, "ivy.closest_valid_dtype"], [627, "ivy.closest_valid_dtype"]], "default_complex_dtype() (in module ivy)": [[155, "ivy.default_complex_dtype"], [627, "ivy.default_complex_dtype"]], "default_dtype() (in module ivy)": [[156, "ivy.default_dtype"], [627, "ivy.default_dtype"]], "default_float_dtype() (in module ivy)": [[157, "ivy.default_float_dtype"], [627, "ivy.default_float_dtype"]], "default_int_dtype() (in module ivy)": [[158, "ivy.default_int_dtype"], [627, "ivy.default_int_dtype"]], "default_uint_dtype() (in module ivy)": [[159, "ivy.default_uint_dtype"], [627, "ivy.default_uint_dtype"]], "dtype() (in module ivy)": [[160, "ivy.dtype"], [627, "ivy.dtype"]], "dtype() (ivy.array method)": [[160, "ivy.Array.dtype"]], "dtype() (ivy.container method)": [[160, "ivy.Container.dtype"]], "dtype_bits() (in module ivy)": [[161, "ivy.dtype_bits"], [627, "ivy.dtype_bits"]], "finfo() (in module ivy)": [[162, "ivy.finfo"], [627, "ivy.finfo"]], "finfo() (ivy.array method)": [[162, "ivy.Array.finfo"]], "finfo() (ivy.container method)": [[162, "ivy.Container.finfo"]], "function_supported_dtypes() (in module ivy)": [[163, "ivy.function_supported_dtypes"], [627, "ivy.function_supported_dtypes"]], "function_unsupported_dtypes() (in module ivy)": [[164, "ivy.function_unsupported_dtypes"], [627, "ivy.function_unsupported_dtypes"]], "iinfo() (in module ivy)": [[165, "ivy.iinfo"], [627, "ivy.iinfo"]], "iinfo() (ivy.array method)": [[165, "ivy.Array.iinfo"]], "iinfo() (ivy.container method)": [[165, "ivy.Container.iinfo"]], "infer_default_dtype() (in module ivy)": [[166, "ivy.infer_default_dtype"], [627, "ivy.infer_default_dtype"]], "invalid_dtype() (in module ivy)": [[167, "ivy.invalid_dtype"], [627, "ivy.invalid_dtype"]], "is_bool_dtype() (in module ivy)": [[168, "ivy.is_bool_dtype"], [627, "ivy.is_bool_dtype"]], "is_bool_dtype() (ivy.array method)": [[168, "ivy.Array.is_bool_dtype"]], "is_bool_dtype() (ivy.container method)": [[168, "ivy.Container.is_bool_dtype"]], "is_complex_dtype() (in module ivy)": [[169, "ivy.is_complex_dtype"], [627, "ivy.is_complex_dtype"]], "is_complex_dtype() (ivy.container method)": [[169, "ivy.Container.is_complex_dtype"]], "is_float_dtype() (in module ivy)": [[170, "ivy.is_float_dtype"], [627, "ivy.is_float_dtype"]], "is_float_dtype() (ivy.array method)": [[170, "ivy.Array.is_float_dtype"]], "is_float_dtype() (ivy.container method)": [[170, "ivy.Container.is_float_dtype"]], "is_hashable_dtype() (in module ivy)": [[171, "ivy.is_hashable_dtype"], [627, "ivy.is_hashable_dtype"]], "is_int_dtype() (in module ivy)": [[172, "ivy.is_int_dtype"], [627, "ivy.is_int_dtype"]], "is_int_dtype() (ivy.array method)": [[172, "ivy.Array.is_int_dtype"]], "is_int_dtype() (ivy.container method)": [[172, "ivy.Container.is_int_dtype"]], "is_native_dtype() (in module ivy)": [[173, "ivy.is_native_dtype"], [627, "ivy.is_native_dtype"]], "is_uint_dtype() (in module ivy)": [[174, "ivy.is_uint_dtype"], [627, "ivy.is_uint_dtype"]], "is_uint_dtype() (ivy.array method)": [[174, "ivy.Array.is_uint_dtype"]], "is_uint_dtype() (ivy.container method)": [[174, "ivy.Container.is_uint_dtype"]], "promote_types() (in module ivy)": [[175, "ivy.promote_types"], [627, "ivy.promote_types"]], "promote_types_of_inputs() (in module ivy)": [[176, "ivy.promote_types_of_inputs"], [627, "ivy.promote_types_of_inputs"]], "result_type() (in module ivy)": [[177, "ivy.result_type"], [627, "ivy.result_type"]], "result_type() (ivy.array method)": [[177, "ivy.Array.result_type"]], "result_type() (ivy.container method)": [[177, "ivy.Container.result_type"]], "set_default_complex_dtype() (in module ivy)": [[178, "ivy.set_default_complex_dtype"], [627, "ivy.set_default_complex_dtype"]], "set_default_dtype() (in module ivy)": [[179, "ivy.set_default_dtype"], [627, "ivy.set_default_dtype"]], "set_default_float_dtype() (in module ivy)": [[180, "ivy.set_default_float_dtype"], [627, "ivy.set_default_float_dtype"]], "set_default_int_dtype() (in module ivy)": [[181, "ivy.set_default_int_dtype"], [627, "ivy.set_default_int_dtype"]], "set_default_uint_dtype() (in module ivy)": [[182, "ivy.set_default_uint_dtype"], [627, "ivy.set_default_uint_dtype"]], "type_promote_arrays() (in module ivy)": [[183, "ivy.type_promote_arrays"], [627, "ivy.type_promote_arrays"]], "unset_default_complex_dtype() (in module ivy)": [[184, "ivy.unset_default_complex_dtype"], [627, "ivy.unset_default_complex_dtype"]], "unset_default_dtype() (in module ivy)": [[185, "ivy.unset_default_dtype"], [627, "ivy.unset_default_dtype"]], "unset_default_float_dtype() (in module ivy)": [[186, "ivy.unset_default_float_dtype"], [627, "ivy.unset_default_float_dtype"]], "unset_default_int_dtype() (in module ivy)": [[187, "ivy.unset_default_int_dtype"], [627, "ivy.unset_default_int_dtype"]], "unset_default_uint_dtype() (in module ivy)": [[188, "ivy.unset_default_uint_dtype"], [627, "ivy.unset_default_uint_dtype"]], "valid_dtype() (in module ivy)": [[189, "ivy.valid_dtype"], [627, "ivy.valid_dtype"]], "as_ivy_dev() (in module ivy)": [[190, "ivy.as_ivy_dev"], [628, "ivy.as_ivy_dev"]], "as_native_dev() (in module ivy)": [[191, "ivy.as_native_dev"], [628, "ivy.as_native_dev"]], "clear_cached_mem_on_dev() (in module ivy)": [[192, "ivy.clear_cached_mem_on_dev"], [628, "ivy.clear_cached_mem_on_dev"]], "default_device() (in module ivy)": [[193, "ivy.default_device"], [628, "ivy.default_device"]], "dev() (in module ivy)": [[194, "ivy.dev"], [628, "ivy.dev"]], "dev() (ivy.array method)": [[194, "ivy.Array.dev"]], "dev() (ivy.container method)": [[194, "ivy.Container.dev"]], "dev_util() (in module ivy)": [[195, "ivy.dev_util"], [628, "ivy.dev_util"]], "function_supported_devices() (in module ivy)": [[196, "ivy.function_supported_devices"], [628, "ivy.function_supported_devices"]], "function_unsupported_devices() (in module ivy)": [[197, "ivy.function_unsupported_devices"], [628, "ivy.function_unsupported_devices"]], "get_all_ivy_arrays_on_dev() (in module ivy)": [[198, "ivy.get_all_ivy_arrays_on_dev"], [628, "ivy.get_all_ivy_arrays_on_dev"]], "gpu_is_available() (in module ivy)": [[199, "ivy.gpu_is_available"], [628, "ivy.gpu_is_available"]], "handle_soft_device_variable() (in module ivy)": [[200, "ivy.handle_soft_device_variable"], [628, "ivy.handle_soft_device_variable"]], "num_cpu_cores() (in module ivy)": [[201, "ivy.num_cpu_cores"], [628, "ivy.num_cpu_cores"]], "num_gpus() (in module ivy)": [[202, "ivy.num_gpus"], [628, "ivy.num_gpus"]], "num_ivy_arrays_on_dev() (in module ivy)": [[203, "ivy.num_ivy_arrays_on_dev"], [628, "ivy.num_ivy_arrays_on_dev"]], "percent_used_mem_on_dev() (in module ivy)": [[204, "ivy.percent_used_mem_on_dev"], [628, "ivy.percent_used_mem_on_dev"]], "print_all_ivy_arrays_on_dev() (in module ivy)": [[205, "ivy.print_all_ivy_arrays_on_dev"], [628, "ivy.print_all_ivy_arrays_on_dev"]], "set_default_device() (in module ivy)": [[206, "ivy.set_default_device"], [628, "ivy.set_default_device"]], "set_soft_device_mode() (in module ivy)": [[207, "ivy.set_soft_device_mode"], [628, "ivy.set_soft_device_mode"]], "set_split_factor() (in module ivy)": [[208, "ivy.set_split_factor"], [628, "ivy.set_split_factor"]], "split_factor() (in module ivy)": [[209, "ivy.split_factor"], [628, "ivy.split_factor"]], "split_func_call() (in module ivy)": [[210, "ivy.split_func_call"], [628, "ivy.split_func_call"]], "to_device() (in module ivy)": [[211, "ivy.to_device"], [628, "ivy.to_device"]], "to_device() (ivy.array method)": [[211, "ivy.Array.to_device"]], "to_device() (ivy.container method)": [[211, "ivy.Container.to_device"]], "total_mem_on_dev() (in module ivy)": [[212, "ivy.total_mem_on_dev"], [628, "ivy.total_mem_on_dev"]], "tpu_is_available() (in module ivy)": [[213, "ivy.tpu_is_available"], [628, "ivy.tpu_is_available"]], "unset_default_device() (in module ivy)": [[214, "ivy.unset_default_device"], [628, "ivy.unset_default_device"]], "unset_soft_device_mode() (in module ivy)": [[215, "ivy.unset_soft_device_mode"], [628, "ivy.unset_soft_device_mode"]], "used_mem_on_dev() (in module ivy)": [[216, "ivy.used_mem_on_dev"], [628, "ivy.used_mem_on_dev"]], "abs() (in module ivy)": [[217, "ivy.abs"], [629, "ivy.abs"]], "abs() (ivy.array method)": [[217, "ivy.Array.abs"]], "abs() (ivy.container method)": [[217, "ivy.Container.abs"]], "acos() (in module ivy)": [[218, "ivy.acos"], [629, "ivy.acos"]], "acos() (ivy.array method)": [[218, "ivy.Array.acos"]], "acos() (ivy.container method)": [[218, "ivy.Container.acos"]], "acosh() (in module ivy)": [[219, "ivy.acosh"], [629, "ivy.acosh"]], "acosh() (ivy.array method)": [[219, "ivy.Array.acosh"]], "acosh() (ivy.container method)": [[219, "ivy.Container.acosh"]], "add() (in module ivy)": [[220, "ivy.add"], [629, "ivy.add"]], "add() (ivy.array method)": [[220, "ivy.Array.add"]], "add() (ivy.container method)": [[220, "ivy.Container.add"]], "angle() (in module ivy)": [[221, "ivy.angle"], [629, "ivy.angle"]], "angle() (ivy.array method)": [[221, "ivy.Array.angle"]], "angle() (ivy.container method)": [[221, "ivy.Container.angle"]], "asin() (in module ivy)": [[222, "ivy.asin"], [629, "ivy.asin"]], "asin() (ivy.array method)": [[222, "ivy.Array.asin"]], "asin() (ivy.container method)": [[222, "ivy.Container.asin"]], "asinh() (in module ivy)": [[223, "ivy.asinh"], [629, "ivy.asinh"]], "asinh() (ivy.array method)": [[223, "ivy.Array.asinh"]], "asinh() (ivy.container method)": [[223, "ivy.Container.asinh"]], "atan() (in module ivy)": [[224, "ivy.atan"], [629, "ivy.atan"]], "atan() (ivy.array method)": [[224, "ivy.Array.atan"]], "atan() (ivy.container method)": [[224, "ivy.Container.atan"]], "atan2() (in module ivy)": [[225, "ivy.atan2"], [629, "ivy.atan2"]], "atan2() (ivy.array method)": [[225, "ivy.Array.atan2"]], "atan2() (ivy.container method)": [[225, "ivy.Container.atan2"]], "atanh() (in module ivy)": [[226, "ivy.atanh"], [629, "ivy.atanh"]], "atanh() (ivy.array method)": [[226, "ivy.Array.atanh"]], "atanh() (ivy.container method)": [[226, "ivy.Container.atanh"]], "bitwise_and() (in module ivy)": [[227, "ivy.bitwise_and"], [629, "ivy.bitwise_and"]], "bitwise_and() (ivy.array method)": [[227, "ivy.Array.bitwise_and"]], "bitwise_and() (ivy.container method)": [[227, "ivy.Container.bitwise_and"]], "bitwise_invert() (in module ivy)": [[228, "ivy.bitwise_invert"], [629, "ivy.bitwise_invert"]], "bitwise_invert() (ivy.array method)": [[228, "ivy.Array.bitwise_invert"]], "bitwise_invert() (ivy.container method)": [[228, "ivy.Container.bitwise_invert"]], "bitwise_left_shift() (in module ivy)": [[229, "ivy.bitwise_left_shift"], [629, "ivy.bitwise_left_shift"]], "bitwise_left_shift() (ivy.array method)": [[229, "ivy.Array.bitwise_left_shift"]], "bitwise_left_shift() (ivy.container method)": [[229, "ivy.Container.bitwise_left_shift"]], "bitwise_or() (in module ivy)": [[230, "ivy.bitwise_or"], [629, "ivy.bitwise_or"]], "bitwise_or() (ivy.array method)": [[230, "ivy.Array.bitwise_or"]], "bitwise_or() (ivy.container method)": [[230, "ivy.Container.bitwise_or"]], "bitwise_right_shift() (in module ivy)": [[231, "ivy.bitwise_right_shift"], [629, "ivy.bitwise_right_shift"]], "bitwise_right_shift() (ivy.array method)": [[231, "ivy.Array.bitwise_right_shift"]], "bitwise_right_shift() (ivy.container method)": [[231, "ivy.Container.bitwise_right_shift"]], "bitwise_xor() (in module ivy)": [[232, "ivy.bitwise_xor"], [629, "ivy.bitwise_xor"]], "bitwise_xor() (ivy.array method)": [[232, "ivy.Array.bitwise_xor"]], "bitwise_xor() (ivy.container method)": [[232, "ivy.Container.bitwise_xor"]], "ceil() (in module ivy)": [[233, "ivy.ceil"], [629, "ivy.ceil"]], "ceil() (ivy.array method)": [[233, "ivy.Array.ceil"]], "ceil() (ivy.container method)": [[233, "ivy.Container.ceil"]], "cos() (in module ivy)": [[234, "ivy.cos"], [629, "ivy.cos"]], "cos() (ivy.array method)": [[234, "ivy.Array.cos"]], "cos() (ivy.container method)": [[234, "ivy.Container.cos"]], "cosh() (in module ivy)": [[235, "ivy.cosh"], [629, "ivy.cosh"]], "cosh() (ivy.array method)": [[235, "ivy.Array.cosh"]], "cosh() (ivy.container method)": [[235, "ivy.Container.cosh"]], "deg2rad() (in module ivy)": [[236, "ivy.deg2rad"], [629, "ivy.deg2rad"]], "deg2rad() (ivy.array method)": [[236, "ivy.Array.deg2rad"]], "deg2rad() (ivy.container method)": [[236, "ivy.Container.deg2rad"]], "divide() (in module ivy)": [[237, "ivy.divide"], [629, "ivy.divide"]], "divide() (ivy.array method)": [[237, "ivy.Array.divide"]], "divide() (ivy.container method)": [[237, "ivy.Container.divide"]], "equal() (in module ivy)": [[238, "ivy.equal"], [629, "ivy.equal"]], "equal() (ivy.array method)": [[238, "ivy.Array.equal"]], "equal() (ivy.container method)": [[238, "ivy.Container.equal"]], "erf() (in module ivy)": [[239, "ivy.erf"], [629, "ivy.erf"]], "erf() (ivy.array method)": [[239, "ivy.Array.erf"]], "erf() (ivy.container method)": [[239, "ivy.Container.erf"]], "exp() (in module ivy)": [[240, "ivy.exp"], [629, "ivy.exp"]], "exp() (ivy.array method)": [[240, "ivy.Array.exp"]], "exp() (ivy.container method)": [[240, "ivy.Container.exp"]], "exp2() (in module ivy)": [[241, "ivy.exp2"], [629, "ivy.exp2"]], "exp2() (ivy.array method)": [[241, "ivy.Array.exp2"]], "exp2() (ivy.container method)": [[241, "ivy.Container.exp2"]], "expm1() (in module ivy)": [[242, "ivy.expm1"], [629, "ivy.expm1"]], "expm1() (ivy.array method)": [[242, "ivy.Array.expm1"]], "expm1() (ivy.container method)": [[242, "ivy.Container.expm1"]], "floor() (in module ivy)": [[243, "ivy.floor"], [629, "ivy.floor"]], "floor() (ivy.array method)": [[243, "ivy.Array.floor"]], "floor() (ivy.container method)": [[243, "ivy.Container.floor"]], "floor_divide() (in module ivy)": [[244, "ivy.floor_divide"], [629, "ivy.floor_divide"]], "floor_divide() (ivy.array method)": [[244, "ivy.Array.floor_divide"]], "floor_divide() (ivy.container method)": [[244, "ivy.Container.floor_divide"]], "fmin() (in module ivy)": [[245, "ivy.fmin"], [629, "ivy.fmin"]], "fmin() (ivy.array method)": [[245, "ivy.Array.fmin"]], "fmin() (ivy.container method)": [[245, "ivy.Container.fmin"]], "fmod() (in module ivy)": [[246, "ivy.fmod"], [629, "ivy.fmod"]], "fmod() (ivy.array method)": [[246, "ivy.Array.fmod"]], "fmod() (ivy.container method)": [[246, "ivy.Container.fmod"]], "gcd() (in module ivy)": [[247, "ivy.gcd"], [629, "ivy.gcd"]], "gcd() (ivy.array method)": [[247, "ivy.Array.gcd"]], "gcd() (ivy.container method)": [[247, "ivy.Container.gcd"]], "greater() (in module ivy)": [[248, "ivy.greater"], [629, "ivy.greater"]], "greater() (ivy.array method)": [[248, "ivy.Array.greater"]], "greater() (ivy.container method)": [[248, "ivy.Container.greater"]], "greater_equal() (in module ivy)": [[249, "ivy.greater_equal"], [629, "ivy.greater_equal"]], "greater_equal() (ivy.array method)": [[249, "ivy.Array.greater_equal"]], "greater_equal() (ivy.container method)": [[249, "ivy.Container.greater_equal"]], "imag() (in module ivy)": [[250, "ivy.imag"], [629, "ivy.imag"]], "imag() (ivy.array method)": [[250, "ivy.Array.imag"]], "imag() (ivy.container method)": [[250, "ivy.Container.imag"]], "isfinite() (in module ivy)": [[251, "ivy.isfinite"], [629, "ivy.isfinite"]], "isfinite() (ivy.array method)": [[251, "ivy.Array.isfinite"]], "isfinite() (ivy.container method)": [[251, "ivy.Container.isfinite"]], "isinf() (in module ivy)": [[252, "ivy.isinf"], [629, "ivy.isinf"]], "isinf() (ivy.array method)": [[252, "ivy.Array.isinf"]], "isinf() (ivy.container method)": [[252, "ivy.Container.isinf"]], "isnan() (in module ivy)": [[253, "ivy.isnan"], [629, "ivy.isnan"]], "isnan() (ivy.array method)": [[253, "ivy.Array.isnan"]], "isnan() (ivy.container method)": [[253, "ivy.Container.isnan"]], "isreal() (in module ivy)": [[254, "ivy.isreal"], [629, "ivy.isreal"]], "isreal() (ivy.array method)": [[254, "ivy.Array.isreal"]], "isreal() (ivy.container method)": [[254, "ivy.Container.isreal"]], "lcm() (in module ivy)": [[255, "ivy.lcm"], [629, "ivy.lcm"]], "lcm() (ivy.array method)": [[255, "ivy.Array.lcm"]], "lcm() (ivy.container method)": [[255, "ivy.Container.lcm"]], "less() (in module ivy)": [[256, "ivy.less"], [629, "ivy.less"]], "less() (ivy.array method)": [[256, "ivy.Array.less"]], "less() (ivy.container method)": [[256, "ivy.Container.less"]], "less_equal() (in module ivy)": [[257, "ivy.less_equal"], [629, "ivy.less_equal"]], "less_equal() (ivy.array method)": [[257, "ivy.Array.less_equal"]], "less_equal() (ivy.container method)": [[257, "ivy.Container.less_equal"]], "log() (in module ivy)": [[258, "ivy.log"], [629, "ivy.log"]], "log() (ivy.array method)": [[258, "ivy.Array.log"]], "log() (ivy.container method)": [[258, "ivy.Container.log"]], "log10() (in module ivy)": [[259, "ivy.log10"], [629, "ivy.log10"]], "log10() (ivy.array method)": [[259, "ivy.Array.log10"]], "log10() (ivy.container method)": [[259, "ivy.Container.log10"]], "log1p() (in module ivy)": [[260, "ivy.log1p"], [629, "ivy.log1p"]], "log1p() (ivy.array method)": [[260, "ivy.Array.log1p"]], "log1p() (ivy.container method)": [[260, "ivy.Container.log1p"]], "log2() (in module ivy)": [[261, "ivy.log2"], [629, "ivy.log2"]], "log2() (ivy.array method)": [[261, "ivy.Array.log2"]], "log2() (ivy.container method)": [[261, "ivy.Container.log2"]], "logaddexp() (in module ivy)": [[262, "ivy.logaddexp"], [629, "ivy.logaddexp"]], "logaddexp() (ivy.array method)": [[262, "ivy.Array.logaddexp"]], "logaddexp() (ivy.container method)": [[262, "ivy.Container.logaddexp"]], "logaddexp2() (in module ivy)": [[263, "ivy.logaddexp2"], [629, "ivy.logaddexp2"]], "logaddexp2() (ivy.array method)": [[263, "ivy.Array.logaddexp2"]], "logaddexp2() (ivy.container method)": [[263, "ivy.Container.logaddexp2"]], "logical_and() (in module ivy)": [[264, "ivy.logical_and"], [629, "ivy.logical_and"]], "logical_and() (ivy.array method)": [[264, "ivy.Array.logical_and"]], "logical_and() (ivy.container method)": [[264, "ivy.Container.logical_and"]], "logical_not() (in module ivy)": [[265, "ivy.logical_not"], [629, "ivy.logical_not"]], "logical_not() (ivy.array method)": [[265, "ivy.Array.logical_not"]], "logical_not() (ivy.container method)": [[265, "ivy.Container.logical_not"]], "logical_or() (in module ivy)": [[266, "ivy.logical_or"], [629, "ivy.logical_or"]], "logical_or() (ivy.array method)": [[266, "ivy.Array.logical_or"]], "logical_or() (ivy.container method)": [[266, "ivy.Container.logical_or"]], "logical_xor() (in module ivy)": [[267, "ivy.logical_xor"], [629, "ivy.logical_xor"]], "logical_xor() (ivy.array method)": [[267, "ivy.Array.logical_xor"]], "logical_xor() (ivy.container method)": [[267, "ivy.Container.logical_xor"]], "maximum() (in module ivy)": [[268, "ivy.maximum"], [629, "ivy.maximum"]], "maximum() (ivy.array method)": [[268, "ivy.Array.maximum"]], "maximum() (ivy.container method)": [[268, "ivy.Container.maximum"]], "minimum() (in module ivy)": [[269, "ivy.minimum"], [629, "ivy.minimum"]], "minimum() (ivy.array method)": [[269, "ivy.Array.minimum"]], "minimum() (ivy.container method)": [[269, "ivy.Container.minimum"]], "multiply() (in module ivy)": [[270, "ivy.multiply"], [629, "ivy.multiply"]], "multiply() (ivy.array method)": [[270, "ivy.Array.multiply"]], "multiply() (ivy.container method)": [[270, "ivy.Container.multiply"]], "nan_to_num() (in module ivy)": [[271, "ivy.nan_to_num"], [629, "ivy.nan_to_num"]], "nan_to_num() (ivy.array method)": [[271, "ivy.Array.nan_to_num"]], "nan_to_num() (ivy.container method)": [[271, "ivy.Container.nan_to_num"]], "negative() (in module ivy)": [[272, "ivy.negative"], [629, "ivy.negative"]], "negative() (ivy.array method)": [[272, "ivy.Array.negative"]], "negative() (ivy.container method)": [[272, "ivy.Container.negative"]], "not_equal() (in module ivy)": [[273, "ivy.not_equal"], [629, "ivy.not_equal"]], "not_equal() (ivy.array method)": [[273, "ivy.Array.not_equal"]], "not_equal() (ivy.container method)": [[273, "ivy.Container.not_equal"]], "positive() (in module ivy)": [[274, "ivy.positive"], [629, "ivy.positive"]], "positive() (ivy.array method)": [[274, "ivy.Array.positive"]], "positive() (ivy.container method)": [[274, "ivy.Container.positive"]], "pow() (in module ivy)": [[275, "ivy.pow"], [629, "ivy.pow"]], "pow() (ivy.array method)": [[275, "ivy.Array.pow"]], "pow() (ivy.container method)": [[275, "ivy.Container.pow"]], "rad2deg() (in module ivy)": [[276, "ivy.rad2deg"], [629, "ivy.rad2deg"]], "rad2deg() (ivy.array method)": [[276, "ivy.Array.rad2deg"]], "rad2deg() (ivy.container method)": [[276, "ivy.Container.rad2deg"]], "real() (in module ivy)": [[277, "ivy.real"], [629, "ivy.real"]], "real() (ivy.array method)": [[277, "ivy.Array.real"]], "real() (ivy.container method)": [[277, "ivy.Container.real"]], "reciprocal() (in module ivy)": [[278, "ivy.reciprocal"], [629, "ivy.reciprocal"]], "reciprocal() (ivy.array method)": [[278, "ivy.Array.reciprocal"]], "reciprocal() (ivy.container method)": [[278, "ivy.Container.reciprocal"]], "remainder() (in module ivy)": [[279, "ivy.remainder"], [629, "ivy.remainder"]], "remainder() (ivy.array method)": [[279, "ivy.Array.remainder"]], "remainder() (ivy.container method)": [[279, "ivy.Container.remainder"]], "round() (in module ivy)": [[280, "ivy.round"], [629, "ivy.round"]], "round() (ivy.array method)": [[280, "ivy.Array.round"]], "round() (ivy.container method)": [[280, "ivy.Container.round"]], "sign() (in module ivy)": [[281, "ivy.sign"], [629, "ivy.sign"]], "sign() (ivy.array method)": [[281, "ivy.Array.sign"]], "sign() (ivy.container method)": [[281, "ivy.Container.sign"]], "sin() (in module ivy)": [[282, "ivy.sin"], [629, "ivy.sin"]], "sin() (ivy.array method)": [[282, "ivy.Array.sin"]], "sin() (ivy.container method)": [[282, "ivy.Container.sin"]], "sinh() (in module ivy)": [[283, "ivy.sinh"], [629, "ivy.sinh"]], "sinh() (ivy.array method)": [[283, "ivy.Array.sinh"]], "sinh() (ivy.container method)": [[283, "ivy.Container.sinh"]], "sqrt() (in module ivy)": [[284, "ivy.sqrt"], [629, "ivy.sqrt"]], "sqrt() (ivy.array method)": [[284, "ivy.Array.sqrt"]], "sqrt() (ivy.container method)": [[284, "ivy.Container.sqrt"]], "square() (in module ivy)": [[285, "ivy.square"], [629, "ivy.square"]], "square() (ivy.array method)": [[285, "ivy.Array.square"]], "square() (ivy.container method)": [[285, "ivy.Container.square"]], "subtract() (in module ivy)": [[286, "ivy.subtract"], [629, "ivy.subtract"]], "subtract() (ivy.array method)": [[286, "ivy.Array.subtract"]], "subtract() (ivy.container method)": [[286, "ivy.Container.subtract"]], "tan() (in module ivy)": [[287, "ivy.tan"], [629, "ivy.tan"]], "tan() (ivy.array method)": [[287, "ivy.Array.tan"]], "tan() (ivy.container method)": [[287, "ivy.Container.tan"]], "tanh() (in module ivy)": [[288, "ivy.tanh"], [629, "ivy.tanh"]], "tanh() (ivy.array method)": [[288, "ivy.Array.tanh"]], "tanh() (ivy.container method)": [[288, "ivy.Container.tanh"]], "trapz() (in module ivy)": [[289, "ivy.trapz"], [629, "ivy.trapz"]], "trapz() (ivy.array method)": [[289, "ivy.Array.trapz"]], "trapz() (ivy.container method)": [[289, "ivy.Container.trapz"]], "trunc() (in module ivy)": [[290, "ivy.trunc"], [629, "ivy.trunc"]], "trunc() (ivy.array method)": [[290, "ivy.Array.trunc"]], "trunc() (ivy.container method)": [[290, "ivy.Container.trunc"]], "trunc_divide() (in module ivy)": [[291, "ivy.trunc_divide"], [629, "ivy.trunc_divide"]], "trunc_divide() (ivy.array method)": [[291, "ivy.Array.trunc_divide"]], "trunc_divide() (ivy.container method)": [[291, "ivy.Container.trunc_divide"]], "celu() (in module ivy)": [[292, "ivy.celu"], [364, "ivy.celu"]], "celu() (ivy.array method)": [[292, "ivy.Array.celu"]], "celu() (ivy.container method)": [[292, "ivy.Container.celu"]], "elu() (in module ivy)": [[293, "ivy.elu"], [364, "ivy.elu"]], "elu() (ivy.array method)": [[293, "ivy.Array.elu"]], "elu() (ivy.container method)": [[293, "ivy.Container.elu"]], "hardshrink() (in module ivy)": [[294, "ivy.hardshrink"], [364, "ivy.hardshrink"]], "hardshrink() (ivy.array method)": [[294, "ivy.Array.hardshrink"]], "hardshrink() (ivy.container method)": [[294, "ivy.Container.hardshrink"]], "hardsilu() (in module ivy)": [[295, "ivy.hardsilu"], [364, "ivy.hardsilu"]], "hardsilu() (ivy.array method)": [[295, "ivy.Array.hardsilu"]], "hardsilu() (ivy.container method)": [[295, "ivy.Container.hardsilu"]], "hardtanh() (in module ivy)": [[296, "ivy.hardtanh"], [364, "ivy.hardtanh"]], "hardtanh() (ivy.array method)": [[296, "ivy.Array.hardtanh"]], "hardtanh() (ivy.container method)": [[296, "ivy.Container.hardtanh"]], "logit() (in module ivy)": [[297, "ivy.logit"], [364, "ivy.logit"]], "logit() (ivy.array method)": [[297, "ivy.Array.logit"]], "logit() (ivy.container method)": [[297, "ivy.Container.logit"]], "logsigmoid() (in module ivy)": [[298, "ivy.logsigmoid"], [364, "ivy.logsigmoid"]], "logsigmoid() (ivy.array method)": [[298, "ivy.Array.logsigmoid"]], "logsigmoid() (ivy.container method)": [[298, "ivy.Container.logsigmoid"]], "prelu() (in module ivy)": [[299, "ivy.prelu"], [364, "ivy.prelu"]], "prelu() (ivy.array method)": [[299, "ivy.Array.prelu"]], "prelu() (ivy.container method)": [[299, "ivy.Container.prelu"]], "relu6() (in module ivy)": [[300, "ivy.relu6"], [364, "ivy.relu6"]], "relu6() (ivy.array method)": [[300, "ivy.Array.relu6"]], "relu6() (ivy.container method)": [[300, "ivy.Container.relu6"]], "scaled_tanh() (in module ivy)": [[301, "ivy.scaled_tanh"], [364, "ivy.scaled_tanh"]], "scaled_tanh() (ivy.array method)": [[301, "ivy.Array.scaled_tanh"]], "scaled_tanh() (ivy.container method)": [[301, "ivy.Container.scaled_tanh"]], "selu() (in module ivy)": [[302, "ivy.selu"], [364, "ivy.selu"]], "selu() (ivy.array method)": [[302, "ivy.Array.selu"]], "selu() (ivy.container method)": [[302, "ivy.Container.selu"]], "silu() (in module ivy)": [[303, "ivy.silu"], [364, "ivy.silu"]], "silu() (ivy.array method)": [[303, "ivy.Array.silu"]], "silu() (ivy.container method)": [[303, "ivy.Container.silu"]], "softshrink() (in module ivy)": [[304, "ivy.softshrink"], [364, "ivy.softshrink"]], "softshrink() (ivy.array method)": [[304, "ivy.Array.softshrink"]], "softshrink() (ivy.container method)": [[304, "ivy.Container.softshrink"]], "stanh() (in module ivy)": [[305, "ivy.stanh"], [364, "ivy.stanh"]], "tanhshrink() (in module ivy)": [[306, "ivy.tanhshrink"], [364, "ivy.tanhshrink"]], "tanhshrink() (ivy.array method)": [[306, "ivy.Array.tanhshrink"]], "tanhshrink() (ivy.container method)": [[306, "ivy.Container.tanhshrink"]], "threshold() (in module ivy)": [[307, "ivy.threshold"], [364, "ivy.threshold"]], "threshold() (ivy.array method)": [[307, "ivy.Array.threshold"]], "threshold() (ivy.container method)": [[307, "ivy.Container.threshold"]], "thresholded_relu() (in module ivy)": [[308, "ivy.thresholded_relu"], [364, "ivy.thresholded_relu"]], "thresholded_relu() (ivy.array method)": [[308, "ivy.Array.thresholded_relu"]], "thresholded_relu() (ivy.container method)": [[308, "ivy.Container.thresholded_relu"]], "blackman_window() (in module ivy)": [[309, "ivy.blackman_window"], [366, "ivy.blackman_window"]], "blackman_window() (ivy.array method)": [[309, "ivy.Array.blackman_window"]], "blackman_window() (ivy.container method)": [[309, "ivy.Container.blackman_window"]], "eye_like() (in module ivy)": [[310, "ivy.eye_like"], [366, "ivy.eye_like"]], "eye_like() (ivy.array method)": [[310, "ivy.Array.eye_like"]], "eye_like() (ivy.container method)": [[310, "ivy.Container.eye_like"]], "hamming_window() (in module ivy)": [[311, "ivy.hamming_window"], [366, "ivy.hamming_window"]], "hamming_window() (ivy.container method)": [[311, "ivy.Container.hamming_window"]], "hann_window() (in module ivy)": [[312, "ivy.hann_window"], [366, "ivy.hann_window"]], "hann_window() (ivy.container method)": [[312, "ivy.Container.hann_window"]], "indices() (in module ivy)": [[313, "ivy.indices"], [366, "ivy.indices"]], "kaiser_bessel_derived_window() (in module ivy)": [[314, "ivy.kaiser_bessel_derived_window"], [366, "ivy.kaiser_bessel_derived_window"]], "kaiser_bessel_derived_window() (ivy.container method)": [[314, "ivy.Container.kaiser_bessel_derived_window"]], "kaiser_window() (in module ivy)": [[315, "ivy.kaiser_window"], [366, "ivy.kaiser_window"]], "kaiser_window() (ivy.container method)": [[315, "ivy.Container.kaiser_window"]], "mel_weight_matrix() (in module ivy)": [[316, "ivy.mel_weight_matrix"], [366, "ivy.mel_weight_matrix"]], "mel_weight_matrix() (ivy.array static method)": [[316, "ivy.Array.mel_weight_matrix"]], "mel_weight_matrix() (ivy.container method)": [[316, "ivy.Container.mel_weight_matrix"]], "ndenumerate() (in module ivy)": [[317, "ivy.ndenumerate"], [366, "ivy.ndenumerate"]], "ndindex() (in module ivy)": [[318, "ivy.ndindex"], [366, "ivy.ndindex"]], "polyval() (in module ivy)": [[319, "ivy.polyval"], [366, "ivy.polyval"]], "polyval() (ivy.container method)": [[319, "ivy.Container.polyval"]], "random_cp() (in module ivy)": [[320, "ivy.random_cp"], [366, "ivy.random_cp"]], "random_parafac2() (in module ivy)": [[321, "ivy.random_parafac2"], [366, "ivy.random_parafac2"]], "random_tr() (in module ivy)": [[322, "ivy.random_tr"], [366, "ivy.random_tr"]], "random_tt() (in module ivy)": [[323, "ivy.random_tt"], [366, "ivy.random_tt"]], "random_tucker() (in module ivy)": [[324, "ivy.random_tucker"], [366, "ivy.random_tucker"]], "tril_indices() (in module ivy)": [[325, "ivy.tril_indices"], [366, "ivy.tril_indices"]], "tril_indices() (ivy.container method)": [[325, "ivy.Container.tril_indices"]], "trilu() (in module ivy)": [[326, "ivy.trilu"], [366, "ivy.trilu"]], "trilu() (ivy.array method)": [[326, "ivy.Array.trilu"]], "trilu() (ivy.container method)": [[326, "ivy.Container.trilu"]], "unsorted_segment_mean() (in module ivy)": [[327, "ivy.unsorted_segment_mean"], [366, "ivy.unsorted_segment_mean"]], "unsorted_segment_mean() (ivy.array method)": [[327, "ivy.Array.unsorted_segment_mean"]], "unsorted_segment_mean() (ivy.container method)": [[327, "ivy.Container.unsorted_segment_mean"]], "unsorted_segment_min() (in module ivy)": [[328, "ivy.unsorted_segment_min"], [366, "ivy.unsorted_segment_min"]], "unsorted_segment_min() (ivy.array method)": [[328, "ivy.Array.unsorted_segment_min"]], "unsorted_segment_min() (ivy.container method)": [[328, "ivy.Container.unsorted_segment_min"]], "unsorted_segment_sum() (in module ivy)": [[329, "ivy.unsorted_segment_sum"], [366, "ivy.unsorted_segment_sum"]], "unsorted_segment_sum() (ivy.array method)": [[329, "ivy.Array.unsorted_segment_sum"]], "unsorted_segment_sum() (ivy.container method)": [[329, "ivy.Container.unsorted_segment_sum"]], "vorbis_window() (in module ivy)": [[330, "ivy.vorbis_window"], [366, "ivy.vorbis_window"]], "vorbis_window() (ivy.container method)": [[330, "ivy.Container.vorbis_window"]], "allclose() (in module ivy)": [[331, "ivy.allclose"], [369, "ivy.allclose"]], "allclose() (ivy.array method)": [[331, "ivy.Array.allclose"]], "allclose() (ivy.container method)": [[331, "ivy.Container.allclose"]], "amax() (in module ivy)": [[332, "ivy.amax"], [369, "ivy.amax"]], "amax() (ivy.array method)": [[332, "ivy.Array.amax"]], "amax() (ivy.container method)": [[332, "ivy.Container.amax"]], "amin() (in module ivy)": [[333, "ivy.amin"], [369, "ivy.amin"]], "amin() (ivy.array method)": [[333, "ivy.Array.amin"]], "amin() (ivy.container method)": [[333, "ivy.Container.amin"]], "binarizer() (in module ivy)": [[334, "ivy.binarizer"], [369, "ivy.binarizer"]], "binarizer() (ivy.array method)": [[334, "ivy.Array.binarizer"]], "binarizer() (ivy.container method)": [[334, "ivy.Container.binarizer"]], "conj() (in module ivy)": [[335, "ivy.conj"], [369, "ivy.conj"]], "conj() (ivy.array method)": [[335, "ivy.Array.conj"]], "conj() (ivy.container method)": [[335, "ivy.Container.conj"]], "copysign() (in module ivy)": [[336, "ivy.copysign"], [369, "ivy.copysign"]], "copysign() (ivy.array method)": [[336, "ivy.Array.copysign"]], "copysign() (ivy.container method)": [[336, "ivy.Container.copysign"]], "count_nonzero() (in module ivy)": [[337, "ivy.count_nonzero"], [369, "ivy.count_nonzero"]], "count_nonzero() (ivy.array method)": [[337, "ivy.Array.count_nonzero"]], "count_nonzero() (ivy.container method)": [[337, "ivy.Container.count_nonzero"]], "diff() (in module ivy)": [[338, "ivy.diff"], [369, "ivy.diff"]], "diff() (ivy.array method)": [[338, "ivy.Array.diff"]], "diff() (ivy.container method)": [[338, "ivy.Container.diff"]], "digamma() (in module ivy)": [[339, "ivy.digamma"], [369, "ivy.digamma"]], "digamma() (ivy.array method)": [[339, "ivy.Array.digamma"]], "digamma() (ivy.container method)": [[339, "ivy.Container.digamma"]], "erfc() (in module ivy)": [[340, "ivy.erfc"], [369, "ivy.erfc"]], "erfc() (ivy.array method)": [[340, "ivy.Array.erfc"]], "erfc() (ivy.container method)": [[340, "ivy.Container.erfc"]], "erfinv() (in module ivy)": [[341, "ivy.erfinv"], [369, "ivy.erfinv"]], "erfinv() (ivy.array method)": [[341, "ivy.Array.erfinv"]], "erfinv() (ivy.container method)": [[341, "ivy.Container.erfinv"]], "fix() (in module ivy)": [[342, "ivy.fix"], [369, "ivy.fix"]], "fix() (ivy.array method)": [[342, "ivy.Array.fix"]], "fix() (ivy.container method)": [[342, "ivy.Container.fix"]], "float_power() (in module ivy)": [[343, "ivy.float_power"], [369, "ivy.float_power"]], "float_power() (ivy.array method)": [[343, "ivy.Array.float_power"]], "float_power() (ivy.container method)": [[343, "ivy.Container.float_power"]], "fmax() (in module ivy)": [[344, "ivy.fmax"], [369, "ivy.fmax"]], "fmax() (ivy.array method)": [[344, "ivy.Array.fmax"]], "fmax() (ivy.container method)": [[344, "ivy.Container.fmax"]], "frexp() (in module ivy)": [[345, "ivy.frexp"], [369, "ivy.frexp"]], "frexp() (ivy.array method)": [[345, "ivy.Array.frexp"]], "frexp() (ivy.container method)": [[345, "ivy.Container.frexp"]], "gradient() (in module ivy)": [[346, "ivy.gradient"], [369, "ivy.gradient"]], "gradient() (ivy.array method)": [[346, "ivy.Array.gradient"]], "gradient() (ivy.container method)": [[346, "ivy.Container.gradient"]], "hypot() (in module ivy)": [[347, "ivy.hypot"], [369, "ivy.hypot"]], "hypot() (ivy.array method)": [[347, "ivy.Array.hypot"]], "hypot() (ivy.container method)": [[347, "ivy.Container.hypot"]], "isclose() (in module ivy)": [[348, "ivy.isclose"], [369, "ivy.isclose"]], "isclose() (ivy.array method)": [[348, "ivy.Array.isclose"]], "isclose() (ivy.container method)": [[348, "ivy.Container.isclose"]], "ldexp() (in module ivy)": [[349, "ivy.ldexp"], [369, "ivy.ldexp"]], "ldexp() (ivy.array method)": [[349, "ivy.Array.ldexp"]], "ldexp() (ivy.container method)": [[349, "ivy.Container.ldexp"]], "lerp() (in module ivy)": [[350, "ivy.lerp"], [369, "ivy.lerp"]], "lerp() (ivy.array method)": [[350, "ivy.Array.lerp"]], "lerp() (ivy.container method)": [[350, "ivy.Container.lerp"]], "lgamma() (in module ivy)": [[351, "ivy.lgamma"], [369, "ivy.lgamma"]], "lgamma() (ivy.array method)": [[351, "ivy.Array.lgamma"]], "lgamma() (ivy.container method)": [[351, "ivy.Container.lgamma"]], "modf() (in module ivy)": [[352, "ivy.modf"], [369, "ivy.modf"]], "modf() (ivy.array method)": [[352, "ivy.Array.modf"]], "modf() (ivy.container method)": [[352, "ivy.Container.modf"]], "nansum() (in module ivy)": [[353, "ivy.nansum"], [369, "ivy.nansum"]], "nansum() (ivy.array method)": [[353, "ivy.Array.nansum"]], "nansum() (ivy.container method)": [[353, "ivy.Container.nansum"]], "nextafter() (in module ivy)": [[354, "ivy.nextafter"], [369, "ivy.nextafter"]], "nextafter() (ivy.array method)": [[354, "ivy.Array.nextafter"]], "nextafter() (ivy.container method)": [[354, "ivy.Container.nextafter"]], "signbit() (in module ivy)": [[355, "ivy.signbit"], [369, "ivy.signbit"]], "signbit() (ivy.array method)": [[355, "ivy.Array.signbit"]], "signbit() (ivy.container method)": [[355, "ivy.Container.signbit"]], "sinc() (in module ivy)": [[356, "ivy.sinc"], [369, "ivy.sinc"]], "sinc() (ivy.array method)": [[356, "ivy.Array.sinc"]], "sinc() (ivy.container method)": [[356, "ivy.Container.sinc"]], "sparsify_tensor() (in module ivy)": [[357, "ivy.sparsify_tensor"], [369, "ivy.sparsify_tensor"]], "sparsify_tensor() (ivy.array method)": [[357, "ivy.Array.sparsify_tensor"]], "sparsify_tensor() (ivy.container method)": [[357, "ivy.Container.sparsify_tensor"]], "xlogy() (in module ivy)": [[358, "ivy.xlogy"], [369, "ivy.xlogy"]], "xlogy() (ivy.array method)": [[358, "ivy.Array.xlogy"]], "xlogy() (ivy.container method)": [[358, "ivy.Container.xlogy"]], "zeta() (in module ivy)": [[359, "ivy.zeta"], [369, "ivy.zeta"]], "zeta() (ivy.array method)": [[359, "ivy.Array.zeta"]], "zeta() (ivy.container method)": [[359, "ivy.Container.zeta"]], "reduce() (in module ivy)": [[360, "ivy.reduce"], [370, "ivy.reduce"]], "reduce() (ivy.array method)": [[360, "ivy.Array.reduce"]], "reduce() (ivy.container method)": [[360, "ivy.Container.reduce"]], "bind_custom_gradient_function() (in module ivy)": [[361, "ivy.bind_custom_gradient_function"], [371, "ivy.bind_custom_gradient_function"]], "jvp() (in module ivy)": [[362, "ivy.jvp"], [371, "ivy.jvp"]], "vjp() (in module ivy)": [[363, "ivy.vjp"], [371, "ivy.vjp"]], "ivy.functional.ivy.experimental.activations": [[364, "module-ivy.functional.ivy.experimental.activations"]], "ivy.functional.ivy.experimental.constants": [[365, "module-ivy.functional.ivy.experimental.constants"]], "ivy.functional.ivy.experimental.creation": [[366, "module-ivy.functional.ivy.experimental.creation"]], "ivy.functional.ivy.experimental.data_type": [[367, "module-ivy.functional.ivy.experimental.data_type"]], "ivy.functional.ivy.experimental.device": [[368, "module-ivy.functional.ivy.experimental.device"]], "ivy.functional.ivy.experimental.elementwise": [[369, "module-ivy.functional.ivy.experimental.elementwise"]], "ivy.functional.ivy.experimental.general": [[370, "module-ivy.functional.ivy.experimental.general"]], "ivy.functional.ivy.experimental.gradients": [[371, "module-ivy.functional.ivy.experimental.gradients"]], "adaptive_avg_pool1d() (in module ivy)": [[372, "ivy.adaptive_avg_pool1d"], [386, "ivy.adaptive_avg_pool1d"]], "adaptive_avg_pool2d() (in module ivy)": [[372, "ivy.adaptive_avg_pool2d"], [387, "ivy.adaptive_avg_pool2d"]], "adaptive_max_pool2d() (in module ivy)": [[372, "ivy.adaptive_max_pool2d"], [388, "ivy.adaptive_max_pool2d"]], "adaptive_max_pool3d() (in module ivy)": [[372, "ivy.adaptive_max_pool3d"], [389, "ivy.adaptive_max_pool3d"]], "area_interpolate() (in module ivy)": [[372, "ivy.area_interpolate"], [390, "ivy.area_interpolate"]], "avg_pool1d() (in module ivy)": [[372, "ivy.avg_pool1d"], [391, "ivy.avg_pool1d"]], "avg_pool2d() (in module ivy)": [[372, "ivy.avg_pool2d"], [392, "ivy.avg_pool2d"]], "avg_pool3d() (in module ivy)": [[372, "ivy.avg_pool3d"], [393, "ivy.avg_pool3d"]], "dct() (in module ivy)": [[372, "ivy.dct"], [394, "ivy.dct"]], "dft() (in module ivy)": [[372, "ivy.dft"], [395, "ivy.dft"]], "dropout1d() (in module ivy)": [[372, "ivy.dropout1d"], [396, "ivy.dropout1d"]], "dropout2d() (in module ivy)": [[372, "ivy.dropout2d"], [397, "ivy.dropout2d"]], "dropout3d() (in module ivy)": [[372, "ivy.dropout3d"], [398, "ivy.dropout3d"]], "embedding() (in module ivy)": [[372, "ivy.embedding"], [399, "ivy.embedding"]], "fft() (in module ivy)": [[372, "ivy.fft"], [400, "ivy.fft"]], "fft2() (in module ivy)": [[372, "ivy.fft2"], [401, "ivy.fft2"]], "generate_einsum_equation() (in module ivy)": [[372, "ivy.generate_einsum_equation"], [402, "ivy.generate_einsum_equation"]], "get_interpolate_kernel() (in module ivy)": [[372, "ivy.get_interpolate_kernel"], [403, "ivy.get_interpolate_kernel"]], "idct() (in module ivy)": [[372, "ivy.idct"], [404, "ivy.idct"]], "ifft() (in module ivy)": [[372, "ivy.ifft"], [405, "ivy.ifft"]], "ifftn() (in module ivy)": [[372, "ivy.ifftn"], [406, "ivy.ifftn"]], "interp() (in module ivy)": [[372, "ivy.interp"], [407, "ivy.interp"]], "interpolate() (in module ivy)": [[372, "ivy.interpolate"], [408, "ivy.interpolate"]], "ivy.functional.ivy.experimental.layers": [[372, "module-ivy.functional.ivy.experimental.layers"]], "max_pool1d() (in module ivy)": [[372, "ivy.max_pool1d"], [409, "ivy.max_pool1d"]], "max_pool2d() (in module ivy)": [[372, "ivy.max_pool2d"], [410, "ivy.max_pool2d"]], "max_pool3d() (in module ivy)": [[372, "ivy.max_pool3d"], [411, "ivy.max_pool3d"]], "max_unpool1d() (in module ivy)": [[372, "ivy.max_unpool1d"], [412, "ivy.max_unpool1d"]], "nearest_interpolate() (in module ivy)": [[372, "ivy.nearest_interpolate"], [413, "ivy.nearest_interpolate"]], "pool() (in module ivy)": [[372, "ivy.pool"], [414, "ivy.pool"]], "reduce_window() (in module ivy)": [[372, "ivy.reduce_window"], [415, "ivy.reduce_window"]], "rfft() (in module ivy)": [[372, "ivy.rfft"], [416, "ivy.rfft"]], "rfftn() (in module ivy)": [[372, "ivy.rfftn"], [417, "ivy.rfftn"]], "rnn() (in module ivy)": [[372, "ivy.rnn"], [418, "ivy.rnn"]], "sliding_window() (in module ivy)": [[372, "ivy.sliding_window"], [419, "ivy.sliding_window"]], "stft() (in module ivy)": [[372, "ivy.stft"], [420, "ivy.stft"]], "adjoint() (in module ivy)": [[373, "ivy.adjoint"], [421, "ivy.adjoint"]], "batched_outer() (in module ivy)": [[373, "ivy.batched_outer"], [422, "ivy.batched_outer"]], "cond() (in module ivy)": [[373, "ivy.cond"], [423, "ivy.cond"]], "diagflat() (in module ivy)": [[373, "ivy.diagflat"], [424, "ivy.diagflat"]], "dot() (in module ivy)": [[373, "ivy.dot"], [425, "ivy.dot"]], "eig() (in module ivy)": [[373, "ivy.eig"], [426, "ivy.eig"], [634, "ivy.eig"], [669, "ivy.eig"]], "eigh_tridiagonal() (in module ivy)": [[373, "ivy.eigh_tridiagonal"], [427, "ivy.eigh_tridiagonal"]], "eigvals() (in module ivy)": [[373, "ivy.eigvals"], [428, "ivy.eigvals"]], "general_inner_product() (in module ivy)": [[373, "ivy.general_inner_product"], [429, "ivy.general_inner_product"]], "higher_order_moment() (in module ivy)": [[373, "ivy.higher_order_moment"], [430, "ivy.higher_order_moment"]], "initialize_tucker() (in module ivy)": [[373, "ivy.initialize_tucker"], [431, "ivy.initialize_tucker"]], "ivy.functional.ivy.experimental.linear_algebra": [[373, "module-ivy.functional.ivy.experimental.linear_algebra"]], "khatri_rao() (in module ivy)": [[373, "ivy.khatri_rao"], [432, "ivy.khatri_rao"]], "kron() (in module ivy)": [[373, "ivy.kron"], [433, "ivy.kron"]], "kronecker() (in module ivy)": [[373, "ivy.kronecker"], [434, "ivy.kronecker"]], "lu_factor() (in module ivy)": [[373, "ivy.lu_factor"], [435, "ivy.lu_factor"]], "lu_solve() (in module ivy)": [[373, "ivy.lu_solve"], [436, "ivy.lu_solve"]], "make_svd_non_negative() (in module ivy)": [[373, "ivy.make_svd_non_negative"], [437, "ivy.make_svd_non_negative"]], "matrix_exp() (in module ivy)": [[373, "ivy.matrix_exp"], [438, "ivy.matrix_exp"]], "mode_dot() (in module ivy)": [[373, "ivy.mode_dot"], [439, "ivy.mode_dot"]], "multi_dot() (in module ivy)": [[373, "ivy.multi_dot"], [440, "ivy.multi_dot"]], "multi_mode_dot() (in module ivy)": [[373, "ivy.multi_mode_dot"], [441, "ivy.multi_mode_dot"]], "partial_tucker() (in module ivy)": [[373, "ivy.partial_tucker"], [442, "ivy.partial_tucker"]], "solve_triangular() (in module ivy)": [[373, "ivy.solve_triangular"], [443, "ivy.solve_triangular"]], "svd_flip() (in module ivy)": [[373, "ivy.svd_flip"], [444, "ivy.svd_flip"]], "tensor_train() (in module ivy)": [[373, "ivy.tensor_train"], [445, "ivy.tensor_train"]], "truncated_svd() (in module ivy)": [[373, "ivy.truncated_svd"], [446, "ivy.truncated_svd"]], "tt_matrix_to_tensor() (in module ivy)": [[373, "ivy.tt_matrix_to_tensor"], [447, "ivy.tt_matrix_to_tensor"]], "tucker() (in module ivy)": [[373, "ivy.tucker"], [448, "ivy.tucker"]], "hinge_embedding_loss() (in module ivy)": [[374, "ivy.hinge_embedding_loss"], [449, "ivy.hinge_embedding_loss"]], "huber_loss() (in module ivy)": [[374, "ivy.huber_loss"], [450, "ivy.huber_loss"]], "ivy.functional.ivy.experimental.losses": [[374, "module-ivy.functional.ivy.experimental.losses"]], "kl_div() (in module ivy)": [[374, "ivy.kl_div"], [451, "ivy.kl_div"]], "l1_loss() (in module ivy)": [[374, "ivy.l1_loss"], [452, "ivy.l1_loss"]], "log_poisson_loss() (in module ivy)": [[374, "ivy.log_poisson_loss"], [453, "ivy.log_poisson_loss"]], "poisson_nll_loss() (in module ivy)": [[374, "ivy.poisson_nll_loss"], [454, "ivy.poisson_nll_loss"]], "smooth_l1_loss() (in module ivy)": [[374, "ivy.smooth_l1_loss"], [455, "ivy.smooth_l1_loss"]], "soft_margin_loss() (in module ivy)": [[374, "ivy.soft_margin_loss"], [456, "ivy.soft_margin_loss"]], "as_strided() (in module ivy)": [[375, "ivy.as_strided"], [457, "ivy.as_strided"]], "associative_scan() (in module ivy)": [[375, "ivy.associative_scan"], [458, "ivy.associative_scan"]], "atleast_1d() (in module ivy)": [[375, "ivy.atleast_1d"], [459, "ivy.atleast_1d"]], "atleast_2d() (in module ivy)": [[375, "ivy.atleast_2d"], [460, "ivy.atleast_2d"]], "atleast_3d() (in module ivy)": [[375, "ivy.atleast_3d"], [461, "ivy.atleast_3d"]], "broadcast_shapes() (in module ivy)": [[375, "ivy.broadcast_shapes"], [462, "ivy.broadcast_shapes"]], "check_scalar() (in module ivy)": [[375, "ivy.check_scalar"], [463, "ivy.check_scalar"]], "choose() (in module ivy)": [[375, "ivy.choose"], [464, "ivy.choose"]], "column_stack() (in module ivy)": [[375, "ivy.column_stack"], [465, "ivy.column_stack"]], "concat_from_sequence() (in module ivy)": [[375, "ivy.concat_from_sequence"], [466, "ivy.concat_from_sequence"]], "dsplit() (in module ivy)": [[375, "ivy.dsplit"], [467, "ivy.dsplit"]], "dstack() (in module ivy)": [[375, "ivy.dstack"], [468, "ivy.dstack"]], "expand() (in module ivy)": [[375, "ivy.expand"], [469, "ivy.expand"]], "fill_diagonal() (in module ivy)": [[375, "ivy.fill_diagonal"], [470, "ivy.fill_diagonal"]], "flatten() (in module ivy)": [[375, "ivy.flatten"], [471, "ivy.flatten"]], "fliplr() (in module ivy)": [[375, "ivy.fliplr"], [472, "ivy.fliplr"]], "flipud() (in module ivy)": [[375, "ivy.flipud"], [473, "ivy.flipud"]], "fold() (in module ivy)": [[375, "ivy.fold"], [474, "ivy.fold"]], "heaviside() (in module ivy)": [[375, "ivy.heaviside"], [475, "ivy.heaviside"]], "hsplit() (in module ivy)": [[375, "ivy.hsplit"], [476, "ivy.hsplit"]], "hstack() (in module ivy)": [[375, "ivy.hstack"], [477, "ivy.hstack"]], "i0() (in module ivy)": [[375, "ivy.i0"], [478, "ivy.i0"]], "ivy.functional.ivy.experimental.manipulation": [[375, "module-ivy.functional.ivy.experimental.manipulation"]], "matricize() (in module ivy)": [[375, "ivy.matricize"], [479, "ivy.matricize"]], "moveaxis() (in module ivy)": [[375, "ivy.moveaxis"], [480, "ivy.moveaxis"]], "pad() (in module ivy)": [[375, "ivy.pad"], [481, "ivy.pad"]], "partial_fold() (in module ivy)": [[375, "ivy.partial_fold"], [482, "ivy.partial_fold"]], "partial_tensor_to_vec() (in module ivy)": [[375, "ivy.partial_tensor_to_vec"], [483, "ivy.partial_tensor_to_vec"]], "partial_unfold() (in module ivy)": [[375, "ivy.partial_unfold"], [484, "ivy.partial_unfold"]], "partial_vec_to_tensor() (in module ivy)": [[375, "ivy.partial_vec_to_tensor"], [485, "ivy.partial_vec_to_tensor"]], "put_along_axis() (in module ivy)": [[375, "ivy.put_along_axis"], [486, "ivy.put_along_axis"]], "rot90() (in module ivy)": [[375, "ivy.rot90"], [487, "ivy.rot90"]], "soft_thresholding() (in module ivy)": [[375, "ivy.soft_thresholding"], [488, "ivy.soft_thresholding"]], "take() (in module ivy)": [[375, "ivy.take"], [489, "ivy.take"]], "take_along_axis() (in module ivy)": [[375, "ivy.take_along_axis"], [490, "ivy.take_along_axis"]], "top_k() (in module ivy)": [[375, "ivy.top_k"], [491, "ivy.top_k"]], "trim_zeros() (in module ivy)": [[375, "ivy.trim_zeros"], [492, "ivy.trim_zeros"]], "unflatten() (in module ivy)": [[375, "ivy.unflatten"], [493, "ivy.unflatten"]], "unfold() (in module ivy)": [[375, "ivy.unfold"], [494, "ivy.unfold"]], "unique_consecutive() (in module ivy)": [[375, "ivy.unique_consecutive"], [495, "ivy.unique_consecutive"]], "vsplit() (in module ivy)": [[375, "ivy.vsplit"], [496, "ivy.vsplit"]], "vstack() (in module ivy)": [[375, "ivy.vstack"], [497, "ivy.vstack"]], "ivy.functional.ivy.experimental.meta": [[376, "module-ivy.functional.ivy.experimental.meta"]], "ivy.functional.ivy.experimental.nest": [[377, "module-ivy.functional.ivy.experimental.nest"]], "batch_norm() (in module ivy)": [[378, "ivy.batch_norm"], [498, "ivy.batch_norm"]], "group_norm() (in module ivy)": [[378, "ivy.group_norm"], [499, "ivy.group_norm"]], "instance_norm() (in module ivy)": [[378, "ivy.instance_norm"], [500, "ivy.instance_norm"]], "ivy.functional.ivy.experimental.norms": [[378, "module-ivy.functional.ivy.experimental.norms"]], "l1_normalize() (in module ivy)": [[378, "ivy.l1_normalize"], [501, "ivy.l1_normalize"]], "l2_normalize() (in module ivy)": [[378, "ivy.l2_normalize"], [502, "ivy.l2_normalize"]], "local_response_norm() (in module ivy)": [[378, "ivy.local_response_norm"], [503, "ivy.local_response_norm"]], "lp_normalize() (in module ivy)": [[378, "ivy.lp_normalize"], [504, "ivy.lp_normalize"]], "bernoulli() (in module ivy)": [[379, "ivy.bernoulli"], [505, "ivy.bernoulli"]], "beta() (in module ivy)": [[379, "ivy.beta"], [506, "ivy.beta"]], "dirichlet() (in module ivy)": [[379, "ivy.dirichlet"], [507, "ivy.dirichlet"]], "gamma() (in module ivy)": [[379, "ivy.gamma"], [508, "ivy.gamma"]], "ivy.functional.ivy.experimental.random": [[379, "module-ivy.functional.ivy.experimental.random"]], "poisson() (in module ivy)": [[379, "ivy.poisson"], [509, "ivy.poisson"]], "ivy.functional.ivy.experimental.searching": [[380, "module-ivy.functional.ivy.experimental.searching"]], "unravel_index() (in module ivy)": [[380, "ivy.unravel_index"], [510, "ivy.unravel_index"]], "ivy.functional.ivy.experimental.set": [[381, "module-ivy.functional.ivy.experimental.set"]], "invert_permutation() (in module ivy)": [[382, "ivy.invert_permutation"], [511, "ivy.invert_permutation"]], "ivy.functional.ivy.experimental.sorting": [[382, "module-ivy.functional.ivy.experimental.sorting"]], "lexsort() (in module ivy)": [[382, "ivy.lexsort"], [512, "ivy.lexsort"]], "nativesparsearray (class in ivy)": [[383, "ivy.NativeSparseArray"]], "sparsearray (class in ivy)": [[383, "ivy.SparseArray"]], "is_ivy_sparse_array() (in module ivy)": [[383, "ivy.is_ivy_sparse_array"], [513, "ivy.is_ivy_sparse_array"]], "is_native_sparse_array() (in module ivy)": [[383, "ivy.is_native_sparse_array"], [514, "ivy.is_native_sparse_array"]], "ivy.functional.ivy.experimental.sparse_array": [[383, "module-ivy.functional.ivy.experimental.sparse_array"]], "native_sparse_array() (in module ivy)": [[383, "ivy.native_sparse_array"], [515, "ivy.native_sparse_array"]], "native_sparse_array_to_indices_values_and_shape() (in module ivy)": [[383, "ivy.native_sparse_array_to_indices_values_and_shape"], [516, "ivy.native_sparse_array_to_indices_values_and_shape"]], "bincount() (in module ivy)": [[384, "ivy.bincount"], [517, "ivy.bincount"]], "corrcoef() (in module ivy)": [[384, "ivy.corrcoef"], [518, "ivy.corrcoef"]], "cov() (in module ivy)": [[384, "ivy.cov"], [519, "ivy.cov"]], "cummax() (in module ivy)": [[384, "ivy.cummax"], [520, "ivy.cummax"]], "cummin() (in module ivy)": [[384, "ivy.cummin"], [521, "ivy.cummin"]], "histogram() (in module ivy)": [[384, "ivy.histogram"], [522, "ivy.histogram"]], "igamma() (in module ivy)": [[384, "ivy.igamma"], [523, "ivy.igamma"]], "ivy.functional.ivy.experimental.statistical": [[384, "module-ivy.functional.ivy.experimental.statistical"]], "median() (in module ivy)": [[384, "ivy.median"], [524, "ivy.median"]], "nanmean() (in module ivy)": [[384, "ivy.nanmean"], [525, "ivy.nanmean"]], "nanmedian() (in module ivy)": [[384, "ivy.nanmedian"], [526, "ivy.nanmedian"]], "nanmin() (in module ivy)": [[384, "ivy.nanmin"], [527, "ivy.nanmin"]], "nanprod() (in module ivy)": [[384, "ivy.nanprod"], [528, "ivy.nanprod"]], "quantile() (in module ivy)": [[384, "ivy.quantile"], [529, "ivy.quantile"]], "ivy.functional.ivy.experimental.utility": [[385, "module-ivy.functional.ivy.experimental.utility"]], "optional_get_element() (in module ivy)": [[385, "ivy.optional_get_element"], [530, "ivy.optional_get_element"]], "adaptive_avg_pool1d() (ivy.array method)": [[386, "ivy.Array.adaptive_avg_pool1d"]], "adaptive_avg_pool1d() (ivy.container method)": [[386, "ivy.Container.adaptive_avg_pool1d"]], "adaptive_avg_pool2d() (ivy.array method)": [[387, "ivy.Array.adaptive_avg_pool2d"]], "adaptive_avg_pool2d() (ivy.container method)": [[387, "ivy.Container.adaptive_avg_pool2d"]], "adaptive_max_pool2d() (ivy.array method)": [[388, "ivy.Array.adaptive_max_pool2d"]], "adaptive_max_pool2d() (ivy.container method)": [[388, "ivy.Container.adaptive_max_pool2d"]], "adaptive_max_pool3d() (ivy.array method)": [[389, "ivy.Array.adaptive_max_pool3d"]], "adaptive_max_pool3d() (ivy.container method)": [[389, "ivy.Container.adaptive_max_pool3d"]], "avg_pool1d() (ivy.array method)": [[391, "ivy.Array.avg_pool1d"]], "avg_pool1d() (ivy.container method)": [[391, "ivy.Container.avg_pool1d"]], "avg_pool2d() (ivy.array method)": [[392, "ivy.Array.avg_pool2d"]], "avg_pool2d() (ivy.container method)": [[392, "ivy.Container.avg_pool2d"]], "avg_pool3d() (ivy.array method)": [[393, "ivy.Array.avg_pool3d"]], "avg_pool3d() (ivy.container method)": [[393, "ivy.Container.avg_pool3d"]], "dct() (ivy.array method)": [[394, "ivy.Array.dct"]], "dct() (ivy.container method)": [[394, "ivy.Container.dct"]], "dft() (ivy.array method)": [[395, "ivy.Array.dft"]], "dft() (ivy.container method)": [[395, "ivy.Container.dft"]], "dropout1d() (ivy.array method)": [[396, "ivy.Array.dropout1d"]], "dropout1d() (ivy.container method)": [[396, "ivy.Container.dropout1d"]], "dropout2d() (ivy.array method)": [[397, "ivy.Array.dropout2d"]], "dropout2d() (ivy.container method)": [[397, "ivy.Container.dropout2d"]], "dropout3d() (ivy.array method)": [[398, "ivy.Array.dropout3d"]], "dropout3d() (ivy.container method)": [[398, "ivy.Container.dropout3d"]], "embedding() (ivy.array method)": [[399, "ivy.Array.embedding"]], "embedding() (ivy.container method)": [[399, "ivy.Container.embedding"]], "fft() (ivy.array method)": [[400, "ivy.Array.fft"]], "fft() (ivy.container method)": [[400, "ivy.Container.fft"]], "fft2() (ivy.array method)": [[401, "ivy.Array.fft2"]], "idct() (ivy.array method)": [[404, "ivy.Array.idct"]], "idct() (ivy.container method)": [[404, "ivy.Container.idct"]], "ifft() (ivy.array method)": [[405, "ivy.Array.ifft"]], "ifft() (ivy.container method)": [[405, "ivy.Container.ifft"]], "ifftn() (ivy.array method)": [[406, "ivy.Array.ifftn"]], "ifftn() (ivy.container method)": [[406, "ivy.Container.ifftn"]], "interpolate() (ivy.array method)": [[408, "ivy.Array.interpolate"]], "interpolate() (ivy.container method)": [[408, "ivy.Container.interpolate"]], "max_pool1d() (ivy.array method)": [[409, "ivy.Array.max_pool1d"]], "max_pool1d() (ivy.container method)": [[409, "ivy.Container.max_pool1d"]], "max_pool2d() (ivy.array method)": [[410, "ivy.Array.max_pool2d"]], "max_pool2d() (ivy.container method)": [[410, "ivy.Container.max_pool2d"]], "max_pool3d() (ivy.array method)": [[411, "ivy.Array.max_pool3d"]], "max_pool3d() (ivy.container method)": [[411, "ivy.Container.max_pool3d"]], "max_unpool1d() (ivy.array method)": [[412, "ivy.Array.max_unpool1d"]], "max_unpool1d() (ivy.container method)": [[412, "ivy.Container.max_unpool1d"]], "reduce_window() (ivy.array method)": [[415, "ivy.Array.reduce_window"]], "reduce_window() (ivy.container method)": [[415, "ivy.Container.reduce_window"]], "rfft() (ivy.array method)": [[416, "ivy.Array.rfft"]], "rfft() (ivy.container method)": [[416, "ivy.Container.rfft"]], "rfftn() (ivy.array method)": [[417, "ivy.Array.rfftn"]], "rfftn() (ivy.container method)": [[417, "ivy.Container.rfftn"]], "sliding_window() (ivy.array method)": [[419, "ivy.Array.sliding_window"]], "sliding_window() (ivy.container method)": [[419, "ivy.Container.sliding_window"]], "stft() (ivy.array method)": [[420, "ivy.Array.stft"]], "stft() (ivy.container method)": [[420, "ivy.Container.stft"]], "adjoint() (ivy.array method)": [[421, "ivy.Array.adjoint"]], "adjoint() (ivy.container method)": [[421, "ivy.Container.adjoint"]], "batched_outer() (ivy.array method)": [[422, "ivy.Array.batched_outer"]], "batched_outer() (ivy.container method)": [[422, "ivy.Container.batched_outer"]], "cond() (ivy.array method)": [[423, "ivy.Array.cond"]], "cond() (ivy.container method)": [[423, "ivy.Container.cond"]], "diagflat() (ivy.array method)": [[424, "ivy.Array.diagflat"]], "diagflat() (ivy.container method)": [[424, "ivy.Container.diagflat"]], "dot() (ivy.array method)": [[425, "ivy.Array.dot"]], "dot() (ivy.container method)": [[425, "ivy.Container.dot"]], "eig() (ivy.array method)": [[426, "ivy.Array.eig"], [669, "ivy.Array.eig"]], "eig() (ivy.container method)": [[426, "ivy.Container.eig"], [669, "ivy.Container.eig"]], "eigh_tridiagonal() (ivy.array method)": [[427, "ivy.Array.eigh_tridiagonal"]], "eigh_tridiagonal() (ivy.container method)": [[427, "ivy.Container.eigh_tridiagonal"]], "eigvals() (ivy.array method)": [[428, "ivy.Array.eigvals"]], "eigvals() (ivy.container method)": [[428, "ivy.Container.eigvals"]], "general_inner_product() (ivy.array method)": [[429, "ivy.Array.general_inner_product"]], "general_inner_product() (ivy.container method)": [[429, "ivy.Container.general_inner_product"]], "higher_order_moment() (ivy.array method)": [[430, "ivy.Array.higher_order_moment"]], "higher_order_moment() (ivy.container method)": [[430, "ivy.Container.higher_order_moment"]], "initialize_tucker() (ivy.array method)": [[431, "ivy.Array.initialize_tucker"]], "initialize_tucker() (ivy.container method)": [[431, "ivy.Container.initialize_tucker"]], "kron() (ivy.array method)": [[433, "ivy.Array.kron"]], "kron() (ivy.container method)": [[433, "ivy.Container.kron"]], "make_svd_non_negative() (ivy.array method)": [[437, "ivy.Array.make_svd_non_negative"]], "make_svd_non_negative() (ivy.container method)": [[437, "ivy.Container.make_svd_non_negative"]], "matrix_exp() (ivy.array method)": [[438, "ivy.Array.matrix_exp"]], "matrix_exp() (ivy.container method)": [[438, "ivy.Container.matrix_exp"]], "mode_dot() (ivy.array method)": [[439, "ivy.Array.mode_dot"]], "mode_dot() (ivy.container method)": [[439, "ivy.Container.mode_dot"]], "multi_dot() (ivy.array method)": [[440, "ivy.Array.multi_dot"]], "multi_dot() (ivy.container method)": [[440, "ivy.Container.multi_dot"]], "multi_mode_dot() (ivy.array method)": [[441, "ivy.Array.multi_mode_dot"]], "multi_mode_dot() (ivy.container method)": [[441, "ivy.Container.multi_mode_dot"]], "partial_tucker() (ivy.array method)": [[442, "ivy.Array.partial_tucker"]], "partial_tucker() (ivy.container method)": [[442, "ivy.Container.partial_tucker"]], "svd_flip() (ivy.array method)": [[444, "ivy.Array.svd_flip"]], "svd_flip() (ivy.container method)": [[444, "ivy.Container.svd_flip"]], "tensor_train() (ivy.array method)": [[445, "ivy.Array.tensor_train"]], "tensor_train() (ivy.container method)": [[445, "ivy.Container.tensor_train"]], "truncated_svd() (ivy.array method)": [[446, "ivy.Array.truncated_svd"]], "truncated_svd() (ivy.container method)": [[446, "ivy.Container.truncated_svd"]], "tt_matrix_to_tensor() (ivy.array method)": [[447, "ivy.Array.tt_matrix_to_tensor"]], "tt_matrix_to_tensor() (ivy.container method)": [[447, "ivy.Container.tt_matrix_to_tensor"]], "tucker() (ivy.array method)": [[448, "ivy.Array.tucker"]], "tucker() (ivy.container method)": [[448, "ivy.Container.tucker"]], "hinge_embedding_loss() (ivy.array method)": [[449, "ivy.Array.hinge_embedding_loss"]], "hinge_embedding_loss() (ivy.container method)": [[449, "ivy.Container.hinge_embedding_loss"]], "huber_loss() (ivy.array method)": [[450, "ivy.Array.huber_loss"]], "huber_loss() (ivy.container method)": [[450, "ivy.Container.huber_loss"]], "kl_div() (ivy.array method)": [[451, "ivy.Array.kl_div"]], "kl_div() (ivy.container method)": [[451, "ivy.Container.kl_div"]], "l1_loss() (ivy.array method)": [[452, "ivy.Array.l1_loss"]], "l1_loss() (ivy.container method)": [[452, "ivy.Container.l1_loss"]], "log_poisson_loss() (ivy.array method)": [[453, "ivy.Array.log_poisson_loss"]], "log_poisson_loss() (ivy.container method)": [[453, "ivy.Container.log_poisson_loss"]], "poisson_nll_loss() (ivy.array method)": [[454, "ivy.Array.poisson_nll_loss"]], "poisson_nll_loss() (ivy.container method)": [[454, "ivy.Container.poisson_nll_loss"]], "smooth_l1_loss() (ivy.array method)": [[455, "ivy.Array.smooth_l1_loss"]], "smooth_l1_loss() (ivy.container method)": [[455, "ivy.Container.smooth_l1_loss"]], "soft_margin_loss() (ivy.array method)": [[456, "ivy.Array.soft_margin_loss"]], "soft_margin_loss() (ivy.container method)": [[456, "ivy.Container.soft_margin_loss"]], "as_strided() (ivy.array method)": [[457, "ivy.Array.as_strided"]], "as_strided() (ivy.container method)": [[457, "ivy.Container.as_strided"]], "associative_scan() (ivy.array method)": [[458, "ivy.Array.associative_scan"]], "associative_scan() (ivy.container method)": [[458, "ivy.Container.associative_scan"]], "atleast_1d() (ivy.array method)": [[459, "ivy.Array.atleast_1d"]], "atleast_1d() (ivy.container method)": [[459, "ivy.Container.atleast_1d"]], "atleast_2d() (ivy.array method)": [[460, "ivy.Array.atleast_2d"]], "atleast_2d() (ivy.container method)": [[460, "ivy.Container.atleast_2d"]], "atleast_3d() (ivy.array method)": [[461, "ivy.Array.atleast_3d"]], "atleast_3d() (ivy.container method)": [[461, "ivy.Container.atleast_3d"]], "broadcast_shapes() (ivy.container method)": [[462, "ivy.Container.broadcast_shapes"]], "column_stack() (ivy.array method)": [[465, "ivy.Array.column_stack"]], "column_stack() (ivy.container method)": [[465, "ivy.Container.column_stack"]], "concat_from_sequence() (ivy.array method)": [[466, "ivy.Array.concat_from_sequence"]], "concat_from_sequence() (ivy.container method)": [[466, "ivy.Container.concat_from_sequence"]], "dsplit() (ivy.array method)": [[467, "ivy.Array.dsplit"]], "dsplit() (ivy.container method)": [[467, "ivy.Container.dsplit"]], "dstack() (ivy.array method)": [[468, "ivy.Array.dstack"]], "dstack() (ivy.container method)": [[468, "ivy.Container.dstack"]], "expand() (ivy.array method)": [[469, "ivy.Array.expand"]], "expand() (ivy.container method)": [[469, "ivy.Container.expand"]], "fill_diagonal() (ivy.array method)": [[470, "ivy.Array.fill_diagonal"]], "fill_diagonal() (ivy.container method)": [[470, "ivy.Container.fill_diagonal"]], "flatten() (ivy.array method)": [[471, "ivy.Array.flatten"]], "flatten() (ivy.container method)": [[471, "ivy.Container.flatten"]], "fliplr() (ivy.array method)": [[472, "ivy.Array.fliplr"]], "fliplr() (ivy.container method)": [[472, "ivy.Container.fliplr"]], "flipud() (ivy.array method)": [[473, "ivy.Array.flipud"]], "flipud() (ivy.container method)": [[473, "ivy.Container.flipud"]], "fold() (ivy.array method)": [[474, "ivy.Array.fold"]], "fold() (ivy.container method)": [[474, "ivy.Container.fold"]], "heaviside() (ivy.array method)": [[475, "ivy.Array.heaviside"]], "heaviside() (ivy.container method)": [[475, "ivy.Container.heaviside"]], "hsplit() (ivy.array method)": [[476, "ivy.Array.hsplit"]], "hsplit() (ivy.container method)": [[476, "ivy.Container.hsplit"]], "hstack() (ivy.array method)": [[477, "ivy.Array.hstack"]], "hstack() (ivy.container method)": [[477, "ivy.Container.hstack"]], "i0() (ivy.array method)": [[478, "ivy.Array.i0"]], "i0() (ivy.container method)": [[478, "ivy.Container.i0"]], "matricize() (ivy.array method)": [[479, "ivy.Array.matricize"]], "matricize() (ivy.container method)": [[479, "ivy.Container.matricize"]], "moveaxis() (ivy.array method)": [[480, "ivy.Array.moveaxis"]], "moveaxis() (ivy.container method)": [[480, "ivy.Container.moveaxis"]], "pad() (ivy.array method)": [[481, "ivy.Array.pad"]], "pad() (ivy.container method)": [[481, "ivy.Container.pad"]], "partial_fold() (ivy.array method)": [[482, "ivy.Array.partial_fold"]], "partial_fold() (ivy.container method)": [[482, "ivy.Container.partial_fold"]], "partial_tensor_to_vec() (ivy.array method)": [[483, "ivy.Array.partial_tensor_to_vec"]], "partial_tensor_to_vec() (ivy.container method)": [[483, "ivy.Container.partial_tensor_to_vec"]], "partial_unfold() (ivy.array method)": [[484, "ivy.Array.partial_unfold"]], "partial_unfold() (ivy.container method)": [[484, "ivy.Container.partial_unfold"]], "partial_vec_to_tensor() (ivy.array method)": [[485, "ivy.Array.partial_vec_to_tensor"]], "partial_vec_to_tensor() (ivy.container method)": [[485, "ivy.Container.partial_vec_to_tensor"]], "put_along_axis() (ivy.array method)": [[486, "ivy.Array.put_along_axis"]], "put_along_axis() (ivy.container method)": [[486, "ivy.Container.put_along_axis"]], "rot90() (ivy.array method)": [[487, "ivy.Array.rot90"]], "rot90() (ivy.container method)": [[487, "ivy.Container.rot90"]], "soft_thresholding() (ivy.array method)": [[488, "ivy.Array.soft_thresholding"]], "soft_thresholding() (ivy.container method)": [[488, "ivy.Container.soft_thresholding"]], "take() (ivy.array method)": [[489, "ivy.Array.take"]], "take() (ivy.container method)": [[489, "ivy.Container.take"]], "take_along_axis() (ivy.array method)": [[490, "ivy.Array.take_along_axis"]], "take_along_axis() (ivy.container method)": [[490, "ivy.Container.take_along_axis"]], "top_k() (ivy.array method)": [[491, "ivy.Array.top_k"]], "top_k() (ivy.container method)": [[491, "ivy.Container.top_k"]], "trim_zeros() (ivy.array method)": [[492, "ivy.Array.trim_zeros"]], "trim_zeros() (ivy.container method)": [[492, "ivy.Container.trim_zeros"]], "unflatten() (ivy.array method)": [[493, "ivy.Array.unflatten"]], "unflatten() (ivy.container method)": [[493, "ivy.Container.unflatten"]], "unfold() (ivy.array method)": [[494, "ivy.Array.unfold"]], "unfold() (ivy.container method)": [[494, "ivy.Container.unfold"]], "unique_consecutive() (ivy.array method)": [[495, "ivy.Array.unique_consecutive"]], "unique_consecutive() (ivy.container method)": [[495, "ivy.Container.unique_consecutive"]], "vsplit() (ivy.array method)": [[496, "ivy.Array.vsplit"]], "vsplit() (ivy.container method)": [[496, "ivy.Container.vsplit"]], "vstack() (ivy.array method)": [[497, "ivy.Array.vstack"]], "vstack() (ivy.container method)": [[497, "ivy.Container.vstack"]], "batch_norm() (ivy.array method)": [[498, "ivy.Array.batch_norm"]], "batch_norm() (ivy.container method)": [[498, "ivy.Container.batch_norm"]], "group_norm() (ivy.array method)": [[499, "ivy.Array.group_norm"]], "group_norm() (ivy.container method)": [[499, "ivy.Container.group_norm"]], "instance_norm() (ivy.array method)": [[500, "ivy.Array.instance_norm"]], "instance_norm() (ivy.container method)": [[500, "ivy.Container.instance_norm"]], "l1_normalize() (ivy.array method)": [[501, "ivy.Array.l1_normalize"]], "l1_normalize() (ivy.container method)": [[501, "ivy.Container.l1_normalize"]], "l2_normalize() (ivy.array method)": [[502, "ivy.Array.l2_normalize"]], "l2_normalize() (ivy.container method)": [[502, "ivy.Container.l2_normalize"]], "lp_normalize() (ivy.array method)": [[504, "ivy.Array.lp_normalize"]], "lp_normalize() (ivy.container method)": [[504, "ivy.Container.lp_normalize"]], "bernoulli() (ivy.array method)": [[505, "ivy.Array.bernoulli"]], "bernoulli() (ivy.container method)": [[505, "ivy.Container.bernoulli"]], "beta() (ivy.array method)": [[506, "ivy.Array.beta"]], "beta() (ivy.container method)": [[506, "ivy.Container.beta"]], "dirichlet() (ivy.array method)": [[507, "ivy.Array.dirichlet"]], "dirichlet() (ivy.container method)": [[507, "ivy.Container.dirichlet"]], "gamma() (ivy.array method)": [[508, "ivy.Array.gamma"]], "gamma() (ivy.container method)": [[508, "ivy.Container.gamma"]], "poisson() (ivy.array method)": [[509, "ivy.Array.poisson"]], "poisson() (ivy.container method)": [[509, "ivy.Container.poisson"]], "unravel_index() (ivy.array method)": [[510, "ivy.Array.unravel_index"]], "unravel_index() (ivy.container method)": [[510, "ivy.Container.unravel_index"]], "invert_permutation() (ivy.container method)": [[511, "ivy.Container.invert_permutation"]], "lexsort() (ivy.array method)": [[512, "ivy.Array.lexsort"]], "lexsort() (ivy.container method)": [[512, "ivy.Container.lexsort"]], "bincount() (ivy.array method)": [[517, "ivy.Array.bincount"]], "bincount() (ivy.container method)": [[517, "ivy.Container.bincount"]], "corrcoef() (ivy.array method)": [[518, "ivy.Array.corrcoef"]], "corrcoef() (ivy.container method)": [[518, "ivy.Container.corrcoef"]], "cov() (ivy.array method)": [[519, "ivy.Array.cov"]], "cov() (ivy.container method)": [[519, "ivy.Container.cov"]], "cummax() (ivy.array method)": [[520, "ivy.Array.cummax"]], "cummax() (ivy.container method)": [[520, "ivy.Container.cummax"]], "cummin() (ivy.array method)": [[521, "ivy.Array.cummin"]], "cummin() (ivy.container method)": [[521, "ivy.Container.cummin"]], "histogram() (ivy.array method)": [[522, "ivy.Array.histogram"]], "histogram() (ivy.container method)": [[522, "ivy.Container.histogram"]], "igamma() (ivy.array method)": [[523, "ivy.Array.igamma"]], "igamma() (ivy.container method)": [[523, "ivy.Container.igamma"]], "median() (ivy.array method)": [[524, "ivy.Array.median"]], "median() (ivy.container method)": [[524, "ivy.Container.median"]], "nanmean() (ivy.array method)": [[525, "ivy.Array.nanmean"]], "nanmean() (ivy.container method)": [[525, "ivy.Container.nanmean"]], "nanmedian() (ivy.array method)": [[526, "ivy.Array.nanmedian"]], "nanmedian() (ivy.container method)": [[526, "ivy.Container.nanmedian"]], "nanmin() (ivy.array method)": [[527, "ivy.Array.nanmin"]], "nanmin() (ivy.container method)": [[527, "ivy.Container.nanmin"]], "nanprod() (ivy.array method)": [[528, "ivy.Array.nanprod"]], "nanprod() (ivy.container method)": [[528, "ivy.Container.nanprod"]], "quantile() (ivy.array method)": [[529, "ivy.Array.quantile"]], "quantile() (ivy.container method)": [[529, "ivy.Container.quantile"]], "optional_get_element() (ivy.array method)": [[530, "ivy.Array.optional_get_element"]], "optional_get_element() (ivy.container method)": [[530, "ivy.Container.optional_get_element"]], "all_equal() (in module ivy)": [[531, "ivy.all_equal"], [631, "ivy.all_equal"]], "all_equal() (ivy.array method)": [[531, "ivy.Array.all_equal"]], "all_equal() (ivy.container method)": [[531, "ivy.Container.all_equal"]], "arg_info() (in module ivy)": [[532, "ivy.arg_info"], [631, "ivy.arg_info"]], "arg_names() (in module ivy)": [[533, "ivy.arg_names"], [631, "ivy.arg_names"]], "array_equal() (in module ivy)": [[534, "ivy.array_equal"], [631, "ivy.array_equal"]], "array_equal() (ivy.array method)": [[534, "ivy.Array.array_equal"]], "array_equal() (ivy.container method)": [[534, "ivy.Container.array_equal"]], "assert_supports_inplace() (in module ivy)": [[535, "ivy.assert_supports_inplace"], [631, "ivy.assert_supports_inplace"]], "assert_supports_inplace() (ivy.array method)": [[535, "ivy.Array.assert_supports_inplace"]], "assert_supports_inplace() (ivy.container method)": [[535, "ivy.Container.assert_supports_inplace"]], "cache_fn() (in module ivy)": [[536, "ivy.cache_fn"], [631, "ivy.cache_fn"]], "clip_matrix_norm() (in module ivy)": [[537, "ivy.clip_matrix_norm"], [631, "ivy.clip_matrix_norm"]], "clip_matrix_norm() (ivy.array method)": [[537, "ivy.Array.clip_matrix_norm"]], "clip_matrix_norm() (ivy.container method)": [[537, "ivy.Container.clip_matrix_norm"]], "clip_vector_norm() (in module ivy)": [[538, "ivy.clip_vector_norm"], [631, "ivy.clip_vector_norm"]], "clip_vector_norm() (ivy.array method)": [[538, "ivy.Array.clip_vector_norm"]], "clip_vector_norm() (ivy.container method)": [[538, "ivy.Container.clip_vector_norm"]], "container_types() (in module ivy)": [[539, "ivy.container_types"], [631, "ivy.container_types"]], "current_backend_str() (in module ivy)": [[540, "ivy.current_backend_str"], [631, "ivy.current_backend_str"]], "default() (in module ivy)": [[541, "ivy.default"], [631, "ivy.default"]], "default() (ivy.array method)": [[541, "ivy.Array.default"]], "einops_rearrange() (in module ivy)": [[542, "ivy.einops_rearrange"], [631, "ivy.einops_rearrange"]], "einops_rearrange() (ivy.array method)": [[542, "ivy.Array.einops_rearrange"]], "einops_rearrange() (ivy.container method)": [[542, "ivy.Container.einops_rearrange"]], "einops_reduce() (in module ivy)": [[543, "ivy.einops_reduce"], [631, "ivy.einops_reduce"]], "einops_reduce() (ivy.array method)": [[543, "ivy.Array.einops_reduce"]], "einops_reduce() (ivy.container method)": [[543, "ivy.Container.einops_reduce"]], "einops_repeat() (in module ivy)": [[544, "ivy.einops_repeat"], [631, "ivy.einops_repeat"]], "einops_repeat() (ivy.array method)": [[544, "ivy.Array.einops_repeat"]], "einops_repeat() (ivy.container method)": [[544, "ivy.Container.einops_repeat"]], "exists() (in module ivy)": [[545, "ivy.exists"], [631, "ivy.exists"]], "exists() (ivy.array method)": [[545, "ivy.Array.exists"]], "exists() (ivy.container method)": [[545, "ivy.Container.exists"]], "fourier_encode() (in module ivy)": [[546, "ivy.fourier_encode"], [631, "ivy.fourier_encode"]], "fourier_encode() (ivy.array method)": [[546, "ivy.Array.fourier_encode"]], "fourier_encode() (ivy.container method)": [[546, "ivy.Container.fourier_encode"]], "function_supported_devices_and_dtypes() (in module ivy)": [[547, "ivy.function_supported_devices_and_dtypes"], [631, "ivy.function_supported_devices_and_dtypes"]], "function_unsupported_devices_and_dtypes() (in module ivy)": [[548, "ivy.function_unsupported_devices_and_dtypes"], [631, "ivy.function_unsupported_devices_and_dtypes"]], "gather() (in module ivy)": [[549, "ivy.gather"], [631, "ivy.gather"]], "gather() (ivy.array method)": [[549, "ivy.Array.gather"]], "gather() (ivy.container method)": [[549, "ivy.Container.gather"]], "gather_nd() (in module ivy)": [[550, "ivy.gather_nd"], [631, "ivy.gather_nd"]], "gather_nd() (ivy.array method)": [[550, "ivy.Array.gather_nd"]], "gather_nd() (ivy.container method)": [[550, "ivy.Container.gather_nd"]], "get_all_arrays_in_memory() (in module ivy)": [[551, "ivy.get_all_arrays_in_memory"], [631, "ivy.get_all_arrays_in_memory"]], "get_item() (in module ivy)": [[552, "ivy.get_item"], [631, "ivy.get_item"]], "get_num_dims() (in module ivy)": [[553, "ivy.get_num_dims"], [631, "ivy.get_num_dims"]], "get_num_dims() (ivy.array method)": [[553, "ivy.Array.get_num_dims"]], "get_num_dims() (ivy.container method)": [[553, "ivy.Container.get_num_dims"]], "get_referrers_recursive() (in module ivy)": [[554, "ivy.get_referrers_recursive"], [631, "ivy.get_referrers_recursive"]], "has_nans() (in module ivy)": [[555, "ivy.has_nans"], [631, "ivy.has_nans"]], "has_nans() (ivy.array method)": [[555, "ivy.Array.has_nans"]], "has_nans() (ivy.container method)": [[555, "ivy.Container.has_nans"]], "inplace_arrays_supported() (in module ivy)": [[556, "ivy.inplace_arrays_supported"], [631, "ivy.inplace_arrays_supported"]], "inplace_decrement() (in module ivy)": [[557, "ivy.inplace_decrement"], [631, "ivy.inplace_decrement"]], "inplace_decrement() (ivy.array method)": [[557, "ivy.Array.inplace_decrement"]], "inplace_decrement() (ivy.container method)": [[557, "ivy.Container.inplace_decrement"]], "inplace_increment() (in module ivy)": [[558, "ivy.inplace_increment"], [631, "ivy.inplace_increment"]], "inplace_increment() (ivy.array method)": [[558, "ivy.Array.inplace_increment"]], "inplace_increment() (ivy.container method)": [[558, "ivy.Container.inplace_increment"]], "inplace_update() (in module ivy)": [[559, "ivy.inplace_update"], [631, "ivy.inplace_update"]], "inplace_update() (ivy.array method)": [[559, "ivy.Array.inplace_update"]], "inplace_update() (ivy.container method)": [[559, "ivy.Container.inplace_update"]], "inplace_variables_supported() (in module ivy)": [[560, "ivy.inplace_variables_supported"], [631, "ivy.inplace_variables_supported"]], "is_array() (in module ivy)": [[561, "ivy.is_array"], [631, "ivy.is_array"]], "is_array() (ivy.array method)": [[561, "ivy.Array.is_array"]], "is_array() (ivy.container method)": [[561, "ivy.Container.is_array"]], "is_ivy_array() (in module ivy)": [[562, "ivy.is_ivy_array"], [631, "ivy.is_ivy_array"]], "is_ivy_array() (ivy.array method)": [[562, "ivy.Array.is_ivy_array"]], "is_ivy_array() (ivy.container method)": [[562, "ivy.Container.is_ivy_array"]], "is_ivy_container() (in module ivy)": [[563, "ivy.is_ivy_container"], [631, "ivy.is_ivy_container"]], "is_ivy_container() (ivy.array method)": [[563, "ivy.Array.is_ivy_container"]], "is_ivy_nested_array() (in module ivy)": [[564, "ivy.is_ivy_nested_array"], [631, "ivy.is_ivy_nested_array"]], "is_native_array() (in module ivy)": [[565, "ivy.is_native_array"], [631, "ivy.is_native_array"]], "is_native_array() (ivy.array method)": [[565, "ivy.Array.is_native_array"]], "is_native_array() (ivy.container method)": [[565, "ivy.Container.is_native_array"]], "isin() (in module ivy)": [[566, "ivy.isin"], [631, "ivy.isin"]], "isin() (ivy.array method)": [[566, "ivy.Array.isin"]], "isin() (ivy.container method)": [[566, "ivy.Container.isin"]], "isscalar() (in module ivy)": [[567, "ivy.isscalar"], [631, "ivy.isscalar"]], "itemsize() (in module ivy)": [[568, "ivy.itemsize"], [631, "ivy.itemsize"]], "itemsize() (ivy.array method)": [[568, "ivy.Array.itemsize"]], "itemsize() (ivy.container method)": [[568, "ivy.Container.itemsize"]], "match_kwargs() (in module ivy)": [[569, "ivy.match_kwargs"], [631, "ivy.match_kwargs"]], "multiprocessing() (in module ivy)": [[570, "ivy.multiprocessing"], [631, "ivy.multiprocessing"]], "num_arrays_in_memory() (in module ivy)": [[571, "ivy.num_arrays_in_memory"], [631, "ivy.num_arrays_in_memory"]], "print_all_arrays_in_memory() (in module ivy)": [[572, "ivy.print_all_arrays_in_memory"], [631, "ivy.print_all_arrays_in_memory"]], "scatter_flat() (in module ivy)": [[573, "ivy.scatter_flat"], [631, "ivy.scatter_flat"]], "scatter_flat() (ivy.array method)": [[573, "ivy.Array.scatter_flat"]], "scatter_flat() (ivy.container method)": [[573, "ivy.Container.scatter_flat"]], "scatter_nd() (in module ivy)": [[574, "ivy.scatter_nd"], [631, "ivy.scatter_nd"]], "scatter_nd() (ivy.array method)": [[574, "ivy.Array.scatter_nd"]], "scatter_nd() (ivy.container method)": [[574, "ivy.Container.scatter_nd"]], "set_array_mode() (in module ivy)": [[575, "ivy.set_array_mode"], [631, "ivy.set_array_mode"]], "set_exception_trace_mode() (in module ivy)": [[576, "ivy.set_exception_trace_mode"], [631, "ivy.set_exception_trace_mode"]], "set_inplace_mode() (in module ivy)": [[577, "ivy.set_inplace_mode"], [631, "ivy.set_inplace_mode"]], "set_item() (in module ivy)": [[578, "ivy.set_item"], [631, "ivy.set_item"]], "set_min_base() (in module ivy)": [[579, "ivy.set_min_base"], [631, "ivy.set_min_base"]], "set_min_denominator() (in module ivy)": [[580, "ivy.set_min_denominator"], [631, "ivy.set_min_denominator"]], "set_nestable_mode() (in module ivy)": [[581, "ivy.set_nestable_mode"], [631, "ivy.set_nestable_mode"]], "set_precise_mode() (in module ivy)": [[582, "ivy.set_precise_mode"], [631, "ivy.set_precise_mode"]], "set_queue_timeout() (in module ivy)": [[583, "ivy.set_queue_timeout"], [631, "ivy.set_queue_timeout"]], "set_shape_array_mode() (in module ivy)": [[584, "ivy.set_shape_array_mode"], [631, "ivy.set_shape_array_mode"]], "set_show_func_wrapper_trace_mode() (in module ivy)": [[585, "ivy.set_show_func_wrapper_trace_mode"], [631, "ivy.set_show_func_wrapper_trace_mode"]], "set_tmp_dir() (in module ivy)": [[586, "ivy.set_tmp_dir"], [631, "ivy.set_tmp_dir"]], "shape() (in module ivy)": [[587, "ivy.shape"], [631, "ivy.shape"]], "shape() (ivy.array method)": [[587, "ivy.Array.shape"]], "size() (in module ivy)": [[588, "ivy.size"], [631, "ivy.size"]], "size() (ivy.array method)": [[588, "ivy.Array.size"]], "size() (ivy.container method)": [[588, "ivy.Container.size"]], "stable_divide() (in module ivy)": [[589, "ivy.stable_divide"], [631, "ivy.stable_divide"]], "stable_divide() (ivy.array method)": [[589, "ivy.Array.stable_divide"]], "stable_divide() (ivy.container method)": [[589, "ivy.Container.stable_divide"]], "stable_pow() (in module ivy)": [[590, "ivy.stable_pow"], [631, "ivy.stable_pow"]], "stable_pow() (ivy.array method)": [[590, "ivy.Array.stable_pow"]], "stable_pow() (ivy.container method)": [[590, "ivy.Container.stable_pow"]], "strides() (in module ivy)": [[591, "ivy.strides"], [631, "ivy.strides"]], "strides() (ivy.array method)": [[591, "ivy.Array.strides"]], "strides() (ivy.container method)": [[591, "ivy.Container.strides"]], "supports_inplace_updates() (in module ivy)": [[592, "ivy.supports_inplace_updates"], [631, "ivy.supports_inplace_updates"]], "supports_inplace_updates() (ivy.array method)": [[592, "ivy.Array.supports_inplace_updates"]], "supports_inplace_updates() (ivy.container method)": [[592, "ivy.Container.supports_inplace_updates"]], "to_ivy_shape() (in module ivy)": [[593, "ivy.to_ivy_shape"], [631, "ivy.to_ivy_shape"]], "to_list() (in module ivy)": [[594, "ivy.to_list"], [631, "ivy.to_list"]], "to_list() (ivy.array method)": [[594, "ivy.Array.to_list"]], "to_list() (ivy.container method)": [[594, "ivy.Container.to_list"]], "to_native_shape() (in module ivy)": [[595, "ivy.to_native_shape"], [631, "ivy.to_native_shape"]], "to_numpy() (in module ivy)": [[596, "ivy.to_numpy"], [631, "ivy.to_numpy"]], "to_numpy() (ivy.array method)": [[596, "ivy.Array.to_numpy"]], "to_numpy() (ivy.container method)": [[596, "ivy.Container.to_numpy"]], "to_scalar() (in module ivy)": [[597, "ivy.to_scalar"], [631, "ivy.to_scalar"]], "to_scalar() (ivy.array method)": [[597, "ivy.Array.to_scalar"]], "to_scalar() (ivy.container method)": [[597, "ivy.Container.to_scalar"]], "try_else_none() (in module ivy)": [[598, "ivy.try_else_none"], [631, "ivy.try_else_none"]], "unset_array_mode() (in module ivy)": [[599, "ivy.unset_array_mode"], [631, "ivy.unset_array_mode"]], "unset_exception_trace_mode() (in module ivy)": [[600, "ivy.unset_exception_trace_mode"], [631, "ivy.unset_exception_trace_mode"]], "unset_inplace_mode() (in module ivy)": [[601, "ivy.unset_inplace_mode"], [631, "ivy.unset_inplace_mode"]], "unset_min_base() (in module ivy)": [[602, "ivy.unset_min_base"], [631, "ivy.unset_min_base"]], "unset_min_denominator() (in module ivy)": [[603, "ivy.unset_min_denominator"], [631, "ivy.unset_min_denominator"]], "unset_nestable_mode() (in module ivy)": [[604, "ivy.unset_nestable_mode"], [631, "ivy.unset_nestable_mode"]], "unset_precise_mode() (in module ivy)": [[605, "ivy.unset_precise_mode"], [631, "ivy.unset_precise_mode"]], "unset_queue_timeout() (in module ivy)": [[606, "ivy.unset_queue_timeout"], [631, "ivy.unset_queue_timeout"]], "unset_shape_array_mode() (in module ivy)": [[607, "ivy.unset_shape_array_mode"], [631, "ivy.unset_shape_array_mode"]], "unset_show_func_wrapper_trace_mode() (in module ivy)": [[608, "ivy.unset_show_func_wrapper_trace_mode"], [631, "ivy.unset_show_func_wrapper_trace_mode"]], "unset_tmp_dir() (in module ivy)": [[609, "ivy.unset_tmp_dir"], [631, "ivy.unset_tmp_dir"]], "value_is_nan() (in module ivy)": [[610, "ivy.value_is_nan"], [631, "ivy.value_is_nan"]], "value_is_nan() (ivy.array method)": [[610, "ivy.Array.value_is_nan"]], "value_is_nan() (ivy.container method)": [[610, "ivy.Container.value_is_nan"]], "vmap() (in module ivy)": [[611, "ivy.vmap"], [631, "ivy.vmap"]], "adam_step() (in module ivy)": [[612, "ivy.adam_step"], [632, "ivy.adam_step"]], "adam_step() (ivy.array method)": [[612, "ivy.Array.adam_step"]], "adam_step() (ivy.container method)": [[612, "ivy.Container.adam_step"]], "adam_update() (in module ivy)": [[613, "ivy.adam_update"], [632, "ivy.adam_update"]], "adam_update() (ivy.array method)": [[613, "ivy.Array.adam_update"]], "adam_update() (ivy.container method)": [[613, "ivy.Container.adam_update"]], "execute_with_gradients() (in module ivy)": [[614, "ivy.execute_with_gradients"], [632, "ivy.execute_with_gradients"]], "grad() (in module ivy)": [[615, "ivy.grad"], [632, "ivy.grad"]], "gradient_descent_update() (in module ivy)": [[616, "ivy.gradient_descent_update"], [632, "ivy.gradient_descent_update"]], "gradient_descent_update() (ivy.array method)": [[616, "ivy.Array.gradient_descent_update"]], "gradient_descent_update() (ivy.container method)": [[616, "ivy.Container.gradient_descent_update"]], "jac() (in module ivy)": [[617, "ivy.jac"], [632, "ivy.jac"]], "lamb_update() (in module ivy)": [[618, "ivy.lamb_update"], [632, "ivy.lamb_update"]], "lamb_update() (ivy.array method)": [[618, "ivy.Array.lamb_update"]], "lamb_update() (ivy.container method)": [[618, "ivy.Container.lamb_update"]], "lars_update() (in module ivy)": [[619, "ivy.lars_update"], [632, "ivy.lars_update"]], "lars_update() (ivy.array method)": [[619, "ivy.Array.lars_update"]], "lars_update() (ivy.container method)": [[619, "ivy.Container.lars_update"]], "optimizer_update() (in module ivy)": [[620, "ivy.optimizer_update"], [632, "ivy.optimizer_update"]], "optimizer_update() (ivy.array method)": [[620, "ivy.Array.optimizer_update"]], "optimizer_update() (ivy.container method)": [[620, "ivy.Container.optimizer_update"]], "stop_gradient() (in module ivy)": [[621, "ivy.stop_gradient"], [632, "ivy.stop_gradient"]], "stop_gradient() (ivy.array method)": [[621, "ivy.Array.stop_gradient"]], "stop_gradient() (ivy.container method)": [[621, "ivy.Container.stop_gradient"]], "value_and_grad() (in module ivy)": [[622, "ivy.value_and_grad"], [632, "ivy.value_and_grad"]], "ivy.functional.ivy.activations": [[623, "module-ivy.functional.ivy.activations"]], "e (in module ivy)": [[624, "ivy.e"]], "inf (in module ivy)": [[624, "ivy.inf"]], "ivy.functional.ivy.constants": [[624, "module-ivy.functional.ivy.constants"]], "nan (in module ivy)": [[624, "ivy.nan"]], "newaxis (in module ivy)": [[624, "ivy.newaxis"]], "pi (in module ivy)": [[624, "ivy.pi"]], "ivy.functional.ivy.control_flow_ops": [[625, "module-ivy.functional.ivy.control_flow_ops"]], "nestedsequence (class in ivy)": [[626, "ivy.NestedSequence"]], "ivy.functional.ivy.creation": [[626, "module-ivy.functional.ivy.creation"]], "defaultcomplexdtype (class in ivy)": [[627, "ivy.DefaultComplexDtype"]], "defaultdtype (class in ivy)": [[627, "ivy.DefaultDtype"]], "defaultfloatdtype (class in ivy)": [[627, "ivy.DefaultFloatDtype"]], "defaultintdtype (class in ivy)": [[627, "ivy.DefaultIntDtype"]], "defaultuintdtype (class in ivy)": [[627, "ivy.DefaultUintDtype"]], "ivy.functional.ivy.data_type": [[627, "module-ivy.functional.ivy.data_type"]], "defaultdevice (class in ivy)": [[628, "ivy.DefaultDevice"]], "profiler (class in ivy)": [[628, "ivy.Profiler"]], "ivy.functional.ivy.device": [[628, "module-ivy.functional.ivy.device"]], "ivy.functional.ivy.elementwise": [[629, "module-ivy.functional.ivy.elementwise"]], "ivy.functional.ivy.experimental": [[630, "module-ivy.functional.ivy.experimental"]], "arraymode (class in ivy)": [[631, "ivy.ArrayMode"]], "precisemode (class in ivy)": [[631, "ivy.PreciseMode"]], "ivy.functional.ivy.general": [[631, "module-ivy.functional.ivy.general"]], "ivy.functional.ivy.gradients": [[632, "module-ivy.functional.ivy.gradients"]], "conv() (in module ivy)": [[633, "ivy.conv"], [646, "ivy.conv"]], "conv1d() (in module ivy)": [[633, "ivy.conv1d"], [647, "ivy.conv1d"]], "conv1d_transpose() (in module ivy)": [[633, "ivy.conv1d_transpose"], [648, "ivy.conv1d_transpose"]], "conv2d() (in module ivy)": [[633, "ivy.conv2d"], [649, "ivy.conv2d"]], "conv2d_transpose() (in module ivy)": [[633, "ivy.conv2d_transpose"], [650, "ivy.conv2d_transpose"]], "conv3d() (in module ivy)": [[633, "ivy.conv3d"], [651, "ivy.conv3d"]], "conv3d_transpose() (in module ivy)": [[633, "ivy.conv3d_transpose"], [652, "ivy.conv3d_transpose"]], "conv_general_dilated() (in module ivy)": [[633, "ivy.conv_general_dilated"], [653, "ivy.conv_general_dilated"]], "conv_general_transpose() (in module ivy)": [[633, "ivy.conv_general_transpose"], [654, "ivy.conv_general_transpose"]], "depthwise_conv2d() (in module ivy)": [[633, "ivy.depthwise_conv2d"], [655, "ivy.depthwise_conv2d"]], "dropout() (in module ivy)": [[633, "ivy.dropout"], [656, "ivy.dropout"]], "ivy.functional.ivy.layers": [[633, "module-ivy.functional.ivy.layers"]], "linear() (in module ivy)": [[633, "ivy.linear"], [657, "ivy.linear"]], "lstm() (in module ivy)": [[633, "ivy.lstm"], [658, "ivy.lstm"]], "lstm_update() (in module ivy)": [[633, "ivy.lstm_update"], [659, "ivy.lstm_update"]], "multi_head_attention() (in module ivy)": [[633, "ivy.multi_head_attention"], [660, "ivy.multi_head_attention"]], "nms() (in module ivy)": [[633, "ivy.nms"], [661, "ivy.nms"]], "roi_align() (in module ivy)": [[633, "ivy.roi_align"], [662, "ivy.roi_align"]], "scaled_dot_product_attention() (in module ivy)": [[633, "ivy.scaled_dot_product_attention"], [663, "ivy.scaled_dot_product_attention"]], "cholesky() (in module ivy)": [[634, "ivy.cholesky"], [664, "ivy.cholesky"]], "cross() (in module ivy)": [[634, "ivy.cross"], [665, "ivy.cross"]], "det() (in module ivy)": [[634, "ivy.det"], [666, "ivy.det"]], "diag() (in module ivy)": [[634, "ivy.diag"], [667, "ivy.diag"]], "diagonal() (in module ivy)": [[634, "ivy.diagonal"], [668, "ivy.diagonal"]], "eigh() (in module ivy)": [[634, "ivy.eigh"], [670, "ivy.eigh"]], "eigvalsh() (in module ivy)": [[634, "ivy.eigvalsh"], [671, "ivy.eigvalsh"]], "inner() (in module ivy)": [[634, "ivy.inner"], [672, "ivy.inner"]], "inv() (in module ivy)": [[634, "ivy.inv"], [673, "ivy.inv"]], "ivy.functional.ivy.linear_algebra": [[634, "module-ivy.functional.ivy.linear_algebra"]], "matmul() (in module ivy)": [[634, "ivy.matmul"], [674, "ivy.matmul"]], "matrix_norm() (in module ivy)": [[634, "ivy.matrix_norm"], [675, "ivy.matrix_norm"]], "matrix_power() (in module ivy)": [[634, "ivy.matrix_power"], [676, "ivy.matrix_power"]], "matrix_rank() (in module ivy)": [[634, "ivy.matrix_rank"], [677, "ivy.matrix_rank"]], "matrix_transpose() (in module ivy)": [[634, "ivy.matrix_transpose"], [678, "ivy.matrix_transpose"]], "outer() (in module ivy)": [[634, "ivy.outer"], [679, "ivy.outer"]], "pinv() (in module ivy)": [[634, "ivy.pinv"], [680, "ivy.pinv"]], "qr() (in module ivy)": [[634, "ivy.qr"], [681, "ivy.qr"]], "slogdet() (in module ivy)": [[634, "ivy.slogdet"], [682, "ivy.slogdet"]], "solve() (in module ivy)": [[634, "ivy.solve"], [683, "ivy.solve"]], "svd() (in module ivy)": [[634, "ivy.svd"], [684, "ivy.svd"]], "svdvals() (in module ivy)": [[634, "ivy.svdvals"], [685, "ivy.svdvals"]], "tensordot() (in module ivy)": [[634, "ivy.tensordot"], [686, "ivy.tensordot"]], "tensorsolve() (in module ivy)": [[634, "ivy.tensorsolve"], [687, "ivy.tensorsolve"]], "trace() (in module ivy)": [[634, "ivy.trace"], [688, "ivy.trace"]], "vander() (in module ivy)": [[634, "ivy.vander"], [689, "ivy.vander"]], "vecdot() (in module ivy)": [[634, "ivy.vecdot"], [690, "ivy.vecdot"]], "vector_norm() (in module ivy)": [[634, "ivy.vector_norm"], [691, "ivy.vector_norm"]], "vector_to_skew_symmetric_matrix() (in module ivy)": [[634, "ivy.vector_to_skew_symmetric_matrix"], [692, "ivy.vector_to_skew_symmetric_matrix"]], "binary_cross_entropy() (in module ivy)": [[635, "ivy.binary_cross_entropy"], [693, "ivy.binary_cross_entropy"]], "cross_entropy() (in module ivy)": [[635, "ivy.cross_entropy"], [694, "ivy.cross_entropy"]], "ivy.functional.ivy.losses": [[635, "module-ivy.functional.ivy.losses"]], "sparse_cross_entropy() (in module ivy)": [[635, "ivy.sparse_cross_entropy"], [695, "ivy.sparse_cross_entropy"]], "clip() (in module ivy)": [[636, "ivy.clip"], [696, "ivy.clip"]], "concat() (in module ivy)": [[636, "ivy.concat"], [697, "ivy.concat"]], "constant_pad() (in module ivy)": [[636, "ivy.constant_pad"], [698, "ivy.constant_pad"]], "expand_dims() (in module ivy)": [[636, "ivy.expand_dims"], [699, "ivy.expand_dims"]], "flip() (in module ivy)": [[636, "ivy.flip"], [700, "ivy.flip"]], "ivy.functional.ivy.manipulation": [[636, "module-ivy.functional.ivy.manipulation"]], "permute_dims() (in module ivy)": [[636, "ivy.permute_dims"], [701, "ivy.permute_dims"]], "repeat() (in module ivy)": [[636, "ivy.repeat"], [702, "ivy.repeat"]], "reshape() (in module ivy)": [[636, "ivy.reshape"], [703, "ivy.reshape"]], "roll() (in module ivy)": [[636, "ivy.roll"], [704, "ivy.roll"]], "split() (in module ivy)": [[636, "ivy.split"], [705, "ivy.split"]], "squeeze() (in module ivy)": [[636, "ivy.squeeze"], [706, "ivy.squeeze"]], "stack() (in module ivy)": [[636, "ivy.stack"], [707, "ivy.stack"]], "swapaxes() (in module ivy)": [[636, "ivy.swapaxes"], [708, "ivy.swapaxes"]], "tile() (in module ivy)": [[636, "ivy.tile"], [709, "ivy.tile"]], "unstack() (in module ivy)": [[636, "ivy.unstack"], [710, "ivy.unstack"]], "zero_pad() (in module ivy)": [[636, "ivy.zero_pad"], [711, "ivy.zero_pad"]], "fomaml_step() (in module ivy)": [[637, "ivy.fomaml_step"], [712, "ivy.fomaml_step"]], "ivy.functional.ivy.meta": [[637, "module-ivy.functional.ivy.meta"]], "maml_step() (in module ivy)": [[637, "ivy.maml_step"], [713, "ivy.maml_step"]], "reptile_step() (in module ivy)": [[637, "ivy.reptile_step"], [714, "ivy.reptile_step"]], "all_nested_indices() (in module ivy)": [[638, "ivy.all_nested_indices"], [715, "ivy.all_nested_indices"]], "copy_nest() (in module ivy)": [[638, "ivy.copy_nest"], [716, "ivy.copy_nest"]], "duplicate_array_index_chains() (in module ivy)": [[638, "ivy.duplicate_array_index_chains"], [717, "ivy.duplicate_array_index_chains"]], "index_nest() (in module ivy)": [[638, "ivy.index_nest"], [718, "ivy.index_nest"]], "insert_into_nest_at_index() (in module ivy)": [[638, "ivy.insert_into_nest_at_index"], [719, "ivy.insert_into_nest_at_index"]], "insert_into_nest_at_indices() (in module ivy)": [[638, "ivy.insert_into_nest_at_indices"], [720, "ivy.insert_into_nest_at_indices"]], "ivy.functional.ivy.nest": [[638, "module-ivy.functional.ivy.nest"]], "map() (in module ivy)": [[638, "ivy.map"], [721, "ivy.map"]], "map_nest_at_index() (in module ivy)": [[638, "ivy.map_nest_at_index"], [722, "ivy.map_nest_at_index"]], "map_nest_at_indices() (in module ivy)": [[638, "ivy.map_nest_at_indices"], [723, "ivy.map_nest_at_indices"]], "multi_index_nest() (in module ivy)": [[638, "ivy.multi_index_nest"], [724, "ivy.multi_index_nest"]], "nested_any() (in module ivy)": [[638, "ivy.nested_any"], [725, "ivy.nested_any"]], "nested_argwhere() (in module ivy)": [[638, "ivy.nested_argwhere"], [726, "ivy.nested_argwhere"]], "nested_map() (in module ivy)": [[638, "ivy.nested_map"], [727, "ivy.nested_map"]], "nested_multi_map() (in module ivy)": [[638, "ivy.nested_multi_map"], [728, "ivy.nested_multi_map"]], "prune_empty() (in module ivy)": [[638, "ivy.prune_empty"], [729, "ivy.prune_empty"]], "prune_nest_at_index() (in module ivy)": [[638, "ivy.prune_nest_at_index"], [730, "ivy.prune_nest_at_index"]], "prune_nest_at_indices() (in module ivy)": [[638, "ivy.prune_nest_at_indices"], [731, "ivy.prune_nest_at_indices"]], "set_nest_at_index() (in module ivy)": [[638, "ivy.set_nest_at_index"], [732, "ivy.set_nest_at_index"]], "set_nest_at_indices() (in module ivy)": [[638, "ivy.set_nest_at_indices"], [733, "ivy.set_nest_at_indices"]], "ivy.functional.ivy.norms": [[639, "module-ivy.functional.ivy.norms"]], "layer_norm() (in module ivy)": [[639, "ivy.layer_norm"], [734, "ivy.layer_norm"]], "ivy.functional.ivy.random": [[640, "module-ivy.functional.ivy.random"]], "multinomial() (in module ivy)": [[640, "ivy.multinomial"], [735, "ivy.multinomial"]], "randint() (in module ivy)": [[640, "ivy.randint"], [736, "ivy.randint"]], "random_normal() (in module ivy)": [[640, "ivy.random_normal"], [737, "ivy.random_normal"]], "random_uniform() (in module ivy)": [[640, "ivy.random_uniform"], [738, "ivy.random_uniform"]], "seed() (in module ivy)": [[640, "ivy.seed"], [739, "ivy.seed"]], "shuffle() (in module ivy)": [[640, "ivy.shuffle"], [740, "ivy.shuffle"]], "argmax() (in module ivy)": [[641, "ivy.argmax"], [741, "ivy.argmax"]], "argmin() (in module ivy)": [[641, "ivy.argmin"], [742, "ivy.argmin"]], "argwhere() (in module ivy)": [[641, "ivy.argwhere"], [743, "ivy.argwhere"]], "ivy.functional.ivy.searching": [[641, "module-ivy.functional.ivy.searching"]], "nonzero() (in module ivy)": [[641, "ivy.nonzero"], [744, "ivy.nonzero"]], "where() (in module ivy)": [[641, "ivy.where"], [745, "ivy.where"]], "ivy.functional.ivy.set": [[642, "module-ivy.functional.ivy.set"]], "unique_all() (in module ivy)": [[642, "ivy.unique_all"], [746, "ivy.unique_all"]], "unique_counts() (in module ivy)": [[642, "ivy.unique_counts"], [747, "ivy.unique_counts"]], "unique_inverse() (in module ivy)": [[642, "ivy.unique_inverse"], [748, "ivy.unique_inverse"]], "unique_values() (in module ivy)": [[642, "ivy.unique_values"], [749, "ivy.unique_values"]], "argsort() (in module ivy)": [[643, "ivy.argsort"], [750, "ivy.argsort"]], "ivy.functional.ivy.sorting": [[643, "module-ivy.functional.ivy.sorting"]], "msort() (in module ivy)": [[643, "ivy.msort"], [751, "ivy.msort"]], "searchsorted() (in module ivy)": [[643, "ivy.searchsorted"], [752, "ivy.searchsorted"]], "sort() (in module ivy)": [[643, "ivy.sort"], [753, "ivy.sort"]], "cumprod() (in module ivy)": [[644, "ivy.cumprod"], [754, "ivy.cumprod"]], "cumsum() (in module ivy)": [[644, "ivy.cumsum"], [755, "ivy.cumsum"]], "einsum() (in module ivy)": [[644, "ivy.einsum"], [756, "ivy.einsum"]], "ivy.functional.ivy.statistical": [[644, "module-ivy.functional.ivy.statistical"]], "max() (in module ivy)": [[644, "ivy.max"], [757, "ivy.max"]], "mean() (in module ivy)": [[644, "ivy.mean"], [758, "ivy.mean"]], "min() (in module ivy)": [[644, "ivy.min"], [759, "ivy.min"]], "prod() (in module ivy)": [[644, "ivy.prod"], [760, "ivy.prod"]], "std() (in module ivy)": [[644, "ivy.std"], [761, "ivy.std"]], "sum() (in module ivy)": [[644, "ivy.sum"], [762, "ivy.sum"]], "var() (in module ivy)": [[644, "ivy.var"], [763, "ivy.var"]], "all() (in module ivy)": [[645, "ivy.all"], [764, "ivy.all"]], "any() (in module ivy)": [[645, "ivy.any"], [765, "ivy.any"]], "ivy.functional.ivy.utility": [[645, "module-ivy.functional.ivy.utility"]], "load() (in module ivy)": [[645, "ivy.load"], [766, "ivy.load"]], "save() (in module ivy)": [[645, "ivy.save"], [767, "ivy.save"]], "conv1d() (ivy.array method)": [[647, "ivy.Array.conv1d"]], "conv1d() (ivy.container method)": [[647, "ivy.Container.conv1d"]], "conv1d_transpose() (ivy.array method)": [[648, "ivy.Array.conv1d_transpose"]], "conv1d_transpose() (ivy.container method)": [[648, "ivy.Container.conv1d_transpose"]], "conv2d() (ivy.array method)": [[649, "ivy.Array.conv2d"]], "conv2d() (ivy.container method)": [[649, "ivy.Container.conv2d"]], "conv2d_transpose() (ivy.array method)": [[650, "ivy.Array.conv2d_transpose"]], "conv2d_transpose() (ivy.container method)": [[650, "ivy.Container.conv2d_transpose"]], "conv3d() (ivy.array method)": [[651, "ivy.Array.conv3d"]], "conv3d() (ivy.container method)": [[651, "ivy.Container.conv3d"]], "conv3d_transpose() (ivy.array method)": [[652, "ivy.Array.conv3d_transpose"]], "conv3d_transpose() (ivy.container method)": [[652, "ivy.Container.conv3d_transpose"]], "depthwise_conv2d() (ivy.array method)": [[655, "ivy.Array.depthwise_conv2d"]], "depthwise_conv2d() (ivy.container method)": [[655, "ivy.Container.depthwise_conv2d"]], "dropout() (ivy.array method)": [[656, "ivy.Array.dropout"]], "dropout() (ivy.container method)": [[656, "ivy.Container.dropout"]], "linear() (ivy.array method)": [[657, "ivy.Array.linear"]], "linear() (ivy.container method)": [[657, "ivy.Container.linear"]], "lstm_update() (ivy.array method)": [[659, "ivy.Array.lstm_update"]], "lstm_update() (ivy.container method)": [[659, "ivy.Container.lstm_update"]], "multi_head_attention() (ivy.array method)": [[660, "ivy.Array.multi_head_attention"]], "multi_head_attention() (ivy.container method)": [[660, "ivy.Container.multi_head_attention"]], "scaled_dot_product_attention() (ivy.array method)": [[663, "ivy.Array.scaled_dot_product_attention"]], "scaled_dot_product_attention() (ivy.container method)": [[663, "ivy.Container.scaled_dot_product_attention"]], "cholesky() (ivy.array method)": [[664, "ivy.Array.cholesky"]], "cholesky() (ivy.container method)": [[664, "ivy.Container.cholesky"]], "cross() (ivy.array method)": [[665, "ivy.Array.cross"]], "cross() (ivy.container method)": [[665, "ivy.Container.cross"]], "det() (ivy.array method)": [[666, "ivy.Array.det"]], "det() (ivy.container method)": [[666, "ivy.Container.det"]], "diag() (ivy.array method)": [[667, "ivy.Array.diag"]], "diag() (ivy.container method)": [[667, "ivy.Container.diag"]], "diagonal() (ivy.array method)": [[668, "ivy.Array.diagonal"]], "diagonal() (ivy.container method)": [[668, "ivy.Container.diagonal"]], "eigh() (ivy.array method)": [[670, "ivy.Array.eigh"]], "eigh() (ivy.container method)": [[670, "ivy.Container.eigh"]], "eigvalsh() (ivy.array method)": [[671, "ivy.Array.eigvalsh"]], "eigvalsh() (ivy.container method)": [[671, "ivy.Container.eigvalsh"]], "inner() (ivy.array method)": [[672, "ivy.Array.inner"]], "inner() (ivy.container method)": [[672, "ivy.Container.inner"]], "inv() (ivy.array method)": [[673, "ivy.Array.inv"]], "inv() (ivy.container method)": [[673, "ivy.Container.inv"]], "matmul() (ivy.array method)": [[674, "ivy.Array.matmul"]], "matmul() (ivy.container method)": [[674, "ivy.Container.matmul"]], "matrix_norm() (ivy.array method)": [[675, "ivy.Array.matrix_norm"]], "matrix_norm() (ivy.container method)": [[675, "ivy.Container.matrix_norm"]], "matrix_power() (ivy.array method)": [[676, "ivy.Array.matrix_power"]], "matrix_power() (ivy.container method)": [[676, "ivy.Container.matrix_power"]], "matrix_rank() (ivy.array method)": [[677, "ivy.Array.matrix_rank"]], "matrix_rank() (ivy.container method)": [[677, "ivy.Container.matrix_rank"]], "matrix_transpose() (ivy.array method)": [[678, "ivy.Array.matrix_transpose"]], "matrix_transpose() (ivy.container method)": [[678, "ivy.Container.matrix_transpose"]], "outer() (ivy.array method)": [[679, "ivy.Array.outer"]], "outer() (ivy.container method)": [[679, "ivy.Container.outer"]], "pinv() (ivy.array method)": [[680, "ivy.Array.pinv"]], "pinv() (ivy.container method)": [[680, "ivy.Container.pinv"]], "qr() (ivy.array method)": [[681, "ivy.Array.qr"]], "qr() (ivy.container method)": [[681, "ivy.Container.qr"]], "slogdet() (ivy.array method)": [[682, "ivy.Array.slogdet"]], "slogdet() (ivy.container method)": [[682, "ivy.Container.slogdet"]], "solve() (ivy.array method)": [[683, "ivy.Array.solve"]], "solve() (ivy.container method)": [[683, "ivy.Container.solve"]], "svd() (ivy.array method)": [[684, "ivy.Array.svd"]], "svd() (ivy.container method)": [[684, "ivy.Container.svd"]], "svdvals() (ivy.array method)": [[685, "ivy.Array.svdvals"]], "svdvals() (ivy.container method)": [[685, "ivy.Container.svdvals"]], "tensordot() (ivy.array method)": [[686, "ivy.Array.tensordot"]], "tensordot() (ivy.container method)": [[686, "ivy.Container.tensordot"]], "tensorsolve() (ivy.array method)": [[687, "ivy.Array.tensorsolve"]], "tensorsolve() (ivy.container method)": [[687, "ivy.Container.tensorsolve"]], "trace() (ivy.array method)": [[688, "ivy.Array.trace"]], "trace() (ivy.container method)": [[688, "ivy.Container.trace"]], "vander() (ivy.array method)": [[689, "ivy.Array.vander"]], "vander() (ivy.container method)": [[689, "ivy.Container.vander"]], "vecdot() (ivy.array method)": [[690, "ivy.Array.vecdot"]], "vecdot() (ivy.container method)": [[690, "ivy.Container.vecdot"]], "vector_norm() (ivy.array method)": [[691, "ivy.Array.vector_norm"]], "vector_norm() (ivy.container method)": [[691, "ivy.Container.vector_norm"]], "vector_to_skew_symmetric_matrix() (ivy.array method)": [[692, "ivy.Array.vector_to_skew_symmetric_matrix"]], "vector_to_skew_symmetric_matrix() (ivy.container method)": [[692, "ivy.Container.vector_to_skew_symmetric_matrix"]], "binary_cross_entropy() (ivy.array method)": [[693, "ivy.Array.binary_cross_entropy"]], "binary_cross_entropy() (ivy.container method)": [[693, "ivy.Container.binary_cross_entropy"]], "cross_entropy() (ivy.array method)": [[694, "ivy.Array.cross_entropy"]], "cross_entropy() (ivy.container method)": [[694, "ivy.Container.cross_entropy"]], "sparse_cross_entropy() (ivy.array method)": [[695, "ivy.Array.sparse_cross_entropy"]], "sparse_cross_entropy() (ivy.container method)": [[695, "ivy.Container.sparse_cross_entropy"]], "clip() (ivy.array method)": [[696, "ivy.Array.clip"]], "clip() (ivy.container method)": [[696, "ivy.Container.clip"]], "concat() (ivy.array method)": [[697, "ivy.Array.concat"]], "concat() (ivy.container method)": [[697, "ivy.Container.concat"]], "constant_pad() (ivy.array method)": [[698, "ivy.Array.constant_pad"]], "constant_pad() (ivy.container method)": [[698, "ivy.Container.constant_pad"]], "expand_dims() (ivy.array method)": [[699, "ivy.Array.expand_dims"]], "expand_dims() (ivy.container method)": [[699, "ivy.Container.expand_dims"]], "flip() (ivy.array method)": [[700, "ivy.Array.flip"]], "flip() (ivy.container method)": [[700, "ivy.Container.flip"]], "permute_dims() (ivy.array method)": [[701, "ivy.Array.permute_dims"]], "permute_dims() (ivy.container method)": [[701, "ivy.Container.permute_dims"]], "repeat() (ivy.array method)": [[702, "ivy.Array.repeat"]], "repeat() (ivy.container method)": [[702, "ivy.Container.repeat"]], "reshape() (ivy.array method)": [[703, "ivy.Array.reshape"]], "reshape() (ivy.container method)": [[703, "ivy.Container.reshape"]], "roll() (ivy.array method)": [[704, "ivy.Array.roll"]], "roll() (ivy.container method)": [[704, "ivy.Container.roll"]], "split() (ivy.array method)": [[705, "ivy.Array.split"]], "split() (ivy.container method)": [[705, "ivy.Container.split"]], "squeeze() (ivy.array method)": [[706, "ivy.Array.squeeze"]], "squeeze() (ivy.container method)": [[706, "ivy.Container.squeeze"]], "stack() (ivy.array method)": [[707, "ivy.Array.stack"]], "stack() (ivy.container method)": [[707, "ivy.Container.stack"]], "swapaxes() (ivy.array method)": [[708, "ivy.Array.swapaxes"]], "swapaxes() (ivy.container method)": [[708, "ivy.Container.swapaxes"]], "tile() (ivy.array method)": [[709, "ivy.Array.tile"]], "tile() (ivy.container method)": [[709, "ivy.Container.tile"]], "unstack() (ivy.array method)": [[710, "ivy.Array.unstack"]], "unstack() (ivy.container method)": [[710, "ivy.Container.unstack"]], "zero_pad() (ivy.array method)": [[711, "ivy.Array.zero_pad"]], "zero_pad() (ivy.container method)": [[711, "ivy.Container.zero_pad"]], "layer_norm() (ivy.array method)": [[734, "ivy.Array.layer_norm"]], "layer_norm() (ivy.container method)": [[734, "ivy.Container.layer_norm"]], "multinomial() (ivy.array method)": [[735, "ivy.Array.multinomial"]], "multinomial() (ivy.container method)": [[735, "ivy.Container.multinomial"]], "randint() (ivy.array method)": [[736, "ivy.Array.randint"]], "randint() (ivy.container method)": [[736, "ivy.Container.randint"]], "random_normal() (ivy.array method)": [[737, "ivy.Array.random_normal"]], "random_normal() (ivy.container method)": [[737, "ivy.Container.random_normal"]], "random_uniform() (ivy.array method)": [[738, "ivy.Array.random_uniform"]], "random_uniform() (ivy.container method)": [[738, "ivy.Container.random_uniform"]], "shuffle() (ivy.array method)": [[740, "ivy.Array.shuffle"]], "shuffle() (ivy.container method)": [[740, "ivy.Container.shuffle"]], "argmax() (ivy.array method)": [[741, "ivy.Array.argmax"]], "argmax() (ivy.container method)": [[741, "ivy.Container.argmax"]], "argmin() (ivy.array method)": [[742, "ivy.Array.argmin"]], "argmin() (ivy.container method)": [[742, "ivy.Container.argmin"]], "argwhere() (ivy.array method)": [[743, "ivy.Array.argwhere"]], "argwhere() (ivy.container method)": [[743, "ivy.Container.argwhere"]], "nonzero() (ivy.array method)": [[744, "ivy.Array.nonzero"]], "nonzero() (ivy.container method)": [[744, "ivy.Container.nonzero"]], "where() (ivy.array method)": [[745, "ivy.Array.where"]], "where() (ivy.container method)": [[745, "ivy.Container.where"]], "unique_all() (ivy.array method)": [[746, "ivy.Array.unique_all"]], "unique_all() (ivy.container method)": [[746, "ivy.Container.unique_all"]], "unique_counts() (ivy.array method)": [[747, "ivy.Array.unique_counts"]], "unique_counts() (ivy.container method)": [[747, "ivy.Container.unique_counts"]], "unique_inverse() (ivy.array method)": [[748, "ivy.Array.unique_inverse"]], "unique_inverse() (ivy.container method)": [[748, "ivy.Container.unique_inverse"]], "unique_values() (ivy.array method)": [[749, "ivy.Array.unique_values"]], "unique_values() (ivy.container method)": [[749, "ivy.Container.unique_values"]], "argsort() (ivy.array method)": [[750, "ivy.Array.argsort"]], "argsort() (ivy.container method)": [[750, "ivy.Container.argsort"]], "msort() (ivy.array method)": [[751, "ivy.Array.msort"]], "msort() (ivy.container method)": [[751, "ivy.Container.msort"]], "searchsorted() (ivy.array method)": [[752, "ivy.Array.searchsorted"]], "searchsorted() (ivy.container method)": [[752, "ivy.Container.searchsorted"]], "sort() (ivy.array method)": [[753, "ivy.Array.sort"]], "sort() (ivy.container method)": [[753, "ivy.Container.sort"]], "cumprod() (ivy.array method)": [[754, "ivy.Array.cumprod"]], "cumprod() (ivy.container method)": [[754, "ivy.Container.cumprod"]], "cumsum() (ivy.array method)": [[755, "ivy.Array.cumsum"]], "cumsum() (ivy.container method)": [[755, "ivy.Container.cumsum"]], "einsum() (ivy.array method)": [[756, "ivy.Array.einsum"]], "einsum() (ivy.container method)": [[756, "ivy.Container.einsum"]], "max() (ivy.array method)": [[757, "ivy.Array.max"]], "max() (ivy.container method)": [[757, "ivy.Container.max"]], "mean() (ivy.array method)": [[758, "ivy.Array.mean"]], "mean() (ivy.container method)": [[758, "ivy.Container.mean"]], "min() (ivy.array method)": [[759, "ivy.Array.min"]], "min() (ivy.container method)": [[759, "ivy.Container.min"]], "prod() (ivy.array method)": [[760, "ivy.Array.prod"]], "prod() (ivy.container method)": [[760, "ivy.Container.prod"]], "std() (ivy.array method)": [[761, "ivy.Array.std"]], "std() (ivy.container method)": [[761, "ivy.Container.std"]], "sum() (ivy.array method)": [[762, "ivy.Array.sum"]], "sum() (ivy.container method)": [[762, "ivy.Container.sum"]], "var() (ivy.array method)": [[763, "ivy.Array.var"]], "var() (ivy.container method)": [[763, "ivy.Container.var"]], "all() (ivy.array method)": [[764, "ivy.Array.all"]], "all() (ivy.container method)": [[764, "ivy.Container.all"]], "any() (ivy.array method)": [[765, "ivy.Array.any"]], "any() (ivy.container method)": [[765, "ivy.Container.any"]], "assert_all_close() (in module ivy_tests.test_ivy.helpers.assertions)": [[768, "ivy_tests.test_ivy.helpers.assertions.assert_all_close"]], "assert_same_type() (in module ivy_tests.test_ivy.helpers.assertions)": [[768, "ivy_tests.test_ivy.helpers.assertions.assert_same_type"]], "assert_same_type_and_shape() (in module ivy_tests.test_ivy.helpers.assertions)": [[768, "ivy_tests.test_ivy.helpers.assertions.assert_same_type_and_shape"]], "check_unsupported_device() (in module ivy_tests.test_ivy.helpers.assertions)": [[768, "ivy_tests.test_ivy.helpers.assertions.check_unsupported_device"]], "check_unsupported_device_and_dtype() (in module ivy_tests.test_ivy.helpers.assertions)": [[768, "ivy_tests.test_ivy.helpers.assertions.check_unsupported_device_and_dtype"]], "check_unsupported_dtype() (in module ivy_tests.test_ivy.helpers.assertions)": [[768, "ivy_tests.test_ivy.helpers.assertions.check_unsupported_dtype"]], "ivy_tests.test_ivy.helpers.assertions": [[768, "module-ivy_tests.test_ivy.helpers.assertions"]], "test_unsupported_function() (in module ivy_tests.test_ivy.helpers.assertions)": [[768, "ivy_tests.test_ivy.helpers.assertions.test_unsupported_function"]], "value_test() (in module ivy_tests.test_ivy.helpers.assertions)": [[768, "ivy_tests.test_ivy.helpers.assertions.value_test"]], "ivy_tests.test_ivy.helpers.available_frameworks": [[769, "module-ivy_tests.test_ivy.helpers.available_frameworks"]], "args_to_container() (in module ivy_tests.test_ivy.helpers.function_testing)": [[770, "ivy_tests.test_ivy.helpers.function_testing.args_to_container"]], "args_to_frontend() (in module ivy_tests.test_ivy.helpers.function_testing)": [[770, "ivy_tests.test_ivy.helpers.function_testing.args_to_frontend"]], "arrays_to_frontend() (in module ivy_tests.test_ivy.helpers.function_testing)": [[770, "ivy_tests.test_ivy.helpers.function_testing.arrays_to_frontend"]], "as_lists() (in module ivy_tests.test_ivy.helpers.function_testing)": [[770, "ivy_tests.test_ivy.helpers.function_testing.as_lists"]], "convtrue() (in module ivy_tests.test_ivy.helpers.function_testing)": [[770, "ivy_tests.test_ivy.helpers.function_testing.convtrue"]], "create_args_kwargs() (in module ivy_tests.test_ivy.helpers.function_testing)": [[770, "ivy_tests.test_ivy.helpers.function_testing.create_args_kwargs"]], "flatten() (in module ivy_tests.test_ivy.helpers.function_testing)": [[770, "ivy_tests.test_ivy.helpers.function_testing.flatten"]], "flatten_and_to_np() (in module ivy_tests.test_ivy.helpers.function_testing)": [[770, "ivy_tests.test_ivy.helpers.function_testing.flatten_and_to_np"]], "flatten_frontend() (in module ivy_tests.test_ivy.helpers.function_testing)": [[770, "ivy_tests.test_ivy.helpers.function_testing.flatten_frontend"]], "flatten_frontend_fw_to_np() (in module ivy_tests.test_ivy.helpers.function_testing)": [[770, "ivy_tests.test_ivy.helpers.function_testing.flatten_frontend_fw_to_np"]], "flatten_frontend_to_np() (in module ivy_tests.test_ivy.helpers.function_testing)": [[770, "ivy_tests.test_ivy.helpers.function_testing.flatten_frontend_to_np"]], "get_frontend_ret() (in module ivy_tests.test_ivy.helpers.function_testing)": [[770, "ivy_tests.test_ivy.helpers.function_testing.get_frontend_ret"]], "get_ret_and_flattened_np_array() (in module ivy_tests.test_ivy.helpers.function_testing)": [[770, "ivy_tests.test_ivy.helpers.function_testing.get_ret_and_flattened_np_array"]], "gradient_incompatible_function() (in module ivy_tests.test_ivy.helpers.function_testing)": [[770, "ivy_tests.test_ivy.helpers.function_testing.gradient_incompatible_function"]], "gradient_test() (in module ivy_tests.test_ivy.helpers.function_testing)": [[770, "ivy_tests.test_ivy.helpers.function_testing.gradient_test"]], "gradient_unsupported_dtypes() (in module ivy_tests.test_ivy.helpers.function_testing)": [[770, "ivy_tests.test_ivy.helpers.function_testing.gradient_unsupported_dtypes"]], "ivy_tests.test_ivy.helpers.function_testing": [[770, "module-ivy_tests.test_ivy.helpers.function_testing"]], "kwargs_to_args_n_kwargs() (in module ivy_tests.test_ivy.helpers.function_testing)": [[770, "ivy_tests.test_ivy.helpers.function_testing.kwargs_to_args_n_kwargs"]], "test_frontend_function() (in module ivy_tests.test_ivy.helpers.function_testing)": [[770, "ivy_tests.test_ivy.helpers.function_testing.test_frontend_function"]], "test_frontend_method() (in module ivy_tests.test_ivy.helpers.function_testing)": [[770, "ivy_tests.test_ivy.helpers.function_testing.test_frontend_method"]], "test_function() (in module ivy_tests.test_ivy.helpers.function_testing)": [[770, "ivy_tests.test_ivy.helpers.function_testing.test_function"]], "test_function_backend_computation() (in module ivy_tests.test_ivy.helpers.function_testing)": [[770, "ivy_tests.test_ivy.helpers.function_testing.test_function_backend_computation"]], "test_function_ground_truth_computation() (in module ivy_tests.test_ivy.helpers.function_testing)": [[770, "ivy_tests.test_ivy.helpers.function_testing.test_function_ground_truth_computation"]], "test_gradient_backend_computation() (in module ivy_tests.test_ivy.helpers.function_testing)": [[770, "ivy_tests.test_ivy.helpers.function_testing.test_gradient_backend_computation"]], "test_gradient_ground_truth_computation() (in module ivy_tests.test_ivy.helpers.function_testing)": [[770, "ivy_tests.test_ivy.helpers.function_testing.test_gradient_ground_truth_computation"]], "test_method() (in module ivy_tests.test_ivy.helpers.function_testing)": [[770, "ivy_tests.test_ivy.helpers.function_testing.test_method"]], "test_method_backend_computation() (in module ivy_tests.test_ivy.helpers.function_testing)": [[770, "ivy_tests.test_ivy.helpers.function_testing.test_method_backend_computation"]], "test_method_ground_truth_computation() (in module ivy_tests.test_ivy.helpers.function_testing)": [[770, "ivy_tests.test_ivy.helpers.function_testing.test_method_ground_truth_computation"]], "traced_if_required() (in module ivy_tests.test_ivy.helpers.function_testing)": [[770, "ivy_tests.test_ivy.helpers.function_testing.traced_if_required"]], "wrap_frontend_function_args() (in module ivy_tests.test_ivy.helpers.function_testing)": [[770, "ivy_tests.test_ivy.helpers.function_testing.wrap_frontend_function_args"]], "current_frontend_config (in module ivy_tests.test_ivy.helpers.globals)": [[771, "ivy_tests.test_ivy.helpers.globals.CURRENT_FRONTEND_CONFIG"]], "interruptedtest": [[771, "ivy_tests.test_ivy.helpers.globals.InterruptedTest"]], "testdata (class in ivy_tests.test_ivy.helpers.globals)": [[771, "ivy_tests.test_ivy.helpers.globals.TestData"]], "__init__() (ivy_tests.test_ivy.helpers.globals.interruptedtest method)": [[771, "ivy_tests.test_ivy.helpers.globals.InterruptedTest.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.globals.testdata method)": [[771, "ivy_tests.test_ivy.helpers.globals.TestData.__init__"]], "fn_name (ivy_tests.test_ivy.helpers.globals.testdata attribute)": [[771, "ivy_tests.test_ivy.helpers.globals.TestData.fn_name"]], "fn_tree (ivy_tests.test_ivy.helpers.globals.testdata attribute)": [[771, "ivy_tests.test_ivy.helpers.globals.TestData.fn_tree"]], "is_method (ivy_tests.test_ivy.helpers.globals.testdata attribute)": [[771, "ivy_tests.test_ivy.helpers.globals.TestData.is_method"]], "ivy_tests.test_ivy.helpers.globals": [[771, "module-ivy_tests.test_ivy.helpers.globals"]], "setup_api_test() (in module ivy_tests.test_ivy.helpers.globals)": [[771, "ivy_tests.test_ivy.helpers.globals.setup_api_test"]], "setup_frontend_test() (in module ivy_tests.test_ivy.helpers.globals)": [[771, "ivy_tests.test_ivy.helpers.globals.setup_frontend_test"]], "supported_device_dtypes (ivy_tests.test_ivy.helpers.globals.testdata attribute)": [[771, "ivy_tests.test_ivy.helpers.globals.TestData.supported_device_dtypes"]], "teardown_api_test() (in module ivy_tests.test_ivy.helpers.globals)": [[771, "ivy_tests.test_ivy.helpers.globals.teardown_api_test"]], "teardown_frontend_test() (in module ivy_tests.test_ivy.helpers.globals)": [[771, "ivy_tests.test_ivy.helpers.globals.teardown_frontend_test"]], "test_fn (ivy_tests.test_ivy.helpers.globals.testdata attribute)": [[771, "ivy_tests.test_ivy.helpers.globals.TestData.test_fn"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers": [[772, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers"]], "array_and_broadcastable_shape() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[773, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.array_and_broadcastable_shape"]], "array_bools() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[773, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.array_bools"]], "array_helpers_dtype_info_helper() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[773, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.array_helpers_dtype_info_helper"]], "array_indices_axis() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[773, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.array_indices_axis"]], "array_indices_put_along_axis() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[773, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.array_indices_put_along_axis"]], "array_values() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[773, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.array_values"]], "arrays_and_axes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[773, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.arrays_and_axes"]], "arrays_for_pooling() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[773, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.arrays_for_pooling"]], "broadcast_shapes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[773, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.broadcast_shapes"]], "cond_data_gen_helper() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[773, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.cond_data_gen_helper"]], "create_concatenable_arrays_dtypes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[773, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.create_concatenable_arrays_dtypes"]], "create_nested_input() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[773, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.create_nested_input"]], "dtype_and_values() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[773, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.dtype_and_values"]], "dtype_array_query() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[773, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.dtype_array_query"]], "dtype_array_query_val() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[773, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.dtype_array_query_val"]], "dtype_values_axis() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[773, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.dtype_values_axis"]], "einsum_helper() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[773, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.einsum_helper"]], "get_first_solve_batch_matrix() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[773, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.get_first_solve_batch_matrix"]], "get_first_solve_matrix() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[773, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.get_first_solve_matrix"]], "get_second_solve_batch_matrix() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[773, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.get_second_solve_batch_matrix"]], "get_second_solve_matrix() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[773, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.get_second_solve_matrix"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers": [[773, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers"]], "list_of_size() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[773, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.list_of_size"]], "lists() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[773, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.lists"]], "mutually_broadcastable_shapes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[773, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.mutually_broadcastable_shapes"]], "prod() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[773, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.prod"]], "array_dtypes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers)": [[774, "ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers.array_dtypes"]], "cast_filter() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers)": [[774, "ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers.cast_filter"]], "cast_filter_helper() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers)": [[774, "ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers.cast_filter_helper"]], "get_castable_dtype() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers)": [[774, "ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers.get_castable_dtype"]], "get_dtypes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers)": [[774, "ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers.get_dtypes"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers": [[774, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers"]], "broadcasterror": [[775, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.BroadcastError"]], "apply_safety_factor() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[775, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.apply_safety_factor"]], "broadcast_shapes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[775, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.broadcast_shapes"]], "dims_and_offset() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[775, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.dims_and_offset"]], "embedding_helper() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[775, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.embedding_helper"]], "general_helpers_dtype_info_helper() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[775, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.general_helpers_dtype_info_helper"]], "get_axis() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[775, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.get_axis"]], "get_bounds() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[775, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.get_bounds"]], "get_mean_std() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[775, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.get_mean_std"]], "get_shape() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[775, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.get_shape"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers": [[775, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers"]], "matrix_is_stable() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[775, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.matrix_is_stable"]], "reshape_shapes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[775, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.reshape_shapes"]], "sizes_() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[775, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.sizes_"]], "subsets() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[775, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.subsets"]], "two_broadcastable_shapes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[775, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.two_broadcastable_shapes"]], "x_and_filters() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[775, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.x_and_filters"]], "floats() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers)": [[776, "ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers.floats"]], "ints() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers)": [[776, "ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers.ints"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers": [[776, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers"]], "number() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers)": [[776, "ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers.number"]], "backend_proc() (in module ivy_tests.test_ivy.helpers.multiprocessing)": [[777, "ivy_tests.test_ivy.helpers.multiprocessing.backend_proc"]], "frontend_proc() (in module ivy_tests.test_ivy.helpers.multiprocessing)": [[777, "ivy_tests.test_ivy.helpers.multiprocessing.frontend_proc"]], "ivy_tests.test_ivy.helpers.multiprocessing": [[777, "module-ivy_tests.test_ivy.helpers.multiprocessing"]], "backendhandler (class in ivy_tests.test_ivy.helpers.pipeline_helper)": [[778, "ivy_tests.test_ivy.helpers.pipeline_helper.BackendHandler"]], "backendhandlermode (class in ivy_tests.test_ivy.helpers.pipeline_helper)": [[778, "ivy_tests.test_ivy.helpers.pipeline_helper.BackendHandlerMode"]], "setbackend (ivy_tests.test_ivy.helpers.pipeline_helper.backendhandlermode attribute)": [[778, "ivy_tests.test_ivy.helpers.pipeline_helper.BackendHandlerMode.SetBackend"]], "withbackend (ivy_tests.test_ivy.helpers.pipeline_helper.backendhandlermode attribute)": [[778, "ivy_tests.test_ivy.helpers.pipeline_helper.BackendHandlerMode.WithBackend"]], "withbackendcontext (class in ivy_tests.test_ivy.helpers.pipeline_helper)": [[778, "ivy_tests.test_ivy.helpers.pipeline_helper.WithBackendContext"]], "__init__() (ivy_tests.test_ivy.helpers.pipeline_helper.withbackendcontext method)": [[778, "ivy_tests.test_ivy.helpers.pipeline_helper.WithBackendContext.__init__"]], "get_frontend_config() (in module ivy_tests.test_ivy.helpers.pipeline_helper)": [[778, "ivy_tests.test_ivy.helpers.pipeline_helper.get_frontend_config"]], "ivy_tests.test_ivy.helpers.pipeline_helper": [[778, "module-ivy_tests.test_ivy.helpers.pipeline_helper"]], "update_backend() (ivy_tests.test_ivy.helpers.pipeline_helper.backendhandler class method)": [[778, "ivy_tests.test_ivy.helpers.pipeline_helper.BackendHandler.update_backend"]], "frontendmethoddata (class in ivy_tests.test_ivy.helpers.structs)": [[779, "ivy_tests.test_ivy.helpers.structs.FrontendMethodData"]], "__init__() (ivy_tests.test_ivy.helpers.structs.frontendmethoddata method)": [[779, "ivy_tests.test_ivy.helpers.structs.FrontendMethodData.__init__"]], "framework_init_module (ivy_tests.test_ivy.helpers.structs.frontendmethoddata attribute)": [[779, "ivy_tests.test_ivy.helpers.structs.FrontendMethodData.framework_init_module"]], "init_name (ivy_tests.test_ivy.helpers.structs.frontendmethoddata attribute)": [[779, "ivy_tests.test_ivy.helpers.structs.FrontendMethodData.init_name"]], "ivy_init_module (ivy_tests.test_ivy.helpers.structs.frontendmethoddata attribute)": [[779, "ivy_tests.test_ivy.helpers.structs.FrontendMethodData.ivy_init_module"]], "ivy_tests.test_ivy.helpers.structs": [[779, "module-ivy_tests.test_ivy.helpers.structs"]], "method_name (ivy_tests.test_ivy.helpers.structs.frontendmethoddata attribute)": [[779, "ivy_tests.test_ivy.helpers.structs.FrontendMethodData.method_name"]], "dynamicflag (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[780, "ivy_tests.test_ivy.helpers.test_parameter_flags.DynamicFlag"]], "frontendfunctiontestflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[780, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendFunctionTestFlags"]], "frontendinittestflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[780, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendInitTestFlags"]], "frontendmethodtestflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[780, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendMethodTestFlags"]], "functiontestflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[780, "ivy_tests.test_ivy.helpers.test_parameter_flags.FunctionTestFlags"]], "initmethodtestflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[780, "ivy_tests.test_ivy.helpers.test_parameter_flags.InitMethodTestFlags"]], "methodtestflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[780, "ivy_tests.test_ivy.helpers.test_parameter_flags.MethodTestFlags"]], "testflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[780, "ivy_tests.test_ivy.helpers.test_parameter_flags.TestFlags"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.dynamicflag method)": [[780, "ivy_tests.test_ivy.helpers.test_parameter_flags.DynamicFlag.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.frontendfunctiontestflags method)": [[780, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendFunctionTestFlags.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.frontendinittestflags method)": [[780, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendInitTestFlags.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.frontendmethodtestflags method)": [[780, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendMethodTestFlags.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.functiontestflags method)": [[780, "ivy_tests.test_ivy.helpers.test_parameter_flags.FunctionTestFlags.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.initmethodtestflags method)": [[780, "ivy_tests.test_ivy.helpers.test_parameter_flags.InitMethodTestFlags.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.methodtestflags method)": [[780, "ivy_tests.test_ivy.helpers.test_parameter_flags.MethodTestFlags.__init__"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.frontendfunctiontestflags method)": [[780, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendFunctionTestFlags.apply_flags"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.frontendinittestflags method)": [[780, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendInitTestFlags.apply_flags"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.frontendmethodtestflags method)": [[780, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendMethodTestFlags.apply_flags"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.functiontestflags method)": [[780, "ivy_tests.test_ivy.helpers.test_parameter_flags.FunctionTestFlags.apply_flags"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.initmethodtestflags method)": [[780, "ivy_tests.test_ivy.helpers.test_parameter_flags.InitMethodTestFlags.apply_flags"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.methodtestflags method)": [[780, "ivy_tests.test_ivy.helpers.test_parameter_flags.MethodTestFlags.apply_flags"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.testflags method)": [[780, "ivy_tests.test_ivy.helpers.test_parameter_flags.TestFlags.apply_flags"]], "build_flag() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[780, "ivy_tests.test_ivy.helpers.test_parameter_flags.build_flag"]], "frontend_function_flags() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[780, "ivy_tests.test_ivy.helpers.test_parameter_flags.frontend_function_flags"]], "frontend_init_flags() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[780, "ivy_tests.test_ivy.helpers.test_parameter_flags.frontend_init_flags"]], "frontend_method_flags() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[780, "ivy_tests.test_ivy.helpers.test_parameter_flags.frontend_method_flags"]], "function_flags() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[780, "ivy_tests.test_ivy.helpers.test_parameter_flags.function_flags"]], "init_method_flags() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[780, "ivy_tests.test_ivy.helpers.test_parameter_flags.init_method_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags": [[780, "module-ivy_tests.test_ivy.helpers.test_parameter_flags"]], "method_flags() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[780, "ivy_tests.test_ivy.helpers.test_parameter_flags.method_flags"]], "strategy (ivy_tests.test_ivy.helpers.test_parameter_flags.dynamicflag attribute)": [[780, "ivy_tests.test_ivy.helpers.test_parameter_flags.DynamicFlag.strategy"]], "handle_example() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[781, "ivy_tests.test_ivy.helpers.testing_helpers.handle_example"]], "handle_frontend_method() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[781, "ivy_tests.test_ivy.helpers.testing_helpers.handle_frontend_method"]], "handle_frontend_test() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[781, "ivy_tests.test_ivy.helpers.testing_helpers.handle_frontend_test"]], "handle_method() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[781, "ivy_tests.test_ivy.helpers.testing_helpers.handle_method"]], "handle_test() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[781, "ivy_tests.test_ivy.helpers.testing_helpers.handle_test"]], "ivy_tests.test_ivy.helpers.testing_helpers": [[781, "module-ivy_tests.test_ivy.helpers.testing_helpers"]], "num_positional_args() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[781, "ivy_tests.test_ivy.helpers.testing_helpers.num_positional_args"]], "num_positional_args_helper() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[781, "ivy_tests.test_ivy.helpers.testing_helpers.num_positional_args_helper"]], "num_positional_args_method() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[781, "ivy_tests.test_ivy.helpers.testing_helpers.num_positional_args_method"]], "seed() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[781, "ivy_tests.test_ivy.helpers.testing_helpers.seed"]], "elu (class in ivy.stateful.activations)": [[785, "ivy.stateful.activations.ELU"]], "geglu (class in ivy.stateful.activations)": [[785, "ivy.stateful.activations.GEGLU"]], "gelu (class in ivy.stateful.activations)": [[785, "ivy.stateful.activations.GELU"]], "hardswish (class in ivy.stateful.activations)": [[785, "ivy.stateful.activations.Hardswish"]], "leakyrelu (class in ivy.stateful.activations)": [[785, "ivy.stateful.activations.LeakyReLU"]], "logsigmoid (class in ivy.stateful.activations)": [[785, "ivy.stateful.activations.LogSigmoid"]], "logsoftmax (class in ivy.stateful.activations)": [[785, "ivy.stateful.activations.LogSoftmax"]], "logit (class in ivy.stateful.activations)": [[785, "ivy.stateful.activations.Logit"]], "mish (class in ivy.stateful.activations)": [[785, "ivy.stateful.activations.Mish"]], "prelu (class in ivy.stateful.activations)": [[785, "ivy.stateful.activations.PReLU"]], "relu (class in ivy.stateful.activations)": [[785, "ivy.stateful.activations.ReLU"]], "relu6 (class in ivy.stateful.activations)": [[785, "ivy.stateful.activations.ReLU6"]], "selu (class in ivy.stateful.activations)": [[785, "ivy.stateful.activations.SeLU"]], "silu (class in ivy.stateful.activations)": [[785, "ivy.stateful.activations.SiLU"]], "sigmoid (class in ivy.stateful.activations)": [[785, "ivy.stateful.activations.Sigmoid"]], "softmax (class in ivy.stateful.activations)": [[785, "ivy.stateful.activations.Softmax"]], "softplus (class in ivy.stateful.activations)": [[785, "ivy.stateful.activations.Softplus"]], "tanh (class in ivy.stateful.activations)": [[785, "ivy.stateful.activations.Tanh"]], "__init__() (ivy.stateful.activations.elu method)": [[785, "ivy.stateful.activations.ELU.__init__"]], "__init__() (ivy.stateful.activations.geglu method)": [[785, "ivy.stateful.activations.GEGLU.__init__"]], "__init__() (ivy.stateful.activations.gelu method)": [[785, "ivy.stateful.activations.GELU.__init__"]], "__init__() (ivy.stateful.activations.hardswish method)": [[785, "ivy.stateful.activations.Hardswish.__init__"]], "__init__() (ivy.stateful.activations.leakyrelu method)": [[785, "ivy.stateful.activations.LeakyReLU.__init__"]], "__init__() (ivy.stateful.activations.logsigmoid method)": [[785, "ivy.stateful.activations.LogSigmoid.__init__"]], "__init__() (ivy.stateful.activations.logsoftmax method)": [[785, "ivy.stateful.activations.LogSoftmax.__init__"]], "__init__() (ivy.stateful.activations.logit method)": [[785, "ivy.stateful.activations.Logit.__init__"]], "__init__() (ivy.stateful.activations.mish method)": [[785, "ivy.stateful.activations.Mish.__init__"]], "__init__() (ivy.stateful.activations.prelu method)": [[785, "ivy.stateful.activations.PReLU.__init__"]], "__init__() (ivy.stateful.activations.relu method)": [[785, "ivy.stateful.activations.ReLU.__init__"]], "__init__() (ivy.stateful.activations.relu6 method)": [[785, "ivy.stateful.activations.ReLU6.__init__"]], "__init__() (ivy.stateful.activations.selu method)": [[785, "ivy.stateful.activations.SeLU.__init__"]], "__init__() (ivy.stateful.activations.silu method)": [[785, "ivy.stateful.activations.SiLU.__init__"]], "__init__() (ivy.stateful.activations.sigmoid method)": [[785, "ivy.stateful.activations.Sigmoid.__init__"]], "__init__() (ivy.stateful.activations.softmax method)": [[785, "ivy.stateful.activations.Softmax.__init__"]], "__init__() (ivy.stateful.activations.softplus method)": [[785, "ivy.stateful.activations.Softplus.__init__"]], "__init__() (ivy.stateful.activations.tanh method)": [[785, "ivy.stateful.activations.Tanh.__init__"]], "ivy.stateful.activations": [[785, "module-ivy.stateful.activations"]], "moduleconverters (class in ivy.stateful.converters)": [[786, "ivy.stateful.converters.ModuleConverters"]], "from_flax_module() (ivy.stateful.converters.moduleconverters static method)": [[786, "ivy.stateful.converters.ModuleConverters.from_flax_module"]], "from_haiku_module() (ivy.stateful.converters.moduleconverters static method)": [[786, "ivy.stateful.converters.ModuleConverters.from_haiku_module"]], "from_keras_module() (ivy.stateful.converters.moduleconverters static method)": [[786, "ivy.stateful.converters.ModuleConverters.from_keras_module"]], "from_paddle_module() (ivy.stateful.converters.moduleconverters static method)": [[786, "ivy.stateful.converters.ModuleConverters.from_paddle_module"]], "from_torch_module() (ivy.stateful.converters.moduleconverters static method)": [[786, "ivy.stateful.converters.ModuleConverters.from_torch_module"]], "ivy.stateful.converters": [[786, "module-ivy.stateful.converters"]], "to_ivy_module() (in module ivy.stateful.converters)": [[786, "ivy.stateful.converters.to_ivy_module"]], "to_keras_module() (ivy.stateful.converters.moduleconverters method)": [[786, "ivy.stateful.converters.ModuleConverters.to_keras_module"]], "modulehelpers (class in ivy.stateful.helpers)": [[787, "ivy.stateful.helpers.ModuleHelpers"]], "ivy.stateful.helpers": [[787, "module-ivy.stateful.helpers"]], "constant (class in ivy.stateful.initializers)": [[788, "ivy.stateful.initializers.Constant"]], "firstlayersiren (class in ivy.stateful.initializers)": [[788, "ivy.stateful.initializers.FirstLayerSiren"]], "glorotuniform (class in ivy.stateful.initializers)": [[788, "ivy.stateful.initializers.GlorotUniform"]], "initializer (class in ivy.stateful.initializers)": [[788, "ivy.stateful.initializers.Initializer"]], "kaimingnormal (class in ivy.stateful.initializers)": [[788, "ivy.stateful.initializers.KaimingNormal"]], "ones (class in ivy.stateful.initializers)": [[788, "ivy.stateful.initializers.Ones"]], "randomnormal (class in ivy.stateful.initializers)": [[788, "ivy.stateful.initializers.RandomNormal"]], "siren (class in ivy.stateful.initializers)": [[788, "ivy.stateful.initializers.Siren"]], "uniform (class in ivy.stateful.initializers)": [[788, "ivy.stateful.initializers.Uniform"]], "zeros (class in ivy.stateful.initializers)": [[788, "ivy.stateful.initializers.Zeros"]], "__init__() (ivy.stateful.initializers.constant method)": [[788, "ivy.stateful.initializers.Constant.__init__"]], "__init__() (ivy.stateful.initializers.firstlayersiren method)": [[788, "ivy.stateful.initializers.FirstLayerSiren.__init__"]], "__init__() (ivy.stateful.initializers.glorotuniform method)": [[788, "ivy.stateful.initializers.GlorotUniform.__init__"]], "__init__() (ivy.stateful.initializers.kaimingnormal method)": [[788, "ivy.stateful.initializers.KaimingNormal.__init__"]], "__init__() (ivy.stateful.initializers.ones method)": [[788, "ivy.stateful.initializers.Ones.__init__"]], "__init__() (ivy.stateful.initializers.randomnormal method)": [[788, "ivy.stateful.initializers.RandomNormal.__init__"]], "__init__() (ivy.stateful.initializers.siren method)": [[788, "ivy.stateful.initializers.Siren.__init__"]], "__init__() (ivy.stateful.initializers.uniform method)": [[788, "ivy.stateful.initializers.Uniform.__init__"]], "__init__() (ivy.stateful.initializers.zeros method)": [[788, "ivy.stateful.initializers.Zeros.__init__"]], "create_variables() (ivy.stateful.initializers.constant method)": [[788, "ivy.stateful.initializers.Constant.create_variables"]], "create_variables() (ivy.stateful.initializers.initializer method)": [[788, "ivy.stateful.initializers.Initializer.create_variables"]], "create_variables() (ivy.stateful.initializers.kaimingnormal method)": [[788, "ivy.stateful.initializers.KaimingNormal.create_variables"]], "create_variables() (ivy.stateful.initializers.randomnormal method)": [[788, "ivy.stateful.initializers.RandomNormal.create_variables"]], "create_variables() (ivy.stateful.initializers.uniform method)": [[788, "ivy.stateful.initializers.Uniform.create_variables"]], "ivy.stateful.initializers": [[788, "module-ivy.stateful.initializers"]], "adaptiveavgpool1d (class in ivy.stateful.layers)": [[789, "ivy.stateful.layers.AdaptiveAvgPool1d"]], "adaptiveavgpool2d (class in ivy.stateful.layers)": [[789, "ivy.stateful.layers.AdaptiveAvgPool2d"]], "avgpool1d (class in ivy.stateful.layers)": [[789, "ivy.stateful.layers.AvgPool1D"]], "avgpool2d (class in ivy.stateful.layers)": [[789, "ivy.stateful.layers.AvgPool2D"]], "avgpool3d (class in ivy.stateful.layers)": [[789, "ivy.stateful.layers.AvgPool3D"]], "conv1d (class in ivy.stateful.layers)": [[789, "ivy.stateful.layers.Conv1D"]], "conv1dtranspose (class in ivy.stateful.layers)": [[789, "ivy.stateful.layers.Conv1DTranspose"]], "conv2d (class in ivy.stateful.layers)": [[789, "ivy.stateful.layers.Conv2D"]], "conv2dtranspose (class in ivy.stateful.layers)": [[789, "ivy.stateful.layers.Conv2DTranspose"]], "conv3d (class in ivy.stateful.layers)": [[789, "ivy.stateful.layers.Conv3D"]], "conv3dtranspose (class in ivy.stateful.layers)": [[789, "ivy.stateful.layers.Conv3DTranspose"]], "dct (class in ivy.stateful.layers)": [[789, "ivy.stateful.layers.Dct"]], "depthwiseconv2d (class in ivy.stateful.layers)": [[789, "ivy.stateful.layers.DepthwiseConv2D"]], "dropout (class in ivy.stateful.layers)": [[789, "ivy.stateful.layers.Dropout"]], "embedding (class in ivy.stateful.layers)": [[789, "ivy.stateful.layers.Embedding"]], "fft (class in ivy.stateful.layers)": [[789, "ivy.stateful.layers.FFT"]], "ifft (class in ivy.stateful.layers)": [[789, "ivy.stateful.layers.IFFT"]], "identity (class in ivy.stateful.layers)": [[789, "ivy.stateful.layers.Identity"]], "lstm (class in ivy.stateful.layers)": [[789, "ivy.stateful.layers.LSTM"]], "linear (class in ivy.stateful.layers)": [[789, "ivy.stateful.layers.Linear"]], "maxpool1d (class in ivy.stateful.layers)": [[789, "ivy.stateful.layers.MaxPool1D"]], "maxpool2d (class in ivy.stateful.layers)": [[789, "ivy.stateful.layers.MaxPool2D"]], "maxpool3d (class in ivy.stateful.layers)": [[789, "ivy.stateful.layers.MaxPool3D"]], "multiheadattention (class in ivy.stateful.layers)": [[789, "ivy.stateful.layers.MultiHeadAttention"]], "__init__() (ivy.stateful.layers.adaptiveavgpool1d method)": [[789, "ivy.stateful.layers.AdaptiveAvgPool1d.__init__"]], "__init__() (ivy.stateful.layers.adaptiveavgpool2d method)": [[789, "ivy.stateful.layers.AdaptiveAvgPool2d.__init__"]], "__init__() (ivy.stateful.layers.avgpool1d method)": [[789, "ivy.stateful.layers.AvgPool1D.__init__"]], "__init__() (ivy.stateful.layers.avgpool2d method)": [[789, "ivy.stateful.layers.AvgPool2D.__init__"]], "__init__() (ivy.stateful.layers.avgpool3d method)": [[789, "ivy.stateful.layers.AvgPool3D.__init__"]], "__init__() (ivy.stateful.layers.conv1d method)": [[789, "ivy.stateful.layers.Conv1D.__init__"]], "__init__() (ivy.stateful.layers.conv1dtranspose method)": [[789, "ivy.stateful.layers.Conv1DTranspose.__init__"]], "__init__() (ivy.stateful.layers.conv2d method)": [[789, "ivy.stateful.layers.Conv2D.__init__"]], "__init__() (ivy.stateful.layers.conv2dtranspose method)": [[789, "ivy.stateful.layers.Conv2DTranspose.__init__"]], "__init__() (ivy.stateful.layers.conv3d method)": [[789, "ivy.stateful.layers.Conv3D.__init__"]], "__init__() (ivy.stateful.layers.conv3dtranspose method)": [[789, "ivy.stateful.layers.Conv3DTranspose.__init__"]], "__init__() (ivy.stateful.layers.dct method)": [[789, "ivy.stateful.layers.Dct.__init__"]], "__init__() (ivy.stateful.layers.depthwiseconv2d method)": [[789, "ivy.stateful.layers.DepthwiseConv2D.__init__"]], "__init__() (ivy.stateful.layers.dropout method)": [[789, "ivy.stateful.layers.Dropout.__init__"]], "__init__() (ivy.stateful.layers.embedding method)": [[789, "ivy.stateful.layers.Embedding.__init__"]], "__init__() (ivy.stateful.layers.fft method)": [[789, "ivy.stateful.layers.FFT.__init__"]], "__init__() (ivy.stateful.layers.ifft method)": [[789, "ivy.stateful.layers.IFFT.__init__"]], "__init__() (ivy.stateful.layers.identity method)": [[789, "ivy.stateful.layers.Identity.__init__"]], "__init__() (ivy.stateful.layers.lstm method)": [[789, "ivy.stateful.layers.LSTM.__init__"]], "__init__() (ivy.stateful.layers.linear method)": [[789, "ivy.stateful.layers.Linear.__init__"]], "__init__() (ivy.stateful.layers.maxpool1d method)": [[789, "ivy.stateful.layers.MaxPool1D.__init__"]], "__init__() (ivy.stateful.layers.maxpool2d method)": [[789, "ivy.stateful.layers.MaxPool2D.__init__"]], "__init__() (ivy.stateful.layers.maxpool3d method)": [[789, "ivy.stateful.layers.MaxPool3D.__init__"]], "__init__() (ivy.stateful.layers.multiheadattention method)": [[789, "ivy.stateful.layers.MultiHeadAttention.__init__"]], "get_initial_state() (ivy.stateful.layers.lstm method)": [[789, "ivy.stateful.layers.LSTM.get_initial_state"]], "ivy.stateful.layers": [[789, "module-ivy.stateful.layers"]], "binarycrossentropyloss (class in ivy.stateful.losses)": [[790, "ivy.stateful.losses.BinaryCrossEntropyLoss"]], "crossentropyloss (class in ivy.stateful.losses)": [[790, "ivy.stateful.losses.CrossEntropyLoss"]], "logpoissonloss (class in ivy.stateful.losses)": [[790, "ivy.stateful.losses.LogPoissonLoss"]], "__init__() (ivy.stateful.losses.binarycrossentropyloss method)": [[790, "ivy.stateful.losses.BinaryCrossEntropyLoss.__init__"]], "__init__() (ivy.stateful.losses.crossentropyloss method)": [[790, "ivy.stateful.losses.CrossEntropyLoss.__init__"]], "__init__() (ivy.stateful.losses.logpoissonloss method)": [[790, "ivy.stateful.losses.LogPoissonLoss.__init__"]], "ivy.stateful.losses": [[790, "module-ivy.stateful.losses"]], "module (class in ivy.stateful.module)": [[791, "ivy.stateful.module.Module"]], "modulemeta (class in ivy.stateful.module)": [[791, "ivy.stateful.module.ModuleMeta"]], "__call__() (ivy.stateful.module.module method)": [[791, "ivy.stateful.module.Module.__call__"]], "__init__() (ivy.stateful.module.module method)": [[791, "ivy.stateful.module.Module.__init__"]], "buffers (ivy.stateful.module.module property)": [[791, "ivy.stateful.module.Module.buffers"]], "build() (ivy.stateful.module.module method)": [[791, "ivy.stateful.module.Module.build"]], "build_mode (ivy.stateful.module.module property)": [[791, "ivy.stateful.module.Module.build_mode"]], "built (ivy.stateful.module.module property)": [[791, "ivy.stateful.module.Module.built"]], "device (ivy.stateful.module.module property)": [[791, "ivy.stateful.module.Module.device"]], "dtype (ivy.stateful.module.module property)": [[791, "ivy.stateful.module.Module.dtype"]], "eval() (ivy.stateful.module.module method)": [[791, "ivy.stateful.module.Module.eval"]], "ivy.stateful.module": [[791, "module-ivy.stateful.module"]], "load() (ivy.stateful.module.module static method)": [[791, "ivy.stateful.module.Module.load"]], "module_dict (ivy.stateful.module.module property)": [[791, "ivy.stateful.module.Module.module_dict"]], "register_buffer() (ivy.stateful.module.module method)": [[791, "ivy.stateful.module.Module.register_buffer"]], "register_parameter() (ivy.stateful.module.module method)": [[791, "ivy.stateful.module.Module.register_parameter"]], "save() (ivy.stateful.module.module method)": [[791, "ivy.stateful.module.Module.save"]], "save_weights() (ivy.stateful.module.module method)": [[791, "ivy.stateful.module.Module.save_weights"]], "show_graph() (ivy.stateful.module.module method)": [[791, "ivy.stateful.module.Module.show_graph"]], "state_dict (ivy.stateful.module.module property)": [[791, "ivy.stateful.module.Module.state_dict"]], "to_device() (ivy.stateful.module.module method)": [[791, "ivy.stateful.module.Module.to_device"]], "trace_graph() (ivy.stateful.module.module method)": [[791, "ivy.stateful.module.Module.trace_graph"]], "train() (ivy.stateful.module.module method)": [[791, "ivy.stateful.module.Module.train"]], "training (ivy.stateful.module.module property)": [[791, "ivy.stateful.module.Module.training"]], "v (ivy.stateful.module.module property)": [[791, "ivy.stateful.module.Module.v"]], "batchnorm2d (class in ivy.stateful.norms)": [[792, "ivy.stateful.norms.BatchNorm2D"]], "layernorm (class in ivy.stateful.norms)": [[792, "ivy.stateful.norms.LayerNorm"]], "__init__() (ivy.stateful.norms.batchnorm2d method)": [[792, "ivy.stateful.norms.BatchNorm2D.__init__"]], "__init__() (ivy.stateful.norms.layernorm method)": [[792, "ivy.stateful.norms.LayerNorm.__init__"]], "ivy.stateful.norms": [[792, "module-ivy.stateful.norms"]], "adam (class in ivy.stateful.optimizers)": [[793, "ivy.stateful.optimizers.Adam"]], "adamw (class in ivy.stateful.optimizers)": [[793, "ivy.stateful.optimizers.AdamW"]], "lamb (class in ivy.stateful.optimizers)": [[793, "ivy.stateful.optimizers.LAMB"]], "lars (class in ivy.stateful.optimizers)": [[793, "ivy.stateful.optimizers.LARS"]], "optimizer (class in ivy.stateful.optimizers)": [[793, "ivy.stateful.optimizers.Optimizer"]], "sgd (class in ivy.stateful.optimizers)": [[793, "ivy.stateful.optimizers.SGD"]], "__init__() (ivy.stateful.optimizers.adam method)": [[793, "ivy.stateful.optimizers.Adam.__init__"]], "__init__() (ivy.stateful.optimizers.adamw method)": [[793, "ivy.stateful.optimizers.AdamW.__init__"]], "__init__() (ivy.stateful.optimizers.lamb method)": [[793, "ivy.stateful.optimizers.LAMB.__init__"]], "__init__() (ivy.stateful.optimizers.lars method)": [[793, "ivy.stateful.optimizers.LARS.__init__"]], "__init__() (ivy.stateful.optimizers.optimizer method)": [[793, "ivy.stateful.optimizers.Optimizer.__init__"]], "__init__() (ivy.stateful.optimizers.sgd method)": [[793, "ivy.stateful.optimizers.SGD.__init__"]], "ivy.stateful.optimizers": [[793, "module-ivy.stateful.optimizers"]], "set_state() (ivy.stateful.optimizers.adam method)": [[793, "ivy.stateful.optimizers.Adam.set_state"]], "set_state() (ivy.stateful.optimizers.lamb method)": [[793, "ivy.stateful.optimizers.LAMB.set_state"]], "set_state() (ivy.stateful.optimizers.lars method)": [[793, "ivy.stateful.optimizers.LARS.set_state"]], "set_state() (ivy.stateful.optimizers.optimizer method)": [[793, "ivy.stateful.optimizers.Optimizer.set_state"]], "set_state() (ivy.stateful.optimizers.sgd method)": [[793, "ivy.stateful.optimizers.SGD.set_state"]], "state (ivy.stateful.optimizers.adam property)": [[793, "ivy.stateful.optimizers.Adam.state"]], "state (ivy.stateful.optimizers.lamb property)": [[793, "ivy.stateful.optimizers.LAMB.state"]], "state (ivy.stateful.optimizers.lars property)": [[793, "ivy.stateful.optimizers.LARS.state"]], "state (ivy.stateful.optimizers.sgd property)": [[793, "ivy.stateful.optimizers.SGD.state"]], "step() (ivy.stateful.optimizers.optimizer method)": [[793, "ivy.stateful.optimizers.Optimizer.step"]], "sequential (class in ivy.stateful.sequential)": [[794, "ivy.stateful.sequential.Sequential"]], "__init__() (ivy.stateful.sequential.sequential method)": [[794, "ivy.stateful.sequential.Sequential.__init__"]], "ivy.stateful.sequential": [[794, "module-ivy.stateful.sequential"]], "check_all() (in module ivy.utils.assertions)": [[795, "ivy.utils.assertions.check_all"]], "check_all_or_any_fn() (in module ivy.utils.assertions)": [[795, "ivy.utils.assertions.check_all_or_any_fn"]], "check_any() (in module ivy.utils.assertions)": [[795, "ivy.utils.assertions.check_any"]], "check_dev_correct_formatting() (in module ivy.utils.assertions)": [[795, "ivy.utils.assertions.check_dev_correct_formatting"]], "check_dimensions() (in module ivy.utils.assertions)": [[795, "ivy.utils.assertions.check_dimensions"]], "check_elem_in_list() (in module ivy.utils.assertions)": [[795, "ivy.utils.assertions.check_elem_in_list"]], "check_equal() (in module ivy.utils.assertions)": [[795, "ivy.utils.assertions.check_equal"]], "check_exists() (in module ivy.utils.assertions)": [[795, "ivy.utils.assertions.check_exists"]], "check_false() (in module ivy.utils.assertions)": [[795, "ivy.utils.assertions.check_false"]], "check_gather_input_valid() (in module ivy.utils.assertions)": [[795, "ivy.utils.assertions.check_gather_input_valid"]], "check_gather_nd_input_valid() (in module ivy.utils.assertions)": [[795, "ivy.utils.assertions.check_gather_nd_input_valid"]], "check_greater() (in module ivy.utils.assertions)": [[795, "ivy.utils.assertions.check_greater"]], "check_inplace_sizes_valid() (in module ivy.utils.assertions)": [[795, "ivy.utils.assertions.check_inplace_sizes_valid"]], "check_isinstance() (in module ivy.utils.assertions)": [[795, "ivy.utils.assertions.check_isinstance"]], "check_kernel_padding_size() (in module ivy.utils.assertions)": [[795, "ivy.utils.assertions.check_kernel_padding_size"]], "check_less() (in module ivy.utils.assertions)": [[795, "ivy.utils.assertions.check_less"]], "check_one_way_broadcastable() (in module ivy.utils.assertions)": [[795, "ivy.utils.assertions.check_one_way_broadcastable"]], "check_same_dtype() (in module ivy.utils.assertions)": [[795, "ivy.utils.assertions.check_same_dtype"]], "check_shape() (in module ivy.utils.assertions)": [[795, "ivy.utils.assertions.check_shape"]], "check_shapes_broadcastable() (in module ivy.utils.assertions)": [[795, "ivy.utils.assertions.check_shapes_broadcastable"]], "check_true() (in module ivy.utils.assertions)": [[795, "ivy.utils.assertions.check_true"]], "check_unsorted_segment_valid_params() (in module ivy.utils.assertions)": [[795, "ivy.utils.assertions.check_unsorted_segment_valid_params"]], "ivy.utils.assertions": [[795, "module-ivy.utils.assertions"]], "ivy.utils.backend": [[796, "module-ivy.utils.backend"]], "importtransformer (class in ivy.utils.backend.ast_helpers)": [[797, "ivy.utils.backend.ast_helpers.ImportTransformer"]], "ivyloader (class in ivy.utils.backend.ast_helpers)": [[797, "ivy.utils.backend.ast_helpers.IvyLoader"]], "ivypathfinder (class in ivy.utils.backend.ast_helpers)": [[797, "ivy.utils.backend.ast_helpers.IvyPathFinder"]], "__init__() (ivy.utils.backend.ast_helpers.importtransformer method)": [[797, "ivy.utils.backend.ast_helpers.ImportTransformer.__init__"]], "__init__() (ivy.utils.backend.ast_helpers.ivyloader method)": [[797, "ivy.utils.backend.ast_helpers.IvyLoader.__init__"]], "exec_module() (ivy.utils.backend.ast_helpers.ivyloader method)": [[797, "ivy.utils.backend.ast_helpers.IvyLoader.exec_module"]], "find_spec() (ivy.utils.backend.ast_helpers.ivypathfinder method)": [[797, "ivy.utils.backend.ast_helpers.IvyPathFinder.find_spec"]], "impersonate_import() (ivy.utils.backend.ast_helpers.importtransformer method)": [[797, "ivy.utils.backend.ast_helpers.ImportTransformer.impersonate_import"]], "ivy.utils.backend.ast_helpers": [[797, "module-ivy.utils.backend.ast_helpers"]], "visit_import() (ivy.utils.backend.ast_helpers.importtransformer method)": [[797, "ivy.utils.backend.ast_helpers.ImportTransformer.visit_Import"]], "visit_importfrom() (ivy.utils.backend.ast_helpers.importtransformer method)": [[797, "ivy.utils.backend.ast_helpers.ImportTransformer.visit_ImportFrom"]], "contextmanager (class in ivy.utils.backend.handler)": [[798, "ivy.utils.backend.handler.ContextManager"]], "__init__() (ivy.utils.backend.handler.contextmanager method)": [[798, "ivy.utils.backend.handler.ContextManager.__init__"]], "choose_random_backend() (in module ivy.utils.backend.handler)": [[798, "ivy.utils.backend.handler.choose_random_backend"]], "current_backend() (in module ivy.utils.backend.handler)": [[798, "ivy.utils.backend.handler.current_backend"]], "dynamic_backend_converter() (in module ivy.utils.backend.handler)": [[798, "ivy.utils.backend.handler.dynamic_backend_converter"]], "ivy.utils.backend.handler": [[798, "module-ivy.utils.backend.handler"]], "prevent_access_locally() (in module ivy.utils.backend.handler)": [[798, "ivy.utils.backend.handler.prevent_access_locally"]], "previous_backend() (in module ivy.utils.backend.handler)": [[798, "ivy.utils.backend.handler.previous_backend"]], "set_backend() (in module ivy.utils.backend.handler)": [[798, "ivy.utils.backend.handler.set_backend"]], "set_backend_to_specific_version() (in module ivy.utils.backend.handler)": [[798, "ivy.utils.backend.handler.set_backend_to_specific_version"]], "set_jax_backend() (in module ivy.utils.backend.handler)": [[798, "ivy.utils.backend.handler.set_jax_backend"]], "set_mxnet_backend() (in module ivy.utils.backend.handler)": [[798, "ivy.utils.backend.handler.set_mxnet_backend"]], "set_numpy_backend() (in module ivy.utils.backend.handler)": [[798, "ivy.utils.backend.handler.set_numpy_backend"]], "set_paddle_backend() (in module ivy.utils.backend.handler)": [[798, "ivy.utils.backend.handler.set_paddle_backend"]], "set_tensorflow_backend() (in module ivy.utils.backend.handler)": [[798, "ivy.utils.backend.handler.set_tensorflow_backend"]], "set_torch_backend() (in module ivy.utils.backend.handler)": [[798, "ivy.utils.backend.handler.set_torch_backend"]], "unset_backend() (in module ivy.utils.backend.handler)": [[798, "ivy.utils.backend.handler.unset_backend"]], "with_backend() (in module ivy.utils.backend.handler)": [[798, "ivy.utils.backend.handler.with_backend"]], "clear_sub_backends() (in module ivy.utils.backend.sub_backend_handler)": [[799, "ivy.utils.backend.sub_backend_handler.clear_sub_backends"]], "find_available_sub_backends() (in module ivy.utils.backend.sub_backend_handler)": [[799, "ivy.utils.backend.sub_backend_handler.find_available_sub_backends"]], "fn_name_from_version_specific_fn_name() (in module ivy.utils.backend.sub_backend_handler)": [[799, "ivy.utils.backend.sub_backend_handler.fn_name_from_version_specific_fn_name"]], "fn_name_from_version_specific_fn_name_sub_backend() (in module ivy.utils.backend.sub_backend_handler)": [[799, "ivy.utils.backend.sub_backend_handler.fn_name_from_version_specific_fn_name_sub_backend"]], "ivy.utils.backend.sub_backend_handler": [[799, "module-ivy.utils.backend.sub_backend_handler"]], "set_sub_backend() (in module ivy.utils.backend.sub_backend_handler)": [[799, "ivy.utils.backend.sub_backend_handler.set_sub_backend"]], "set_sub_backend_to_specific_version() (in module ivy.utils.backend.sub_backend_handler)": [[799, "ivy.utils.backend.sub_backend_handler.set_sub_backend_to_specific_version"]], "unset_sub_backend() (in module ivy.utils.backend.sub_backend_handler)": [[799, "ivy.utils.backend.sub_backend_handler.unset_sub_backend"]], "check_for_binaries() (in module ivy.utils.binaries)": [[800, "ivy.utils.binaries.check_for_binaries"]], "cleanup_and_fetch_binaries() (in module ivy.utils.binaries)": [[800, "ivy.utils.binaries.cleanup_and_fetch_binaries"]], "ivy.utils.binaries": [[800, "module-ivy.utils.binaries"]], "import_module() (in module ivy.utils.dynamic_import)": [[801, "ivy.utils.dynamic_import.import_module"]], "ivy.utils.dynamic_import": [[801, "module-ivy.utils.dynamic_import"]], "convert_interleaved_input() (in module ivy.utils.einsum_parser)": [[802, "ivy.utils.einsum_parser.convert_interleaved_input"]], "convert_subscripts() (in module ivy.utils.einsum_parser)": [[802, "ivy.utils.einsum_parser.convert_subscripts"]], "find_output_shape() (in module ivy.utils.einsum_parser)": [[802, "ivy.utils.einsum_parser.find_output_shape"]], "find_output_str() (in module ivy.utils.einsum_parser)": [[802, "ivy.utils.einsum_parser.find_output_str"]], "gen_unused_symbols() (in module ivy.utils.einsum_parser)": [[802, "ivy.utils.einsum_parser.gen_unused_symbols"]], "get_symbol() (in module ivy.utils.einsum_parser)": [[802, "ivy.utils.einsum_parser.get_symbol"]], "has_valid_einsum_chars_only() (in module ivy.utils.einsum_parser)": [[802, "ivy.utils.einsum_parser.has_valid_einsum_chars_only"]], "is_valid_einsum_char() (in module ivy.utils.einsum_parser)": [[802, "ivy.utils.einsum_parser.is_valid_einsum_char"]], "ivy.utils.einsum_parser": [[802, "module-ivy.utils.einsum_parser"]], "legalise_einsum_expr() (in module ivy.utils.einsum_parser)": [[802, "ivy.utils.einsum_parser.legalise_einsum_expr"]], "possibly_convert_to_numpy() (in module ivy.utils.einsum_parser)": [[802, "ivy.utils.einsum_parser.possibly_convert_to_numpy"]], "can_dot() (in module ivy.utils.einsum_path_helpers)": [[803, "ivy.utils.einsum_path_helpers.can_dot"]], "compute_size_by_dict() (in module ivy.utils.einsum_path_helpers)": [[803, "ivy.utils.einsum_path_helpers.compute_size_by_dict"]], "find_contraction() (in module ivy.utils.einsum_path_helpers)": [[803, "ivy.utils.einsum_path_helpers.find_contraction"]], "flop_count() (in module ivy.utils.einsum_path_helpers)": [[803, "ivy.utils.einsum_path_helpers.flop_count"]], "greedy_path() (in module ivy.utils.einsum_path_helpers)": [[803, "ivy.utils.einsum_path_helpers.greedy_path"]], "ivy.utils.einsum_path_helpers": [[803, "module-ivy.utils.einsum_path_helpers"]], "optimal_path() (in module ivy.utils.einsum_path_helpers)": [[803, "ivy.utils.einsum_path_helpers.optimal_path"]], "parse_einsum_input() (in module ivy.utils.einsum_path_helpers)": [[803, "ivy.utils.einsum_path_helpers.parse_einsum_input"]], "parse_possible_contraction() (in module ivy.utils.einsum_path_helpers)": [[803, "ivy.utils.einsum_path_helpers.parse_possible_contraction"]], "update_other_results() (in module ivy.utils.einsum_path_helpers)": [[803, "ivy.utils.einsum_path_helpers.update_other_results"]], "inplaceupdateexception": [[804, "ivy.utils.exceptions.InplaceUpdateException"]], "ivyattributeerror": [[804, "ivy.utils.exceptions.IvyAttributeError"]], "ivybackendexception": [[804, "ivy.utils.exceptions.IvyBackendException"]], "ivybroadcastshapeerror": [[804, "ivy.utils.exceptions.IvyBroadcastShapeError"]], "ivydeviceerror": [[804, "ivy.utils.exceptions.IvyDeviceError"]], "ivydtypepromotionerror": [[804, "ivy.utils.exceptions.IvyDtypePromotionError"]], "ivyerror": [[804, "ivy.utils.exceptions.IvyError"]], "ivyexception": [[804, "ivy.utils.exceptions.IvyException"]], "ivyindexerror": [[804, "ivy.utils.exceptions.IvyIndexError"]], "ivyinvalidbackendexception": [[804, "ivy.utils.exceptions.IvyInvalidBackendException"]], "ivynotimplementedexception": [[804, "ivy.utils.exceptions.IvyNotImplementedException"]], "ivyvalueerror": [[804, "ivy.utils.exceptions.IvyValueError"]], "__init__() (ivy.utils.exceptions.inplaceupdateexception method)": [[804, "ivy.utils.exceptions.InplaceUpdateException.__init__"]], "__init__() (ivy.utils.exceptions.ivyattributeerror method)": [[804, "ivy.utils.exceptions.IvyAttributeError.__init__"]], "__init__() (ivy.utils.exceptions.ivybackendexception method)": [[804, "ivy.utils.exceptions.IvyBackendException.__init__"]], "__init__() (ivy.utils.exceptions.ivybroadcastshapeerror method)": [[804, "ivy.utils.exceptions.IvyBroadcastShapeError.__init__"]], "__init__() (ivy.utils.exceptions.ivydeviceerror method)": [[804, "ivy.utils.exceptions.IvyDeviceError.__init__"]], "__init__() (ivy.utils.exceptions.ivydtypepromotionerror method)": [[804, "ivy.utils.exceptions.IvyDtypePromotionError.__init__"]], "__init__() (ivy.utils.exceptions.ivyerror method)": [[804, "ivy.utils.exceptions.IvyError.__init__"]], "__init__() (ivy.utils.exceptions.ivyexception method)": [[804, "ivy.utils.exceptions.IvyException.__init__"]], "__init__() (ivy.utils.exceptions.ivyindexerror method)": [[804, "ivy.utils.exceptions.IvyIndexError.__init__"]], "__init__() (ivy.utils.exceptions.ivyinvalidbackendexception method)": [[804, "ivy.utils.exceptions.IvyInvalidBackendException.__init__"]], "__init__() (ivy.utils.exceptions.ivynotimplementedexception method)": [[804, "ivy.utils.exceptions.IvyNotImplementedException.__init__"]], "__init__() (ivy.utils.exceptions.ivyvalueerror method)": [[804, "ivy.utils.exceptions.IvyValueError.__init__"]], "handle_exceptions() (in module ivy.utils.exceptions)": [[804, "ivy.utils.exceptions.handle_exceptions"]], "ivy.utils.exceptions": [[804, "module-ivy.utils.exceptions"]], "add_array_specs() (in module ivy.utils.inspection)": [[805, "ivy.utils.inspection.add_array_specs"]], "fn_array_spec() (in module ivy.utils.inspection)": [[805, "ivy.utils.inspection.fn_array_spec"]], "ivy.utils.inspection": [[805, "module-ivy.utils.inspection"]], "ivy.utils.logging": [[806, "module-ivy.utils.logging"]], "set_logging_mode() (in module ivy.utils.logging)": [[806, "ivy.utils.logging.set_logging_mode"]], "unset_logging_mode() (in module ivy.utils.logging)": [[806, "ivy.utils.logging.unset_logging_mode"]], "profiler (class in ivy.utils.profiler)": [[807, "ivy.utils.profiler.Profiler"]], "__init__() (ivy.utils.profiler.profiler method)": [[807, "ivy.utils.profiler.Profiler.__init__"]], "ivy.utils.profiler": [[807, "module-ivy.utils.profiler"]], "print_stats (ivy.utils.profiler.profiler attribute)": [[807, "ivy.utils.profiler.Profiler.print_stats"]], "tensorflow_profile_start() (in module ivy.utils.profiler)": [[807, "ivy.utils.profiler.tensorflow_profile_start"]], "tensorflow_profile_stop() (in module ivy.utils.profiler)": [[807, "ivy.utils.profiler.tensorflow_profile_stop"]], "torch_profiler_init() (in module ivy.utils.profiler)": [[807, "ivy.utils.profiler.torch_profiler_init"]], "torch_profiler_start() (in module ivy.utils.profiler)": [[807, "ivy.utils.profiler.torch_profiler_start"]], "torch_profiler_stop() (in module ivy.utils.profiler)": [[807, "ivy.utils.profiler.torch_profiler_stop"]], "viz (ivy.utils.profiler.profiler attribute)": [[807, "ivy.utils.profiler.Profiler.viz"]], "cprint() (in module ivy.utils.verbosity)": [[808, "ivy.utils.verbosity.cprint"]], "ivy.utils.verbosity": [[808, "module-ivy.utils.verbosity"]], "automatic code conversions": [[854, "term-Automatic-Code-Conversions"]], "backend handler": [[854, "term-Backend-Handler"]], "compositional functions": [[854, "term-Compositional-Functions"]], "convenience functions": [[854, "term-Convenience-Functions"]], "framework": [[854, "term-Framework"]], "framework handler": [[854, "term-Framework-Handler"]], "graph compiler": [[854, "term-Graph-Compiler"]], "ivy array": [[854, "term-Ivy-Array"]], "ivy backends": [[854, "term-Ivy-Backends"]], "ivy compiler": [[854, "term-Ivy-Compiler"]], "ivy container": [[854, "term-Ivy-Container"]], "ivy frontends": [[854, "term-Ivy-Frontends"]], "ivy functional api": [[854, "term-Ivy-Functional-API"]], "ivy tracer": [[854, "term-Ivy-Tracer"]], "ivy transpiler": [[854, "term-Ivy-Transpiler"]], "mixed functions": [[854, "term-Mixed-Functions"]], "native array": [[854, "term-Native-Array"]], "nestable functions": [[854, "term-Nestable-Functions"]], "pipeline": [[854, "term-Pipeline"]], "primary functions": [[854, "term-Primary-Functions"]], "standalone functions": [[854, "term-Standalone-Functions"]], "submodule helper functions": [[854, "term-Submodule-Helper-Functions"]], "built-in function": [[860, "ivy.trace_graph"], [861, "ivy.transpile"], [862, "ivy.unify"]], "ivy.trace_graph()": [[860, "ivy.trace_graph"]], "ivy.transpile()": [[861, "ivy.transpile"]], "ivy.unify()": [[862, "ivy.unify"]]}})